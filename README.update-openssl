/***************************************************************************

 AmiSSL - OpenSSL wrapper for AmigaOS-based systems
 Copyright (C) 1999-2006 Andrija Antonijevic, Stefan Burstroem
 Copyright (C) 2006-2021 AmiSSL Open Source Team

 This library is free software; you can redistribute it and/or
 modify it under the terms of the GNU Lesser General Public
 License as published by the Free Software Foundation; either
 version 3 of the License, or (at your option) any later version.

 This library is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 Lesser General Public License for more details.

 AmiSSL Official Support Site:  https://github.com/jens-maus/amissl

***************************************************************************/

This is a short documentation on how to update the OpenSSL kernel within
the AmiSSL repository. We are actually using the "git subtree" functionality
to be able to easily merge new updated OpenSSL versions into our git
repository. So please refer to [1] and [2] for more information on git
subtrees.

HowTo update the OpenSSL version in "openssl/":

1. To merge in a new OpenSSL version execute the following git command
   within a working copy of the AmiSSL repository:
   
   $ git subtree pull --prefix openssl --squash https://github.com/openssl/openssl.git OpenSSL_1_0_2f

   Note, that "OpenSSL_1_0_2f" can be replaced by any branch or tag of
   the OpenSSL git repository at github.com.

   After execution of the above subtree command git will try to merge in all
   changes between the currently utilized OpenSSL version and the one specified
   and also adds the local changes applied due to our AmiSSL changes.

2. In many cases the above command will result in merge conflicts which you
   need to resolve accordingly before you can commit the changes accordingly.

   Use the following command to display a list of files still in conflict:

   $ git diff --name-only --diff-filter=U

3. Do a "git diff HEAD" to check what has actually changed in OpenSSL since the last
   version:

   $ git diff HEAD

   Especially interesting are changes to:

   $ git diff HEAD openssl/util/libssl.num
   $ git diff HEAD openssl/util/libcrypto.num

   In there the OpenSSL crew usually registered changes to the internal+external API,
   e.g. removal or addition of functions. Note, however, that changes to existing
   functions have to be looked up by reviewing all changes in the   
   'openssl/include/openssl' path. Thus, a simple command like

   $ git diff HEAD openssl/include/openssl

   should reveal changes to the public API.

   -> use also the online ABI tracker to review API/ABI changes:
      http://abi-laboratory.pro/tracker/timeline/openssl/index.html
  
4. If you identified changes to the public API you will have to adapt the following
   xml description file:

   include/xml/amissl.xml

   When changing the "include/xml/amissl.xml" file the following rules apply:
   -> don't remove any function but flag them as "unimplemented"
   -> only add new functions to the bottom of the xml file and not between
      existing function definitions.
   -> 'va_list' types won't work, have a look at how "long *" is used instead
      (e.g. for BIO_printf)
   -> be sure to declare varargs functions directly after their stdargs
      counterpart, as this is critical for the m68k build
   -> follow existing m68k register allocation rules, prioritising d0-d7 for
      non-pointer arguments and a0-a3 for pointers, incrementally using them in
      the order of the arguments, using a4 only after exhausting the other 12
      registers, with the exception of...
   -> make sure 64-bit arguments (e.g. double, long long, uint64_t, int64_t)
      explictly declare the m68k 32-bit register pair to use (e.g. d0-d1).
      Additionally, for VBCC compatibility, try to use only even pairs (i.e.
      either d0-d1, d2-d3, d4-d5 or d6-d7) and reallocate other arguments to help.
   -> a4 and a5 are best avoided because GCC has trouble when these are used. If
      there is no other choice, then you will need to write the reg->stack
      stub function in assembler, adding it to amissl_glue_a4a5.s and updating
      amissl_glue.patch accordingly to remove the C version for OS3 only

   NOTE: tools/newXMLhelper.pl can be used to help with this, cross-referencing
   various files and finally generating the required xml output which you may
   then manually add to the end of amissl.xml - however, the output should
   still be verified manually as it might not handle every single case.

5. Afterwards you will have to regenerate all interface description files (sfd, fd,
   protos, etc.) using the following command-line:

   $ cd src
   $ ./mkidl.sh

   Please note that this will only work if you have the latest idltool (53.28 being
   the current minimum requirement), etc. installed in your cross compiler environment.

6. Check "include/amissl/amissl.h" to directly include all existing header files
   located in "include/openssl/". Due to some header file changes of newer versions
   amissl.h needs usually some tuning.

7. Modify the top-level 'Makefile' and change the following sections:

     VERSION=4
     VERSIONNAME=110b
     AMISSLREVISION=0
     AMISSLMASTERREVISION=0
     AMISSLDATE=26.09.2016
     AMISSLMASTERDATE=26.09.2016

   Modify VERSIONNAME to match the OpenSSL version. Also set AMISSLDATE and
   AMISSLMASTERDATE to the release date of the OpenSSL version you just merged.

8. Modify the "src/amisslmaster_library.c" and "include/libraries/amisslmaster.h"
   files and have a look for the following type of sections in OpenAmiSSL():

   -- cut here --
   if(LibAPIVersion == AMISSL_V11x)
   {
    [...]
    OpenLib(&AmiSSLBase,"libs:amissl/amissl_v110b.library", 4);
    [...]
   }
   -- cut here --

   Make sure you add a new OpenLib() call in the right section (and with the correct
   logic) so that the newly created "amissl_vXXX.library" can be opneed by the
   amisslmaster.library.
 
   When new functions are added to amissl.xml you must create a new AMISSL_Vnnnx
   definition in "libraries/amisslmaster.library" and ensure the logic added above
   allows older applications to load newer backwards compatible libraries, but
   prevent new applications (requiring newly added OpenSSL API functions) from
   loading older libraries (otherwise crashes will occur).

9. Review all changes with "git status" and make sure to commit everything
   properly. Also use "git diff HEAD" at the end again to double check your changes.



HowTo generate a diff file of our OpenSSL changes:

1. Add a remote 'openssl' branch to your git working copy and fetch all branches
   and tags accordingly:

   $ git remote add openssl https://github.com/openssl/openssl.git
   $ git fetch openssl
   $ git fetch -t openssl

2. Generate the diff from the top-level dir of your working copy.

   $ git diff OpenSSL_1_0_2f master:openssl
  
   to generate a diff to a remote branch use the following command instead:

   $ git diff master:openssl remotes/openssl/master

References:

[1] https://gist.github.com/kvnsmth/4688345
[2] https://medium.com/@v/git-subtrees-a-tutorial-6ff568381844#.q7ivzd39l
