/* Automatically generated header (sfdc 1.12)! Do not edit! */

#ifndef _INLINE_AMISSL_H
#define _INLINE_AMISSL_H

#ifndef _SFDC_VARARG_DEFINED
#define _SFDC_VARARG_DEFINED
#ifdef __HAVE_IPTR_ATTR__
typedef APTR _sfdc_vararg __attribute__((iptr));
#else
typedef ULONG _sfdc_vararg;
#endif /* __HAVE_IPTR_ATTR__ */
#endif /* _SFDC_VARARG_DEFINED */

#ifndef AROS_LIBCALL_H
#include <aros/libcall.h>
#endif /* !AROS_LIBCALL_H */

#ifndef AMISSL_BASE_NAME
#define AMISSL_BASE_NAME AmiSSLBase
#endif /* !AMISSL_BASE_NAME */

#define InitAmiSSLA(___tagList) \
      AROS_LC1(long, InitAmiSSLA, \
 AROS_LCA(struct TagItem *, (___tagList), A0), \
     struct Library *, AMISSL_BASE_NAME, 6, Amissl)

#ifndef NO_INLINE_STDARG
#define InitAmiSSL(___tag, ...) \
    ({_sfdc_vararg _tags[] = { ___tag, __VA_ARGS__ }; InitAmiSSLA((struct TagItem *) _tags); })
#endif /* !NO_INLINE_STDARG */

#define CleanupAmiSSLA(___tagList) \
      AROS_LC1(long, CleanupAmiSSLA, \
 AROS_LCA(struct TagItem *, (___tagList), A0), \
     struct Library *, AMISSL_BASE_NAME, 7, Amissl)

#ifndef NO_INLINE_STDARG
#define CleanupAmiSSL(___tag, ...) \
    ({_sfdc_vararg _tags[] = { ___tag, __VA_ARGS__ }; CleanupAmiSSLA((struct TagItem *) _tags); })
#endif /* !NO_INLINE_STDARG */

#define ASN1_TYPE_new() \
      AROS_LC0(ASN1_TYPE *, ASN1_TYPE_new, \
     struct Library *, AMISSL_BASE_NAME, 17, Amissl)

#define ASN1_TYPE_free(___a) \
      AROS_LC1(void, ASN1_TYPE_free, \
 AROS_LCA(ASN1_TYPE *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 18, Amissl)

#define d2i_ASN1_TYPE(___a, ___in, ___len) \
      AROS_LC3(ASN1_TYPE *, d2i_ASN1_TYPE, \
 AROS_LCA(ASN1_TYPE **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 19, Amissl)

#define i2d_ASN1_TYPE(___a, ___out) \
      AROS_LC2(int, i2d_ASN1_TYPE, \
 AROS_LCA(const ASN1_TYPE *, (___a), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 20, Amissl)

#define ASN1_ANY_it() \
      AROS_LC0(const ASN1_ITEM *, ASN1_ANY_it, \
     struct Library *, AMISSL_BASE_NAME, 21, Amissl)

#define ASN1_TYPE_get(___a) \
      AROS_LC1(int, ASN1_TYPE_get, \
 AROS_LCA(const ASN1_TYPE *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 22, Amissl)

#define ASN1_TYPE_set(___a, ___type, ___value) \
      AROS_LC3(void, ASN1_TYPE_set, \
 AROS_LCA(ASN1_TYPE *, (___a), A0), \
 AROS_LCA(int, (___type), D0), \
 AROS_LCA(void *, (___value), A1), \
     struct Library *, AMISSL_BASE_NAME, 23, Amissl)

#define ASN1_OBJECT_new() \
      AROS_LC0(ASN1_OBJECT *, ASN1_OBJECT_new, \
     struct Library *, AMISSL_BASE_NAME, 24, Amissl)

#define ASN1_OBJECT_free(___a) \
      AROS_LC1(void, ASN1_OBJECT_free, \
 AROS_LCA(ASN1_OBJECT *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 25, Amissl)

#define i2d_ASN1_OBJECT(___a, ___pp) \
      AROS_LC2(int, i2d_ASN1_OBJECT, \
 AROS_LCA(const ASN1_OBJECT *, (___a), A0), \
 AROS_LCA(unsigned char **, (___pp), A1), \
     struct Library *, AMISSL_BASE_NAME, 26, Amissl)

#define d2i_ASN1_OBJECT(___a, ___pp, ___length) \
      AROS_LC3(ASN1_OBJECT *, d2i_ASN1_OBJECT, \
 AROS_LCA(ASN1_OBJECT **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___pp), A1), \
 AROS_LCA(long, (___length), D0), \
     struct Library *, AMISSL_BASE_NAME, 28, Amissl)

#define ASN1_OBJECT_it() \
      AROS_LC0(const ASN1_ITEM *, ASN1_OBJECT_it, \
     struct Library *, AMISSL_BASE_NAME, 29, Amissl)

#define ASN1_STRING_new() \
      AROS_LC0(ASN1_STRING *, ASN1_STRING_new, \
     struct Library *, AMISSL_BASE_NAME, 30, Amissl)

#define ASN1_STRING_free(___a) \
      AROS_LC1(void, ASN1_STRING_free, \
 AROS_LCA(ASN1_STRING *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 31, Amissl)

#define ASN1_STRING_dup(___a) \
      AROS_LC1(ASN1_STRING *, ASN1_STRING_dup, \
 AROS_LCA(const ASN1_STRING *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 32, Amissl)

#define ASN1_STRING_type_new(___type) \
      AROS_LC1(ASN1_STRING *, ASN1_STRING_type_new, \
 AROS_LCA(int, (___type), D0), \
     struct Library *, AMISSL_BASE_NAME, 33, Amissl)

#define ASN1_STRING_cmp(___a, ___b) \
      AROS_LC2(int, ASN1_STRING_cmp, \
 AROS_LCA(const ASN1_STRING *, (___a), A0), \
 AROS_LCA(const ASN1_STRING *, (___b), A1), \
     struct Library *, AMISSL_BASE_NAME, 34, Amissl)

#define ASN1_STRING_set(___str, ___data, ___len) \
      AROS_LC3(int, ASN1_STRING_set, \
 AROS_LCA(ASN1_STRING *, (___str), A0), \
 AROS_LCA(const void *, (___data), A1), \
 AROS_LCA(int, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 35, Amissl)

#define ASN1_STRING_length(___x) \
      AROS_LC1(int, ASN1_STRING_length, \
 AROS_LCA(const ASN1_STRING *, (___x), A0), \
     struct Library *, AMISSL_BASE_NAME, 36, Amissl)

#define ASN1_STRING_length_set(___x, ___n) \
      AROS_LC2(void, ASN1_STRING_length_set, \
 AROS_LCA(ASN1_STRING *, (___x), A0), \
 AROS_LCA(int, (___n), D0), \
     struct Library *, AMISSL_BASE_NAME, 37, Amissl)

#define ASN1_STRING_type(___x) \
      AROS_LC1(int, ASN1_STRING_type, \
 AROS_LCA(const ASN1_STRING *, (___x), A0), \
     struct Library *, AMISSL_BASE_NAME, 38, Amissl)

#define ASN1_STRING_data(___x) \
      AROS_LC1(unsigned char *, ASN1_STRING_data, \
 AROS_LCA(ASN1_STRING *, (___x), A0), \
     struct Library *, AMISSL_BASE_NAME, 39, Amissl)

#define ASN1_BIT_STRING_new() \
      AROS_LC0(ASN1_BIT_STRING *, ASN1_BIT_STRING_new, \
     struct Library *, AMISSL_BASE_NAME, 40, Amissl)

#define ASN1_BIT_STRING_free(___x) \
      AROS_LC1(void, ASN1_BIT_STRING_free, \
 AROS_LCA(ASN1_BIT_STRING *, (___x), A0), \
     struct Library *, AMISSL_BASE_NAME, 41, Amissl)

#define d2i_ASN1_BIT_STRING(___a, ___in, ___len) \
      AROS_LC3(ASN1_BIT_STRING *, d2i_ASN1_BIT_STRING, \
 AROS_LCA(ASN1_BIT_STRING **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 42, Amissl)

#define i2d_ASN1_BIT_STRING(___a, ___out) \
      AROS_LC2(int, i2d_ASN1_BIT_STRING, \
 AROS_LCA(const ASN1_BIT_STRING *, (___a), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 43, Amissl)

#define ASN1_BIT_STRING_it() \
      AROS_LC0(const ASN1_ITEM *, ASN1_BIT_STRING_it, \
     struct Library *, AMISSL_BASE_NAME, 44, Amissl)

#define ASN1_BIT_STRING_set(___a, ___d, ___length) \
      AROS_LC3(int, ASN1_BIT_STRING_set, \
 AROS_LCA(ASN1_BIT_STRING *, (___a), A0), \
 AROS_LCA(unsigned char *, (___d), A1), \
 AROS_LCA(int, (___length), D0), \
     struct Library *, AMISSL_BASE_NAME, 47, Amissl)

#define ASN1_BIT_STRING_set_bit(___a, ___n, ___value) \
      AROS_LC3(int, ASN1_BIT_STRING_set_bit, \
 AROS_LCA(ASN1_BIT_STRING *, (___a), A0), \
 AROS_LCA(int, (___n), D0), \
 AROS_LCA(int, (___value), D1), \
     struct Library *, AMISSL_BASE_NAME, 48, Amissl)

#define ASN1_BIT_STRING_get_bit(___a, ___n) \
      AROS_LC2(int, ASN1_BIT_STRING_get_bit, \
 AROS_LCA(const ASN1_BIT_STRING *, (___a), A0), \
 AROS_LCA(int, (___n), D0), \
     struct Library *, AMISSL_BASE_NAME, 49, Amissl)

#define ASN1_BIT_STRING_name_print(___out, ___bs, ___tbl, ___indent) \
      AROS_LC4(int, ASN1_BIT_STRING_name_print, \
 AROS_LCA(BIO *, (___out), A0), \
 AROS_LCA(ASN1_BIT_STRING *, (___bs), A1), \
 AROS_LCA(BIT_STRING_BITNAME *, (___tbl), A2), \
 AROS_LCA(int, (___indent), D0), \
     struct Library *, AMISSL_BASE_NAME, 50, Amissl)

#define ASN1_BIT_STRING_num_asc(___name, ___tbl) \
      AROS_LC2(int, ASN1_BIT_STRING_num_asc, \
 AROS_LCA(const char *, (___name), A0), \
 AROS_LCA(BIT_STRING_BITNAME *, (___tbl), A1), \
     struct Library *, AMISSL_BASE_NAME, 51, Amissl)

#define ASN1_BIT_STRING_set_asc(___bs, ___name, ___value, ___tbl) \
      AROS_LC4(int, ASN1_BIT_STRING_set_asc, \
 AROS_LCA(ASN1_BIT_STRING *, (___bs), A0), \
 AROS_LCA(const char *, (___name), A1), \
 AROS_LCA(int, (___value), D0), \
 AROS_LCA(BIT_STRING_BITNAME *, (___tbl), A2), \
     struct Library *, AMISSL_BASE_NAME, 52, Amissl)

#define ASN1_INTEGER_new() \
      AROS_LC0(ASN1_INTEGER *, ASN1_INTEGER_new, \
     struct Library *, AMISSL_BASE_NAME, 55, Amissl)

#define ASN1_INTEGER_free(___x) \
      AROS_LC1(void, ASN1_INTEGER_free, \
 AROS_LCA(ASN1_INTEGER *, (___x), A0), \
     struct Library *, AMISSL_BASE_NAME, 56, Amissl)

#define d2i_ASN1_INTEGER(___a, ___in, ___len) \
      AROS_LC3(ASN1_INTEGER *, d2i_ASN1_INTEGER, \
 AROS_LCA(ASN1_INTEGER **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 57, Amissl)

#define i2d_ASN1_INTEGER(___a, ___out) \
      AROS_LC2(int, i2d_ASN1_INTEGER, \
 AROS_LCA(const ASN1_INTEGER *, (___a), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 58, Amissl)

#define ASN1_INTEGER_it() \
      AROS_LC0(const ASN1_ITEM *, ASN1_INTEGER_it, \
     struct Library *, AMISSL_BASE_NAME, 59, Amissl)

#define d2i_ASN1_UINTEGER(___a, ___pp, ___length) \
      AROS_LC3(ASN1_INTEGER *, d2i_ASN1_UINTEGER, \
 AROS_LCA(ASN1_INTEGER **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___pp), A1), \
 AROS_LCA(long, (___length), D0), \
     struct Library *, AMISSL_BASE_NAME, 62, Amissl)

#define ASN1_INTEGER_dup(___x) \
      AROS_LC1(ASN1_INTEGER *, ASN1_INTEGER_dup, \
 AROS_LCA(const ASN1_INTEGER *, (___x), A0), \
     struct Library *, AMISSL_BASE_NAME, 63, Amissl)

#define ASN1_INTEGER_cmp(___x, ___y) \
      AROS_LC2(int, ASN1_INTEGER_cmp, \
 AROS_LCA(const ASN1_INTEGER *, (___x), A0), \
 AROS_LCA(const ASN1_INTEGER *, (___y), A1), \
     struct Library *, AMISSL_BASE_NAME, 64, Amissl)

#define ASN1_ENUMERATED_new() \
      AROS_LC0(ASN1_ENUMERATED *, ASN1_ENUMERATED_new, \
     struct Library *, AMISSL_BASE_NAME, 65, Amissl)

#define ASN1_ENUMERATED_free(___x) \
      AROS_LC1(void, ASN1_ENUMERATED_free, \
 AROS_LCA(ASN1_ENUMERATED *, (___x), A0), \
     struct Library *, AMISSL_BASE_NAME, 66, Amissl)

#define d2i_ASN1_ENUMERATED(___a, ___in, ___len) \
      AROS_LC3(ASN1_ENUMERATED *, d2i_ASN1_ENUMERATED, \
 AROS_LCA(ASN1_ENUMERATED **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 67, Amissl)

#define i2d_ASN1_ENUMERATED(___a, ___out) \
      AROS_LC2(int, i2d_ASN1_ENUMERATED, \
 AROS_LCA(const ASN1_ENUMERATED *, (___a), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 68, Amissl)

#define ASN1_ENUMERATED_it() \
      AROS_LC0(const ASN1_ITEM *, ASN1_ENUMERATED_it, \
     struct Library *, AMISSL_BASE_NAME, 69, Amissl)

#define ASN1_UTCTIME_check(___a) \
      AROS_LC1(int, ASN1_UTCTIME_check, \
 AROS_LCA(const ASN1_UTCTIME *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 70, Amissl)

#define ASN1_UTCTIME_set(___s, ___t) \
      AROS_LC2(ASN1_UTCTIME *, ASN1_UTCTIME_set, \
 AROS_LCA(ASN1_UTCTIME *, (___s), A0), \
 AROS_LCA(time_t, (___t), D0), \
     struct Library *, AMISSL_BASE_NAME, 71, Amissl)

#define ASN1_UTCTIME_set_string(___s, ___str) \
      AROS_LC2(int, ASN1_UTCTIME_set_string, \
 AROS_LCA(ASN1_UTCTIME *, (___s), A0), \
 AROS_LCA(const char *, (___str), A1), \
     struct Library *, AMISSL_BASE_NAME, 72, Amissl)

#define ASN1_UTCTIME_cmp_time_t(___s, ___t) \
      AROS_LC2(int, ASN1_UTCTIME_cmp_time_t, \
 AROS_LCA(const ASN1_UTCTIME *, (___s), A0), \
 AROS_LCA(time_t, (___t), D0), \
     struct Library *, AMISSL_BASE_NAME, 73, Amissl)

#define ASN1_GENERALIZEDTIME_check(___a) \
      AROS_LC1(int, ASN1_GENERALIZEDTIME_check, \
 AROS_LCA(const ASN1_GENERALIZEDTIME *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 74, Amissl)

#define ASN1_GENERALIZEDTIME_set(___s, ___t) \
      AROS_LC2(ASN1_GENERALIZEDTIME *, ASN1_GENERALIZEDTIME_set, \
 AROS_LCA(ASN1_GENERALIZEDTIME *, (___s), A0), \
 AROS_LCA(time_t, (___t), D0), \
     struct Library *, AMISSL_BASE_NAME, 75, Amissl)

#define ASN1_GENERALIZEDTIME_set_string(___s, ___str) \
      AROS_LC2(int, ASN1_GENERALIZEDTIME_set_string, \
 AROS_LCA(ASN1_GENERALIZEDTIME *, (___s), A0), \
 AROS_LCA(const char *, (___str), A1), \
     struct Library *, AMISSL_BASE_NAME, 76, Amissl)

#define ASN1_OCTET_STRING_new() \
      AROS_LC0(ASN1_OCTET_STRING *, ASN1_OCTET_STRING_new, \
     struct Library *, AMISSL_BASE_NAME, 77, Amissl)

#define ASN1_OCTET_STRING_free(___x) \
      AROS_LC1(void, ASN1_OCTET_STRING_free, \
 AROS_LCA(ASN1_OCTET_STRING *, (___x), A0), \
     struct Library *, AMISSL_BASE_NAME, 78, Amissl)

#define d2i_ASN1_OCTET_STRING(___a, ___in, ___len) \
      AROS_LC3(ASN1_OCTET_STRING *, d2i_ASN1_OCTET_STRING, \
 AROS_LCA(ASN1_OCTET_STRING **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 79, Amissl)

#define i2d_ASN1_OCTET_STRING(___a, ___out) \
      AROS_LC2(int, i2d_ASN1_OCTET_STRING, \
 AROS_LCA(const ASN1_OCTET_STRING *, (___a), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 80, Amissl)

#define ASN1_OCTET_STRING_it() \
      AROS_LC0(const ASN1_ITEM *, ASN1_OCTET_STRING_it, \
     struct Library *, AMISSL_BASE_NAME, 81, Amissl)

#define ASN1_OCTET_STRING_dup(___a) \
      AROS_LC1(ASN1_OCTET_STRING *, ASN1_OCTET_STRING_dup, \
 AROS_LCA(const ASN1_OCTET_STRING *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 82, Amissl)

#define ASN1_OCTET_STRING_cmp(___a, ___b) \
      AROS_LC2(int, ASN1_OCTET_STRING_cmp, \
 AROS_LCA(const ASN1_OCTET_STRING *, (___a), A0), \
 AROS_LCA(const ASN1_OCTET_STRING *, (___b), A1), \
     struct Library *, AMISSL_BASE_NAME, 83, Amissl)

#define ASN1_OCTET_STRING_set(___str, ___data, ___len) \
      AROS_LC3(int, ASN1_OCTET_STRING_set, \
 AROS_LCA(ASN1_OCTET_STRING *, (___str), A0), \
 AROS_LCA(const unsigned char *, (___data), A1), \
 AROS_LCA(int, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 84, Amissl)

#define ASN1_VISIBLESTRING_new() \
      AROS_LC0(ASN1_VISIBLESTRING *, ASN1_VISIBLESTRING_new, \
     struct Library *, AMISSL_BASE_NAME, 85, Amissl)

#define ASN1_VISIBLESTRING_free(___a) \
      AROS_LC1(void, ASN1_VISIBLESTRING_free, \
 AROS_LCA(ASN1_VISIBLESTRING *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 86, Amissl)

#define d2i_ASN1_VISIBLESTRING(___a, ___in, ___len) \
      AROS_LC3(ASN1_VISIBLESTRING *, d2i_ASN1_VISIBLESTRING, \
 AROS_LCA(ASN1_VISIBLESTRING **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 87, Amissl)

#define i2d_ASN1_VISIBLESTRING(___a, ___out) \
      AROS_LC2(int, i2d_ASN1_VISIBLESTRING, \
 AROS_LCA(const ASN1_VISIBLESTRING *, (___a), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 88, Amissl)

#define ASN1_VISIBLESTRING_it() \
      AROS_LC0(const ASN1_ITEM *, ASN1_VISIBLESTRING_it, \
     struct Library *, AMISSL_BASE_NAME, 89, Amissl)

#define ASN1_UNIVERSALSTRING_new() \
      AROS_LC0(ASN1_UNIVERSALSTRING *, ASN1_UNIVERSALSTRING_new, \
     struct Library *, AMISSL_BASE_NAME, 90, Amissl)

#define ASN1_UNIVERSALSTRING_free(___a) \
      AROS_LC1(void, ASN1_UNIVERSALSTRING_free, \
 AROS_LCA(ASN1_UNIVERSALSTRING *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 91, Amissl)

#define d2i_ASN1_UNIVERSALSTRING(___a, ___in, ___len) \
      AROS_LC3(ASN1_UNIVERSALSTRING *, d2i_ASN1_UNIVERSALSTRING, \
 AROS_LCA(ASN1_UNIVERSALSTRING **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 92, Amissl)

#define i2d_ASN1_UNIVERSALSTRING(___a, ___out) \
      AROS_LC2(int, i2d_ASN1_UNIVERSALSTRING, \
 AROS_LCA(const ASN1_UNIVERSALSTRING *, (___a), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 93, Amissl)

#define ASN1_UNIVERSALSTRING_it() \
      AROS_LC0(const ASN1_ITEM *, ASN1_UNIVERSALSTRING_it, \
     struct Library *, AMISSL_BASE_NAME, 94, Amissl)

#define ASN1_UTF8STRING_new() \
      AROS_LC0(ASN1_UTF8STRING *, ASN1_UTF8STRING_new, \
     struct Library *, AMISSL_BASE_NAME, 95, Amissl)

#define ASN1_UTF8STRING_free(___x) \
      AROS_LC1(void, ASN1_UTF8STRING_free, \
 AROS_LCA(ASN1_UTF8STRING *, (___x), A0), \
     struct Library *, AMISSL_BASE_NAME, 96, Amissl)

#define d2i_ASN1_UTF8STRING(___a, ___in, ___len) \
      AROS_LC3(ASN1_UTF8STRING *, d2i_ASN1_UTF8STRING, \
 AROS_LCA(ASN1_UTF8STRING **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 97, Amissl)

#define i2d_ASN1_UTF8STRING(___a, ___out) \
      AROS_LC2(int, i2d_ASN1_UTF8STRING, \
 AROS_LCA(const ASN1_UTF8STRING *, (___a), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 98, Amissl)

#define ASN1_UTF8STRING_it() \
      AROS_LC0(const ASN1_ITEM *, ASN1_UTF8STRING_it, \
     struct Library *, AMISSL_BASE_NAME, 99, Amissl)

#define ASN1_NULL_new() \
      AROS_LC0(ASN1_NULL *, ASN1_NULL_new, \
     struct Library *, AMISSL_BASE_NAME, 100, Amissl)

#define ASN1_NULL_free(___a) \
      AROS_LC1(void, ASN1_NULL_free, \
 AROS_LCA(ASN1_NULL *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 101, Amissl)

#define d2i_ASN1_NULL(___a, ___in, ___len) \
      AROS_LC3(ASN1_NULL *, d2i_ASN1_NULL, \
 AROS_LCA(ASN1_NULL **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 102, Amissl)

#define i2d_ASN1_NULL(___a, ___out) \
      AROS_LC2(int, i2d_ASN1_NULL, \
 AROS_LCA(const ASN1_NULL *, (___a), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 103, Amissl)

#define ASN1_NULL_it() \
      AROS_LC0(const ASN1_ITEM *, ASN1_NULL_it, \
     struct Library *, AMISSL_BASE_NAME, 104, Amissl)

#define ASN1_BMPSTRING_new() \
      AROS_LC0(ASN1_BMPSTRING *, ASN1_BMPSTRING_new, \
     struct Library *, AMISSL_BASE_NAME, 105, Amissl)

#define ASN1_BMPSTRING_free(___a) \
      AROS_LC1(void, ASN1_BMPSTRING_free, \
 AROS_LCA(ASN1_BMPSTRING *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 106, Amissl)

#define d2i_ASN1_BMPSTRING(___a, ___in, ___len) \
      AROS_LC3(ASN1_BMPSTRING *, d2i_ASN1_BMPSTRING, \
 AROS_LCA(ASN1_BMPSTRING **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 107, Amissl)

#define i2d_ASN1_BMPSTRING(___a, ___out) \
      AROS_LC2(int, i2d_ASN1_BMPSTRING, \
 AROS_LCA(const ASN1_BMPSTRING *, (___a), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 108, Amissl)

#define ASN1_BMPSTRING_it() \
      AROS_LC0(const ASN1_ITEM *, ASN1_BMPSTRING_it, \
     struct Library *, AMISSL_BASE_NAME, 109, Amissl)

#define UTF8_getc(___str, ___len, ___val) \
      AROS_LC3(int, UTF8_getc, \
 AROS_LCA(const unsigned char *, (___str), A0), \
 AROS_LCA(int, (___len), D0), \
 AROS_LCA(unsigned long *, (___val), A1), \
     struct Library *, AMISSL_BASE_NAME, 110, Amissl)

#define UTF8_putc(___str, ___len, ___value) \
      AROS_LC3(int, UTF8_putc, \
 AROS_LCA(unsigned char *, (___str), A0), \
 AROS_LCA(int, (___len), D0), \
 AROS_LCA(unsigned long, (___value), D1), \
     struct Library *, AMISSL_BASE_NAME, 111, Amissl)

#define ASN1_PRINTABLE_new() \
      AROS_LC0(ASN1_STRING *, ASN1_PRINTABLE_new, \
     struct Library *, AMISSL_BASE_NAME, 112, Amissl)

#define ASN1_PRINTABLE_free(___a) \
      AROS_LC1(void, ASN1_PRINTABLE_free, \
 AROS_LCA(ASN1_STRING *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 113, Amissl)

#define d2i_ASN1_PRINTABLE(___a, ___in, ___len) \
      AROS_LC3(ASN1_STRING *, d2i_ASN1_PRINTABLE, \
 AROS_LCA(ASN1_STRING **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 114, Amissl)

#define i2d_ASN1_PRINTABLE(___a, ___out) \
      AROS_LC2(int, i2d_ASN1_PRINTABLE, \
 AROS_LCA(const ASN1_STRING *, (___a), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 115, Amissl)

#define ASN1_PRINTABLE_it() \
      AROS_LC0(const ASN1_ITEM *, ASN1_PRINTABLE_it, \
     struct Library *, AMISSL_BASE_NAME, 116, Amissl)

#define DIRECTORYSTRING_new() \
      AROS_LC0(ASN1_STRING *, DIRECTORYSTRING_new, \
     struct Library *, AMISSL_BASE_NAME, 117, Amissl)

#define DIRECTORYSTRING_free(___a) \
      AROS_LC1(void, DIRECTORYSTRING_free, \
 AROS_LCA(ASN1_STRING *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 118, Amissl)

#define d2i_DIRECTORYSTRING(___a, ___in, ___len) \
      AROS_LC3(ASN1_STRING *, d2i_DIRECTORYSTRING, \
 AROS_LCA(ASN1_STRING **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 119, Amissl)

#define i2d_DIRECTORYSTRING(___a, ___out) \
      AROS_LC2(int, i2d_DIRECTORYSTRING, \
 AROS_LCA(const ASN1_STRING *, (___a), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 120, Amissl)

#define DIRECTORYSTRING_it() \
      AROS_LC0(const ASN1_ITEM *, DIRECTORYSTRING_it, \
     struct Library *, AMISSL_BASE_NAME, 121, Amissl)

#define DISPLAYTEXT_new() \
      AROS_LC0(ASN1_STRING *, DISPLAYTEXT_new, \
     struct Library *, AMISSL_BASE_NAME, 122, Amissl)

#define DISPLAYTEXT_free(___a) \
      AROS_LC1(void, DISPLAYTEXT_free, \
 AROS_LCA(ASN1_STRING *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 123, Amissl)

#define d2i_DISPLAYTEXT(___a, ___in, ___len) \
      AROS_LC3(ASN1_STRING *, d2i_DISPLAYTEXT, \
 AROS_LCA(ASN1_STRING **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 124, Amissl)

#define i2d_DISPLAYTEXT(___a, ___out) \
      AROS_LC2(int, i2d_DISPLAYTEXT, \
 AROS_LCA(const ASN1_STRING *, (___a), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 125, Amissl)

#define DISPLAYTEXT_it() \
      AROS_LC0(const ASN1_ITEM *, DISPLAYTEXT_it, \
     struct Library *, AMISSL_BASE_NAME, 126, Amissl)

#define ASN1_PRINTABLESTRING_new() \
      AROS_LC0(ASN1_PRINTABLESTRING *, ASN1_PRINTABLESTRING_new, \
     struct Library *, AMISSL_BASE_NAME, 127, Amissl)

#define ASN1_PRINTABLESTRING_free(___a) \
      AROS_LC1(void, ASN1_PRINTABLESTRING_free, \
 AROS_LCA(ASN1_PRINTABLESTRING *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 128, Amissl)

#define d2i_ASN1_PRINTABLESTRING(___a, ___in, ___len) \
      AROS_LC3(ASN1_PRINTABLESTRING *, d2i_ASN1_PRINTABLESTRING, \
 AROS_LCA(ASN1_PRINTABLESTRING **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 129, Amissl)

#define i2d_ASN1_PRINTABLESTRING(___a, ___out) \
      AROS_LC2(int, i2d_ASN1_PRINTABLESTRING, \
 AROS_LCA(const ASN1_PRINTABLESTRING *, (___a), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 130, Amissl)

#define ASN1_PRINTABLESTRING_it() \
      AROS_LC0(const ASN1_ITEM *, ASN1_PRINTABLESTRING_it, \
     struct Library *, AMISSL_BASE_NAME, 131, Amissl)

#define ASN1_T61STRING_new() \
      AROS_LC0(ASN1_T61STRING *, ASN1_T61STRING_new, \
     struct Library *, AMISSL_BASE_NAME, 132, Amissl)

#define ASN1_T61STRING_free(___a) \
      AROS_LC1(void, ASN1_T61STRING_free, \
 AROS_LCA(ASN1_T61STRING *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 133, Amissl)

#define d2i_ASN1_T61STRING(___a, ___in, ___len) \
      AROS_LC3(ASN1_T61STRING *, d2i_ASN1_T61STRING, \
 AROS_LCA(ASN1_T61STRING **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 134, Amissl)

#define i2d_ASN1_T61STRING(___a, ___out) \
      AROS_LC2(int, i2d_ASN1_T61STRING, \
 AROS_LCA(const ASN1_T61STRING *, (___a), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 135, Amissl)

#define ASN1_T61STRING_it() \
      AROS_LC0(const ASN1_ITEM *, ASN1_T61STRING_it, \
     struct Library *, AMISSL_BASE_NAME, 136, Amissl)

#define ASN1_IA5STRING_new() \
      AROS_LC0(ASN1_IA5STRING *, ASN1_IA5STRING_new, \
     struct Library *, AMISSL_BASE_NAME, 137, Amissl)

#define ASN1_IA5STRING_free(___a) \
      AROS_LC1(void, ASN1_IA5STRING_free, \
 AROS_LCA(ASN1_IA5STRING *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 138, Amissl)

#define d2i_ASN1_IA5STRING(___a, ___in, ___len) \
      AROS_LC3(ASN1_IA5STRING *, d2i_ASN1_IA5STRING, \
 AROS_LCA(ASN1_IA5STRING **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 139, Amissl)

#define i2d_ASN1_IA5STRING(___a, ___out) \
      AROS_LC2(int, i2d_ASN1_IA5STRING, \
 AROS_LCA(const ASN1_IA5STRING *, (___a), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 140, Amissl)

#define ASN1_IA5STRING_it() \
      AROS_LC0(const ASN1_ITEM *, ASN1_IA5STRING_it, \
     struct Library *, AMISSL_BASE_NAME, 141, Amissl)

#define ASN1_GENERALSTRING_new() \
      AROS_LC0(ASN1_GENERALSTRING *, ASN1_GENERALSTRING_new, \
     struct Library *, AMISSL_BASE_NAME, 142, Amissl)

#define ASN1_GENERALSTRING_free(___a) \
      AROS_LC1(void, ASN1_GENERALSTRING_free, \
 AROS_LCA(ASN1_GENERALSTRING *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 143, Amissl)

#define d2i_ASN1_GENERALSTRING(___a, ___in, ___len) \
      AROS_LC3(ASN1_GENERALSTRING *, d2i_ASN1_GENERALSTRING, \
 AROS_LCA(ASN1_GENERALSTRING **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 144, Amissl)

#define i2d_ASN1_GENERALSTRING(___a, ___out) \
      AROS_LC2(int, i2d_ASN1_GENERALSTRING, \
 AROS_LCA(const ASN1_GENERALSTRING *, (___a), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 145, Amissl)

#define ASN1_GENERALSTRING_it() \
      AROS_LC0(const ASN1_ITEM *, ASN1_GENERALSTRING_it, \
     struct Library *, AMISSL_BASE_NAME, 146, Amissl)

#define ASN1_UTCTIME_new() \
      AROS_LC0(ASN1_UTCTIME *, ASN1_UTCTIME_new, \
     struct Library *, AMISSL_BASE_NAME, 147, Amissl)

#define ASN1_UTCTIME_free(___a) \
      AROS_LC1(void, ASN1_UTCTIME_free, \
 AROS_LCA(ASN1_UTCTIME *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 148, Amissl)

#define d2i_ASN1_UTCTIME(___a, ___in, ___len) \
      AROS_LC3(ASN1_UTCTIME *, d2i_ASN1_UTCTIME, \
 AROS_LCA(ASN1_UTCTIME **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 149, Amissl)

#define i2d_ASN1_UTCTIME(___a, ___out) \
      AROS_LC2(int, i2d_ASN1_UTCTIME, \
 AROS_LCA(const ASN1_UTCTIME *, (___a), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 150, Amissl)

#define ASN1_UTCTIME_it() \
      AROS_LC0(const ASN1_ITEM *, ASN1_UTCTIME_it, \
     struct Library *, AMISSL_BASE_NAME, 151, Amissl)

#define ASN1_GENERALIZEDTIME_new() \
      AROS_LC0(ASN1_GENERALIZEDTIME *, ASN1_GENERALIZEDTIME_new, \
     struct Library *, AMISSL_BASE_NAME, 152, Amissl)

#define ASN1_GENERALIZEDTIME_free(___x) \
      AROS_LC1(void, ASN1_GENERALIZEDTIME_free, \
 AROS_LCA(ASN1_GENERALIZEDTIME *, (___x), A0), \
     struct Library *, AMISSL_BASE_NAME, 153, Amissl)

#define d2i_ASN1_GENERALIZEDTIME(___a, ___in, ___len) \
      AROS_LC3(ASN1_GENERALIZEDTIME *, d2i_ASN1_GENERALIZEDTIME, \
 AROS_LCA(ASN1_GENERALIZEDTIME **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 154, Amissl)

#define i2d_ASN1_GENERALIZEDTIME(___a, ___out) \
      AROS_LC2(int, i2d_ASN1_GENERALIZEDTIME, \
 AROS_LCA(const ASN1_GENERALIZEDTIME *, (___a), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 155, Amissl)

#define ASN1_GENERALIZEDTIME_it() \
      AROS_LC0(const ASN1_ITEM *, ASN1_GENERALIZEDTIME_it, \
     struct Library *, AMISSL_BASE_NAME, 156, Amissl)

#define ASN1_TIME_new() \
      AROS_LC0(ASN1_TIME *, ASN1_TIME_new, \
     struct Library *, AMISSL_BASE_NAME, 157, Amissl)

#define ASN1_TIME_free(___a) \
      AROS_LC1(void, ASN1_TIME_free, \
 AROS_LCA(ASN1_TIME *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 158, Amissl)

#define d2i_ASN1_TIME(___a, ___in, ___len) \
      AROS_LC3(ASN1_TIME *, d2i_ASN1_TIME, \
 AROS_LCA(ASN1_TIME **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 159, Amissl)

#define i2d_ASN1_TIME(___a, ___out) \
      AROS_LC2(int, i2d_ASN1_TIME, \
 AROS_LCA(const ASN1_TIME *, (___a), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 160, Amissl)

#define ASN1_TIME_it() \
      AROS_LC0(const ASN1_ITEM *, ASN1_TIME_it, \
     struct Library *, AMISSL_BASE_NAME, 161, Amissl)

#define ASN1_TIME_set(___s, ___t) \
      AROS_LC2(ASN1_TIME *, ASN1_TIME_set, \
 AROS_LCA(ASN1_TIME *, (___s), A0), \
 AROS_LCA(time_t, (___t), D0), \
     struct Library *, AMISSL_BASE_NAME, 162, Amissl)

#define ASN1_TIME_check(___t) \
      AROS_LC1(int, ASN1_TIME_check, \
 AROS_LCA(const ASN1_TIME *, (___t), A0), \
     struct Library *, AMISSL_BASE_NAME, 163, Amissl)

#define ASN1_TIME_to_generalizedtime(___t, ___out) \
      AROS_LC2(ASN1_GENERALIZEDTIME *, ASN1_TIME_to_generalizedtime, \
 AROS_LCA(const ASN1_TIME *, (___t), A0), \
 AROS_LCA(ASN1_GENERALIZEDTIME **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 164, Amissl)

#define i2a_ASN1_INTEGER(___bp, ___a) \
      AROS_LC2(int, i2a_ASN1_INTEGER, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(const ASN1_INTEGER *, (___a), A1), \
     struct Library *, AMISSL_BASE_NAME, 167, Amissl)

#define a2i_ASN1_INTEGER(___bp, ___bs, ___buf, ___size) \
      AROS_LC4(int, a2i_ASN1_INTEGER, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(ASN1_INTEGER *, (___bs), A1), \
 AROS_LCA(char *, (___buf), A2), \
 AROS_LCA(int, (___size), D0), \
     struct Library *, AMISSL_BASE_NAME, 168, Amissl)

#define i2a_ASN1_ENUMERATED(___bp, ___a) \
      AROS_LC2(int, i2a_ASN1_ENUMERATED, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(const ASN1_ENUMERATED *, (___a), A1), \
     struct Library *, AMISSL_BASE_NAME, 169, Amissl)

#define a2i_ASN1_ENUMERATED(___bp, ___bs, ___buf, ___size) \
      AROS_LC4(int, a2i_ASN1_ENUMERATED, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(ASN1_ENUMERATED *, (___bs), A1), \
 AROS_LCA(char *, (___buf), A2), \
 AROS_LCA(int, (___size), D0), \
     struct Library *, AMISSL_BASE_NAME, 170, Amissl)

#define i2a_ASN1_OBJECT(___bp, ___a) \
      AROS_LC2(int, i2a_ASN1_OBJECT, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(const ASN1_OBJECT *, (___a), A1), \
     struct Library *, AMISSL_BASE_NAME, 171, Amissl)

#define a2i_ASN1_STRING(___bp, ___bs, ___buf, ___size) \
      AROS_LC4(int, a2i_ASN1_STRING, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(ASN1_STRING *, (___bs), A1), \
 AROS_LCA(char *, (___buf), A2), \
 AROS_LCA(int, (___size), D0), \
     struct Library *, AMISSL_BASE_NAME, 172, Amissl)

#define i2a_ASN1_STRING(___bp, ___a, ___type) \
      AROS_LC3(int, i2a_ASN1_STRING, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(const ASN1_STRING *, (___a), A1), \
 AROS_LCA(int, (___type), D0), \
     struct Library *, AMISSL_BASE_NAME, 173, Amissl)

#define i2t_ASN1_OBJECT(___buf, ___buf_len, ___a) \
      AROS_LC3(int, i2t_ASN1_OBJECT, \
 AROS_LCA(char *, (___buf), A0), \
 AROS_LCA(int, (___buf_len), D0), \
 AROS_LCA(const ASN1_OBJECT *, (___a), A1), \
     struct Library *, AMISSL_BASE_NAME, 174, Amissl)

#define a2d_ASN1_OBJECT(___out, ___olen, ___buf, ___num) \
      AROS_LC4(int, a2d_ASN1_OBJECT, \
 AROS_LCA(unsigned char *, (___out), A0), \
 AROS_LCA(int, (___olen), D0), \
 AROS_LCA(const char *, (___buf), A1), \
 AROS_LCA(int, (___num), D1), \
     struct Library *, AMISSL_BASE_NAME, 175, Amissl)

#define ASN1_OBJECT_create(___nid, ___data, ___len, ___sn, ___ln) \
      AROS_LC5(ASN1_OBJECT *, ASN1_OBJECT_create, \
 AROS_LCA(int, (___nid), D0), \
 AROS_LCA(unsigned char *, (___data), A0), \
 AROS_LCA(int, (___len), D1), \
 AROS_LCA(const char *, (___sn), A1), \
 AROS_LCA(const char *, (___ln), A2), \
     struct Library *, AMISSL_BASE_NAME, 176, Amissl)

#define ASN1_INTEGER_set(___a, ___v) \
      AROS_LC2(int, ASN1_INTEGER_set, \
 AROS_LCA(ASN1_INTEGER *, (___a), A0), \
 AROS_LCA(long, (___v), D0), \
     struct Library *, AMISSL_BASE_NAME, 177, Amissl)

#define ASN1_INTEGER_get(___a) \
      AROS_LC1(long, ASN1_INTEGER_get, \
 AROS_LCA(const ASN1_INTEGER *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 178, Amissl)

#define BN_to_ASN1_INTEGER(___bn, ___ai) \
      AROS_LC2(ASN1_INTEGER *, BN_to_ASN1_INTEGER, \
 AROS_LCA(const BIGNUM *, (___bn), A0), \
 AROS_LCA(ASN1_INTEGER *, (___ai), A1), \
     struct Library *, AMISSL_BASE_NAME, 179, Amissl)

#define ASN1_INTEGER_to_BN(___ai, ___bn) \
      AROS_LC2(BIGNUM *, ASN1_INTEGER_to_BN, \
 AROS_LCA(const ASN1_INTEGER *, (___ai), A0), \
 AROS_LCA(BIGNUM *, (___bn), A1), \
     struct Library *, AMISSL_BASE_NAME, 180, Amissl)

#define ASN1_ENUMERATED_set(___a, ___v) \
      AROS_LC2(int, ASN1_ENUMERATED_set, \
 AROS_LCA(ASN1_ENUMERATED *, (___a), A0), \
 AROS_LCA(long, (___v), D0), \
     struct Library *, AMISSL_BASE_NAME, 181, Amissl)

#define ASN1_ENUMERATED_get(___a) \
      AROS_LC1(long, ASN1_ENUMERATED_get, \
 AROS_LCA(const ASN1_ENUMERATED *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 182, Amissl)

#define BN_to_ASN1_ENUMERATED(___bn, ___ai) \
      AROS_LC2(ASN1_ENUMERATED *, BN_to_ASN1_ENUMERATED, \
 AROS_LCA(const BIGNUM *, (___bn), A0), \
 AROS_LCA(ASN1_ENUMERATED *, (___ai), A1), \
     struct Library *, AMISSL_BASE_NAME, 183, Amissl)

#define ASN1_ENUMERATED_to_BN(___ai, ___bn) \
      AROS_LC2(BIGNUM *, ASN1_ENUMERATED_to_BN, \
 AROS_LCA(const ASN1_ENUMERATED *, (___ai), A0), \
 AROS_LCA(BIGNUM *, (___bn), A1), \
     struct Library *, AMISSL_BASE_NAME, 184, Amissl)

#define ASN1_PRINTABLE_type(___s, ___max) \
      AROS_LC2(int, ASN1_PRINTABLE_type, \
 AROS_LCA(const unsigned char *, (___s), A0), \
 AROS_LCA(int, (___max), D0), \
     struct Library *, AMISSL_BASE_NAME, 185, Amissl)

#define ASN1_tag2bit(___tag) \
      AROS_LC1(unsigned long, ASN1_tag2bit, \
 AROS_LCA(int, (___tag), D0), \
     struct Library *, AMISSL_BASE_NAME, 188, Amissl)

#define ASN1_get_object(___pp, ___plength, ___ptag, ___pclass, ___omax) \
      AROS_LC5(int, ASN1_get_object, \
 AROS_LCA(const unsigned char **, (___pp), A0), \
 AROS_LCA(long *, (___plength), A1), \
 AROS_LCA(int *, (___ptag), A2), \
 AROS_LCA(int *, (___pclass), A3), \
 AROS_LCA(long, (___omax), D0), \
     struct Library *, AMISSL_BASE_NAME, 191, Amissl)

#define ASN1_check_infinite_end(___p, ___len) \
      AROS_LC2(int, ASN1_check_infinite_end, \
 AROS_LCA(unsigned char **, (___p), A0), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 192, Amissl)

#define ASN1_put_object(___pp, ___constructed, ___length, ___tag, ___xclass) \
      AROS_LC5(void, ASN1_put_object, \
 AROS_LCA(unsigned char **, (___pp), A0), \
 AROS_LCA(int, (___constructed), D0), \
 AROS_LCA(int, (___length), D1), \
 AROS_LCA(int, (___tag), D2), \
 AROS_LCA(int, (___xclass), D3), \
     struct Library *, AMISSL_BASE_NAME, 193, Amissl)

#define ASN1_object_size(___constructed, ___length, ___tag) \
      AROS_LC3(int, ASN1_object_size, \
 AROS_LCA(int, (___constructed), D0), \
 AROS_LCA(int, (___length), D1), \
 AROS_LCA(int, (___tag), D2), \
     struct Library *, AMISSL_BASE_NAME, 194, Amissl)

#define ASN1_dup(___i2d, ___d2i, ___x) \
      AROS_LC3(void *, ASN1_dup, \
 AROS_LCA(i2d_of_void *, (___i2d), A0), \
 AROS_LCA(d2i_of_void *, (___d2i), A1), \
 AROS_LCA(const void *, (___x), A2), \
     struct Library *, AMISSL_BASE_NAME, 195, Amissl)

#define ASN1_item_dup(___it, ___x) \
      AROS_LC2(void *, ASN1_item_dup, \
 AROS_LCA(const ASN1_ITEM *, (___it), A0), \
 AROS_LCA(const void *, (___x), A1), \
     struct Library *, AMISSL_BASE_NAME, 196, Amissl)

#define ASN1_STRING_to_UTF8(___out, ___in) \
      AROS_LC2(int, ASN1_STRING_to_UTF8, \
 AROS_LCA(unsigned char **, (___out), A0), \
 AROS_LCA(const ASN1_STRING *, (___in), A1), \
     struct Library *, AMISSL_BASE_NAME, 197, Amissl)

#define ASN1_d2i_bio(___xnew, ___d2i, ___in, ___x) \
      AROS_LC4(void *, ASN1_d2i_bio, \
 AROS_LCA(void * (*)(void), (___xnew), A0), \
 AROS_LCA(d2i_of_void *, (___d2i), A1), \
 AROS_LCA(BIO *, (___in), A2), \
 AROS_LCA(void **, (___x), A3), \
     struct Library *, AMISSL_BASE_NAME, 198, Amissl)

#define ASN1_item_d2i_bio(___it, ___in, ___x) \
      AROS_LC3(void *, ASN1_item_d2i_bio, \
 AROS_LCA(const ASN1_ITEM *, (___it), A0), \
 AROS_LCA(BIO *, (___in), A1), \
 AROS_LCA(void *, (___x), A2), \
     struct Library *, AMISSL_BASE_NAME, 199, Amissl)

#define ASN1_i2d_bio(___i2d, ___out, ___x) \
      AROS_LC3(int, ASN1_i2d_bio, \
 AROS_LCA(i2d_of_void *, (___i2d), A0), \
 AROS_LCA(BIO *, (___out), A1), \
 AROS_LCA(const void *, (___x), A2), \
     struct Library *, AMISSL_BASE_NAME, 200, Amissl)

#define ASN1_item_i2d_bio(___it, ___out, ___x) \
      AROS_LC3(int, ASN1_item_i2d_bio, \
 AROS_LCA(const ASN1_ITEM *, (___it), A0), \
 AROS_LCA(BIO *, (___out), A1), \
 AROS_LCA(const void *, (___x), A2), \
     struct Library *, AMISSL_BASE_NAME, 201, Amissl)

#define ASN1_UTCTIME_print(___fp, ___a) \
      AROS_LC2(int, ASN1_UTCTIME_print, \
 AROS_LCA(BIO *, (___fp), A0), \
 AROS_LCA(const ASN1_UTCTIME *, (___a), A1), \
     struct Library *, AMISSL_BASE_NAME, 202, Amissl)

#define ASN1_GENERALIZEDTIME_print(___fp, ___a) \
      AROS_LC2(int, ASN1_GENERALIZEDTIME_print, \
 AROS_LCA(BIO *, (___fp), A0), \
 AROS_LCA(const ASN1_GENERALIZEDTIME *, (___a), A1), \
     struct Library *, AMISSL_BASE_NAME, 203, Amissl)

#define ASN1_TIME_print(___fp, ___a) \
      AROS_LC2(int, ASN1_TIME_print, \
 AROS_LCA(BIO *, (___fp), A0), \
 AROS_LCA(const ASN1_TIME *, (___a), A1), \
     struct Library *, AMISSL_BASE_NAME, 204, Amissl)

#define ASN1_STRING_print(___bp, ___v) \
      AROS_LC2(int, ASN1_STRING_print, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(const ASN1_STRING *, (___v), A1), \
     struct Library *, AMISSL_BASE_NAME, 205, Amissl)

#define ASN1_STRING_print_ex(___out, ___str, ___flags) \
      AROS_LC3(int, ASN1_STRING_print_ex, \
 AROS_LCA(BIO *, (___out), A0), \
 AROS_LCA(const ASN1_STRING *, (___str), A1), \
 AROS_LCA(unsigned long, (___flags), D0), \
     struct Library *, AMISSL_BASE_NAME, 206, Amissl)

#define ASN1_parse(___bp, ___pp, ___len, ___indent) \
      AROS_LC4(int, ASN1_parse, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(const unsigned char *, (___pp), A1), \
 AROS_LCA(long, (___len), D0), \
 AROS_LCA(int, (___indent), D1), \
     struct Library *, AMISSL_BASE_NAME, 207, Amissl)

#define ASN1_parse_dump(___bp, ___pp, ___len, ___indent, ___dump) \
      AROS_LC5(int, ASN1_parse_dump, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(const unsigned char *, (___pp), A1), \
 AROS_LCA(long, (___len), D0), \
 AROS_LCA(int, (___indent), D1), \
 AROS_LCA(int, (___dump), D2), \
     struct Library *, AMISSL_BASE_NAME, 208, Amissl)

#define ASN1_tag2str(___tag) \
      AROS_LC1(const char *, ASN1_tag2str, \
 AROS_LCA(int, (___tag), D0), \
     struct Library *, AMISSL_BASE_NAME, 209, Amissl)

#define ASN1_UNIVERSALSTRING_to_string(___s) \
      AROS_LC1(int, ASN1_UNIVERSALSTRING_to_string, \
 AROS_LCA(ASN1_UNIVERSALSTRING *, (___s), A0), \
     struct Library *, AMISSL_BASE_NAME, 214, Amissl)

#define ASN1_TYPE_set_octetstring(___a, ___data, ___len) \
      AROS_LC3(int, ASN1_TYPE_set_octetstring, \
 AROS_LCA(ASN1_TYPE *, (___a), A0), \
 AROS_LCA(unsigned char *, (___data), A1), \
 AROS_LCA(int, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 219, Amissl)

#define ASN1_TYPE_get_octetstring(___a, ___data, ___max_len) \
      AROS_LC3(int, ASN1_TYPE_get_octetstring, \
 AROS_LCA(const ASN1_TYPE *, (___a), A0), \
 AROS_LCA(unsigned char *, (___data), A1), \
 AROS_LCA(int, (___max_len), D0), \
     struct Library *, AMISSL_BASE_NAME, 220, Amissl)

#define ASN1_TYPE_set_int_octetstring(___a, ___num, ___data, ___len) \
      AROS_LC4(int, ASN1_TYPE_set_int_octetstring, \
 AROS_LCA(ASN1_TYPE *, (___a), A0), \
 AROS_LCA(long, (___num), D0), \
 AROS_LCA(unsigned char *, (___data), A1), \
 AROS_LCA(int, (___len), D1), \
     struct Library *, AMISSL_BASE_NAME, 221, Amissl)

#define ASN1_TYPE_get_int_octetstring(___a, ___num, ___data, ___max_len) \
      AROS_LC4(int, ASN1_TYPE_get_int_octetstring, \
 AROS_LCA(const ASN1_TYPE *, (___a), A0), \
 AROS_LCA(long *, (___num), A1), \
 AROS_LCA(unsigned char *, (___data), A2), \
 AROS_LCA(int, (___max_len), D0), \
     struct Library *, AMISSL_BASE_NAME, 222, Amissl)

#define ASN1_item_unpack(___oct, ___it) \
      AROS_LC2(void *, ASN1_item_unpack, \
 AROS_LCA(const ASN1_STRING *, (___oct), A0), \
 AROS_LCA(const ASN1_ITEM *, (___it), A1), \
     struct Library *, AMISSL_BASE_NAME, 226, Amissl)

#define ASN1_item_pack(___obj, ___it, ___oct) \
      AROS_LC3(ASN1_STRING *, ASN1_item_pack, \
 AROS_LCA(void *, (___obj), A0), \
 AROS_LCA(const ASN1_ITEM *, (___it), A1), \
 AROS_LCA(ASN1_OCTET_STRING **, (___oct), A2), \
     struct Library *, AMISSL_BASE_NAME, 228, Amissl)

#define ASN1_STRING_set_default_mask(___mask) \
      AROS_LC1(void, ASN1_STRING_set_default_mask, \
 AROS_LCA(unsigned long, (___mask), D0), \
     struct Library *, AMISSL_BASE_NAME, 229, Amissl)

#define ASN1_STRING_set_default_mask_asc(___p) \
      AROS_LC1(int, ASN1_STRING_set_default_mask_asc, \
 AROS_LCA(const char *, (___p), A0), \
     struct Library *, AMISSL_BASE_NAME, 230, Amissl)

#define ASN1_STRING_get_default_mask() \
      AROS_LC0(unsigned long, ASN1_STRING_get_default_mask, \
     struct Library *, AMISSL_BASE_NAME, 231, Amissl)

#define ASN1_mbstring_copy(___out, ___in, ___len, ___inform, ___mask) \
      AROS_LC5(int, ASN1_mbstring_copy, \
 AROS_LCA(ASN1_STRING **, (___out), A0), \
 AROS_LCA(const unsigned char *, (___in), A1), \
 AROS_LCA(int, (___len), D0), \
 AROS_LCA(int, (___inform), D1), \
 AROS_LCA(unsigned long, (___mask), D2), \
     struct Library *, AMISSL_BASE_NAME, 232, Amissl)

#define ASN1_mbstring_ncopy(___out, ___in, ___len, ___inform, ___mask, ___minsize, ___maxsize) \
      AROS_LC7(int, ASN1_mbstring_ncopy, \
 AROS_LCA(ASN1_STRING **, (___out), A0), \
 AROS_LCA(const unsigned char *, (___in), A1), \
 AROS_LCA(int, (___len), D0), \
 AROS_LCA(int, (___inform), D1), \
 AROS_LCA(unsigned long, (___mask), D2), \
 AROS_LCA(long, (___minsize), D3), \
 AROS_LCA(long, (___maxsize), D4), \
     struct Library *, AMISSL_BASE_NAME, 233, Amissl)

#define ASN1_STRING_set_by_NID(___out, ___in, ___inlen, ___inform, ___nid) \
      AROS_LC5(ASN1_STRING *, ASN1_STRING_set_by_NID, \
 AROS_LCA(ASN1_STRING **, (___out), A0), \
 AROS_LCA(const unsigned char *, (___in), A1), \
 AROS_LCA(int, (___inlen), D0), \
 AROS_LCA(int, (___inform), D1), \
 AROS_LCA(int, (___nid), D2), \
     struct Library *, AMISSL_BASE_NAME, 234, Amissl)

#define ASN1_STRING_TABLE_get(___nid) \
      AROS_LC1(ASN1_STRING_TABLE *, ASN1_STRING_TABLE_get, \
 AROS_LCA(int, (___nid), D0), \
     struct Library *, AMISSL_BASE_NAME, 235, Amissl)

#define ASN1_STRING_TABLE_add(___a, ___b, ___c, ___d, ___e) \
      AROS_LC5(int, ASN1_STRING_TABLE_add, \
 AROS_LCA(int, (___a), D0), \
 AROS_LCA(long, (___b), D1), \
 AROS_LCA(long, (___c), D2), \
 AROS_LCA(unsigned long, (___d), D3), \
 AROS_LCA(unsigned long, (___e), D4), \
     struct Library *, AMISSL_BASE_NAME, 236, Amissl)

#define ASN1_STRING_TABLE_cleanup() \
      AROS_LC0(void, ASN1_STRING_TABLE_cleanup, \
     struct Library *, AMISSL_BASE_NAME, 237, Amissl)

#define ASN1_item_new(___it) \
      AROS_LC1(ASN1_VALUE *, ASN1_item_new, \
 AROS_LCA(const ASN1_ITEM *, (___it), A0), \
     struct Library *, AMISSL_BASE_NAME, 238, Amissl)

#define ASN1_item_free(___val, ___it) \
      AROS_LC2(void, ASN1_item_free, \
 AROS_LCA(ASN1_VALUE *, (___val), A0), \
 AROS_LCA(const ASN1_ITEM *, (___it), A1), \
     struct Library *, AMISSL_BASE_NAME, 239, Amissl)

#define ASN1_item_d2i(___val, ___in, ___len, ___it) \
      AROS_LC4(ASN1_VALUE *, ASN1_item_d2i, \
 AROS_LCA(ASN1_VALUE **, (___val), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(long, (___len), D0), \
 AROS_LCA(const ASN1_ITEM *, (___it), A2), \
     struct Library *, AMISSL_BASE_NAME, 240, Amissl)

#define ASN1_item_i2d(___val, ___out, ___it) \
      AROS_LC3(int, ASN1_item_i2d, \
 AROS_LCA(const ASN1_VALUE *, (___val), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
 AROS_LCA(const ASN1_ITEM *, (___it), A2), \
     struct Library *, AMISSL_BASE_NAME, 241, Amissl)

#define ASN1_add_oid_module() \
      AROS_LC0(void, ASN1_add_oid_module, \
     struct Library *, AMISSL_BASE_NAME, 242, Amissl)

#define ERR_load_ASN1_strings() \
      AROS_LC0(int, ERR_load_ASN1_strings, \
     struct Library *, AMISSL_BASE_NAME, 243, Amissl)

#define ASN1_BOOLEAN_it() \
      AROS_LC0(const ASN1_ITEM *, ASN1_BOOLEAN_it, \
     struct Library *, AMISSL_BASE_NAME, 246, Amissl)

#define ASN1_TBOOLEAN_it() \
      AROS_LC0(const ASN1_ITEM *, ASN1_TBOOLEAN_it, \
     struct Library *, AMISSL_BASE_NAME, 247, Amissl)

#define ASN1_FBOOLEAN_it() \
      AROS_LC0(const ASN1_ITEM *, ASN1_FBOOLEAN_it, \
     struct Library *, AMISSL_BASE_NAME, 248, Amissl)

#define ASN1_SEQUENCE_it() \
      AROS_LC0(const ASN1_ITEM *, ASN1_SEQUENCE_it, \
     struct Library *, AMISSL_BASE_NAME, 249, Amissl)

#define CBIGNUM_it() \
      AROS_LC0(const ASN1_ITEM *, CBIGNUM_it, \
     struct Library *, AMISSL_BASE_NAME, 250, Amissl)

#define BIGNUM_it() \
      AROS_LC0(const ASN1_ITEM *, BIGNUM_it, \
     struct Library *, AMISSL_BASE_NAME, 251, Amissl)

#define LONG_it() \
      AROS_LC0(const ASN1_ITEM *, LONG_it, \
     struct Library *, AMISSL_BASE_NAME, 252, Amissl)

#define ZLONG_it() \
      AROS_LC0(const ASN1_ITEM *, ZLONG_it, \
     struct Library *, AMISSL_BASE_NAME, 253, Amissl)

#define ASN1_item_ex_new(___pval, ___it) \
      AROS_LC2(int, ASN1_item_ex_new, \
 AROS_LCA(ASN1_VALUE **, (___pval), A0), \
 AROS_LCA(const ASN1_ITEM *, (___it), A1), \
     struct Library *, AMISSL_BASE_NAME, 254, Amissl)

#define ASN1_item_ex_free(___pval, ___it) \
      AROS_LC2(void, ASN1_item_ex_free, \
 AROS_LCA(ASN1_VALUE **, (___pval), A0), \
 AROS_LCA(const ASN1_ITEM *, (___it), A1), \
     struct Library *, AMISSL_BASE_NAME, 255, Amissl)

#define ASN1_item_ex_d2i(___pval, ___in, ___len, ___it, ___tag, ___aclass, ___opt, ___ctx) \
      AROS_LC8(int, ASN1_item_ex_d2i, \
 AROS_LCA(ASN1_VALUE **, (___pval), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(long, (___len), D0), \
 AROS_LCA(const ASN1_ITEM *, (___it), A2), \
 AROS_LCA(int, (___tag), D1), \
 AROS_LCA(int, (___aclass), D2), \
 AROS_LCA(char, (___opt), D3), \
 AROS_LCA(ASN1_TLC *, (___ctx), A3), \
     struct Library *, AMISSL_BASE_NAME, 260, Amissl)

#define ASN1_item_ex_i2d(___pval, ___out, ___it, ___tag, ___aclass) \
      AROS_LC5(int, ASN1_item_ex_i2d, \
 AROS_LCA(const ASN1_VALUE **, (___pval), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
 AROS_LCA(const ASN1_ITEM *, (___it), A2), \
 AROS_LCA(int, (___tag), D0), \
 AROS_LCA(int, (___aclass), D1), \
     struct Library *, AMISSL_BASE_NAME, 261, Amissl)

#define BIO_ctrl_pending(___b) \
      AROS_LC1(size_t, BIO_ctrl_pending, \
 AROS_LCA(BIO *, (___b), A0), \
     struct Library *, AMISSL_BASE_NAME, 275, Amissl)

#define BIO_ctrl_wpending(___b) \
      AROS_LC1(size_t, BIO_ctrl_wpending, \
 AROS_LCA(BIO *, (___b), A0), \
     struct Library *, AMISSL_BASE_NAME, 276, Amissl)

#define BIO_ctrl_get_write_guarantee(___b) \
      AROS_LC1(size_t, BIO_ctrl_get_write_guarantee, \
 AROS_LCA(BIO *, (___b), A0), \
     struct Library *, AMISSL_BASE_NAME, 277, Amissl)

#define BIO_ctrl_get_read_request(___b) \
      AROS_LC1(size_t, BIO_ctrl_get_read_request, \
 AROS_LCA(BIO *, (___b), A0), \
     struct Library *, AMISSL_BASE_NAME, 278, Amissl)

#define BIO_ctrl_reset_read_request(___b) \
      AROS_LC1(int, BIO_ctrl_reset_read_request, \
 AROS_LCA(BIO *, (___b), A0), \
     struct Library *, AMISSL_BASE_NAME, 279, Amissl)

#define BIO_set_ex_data(___bio, ___idx, ___data) \
      AROS_LC3(int, BIO_set_ex_data, \
 AROS_LCA(BIO *, (___bio), A0), \
 AROS_LCA(int, (___idx), D0), \
 AROS_LCA(void *, (___data), A1), \
     struct Library *, AMISSL_BASE_NAME, 280, Amissl)

#define BIO_get_ex_data(___bio, ___idx) \
      AROS_LC2(void *, BIO_get_ex_data, \
 AROS_LCA(const BIO *, (___bio), A0), \
 AROS_LCA(int, (___idx), D0), \
     struct Library *, AMISSL_BASE_NAME, 281, Amissl)

#define OBSOLETE_BIO_get_ex_new_index(___argl, ___argp, ___new_func, ___dup_func, ___free_func) \
      AROS_LC5(int, OBSOLETE_BIO_get_ex_new_index, \
 AROS_LCA(long, (___argl), D0), \
 AROS_LCA(void *, (___argp), A0), \
 AROS_LCA(CRYPTO_EX_new *, (___new_func), A1), \
 AROS_LCA(CRYPTO_EX_dup *, (___dup_func), A2), \
 AROS_LCA(CRYPTO_EX_free *, (___free_func), A3), \
     struct Library *, AMISSL_BASE_NAME, 282, Amissl)

#define BIO_number_read(___bio) \
      AROS_LC1(uint64_t, BIO_number_read, \
 AROS_LCA(BIO *, (___bio), A0), \
     struct Library *, AMISSL_BASE_NAME, 283, Amissl)

#define BIO_number_written(___bio) \
      AROS_LC1(uint64_t, BIO_number_written, \
 AROS_LCA(BIO *, (___bio), A0), \
     struct Library *, AMISSL_BASE_NAME, 284, Amissl)

#define BIO_s_file() \
      AROS_LC0(const BIO_METHOD *, BIO_s_file, \
     struct Library *, AMISSL_BASE_NAME, 285, Amissl)

#define BIO_new_file(___filename, ___mode) \
      AROS_LC2(BIO *, BIO_new_file, \
 AROS_LCA(const char *, (___filename), A0), \
 AROS_LCA(const char *, (___mode), A1), \
     struct Library *, AMISSL_BASE_NAME, 286, Amissl)

#define BIO_new_fp_amiga(___stream, ___close_flag) \
      AROS_LC2(BIO *, BIO_new_fp_amiga, \
 AROS_LCA(BPTR, (___stream), A0), \
 AROS_LCA(int, (___close_flag), D0), \
     struct Library *, AMISSL_BASE_NAME, 287, Amissl)

#define BIO_new(___type) \
      AROS_LC1(BIO *, BIO_new, \
 AROS_LCA(const BIO_METHOD *, (___type), A0), \
     struct Library *, AMISSL_BASE_NAME, 288, Amissl)

#define BIO_free(___a) \
      AROS_LC1(int, BIO_free, \
 AROS_LCA(BIO *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 290, Amissl)

#define BIO_vfree(___a) \
      AROS_LC1(void, BIO_vfree, \
 AROS_LCA(BIO *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 291, Amissl)

#define BIO_read(___b, ___data, ___dlen) \
      AROS_LC3(int, BIO_read, \
 AROS_LCA(BIO *, (___b), A0), \
 AROS_LCA(void *, (___data), A1), \
 AROS_LCA(int, (___dlen), D0), \
     struct Library *, AMISSL_BASE_NAME, 292, Amissl)

#define BIO_gets(___bp, ___buf, ___size) \
      AROS_LC3(int, BIO_gets, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(char *, (___buf), A1), \
 AROS_LCA(int, (___size), D0), \
     struct Library *, AMISSL_BASE_NAME, 293, Amissl)

#define BIO_write(___b, ___data, ___dlen) \
      AROS_LC3(int, BIO_write, \
 AROS_LCA(BIO *, (___b), A0), \
 AROS_LCA(const void *, (___data), A1), \
 AROS_LCA(int, (___dlen), D0), \
     struct Library *, AMISSL_BASE_NAME, 294, Amissl)

#define BIO_puts(___bp, ___buf) \
      AROS_LC2(int, BIO_puts, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(const char *, (___buf), A1), \
     struct Library *, AMISSL_BASE_NAME, 295, Amissl)

#define BIO_indent(___b, ___indent, ___max) \
      AROS_LC3(int, BIO_indent, \
 AROS_LCA(BIO *, (___b), A0), \
 AROS_LCA(int, (___indent), D0), \
 AROS_LCA(int, (___max), D1), \
     struct Library *, AMISSL_BASE_NAME, 296, Amissl)

#define BIO_ctrl(___bp, ___cmd, ___larg, ___parg) \
      AROS_LC4(long, BIO_ctrl, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(int, (___cmd), D0), \
 AROS_LCA(long, (___larg), D1), \
 AROS_LCA(void *, (___parg), A1), \
     struct Library *, AMISSL_BASE_NAME, 297, Amissl)

#define BIO_callback_ctrl(___b, ___cmd, ___fp) \
      AROS_LC3(long, BIO_callback_ctrl, \
 AROS_LCA(BIO *, (___b), A0), \
 AROS_LCA(int, (___cmd), D0), \
 AROS_LCA(BIO_info_cb *, (___fp), A1), \
     struct Library *, AMISSL_BASE_NAME, 298, Amissl)

#define BIO_ptr_ctrl(___bp, ___cmd, ___larg) \
      AROS_LC3(void *, BIO_ptr_ctrl, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(int, (___cmd), D0), \
 AROS_LCA(long, (___larg), D1), \
     struct Library *, AMISSL_BASE_NAME, 299, Amissl)

#define BIO_int_ctrl(___bp, ___cmd, ___larg, ___iarg) \
      AROS_LC4(long, BIO_int_ctrl, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(int, (___cmd), D0), \
 AROS_LCA(long, (___larg), D1), \
 AROS_LCA(int, (___iarg), D2), \
     struct Library *, AMISSL_BASE_NAME, 300, Amissl)

#define BIO_push(___b, ___append) \
      AROS_LC2(BIO *, BIO_push, \
 AROS_LCA(BIO *, (___b), A0), \
 AROS_LCA(BIO *, (___append), A1), \
     struct Library *, AMISSL_BASE_NAME, 301, Amissl)

#define BIO_pop(___b) \
      AROS_LC1(BIO *, BIO_pop, \
 AROS_LCA(BIO *, (___b), A0), \
     struct Library *, AMISSL_BASE_NAME, 302, Amissl)

#define BIO_free_all(___a) \
      AROS_LC1(void, BIO_free_all, \
 AROS_LCA(BIO *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 303, Amissl)

#define BIO_find_type(___b, ___bio_type) \
      AROS_LC2(BIO *, BIO_find_type, \
 AROS_LCA(BIO *, (___b), A0), \
 AROS_LCA(int, (___bio_type), D0), \
     struct Library *, AMISSL_BASE_NAME, 304, Amissl)

#define BIO_next(___b) \
      AROS_LC1(BIO *, BIO_next, \
 AROS_LCA(BIO *, (___b), A0), \
     struct Library *, AMISSL_BASE_NAME, 305, Amissl)

#define BIO_get_retry_BIO(___bio, ___reason) \
      AROS_LC2(BIO *, BIO_get_retry_BIO, \
 AROS_LCA(BIO *, (___bio), A0), \
 AROS_LCA(int *, (___reason), A1), \
     struct Library *, AMISSL_BASE_NAME, 306, Amissl)

#define BIO_get_retry_reason(___bio) \
      AROS_LC1(int, BIO_get_retry_reason, \
 AROS_LCA(BIO *, (___bio), A0), \
     struct Library *, AMISSL_BASE_NAME, 307, Amissl)

#define BIO_dup_chain(___in) \
      AROS_LC1(BIO *, BIO_dup_chain, \
 AROS_LCA(BIO *, (___in), A0), \
     struct Library *, AMISSL_BASE_NAME, 308, Amissl)

#define BIO_nread0(___bio, ___buf) \
      AROS_LC2(int, BIO_nread0, \
 AROS_LCA(BIO *, (___bio), A0), \
 AROS_LCA(char **, (___buf), A1), \
     struct Library *, AMISSL_BASE_NAME, 309, Amissl)

#define BIO_nread(___bio, ___buf, ___num) \
      AROS_LC3(int, BIO_nread, \
 AROS_LCA(BIO *, (___bio), A0), \
 AROS_LCA(char **, (___buf), A1), \
 AROS_LCA(int, (___num), D0), \
     struct Library *, AMISSL_BASE_NAME, 310, Amissl)

#define BIO_nwrite0(___bio, ___buf) \
      AROS_LC2(int, BIO_nwrite0, \
 AROS_LCA(BIO *, (___bio), A0), \
 AROS_LCA(char **, (___buf), A1), \
     struct Library *, AMISSL_BASE_NAME, 311, Amissl)

#define BIO_nwrite(___bio, ___buf, ___num) \
      AROS_LC3(int, BIO_nwrite, \
 AROS_LCA(BIO *, (___bio), A0), \
 AROS_LCA(char **, (___buf), A1), \
 AROS_LCA(int, (___num), D0), \
     struct Library *, AMISSL_BASE_NAME, 312, Amissl)

#define BIO_debug_callback(___bio, ___cmd, ___argp, ___argi, ___argl, ___ret) \
      AROS_LC6(long, BIO_debug_callback, \
 AROS_LCA(BIO *, (___bio), A0), \
 AROS_LCA(int, (___cmd), D0), \
 AROS_LCA(const char *, (___argp), A1), \
 AROS_LCA(int, (___argi), D1), \
 AROS_LCA(long, (___argl), D2), \
 AROS_LCA(long, (___ret), D3), \
     struct Library *, AMISSL_BASE_NAME, 313, Amissl)

#define BIO_s_mem() \
      AROS_LC0(const BIO_METHOD *, BIO_s_mem, \
     struct Library *, AMISSL_BASE_NAME, 314, Amissl)

#define BIO_new_mem_buf(___buf, ___len) \
      AROS_LC2(BIO *, BIO_new_mem_buf, \
 AROS_LCA(const void *, (___buf), A0), \
 AROS_LCA(int, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 315, Amissl)

#define BIO_s_socket() \
      AROS_LC0(const BIO_METHOD *, BIO_s_socket, \
     struct Library *, AMISSL_BASE_NAME, 316, Amissl)

#define BIO_s_connect() \
      AROS_LC0(const BIO_METHOD *, BIO_s_connect, \
     struct Library *, AMISSL_BASE_NAME, 317, Amissl)

#define BIO_s_accept() \
      AROS_LC0(const BIO_METHOD *, BIO_s_accept, \
     struct Library *, AMISSL_BASE_NAME, 318, Amissl)

#define BIO_s_fd() \
      AROS_LC0(const BIO_METHOD *, BIO_s_fd, \
     struct Library *, AMISSL_BASE_NAME, 319, Amissl)

#define BIO_s_log() \
      AROS_LC0(const BIO_METHOD *, BIO_s_log, \
     struct Library *, AMISSL_BASE_NAME, 320, Amissl)

#define BIO_s_bio() \
      AROS_LC0(const BIO_METHOD *, BIO_s_bio, \
     struct Library *, AMISSL_BASE_NAME, 321, Amissl)

#define BIO_s_null() \
      AROS_LC0(const BIO_METHOD *, BIO_s_null, \
     struct Library *, AMISSL_BASE_NAME, 322, Amissl)

#define BIO_f_null() \
      AROS_LC0(const BIO_METHOD *, BIO_f_null, \
     struct Library *, AMISSL_BASE_NAME, 323, Amissl)

#define BIO_f_buffer() \
      AROS_LC0(const BIO_METHOD *, BIO_f_buffer, \
     struct Library *, AMISSL_BASE_NAME, 324, Amissl)

#define BIO_f_nbio_test() \
      AROS_LC0(const BIO_METHOD *, BIO_f_nbio_test, \
     struct Library *, AMISSL_BASE_NAME, 325, Amissl)

#define BIO_sock_should_retry(___i) \
      AROS_LC1(int, BIO_sock_should_retry, \
 AROS_LCA(int, (___i), D0), \
     struct Library *, AMISSL_BASE_NAME, 326, Amissl)

#define BIO_sock_non_fatal_error(___error) \
      AROS_LC1(int, BIO_sock_non_fatal_error, \
 AROS_LCA(int, (___error), D0), \
     struct Library *, AMISSL_BASE_NAME, 327, Amissl)

#define BIO_fd_should_retry(___i) \
      AROS_LC1(int, BIO_fd_should_retry, \
 AROS_LCA(int, (___i), D0), \
     struct Library *, AMISSL_BASE_NAME, 328, Amissl)

#define BIO_fd_non_fatal_error(___error) \
      AROS_LC1(int, BIO_fd_non_fatal_error, \
 AROS_LCA(int, (___error), D0), \
     struct Library *, AMISSL_BASE_NAME, 329, Amissl)

#define BIO_dump(___b, ___bytes, ___len) \
      AROS_LC3(int, BIO_dump, \
 AROS_LCA(BIO *, (___b), A0), \
 AROS_LCA(const void *, (___bytes), A1), \
 AROS_LCA(int, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 330, Amissl)

#define BIO_dump_indent(___b, ___bytes, ___len, ___indent) \
      AROS_LC4(int, BIO_dump_indent, \
 AROS_LCA(BIO *, (___b), A0), \
 AROS_LCA(const void *, (___bytes), A1), \
 AROS_LCA(int, (___len), D0), \
 AROS_LCA(int, (___indent), D1), \
     struct Library *, AMISSL_BASE_NAME, 331, Amissl)

#define BIO_gethostbyname(___name) \
      AROS_LC1(struct hostent *, BIO_gethostbyname, \
 AROS_LCA(const char *, (___name), A0), \
     struct Library *, AMISSL_BASE_NAME, 332, Amissl)

#define BIO_sock_error(___sock) \
      AROS_LC1(int, BIO_sock_error, \
 AROS_LCA(int, (___sock), D0), \
     struct Library *, AMISSL_BASE_NAME, 333, Amissl)

#define BIO_socket_ioctl(___fd, ___type, ___arg) \
      AROS_LC3(int, BIO_socket_ioctl, \
 AROS_LCA(int, (___fd), D0), \
 AROS_LCA(long, (___type), D1), \
 AROS_LCA(void *, (___arg), A0), \
     struct Library *, AMISSL_BASE_NAME, 334, Amissl)

#define BIO_socket_nbio(___fd, ___mode) \
      AROS_LC2(int, BIO_socket_nbio, \
 AROS_LCA(int, (___fd), D0), \
 AROS_LCA(int, (___mode), D1), \
     struct Library *, AMISSL_BASE_NAME, 335, Amissl)

#define BIO_get_port(___str, ___port_ptr) \
      AROS_LC2(int, BIO_get_port, \
 AROS_LCA(const char *, (___str), A0), \
 AROS_LCA(unsigned short *, (___port_ptr), A1), \
     struct Library *, AMISSL_BASE_NAME, 336, Amissl)

#define BIO_get_host_ip(___str, ___ip) \
      AROS_LC2(int, BIO_get_host_ip, \
 AROS_LCA(const char *, (___str), A0), \
 AROS_LCA(unsigned char *, (___ip), A1), \
     struct Library *, AMISSL_BASE_NAME, 337, Amissl)

#define BIO_get_accept_socket(___host_port, ___mode) \
      AROS_LC2(int, BIO_get_accept_socket, \
 AROS_LCA(char *, (___host_port), A0), \
 AROS_LCA(int, (___mode), D0), \
     struct Library *, AMISSL_BASE_NAME, 338, Amissl)

#define BIO_accept(___sock, ___ip_port) \
      AROS_LC2(int, BIO_accept, \
 AROS_LCA(int, (___sock), D0), \
 AROS_LCA(char **, (___ip_port), A0), \
     struct Library *, AMISSL_BASE_NAME, 339, Amissl)

#define BIO_sock_init() \
      AROS_LC0(int, BIO_sock_init, \
     struct Library *, AMISSL_BASE_NAME, 340, Amissl)

#define BIO_set_tcp_ndelay(___sock, ___turn_on) \
      AROS_LC2(int, BIO_set_tcp_ndelay, \
 AROS_LCA(int, (___sock), D0), \
 AROS_LCA(int, (___turn_on), D1), \
     struct Library *, AMISSL_BASE_NAME, 342, Amissl)

#define BIO_new_socket(___sock, ___close_flag) \
      AROS_LC2(BIO *, BIO_new_socket, \
 AROS_LCA(int, (___sock), D0), \
 AROS_LCA(int, (___close_flag), D1), \
     struct Library *, AMISSL_BASE_NAME, 343, Amissl)

#define BIO_new_fd(___fd, ___close_flag) \
      AROS_LC2(BIO *, BIO_new_fd, \
 AROS_LCA(int, (___fd), D0), \
 AROS_LCA(int, (___close_flag), D1), \
     struct Library *, AMISSL_BASE_NAME, 344, Amissl)

#define BIO_new_connect(___host_port) \
      AROS_LC1(BIO *, BIO_new_connect, \
 AROS_LCA(const char *, (___host_port), A0), \
     struct Library *, AMISSL_BASE_NAME, 345, Amissl)

#define BIO_new_accept(___host_port) \
      AROS_LC1(BIO *, BIO_new_accept, \
 AROS_LCA(const char *, (___host_port), A0), \
     struct Library *, AMISSL_BASE_NAME, 346, Amissl)

#define BIO_new_bio_pair(___bio1, ___writebuf1, ___bio2, ___writebuf2) \
      AROS_LC4(int, BIO_new_bio_pair, \
 AROS_LCA(BIO **, (___bio1), A0), \
 AROS_LCA(size_t, (___writebuf1), D0), \
 AROS_LCA(BIO **, (___bio2), A1), \
 AROS_LCA(size_t, (___writebuf2), D1), \
     struct Library *, AMISSL_BASE_NAME, 347, Amissl)

#define BIO_copy_next_retry(___b) \
      AROS_LC1(void, BIO_copy_next_retry, \
 AROS_LCA(BIO *, (___b), A0), \
     struct Library *, AMISSL_BASE_NAME, 348, Amissl)

#define BIO_vprintf(___bio, ___format, ___args) \
      AROS_LC3(int, BIO_vprintf, \
 AROS_LCA(BIO *, (___bio), A0), \
 AROS_LCA(const char *, (___format), A1), \
 AROS_LCA(va_list, (___args), A2), \
     struct Library *, AMISSL_BASE_NAME, 349, Amissl)

#ifndef NO_INLINE_VARARGS
#define BIO_printf(___bio, ___format, ___dummy, ...) \
    ({_sfdc_vararg _message[] = { ___dummy, __VA_ARGS__ }; BIO_vprintf((___bio), (___format), (va_list) _message); })
#endif /* !NO_INLINE_VARARGS */

#define BIO_vsnprintf(___buf, ___n, ___format, ___args) \
      AROS_LC4(int, BIO_vsnprintf, \
 AROS_LCA(char *, (___buf), A0), \
 AROS_LCA(size_t, (___n), D0), \
 AROS_LCA(const char *, (___format), A1), \
 AROS_LCA(va_list, (___args), A2), \
     struct Library *, AMISSL_BASE_NAME, 350, Amissl)

#ifndef NO_INLINE_VARARGS
#define BIO_snprintf(___buf, ___n, ___format, ___dummy, ...) \
    ({_sfdc_vararg _message[] = { ___dummy, __VA_ARGS__ }; BIO_vsnprintf((___buf), (___n), (___format), (va_list) _message); })
#endif /* !NO_INLINE_VARARGS */

#define ERR_load_BIO_strings() \
      AROS_LC0(int, ERR_load_BIO_strings, \
     struct Library *, AMISSL_BASE_NAME, 351, Amissl)

#define BN_value_one() \
      AROS_LC0(const BIGNUM *, BN_value_one, \
     struct Library *, AMISSL_BASE_NAME, 352, Amissl)

#define BN_options() \
      AROS_LC0(char *, BN_options, \
     struct Library *, AMISSL_BASE_NAME, 353, Amissl)

#define BN_CTX_new() \
      AROS_LC0(BN_CTX *, BN_CTX_new, \
     struct Library *, AMISSL_BASE_NAME, 354, Amissl)

#define BN_CTX_free(___c) \
      AROS_LC1(void, BN_CTX_free, \
 AROS_LCA(BN_CTX *, (___c), A0), \
     struct Library *, AMISSL_BASE_NAME, 356, Amissl)

#define BN_CTX_start(___ctx) \
      AROS_LC1(void, BN_CTX_start, \
 AROS_LCA(BN_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 357, Amissl)

#define BN_CTX_get(___ctx) \
      AROS_LC1(BIGNUM *, BN_CTX_get, \
 AROS_LCA(BN_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 358, Amissl)

#define BN_CTX_end(___ctx) \
      AROS_LC1(void, BN_CTX_end, \
 AROS_LCA(BN_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 359, Amissl)

#define BN_rand(___rnd, ___bits, ___top, ___bottom) \
      AROS_LC4(int, BN_rand, \
 AROS_LCA(BIGNUM *, (___rnd), A0), \
 AROS_LCA(int, (___bits), D0), \
 AROS_LCA(int, (___top), D1), \
 AROS_LCA(int, (___bottom), D2), \
     struct Library *, AMISSL_BASE_NAME, 360, Amissl)

#define BN_pseudo_rand(___rnd, ___bits, ___top, ___bottom) \
      AROS_LC4(int, BN_pseudo_rand, \
 AROS_LCA(BIGNUM *, (___rnd), A0), \
 AROS_LCA(int, (___bits), D0), \
 AROS_LCA(int, (___top), D1), \
 AROS_LCA(int, (___bottom), D2), \
     struct Library *, AMISSL_BASE_NAME, 361, Amissl)

#define BN_rand_range(___rnd, ___range) \
      AROS_LC2(int, BN_rand_range, \
 AROS_LCA(BIGNUM *, (___rnd), A0), \
 AROS_LCA(const BIGNUM *, (___range), A1), \
     struct Library *, AMISSL_BASE_NAME, 362, Amissl)

#define BN_pseudo_rand_range(___rnd, ___range) \
      AROS_LC2(int, BN_pseudo_rand_range, \
 AROS_LCA(BIGNUM *, (___rnd), A0), \
 AROS_LCA(const BIGNUM *, (___range), A1), \
     struct Library *, AMISSL_BASE_NAME, 363, Amissl)

#define BN_num_bits(___a) \
      AROS_LC1(int, BN_num_bits, \
 AROS_LCA(const BIGNUM *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 364, Amissl)

#define BN_num_bits_word(___a) \
      AROS_LC1(int, BN_num_bits_word, \
 AROS_LCA(BN_ULONG, (___a), D0), \
     struct Library *, AMISSL_BASE_NAME, 365, Amissl)

#define BN_new() \
      AROS_LC0(BIGNUM *, BN_new, \
     struct Library *, AMISSL_BASE_NAME, 366, Amissl)

#define BN_clear_free(___a) \
      AROS_LC1(void, BN_clear_free, \
 AROS_LCA(BIGNUM *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 368, Amissl)

#define BN_copy(___a, ___b) \
      AROS_LC2(BIGNUM *, BN_copy, \
 AROS_LCA(BIGNUM *, (___a), A0), \
 AROS_LCA(const BIGNUM *, (___b), A1), \
     struct Library *, AMISSL_BASE_NAME, 369, Amissl)

#define BN_swap(___a, ___b) \
      AROS_LC2(void, BN_swap, \
 AROS_LCA(BIGNUM *, (___a), A0), \
 AROS_LCA(BIGNUM *, (___b), A1), \
     struct Library *, AMISSL_BASE_NAME, 370, Amissl)

#define BN_bin2bn(___s, ___len, ___ret) \
      AROS_LC3(BIGNUM *, BN_bin2bn, \
 AROS_LCA(const unsigned char *, (___s), A0), \
 AROS_LCA(int, (___len), D0), \
 AROS_LCA(BIGNUM *, (___ret), A1), \
     struct Library *, AMISSL_BASE_NAME, 371, Amissl)

#define BN_bn2bin(___a, ___to) \
      AROS_LC2(int, BN_bn2bin, \
 AROS_LCA(const BIGNUM *, (___a), A0), \
 AROS_LCA(unsigned char *, (___to), A1), \
     struct Library *, AMISSL_BASE_NAME, 372, Amissl)

#define BN_mpi2bn(___s, ___len, ___ret) \
      AROS_LC3(BIGNUM *, BN_mpi2bn, \
 AROS_LCA(const unsigned char *, (___s), A0), \
 AROS_LCA(int, (___len), D0), \
 AROS_LCA(BIGNUM *, (___ret), A1), \
     struct Library *, AMISSL_BASE_NAME, 373, Amissl)

#define BN_bn2mpi(___a, ___to) \
      AROS_LC2(int, BN_bn2mpi, \
 AROS_LCA(const BIGNUM *, (___a), A0), \
 AROS_LCA(unsigned char *, (___to), A1), \
     struct Library *, AMISSL_BASE_NAME, 374, Amissl)

#define BN_sub(___r, ___a, ___b) \
      AROS_LC3(int, BN_sub, \
 AROS_LCA(BIGNUM *, (___r), A0), \
 AROS_LCA(const BIGNUM *, (___a), A1), \
 AROS_LCA(const BIGNUM *, (___b), A2), \
     struct Library *, AMISSL_BASE_NAME, 375, Amissl)

#define BN_usub(___r, ___a, ___b) \
      AROS_LC3(int, BN_usub, \
 AROS_LCA(BIGNUM *, (___r), A0), \
 AROS_LCA(const BIGNUM *, (___a), A1), \
 AROS_LCA(const BIGNUM *, (___b), A2), \
     struct Library *, AMISSL_BASE_NAME, 376, Amissl)

#define BN_uadd(___r, ___a, ___b) \
      AROS_LC3(int, BN_uadd, \
 AROS_LCA(BIGNUM *, (___r), A0), \
 AROS_LCA(const BIGNUM *, (___a), A1), \
 AROS_LCA(const BIGNUM *, (___b), A2), \
     struct Library *, AMISSL_BASE_NAME, 377, Amissl)

#define BN_add(___r, ___a, ___b) \
      AROS_LC3(int, BN_add, \
 AROS_LCA(BIGNUM *, (___r), A0), \
 AROS_LCA(const BIGNUM *, (___a), A1), \
 AROS_LCA(const BIGNUM *, (___b), A2), \
     struct Library *, AMISSL_BASE_NAME, 378, Amissl)

#define BN_mul(___r, ___a, ___b, ___ctx) \
      AROS_LC4(int, BN_mul, \
 AROS_LCA(BIGNUM *, (___r), A0), \
 AROS_LCA(const BIGNUM *, (___a), A1), \
 AROS_LCA(const BIGNUM *, (___b), A2), \
 AROS_LCA(BN_CTX *, (___ctx), A3), \
     struct Library *, AMISSL_BASE_NAME, 379, Amissl)

#define BN_sqr(___r, ___a, ___ctx) \
      AROS_LC3(int, BN_sqr, \
 AROS_LCA(BIGNUM *, (___r), A0), \
 AROS_LCA(const BIGNUM *, (___a), A1), \
 AROS_LCA(BN_CTX *, (___ctx), A2), \
     struct Library *, AMISSL_BASE_NAME, 380, Amissl)

#define BN_div(___dv, ___rem, ___m, ___d, ___ctx) \
      AROS_LC5(int, BN_div, \
 AROS_LCA(BIGNUM *, (___dv), A0), \
 AROS_LCA(BIGNUM *, (___rem), A1), \
 AROS_LCA(const BIGNUM *, (___m), A2), \
 AROS_LCA(const BIGNUM *, (___d), A3), \
 AROS_LCA(BN_CTX *, (___ctx), D0), \
     struct Library *, AMISSL_BASE_NAME, 381, Amissl)

#define BN_nnmod(___r, ___m, ___d, ___ctx) \
      AROS_LC4(int, BN_nnmod, \
 AROS_LCA(BIGNUM *, (___r), A0), \
 AROS_LCA(const BIGNUM *, (___m), A1), \
 AROS_LCA(const BIGNUM *, (___d), A2), \
 AROS_LCA(BN_CTX *, (___ctx), A3), \
     struct Library *, AMISSL_BASE_NAME, 382, Amissl)

#define BN_mod_add(___r, ___a, ___b, ___m, ___ctx) \
      AROS_LC5(int, BN_mod_add, \
 AROS_LCA(BIGNUM *, (___r), A0), \
 AROS_LCA(const BIGNUM *, (___a), A1), \
 AROS_LCA(const BIGNUM *, (___b), A2), \
 AROS_LCA(const BIGNUM *, (___m), A3), \
 AROS_LCA(BN_CTX *, (___ctx), D0), \
     struct Library *, AMISSL_BASE_NAME, 383, Amissl)

#define BN_mod_add_quick(___r, ___a, ___b, ___m) \
      AROS_LC4(int, BN_mod_add_quick, \
 AROS_LCA(BIGNUM *, (___r), A0), \
 AROS_LCA(const BIGNUM *, (___a), A1), \
 AROS_LCA(const BIGNUM *, (___b), A2), \
 AROS_LCA(const BIGNUM *, (___m), A3), \
     struct Library *, AMISSL_BASE_NAME, 384, Amissl)

#define BN_mod_sub(___r, ___a, ___b, ___m, ___ctx) \
      AROS_LC5(int, BN_mod_sub, \
 AROS_LCA(BIGNUM *, (___r), A0), \
 AROS_LCA(const BIGNUM *, (___a), A1), \
 AROS_LCA(const BIGNUM *, (___b), A2), \
 AROS_LCA(const BIGNUM *, (___m), A3), \
 AROS_LCA(BN_CTX *, (___ctx), D0), \
     struct Library *, AMISSL_BASE_NAME, 385, Amissl)

#define BN_mod_sub_quick(___r, ___a, ___b, ___m) \
      AROS_LC4(int, BN_mod_sub_quick, \
 AROS_LCA(BIGNUM *, (___r), A0), \
 AROS_LCA(const BIGNUM *, (___a), A1), \
 AROS_LCA(const BIGNUM *, (___b), A2), \
 AROS_LCA(const BIGNUM *, (___m), A3), \
     struct Library *, AMISSL_BASE_NAME, 386, Amissl)

#define BN_mod_mul(___r, ___a, ___b, ___m, ___ctx) \
      AROS_LC5(int, BN_mod_mul, \
 AROS_LCA(BIGNUM *, (___r), A0), \
 AROS_LCA(const BIGNUM *, (___a), A1), \
 AROS_LCA(const BIGNUM *, (___b), A2), \
 AROS_LCA(const BIGNUM *, (___m), A3), \
 AROS_LCA(BN_CTX *, (___ctx), D0), \
     struct Library *, AMISSL_BASE_NAME, 387, Amissl)

#define BN_mod_sqr(___r, ___a, ___m, ___ctx) \
      AROS_LC4(int, BN_mod_sqr, \
 AROS_LCA(BIGNUM *, (___r), A0), \
 AROS_LCA(const BIGNUM *, (___a), A1), \
 AROS_LCA(const BIGNUM *, (___m), A2), \
 AROS_LCA(BN_CTX *, (___ctx), A3), \
     struct Library *, AMISSL_BASE_NAME, 388, Amissl)

#define BN_mod_lshift1(___r, ___a, ___m, ___ctx) \
      AROS_LC4(int, BN_mod_lshift1, \
 AROS_LCA(BIGNUM *, (___r), A0), \
 AROS_LCA(const BIGNUM *, (___a), A1), \
 AROS_LCA(const BIGNUM *, (___m), A2), \
 AROS_LCA(BN_CTX *, (___ctx), A3), \
     struct Library *, AMISSL_BASE_NAME, 389, Amissl)

#define BN_mod_lshift1_quick(___r, ___a, ___m) \
      AROS_LC3(int, BN_mod_lshift1_quick, \
 AROS_LCA(BIGNUM *, (___r), A0), \
 AROS_LCA(const BIGNUM *, (___a), A1), \
 AROS_LCA(const BIGNUM *, (___m), A2), \
     struct Library *, AMISSL_BASE_NAME, 390, Amissl)

#define BN_mod_lshift(___r, ___a, ___n, ___m, ___ctx) \
      AROS_LC5(int, BN_mod_lshift, \
 AROS_LCA(BIGNUM *, (___r), A0), \
 AROS_LCA(const BIGNUM *, (___a), A1), \
 AROS_LCA(int, (___n), D0), \
 AROS_LCA(const BIGNUM *, (___m), A2), \
 AROS_LCA(BN_CTX *, (___ctx), A3), \
     struct Library *, AMISSL_BASE_NAME, 391, Amissl)

#define BN_mod_lshift_quick(___r, ___a, ___n, ___m) \
      AROS_LC4(int, BN_mod_lshift_quick, \
 AROS_LCA(BIGNUM *, (___r), A0), \
 AROS_LCA(const BIGNUM *, (___a), A1), \
 AROS_LCA(int, (___n), D0), \
 AROS_LCA(const BIGNUM *, (___m), A2), \
     struct Library *, AMISSL_BASE_NAME, 392, Amissl)

#define BN_mod_word(___a, ___w) \
      AROS_LC2(BN_ULONG, BN_mod_word, \
 AROS_LCA(const BIGNUM *, (___a), A0), \
 AROS_LCA(BN_ULONG, (___w), D0), \
     struct Library *, AMISSL_BASE_NAME, 393, Amissl)

#define BN_div_word(___a, ___w) \
      AROS_LC2(BN_ULONG, BN_div_word, \
 AROS_LCA(BIGNUM *, (___a), A0), \
 AROS_LCA(BN_ULONG, (___w), D0), \
     struct Library *, AMISSL_BASE_NAME, 394, Amissl)

#define BN_mul_word(___a, ___w) \
      AROS_LC2(int, BN_mul_word, \
 AROS_LCA(BIGNUM *, (___a), A0), \
 AROS_LCA(BN_ULONG, (___w), D0), \
     struct Library *, AMISSL_BASE_NAME, 395, Amissl)

#define BN_add_word(___a, ___w) \
      AROS_LC2(int, BN_add_word, \
 AROS_LCA(BIGNUM *, (___a), A0), \
 AROS_LCA(BN_ULONG, (___w), D0), \
     struct Library *, AMISSL_BASE_NAME, 396, Amissl)

#define BN_sub_word(___a, ___w) \
      AROS_LC2(int, BN_sub_word, \
 AROS_LCA(BIGNUM *, (___a), A0), \
 AROS_LCA(BN_ULONG, (___w), D0), \
     struct Library *, AMISSL_BASE_NAME, 397, Amissl)

#define BN_set_word(___a, ___w) \
      AROS_LC2(int, BN_set_word, \
 AROS_LCA(BIGNUM *, (___a), A0), \
 AROS_LCA(BN_ULONG, (___w), D0), \
     struct Library *, AMISSL_BASE_NAME, 398, Amissl)

#define BN_get_word(___a) \
      AROS_LC1(BN_ULONG, BN_get_word, \
 AROS_LCA(const BIGNUM *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 399, Amissl)

#define BN_cmp(___a, ___b) \
      AROS_LC2(int, BN_cmp, \
 AROS_LCA(const BIGNUM *, (___a), A0), \
 AROS_LCA(const BIGNUM *, (___b), A1), \
     struct Library *, AMISSL_BASE_NAME, 400, Amissl)

#define BN_free(___a) \
      AROS_LC1(void, BN_free, \
 AROS_LCA(BIGNUM *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 401, Amissl)

#define BN_is_bit_set(___a, ___n) \
      AROS_LC2(int, BN_is_bit_set, \
 AROS_LCA(const BIGNUM *, (___a), A0), \
 AROS_LCA(int, (___n), D0), \
     struct Library *, AMISSL_BASE_NAME, 402, Amissl)

#define BN_lshift(___r, ___a, ___n) \
      AROS_LC3(int, BN_lshift, \
 AROS_LCA(BIGNUM *, (___r), A0), \
 AROS_LCA(const BIGNUM *, (___a), A1), \
 AROS_LCA(int, (___n), D0), \
     struct Library *, AMISSL_BASE_NAME, 403, Amissl)

#define BN_lshift1(___r, ___a) \
      AROS_LC2(int, BN_lshift1, \
 AROS_LCA(BIGNUM *, (___r), A0), \
 AROS_LCA(const BIGNUM *, (___a), A1), \
     struct Library *, AMISSL_BASE_NAME, 404, Amissl)

#define BN_exp(___r, ___a, ___p, ___ctx) \
      AROS_LC4(int, BN_exp, \
 AROS_LCA(BIGNUM *, (___r), A0), \
 AROS_LCA(const BIGNUM *, (___a), A1), \
 AROS_LCA(const BIGNUM *, (___p), A2), \
 AROS_LCA(BN_CTX *, (___ctx), A3), \
     struct Library *, AMISSL_BASE_NAME, 405, Amissl)

#define BN_mod_exp(___r, ___a, ___p, ___m, ___ctx) \
      AROS_LC5(int, BN_mod_exp, \
 AROS_LCA(BIGNUM *, (___r), A0), \
 AROS_LCA(const BIGNUM *, (___a), A1), \
 AROS_LCA(const BIGNUM *, (___p), A2), \
 AROS_LCA(const BIGNUM *, (___m), A3), \
 AROS_LCA(BN_CTX *, (___ctx), D0), \
     struct Library *, AMISSL_BASE_NAME, 406, Amissl)

#define BN_mod_exp_mont(___r, ___a, ___p, ___m, ___ctx, ___m_ctx) \
      AROS_LC6(int, BN_mod_exp_mont, \
 AROS_LCA(BIGNUM *, (___r), A0), \
 AROS_LCA(const BIGNUM *, (___a), A1), \
 AROS_LCA(const BIGNUM *, (___p), A2), \
 AROS_LCA(const BIGNUM *, (___m), A3), \
 AROS_LCA(BN_CTX *, (___ctx), D0), \
 AROS_LCA(BN_MONT_CTX *, (___m_ctx), D1), \
     struct Library *, AMISSL_BASE_NAME, 407, Amissl)

#define BN_mod_exp_mont_word(___r, ___a, ___p, ___m, ___ctx, ___m_ctx) \
      AROS_LC6(int, BN_mod_exp_mont_word, \
 AROS_LCA(BIGNUM *, (___r), A0), \
 AROS_LCA(BN_ULONG, (___a), D0), \
 AROS_LCA(const BIGNUM *, (___p), A1), \
 AROS_LCA(const BIGNUM *, (___m), A2), \
 AROS_LCA(BN_CTX *, (___ctx), A3), \
 AROS_LCA(BN_MONT_CTX *, (___m_ctx), D1), \
     struct Library *, AMISSL_BASE_NAME, 408, Amissl)

#define BN_mod_exp2_mont(___r, ___a1, ___p1, ___a2, ___p2, ___m, ___ctx, ___m_ctx) \
      AROS_LC8(int, BN_mod_exp2_mont, \
 AROS_LCA(BIGNUM *, (___r), A0), \
 AROS_LCA(const BIGNUM *, (___a1), A1), \
 AROS_LCA(const BIGNUM *, (___p1), A2), \
 AROS_LCA(const BIGNUM *, (___a2), A3), \
 AROS_LCA(const BIGNUM *, (___p2), D0), \
 AROS_LCA(const BIGNUM *, (___m), D1), \
 AROS_LCA(BN_CTX *, (___ctx), D2), \
 AROS_LCA(BN_MONT_CTX *, (___m_ctx), D3), \
     struct Library *, AMISSL_BASE_NAME, 409, Amissl)

#define BN_mod_exp_simple(___r, ___a, ___p, ___m, ___ctx) \
      AROS_LC5(int, BN_mod_exp_simple, \
 AROS_LCA(BIGNUM *, (___r), A0), \
 AROS_LCA(const BIGNUM *, (___a), A1), \
 AROS_LCA(const BIGNUM *, (___p), A2), \
 AROS_LCA(const BIGNUM *, (___m), A3), \
 AROS_LCA(BN_CTX *, (___ctx), D0), \
     struct Library *, AMISSL_BASE_NAME, 410, Amissl)

#define BN_mask_bits(___a, ___n) \
      AROS_LC2(int, BN_mask_bits, \
 AROS_LCA(BIGNUM *, (___a), A0), \
 AROS_LCA(int, (___n), D0), \
     struct Library *, AMISSL_BASE_NAME, 411, Amissl)

#define BN_print(___fp, ___a) \
      AROS_LC2(int, BN_print, \
 AROS_LCA(BIO *, (___fp), A0), \
 AROS_LCA(const BIGNUM *, (___a), A1), \
     struct Library *, AMISSL_BASE_NAME, 412, Amissl)

#define BN_reciprocal(___r, ___m, ___len, ___ctx) \
      AROS_LC4(int, BN_reciprocal, \
 AROS_LCA(BIGNUM *, (___r), A0), \
 AROS_LCA(const BIGNUM *, (___m), A1), \
 AROS_LCA(int, (___len), D0), \
 AROS_LCA(BN_CTX *, (___ctx), A2), \
     struct Library *, AMISSL_BASE_NAME, 413, Amissl)

#define BN_rshift(___r, ___a, ___n) \
      AROS_LC3(int, BN_rshift, \
 AROS_LCA(BIGNUM *, (___r), A0), \
 AROS_LCA(const BIGNUM *, (___a), A1), \
 AROS_LCA(int, (___n), D0), \
     struct Library *, AMISSL_BASE_NAME, 414, Amissl)

#define BN_rshift1(___r, ___a) \
      AROS_LC2(int, BN_rshift1, \
 AROS_LCA(BIGNUM *, (___r), A0), \
 AROS_LCA(const BIGNUM *, (___a), A1), \
     struct Library *, AMISSL_BASE_NAME, 415, Amissl)

#define BN_clear(___a) \
      AROS_LC1(void, BN_clear, \
 AROS_LCA(BIGNUM *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 416, Amissl)

#define BN_dup(___a) \
      AROS_LC1(BIGNUM *, BN_dup, \
 AROS_LCA(const BIGNUM *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 417, Amissl)

#define BN_ucmp(___a, ___b) \
      AROS_LC2(int, BN_ucmp, \
 AROS_LCA(const BIGNUM *, (___a), A0), \
 AROS_LCA(const BIGNUM *, (___b), A1), \
     struct Library *, AMISSL_BASE_NAME, 418, Amissl)

#define BN_set_bit(___a, ___n) \
      AROS_LC2(int, BN_set_bit, \
 AROS_LCA(BIGNUM *, (___a), A0), \
 AROS_LCA(int, (___n), D0), \
     struct Library *, AMISSL_BASE_NAME, 419, Amissl)

#define BN_clear_bit(___a, ___n) \
      AROS_LC2(int, BN_clear_bit, \
 AROS_LCA(BIGNUM *, (___a), A0), \
 AROS_LCA(int, (___n), D0), \
     struct Library *, AMISSL_BASE_NAME, 420, Amissl)

#define BN_bn2hex(___a) \
      AROS_LC1(char *, BN_bn2hex, \
 AROS_LCA(const BIGNUM *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 421, Amissl)

#define BN_bn2dec(___a) \
      AROS_LC1(char *, BN_bn2dec, \
 AROS_LCA(const BIGNUM *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 422, Amissl)

#define BN_hex2bn(___a, ___str) \
      AROS_LC2(int, BN_hex2bn, \
 AROS_LCA(BIGNUM **, (___a), A0), \
 AROS_LCA(const char *, (___str), A1), \
     struct Library *, AMISSL_BASE_NAME, 423, Amissl)

#define BN_dec2bn(___a, ___str) \
      AROS_LC2(int, BN_dec2bn, \
 AROS_LCA(BIGNUM **, (___a), A0), \
 AROS_LCA(const char *, (___str), A1), \
     struct Library *, AMISSL_BASE_NAME, 424, Amissl)

#define BN_gcd(___r, ___a, ___b, ___ctx) \
      AROS_LC4(int, BN_gcd, \
 AROS_LCA(BIGNUM *, (___r), A0), \
 AROS_LCA(const BIGNUM *, (___a), A1), \
 AROS_LCA(const BIGNUM *, (___b), A2), \
 AROS_LCA(BN_CTX *, (___ctx), A3), \
     struct Library *, AMISSL_BASE_NAME, 425, Amissl)

#define BN_kronecker(___a, ___b, ___ctx) \
      AROS_LC3(int, BN_kronecker, \
 AROS_LCA(const BIGNUM *, (___a), A0), \
 AROS_LCA(const BIGNUM *, (___b), A1), \
 AROS_LCA(BN_CTX *, (___ctx), A2), \
     struct Library *, AMISSL_BASE_NAME, 426, Amissl)

#define BN_mod_inverse(___ret, ___a, ___n, ___ctx) \
      AROS_LC4(BIGNUM *, BN_mod_inverse, \
 AROS_LCA(BIGNUM *, (___ret), A0), \
 AROS_LCA(const BIGNUM *, (___a), A1), \
 AROS_LCA(const BIGNUM *, (___n), A2), \
 AROS_LCA(BN_CTX *, (___ctx), A3), \
     struct Library *, AMISSL_BASE_NAME, 427, Amissl)

#define BN_mod_sqrt(___ret, ___a, ___n, ___ctx) \
      AROS_LC4(BIGNUM *, BN_mod_sqrt, \
 AROS_LCA(BIGNUM *, (___ret), A0), \
 AROS_LCA(const BIGNUM *, (___a), A1), \
 AROS_LCA(const BIGNUM *, (___n), A2), \
 AROS_LCA(BN_CTX *, (___ctx), A3), \
     struct Library *, AMISSL_BASE_NAME, 428, Amissl)

#define BN_generate_prime(___ret, ___bits, ___safe, ___add, ___rem, ___callback, ___cb_arg) \
      AROS_LC7(BIGNUM *, BN_generate_prime, \
 AROS_LCA(BIGNUM *, (___ret), A0), \
 AROS_LCA(int, (___bits), D0), \
 AROS_LCA(int, (___safe), D1), \
 AROS_LCA(const BIGNUM *, (___add), A1), \
 AROS_LCA(const BIGNUM *, (___rem), A2), \
 AROS_LCA(void (*)(int,int,void *), (___callback), A3), \
 AROS_LCA(void *, (___cb_arg), D2), \
     struct Library *, AMISSL_BASE_NAME, 429, Amissl)

#define BN_is_prime(___p, ___nchecks, ___callback, ___ctx, ___cb_arg) \
      AROS_LC5(int, BN_is_prime, \
 AROS_LCA(const BIGNUM *, (___p), A0), \
 AROS_LCA(int, (___nchecks), D0), \
 AROS_LCA(void (*)(int,int,void *), (___callback), A1), \
 AROS_LCA(BN_CTX *, (___ctx), A2), \
 AROS_LCA(void *, (___cb_arg), A3), \
     struct Library *, AMISSL_BASE_NAME, 430, Amissl)

#define BN_is_prime_fasttest(___p, ___nchecks, ___callback, ___ctx, ___cb_arg, ___do_trial_division) \
      AROS_LC6(int, BN_is_prime_fasttest, \
 AROS_LCA(const BIGNUM *, (___p), A0), \
 AROS_LCA(int, (___nchecks), D0), \
 AROS_LCA(void (*)(int,int,void *), (___callback), A1), \
 AROS_LCA(BN_CTX *, (___ctx), A2), \
 AROS_LCA(void *, (___cb_arg), A3), \
 AROS_LCA(int, (___do_trial_division), D1), \
     struct Library *, AMISSL_BASE_NAME, 431, Amissl)

#define BN_MONT_CTX_new() \
      AROS_LC0(BN_MONT_CTX *, BN_MONT_CTX_new, \
     struct Library *, AMISSL_BASE_NAME, 432, Amissl)

#define BN_mod_mul_montgomery(___r, ___a, ___b, ___mont, ___ctx) \
      AROS_LC5(int, BN_mod_mul_montgomery, \
 AROS_LCA(BIGNUM *, (___r), A0), \
 AROS_LCA(const BIGNUM *, (___a), A1), \
 AROS_LCA(const BIGNUM *, (___b), A2), \
 AROS_LCA(BN_MONT_CTX *, (___mont), A3), \
 AROS_LCA(BN_CTX *, (___ctx), D0), \
     struct Library *, AMISSL_BASE_NAME, 434, Amissl)

#define BN_from_montgomery(___r, ___a, ___mont, ___ctx) \
      AROS_LC4(int, BN_from_montgomery, \
 AROS_LCA(BIGNUM *, (___r), A0), \
 AROS_LCA(const BIGNUM *, (___a), A1), \
 AROS_LCA(BN_MONT_CTX *, (___mont), A2), \
 AROS_LCA(BN_CTX *, (___ctx), A3), \
     struct Library *, AMISSL_BASE_NAME, 435, Amissl)

#define BN_MONT_CTX_free(___mont) \
      AROS_LC1(void, BN_MONT_CTX_free, \
 AROS_LCA(BN_MONT_CTX *, (___mont), A0), \
     struct Library *, AMISSL_BASE_NAME, 436, Amissl)

#define BN_MONT_CTX_set(___mont, ___mod, ___ctx) \
      AROS_LC3(int, BN_MONT_CTX_set, \
 AROS_LCA(BN_MONT_CTX *, (___mont), A0), \
 AROS_LCA(const BIGNUM *, (___mod), A1), \
 AROS_LCA(BN_CTX *, (___ctx), A2), \
     struct Library *, AMISSL_BASE_NAME, 437, Amissl)

#define BN_MONT_CTX_copy(___to, ___from) \
      AROS_LC2(BN_MONT_CTX *, BN_MONT_CTX_copy, \
 AROS_LCA(BN_MONT_CTX *, (___to), A0), \
 AROS_LCA(BN_MONT_CTX *, (___from), A1), \
     struct Library *, AMISSL_BASE_NAME, 438, Amissl)

#define BN_BLINDING_new(___A, ___Ai, ___mod) \
      AROS_LC3(BN_BLINDING *, BN_BLINDING_new, \
 AROS_LCA(const BIGNUM *, (___A), A0), \
 AROS_LCA(const BIGNUM *, (___Ai), A1), \
 AROS_LCA(BIGNUM *, (___mod), A2), \
     struct Library *, AMISSL_BASE_NAME, 439, Amissl)

#define BN_BLINDING_free(___b) \
      AROS_LC1(void, BN_BLINDING_free, \
 AROS_LCA(BN_BLINDING *, (___b), A0), \
     struct Library *, AMISSL_BASE_NAME, 440, Amissl)

#define BN_BLINDING_update(___b, ___ctx) \
      AROS_LC2(int, BN_BLINDING_update, \
 AROS_LCA(BN_BLINDING *, (___b), A0), \
 AROS_LCA(BN_CTX *, (___ctx), A1), \
     struct Library *, AMISSL_BASE_NAME, 441, Amissl)

#define BN_BLINDING_convert(___n, ___r, ___ctx) \
      AROS_LC3(int, BN_BLINDING_convert, \
 AROS_LCA(BIGNUM *, (___n), A0), \
 AROS_LCA(BN_BLINDING *, (___r), A1), \
 AROS_LCA(BN_CTX *, (___ctx), A2), \
     struct Library *, AMISSL_BASE_NAME, 442, Amissl)

#define BN_BLINDING_invert(___n, ___b, ___ctx) \
      AROS_LC3(int, BN_BLINDING_invert, \
 AROS_LCA(BIGNUM *, (___n), A0), \
 AROS_LCA(BN_BLINDING *, (___b), A1), \
 AROS_LCA(BN_CTX *, (___ctx), A2), \
     struct Library *, AMISSL_BASE_NAME, 443, Amissl)

#define BN_set_params(___mul, ___high, ___low, ___mont) \
      AROS_LC4(void, BN_set_params, \
 AROS_LCA(int, (___mul), D0), \
 AROS_LCA(int, (___high), D1), \
 AROS_LCA(int, (___low), D2), \
 AROS_LCA(int, (___mont), D3), \
     struct Library *, AMISSL_BASE_NAME, 444, Amissl)

#define BN_get_params(___which) \
      AROS_LC1(int, BN_get_params, \
 AROS_LCA(int, (___which), D0), \
     struct Library *, AMISSL_BASE_NAME, 445, Amissl)

#define BN_RECP_CTX_new() \
      AROS_LC0(BN_RECP_CTX *, BN_RECP_CTX_new, \
     struct Library *, AMISSL_BASE_NAME, 447, Amissl)

#define BN_RECP_CTX_free(___recp) \
      AROS_LC1(void, BN_RECP_CTX_free, \
 AROS_LCA(BN_RECP_CTX *, (___recp), A0), \
     struct Library *, AMISSL_BASE_NAME, 448, Amissl)

#define BN_RECP_CTX_set(___recp, ___rdiv, ___ctx) \
      AROS_LC3(int, BN_RECP_CTX_set, \
 AROS_LCA(BN_RECP_CTX *, (___recp), A0), \
 AROS_LCA(const BIGNUM *, (___rdiv), A1), \
 AROS_LCA(BN_CTX *, (___ctx), A2), \
     struct Library *, AMISSL_BASE_NAME, 449, Amissl)

#define BN_mod_mul_reciprocal(___r, ___x, ___y, ___recp, ___ctx) \
      AROS_LC5(int, BN_mod_mul_reciprocal, \
 AROS_LCA(BIGNUM *, (___r), A0), \
 AROS_LCA(const BIGNUM *, (___x), A1), \
 AROS_LCA(const BIGNUM *, (___y), A2), \
 AROS_LCA(BN_RECP_CTX *, (___recp), A3), \
 AROS_LCA(BN_CTX *, (___ctx), D0), \
     struct Library *, AMISSL_BASE_NAME, 450, Amissl)

#define BN_mod_exp_recp(___r, ___a, ___p, ___m, ___ctx) \
      AROS_LC5(int, BN_mod_exp_recp, \
 AROS_LCA(BIGNUM *, (___r), A0), \
 AROS_LCA(const BIGNUM *, (___a), A1), \
 AROS_LCA(const BIGNUM *, (___p), A2), \
 AROS_LCA(const BIGNUM *, (___m), A3), \
 AROS_LCA(BN_CTX *, (___ctx), D0), \
     struct Library *, AMISSL_BASE_NAME, 451, Amissl)

#define BN_div_recp(___dv, ___rem, ___m, ___recp, ___ctx) \
      AROS_LC5(int, BN_div_recp, \
 AROS_LCA(BIGNUM *, (___dv), A0), \
 AROS_LCA(BIGNUM *, (___rem), A1), \
 AROS_LCA(const BIGNUM *, (___m), A2), \
 AROS_LCA(BN_RECP_CTX *, (___recp), A3), \
 AROS_LCA(BN_CTX *, (___ctx), D0), \
     struct Library *, AMISSL_BASE_NAME, 452, Amissl)

#define BN_bntest_rand(___rnd, ___bits, ___top, ___bottom) \
      AROS_LC4(int, BN_bntest_rand, \
 AROS_LCA(BIGNUM *, (___rnd), A0), \
 AROS_LCA(int, (___bits), D0), \
 AROS_LCA(int, (___top), D1), \
 AROS_LCA(int, (___bottom), D2), \
     struct Library *, AMISSL_BASE_NAME, 461, Amissl)

#define ERR_load_BN_strings() \
      AROS_LC0(int, ERR_load_BN_strings, \
     struct Library *, AMISSL_BASE_NAME, 462, Amissl)

#define BUF_MEM_new() \
      AROS_LC0(BUF_MEM *, BUF_MEM_new, \
     struct Library *, AMISSL_BASE_NAME, 463, Amissl)

#define BUF_MEM_free(___a) \
      AROS_LC1(void, BUF_MEM_free, \
 AROS_LCA(BUF_MEM *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 464, Amissl)

#define BUF_MEM_grow(___str, ___len) \
      AROS_LC2(size_t, BUF_MEM_grow, \
 AROS_LCA(BUF_MEM *, (___str), A0), \
 AROS_LCA(size_t, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 465, Amissl)

#define BUF_MEM_grow_clean(___str, ___len) \
      AROS_LC2(size_t, BUF_MEM_grow_clean, \
 AROS_LCA(BUF_MEM *, (___str), A0), \
 AROS_LCA(size_t, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 466, Amissl)

#define OBSOLETE_BUF_strdup(___str) \
      AROS_LC1(char *, OBSOLETE_BUF_strdup, \
 AROS_LCA(const char *, (___str), A0), \
     struct Library *, AMISSL_BASE_NAME, 467, Amissl)

#define OBSOLETE_BUF_strlcpy(___dst, ___src, ___siz) \
      AROS_LC3(size_t, OBSOLETE_BUF_strlcpy, \
 AROS_LCA(char *, (___dst), A0), \
 AROS_LCA(const char *, (___src), A1), \
 AROS_LCA(size_t, (___siz), D0), \
     struct Library *, AMISSL_BASE_NAME, 468, Amissl)

#define OBSOLETE_BUF_strlcat(___dst, ___src, ___siz) \
      AROS_LC3(size_t, OBSOLETE_BUF_strlcat, \
 AROS_LCA(char *, (___dst), A0), \
 AROS_LCA(const char *, (___src), A1), \
 AROS_LCA(size_t, (___siz), D0), \
     struct Library *, AMISSL_BASE_NAME, 469, Amissl)

#define ERR_load_BUF_strings() \
      AROS_LC0(int, ERR_load_BUF_strings, \
     struct Library *, AMISSL_BASE_NAME, 470, Amissl)

#define COMP_CTX_new(___meth) \
      AROS_LC1(COMP_CTX *, COMP_CTX_new, \
 AROS_LCA(COMP_METHOD *, (___meth), A0), \
     struct Library *, AMISSL_BASE_NAME, 471, Amissl)

#define COMP_CTX_free(___ctx) \
      AROS_LC1(void, COMP_CTX_free, \
 AROS_LCA(COMP_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 472, Amissl)

#define COMP_compress_block(___ctx, ___out, ___olen, ___in, ___ilen) \
      AROS_LC5(int, COMP_compress_block, \
 AROS_LCA(COMP_CTX *, (___ctx), A0), \
 AROS_LCA(unsigned char *, (___out), A1), \
 AROS_LCA(int, (___olen), D0), \
 AROS_LCA(unsigned char *, (___in), A2), \
 AROS_LCA(int, (___ilen), D1), \
     struct Library *, AMISSL_BASE_NAME, 473, Amissl)

#define COMP_expand_block(___ctx, ___out, ___olen, ___in, ___ilen) \
      AROS_LC5(int, COMP_expand_block, \
 AROS_LCA(COMP_CTX *, (___ctx), A0), \
 AROS_LCA(unsigned char *, (___out), A1), \
 AROS_LCA(int, (___olen), D0), \
 AROS_LCA(unsigned char *, (___in), A2), \
 AROS_LCA(int, (___ilen), D1), \
     struct Library *, AMISSL_BASE_NAME, 474, Amissl)

#define COMP_zlib() \
      AROS_LC0(COMP_METHOD *, COMP_zlib, \
     struct Library *, AMISSL_BASE_NAME, 476, Amissl)

#define ERR_load_COMP_strings() \
      AROS_LC0(int, ERR_load_COMP_strings, \
     struct Library *, AMISSL_BASE_NAME, 477, Amissl)

#define CONF_set_default_method(___meth) \
      AROS_LC1(int, CONF_set_default_method, \
 AROS_LCA(CONF_METHOD *, (___meth), A0), \
     struct Library *, AMISSL_BASE_NAME, 478, Amissl)

#define CONF_set_nconf(___conf, ___hash) \
      AROS_LC2(void, CONF_set_nconf, \
 AROS_LCA(CONF *, (___conf), A0), \
 AROS_LCA(LHASH_OF(CONF_VALUE) *, (___hash), A1), \
     struct Library *, AMISSL_BASE_NAME, 479, Amissl)

#define CONF_load(___conf, ___file, ___eline) \
      AROS_LC3(LHASH_OF(CONF_VALUE) *, CONF_load, \
 AROS_LCA(LHASH_OF(CONF_VALUE) *, (___conf), A0), \
 AROS_LCA(const char *, (___file), A1), \
 AROS_LCA(long *, (___eline), A2), \
     struct Library *, AMISSL_BASE_NAME, 480, Amissl)

#define CONF_load_bio(___conf, ___bp, ___eline) \
      AROS_LC3(LHASH_OF(CONF_VALUE) *, CONF_load_bio, \
 AROS_LCA(LHASH_OF(CONF_VALUE) *, (___conf), A0), \
 AROS_LCA(BIO *, (___bp), A1), \
 AROS_LCA(long *, (___eline), A2), \
     struct Library *, AMISSL_BASE_NAME, 481, Amissl)

#define CONF_get_section(___conf, ___section) \
      AROS_LC2(STACK_OF(CONF_VALUE) *, CONF_get_section, \
 AROS_LCA(LHASH_OF(CONF_VALUE) *, (___conf), A0), \
 AROS_LCA(const char *, (___section), A1), \
     struct Library *, AMISSL_BASE_NAME, 482, Amissl)

#define CONF_get_string(___conf, ___group, ___name) \
      AROS_LC3(char *, CONF_get_string, \
 AROS_LCA(LHASH_OF(CONF_VALUE) *, (___conf), A0), \
 AROS_LCA(const char *, (___group), A1), \
 AROS_LCA(const char *, (___name), A2), \
     struct Library *, AMISSL_BASE_NAME, 483, Amissl)

#define CONF_get_number(___conf, ___group, ___name) \
      AROS_LC3(long, CONF_get_number, \
 AROS_LCA(LHASH_OF(CONF_VALUE) *, (___conf), A0), \
 AROS_LCA(const char *, (___group), A1), \
 AROS_LCA(const char *, (___name), A2), \
     struct Library *, AMISSL_BASE_NAME, 484, Amissl)

#define CONF_free(___conf) \
      AROS_LC1(void, CONF_free, \
 AROS_LCA(LHASH_OF(CONF_VALUE) *, (___conf), A0), \
     struct Library *, AMISSL_BASE_NAME, 485, Amissl)

#define CONF_dump_bio(___conf, ___out) \
      AROS_LC2(int, CONF_dump_bio, \
 AROS_LCA(LHASH_OF(CONF_VALUE) *, (___conf), A0), \
 AROS_LCA(BIO *, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 486, Amissl)

#define OPENSSL_config(___config_name) \
      AROS_LC1(void, OPENSSL_config, \
 AROS_LCA(const char *, (___config_name), A0), \
     struct Library *, AMISSL_BASE_NAME, 487, Amissl)

#define OBSOLETE_OPENSSL_no_config() \
      AROS_LC0(void, OBSOLETE_OPENSSL_no_config, \
     struct Library *, AMISSL_BASE_NAME, 488, Amissl)

#define NCONF_new(___meth) \
      AROS_LC1(CONF *, NCONF_new, \
 AROS_LCA(CONF_METHOD *, (___meth), A0), \
     struct Library *, AMISSL_BASE_NAME, 489, Amissl)

#define NCONF_default() \
      AROS_LC0(CONF_METHOD *, NCONF_default, \
     struct Library *, AMISSL_BASE_NAME, 490, Amissl)

#define NCONF_WIN32() \
      AROS_LC0(CONF_METHOD *, NCONF_WIN32, \
     struct Library *, AMISSL_BASE_NAME, 491, Amissl)

#define NCONF_free(___conf) \
      AROS_LC1(void, NCONF_free, \
 AROS_LCA(CONF *, (___conf), A0), \
     struct Library *, AMISSL_BASE_NAME, 492, Amissl)

#define NCONF_free_data(___conf) \
      AROS_LC1(void, NCONF_free_data, \
 AROS_LCA(CONF *, (___conf), A0), \
     struct Library *, AMISSL_BASE_NAME, 493, Amissl)

#define NCONF_load(___conf, ___file, ___eline) \
      AROS_LC3(int, NCONF_load, \
 AROS_LCA(CONF *, (___conf), A0), \
 AROS_LCA(const char *, (___file), A1), \
 AROS_LCA(long *, (___eline), A2), \
     struct Library *, AMISSL_BASE_NAME, 494, Amissl)

#define NCONF_load_bio(___conf, ___bp, ___eline) \
      AROS_LC3(int, NCONF_load_bio, \
 AROS_LCA(CONF *, (___conf), A0), \
 AROS_LCA(BIO *, (___bp), A1), \
 AROS_LCA(long *, (___eline), A2), \
     struct Library *, AMISSL_BASE_NAME, 495, Amissl)

#define NCONF_get_section(___conf, ___section) \
      AROS_LC2(STACK_OF(CONF_VALUE) *, NCONF_get_section, \
 AROS_LCA(const CONF *, (___conf), A0), \
 AROS_LCA(const char *, (___section), A1), \
     struct Library *, AMISSL_BASE_NAME, 496, Amissl)

#define NCONF_get_string(___conf, ___group, ___name) \
      AROS_LC3(char *, NCONF_get_string, \
 AROS_LCA(const CONF *, (___conf), A0), \
 AROS_LCA(const char *, (___group), A1), \
 AROS_LCA(const char *, (___name), A2), \
     struct Library *, AMISSL_BASE_NAME, 497, Amissl)

#define NCONF_get_number_e(___conf, ___group, ___name, ___result) \
      AROS_LC4(int, NCONF_get_number_e, \
 AROS_LCA(const CONF *, (___conf), A0), \
 AROS_LCA(const char *, (___group), A1), \
 AROS_LCA(const char *, (___name), A2), \
 AROS_LCA(long *, (___result), A3), \
     struct Library *, AMISSL_BASE_NAME, 498, Amissl)

#define NCONF_dump_bio(___conf, ___out) \
      AROS_LC2(int, NCONF_dump_bio, \
 AROS_LCA(const CONF *, (___conf), A0), \
 AROS_LCA(BIO *, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 499, Amissl)

#define CONF_modules_load(___cnf, ___appname, ___flags) \
      AROS_LC3(int, CONF_modules_load, \
 AROS_LCA(const CONF *, (___cnf), A0), \
 AROS_LCA(const char *, (___appname), A1), \
 AROS_LCA(unsigned long, (___flags), D0), \
     struct Library *, AMISSL_BASE_NAME, 500, Amissl)

#define CONF_modules_load_file(___filename, ___appname, ___flags) \
      AROS_LC3(int, CONF_modules_load_file, \
 AROS_LCA(const char *, (___filename), A0), \
 AROS_LCA(const char *, (___appname), A1), \
 AROS_LCA(unsigned long, (___flags), D0), \
     struct Library *, AMISSL_BASE_NAME, 501, Amissl)

#define CONF_modules_unload(___all) \
      AROS_LC1(void, CONF_modules_unload, \
 AROS_LCA(int, (___all), D0), \
     struct Library *, AMISSL_BASE_NAME, 502, Amissl)

#define CONF_modules_finish() \
      AROS_LC0(void, CONF_modules_finish, \
     struct Library *, AMISSL_BASE_NAME, 503, Amissl)

#define CONF_module_add(___name, ___ifunc, ___ffunc) \
      AROS_LC3(int, CONF_module_add, \
 AROS_LCA(const char *, (___name), A0), \
 AROS_LCA(conf_init_func *, (___ifunc), A1), \
 AROS_LCA(conf_finish_func *, (___ffunc), A2), \
     struct Library *, AMISSL_BASE_NAME, 505, Amissl)

#define CONF_imodule_get_name(___md) \
      AROS_LC1(const char *, CONF_imodule_get_name, \
 AROS_LCA(const CONF_IMODULE *, (___md), A0), \
     struct Library *, AMISSL_BASE_NAME, 506, Amissl)

#define CONF_imodule_get_value(___md) \
      AROS_LC1(const char *, CONF_imodule_get_value, \
 AROS_LCA(const CONF_IMODULE *, (___md), A0), \
     struct Library *, AMISSL_BASE_NAME, 507, Amissl)

#define CONF_imodule_get_usr_data(___md) \
      AROS_LC1(void *, CONF_imodule_get_usr_data, \
 AROS_LCA(const CONF_IMODULE *, (___md), A0), \
     struct Library *, AMISSL_BASE_NAME, 508, Amissl)

#define CONF_imodule_set_usr_data(___md, ___usr_data) \
      AROS_LC2(void, CONF_imodule_set_usr_data, \
 AROS_LCA(CONF_IMODULE *, (___md), A0), \
 AROS_LCA(void *, (___usr_data), A1), \
     struct Library *, AMISSL_BASE_NAME, 509, Amissl)

#define CONF_imodule_get_module(___md) \
      AROS_LC1(CONF_MODULE *, CONF_imodule_get_module, \
 AROS_LCA(const CONF_IMODULE *, (___md), A0), \
     struct Library *, AMISSL_BASE_NAME, 510, Amissl)

#define CONF_imodule_get_flags(___md) \
      AROS_LC1(unsigned long, CONF_imodule_get_flags, \
 AROS_LCA(const CONF_IMODULE *, (___md), A0), \
     struct Library *, AMISSL_BASE_NAME, 511, Amissl)

#define CONF_imodule_set_flags(___md, ___flags) \
      AROS_LC2(void, CONF_imodule_set_flags, \
 AROS_LCA(CONF_IMODULE *, (___md), A0), \
 AROS_LCA(unsigned long, (___flags), D0), \
     struct Library *, AMISSL_BASE_NAME, 512, Amissl)

#define CONF_module_get_usr_data(___pmod) \
      AROS_LC1(void *, CONF_module_get_usr_data, \
 AROS_LCA(CONF_MODULE *, (___pmod), A0), \
     struct Library *, AMISSL_BASE_NAME, 513, Amissl)

#define CONF_module_set_usr_data(___pmod, ___usr_data) \
      AROS_LC2(void, CONF_module_set_usr_data, \
 AROS_LCA(CONF_MODULE *, (___pmod), A0), \
 AROS_LCA(void *, (___usr_data), A1), \
     struct Library *, AMISSL_BASE_NAME, 514, Amissl)

#define CONF_get1_default_config_file() \
      AROS_LC0(char *, CONF_get1_default_config_file, \
     struct Library *, AMISSL_BASE_NAME, 515, Amissl)

#define CONF_parse_list(___list, ___sep, ___nospc, ___list_cb, ___arg) \
      AROS_LC5(int, CONF_parse_list, \
 AROS_LCA(const char *, (___list), A0), \
 AROS_LCA(int, (___sep), D0), \
 AROS_LCA(int, (___nospc), D1), \
 AROS_LCA(int (*)(const char *elem,int len,void *usr), (___list_cb), A1), \
 AROS_LCA(void *, (___arg), A2), \
     struct Library *, AMISSL_BASE_NAME, 516, Amissl)

#define OPENSSL_load_builtin_modules() \
      AROS_LC0(void, OPENSSL_load_builtin_modules, \
     struct Library *, AMISSL_BASE_NAME, 517, Amissl)

#define ERR_load_CONF_strings() \
      AROS_LC0(int, ERR_load_CONF_strings, \
     struct Library *, AMISSL_BASE_NAME, 518, Amissl)

#define OBSOLETE_SSLeay_version(___type) \
      AROS_LC1(const char *, OBSOLETE_SSLeay_version, \
 AROS_LCA(int, (___type), D0), \
     struct Library *, AMISSL_BASE_NAME, 528, Amissl)

#define OBSOLETE_SSLeay() \
      AROS_LC0(unsigned long, OBSOLETE_SSLeay, \
     struct Library *, AMISSL_BASE_NAME, 529, Amissl)

#define OPENSSL_issetugid() \
      AROS_LC0(int, OPENSSL_issetugid, \
     struct Library *, AMISSL_BASE_NAME, 530, Amissl)

#define CRYPTO_get_ex_new_index(___class_index, ___argl, ___argp, ___new_func, ___dup_func, ___free_func) \
      AROS_LC6(int, CRYPTO_get_ex_new_index, \
 AROS_LCA(int, (___class_index), D0), \
 AROS_LCA(long, (___argl), D1), \
 AROS_LCA(void *, (___argp), A0), \
 AROS_LCA(CRYPTO_EX_new *, (___new_func), A1), \
 AROS_LCA(CRYPTO_EX_dup *, (___dup_func), A2), \
 AROS_LCA(CRYPTO_EX_free *, (___free_func), A3), \
     struct Library *, AMISSL_BASE_NAME, 534, Amissl)

#define CRYPTO_new_ex_data(___class_index, ___obj, ___ad) \
      AROS_LC3(int, CRYPTO_new_ex_data, \
 AROS_LCA(int, (___class_index), D0), \
 AROS_LCA(void *, (___obj), A0), \
 AROS_LCA(CRYPTO_EX_DATA *, (___ad), A1), \
     struct Library *, AMISSL_BASE_NAME, 535, Amissl)

#define CRYPTO_dup_ex_data(___class_index, ___to, ___from) \
      AROS_LC3(int, CRYPTO_dup_ex_data, \
 AROS_LCA(int, (___class_index), D0), \
 AROS_LCA(CRYPTO_EX_DATA *, (___to), A0), \
 AROS_LCA(const CRYPTO_EX_DATA *, (___from), A1), \
     struct Library *, AMISSL_BASE_NAME, 536, Amissl)

#define CRYPTO_free_ex_data(___class_index, ___obj, ___ad) \
      AROS_LC3(void, CRYPTO_free_ex_data, \
 AROS_LCA(int, (___class_index), D0), \
 AROS_LCA(void *, (___obj), A0), \
 AROS_LCA(CRYPTO_EX_DATA *, (___ad), A1), \
     struct Library *, AMISSL_BASE_NAME, 537, Amissl)

#define CRYPTO_set_ex_data(___ad, ___idx, ___val) \
      AROS_LC3(int, CRYPTO_set_ex_data, \
 AROS_LCA(CRYPTO_EX_DATA *, (___ad), A0), \
 AROS_LCA(int, (___idx), D0), \
 AROS_LCA(void *, (___val), A1), \
     struct Library *, AMISSL_BASE_NAME, 538, Amissl)

#define CRYPTO_get_ex_data(___ad, ___idx) \
      AROS_LC2(void *, CRYPTO_get_ex_data, \
 AROS_LCA(const CRYPTO_EX_DATA *, (___ad), A0), \
 AROS_LCA(int, (___idx), D0), \
     struct Library *, AMISSL_BASE_NAME, 539, Amissl)

#define CRYPTO_set_mem_functions(___malloc_fn, ___realloc_fn, ___free_fn) \
      AROS_LC3(int, CRYPTO_set_mem_functions, \
 AROS_LCA(CRYPTO_malloc_fn, (___malloc_fn), A0), \
 AROS_LCA(CRYPTO_realloc_fn, (___realloc_fn), A1), \
 AROS_LCA(CRYPTO_free_fn, (___free_fn), A2), \
     struct Library *, AMISSL_BASE_NAME, 562, Amissl)

#define CRYPTO_get_mem_functions(___malloc_fn, ___realloc_fn, ___free_fn) \
      AROS_LC3(void, CRYPTO_get_mem_functions, \
 AROS_LCA(CRYPTO_malloc_fn *, (___malloc_fn), A0), \
 AROS_LCA(CRYPTO_realloc_fn *, (___realloc_fn), A1), \
 AROS_LCA(CRYPTO_free_fn *, (___free_fn), A2), \
     struct Library *, AMISSL_BASE_NAME, 567, Amissl)

#define CRYPTO_malloc(___num, ___file, ___line) \
      AROS_LC3(void *, CRYPTO_malloc, \
 AROS_LCA(size_t, (___num), D0), \
 AROS_LCA(const char *, (___file), A0), \
 AROS_LCA(int, (___line), D1), \
     struct Library *, AMISSL_BASE_NAME, 574, Amissl)

#define CRYPTO_free(___str, ___file, ___line) \
      AROS_LC3(void, CRYPTO_free, \
 AROS_LCA(void *, (___str), A0), \
 AROS_LCA(const char *, (___file), A1), \
 AROS_LCA(int, (___line), D0), \
     struct Library *, AMISSL_BASE_NAME, 575, Amissl)

#define CRYPTO_realloc(___addr, ___num, ___file, ___line) \
      AROS_LC4(void *, CRYPTO_realloc, \
 AROS_LCA(void *, (___addr), A0), \
 AROS_LCA(size_t, (___num), D0), \
 AROS_LCA(const char *, (___file), A1), \
 AROS_LCA(int, (___line), D1), \
     struct Library *, AMISSL_BASE_NAME, 576, Amissl)

#define OPENSSL_cleanse(___ptr, ___len) \
      AROS_LC2(void, OPENSSL_cleanse, \
 AROS_LCA(void *, (___ptr), A0), \
 AROS_LCA(size_t, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 579, Amissl)

#define ERR_load_CRYPTO_strings() \
      AROS_LC0(int, ERR_load_CRYPTO_strings, \
     struct Library *, AMISSL_BASE_NAME, 593, Amissl)

#define EC_GFp_simple_method() \
      AROS_LC0(const EC_METHOD *, EC_GFp_simple_method, \
     struct Library *, AMISSL_BASE_NAME, 619, Amissl)

#define EC_GFp_mont_method() \
      AROS_LC0(const EC_METHOD *, EC_GFp_mont_method, \
     struct Library *, AMISSL_BASE_NAME, 620, Amissl)

#define EC_GROUP_new(___a) \
      AROS_LC1(EC_GROUP *, EC_GROUP_new, \
 AROS_LCA(const EC_METHOD *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 621, Amissl)

#define EC_GROUP_free(___a) \
      AROS_LC1(void, EC_GROUP_free, \
 AROS_LCA(EC_GROUP *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 622, Amissl)

#define EC_GROUP_clear_free(___a) \
      AROS_LC1(void, EC_GROUP_clear_free, \
 AROS_LCA(EC_GROUP *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 623, Amissl)

#define EC_GROUP_copy(___a, ___b) \
      AROS_LC2(int, EC_GROUP_copy, \
 AROS_LCA(EC_GROUP *, (___a), A0), \
 AROS_LCA(const EC_GROUP *, (___b), A1), \
     struct Library *, AMISSL_BASE_NAME, 624, Amissl)

#define EC_GROUP_method_of(___a) \
      AROS_LC1(const EC_METHOD *, EC_GROUP_method_of, \
 AROS_LCA(const EC_GROUP *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 625, Amissl)

#define EC_GROUP_set_curve_GFp(___a1, ___p, ___a, ___b, ___a2) \
      AROS_LC5(int, EC_GROUP_set_curve_GFp, \
 AROS_LCA(EC_GROUP *, (___a1), A0), \
 AROS_LCA(const BIGNUM *, (___p), A1), \
 AROS_LCA(const BIGNUM *, (___a), A2), \
 AROS_LCA(const BIGNUM *, (___b), A3), \
 AROS_LCA(BN_CTX *, (___a2), D0), \
     struct Library *, AMISSL_BASE_NAME, 626, Amissl)

#define EC_GROUP_get_curve_GFp(___a1, ___p, ___a, ___b, ___a2) \
      AROS_LC5(int, EC_GROUP_get_curve_GFp, \
 AROS_LCA(const EC_GROUP *, (___a1), A0), \
 AROS_LCA(BIGNUM *, (___p), A1), \
 AROS_LCA(BIGNUM *, (___a), A2), \
 AROS_LCA(BIGNUM *, (___b), A3), \
 AROS_LCA(BN_CTX *, (___a2), D0), \
     struct Library *, AMISSL_BASE_NAME, 627, Amissl)

#define EC_GROUP_new_curve_GFp(___p, ___a, ___b, ___a1) \
      AROS_LC4(EC_GROUP *, EC_GROUP_new_curve_GFp, \
 AROS_LCA(const BIGNUM *, (___p), A0), \
 AROS_LCA(const BIGNUM *, (___a), A1), \
 AROS_LCA(const BIGNUM *, (___b), A2), \
 AROS_LCA(BN_CTX *, (___a1), A3), \
     struct Library *, AMISSL_BASE_NAME, 628, Amissl)

#define EC_GROUP_set_generator(___a1, ___generator, ___order, ___cofactor) \
      AROS_LC4(int, EC_GROUP_set_generator, \
 AROS_LCA(EC_GROUP *, (___a1), A0), \
 AROS_LCA(const EC_POINT *, (___generator), A1), \
 AROS_LCA(const BIGNUM *, (___order), A2), \
 AROS_LCA(const BIGNUM *, (___cofactor), A3), \
     struct Library *, AMISSL_BASE_NAME, 629, Amissl)

#define EC_GROUP_get0_generator(___a1) \
      AROS_LC1(const EC_POINT *, EC_GROUP_get0_generator, \
 AROS_LCA(const EC_GROUP *, (___a1), A0), \
     struct Library *, AMISSL_BASE_NAME, 630, Amissl)

#define EC_GROUP_get_order(___a1, ___order, ___a2) \
      AROS_LC3(int, EC_GROUP_get_order, \
 AROS_LCA(const EC_GROUP *, (___a1), A0), \
 AROS_LCA(BIGNUM *, (___order), A1), \
 AROS_LCA(BN_CTX *, (___a2), A2), \
     struct Library *, AMISSL_BASE_NAME, 631, Amissl)

#define EC_GROUP_get_cofactor(___a1, ___cofactor, ___a2) \
      AROS_LC3(int, EC_GROUP_get_cofactor, \
 AROS_LCA(const EC_GROUP *, (___a1), A0), \
 AROS_LCA(BIGNUM *, (___cofactor), A1), \
 AROS_LCA(BN_CTX *, (___a2), A2), \
     struct Library *, AMISSL_BASE_NAME, 632, Amissl)

#define EC_POINT_new(___a) \
      AROS_LC1(EC_POINT *, EC_POINT_new, \
 AROS_LCA(const EC_GROUP *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 633, Amissl)

#define EC_POINT_free(___a) \
      AROS_LC1(void, EC_POINT_free, \
 AROS_LCA(EC_POINT *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 634, Amissl)

#define EC_POINT_clear_free(___a) \
      AROS_LC1(void, EC_POINT_clear_free, \
 AROS_LCA(EC_POINT *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 635, Amissl)

#define EC_POINT_copy(___a, ___b) \
      AROS_LC2(int, EC_POINT_copy, \
 AROS_LCA(EC_POINT *, (___a), A0), \
 AROS_LCA(const EC_POINT *, (___b), A1), \
     struct Library *, AMISSL_BASE_NAME, 636, Amissl)

#define EC_POINT_method_of(___a) \
      AROS_LC1(const EC_METHOD *, EC_POINT_method_of, \
 AROS_LCA(const EC_POINT *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 637, Amissl)

#define EC_POINT_set_to_infinity(___a, ___b) \
      AROS_LC2(int, EC_POINT_set_to_infinity, \
 AROS_LCA(const EC_GROUP *, (___a), A0), \
 AROS_LCA(EC_POINT *, (___b), A1), \
     struct Library *, AMISSL_BASE_NAME, 638, Amissl)

#define EC_POINT_set_Jprojective_coordinates_GFp(___a1, ___a2, ___x, ___y, ___z, ___a3) \
      AROS_LC6(int, EC_POINT_set_Jprojective_coordinates_GFp, \
 AROS_LCA(const EC_GROUP *, (___a1), A0), \
 AROS_LCA(EC_POINT *, (___a2), A1), \
 AROS_LCA(const BIGNUM *, (___x), A2), \
 AROS_LCA(const BIGNUM *, (___y), A3), \
 AROS_LCA(const BIGNUM *, (___z), D0), \
 AROS_LCA(BN_CTX *, (___a3), D1), \
     struct Library *, AMISSL_BASE_NAME, 639, Amissl)

#define EC_POINT_get_Jprojective_coordinates_GFp(___a1, ___a2, ___x, ___y, ___z, ___a3) \
      AROS_LC6(int, EC_POINT_get_Jprojective_coordinates_GFp, \
 AROS_LCA(const EC_GROUP *, (___a1), A0), \
 AROS_LCA(const EC_POINT *, (___a2), A1), \
 AROS_LCA(BIGNUM *, (___x), A2), \
 AROS_LCA(BIGNUM *, (___y), A3), \
 AROS_LCA(BIGNUM *, (___z), D0), \
 AROS_LCA(BN_CTX *, (___a3), D1), \
     struct Library *, AMISSL_BASE_NAME, 640, Amissl)

#define EC_POINT_set_affine_coordinates_GFp(___a1, ___a2, ___x, ___y, ___a3) \
      AROS_LC5(int, EC_POINT_set_affine_coordinates_GFp, \
 AROS_LCA(const EC_GROUP *, (___a1), A0), \
 AROS_LCA(EC_POINT *, (___a2), A1), \
 AROS_LCA(const BIGNUM *, (___x), A2), \
 AROS_LCA(const BIGNUM *, (___y), A3), \
 AROS_LCA(BN_CTX *, (___a3), D0), \
     struct Library *, AMISSL_BASE_NAME, 641, Amissl)

#define EC_POINT_get_affine_coordinates_GFp(___a1, ___a2, ___x, ___y, ___a3) \
      AROS_LC5(int, EC_POINT_get_affine_coordinates_GFp, \
 AROS_LCA(const EC_GROUP *, (___a1), A0), \
 AROS_LCA(const EC_POINT *, (___a2), A1), \
 AROS_LCA(BIGNUM *, (___x), A2), \
 AROS_LCA(BIGNUM *, (___y), A3), \
 AROS_LCA(BN_CTX *, (___a3), D0), \
     struct Library *, AMISSL_BASE_NAME, 642, Amissl)

#define EC_POINT_set_compressed_coordinates_GFp(___a1, ___a2, ___x, ___y_bit, ___a3) \
      AROS_LC5(int, EC_POINT_set_compressed_coordinates_GFp, \
 AROS_LCA(const EC_GROUP *, (___a1), A0), \
 AROS_LCA(EC_POINT *, (___a2), A1), \
 AROS_LCA(const BIGNUM *, (___x), A2), \
 AROS_LCA(int, (___y_bit), D0), \
 AROS_LCA(BN_CTX *, (___a3), A3), \
     struct Library *, AMISSL_BASE_NAME, 643, Amissl)

#define EC_POINT_point2oct(___a1, ___a2, ___form, ___buf, ___len, ___a3) \
      AROS_LC6(size_t, EC_POINT_point2oct, \
 AROS_LCA(const EC_GROUP *, (___a1), A0), \
 AROS_LCA(const EC_POINT *, (___a2), A1), \
 AROS_LCA(point_conversion_form_t, (___form), D0), \
 AROS_LCA(unsigned char *, (___buf), A2), \
 AROS_LCA(size_t, (___len), D1), \
 AROS_LCA(BN_CTX *, (___a3), A3), \
     struct Library *, AMISSL_BASE_NAME, 644, Amissl)

#define EC_POINT_oct2point(___a1, ___a2, ___buf, ___len, ___a3) \
      AROS_LC5(int, EC_POINT_oct2point, \
 AROS_LCA(const EC_GROUP *, (___a1), A0), \
 AROS_LCA(EC_POINT *, (___a2), A1), \
 AROS_LCA(const unsigned char *, (___buf), A2), \
 AROS_LCA(size_t, (___len), D0), \
 AROS_LCA(BN_CTX *, (___a3), A3), \
     struct Library *, AMISSL_BASE_NAME, 645, Amissl)

#define EC_POINT_add(___a1, ___r, ___a, ___b, ___a2) \
      AROS_LC5(int, EC_POINT_add, \
 AROS_LCA(const EC_GROUP *, (___a1), A0), \
 AROS_LCA(EC_POINT *, (___r), A1), \
 AROS_LCA(const EC_POINT *, (___a), A2), \
 AROS_LCA(const EC_POINT *, (___b), A3), \
 AROS_LCA(BN_CTX *, (___a2), D0), \
     struct Library *, AMISSL_BASE_NAME, 646, Amissl)

#define EC_POINT_dbl(___a1, ___r, ___a, ___a2) \
      AROS_LC4(int, EC_POINT_dbl, \
 AROS_LCA(const EC_GROUP *, (___a1), A0), \
 AROS_LCA(EC_POINT *, (___r), A1), \
 AROS_LCA(const EC_POINT *, (___a), A2), \
 AROS_LCA(BN_CTX *, (___a2), A3), \
     struct Library *, AMISSL_BASE_NAME, 647, Amissl)

#define EC_POINT_invert(___a1, ___a2, ___a3) \
      AROS_LC3(int, EC_POINT_invert, \
 AROS_LCA(const EC_GROUP *, (___a1), A0), \
 AROS_LCA(EC_POINT *, (___a2), A1), \
 AROS_LCA(BN_CTX *, (___a3), A2), \
     struct Library *, AMISSL_BASE_NAME, 648, Amissl)

#define EC_POINT_is_at_infinity(___a, ___b) \
      AROS_LC2(int, EC_POINT_is_at_infinity, \
 AROS_LCA(const EC_GROUP *, (___a), A0), \
 AROS_LCA(const EC_POINT *, (___b), A1), \
     struct Library *, AMISSL_BASE_NAME, 649, Amissl)

#define EC_POINT_is_on_curve(___a, ___b, ___c) \
      AROS_LC3(int, EC_POINT_is_on_curve, \
 AROS_LCA(const EC_GROUP *, (___a), A0), \
 AROS_LCA(const EC_POINT *, (___b), A1), \
 AROS_LCA(BN_CTX *, (___c), A2), \
     struct Library *, AMISSL_BASE_NAME, 650, Amissl)

#define EC_POINT_cmp(___a1, ___a, ___b, ___a2) \
      AROS_LC4(int, EC_POINT_cmp, \
 AROS_LCA(const EC_GROUP *, (___a1), A0), \
 AROS_LCA(const EC_POINT *, (___a), A1), \
 AROS_LCA(const EC_POINT *, (___b), A2), \
 AROS_LCA(BN_CTX *, (___a2), A3), \
     struct Library *, AMISSL_BASE_NAME, 651, Amissl)

#define EC_POINT_make_affine(___a, ___b, ___c) \
      AROS_LC3(int, EC_POINT_make_affine, \
 AROS_LCA(const EC_GROUP *, (___a), A0), \
 AROS_LCA(EC_POINT *, (___b), A1), \
 AROS_LCA(BN_CTX *, (___c), A2), \
     struct Library *, AMISSL_BASE_NAME, 652, Amissl)

#define EC_POINTs_make_affine(___a1, ___num, ___a2, ___a3) \
      AROS_LC4(int, EC_POINTs_make_affine, \
 AROS_LCA(const EC_GROUP *, (___a1), A0), \
 AROS_LCA(size_t, (___num), D0), \
 AROS_LCA(EC_POINT **, (___a2), A1), \
 AROS_LCA(BN_CTX *, (___a3), A2), \
     struct Library *, AMISSL_BASE_NAME, 653, Amissl)

#define EC_POINTs_mul(___a1, ___r, ___a2, ___num, ___a3, ___a4, ___a5) \
      AROS_LC7(int, EC_POINTs_mul, \
 AROS_LCA(const EC_GROUP *, (___a1), A0), \
 AROS_LCA(EC_POINT *, (___r), A1), \
 AROS_LCA(const BIGNUM *, (___a2), A2), \
 AROS_LCA(size_t, (___num), D0), \
 AROS_LCA(const EC_POINT **, (___a3), A3), \
 AROS_LCA(const BIGNUM **, (___a4), D1), \
 AROS_LCA(BN_CTX *, (___a5), D2), \
     struct Library *, AMISSL_BASE_NAME, 654, Amissl)

#define EC_POINT_mul(___a1, ___r, ___a2, ___a3, ___a4, ___a5) \
      AROS_LC6(int, EC_POINT_mul, \
 AROS_LCA(const EC_GROUP *, (___a1), A0), \
 AROS_LCA(EC_POINT *, (___r), A1), \
 AROS_LCA(const BIGNUM *, (___a2), A2), \
 AROS_LCA(const EC_POINT *, (___a3), A3), \
 AROS_LCA(const BIGNUM *, (___a4), D0), \
 AROS_LCA(BN_CTX *, (___a5), D1), \
     struct Library *, AMISSL_BASE_NAME, 655, Amissl)

#define EC_GROUP_precompute_mult(___a, ___b) \
      AROS_LC2(int, EC_GROUP_precompute_mult, \
 AROS_LCA(EC_GROUP *, (___a), A0), \
 AROS_LCA(BN_CTX *, (___b), A1), \
     struct Library *, AMISSL_BASE_NAME, 656, Amissl)

#define ERR_load_EC_strings() \
      AROS_LC0(int, ERR_load_EC_strings, \
     struct Library *, AMISSL_BASE_NAME, 657, Amissl)

#define OBSOLETE_ERR_put_error(___lib, ___func, ___reason, ___file, ___line) \
      AROS_LC5(void, OBSOLETE_ERR_put_error, \
 AROS_LCA(int, (___lib), D0), \
 AROS_LCA(int, (___func), D1), \
 AROS_LCA(int, (___reason), D2), \
 AROS_LCA(const char *, (___file), A0), \
 AROS_LCA(int, (___line), D3), \
     struct Library *, AMISSL_BASE_NAME, 658, Amissl)

#define ERR_set_error_data(___data, ___flags) \
      AROS_LC2(void, ERR_set_error_data, \
 AROS_LCA(char *, (___data), A0), \
 AROS_LCA(int, (___flags), D0), \
     struct Library *, AMISSL_BASE_NAME, 659, Amissl)

#define ERR_get_error() \
      AROS_LC0(unsigned long, ERR_get_error, \
     struct Library *, AMISSL_BASE_NAME, 660, Amissl)

#define ERR_get_error_line(___file, ___line) \
      AROS_LC2(unsigned long, ERR_get_error_line, \
 AROS_LCA(const char **, (___file), A0), \
 AROS_LCA(int *, (___line), A1), \
     struct Library *, AMISSL_BASE_NAME, 661, Amissl)

#define ERR_get_error_line_data(___file, ___line, ___data, ___flags) \
      AROS_LC4(unsigned long, ERR_get_error_line_data, \
 AROS_LCA(const char **, (___file), A0), \
 AROS_LCA(int *, (___line), A1), \
 AROS_LCA(const char **, (___data), A2), \
 AROS_LCA(int *, (___flags), A3), \
     struct Library *, AMISSL_BASE_NAME, 662, Amissl)

#define ERR_peek_error() \
      AROS_LC0(unsigned long, ERR_peek_error, \
     struct Library *, AMISSL_BASE_NAME, 663, Amissl)

#define ERR_peek_error_line(___file, ___line) \
      AROS_LC2(unsigned long, ERR_peek_error_line, \
 AROS_LCA(const char **, (___file), A0), \
 AROS_LCA(int *, (___line), A1), \
     struct Library *, AMISSL_BASE_NAME, 664, Amissl)

#define ERR_peek_error_line_data(___file, ___line, ___data, ___flags) \
      AROS_LC4(unsigned long, ERR_peek_error_line_data, \
 AROS_LCA(const char **, (___file), A0), \
 AROS_LCA(int *, (___line), A1), \
 AROS_LCA(const char **, (___data), A2), \
 AROS_LCA(int *, (___flags), A3), \
     struct Library *, AMISSL_BASE_NAME, 665, Amissl)

#define ERR_peek_last_error() \
      AROS_LC0(unsigned long, ERR_peek_last_error, \
     struct Library *, AMISSL_BASE_NAME, 666, Amissl)

#define ERR_peek_last_error_line(___file, ___line) \
      AROS_LC2(unsigned long, ERR_peek_last_error_line, \
 AROS_LCA(const char **, (___file), A0), \
 AROS_LCA(int *, (___line), A1), \
     struct Library *, AMISSL_BASE_NAME, 667, Amissl)

#define ERR_peek_last_error_line_data(___file, ___line, ___data, ___flags) \
      AROS_LC4(unsigned long, ERR_peek_last_error_line_data, \
 AROS_LCA(const char **, (___file), A0), \
 AROS_LCA(int *, (___line), A1), \
 AROS_LCA(const char **, (___data), A2), \
 AROS_LCA(int *, (___flags), A3), \
     struct Library *, AMISSL_BASE_NAME, 668, Amissl)

#define ERR_clear_error() \
      AROS_LC0(void, ERR_clear_error, \
     struct Library *, AMISSL_BASE_NAME, 669, Amissl)

#define ERR_error_string(___e, ___buf) \
      AROS_LC2(char *, ERR_error_string, \
 AROS_LCA(unsigned long, (___e), D0), \
 AROS_LCA(char *, (___buf), A0), \
     struct Library *, AMISSL_BASE_NAME, 670, Amissl)

#define ERR_error_string_n(___e, ___buf, ___len) \
      AROS_LC3(void, ERR_error_string_n, \
 AROS_LCA(unsigned long, (___e), D0), \
 AROS_LCA(char *, (___buf), A0), \
 AROS_LCA(size_t, (___len), D1), \
     struct Library *, AMISSL_BASE_NAME, 671, Amissl)

#define ERR_lib_error_string(___e) \
      AROS_LC1(const char *, ERR_lib_error_string, \
 AROS_LCA(unsigned long, (___e), D0), \
     struct Library *, AMISSL_BASE_NAME, 672, Amissl)

#define ERR_func_error_string(___e) \
      AROS_LC1(const char *, ERR_func_error_string, \
 AROS_LCA(unsigned long, (___e), D0), \
     struct Library *, AMISSL_BASE_NAME, 673, Amissl)

#define ERR_reason_error_string(___e) \
      AROS_LC1(const char *, ERR_reason_error_string, \
 AROS_LCA(unsigned long, (___e), D0), \
     struct Library *, AMISSL_BASE_NAME, 674, Amissl)

#define ERR_print_errors_cb(___cb, ___u) \
      AROS_LC2(void, ERR_print_errors_cb, \
 AROS_LCA(int (*)(const char *str,size_t len,void *u), (___cb), A0), \
 AROS_LCA(void *, (___u), A1), \
     struct Library *, AMISSL_BASE_NAME, 675, Amissl)

#define ERR_print_errors(___bp) \
      AROS_LC1(void, ERR_print_errors, \
 AROS_LCA(BIO *, (___bp), A0), \
     struct Library *, AMISSL_BASE_NAME, 676, Amissl)

#define ERR_add_error_vdata(___num, ___args) \
      AROS_LC2(void, ERR_add_error_vdata, \
 AROS_LCA(int, (___num), D0), \
 AROS_LCA(va_list, (___args), A0), \
     struct Library *, AMISSL_BASE_NAME, 677, Amissl)

#ifndef NO_INLINE_VARARGS
#define ERR_add_error_data(___num, ___dummy, ...) \
    ({_sfdc_vararg _message[] = { ___dummy, __VA_ARGS__ }; ERR_add_error_vdata((___num), (va_list) _message); })
#endif /* !NO_INLINE_VARARGS */

#define ERR_load_strings(___lib, ___str) \
      AROS_LC2(int, ERR_load_strings, \
 AROS_LCA(int, (___lib), D0), \
 AROS_LCA(ERR_STRING_DATA *, (___str), A0), \
     struct Library *, AMISSL_BASE_NAME, 678, Amissl)

#define ERR_unload_strings(___lib, ___str) \
      AROS_LC2(int, ERR_unload_strings, \
 AROS_LCA(int, (___lib), D0), \
 AROS_LCA(ERR_STRING_DATA *, (___str), A0), \
     struct Library *, AMISSL_BASE_NAME, 679, Amissl)

#define ERR_load_ERR_strings() \
      AROS_LC0(int, ERR_load_ERR_strings, \
     struct Library *, AMISSL_BASE_NAME, 680, Amissl)

#define OBSOLETE_ERR_load_crypto_strings() \
      AROS_LC0(void, OBSOLETE_ERR_load_crypto_strings, \
     struct Library *, AMISSL_BASE_NAME, 681, Amissl)

#define ERR_get_state() \
      AROS_LC0(ERR_STATE *, ERR_get_state, \
     struct Library *, AMISSL_BASE_NAME, 684, Amissl)

#define ERR_get_next_error_library() \
      AROS_LC0(int, ERR_get_next_error_library, \
     struct Library *, AMISSL_BASE_NAME, 688, Amissl)

#define OBSOLETE_EVP_MD_CTX_init(___ctx) \
      AROS_LC1(void, OBSOLETE_EVP_MD_CTX_init, \
 AROS_LCA(EVP_MD_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 691, Amissl)

#define OBSOLETE_EVP_MD_CTX_create() \
      AROS_LC0(EVP_MD_CTX *, OBSOLETE_EVP_MD_CTX_create, \
     struct Library *, AMISSL_BASE_NAME, 693, Amissl)

#define OBSOLETE_EVP_MD_CTX_destroy(___ctx) \
      AROS_LC1(void, OBSOLETE_EVP_MD_CTX_destroy, \
 AROS_LCA(EVP_MD_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 694, Amissl)

#define EVP_MD_CTX_copy_ex(___out, ___in) \
      AROS_LC2(int, EVP_MD_CTX_copy_ex, \
 AROS_LCA(EVP_MD_CTX *, (___out), A0), \
 AROS_LCA(const EVP_MD_CTX *, (___in), A1), \
     struct Library *, AMISSL_BASE_NAME, 695, Amissl)

#define EVP_DigestInit_ex(___ctx, ___type, ___impl) \
      AROS_LC3(int, EVP_DigestInit_ex, \
 AROS_LCA(EVP_MD_CTX *, (___ctx), A0), \
 AROS_LCA(const EVP_MD *, (___type), A1), \
 AROS_LCA(ENGINE *, (___impl), A2), \
     struct Library *, AMISSL_BASE_NAME, 696, Amissl)

#define EVP_DigestUpdate(___ctx, ___d, ___cnt) \
      AROS_LC3(int, EVP_DigestUpdate, \
 AROS_LCA(EVP_MD_CTX *, (___ctx), A0), \
 AROS_LCA(const void *, (___d), A1), \
 AROS_LCA(unsigned int, (___cnt), D0), \
     struct Library *, AMISSL_BASE_NAME, 697, Amissl)

#define EVP_DigestFinal_ex(___ctx, ___md, ___s) \
      AROS_LC3(int, EVP_DigestFinal_ex, \
 AROS_LCA(EVP_MD_CTX *, (___ctx), A0), \
 AROS_LCA(unsigned char *, (___md), A1), \
 AROS_LCA(unsigned int *, (___s), A2), \
     struct Library *, AMISSL_BASE_NAME, 698, Amissl)

#define EVP_Digest(___data, ___count, ___md, ___size, ___type, ___impl) \
      AROS_LC6(int, EVP_Digest, \
 AROS_LCA(const void *, (___data), A0), \
 AROS_LCA(size_t, (___count), D0), \
 AROS_LCA(unsigned char *, (___md), A1), \
 AROS_LCA(unsigned int *, (___size), A2), \
 AROS_LCA(const EVP_MD *, (___type), A3), \
 AROS_LCA(ENGINE *, (___impl), D1), \
     struct Library *, AMISSL_BASE_NAME, 699, Amissl)

#define EVP_MD_CTX_copy(___out, ___in) \
      AROS_LC2(int, EVP_MD_CTX_copy, \
 AROS_LCA(EVP_MD_CTX *, (___out), A0), \
 AROS_LCA(const EVP_MD_CTX *, (___in), A1), \
     struct Library *, AMISSL_BASE_NAME, 700, Amissl)

#define EVP_DigestInit(___ctx, ___type) \
      AROS_LC2(int, EVP_DigestInit, \
 AROS_LCA(EVP_MD_CTX *, (___ctx), A0), \
 AROS_LCA(const EVP_MD *, (___type), A1), \
     struct Library *, AMISSL_BASE_NAME, 701, Amissl)

#define EVP_DigestFinal(___ctx, ___md, ___s) \
      AROS_LC3(int, EVP_DigestFinal, \
 AROS_LCA(EVP_MD_CTX *, (___ctx), A0), \
 AROS_LCA(unsigned char *, (___md), A1), \
 AROS_LCA(unsigned int *, (___s), A2), \
     struct Library *, AMISSL_BASE_NAME, 702, Amissl)

#define EVP_read_pw_string(___buf, ___length, ___prompt, ___verify) \
      AROS_LC4(int, EVP_read_pw_string, \
 AROS_LCA(char *, (___buf), A0), \
 AROS_LCA(int, (___length), D0), \
 AROS_LCA(const char *, (___prompt), A1), \
 AROS_LCA(int, (___verify), D1), \
     struct Library *, AMISSL_BASE_NAME, 703, Amissl)

#define EVP_set_pw_prompt(___prompt) \
      AROS_LC1(void, EVP_set_pw_prompt, \
 AROS_LCA(const char *, (___prompt), A0), \
     struct Library *, AMISSL_BASE_NAME, 704, Amissl)

#define EVP_get_pw_prompt() \
      AROS_LC0(char *, EVP_get_pw_prompt, \
     struct Library *, AMISSL_BASE_NAME, 705, Amissl)

#define EVP_BytesToKey(___type, ___md, ___salt, ___data, ___datal, ___count, ___key, ___iv) \
      AROS_LC8(int, EVP_BytesToKey, \
 AROS_LCA(const EVP_CIPHER *, (___type), A0), \
 AROS_LCA(const EVP_MD *, (___md), A1), \
 AROS_LCA(const unsigned char *, (___salt), A2), \
 AROS_LCA(const unsigned char *, (___data), A3), \
 AROS_LCA(int, (___datal), D0), \
 AROS_LCA(int, (___count), D1), \
 AROS_LCA(unsigned char *, (___key), D2), \
 AROS_LCA(unsigned char *, (___iv), D3), \
     struct Library *, AMISSL_BASE_NAME, 706, Amissl)

#define EVP_EncryptInit(___ctx, ___cipher, ___key, ___iv) \
      AROS_LC4(int, EVP_EncryptInit, \
 AROS_LCA(EVP_CIPHER_CTX *, (___ctx), A0), \
 AROS_LCA(const EVP_CIPHER *, (___cipher), A1), \
 AROS_LCA(const unsigned char *, (___key), A2), \
 AROS_LCA(const unsigned char *, (___iv), A3), \
     struct Library *, AMISSL_BASE_NAME, 707, Amissl)

#define EVP_EncryptInit_ex(___ctx, ___cipher, ___impl, ___key, ___iv) \
      AROS_LC5(int, EVP_EncryptInit_ex, \
 AROS_LCA(EVP_CIPHER_CTX *, (___ctx), A0), \
 AROS_LCA(const EVP_CIPHER *, (___cipher), A1), \
 AROS_LCA(ENGINE *, (___impl), A2), \
 AROS_LCA(const unsigned char *, (___key), A3), \
 AROS_LCA(const unsigned char *, (___iv), D0), \
     struct Library *, AMISSL_BASE_NAME, 708, Amissl)

#define EVP_EncryptUpdate(___ctx, ___out, ___outl, ___in, ___inl) \
      AROS_LC5(int, EVP_EncryptUpdate, \
 AROS_LCA(EVP_CIPHER_CTX *, (___ctx), A0), \
 AROS_LCA(unsigned char *, (___out), A1), \
 AROS_LCA(int *, (___outl), A2), \
 AROS_LCA(const unsigned char *, (___in), A3), \
 AROS_LCA(int, (___inl), D0), \
     struct Library *, AMISSL_BASE_NAME, 709, Amissl)

#define EVP_EncryptFinal_ex(___ctx, ___out, ___outl) \
      AROS_LC3(int, EVP_EncryptFinal_ex, \
 AROS_LCA(EVP_CIPHER_CTX *, (___ctx), A0), \
 AROS_LCA(unsigned char *, (___out), A1), \
 AROS_LCA(int *, (___outl), A2), \
     struct Library *, AMISSL_BASE_NAME, 710, Amissl)

#define EVP_EncryptFinal(___ctx, ___out, ___outl) \
      AROS_LC3(int, EVP_EncryptFinal, \
 AROS_LCA(EVP_CIPHER_CTX *, (___ctx), A0), \
 AROS_LCA(unsigned char *, (___out), A1), \
 AROS_LCA(int *, (___outl), A2), \
     struct Library *, AMISSL_BASE_NAME, 711, Amissl)

#define EVP_DecryptInit(___ctx, ___cipher, ___key, ___iv) \
      AROS_LC4(int, EVP_DecryptInit, \
 AROS_LCA(EVP_CIPHER_CTX *, (___ctx), A0), \
 AROS_LCA(const EVP_CIPHER *, (___cipher), A1), \
 AROS_LCA(const unsigned char *, (___key), A2), \
 AROS_LCA(const unsigned char *, (___iv), A3), \
     struct Library *, AMISSL_BASE_NAME, 712, Amissl)

#define EVP_DecryptInit_ex(___ctx, ___cipher, ___impl, ___key, ___iv) \
      AROS_LC5(int, EVP_DecryptInit_ex, \
 AROS_LCA(EVP_CIPHER_CTX *, (___ctx), A0), \
 AROS_LCA(const EVP_CIPHER *, (___cipher), A1), \
 AROS_LCA(ENGINE *, (___impl), A2), \
 AROS_LCA(const unsigned char *, (___key), A3), \
 AROS_LCA(const unsigned char *, (___iv), D0), \
     struct Library *, AMISSL_BASE_NAME, 713, Amissl)

#define EVP_DecryptUpdate(___ctx, ___out, ___outl, ___in, ___inl) \
      AROS_LC5(int, EVP_DecryptUpdate, \
 AROS_LCA(EVP_CIPHER_CTX *, (___ctx), A0), \
 AROS_LCA(unsigned char *, (___out), A1), \
 AROS_LCA(int *, (___outl), A2), \
 AROS_LCA(const unsigned char *, (___in), A3), \
 AROS_LCA(int, (___inl), D0), \
     struct Library *, AMISSL_BASE_NAME, 714, Amissl)

#define EVP_DecryptFinal(___ctx, ___outm, ___outl) \
      AROS_LC3(int, EVP_DecryptFinal, \
 AROS_LCA(EVP_CIPHER_CTX *, (___ctx), A0), \
 AROS_LCA(unsigned char *, (___outm), A1), \
 AROS_LCA(int *, (___outl), A2), \
     struct Library *, AMISSL_BASE_NAME, 715, Amissl)

#define EVP_DecryptFinal_ex(___ctx, ___outm, ___outl) \
      AROS_LC3(int, EVP_DecryptFinal_ex, \
 AROS_LCA(EVP_CIPHER_CTX *, (___ctx), A0), \
 AROS_LCA(unsigned char *, (___outm), A1), \
 AROS_LCA(int *, (___outl), A2), \
     struct Library *, AMISSL_BASE_NAME, 716, Amissl)

#define EVP_CipherInit(___ctx, ___cipher, ___key, ___iv, ___enc) \
      AROS_LC5(int, EVP_CipherInit, \
 AROS_LCA(EVP_CIPHER_CTX *, (___ctx), A0), \
 AROS_LCA(const EVP_CIPHER *, (___cipher), A1), \
 AROS_LCA(const unsigned char *, (___key), A2), \
 AROS_LCA(const unsigned char *, (___iv), A3), \
 AROS_LCA(int, (___enc), D0), \
     struct Library *, AMISSL_BASE_NAME, 717, Amissl)

#define EVP_CipherInit_ex(___ctx, ___cipher, ___impl, ___key, ___iv, ___enc) \
      AROS_LC6(int, EVP_CipherInit_ex, \
 AROS_LCA(EVP_CIPHER_CTX *, (___ctx), A0), \
 AROS_LCA(const EVP_CIPHER *, (___cipher), A1), \
 AROS_LCA(ENGINE *, (___impl), A2), \
 AROS_LCA(const unsigned char *, (___key), A3), \
 AROS_LCA(const unsigned char *, (___iv), D0), \
 AROS_LCA(int, (___enc), D1), \
     struct Library *, AMISSL_BASE_NAME, 718, Amissl)

#define EVP_CipherUpdate(___ctx, ___out, ___outl, ___in, ___inl) \
      AROS_LC5(int, EVP_CipherUpdate, \
 AROS_LCA(EVP_CIPHER_CTX *, (___ctx), A0), \
 AROS_LCA(unsigned char *, (___out), A1), \
 AROS_LCA(int *, (___outl), A2), \
 AROS_LCA(const unsigned char *, (___in), A3), \
 AROS_LCA(int, (___inl), D0), \
     struct Library *, AMISSL_BASE_NAME, 719, Amissl)

#define EVP_CipherFinal(___ctx, ___outm, ___outl) \
      AROS_LC3(int, EVP_CipherFinal, \
 AROS_LCA(EVP_CIPHER_CTX *, (___ctx), A0), \
 AROS_LCA(unsigned char *, (___outm), A1), \
 AROS_LCA(int *, (___outl), A2), \
     struct Library *, AMISSL_BASE_NAME, 720, Amissl)

#define EVP_CipherFinal_ex(___ctx, ___outm, ___outl) \
      AROS_LC3(int, EVP_CipherFinal_ex, \
 AROS_LCA(EVP_CIPHER_CTX *, (___ctx), A0), \
 AROS_LCA(unsigned char *, (___outm), A1), \
 AROS_LCA(int *, (___outl), A2), \
     struct Library *, AMISSL_BASE_NAME, 721, Amissl)

#define EVP_SignFinal(___ctx, ___md, ___s, ___pkey) \
      AROS_LC4(int, EVP_SignFinal, \
 AROS_LCA(EVP_MD_CTX *, (___ctx), A0), \
 AROS_LCA(unsigned char *, (___md), A1), \
 AROS_LCA(unsigned int *, (___s), A2), \
 AROS_LCA(EVP_PKEY *, (___pkey), A3), \
     struct Library *, AMISSL_BASE_NAME, 722, Amissl)

#define EVP_VerifyFinal(___ctx, ___sigbuf, ___siglen, ___pkey) \
      AROS_LC4(int, EVP_VerifyFinal, \
 AROS_LCA(EVP_MD_CTX *, (___ctx), A0), \
 AROS_LCA(const unsigned char *, (___sigbuf), A1), \
 AROS_LCA(unsigned int, (___siglen), D0), \
 AROS_LCA(EVP_PKEY *, (___pkey), A2), \
     struct Library *, AMISSL_BASE_NAME, 723, Amissl)

#define EVP_OpenInit(___ctx, ___type, ___ek, ___ekl, ___iv, ___priv) \
      AROS_LC6(int, EVP_OpenInit, \
 AROS_LCA(EVP_CIPHER_CTX *, (___ctx), A0), \
 AROS_LCA(const EVP_CIPHER *, (___type), A1), \
 AROS_LCA(const unsigned char *, (___ek), A2), \
 AROS_LCA(int, (___ekl), D0), \
 AROS_LCA(const unsigned char *, (___iv), A3), \
 AROS_LCA(EVP_PKEY *, (___priv), D1), \
     struct Library *, AMISSL_BASE_NAME, 724, Amissl)

#define EVP_OpenFinal(___ctx, ___out, ___outl) \
      AROS_LC3(int, EVP_OpenFinal, \
 AROS_LCA(EVP_CIPHER_CTX *, (___ctx), A0), \
 AROS_LCA(unsigned char *, (___out), A1), \
 AROS_LCA(int *, (___outl), A2), \
     struct Library *, AMISSL_BASE_NAME, 725, Amissl)

#define EVP_SealInit(___ctx, ___type, ___ek, ___ekl, ___iv, ___pubk, ___npubk) \
      AROS_LC7(int, EVP_SealInit, \
 AROS_LCA(EVP_CIPHER_CTX *, (___ctx), A0), \
 AROS_LCA(const EVP_CIPHER *, (___type), A1), \
 AROS_LCA(unsigned char **, (___ek), A2), \
 AROS_LCA(int *, (___ekl), A3), \
 AROS_LCA(unsigned char *, (___iv), D0), \
 AROS_LCA(EVP_PKEY **, (___pubk), D1), \
 AROS_LCA(int, (___npubk), D2), \
     struct Library *, AMISSL_BASE_NAME, 726, Amissl)

#define EVP_SealFinal(___ctx, ___out, ___outl) \
      AROS_LC3(int, EVP_SealFinal, \
 AROS_LCA(EVP_CIPHER_CTX *, (___ctx), A0), \
 AROS_LCA(unsigned char *, (___out), A1), \
 AROS_LCA(int *, (___outl), A2), \
     struct Library *, AMISSL_BASE_NAME, 727, Amissl)

#define EVP_EncodeInit(___ctx) \
      AROS_LC1(void, EVP_EncodeInit, \
 AROS_LCA(EVP_ENCODE_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 728, Amissl)

#define EVP_EncodeUpdate(___ctx, ___out, ___outl, ___in, ___inl) \
      AROS_LC5(int, EVP_EncodeUpdate, \
 AROS_LCA(EVP_ENCODE_CTX *, (___ctx), A0), \
 AROS_LCA(unsigned char *, (___out), A1), \
 AROS_LCA(int *, (___outl), A2), \
 AROS_LCA(const unsigned char *, (___in), A3), \
 AROS_LCA(int, (___inl), D0), \
     struct Library *, AMISSL_BASE_NAME, 729, Amissl)

#define EVP_EncodeFinal(___ctx, ___out, ___outl) \
      AROS_LC3(void, EVP_EncodeFinal, \
 AROS_LCA(EVP_ENCODE_CTX *, (___ctx), A0), \
 AROS_LCA(unsigned char *, (___out), A1), \
 AROS_LCA(int *, (___outl), A2), \
     struct Library *, AMISSL_BASE_NAME, 730, Amissl)

#define EVP_EncodeBlock(___t, ___f, ___n) \
      AROS_LC3(int, EVP_EncodeBlock, \
 AROS_LCA(unsigned char *, (___t), A0), \
 AROS_LCA(const unsigned char *, (___f), A1), \
 AROS_LCA(int, (___n), D0), \
     struct Library *, AMISSL_BASE_NAME, 731, Amissl)

#define EVP_DecodeInit(___ctx) \
      AROS_LC1(void, EVP_DecodeInit, \
 AROS_LCA(EVP_ENCODE_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 732, Amissl)

#define EVP_DecodeUpdate(___ctx, ___out, ___outl, ___in, ___inl) \
      AROS_LC5(int, EVP_DecodeUpdate, \
 AROS_LCA(EVP_ENCODE_CTX *, (___ctx), A0), \
 AROS_LCA(unsigned char *, (___out), A1), \
 AROS_LCA(int *, (___outl), A2), \
 AROS_LCA(const unsigned char *, (___in), A3), \
 AROS_LCA(int, (___inl), D0), \
     struct Library *, AMISSL_BASE_NAME, 733, Amissl)

#define EVP_DecodeFinal(___ctx, ___out, ___outl) \
      AROS_LC3(int, EVP_DecodeFinal, \
 AROS_LCA(EVP_ENCODE_CTX *, (___ctx), A0), \
 AROS_LCA(unsigned char *, (___out), A1), \
 AROS_LCA(int *, (___outl), A2), \
     struct Library *, AMISSL_BASE_NAME, 734, Amissl)

#define EVP_DecodeBlock(___t, ___f, ___n) \
      AROS_LC3(int, EVP_DecodeBlock, \
 AROS_LCA(unsigned char *, (___t), A0), \
 AROS_LCA(const unsigned char *, (___f), A1), \
 AROS_LCA(int, (___n), D0), \
     struct Library *, AMISSL_BASE_NAME, 735, Amissl)

#define OBSOLETE_EVP_CIPHER_CTX_init(___a) \
      AROS_LC1(void, OBSOLETE_EVP_CIPHER_CTX_init, \
 AROS_LCA(EVP_CIPHER_CTX *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 736, Amissl)

#define OBSOLETE_EVP_CIPHER_CTX_cleanup(___a) \
      AROS_LC1(int, OBSOLETE_EVP_CIPHER_CTX_cleanup, \
 AROS_LCA(EVP_CIPHER_CTX *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 737, Amissl)

#define EVP_CIPHER_CTX_set_key_length(___x, ___keylen) \
      AROS_LC2(int, EVP_CIPHER_CTX_set_key_length, \
 AROS_LCA(EVP_CIPHER_CTX *, (___x), A0), \
 AROS_LCA(int, (___keylen), D0), \
     struct Library *, AMISSL_BASE_NAME, 738, Amissl)

#define EVP_CIPHER_CTX_set_padding(___c, ___pad) \
      AROS_LC2(int, EVP_CIPHER_CTX_set_padding, \
 AROS_LCA(EVP_CIPHER_CTX *, (___c), A0), \
 AROS_LCA(int, (___pad), D0), \
     struct Library *, AMISSL_BASE_NAME, 739, Amissl)

#define EVP_CIPHER_CTX_ctrl(___ctx, ___type, ___arg, ___ptr) \
      AROS_LC4(int, EVP_CIPHER_CTX_ctrl, \
 AROS_LCA(EVP_CIPHER_CTX *, (___ctx), A0), \
 AROS_LCA(int, (___type), D0), \
 AROS_LCA(int, (___arg), D1), \
 AROS_LCA(void *, (___ptr), A1), \
     struct Library *, AMISSL_BASE_NAME, 740, Amissl)

#define BIO_f_md() \
      AROS_LC0(const BIO_METHOD *, BIO_f_md, \
     struct Library *, AMISSL_BASE_NAME, 741, Amissl)

#define BIO_f_base64() \
      AROS_LC0(const BIO_METHOD *, BIO_f_base64, \
     struct Library *, AMISSL_BASE_NAME, 742, Amissl)

#define BIO_f_cipher() \
      AROS_LC0(const BIO_METHOD *, BIO_f_cipher, \
     struct Library *, AMISSL_BASE_NAME, 743, Amissl)

#define BIO_f_reliable() \
      AROS_LC0(const BIO_METHOD *, BIO_f_reliable, \
     struct Library *, AMISSL_BASE_NAME, 744, Amissl)

#define BIO_set_cipher(___b, ___c, ___k, ___i, ___enc) \
      AROS_LC5(int, BIO_set_cipher, \
 AROS_LCA(BIO *, (___b), A0), \
 AROS_LCA(const EVP_CIPHER *, (___c), A1), \
 AROS_LCA(const unsigned char *, (___k), A2), \
 AROS_LCA(const unsigned char *, (___i), A3), \
 AROS_LCA(int, (___enc), D0), \
     struct Library *, AMISSL_BASE_NAME, 745, Amissl)

#define EVP_md_null() \
      AROS_LC0(const EVP_MD *, EVP_md_null, \
     struct Library *, AMISSL_BASE_NAME, 746, Amissl)

#define EVP_md2() \
      AROS_LC0(const EVP_MD *, EVP_md2, \
     struct Library *, AMISSL_BASE_NAME, 747, Amissl)

#define EVP_md4() \
      AROS_LC0(const EVP_MD *, EVP_md4, \
     struct Library *, AMISSL_BASE_NAME, 748, Amissl)

#define EVP_md5() \
      AROS_LC0(const EVP_MD *, EVP_md5, \
     struct Library *, AMISSL_BASE_NAME, 749, Amissl)

#define EVP_sha1() \
      AROS_LC0(const EVP_MD *, EVP_sha1, \
     struct Library *, AMISSL_BASE_NAME, 751, Amissl)

#define EVP_mdc2() \
      AROS_LC0(const EVP_MD *, EVP_mdc2, \
     struct Library *, AMISSL_BASE_NAME, 754, Amissl)

#define EVP_ripemd160() \
      AROS_LC0(const EVP_MD *, EVP_ripemd160, \
     struct Library *, AMISSL_BASE_NAME, 755, Amissl)

#define EVP_enc_null() \
      AROS_LC0(const EVP_CIPHER *, EVP_enc_null, \
     struct Library *, AMISSL_BASE_NAME, 756, Amissl)

#define EVP_des_ecb() \
      AROS_LC0(const EVP_CIPHER *, EVP_des_ecb, \
     struct Library *, AMISSL_BASE_NAME, 757, Amissl)

#define EVP_des_ede() \
      AROS_LC0(const EVP_CIPHER *, EVP_des_ede, \
     struct Library *, AMISSL_BASE_NAME, 758, Amissl)

#define EVP_des_ede3() \
      AROS_LC0(const EVP_CIPHER *, EVP_des_ede3, \
     struct Library *, AMISSL_BASE_NAME, 759, Amissl)

#define EVP_des_ede_ecb() \
      AROS_LC0(const EVP_CIPHER *, EVP_des_ede_ecb, \
     struct Library *, AMISSL_BASE_NAME, 760, Amissl)

#define EVP_des_ede3_ecb() \
      AROS_LC0(const EVP_CIPHER *, EVP_des_ede3_ecb, \
     struct Library *, AMISSL_BASE_NAME, 761, Amissl)

#define EVP_des_cfb64() \
      AROS_LC0(const EVP_CIPHER *, EVP_des_cfb64, \
     struct Library *, AMISSL_BASE_NAME, 762, Amissl)

#define EVP_des_cfb1() \
      AROS_LC0(const EVP_CIPHER *, EVP_des_cfb1, \
     struct Library *, AMISSL_BASE_NAME, 763, Amissl)

#define EVP_des_cfb8() \
      AROS_LC0(const EVP_CIPHER *, EVP_des_cfb8, \
     struct Library *, AMISSL_BASE_NAME, 764, Amissl)

#define EVP_des_ede_cfb64() \
      AROS_LC0(const EVP_CIPHER *, EVP_des_ede_cfb64, \
     struct Library *, AMISSL_BASE_NAME, 765, Amissl)

#define EVP_des_ede3_cfb64() \
      AROS_LC0(const EVP_CIPHER *, EVP_des_ede3_cfb64, \
     struct Library *, AMISSL_BASE_NAME, 766, Amissl)

#define EVP_des_ede3_cfb1() \
      AROS_LC0(const EVP_CIPHER *, EVP_des_ede3_cfb1, \
     struct Library *, AMISSL_BASE_NAME, 767, Amissl)

#define EVP_des_ede3_cfb8() \
      AROS_LC0(const EVP_CIPHER *, EVP_des_ede3_cfb8, \
     struct Library *, AMISSL_BASE_NAME, 768, Amissl)

#define EVP_des_ofb() \
      AROS_LC0(const EVP_CIPHER *, EVP_des_ofb, \
     struct Library *, AMISSL_BASE_NAME, 769, Amissl)

#define EVP_des_ede_ofb() \
      AROS_LC0(const EVP_CIPHER *, EVP_des_ede_ofb, \
     struct Library *, AMISSL_BASE_NAME, 770, Amissl)

#define EVP_des_ede3_ofb() \
      AROS_LC0(const EVP_CIPHER *, EVP_des_ede3_ofb, \
     struct Library *, AMISSL_BASE_NAME, 771, Amissl)

#define EVP_des_cbc() \
      AROS_LC0(const EVP_CIPHER *, EVP_des_cbc, \
     struct Library *, AMISSL_BASE_NAME, 772, Amissl)

#define EVP_des_ede_cbc() \
      AROS_LC0(const EVP_CIPHER *, EVP_des_ede_cbc, \
     struct Library *, AMISSL_BASE_NAME, 773, Amissl)

#define EVP_des_ede3_cbc() \
      AROS_LC0(const EVP_CIPHER *, EVP_des_ede3_cbc, \
     struct Library *, AMISSL_BASE_NAME, 774, Amissl)

#define EVP_desx_cbc() \
      AROS_LC0(const EVP_CIPHER *, EVP_desx_cbc, \
     struct Library *, AMISSL_BASE_NAME, 775, Amissl)

#define EVP_rc4() \
      AROS_LC0(const EVP_CIPHER *, EVP_rc4, \
     struct Library *, AMISSL_BASE_NAME, 776, Amissl)

#define EVP_rc4_40() \
      AROS_LC0(const EVP_CIPHER *, EVP_rc4_40, \
     struct Library *, AMISSL_BASE_NAME, 777, Amissl)

#define EVP_idea_ecb() \
      AROS_LC0(const EVP_CIPHER *, EVP_idea_ecb, \
     struct Library *, AMISSL_BASE_NAME, 778, Amissl)

#define EVP_idea_cfb64() \
      AROS_LC0(const EVP_CIPHER *, EVP_idea_cfb64, \
     struct Library *, AMISSL_BASE_NAME, 779, Amissl)

#define EVP_idea_ofb() \
      AROS_LC0(const EVP_CIPHER *, EVP_idea_ofb, \
     struct Library *, AMISSL_BASE_NAME, 780, Amissl)

#define EVP_idea_cbc() \
      AROS_LC0(const EVP_CIPHER *, EVP_idea_cbc, \
     struct Library *, AMISSL_BASE_NAME, 781, Amissl)

#define EVP_rc2_ecb() \
      AROS_LC0(const EVP_CIPHER *, EVP_rc2_ecb, \
     struct Library *, AMISSL_BASE_NAME, 782, Amissl)

#define EVP_rc2_cbc() \
      AROS_LC0(const EVP_CIPHER *, EVP_rc2_cbc, \
     struct Library *, AMISSL_BASE_NAME, 783, Amissl)

#define EVP_rc2_40_cbc() \
      AROS_LC0(const EVP_CIPHER *, EVP_rc2_40_cbc, \
     struct Library *, AMISSL_BASE_NAME, 784, Amissl)

#define EVP_rc2_64_cbc() \
      AROS_LC0(const EVP_CIPHER *, EVP_rc2_64_cbc, \
     struct Library *, AMISSL_BASE_NAME, 785, Amissl)

#define EVP_rc2_cfb64() \
      AROS_LC0(const EVP_CIPHER *, EVP_rc2_cfb64, \
     struct Library *, AMISSL_BASE_NAME, 786, Amissl)

#define EVP_rc2_ofb() \
      AROS_LC0(const EVP_CIPHER *, EVP_rc2_ofb, \
     struct Library *, AMISSL_BASE_NAME, 787, Amissl)

#define EVP_bf_ecb() \
      AROS_LC0(const EVP_CIPHER *, EVP_bf_ecb, \
     struct Library *, AMISSL_BASE_NAME, 788, Amissl)

#define EVP_bf_cbc() \
      AROS_LC0(const EVP_CIPHER *, EVP_bf_cbc, \
     struct Library *, AMISSL_BASE_NAME, 789, Amissl)

#define EVP_bf_cfb64() \
      AROS_LC0(const EVP_CIPHER *, EVP_bf_cfb64, \
     struct Library *, AMISSL_BASE_NAME, 790, Amissl)

#define EVP_bf_ofb() \
      AROS_LC0(const EVP_CIPHER *, EVP_bf_ofb, \
     struct Library *, AMISSL_BASE_NAME, 791, Amissl)

#define EVP_cast5_ecb() \
      AROS_LC0(const EVP_CIPHER *, EVP_cast5_ecb, \
     struct Library *, AMISSL_BASE_NAME, 792, Amissl)

#define EVP_cast5_cbc() \
      AROS_LC0(const EVP_CIPHER *, EVP_cast5_cbc, \
     struct Library *, AMISSL_BASE_NAME, 793, Amissl)

#define EVP_cast5_cfb64() \
      AROS_LC0(const EVP_CIPHER *, EVP_cast5_cfb64, \
     struct Library *, AMISSL_BASE_NAME, 794, Amissl)

#define EVP_cast5_ofb() \
      AROS_LC0(const EVP_CIPHER *, EVP_cast5_ofb, \
     struct Library *, AMISSL_BASE_NAME, 795, Amissl)

#define EVP_rc5_32_12_16_cbc() \
      AROS_LC0(const EVP_CIPHER *, EVP_rc5_32_12_16_cbc, \
     struct Library *, AMISSL_BASE_NAME, 796, Amissl)

#define EVP_rc5_32_12_16_ecb() \
      AROS_LC0(const EVP_CIPHER *, EVP_rc5_32_12_16_ecb, \
     struct Library *, AMISSL_BASE_NAME, 797, Amissl)

#define EVP_rc5_32_12_16_cfb64() \
      AROS_LC0(const EVP_CIPHER *, EVP_rc5_32_12_16_cfb64, \
     struct Library *, AMISSL_BASE_NAME, 798, Amissl)

#define EVP_rc5_32_12_16_ofb() \
      AROS_LC0(const EVP_CIPHER *, EVP_rc5_32_12_16_ofb, \
     struct Library *, AMISSL_BASE_NAME, 799, Amissl)

#define EVP_aes_128_ecb() \
      AROS_LC0(const EVP_CIPHER *, EVP_aes_128_ecb, \
     struct Library *, AMISSL_BASE_NAME, 800, Amissl)

#define EVP_aes_128_cbc() \
      AROS_LC0(const EVP_CIPHER *, EVP_aes_128_cbc, \
     struct Library *, AMISSL_BASE_NAME, 801, Amissl)

#define EVP_aes_128_cfb1() \
      AROS_LC0(const EVP_CIPHER *, EVP_aes_128_cfb1, \
     struct Library *, AMISSL_BASE_NAME, 802, Amissl)

#define EVP_aes_128_cfb8() \
      AROS_LC0(const EVP_CIPHER *, EVP_aes_128_cfb8, \
     struct Library *, AMISSL_BASE_NAME, 803, Amissl)

#define EVP_aes_128_cfb128() \
      AROS_LC0(const EVP_CIPHER *, EVP_aes_128_cfb128, \
     struct Library *, AMISSL_BASE_NAME, 804, Amissl)

#define EVP_aes_128_ofb() \
      AROS_LC0(const EVP_CIPHER *, EVP_aes_128_ofb, \
     struct Library *, AMISSL_BASE_NAME, 805, Amissl)

#define EVP_aes_192_ecb() \
      AROS_LC0(const EVP_CIPHER *, EVP_aes_192_ecb, \
     struct Library *, AMISSL_BASE_NAME, 806, Amissl)

#define EVP_aes_192_cbc() \
      AROS_LC0(const EVP_CIPHER *, EVP_aes_192_cbc, \
     struct Library *, AMISSL_BASE_NAME, 807, Amissl)

#define EVP_aes_192_cfb1() \
      AROS_LC0(const EVP_CIPHER *, EVP_aes_192_cfb1, \
     struct Library *, AMISSL_BASE_NAME, 808, Amissl)

#define EVP_aes_192_cfb8() \
      AROS_LC0(const EVP_CIPHER *, EVP_aes_192_cfb8, \
     struct Library *, AMISSL_BASE_NAME, 809, Amissl)

#define EVP_aes_192_cfb128() \
      AROS_LC0(const EVP_CIPHER *, EVP_aes_192_cfb128, \
     struct Library *, AMISSL_BASE_NAME, 810, Amissl)

#define EVP_aes_192_ofb() \
      AROS_LC0(const EVP_CIPHER *, EVP_aes_192_ofb, \
     struct Library *, AMISSL_BASE_NAME, 811, Amissl)

#define EVP_aes_256_ecb() \
      AROS_LC0(const EVP_CIPHER *, EVP_aes_256_ecb, \
     struct Library *, AMISSL_BASE_NAME, 812, Amissl)

#define EVP_aes_256_cbc() \
      AROS_LC0(const EVP_CIPHER *, EVP_aes_256_cbc, \
     struct Library *, AMISSL_BASE_NAME, 813, Amissl)

#define EVP_aes_256_cfb1() \
      AROS_LC0(const EVP_CIPHER *, EVP_aes_256_cfb1, \
     struct Library *, AMISSL_BASE_NAME, 814, Amissl)

#define EVP_aes_256_cfb8() \
      AROS_LC0(const EVP_CIPHER *, EVP_aes_256_cfb8, \
     struct Library *, AMISSL_BASE_NAME, 815, Amissl)

#define EVP_aes_256_cfb128() \
      AROS_LC0(const EVP_CIPHER *, EVP_aes_256_cfb128, \
     struct Library *, AMISSL_BASE_NAME, 816, Amissl)

#define EVP_aes_256_ofb() \
      AROS_LC0(const EVP_CIPHER *, EVP_aes_256_ofb, \
     struct Library *, AMISSL_BASE_NAME, 817, Amissl)

#define OBSOLETE_OPENSSL_add_all_algorithms_noconf() \
      AROS_LC0(void, OBSOLETE_OPENSSL_add_all_algorithms_noconf, \
     struct Library *, AMISSL_BASE_NAME, 818, Amissl)

#define OBSOLETE_OPENSSL_add_all_algorithms_conf() \
      AROS_LC0(void, OBSOLETE_OPENSSL_add_all_algorithms_conf, \
     struct Library *, AMISSL_BASE_NAME, 819, Amissl)

#define OBSOLETE_OpenSSL_add_all_ciphers() \
      AROS_LC0(void, OBSOLETE_OpenSSL_add_all_ciphers, \
     struct Library *, AMISSL_BASE_NAME, 820, Amissl)

#define OBSOLETE_OpenSSL_add_all_digests() \
      AROS_LC0(void, OBSOLETE_OpenSSL_add_all_digests, \
     struct Library *, AMISSL_BASE_NAME, 821, Amissl)

#define EVP_add_cipher(___cipher) \
      AROS_LC1(int, EVP_add_cipher, \
 AROS_LCA(const EVP_CIPHER *, (___cipher), A0), \
     struct Library *, AMISSL_BASE_NAME, 822, Amissl)

#define EVP_add_digest(___digest) \
      AROS_LC1(int, EVP_add_digest, \
 AROS_LCA(const EVP_MD *, (___digest), A0), \
     struct Library *, AMISSL_BASE_NAME, 823, Amissl)

#define EVP_get_cipherbyname(___name) \
      AROS_LC1(const EVP_CIPHER *, EVP_get_cipherbyname, \
 AROS_LCA(const char *, (___name), A0), \
     struct Library *, AMISSL_BASE_NAME, 824, Amissl)

#define EVP_get_digestbyname(___name) \
      AROS_LC1(const EVP_MD *, EVP_get_digestbyname, \
 AROS_LCA(const char *, (___name), A0), \
     struct Library *, AMISSL_BASE_NAME, 825, Amissl)

#define EVP_PKEY_decrypt(___ctx, ___out, ___outlen, ___in, ___inlen) \
      AROS_LC5(int, EVP_PKEY_decrypt, \
 AROS_LCA(EVP_PKEY_CTX *, (___ctx), A0), \
 AROS_LCA(unsigned char *, (___out), A1), \
 AROS_LCA(size_t *, (___outlen), A2), \
 AROS_LCA(const unsigned char *, (___in), A3), \
 AROS_LCA(size_t, (___inlen), D0), \
     struct Library *, AMISSL_BASE_NAME, 827, Amissl)

#define EVP_PKEY_encrypt(___ctx, ___out, ___outlen, ___in, ___inlen) \
      AROS_LC5(int, EVP_PKEY_encrypt, \
 AROS_LCA(EVP_PKEY_CTX *, (___ctx), A0), \
 AROS_LCA(unsigned char *, (___out), A1), \
 AROS_LCA(size_t *, (___outlen), A2), \
 AROS_LCA(const unsigned char *, (___in), A3), \
 AROS_LCA(size_t, (___inlen), D0), \
     struct Library *, AMISSL_BASE_NAME, 828, Amissl)

#define EVP_PKEY_type(___type) \
      AROS_LC1(int, EVP_PKEY_type, \
 AROS_LCA(int, (___type), D0), \
     struct Library *, AMISSL_BASE_NAME, 829, Amissl)

#define EVP_PKEY_get_bits(___pkey) \
      AROS_LC1(int, EVP_PKEY_get_bits, \
 AROS_LCA(const EVP_PKEY *, (___pkey), A0), \
     struct Library *, AMISSL_BASE_NAME, 830, Amissl)

#define EVP_PKEY_get_size(___pkey) \
      AROS_LC1(int, EVP_PKEY_get_size, \
 AROS_LCA(const EVP_PKEY *, (___pkey), A0), \
     struct Library *, AMISSL_BASE_NAME, 831, Amissl)

#define EVP_PKEY_assign(___pkey, ___type, ___key) \
      AROS_LC3(int, EVP_PKEY_assign, \
 AROS_LCA(EVP_PKEY *, (___pkey), A0), \
 AROS_LCA(int, (___type), D0), \
 AROS_LCA(void *, (___key), A1), \
     struct Library *, AMISSL_BASE_NAME, 832, Amissl)

#define EVP_PKEY_set1_RSA(___pkey, ___key) \
      AROS_LC2(int, EVP_PKEY_set1_RSA, \
 AROS_LCA(EVP_PKEY *, (___pkey), A0), \
 AROS_LCA(struct rsa_st *, (___key), A1), \
     struct Library *, AMISSL_BASE_NAME, 833, Amissl)

#define EVP_PKEY_get1_RSA(___pkey) \
      AROS_LC1(struct rsa_st *, EVP_PKEY_get1_RSA, \
 AROS_LCA(EVP_PKEY *, (___pkey), A0), \
     struct Library *, AMISSL_BASE_NAME, 834, Amissl)

#define EVP_PKEY_set1_DSA(___pkey, ___key) \
      AROS_LC2(int, EVP_PKEY_set1_DSA, \
 AROS_LCA(EVP_PKEY *, (___pkey), A0), \
 AROS_LCA(struct dsa_st *, (___key), A1), \
     struct Library *, AMISSL_BASE_NAME, 835, Amissl)

#define EVP_PKEY_get1_DSA(___pkey) \
      AROS_LC1(struct dsa_st *, EVP_PKEY_get1_DSA, \
 AROS_LCA(EVP_PKEY *, (___pkey), A0), \
     struct Library *, AMISSL_BASE_NAME, 836, Amissl)

#define EVP_PKEY_set1_DH(___pkey, ___key) \
      AROS_LC2(int, EVP_PKEY_set1_DH, \
 AROS_LCA(EVP_PKEY *, (___pkey), A0), \
 AROS_LCA(struct dh_st *, (___key), A1), \
     struct Library *, AMISSL_BASE_NAME, 837, Amissl)

#define EVP_PKEY_get1_DH(___pkey) \
      AROS_LC1(struct dh_st *, EVP_PKEY_get1_DH, \
 AROS_LCA(EVP_PKEY *, (___pkey), A0), \
     struct Library *, AMISSL_BASE_NAME, 838, Amissl)

#define EVP_PKEY_new() \
      AROS_LC0(EVP_PKEY *, EVP_PKEY_new, \
     struct Library *, AMISSL_BASE_NAME, 839, Amissl)

#define EVP_PKEY_free(___pkey) \
      AROS_LC1(void, EVP_PKEY_free, \
 AROS_LCA(EVP_PKEY *, (___pkey), A0), \
     struct Library *, AMISSL_BASE_NAME, 840, Amissl)

#define d2i_PublicKey(___type, ___a, ___pp, ___length) \
      AROS_LC4(EVP_PKEY *, d2i_PublicKey, \
 AROS_LCA(int, (___type), D0), \
 AROS_LCA(EVP_PKEY **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___pp), A1), \
 AROS_LCA(long, (___length), D1), \
     struct Library *, AMISSL_BASE_NAME, 841, Amissl)

#define i2d_PublicKey(___a, ___pp) \
      AROS_LC2(int, i2d_PublicKey, \
 AROS_LCA(const EVP_PKEY *, (___a), A0), \
 AROS_LCA(unsigned char **, (___pp), A1), \
     struct Library *, AMISSL_BASE_NAME, 842, Amissl)

#define d2i_PrivateKey(___type, ___a, ___pp, ___length) \
      AROS_LC4(EVP_PKEY *, d2i_PrivateKey, \
 AROS_LCA(int, (___type), D0), \
 AROS_LCA(EVP_PKEY **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___pp), A1), \
 AROS_LCA(long, (___length), D1), \
     struct Library *, AMISSL_BASE_NAME, 843, Amissl)

#define d2i_AutoPrivateKey(___a, ___pp, ___length) \
      AROS_LC3(EVP_PKEY *, d2i_AutoPrivateKey, \
 AROS_LCA(EVP_PKEY **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___pp), A1), \
 AROS_LCA(long, (___length), D0), \
     struct Library *, AMISSL_BASE_NAME, 844, Amissl)

#define i2d_PrivateKey(___a, ___pp) \
      AROS_LC2(int, i2d_PrivateKey, \
 AROS_LCA(const EVP_PKEY *, (___a), A0), \
 AROS_LCA(unsigned char **, (___pp), A1), \
     struct Library *, AMISSL_BASE_NAME, 845, Amissl)

#define EVP_PKEY_copy_parameters(___to, ___from) \
      AROS_LC2(int, EVP_PKEY_copy_parameters, \
 AROS_LCA(EVP_PKEY *, (___to), A0), \
 AROS_LCA(const EVP_PKEY *, (___from), A1), \
     struct Library *, AMISSL_BASE_NAME, 846, Amissl)

#define EVP_PKEY_missing_parameters(___pkey) \
      AROS_LC1(int, EVP_PKEY_missing_parameters, \
 AROS_LCA(const EVP_PKEY *, (___pkey), A0), \
     struct Library *, AMISSL_BASE_NAME, 847, Amissl)

#define EVP_PKEY_save_parameters(___pkey, ___mode) \
      AROS_LC2(int, EVP_PKEY_save_parameters, \
 AROS_LCA(EVP_PKEY *, (___pkey), A0), \
 AROS_LCA(int, (___mode), D0), \
     struct Library *, AMISSL_BASE_NAME, 848, Amissl)

#define EVP_PKEY_cmp_parameters(___a, ___b) \
      AROS_LC2(int, EVP_PKEY_cmp_parameters, \
 AROS_LCA(const EVP_PKEY *, (___a), A0), \
 AROS_LCA(const EVP_PKEY *, (___b), A1), \
     struct Library *, AMISSL_BASE_NAME, 849, Amissl)

#define EVP_CIPHER_get_type(___ctx) \
      AROS_LC1(int, EVP_CIPHER_get_type, \
 AROS_LCA(const EVP_CIPHER *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 850, Amissl)

#define EVP_CIPHER_param_to_asn1(___c, ___type) \
      AROS_LC2(int, EVP_CIPHER_param_to_asn1, \
 AROS_LCA(EVP_CIPHER_CTX *, (___c), A0), \
 AROS_LCA(ASN1_TYPE *, (___type), A1), \
     struct Library *, AMISSL_BASE_NAME, 851, Amissl)

#define EVP_CIPHER_asn1_to_param(___c, ___type) \
      AROS_LC2(int, EVP_CIPHER_asn1_to_param, \
 AROS_LCA(EVP_CIPHER_CTX *, (___c), A0), \
 AROS_LCA(ASN1_TYPE *, (___type), A1), \
     struct Library *, AMISSL_BASE_NAME, 852, Amissl)

#define EVP_CIPHER_set_asn1_iv(___c, ___type) \
      AROS_LC2(int, EVP_CIPHER_set_asn1_iv, \
 AROS_LCA(EVP_CIPHER_CTX *, (___c), A0), \
 AROS_LCA(ASN1_TYPE *, (___type), A1), \
     struct Library *, AMISSL_BASE_NAME, 853, Amissl)

#define EVP_CIPHER_get_asn1_iv(___c, ___type) \
      AROS_LC2(int, EVP_CIPHER_get_asn1_iv, \
 AROS_LCA(EVP_CIPHER_CTX *, (___c), A0), \
 AROS_LCA(ASN1_TYPE *, (___type), A1), \
     struct Library *, AMISSL_BASE_NAME, 854, Amissl)

#define PKCS5_PBE_keyivgen(___ctx, ___pass, ___passlen, ___param, ___cipher, ___md, ___en_de) \
      AROS_LC7(int, PKCS5_PBE_keyivgen, \
 AROS_LCA(EVP_CIPHER_CTX *, (___ctx), A0), \
 AROS_LCA(const char *, (___pass), A1), \
 AROS_LCA(int, (___passlen), D0), \
 AROS_LCA(ASN1_TYPE *, (___param), A2), \
 AROS_LCA(const EVP_CIPHER *, (___cipher), A3), \
 AROS_LCA(const EVP_MD *, (___md), D1), \
 AROS_LCA(int, (___en_de), D2), \
     struct Library *, AMISSL_BASE_NAME, 855, Amissl)

#define PKCS5_PBKDF2_HMAC_SHA1(___pass, ___passlen, ___salt, ___saltlen, ___iter, ___keylen, ___out) \
      AROS_LC7(int, PKCS5_PBKDF2_HMAC_SHA1, \
 AROS_LCA(const char *, (___pass), A0), \
 AROS_LCA(int, (___passlen), D0), \
 AROS_LCA(const unsigned char *, (___salt), A1), \
 AROS_LCA(int, (___saltlen), D1), \
 AROS_LCA(int, (___iter), D2), \
 AROS_LCA(int, (___keylen), D3), \
 AROS_LCA(unsigned char *, (___out), A2), \
     struct Library *, AMISSL_BASE_NAME, 856, Amissl)

#define PKCS5_v2_PBE_keyivgen(___ctx, ___pass, ___passlen, ___param, ___cipher, ___md, ___en_de) \
      AROS_LC7(int, PKCS5_v2_PBE_keyivgen, \
 AROS_LCA(EVP_CIPHER_CTX *, (___ctx), A0), \
 AROS_LCA(const char *, (___pass), A1), \
 AROS_LCA(int, (___passlen), D0), \
 AROS_LCA(ASN1_TYPE *, (___param), A2), \
 AROS_LCA(const EVP_CIPHER *, (___cipher), A3), \
 AROS_LCA(const EVP_MD *, (___md), D1), \
 AROS_LCA(int, (___en_de), D2), \
     struct Library *, AMISSL_BASE_NAME, 857, Amissl)

#define PKCS5_PBE_add() \
      AROS_LC0(void, PKCS5_PBE_add, \
     struct Library *, AMISSL_BASE_NAME, 858, Amissl)

#define EVP_PBE_CipherInit(___pbe_obj, ___pass, ___passlen, ___param, ___ctx, ___en_de) \
      AROS_LC6(int, EVP_PBE_CipherInit, \
 AROS_LCA(ASN1_OBJECT *, (___pbe_obj), A0), \
 AROS_LCA(const char *, (___pass), A1), \
 AROS_LCA(int, (___passlen), D0), \
 AROS_LCA(ASN1_TYPE *, (___param), A2), \
 AROS_LCA(EVP_CIPHER_CTX *, (___ctx), A3), \
 AROS_LCA(int, (___en_de), D1), \
     struct Library *, AMISSL_BASE_NAME, 859, Amissl)

#define EVP_PBE_alg_add(___nid, ___cipher, ___md, ___keygen) \
      AROS_LC4(int, EVP_PBE_alg_add, \
 AROS_LCA(int, (___nid), D0), \
 AROS_LCA(const EVP_CIPHER *, (___cipher), A0), \
 AROS_LCA(const EVP_MD *, (___md), A1), \
 AROS_LCA(EVP_PBE_KEYGEN *, (___keygen), A2), \
     struct Library *, AMISSL_BASE_NAME, 860, Amissl)

#define EVP_PBE_cleanup() \
      AROS_LC0(void, EVP_PBE_cleanup, \
     struct Library *, AMISSL_BASE_NAME, 861, Amissl)

#define ERR_load_EVP_strings() \
      AROS_LC0(int, ERR_load_EVP_strings, \
     struct Library *, AMISSL_BASE_NAME, 862, Amissl)

#define HMAC_Init(___ctx, ___key, ___len, ___md) \
      AROS_LC4(int, HMAC_Init, \
 AROS_LCA(HMAC_CTX *, (___ctx), A0), \
 AROS_LCA(const void *, (___key), A1), \
 AROS_LCA(int, (___len), D0), \
 AROS_LCA(const EVP_MD *, (___md), A2), \
     struct Library *, AMISSL_BASE_NAME, 865, Amissl)

#define HMAC_Init_ex(___ctx, ___key, ___len, ___md, ___impl) \
      AROS_LC5(int, HMAC_Init_ex, \
 AROS_LCA(HMAC_CTX *, (___ctx), A0), \
 AROS_LCA(const void *, (___key), A1), \
 AROS_LCA(int, (___len), D0), \
 AROS_LCA(const EVP_MD *, (___md), A2), \
 AROS_LCA(ENGINE *, (___impl), A3), \
     struct Library *, AMISSL_BASE_NAME, 866, Amissl)

#define HMAC_Update(___ctx, ___data, ___len) \
      AROS_LC3(int, HMAC_Update, \
 AROS_LCA(HMAC_CTX *, (___ctx), A0), \
 AROS_LCA(const unsigned char *, (___data), A1), \
 AROS_LCA(size_t, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 867, Amissl)

#define HMAC_Final(___ctx, ___md, ___len) \
      AROS_LC3(int, HMAC_Final, \
 AROS_LCA(HMAC_CTX *, (___ctx), A0), \
 AROS_LCA(unsigned char *, (___md), A1), \
 AROS_LCA(unsigned int *, (___len), A2), \
     struct Library *, AMISSL_BASE_NAME, 868, Amissl)

#define HMAC(___evp_md, ___key, ___key_len, ___data, ___data_len, ___md, ___md_len) \
      AROS_LC7(unsigned char *, HMAC, \
 AROS_LCA(const EVP_MD *, (___evp_md), A0), \
 AROS_LCA(const void *, (___key), A1), \
 AROS_LCA(int, (___key_len), D0), \
 AROS_LCA(const unsigned char *, (___data), A2), \
 AROS_LCA(size_t, (___data_len), D1), \
 AROS_LCA(unsigned char *, (___md), A3), \
 AROS_LCA(unsigned int *, (___md_len), D2), \
     struct Library *, AMISSL_BASE_NAME, 869, Amissl)

#define OPENSSL_LH_new(___h, ___c) \
      AROS_LC2(OPENSSL_LHASH *, OPENSSL_LH_new, \
 AROS_LCA(OPENSSL_LH_HASHFUNC, (___h), A0), \
 AROS_LCA(OPENSSL_LH_COMPFUNC, (___c), A1), \
     struct Library *, AMISSL_BASE_NAME, 925, Amissl)

#define OPENSSL_LH_free(___lh) \
      AROS_LC1(void, OPENSSL_LH_free, \
 AROS_LCA(OPENSSL_LHASH *, (___lh), A0), \
     struct Library *, AMISSL_BASE_NAME, 926, Amissl)

#define OPENSSL_LH_insert(___lh, ___data) \
      AROS_LC2(void *, OPENSSL_LH_insert, \
 AROS_LCA(OPENSSL_LHASH *, (___lh), A0), \
 AROS_LCA(void *, (___data), A1), \
     struct Library *, AMISSL_BASE_NAME, 927, Amissl)

#define OPENSSL_LH_delete(___lh, ___data) \
      AROS_LC2(void *, OPENSSL_LH_delete, \
 AROS_LCA(OPENSSL_LHASH *, (___lh), A0), \
 AROS_LCA(const void *, (___data), A1), \
     struct Library *, AMISSL_BASE_NAME, 928, Amissl)

#define OPENSSL_LH_retrieve(___lh, ___data) \
      AROS_LC2(void *, OPENSSL_LH_retrieve, \
 AROS_LCA(OPENSSL_LHASH *, (___lh), A0), \
 AROS_LCA(const void *, (___data), A1), \
     struct Library *, AMISSL_BASE_NAME, 929, Amissl)

#define OPENSSL_LH_doall(___lh, ___func) \
      AROS_LC2(void, OPENSSL_LH_doall, \
 AROS_LCA(OPENSSL_LHASH *, (___lh), A0), \
 AROS_LCA(OPENSSL_LH_DOALL_FUNC, (___func), A1), \
     struct Library *, AMISSL_BASE_NAME, 930, Amissl)

#define OPENSSL_LH_doall_arg(___lh, ___func, ___arg) \
      AROS_LC3(void, OPENSSL_LH_doall_arg, \
 AROS_LCA(OPENSSL_LHASH *, (___lh), A0), \
 AROS_LCA(OPENSSL_LH_DOALL_FUNCARG, (___func), A1), \
 AROS_LCA(void *, (___arg), A2), \
     struct Library *, AMISSL_BASE_NAME, 931, Amissl)

#define OPENSSL_LH_strhash(___c) \
      AROS_LC1(unsigned long, OPENSSL_LH_strhash, \
 AROS_LCA(const char *, (___c), A0), \
     struct Library *, AMISSL_BASE_NAME, 932, Amissl)

#define OPENSSL_LH_num_items(___lh) \
      AROS_LC1(unsigned long, OPENSSL_LH_num_items, \
 AROS_LCA(const OPENSSL_LHASH *, (___lh), A0), \
     struct Library *, AMISSL_BASE_NAME, 933, Amissl)

#define OPENSSL_LH_stats_bio(___lh, ___out) \
      AROS_LC2(void, OPENSSL_LH_stats_bio, \
 AROS_LCA(const OPENSSL_LHASH *, (___lh), A0), \
 AROS_LCA(BIO *, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 934, Amissl)

#define OPENSSL_LH_node_stats_bio(___lh, ___out) \
      AROS_LC2(void, OPENSSL_LH_node_stats_bio, \
 AROS_LCA(const OPENSSL_LHASH *, (___lh), A0), \
 AROS_LCA(BIO *, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 935, Amissl)

#define OPENSSL_LH_node_usage_stats_bio(___lh, ___out) \
      AROS_LC2(void, OPENSSL_LH_node_usage_stats_bio, \
 AROS_LCA(const OPENSSL_LHASH *, (___lh), A0), \
 AROS_LCA(BIO *, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 936, Amissl)

#define OBJ_NAME_init() \
      AROS_LC0(int, OBJ_NAME_init, \
     struct Library *, AMISSL_BASE_NAME, 937, Amissl)

#define OBJ_NAME_new_index(___hash_func, ___cmp_func, ___free_func) \
      AROS_LC3(int, OBJ_NAME_new_index, \
 AROS_LCA(unsigned long (*)(const char *), (___hash_func), A0), \
 AROS_LCA(int (*)(const char *,const char *), (___cmp_func), A1), \
 AROS_LCA(void (*)(const char *,int,const char *), (___free_func), A2), \
     struct Library *, AMISSL_BASE_NAME, 938, Amissl)

#define OBJ_NAME_get(___name, ___type) \
      AROS_LC2(const char *, OBJ_NAME_get, \
 AROS_LCA(const char *, (___name), A0), \
 AROS_LCA(int, (___type), D0), \
     struct Library *, AMISSL_BASE_NAME, 939, Amissl)

#define OBJ_NAME_add(___name, ___type, ___data) \
      AROS_LC3(int, OBJ_NAME_add, \
 AROS_LCA(const char *, (___name), A0), \
 AROS_LCA(int, (___type), D0), \
 AROS_LCA(const char *, (___data), A1), \
     struct Library *, AMISSL_BASE_NAME, 940, Amissl)

#define OBJ_NAME_remove(___name, ___type) \
      AROS_LC2(int, OBJ_NAME_remove, \
 AROS_LCA(const char *, (___name), A0), \
 AROS_LCA(int, (___type), D0), \
     struct Library *, AMISSL_BASE_NAME, 941, Amissl)

#define OBJ_NAME_cleanup(___type) \
      AROS_LC1(void, OBJ_NAME_cleanup, \
 AROS_LCA(int, (___type), D0), \
     struct Library *, AMISSL_BASE_NAME, 942, Amissl)

#define OBJ_NAME_do_all(___type, ___fn, ___arg) \
      AROS_LC3(void, OBJ_NAME_do_all, \
 AROS_LCA(int, (___type), D0), \
 AROS_LCA(void (*)(const OBJ_NAME *,void *arg), (___fn), A0), \
 AROS_LCA(void *, (___arg), A1), \
     struct Library *, AMISSL_BASE_NAME, 943, Amissl)

#define OBJ_NAME_do_all_sorted(___type, ___fn, ___arg) \
      AROS_LC3(void, OBJ_NAME_do_all_sorted, \
 AROS_LCA(int, (___type), D0), \
 AROS_LCA(void (*)(const OBJ_NAME *,void *arg), (___fn), A0), \
 AROS_LCA(void *, (___arg), A1), \
     struct Library *, AMISSL_BASE_NAME, 944, Amissl)

#define OBJ_dup(___o) \
      AROS_LC1(ASN1_OBJECT *, OBJ_dup, \
 AROS_LCA(const ASN1_OBJECT *, (___o), A0), \
     struct Library *, AMISSL_BASE_NAME, 945, Amissl)

#define OBJ_nid2obj(___n) \
      AROS_LC1(ASN1_OBJECT *, OBJ_nid2obj, \
 AROS_LCA(int, (___n), D0), \
     struct Library *, AMISSL_BASE_NAME, 946, Amissl)

#define OBJ_nid2ln(___n) \
      AROS_LC1(const char *, OBJ_nid2ln, \
 AROS_LCA(int, (___n), D0), \
     struct Library *, AMISSL_BASE_NAME, 947, Amissl)

#define OBJ_nid2sn(___n) \
      AROS_LC1(const char *, OBJ_nid2sn, \
 AROS_LCA(int, (___n), D0), \
     struct Library *, AMISSL_BASE_NAME, 948, Amissl)

#define OBJ_obj2nid(___o) \
      AROS_LC1(int, OBJ_obj2nid, \
 AROS_LCA(const ASN1_OBJECT *, (___o), A0), \
     struct Library *, AMISSL_BASE_NAME, 949, Amissl)

#define OBJ_txt2obj(___s, ___no_name) \
      AROS_LC2(ASN1_OBJECT *, OBJ_txt2obj, \
 AROS_LCA(const char *, (___s), A0), \
 AROS_LCA(int, (___no_name), D0), \
     struct Library *, AMISSL_BASE_NAME, 950, Amissl)

#define OBJ_obj2txt(___buf, ___buf_len, ___a, ___no_name) \
      AROS_LC4(int, OBJ_obj2txt, \
 AROS_LCA(char *, (___buf), A0), \
 AROS_LCA(int, (___buf_len), D0), \
 AROS_LCA(const ASN1_OBJECT *, (___a), A1), \
 AROS_LCA(int, (___no_name), D1), \
     struct Library *, AMISSL_BASE_NAME, 951, Amissl)

#define OBJ_txt2nid(___s) \
      AROS_LC1(int, OBJ_txt2nid, \
 AROS_LCA(const char *, (___s), A0), \
     struct Library *, AMISSL_BASE_NAME, 952, Amissl)

#define OBJ_ln2nid(___s) \
      AROS_LC1(int, OBJ_ln2nid, \
 AROS_LCA(const char *, (___s), A0), \
     struct Library *, AMISSL_BASE_NAME, 953, Amissl)

#define OBJ_sn2nid(___s) \
      AROS_LC1(int, OBJ_sn2nid, \
 AROS_LCA(const char *, (___s), A0), \
     struct Library *, AMISSL_BASE_NAME, 954, Amissl)

#define OBJ_cmp(___a, ___b) \
      AROS_LC2(int, OBJ_cmp, \
 AROS_LCA(const ASN1_OBJECT *, (___a), A0), \
 AROS_LCA(const ASN1_OBJECT *, (___b), A1), \
     struct Library *, AMISSL_BASE_NAME, 955, Amissl)

#define OBJ_new_nid(___num) \
      AROS_LC1(int, OBJ_new_nid, \
 AROS_LCA(int, (___num), D0), \
     struct Library *, AMISSL_BASE_NAME, 957, Amissl)

#define OBJ_add_object(___obj) \
      AROS_LC1(int, OBJ_add_object, \
 AROS_LCA(const ASN1_OBJECT *, (___obj), A0), \
     struct Library *, AMISSL_BASE_NAME, 958, Amissl)

#define OBJ_create(___oid, ___sn, ___ln) \
      AROS_LC3(int, OBJ_create, \
 AROS_LCA(const char *, (___oid), A0), \
 AROS_LCA(const char *, (___sn), A1), \
 AROS_LCA(const char *, (___ln), A2), \
     struct Library *, AMISSL_BASE_NAME, 959, Amissl)

#define OBJ_create_objects(___in) \
      AROS_LC1(int, OBJ_create_objects, \
 AROS_LCA(BIO *, (___in), A0), \
     struct Library *, AMISSL_BASE_NAME, 961, Amissl)

#define ERR_load_OBJ_strings() \
      AROS_LC0(int, ERR_load_OBJ_strings, \
     struct Library *, AMISSL_BASE_NAME, 962, Amissl)

#define OCSP_sendreq_bio(___b, ___path, ___req) \
      AROS_LC3(OCSP_RESPONSE *, OCSP_sendreq_bio, \
 AROS_LCA(BIO *, (___b), A0), \
 AROS_LCA(const char *, (___path), A1), \
 AROS_LCA(OCSP_REQUEST *, (___req), A2), \
     struct Library *, AMISSL_BASE_NAME, 963, Amissl)

#define OCSP_cert_to_id(___dgst, ___subject, ___issuer) \
      AROS_LC3(OCSP_CERTID *, OCSP_cert_to_id, \
 AROS_LCA(const EVP_MD *, (___dgst), A0), \
 AROS_LCA(const X509 *, (___subject), A1), \
 AROS_LCA(const X509 *, (___issuer), A2), \
     struct Library *, AMISSL_BASE_NAME, 964, Amissl)

#define OCSP_cert_id_new(___dgst, ___issuerName, ___issuerKey, ___serialNumber) \
      AROS_LC4(OCSP_CERTID *, OCSP_cert_id_new, \
 AROS_LCA(const EVP_MD *, (___dgst), A0), \
 AROS_LCA(const X509_NAME *, (___issuerName), A1), \
 AROS_LCA(const ASN1_BIT_STRING *, (___issuerKey), A2), \
 AROS_LCA(const ASN1_INTEGER *, (___serialNumber), A3), \
     struct Library *, AMISSL_BASE_NAME, 965, Amissl)

#define OCSP_request_add0_id(___req, ___cid) \
      AROS_LC2(OCSP_ONEREQ *, OCSP_request_add0_id, \
 AROS_LCA(OCSP_REQUEST *, (___req), A0), \
 AROS_LCA(OCSP_CERTID *, (___cid), A1), \
     struct Library *, AMISSL_BASE_NAME, 966, Amissl)

#define OCSP_request_add1_nonce(___req, ___val, ___len) \
      AROS_LC3(int, OCSP_request_add1_nonce, \
 AROS_LCA(OCSP_REQUEST *, (___req), A0), \
 AROS_LCA(unsigned char *, (___val), A1), \
 AROS_LCA(int, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 967, Amissl)

#define OCSP_basic_add1_nonce(___resp, ___val, ___len) \
      AROS_LC3(int, OCSP_basic_add1_nonce, \
 AROS_LCA(OCSP_BASICRESP *, (___resp), A0), \
 AROS_LCA(unsigned char *, (___val), A1), \
 AROS_LCA(int, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 968, Amissl)

#define OCSP_check_nonce(___req, ___bs) \
      AROS_LC2(int, OCSP_check_nonce, \
 AROS_LCA(OCSP_REQUEST *, (___req), A0), \
 AROS_LCA(OCSP_BASICRESP *, (___bs), A1), \
     struct Library *, AMISSL_BASE_NAME, 969, Amissl)

#define OCSP_copy_nonce(___resp, ___req) \
      AROS_LC2(int, OCSP_copy_nonce, \
 AROS_LCA(OCSP_BASICRESP *, (___resp), A0), \
 AROS_LCA(OCSP_REQUEST *, (___req), A1), \
     struct Library *, AMISSL_BASE_NAME, 970, Amissl)

#define OCSP_request_set1_name(___req, ___nm) \
      AROS_LC2(int, OCSP_request_set1_name, \
 AROS_LCA(OCSP_REQUEST *, (___req), A0), \
 AROS_LCA(const X509_NAME *, (___nm), A1), \
     struct Library *, AMISSL_BASE_NAME, 971, Amissl)

#define OCSP_request_add1_cert(___req, ___cert) \
      AROS_LC2(int, OCSP_request_add1_cert, \
 AROS_LCA(OCSP_REQUEST *, (___req), A0), \
 AROS_LCA(X509 *, (___cert), A1), \
     struct Library *, AMISSL_BASE_NAME, 972, Amissl)

#define OCSP_request_sign(___req, ___signer, ___key, ___dgst, ___certs, ___flags) \
      AROS_LC6(int, OCSP_request_sign, \
 AROS_LCA(OCSP_REQUEST *, (___req), A0), \
 AROS_LCA(X509 *, (___signer), A1), \
 AROS_LCA(EVP_PKEY *, (___key), A2), \
 AROS_LCA(const EVP_MD *, (___dgst), A3), \
 AROS_LCA(STACK_OF(X509) *, (___certs), D0), \
 AROS_LCA(unsigned long, (___flags), D1), \
     struct Library *, AMISSL_BASE_NAME, 973, Amissl)

#define OCSP_response_status(___resp) \
      AROS_LC1(int, OCSP_response_status, \
 AROS_LCA(OCSP_RESPONSE *, (___resp), A0), \
     struct Library *, AMISSL_BASE_NAME, 974, Amissl)

#define OCSP_response_get1_basic(___resp) \
      AROS_LC1(OCSP_BASICRESP *, OCSP_response_get1_basic, \
 AROS_LCA(OCSP_RESPONSE *, (___resp), A0), \
     struct Library *, AMISSL_BASE_NAME, 975, Amissl)

#define OCSP_resp_count(___bs) \
      AROS_LC1(int, OCSP_resp_count, \
 AROS_LCA(OCSP_BASICRESP *, (___bs), A0), \
     struct Library *, AMISSL_BASE_NAME, 976, Amissl)

#define OCSP_resp_get0(___bs, ___idx) \
      AROS_LC2(OCSP_SINGLERESP *, OCSP_resp_get0, \
 AROS_LCA(OCSP_BASICRESP *, (___bs), A0), \
 AROS_LCA(int, (___idx), D0), \
     struct Library *, AMISSL_BASE_NAME, 977, Amissl)

#define OCSP_resp_find(___bs, ___id, ___last) \
      AROS_LC3(int, OCSP_resp_find, \
 AROS_LCA(OCSP_BASICRESP *, (___bs), A0), \
 AROS_LCA(OCSP_CERTID *, (___id), A1), \
 AROS_LCA(int, (___last), D0), \
     struct Library *, AMISSL_BASE_NAME, 978, Amissl)

#define OCSP_single_get0_status(___single, ___reason, ___revtime, ___thisupd, ___nextupd) \
      AROS_LC5(int, OCSP_single_get0_status, \
 AROS_LCA(OCSP_SINGLERESP *, (___single), A0), \
 AROS_LCA(int *, (___reason), A1), \
 AROS_LCA(ASN1_GENERALIZEDTIME **, (___revtime), A2), \
 AROS_LCA(ASN1_GENERALIZEDTIME **, (___thisupd), A3), \
 AROS_LCA(ASN1_GENERALIZEDTIME **, (___nextupd), D0), \
     struct Library *, AMISSL_BASE_NAME, 979, Amissl)

#define OCSP_resp_find_status(___bs, ___id, ___status, ___reason, ___revtime, ___thisupd, ___nextupd) \
      AROS_LC7(int, OCSP_resp_find_status, \
 AROS_LCA(OCSP_BASICRESP *, (___bs), A0), \
 AROS_LCA(OCSP_CERTID *, (___id), A1), \
 AROS_LCA(int *, (___status), A2), \
 AROS_LCA(int *, (___reason), A3), \
 AROS_LCA(ASN1_GENERALIZEDTIME **, (___revtime), D0), \
 AROS_LCA(ASN1_GENERALIZEDTIME **, (___thisupd), D1), \
 AROS_LCA(ASN1_GENERALIZEDTIME **, (___nextupd), D2), \
     struct Library *, AMISSL_BASE_NAME, 980, Amissl)

#define OCSP_check_validity(___thisupd, ___nextupd, ___sec, ___maxsec) \
      AROS_LC4(int, OCSP_check_validity, \
 AROS_LCA(ASN1_GENERALIZEDTIME *, (___thisupd), A0), \
 AROS_LCA(ASN1_GENERALIZEDTIME *, (___nextupd), A1), \
 AROS_LCA(long, (___sec), D0), \
 AROS_LCA(long, (___maxsec), D1), \
     struct Library *, AMISSL_BASE_NAME, 981, Amissl)

#define OCSP_request_verify(___req, ___certs, ___store, ___flags) \
      AROS_LC4(int, OCSP_request_verify, \
 AROS_LCA(OCSP_REQUEST *, (___req), A0), \
 AROS_LCA(STACK_OF(X509) *, (___certs), A1), \
 AROS_LCA(X509_STORE *, (___store), A2), \
 AROS_LCA(unsigned long, (___flags), D0), \
     struct Library *, AMISSL_BASE_NAME, 982, Amissl)

#define OBSOLETE_OCSP_parse_url(___url, ___phost, ___pport, ___ppath, ___pssl) \
      AROS_LC5(int, OBSOLETE_OCSP_parse_url, \
 AROS_LCA(const char *, (___url), A0), \
 AROS_LCA(char **, (___phost), A1), \
 AROS_LCA(char **, (___pport), A2), \
 AROS_LCA(char **, (___ppath), A3), \
 AROS_LCA(int *, (___pssl), D0), \
     struct Library *, AMISSL_BASE_NAME, 983, Amissl)

#define OCSP_id_issuer_cmp(___a, ___b) \
      AROS_LC2(int, OCSP_id_issuer_cmp, \
 AROS_LCA(const OCSP_CERTID *, (___a), A0), \
 AROS_LCA(const OCSP_CERTID *, (___b), A1), \
     struct Library *, AMISSL_BASE_NAME, 984, Amissl)

#define OCSP_id_cmp(___a, ___b) \
      AROS_LC2(int, OCSP_id_cmp, \
 AROS_LCA(const OCSP_CERTID *, (___a), A0), \
 AROS_LCA(const OCSP_CERTID *, (___b), A1), \
     struct Library *, AMISSL_BASE_NAME, 985, Amissl)

#define OCSP_request_onereq_count(___req) \
      AROS_LC1(int, OCSP_request_onereq_count, \
 AROS_LCA(OCSP_REQUEST *, (___req), A0), \
     struct Library *, AMISSL_BASE_NAME, 986, Amissl)

#define OCSP_request_onereq_get0(___req, ___i) \
      AROS_LC2(OCSP_ONEREQ *, OCSP_request_onereq_get0, \
 AROS_LCA(OCSP_REQUEST *, (___req), A0), \
 AROS_LCA(int, (___i), D0), \
     struct Library *, AMISSL_BASE_NAME, 987, Amissl)

#define OCSP_onereq_get0_id(___one) \
      AROS_LC1(OCSP_CERTID *, OCSP_onereq_get0_id, \
 AROS_LCA(OCSP_ONEREQ *, (___one), A0), \
     struct Library *, AMISSL_BASE_NAME, 988, Amissl)

#define OCSP_id_get0_info(___piNameHash, ___pmd, ___pikeyHash, ___pserial, ___cid) \
      AROS_LC5(int, OCSP_id_get0_info, \
 AROS_LCA(ASN1_OCTET_STRING **, (___piNameHash), A0), \
 AROS_LCA(ASN1_OBJECT **, (___pmd), A1), \
 AROS_LCA(ASN1_OCTET_STRING **, (___pikeyHash), A2), \
 AROS_LCA(ASN1_INTEGER **, (___pserial), A3), \
 AROS_LCA(OCSP_CERTID *, (___cid), D0), \
     struct Library *, AMISSL_BASE_NAME, 989, Amissl)

#define OCSP_request_is_signed(___req) \
      AROS_LC1(int, OCSP_request_is_signed, \
 AROS_LCA(OCSP_REQUEST *, (___req), A0), \
     struct Library *, AMISSL_BASE_NAME, 990, Amissl)

#define OCSP_response_create(___status, ___bs) \
      AROS_LC2(OCSP_RESPONSE *, OCSP_response_create, \
 AROS_LCA(int, (___status), D0), \
 AROS_LCA(OCSP_BASICRESP *, (___bs), A0), \
     struct Library *, AMISSL_BASE_NAME, 991, Amissl)

#define OCSP_basic_add1_status(___rsp, ___cid, ___status, ___reason, ___revtime, ___thisupd, ___nextupd) \
      AROS_LC7(OCSP_SINGLERESP *, OCSP_basic_add1_status, \
 AROS_LCA(OCSP_BASICRESP *, (___rsp), A0), \
 AROS_LCA(OCSP_CERTID *, (___cid), A1), \
 AROS_LCA(int, (___status), D0), \
 AROS_LCA(int, (___reason), D1), \
 AROS_LCA(ASN1_TIME *, (___revtime), A2), \
 AROS_LCA(ASN1_TIME *, (___thisupd), A3), \
 AROS_LCA(ASN1_TIME *, (___nextupd), D2), \
     struct Library *, AMISSL_BASE_NAME, 992, Amissl)

#define OCSP_basic_add1_cert(___resp, ___cert) \
      AROS_LC2(int, OCSP_basic_add1_cert, \
 AROS_LCA(OCSP_BASICRESP *, (___resp), A0), \
 AROS_LCA(X509 *, (___cert), A1), \
     struct Library *, AMISSL_BASE_NAME, 993, Amissl)

#define OCSP_basic_sign(___brsp, ___signer, ___key, ___dgst, ___certs, ___flags) \
      AROS_LC6(int, OCSP_basic_sign, \
 AROS_LCA(OCSP_BASICRESP *, (___brsp), A0), \
 AROS_LCA(X509 *, (___signer), A1), \
 AROS_LCA(EVP_PKEY *, (___key), A2), \
 AROS_LCA(const EVP_MD *, (___dgst), A3), \
 AROS_LCA(STACK_OF(X509) *, (___certs), D0), \
 AROS_LCA(unsigned long, (___flags), D1), \
     struct Library *, AMISSL_BASE_NAME, 994, Amissl)

#define OCSP_crlID_new(___url, ___n, ___tim) \
      AROS_LC3(X509_EXTENSION *, OCSP_crlID_new, \
 AROS_LCA(const char *, (___url), A0), \
 AROS_LCA(long *, (___n), A1), \
 AROS_LCA(char *, (___tim), A2), \
     struct Library *, AMISSL_BASE_NAME, 996, Amissl)

#define OCSP_accept_responses_new(___oids) \
      AROS_LC1(X509_EXTENSION *, OCSP_accept_responses_new, \
 AROS_LCA(char **, (___oids), A0), \
     struct Library *, AMISSL_BASE_NAME, 997, Amissl)

#define OCSP_archive_cutoff_new(___tim) \
      AROS_LC1(X509_EXTENSION *, OCSP_archive_cutoff_new, \
 AROS_LCA(char *, (___tim), A0), \
     struct Library *, AMISSL_BASE_NAME, 998, Amissl)

#define OCSP_url_svcloc_new(___issuer, ___urls) \
      AROS_LC2(X509_EXTENSION *, OCSP_url_svcloc_new, \
 AROS_LCA(const X509_NAME *, (___issuer), A0), \
 AROS_LCA(const char **, (___urls), A1), \
     struct Library *, AMISSL_BASE_NAME, 999, Amissl)

#define OCSP_REQUEST_get_ext_count(___x) \
      AROS_LC1(int, OCSP_REQUEST_get_ext_count, \
 AROS_LCA(OCSP_REQUEST *, (___x), A0), \
     struct Library *, AMISSL_BASE_NAME, 1000, Amissl)

#define OCSP_REQUEST_get_ext_by_NID(___x, ___nid, ___lastpos) \
      AROS_LC3(int, OCSP_REQUEST_get_ext_by_NID, \
 AROS_LCA(OCSP_REQUEST *, (___x), A0), \
 AROS_LCA(int, (___nid), D0), \
 AROS_LCA(int, (___lastpos), D1), \
     struct Library *, AMISSL_BASE_NAME, 1001, Amissl)

#define OCSP_REQUEST_get_ext_by_OBJ(___x, ___obj, ___lastpos) \
      AROS_LC3(int, OCSP_REQUEST_get_ext_by_OBJ, \
 AROS_LCA(OCSP_REQUEST *, (___x), A0), \
 AROS_LCA(const ASN1_OBJECT *, (___obj), A1), \
 AROS_LCA(int, (___lastpos), D0), \
     struct Library *, AMISSL_BASE_NAME, 1002, Amissl)

#define OCSP_REQUEST_get_ext_by_critical(___x, ___crit, ___lastpos) \
      AROS_LC3(int, OCSP_REQUEST_get_ext_by_critical, \
 AROS_LCA(OCSP_REQUEST *, (___x), A0), \
 AROS_LCA(int, (___crit), D0), \
 AROS_LCA(int, (___lastpos), D1), \
     struct Library *, AMISSL_BASE_NAME, 1003, Amissl)

#define OCSP_REQUEST_get_ext(___x, ___loc) \
      AROS_LC2(X509_EXTENSION *, OCSP_REQUEST_get_ext, \
 AROS_LCA(OCSP_REQUEST *, (___x), A0), \
 AROS_LCA(int, (___loc), D0), \
     struct Library *, AMISSL_BASE_NAME, 1004, Amissl)

#define OCSP_REQUEST_delete_ext(___x, ___loc) \
      AROS_LC2(X509_EXTENSION *, OCSP_REQUEST_delete_ext, \
 AROS_LCA(OCSP_REQUEST *, (___x), A0), \
 AROS_LCA(int, (___loc), D0), \
     struct Library *, AMISSL_BASE_NAME, 1005, Amissl)

#define OCSP_REQUEST_get1_ext_d2i(___x, ___nid, ___crit, ___idx) \
      AROS_LC4(void *, OCSP_REQUEST_get1_ext_d2i, \
 AROS_LCA(OCSP_REQUEST *, (___x), A0), \
 AROS_LCA(int, (___nid), D0), \
 AROS_LCA(int *, (___crit), A1), \
 AROS_LCA(int *, (___idx), A2), \
     struct Library *, AMISSL_BASE_NAME, 1006, Amissl)

#define OCSP_REQUEST_add1_ext_i2d(___x, ___nid, ___value, ___crit, ___flags) \
      AROS_LC5(int, OCSP_REQUEST_add1_ext_i2d, \
 AROS_LCA(OCSP_REQUEST *, (___x), A0), \
 AROS_LCA(int, (___nid), D0), \
 AROS_LCA(void *, (___value), A1), \
 AROS_LCA(int, (___crit), D1), \
 AROS_LCA(unsigned long, (___flags), D2), \
     struct Library *, AMISSL_BASE_NAME, 1007, Amissl)

#define OCSP_REQUEST_add_ext(___x, ___ex, ___loc) \
      AROS_LC3(int, OCSP_REQUEST_add_ext, \
 AROS_LCA(OCSP_REQUEST *, (___x), A0), \
 AROS_LCA(X509_EXTENSION *, (___ex), A1), \
 AROS_LCA(int, (___loc), D0), \
     struct Library *, AMISSL_BASE_NAME, 1008, Amissl)

#define OCSP_ONEREQ_get_ext_count(___x) \
      AROS_LC1(int, OCSP_ONEREQ_get_ext_count, \
 AROS_LCA(OCSP_ONEREQ *, (___x), A0), \
     struct Library *, AMISSL_BASE_NAME, 1009, Amissl)

#define OCSP_ONEREQ_get_ext_by_NID(___x, ___nid, ___lastpos) \
      AROS_LC3(int, OCSP_ONEREQ_get_ext_by_NID, \
 AROS_LCA(OCSP_ONEREQ *, (___x), A0), \
 AROS_LCA(int, (___nid), D0), \
 AROS_LCA(int, (___lastpos), D1), \
     struct Library *, AMISSL_BASE_NAME, 1010, Amissl)

#define OCSP_ONEREQ_get_ext_by_OBJ(___x, ___obj, ___lastpos) \
      AROS_LC3(int, OCSP_ONEREQ_get_ext_by_OBJ, \
 AROS_LCA(OCSP_ONEREQ *, (___x), A0), \
 AROS_LCA(const ASN1_OBJECT *, (___obj), A1), \
 AROS_LCA(int, (___lastpos), D0), \
     struct Library *, AMISSL_BASE_NAME, 1011, Amissl)

#define OCSP_ONEREQ_get_ext_by_critical(___x, ___crit, ___lastpos) \
      AROS_LC3(int, OCSP_ONEREQ_get_ext_by_critical, \
 AROS_LCA(OCSP_ONEREQ *, (___x), A0), \
 AROS_LCA(int, (___crit), D0), \
 AROS_LCA(int, (___lastpos), D1), \
     struct Library *, AMISSL_BASE_NAME, 1012, Amissl)

#define OCSP_ONEREQ_get_ext(___x, ___loc) \
      AROS_LC2(X509_EXTENSION *, OCSP_ONEREQ_get_ext, \
 AROS_LCA(OCSP_ONEREQ *, (___x), A0), \
 AROS_LCA(int, (___loc), D0), \
     struct Library *, AMISSL_BASE_NAME, 1013, Amissl)

#define OCSP_ONEREQ_delete_ext(___x, ___loc) \
      AROS_LC2(X509_EXTENSION *, OCSP_ONEREQ_delete_ext, \
 AROS_LCA(OCSP_ONEREQ *, (___x), A0), \
 AROS_LCA(int, (___loc), D0), \
     struct Library *, AMISSL_BASE_NAME, 1014, Amissl)

#define OCSP_ONEREQ_get1_ext_d2i(___x, ___nid, ___crit, ___idx) \
      AROS_LC4(void *, OCSP_ONEREQ_get1_ext_d2i, \
 AROS_LCA(OCSP_ONEREQ *, (___x), A0), \
 AROS_LCA(int, (___nid), D0), \
 AROS_LCA(int *, (___crit), A1), \
 AROS_LCA(int *, (___idx), A2), \
     struct Library *, AMISSL_BASE_NAME, 1015, Amissl)

#define OCSP_ONEREQ_add1_ext_i2d(___x, ___nid, ___value, ___crit, ___flags) \
      AROS_LC5(int, OCSP_ONEREQ_add1_ext_i2d, \
 AROS_LCA(OCSP_ONEREQ *, (___x), A0), \
 AROS_LCA(int, (___nid), D0), \
 AROS_LCA(void *, (___value), A1), \
 AROS_LCA(int, (___crit), D1), \
 AROS_LCA(unsigned long, (___flags), D2), \
     struct Library *, AMISSL_BASE_NAME, 1016, Amissl)

#define OCSP_ONEREQ_add_ext(___x, ___ex, ___loc) \
      AROS_LC3(int, OCSP_ONEREQ_add_ext, \
 AROS_LCA(OCSP_ONEREQ *, (___x), A0), \
 AROS_LCA(X509_EXTENSION *, (___ex), A1), \
 AROS_LCA(int, (___loc), D0), \
     struct Library *, AMISSL_BASE_NAME, 1017, Amissl)

#define OCSP_BASICRESP_get_ext_count(___x) \
      AROS_LC1(int, OCSP_BASICRESP_get_ext_count, \
 AROS_LCA(OCSP_BASICRESP *, (___x), A0), \
     struct Library *, AMISSL_BASE_NAME, 1018, Amissl)

#define OCSP_BASICRESP_get_ext_by_NID(___x, ___nid, ___lastpos) \
      AROS_LC3(int, OCSP_BASICRESP_get_ext_by_NID, \
 AROS_LCA(OCSP_BASICRESP *, (___x), A0), \
 AROS_LCA(int, (___nid), D0), \
 AROS_LCA(int, (___lastpos), D1), \
     struct Library *, AMISSL_BASE_NAME, 1019, Amissl)

#define OCSP_BASICRESP_get_ext_by_OBJ(___x, ___obj, ___lastpos) \
      AROS_LC3(int, OCSP_BASICRESP_get_ext_by_OBJ, \
 AROS_LCA(OCSP_BASICRESP *, (___x), A0), \
 AROS_LCA(const ASN1_OBJECT *, (___obj), A1), \
 AROS_LCA(int, (___lastpos), D0), \
     struct Library *, AMISSL_BASE_NAME, 1020, Amissl)

#define OCSP_BASICRESP_get_ext_by_critical(___x, ___crit, ___lastpos) \
      AROS_LC3(int, OCSP_BASICRESP_get_ext_by_critical, \
 AROS_LCA(OCSP_BASICRESP *, (___x), A0), \
 AROS_LCA(int, (___crit), D0), \
 AROS_LCA(int, (___lastpos), D1), \
     struct Library *, AMISSL_BASE_NAME, 1021, Amissl)

#define OCSP_BASICRESP_get_ext(___x, ___loc) \
      AROS_LC2(X509_EXTENSION *, OCSP_BASICRESP_get_ext, \
 AROS_LCA(OCSP_BASICRESP *, (___x), A0), \
 AROS_LCA(int, (___loc), D0), \
     struct Library *, AMISSL_BASE_NAME, 1022, Amissl)

#define OCSP_BASICRESP_delete_ext(___x, ___loc) \
      AROS_LC2(X509_EXTENSION *, OCSP_BASICRESP_delete_ext, \
 AROS_LCA(OCSP_BASICRESP *, (___x), A0), \
 AROS_LCA(int, (___loc), D0), \
     struct Library *, AMISSL_BASE_NAME, 1023, Amissl)

#define OCSP_BASICRESP_get1_ext_d2i(___x, ___nid, ___crit, ___idx) \
      AROS_LC4(void *, OCSP_BASICRESP_get1_ext_d2i, \
 AROS_LCA(OCSP_BASICRESP *, (___x), A0), \
 AROS_LCA(int, (___nid), D0), \
 AROS_LCA(int *, (___crit), A1), \
 AROS_LCA(int *, (___idx), A2), \
     struct Library *, AMISSL_BASE_NAME, 1024, Amissl)

#define OCSP_BASICRESP_add1_ext_i2d(___x, ___nid, ___value, ___crit, ___flags) \
      AROS_LC5(int, OCSP_BASICRESP_add1_ext_i2d, \
 AROS_LCA(OCSP_BASICRESP *, (___x), A0), \
 AROS_LCA(int, (___nid), D0), \
 AROS_LCA(void *, (___value), A1), \
 AROS_LCA(int, (___crit), D1), \
 AROS_LCA(unsigned long, (___flags), D2), \
     struct Library *, AMISSL_BASE_NAME, 1025, Amissl)

#define OCSP_BASICRESP_add_ext(___x, ___ex, ___loc) \
      AROS_LC3(int, OCSP_BASICRESP_add_ext, \
 AROS_LCA(OCSP_BASICRESP *, (___x), A0), \
 AROS_LCA(X509_EXTENSION *, (___ex), A1), \
 AROS_LCA(int, (___loc), D0), \
     struct Library *, AMISSL_BASE_NAME, 1026, Amissl)

#define OCSP_SINGLERESP_get_ext_count(___x) \
      AROS_LC1(int, OCSP_SINGLERESP_get_ext_count, \
 AROS_LCA(OCSP_SINGLERESP *, (___x), A0), \
     struct Library *, AMISSL_BASE_NAME, 1027, Amissl)

#define OCSP_SINGLERESP_get_ext_by_NID(___x, ___nid, ___lastpos) \
      AROS_LC3(int, OCSP_SINGLERESP_get_ext_by_NID, \
 AROS_LCA(OCSP_SINGLERESP *, (___x), A0), \
 AROS_LCA(int, (___nid), D0), \
 AROS_LCA(int, (___lastpos), D1), \
     struct Library *, AMISSL_BASE_NAME, 1028, Amissl)

#define OCSP_SINGLERESP_get_ext_by_OBJ(___x, ___obj, ___lastpos) \
      AROS_LC3(int, OCSP_SINGLERESP_get_ext_by_OBJ, \
 AROS_LCA(OCSP_SINGLERESP *, (___x), A0), \
 AROS_LCA(const ASN1_OBJECT *, (___obj), A1), \
 AROS_LCA(int, (___lastpos), D0), \
     struct Library *, AMISSL_BASE_NAME, 1029, Amissl)

#define OCSP_SINGLERESP_get_ext_by_critical(___x, ___crit, ___lastpos) \
      AROS_LC3(int, OCSP_SINGLERESP_get_ext_by_critical, \
 AROS_LCA(OCSP_SINGLERESP *, (___x), A0), \
 AROS_LCA(int, (___crit), D0), \
 AROS_LCA(int, (___lastpos), D1), \
     struct Library *, AMISSL_BASE_NAME, 1030, Amissl)

#define OCSP_SINGLERESP_get_ext(___x, ___loc) \
      AROS_LC2(X509_EXTENSION *, OCSP_SINGLERESP_get_ext, \
 AROS_LCA(OCSP_SINGLERESP *, (___x), A0), \
 AROS_LCA(int, (___loc), D0), \
     struct Library *, AMISSL_BASE_NAME, 1031, Amissl)

#define OCSP_SINGLERESP_delete_ext(___x, ___loc) \
      AROS_LC2(X509_EXTENSION *, OCSP_SINGLERESP_delete_ext, \
 AROS_LCA(OCSP_SINGLERESP *, (___x), A0), \
 AROS_LCA(int, (___loc), D0), \
     struct Library *, AMISSL_BASE_NAME, 1032, Amissl)

#define OCSP_SINGLERESP_get1_ext_d2i(___x, ___nid, ___crit, ___idx) \
      AROS_LC4(void *, OCSP_SINGLERESP_get1_ext_d2i, \
 AROS_LCA(OCSP_SINGLERESP *, (___x), A0), \
 AROS_LCA(int, (___nid), D0), \
 AROS_LCA(int *, (___crit), A1), \
 AROS_LCA(int *, (___idx), A2), \
     struct Library *, AMISSL_BASE_NAME, 1033, Amissl)

#define OCSP_SINGLERESP_add1_ext_i2d(___x, ___nid, ___value, ___crit, ___flags) \
      AROS_LC5(int, OCSP_SINGLERESP_add1_ext_i2d, \
 AROS_LCA(OCSP_SINGLERESP *, (___x), A0), \
 AROS_LCA(int, (___nid), D0), \
 AROS_LCA(void *, (___value), A1), \
 AROS_LCA(int, (___crit), D1), \
 AROS_LCA(unsigned long, (___flags), D2), \
     struct Library *, AMISSL_BASE_NAME, 1034, Amissl)

#define OCSP_SINGLERESP_add_ext(___x, ___ex, ___loc) \
      AROS_LC3(int, OCSP_SINGLERESP_add_ext, \
 AROS_LCA(OCSP_SINGLERESP *, (___x), A0), \
 AROS_LCA(X509_EXTENSION *, (___ex), A1), \
 AROS_LCA(int, (___loc), D0), \
     struct Library *, AMISSL_BASE_NAME, 1035, Amissl)

#define OCSP_SINGLERESP_new() \
      AROS_LC0(OCSP_SINGLERESP *, OCSP_SINGLERESP_new, \
     struct Library *, AMISSL_BASE_NAME, 1036, Amissl)

#define OCSP_SINGLERESP_free(___a) \
      AROS_LC1(void, OCSP_SINGLERESP_free, \
 AROS_LCA(OCSP_SINGLERESP *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 1037, Amissl)

#define d2i_OCSP_SINGLERESP(___a, ___in, ___len) \
      AROS_LC3(OCSP_SINGLERESP *, d2i_OCSP_SINGLERESP, \
 AROS_LCA(OCSP_SINGLERESP **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 1038, Amissl)

#define i2d_OCSP_SINGLERESP(___a, ___out) \
      AROS_LC2(int, i2d_OCSP_SINGLERESP, \
 AROS_LCA(const OCSP_SINGLERESP *, (___a), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 1039, Amissl)

#define OCSP_SINGLERESP_it() \
      AROS_LC0(const ASN1_ITEM *, OCSP_SINGLERESP_it, \
     struct Library *, AMISSL_BASE_NAME, 1040, Amissl)

#define OCSP_CERTSTATUS_new() \
      AROS_LC0(OCSP_CERTSTATUS *, OCSP_CERTSTATUS_new, \
     struct Library *, AMISSL_BASE_NAME, 1041, Amissl)

#define OCSP_CERTSTATUS_free(___a) \
      AROS_LC1(void, OCSP_CERTSTATUS_free, \
 AROS_LCA(OCSP_CERTSTATUS *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 1042, Amissl)

#define d2i_OCSP_CERTSTATUS(___a, ___in, ___len) \
      AROS_LC3(OCSP_CERTSTATUS *, d2i_OCSP_CERTSTATUS, \
 AROS_LCA(OCSP_CERTSTATUS **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 1043, Amissl)

#define i2d_OCSP_CERTSTATUS(___a, ___out) \
      AROS_LC2(int, i2d_OCSP_CERTSTATUS, \
 AROS_LCA(const OCSP_CERTSTATUS *, (___a), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 1044, Amissl)

#define OCSP_CERTSTATUS_it() \
      AROS_LC0(const ASN1_ITEM *, OCSP_CERTSTATUS_it, \
     struct Library *, AMISSL_BASE_NAME, 1045, Amissl)

#define OCSP_REVOKEDINFO_new() \
      AROS_LC0(OCSP_REVOKEDINFO *, OCSP_REVOKEDINFO_new, \
     struct Library *, AMISSL_BASE_NAME, 1046, Amissl)

#define OCSP_REVOKEDINFO_free(___a) \
      AROS_LC1(void, OCSP_REVOKEDINFO_free, \
 AROS_LCA(OCSP_REVOKEDINFO *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 1047, Amissl)

#define d2i_OCSP_REVOKEDINFO(___a, ___in, ___len) \
      AROS_LC3(OCSP_REVOKEDINFO *, d2i_OCSP_REVOKEDINFO, \
 AROS_LCA(OCSP_REVOKEDINFO **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 1048, Amissl)

#define i2d_OCSP_REVOKEDINFO(___a, ___out) \
      AROS_LC2(int, i2d_OCSP_REVOKEDINFO, \
 AROS_LCA(const OCSP_REVOKEDINFO *, (___a), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 1049, Amissl)

#define OCSP_REVOKEDINFO_it() \
      AROS_LC0(const ASN1_ITEM *, OCSP_REVOKEDINFO_it, \
     struct Library *, AMISSL_BASE_NAME, 1050, Amissl)

#define OCSP_BASICRESP_new() \
      AROS_LC0(OCSP_BASICRESP *, OCSP_BASICRESP_new, \
     struct Library *, AMISSL_BASE_NAME, 1051, Amissl)

#define OCSP_BASICRESP_free(___a) \
      AROS_LC1(void, OCSP_BASICRESP_free, \
 AROS_LCA(OCSP_BASICRESP *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 1052, Amissl)

#define d2i_OCSP_BASICRESP(___a, ___in, ___len) \
      AROS_LC3(OCSP_BASICRESP *, d2i_OCSP_BASICRESP, \
 AROS_LCA(OCSP_BASICRESP **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 1053, Amissl)

#define i2d_OCSP_BASICRESP(___a, ___out) \
      AROS_LC2(int, i2d_OCSP_BASICRESP, \
 AROS_LCA(const OCSP_BASICRESP *, (___a), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 1054, Amissl)

#define OCSP_BASICRESP_it() \
      AROS_LC0(const ASN1_ITEM *, OCSP_BASICRESP_it, \
     struct Library *, AMISSL_BASE_NAME, 1055, Amissl)

#define OCSP_RESPDATA_new() \
      AROS_LC0(OCSP_RESPDATA *, OCSP_RESPDATA_new, \
     struct Library *, AMISSL_BASE_NAME, 1056, Amissl)

#define OCSP_RESPDATA_free(___a) \
      AROS_LC1(void, OCSP_RESPDATA_free, \
 AROS_LCA(OCSP_RESPDATA *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 1057, Amissl)

#define d2i_OCSP_RESPDATA(___a, ___in, ___len) \
      AROS_LC3(OCSP_RESPDATA *, d2i_OCSP_RESPDATA, \
 AROS_LCA(OCSP_RESPDATA **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 1058, Amissl)

#define i2d_OCSP_RESPDATA(___a, ___out) \
      AROS_LC2(int, i2d_OCSP_RESPDATA, \
 AROS_LCA(const OCSP_RESPDATA *, (___a), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 1059, Amissl)

#define OCSP_RESPDATA_it() \
      AROS_LC0(const ASN1_ITEM *, OCSP_RESPDATA_it, \
     struct Library *, AMISSL_BASE_NAME, 1060, Amissl)

#define OCSP_RESPID_new() \
      AROS_LC0(OCSP_RESPID *, OCSP_RESPID_new, \
     struct Library *, AMISSL_BASE_NAME, 1061, Amissl)

#define OCSP_RESPID_free(___a) \
      AROS_LC1(void, OCSP_RESPID_free, \
 AROS_LCA(OCSP_RESPID *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 1062, Amissl)

#define d2i_OCSP_RESPID(___a, ___in, ___len) \
      AROS_LC3(OCSP_RESPID *, d2i_OCSP_RESPID, \
 AROS_LCA(OCSP_RESPID **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 1063, Amissl)

#define i2d_OCSP_RESPID(___a, ___out) \
      AROS_LC2(int, i2d_OCSP_RESPID, \
 AROS_LCA(const OCSP_RESPID *, (___a), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 1064, Amissl)

#define OCSP_RESPID_it() \
      AROS_LC0(const ASN1_ITEM *, OCSP_RESPID_it, \
     struct Library *, AMISSL_BASE_NAME, 1065, Amissl)

#define OCSP_RESPONSE_new() \
      AROS_LC0(OCSP_RESPONSE *, OCSP_RESPONSE_new, \
     struct Library *, AMISSL_BASE_NAME, 1066, Amissl)

#define OCSP_RESPONSE_free(___a) \
      AROS_LC1(void, OCSP_RESPONSE_free, \
 AROS_LCA(OCSP_RESPONSE *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 1067, Amissl)

#define d2i_OCSP_RESPONSE(___a, ___in, ___len) \
      AROS_LC3(OCSP_RESPONSE *, d2i_OCSP_RESPONSE, \
 AROS_LCA(OCSP_RESPONSE **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 1068, Amissl)

#define i2d_OCSP_RESPONSE(___a, ___out) \
      AROS_LC2(int, i2d_OCSP_RESPONSE, \
 AROS_LCA(const OCSP_RESPONSE *, (___a), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 1069, Amissl)

#define OCSP_RESPONSE_it() \
      AROS_LC0(const ASN1_ITEM *, OCSP_RESPONSE_it, \
     struct Library *, AMISSL_BASE_NAME, 1070, Amissl)

#define OCSP_RESPBYTES_new() \
      AROS_LC0(OCSP_RESPBYTES *, OCSP_RESPBYTES_new, \
     struct Library *, AMISSL_BASE_NAME, 1071, Amissl)

#define OCSP_RESPBYTES_free(___a) \
      AROS_LC1(void, OCSP_RESPBYTES_free, \
 AROS_LCA(OCSP_RESPBYTES *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 1072, Amissl)

#define d2i_OCSP_RESPBYTES(___a, ___in, ___len) \
      AROS_LC3(OCSP_RESPBYTES *, d2i_OCSP_RESPBYTES, \
 AROS_LCA(OCSP_RESPBYTES **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 1073, Amissl)

#define i2d_OCSP_RESPBYTES(___a, ___out) \
      AROS_LC2(int, i2d_OCSP_RESPBYTES, \
 AROS_LCA(const OCSP_RESPBYTES *, (___a), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 1074, Amissl)

#define OCSP_RESPBYTES_it() \
      AROS_LC0(const ASN1_ITEM *, OCSP_RESPBYTES_it, \
     struct Library *, AMISSL_BASE_NAME, 1075, Amissl)

#define OCSP_ONEREQ_new() \
      AROS_LC0(OCSP_ONEREQ *, OCSP_ONEREQ_new, \
     struct Library *, AMISSL_BASE_NAME, 1076, Amissl)

#define OCSP_ONEREQ_free(___a) \
      AROS_LC1(void, OCSP_ONEREQ_free, \
 AROS_LCA(OCSP_ONEREQ *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 1077, Amissl)

#define d2i_OCSP_ONEREQ(___a, ___in, ___len) \
      AROS_LC3(OCSP_ONEREQ *, d2i_OCSP_ONEREQ, \
 AROS_LCA(OCSP_ONEREQ **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 1078, Amissl)

#define i2d_OCSP_ONEREQ(___a, ___out) \
      AROS_LC2(int, i2d_OCSP_ONEREQ, \
 AROS_LCA(const OCSP_ONEREQ *, (___a), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 1079, Amissl)

#define OCSP_ONEREQ_it() \
      AROS_LC0(const ASN1_ITEM *, OCSP_ONEREQ_it, \
     struct Library *, AMISSL_BASE_NAME, 1080, Amissl)

#define OCSP_CERTID_new() \
      AROS_LC0(OCSP_CERTID *, OCSP_CERTID_new, \
     struct Library *, AMISSL_BASE_NAME, 1081, Amissl)

#define OCSP_CERTID_free(___a) \
      AROS_LC1(void, OCSP_CERTID_free, \
 AROS_LCA(OCSP_CERTID *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 1082, Amissl)

#define d2i_OCSP_CERTID(___a, ___in, ___len) \
      AROS_LC3(OCSP_CERTID *, d2i_OCSP_CERTID, \
 AROS_LCA(OCSP_CERTID **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 1083, Amissl)

#define i2d_OCSP_CERTID(___a, ___out) \
      AROS_LC2(int, i2d_OCSP_CERTID, \
 AROS_LCA(const OCSP_CERTID *, (___a), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 1084, Amissl)

#define OCSP_CERTID_it() \
      AROS_LC0(const ASN1_ITEM *, OCSP_CERTID_it, \
     struct Library *, AMISSL_BASE_NAME, 1085, Amissl)

#define OCSP_REQUEST_new() \
      AROS_LC0(OCSP_REQUEST *, OCSP_REQUEST_new, \
     struct Library *, AMISSL_BASE_NAME, 1086, Amissl)

#define OCSP_REQUEST_free(___a) \
      AROS_LC1(void, OCSP_REQUEST_free, \
 AROS_LCA(OCSP_REQUEST *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 1087, Amissl)

#define d2i_OCSP_REQUEST(___a, ___in, ___len) \
      AROS_LC3(OCSP_REQUEST *, d2i_OCSP_REQUEST, \
 AROS_LCA(OCSP_REQUEST **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 1088, Amissl)

#define i2d_OCSP_REQUEST(___a, ___out) \
      AROS_LC2(int, i2d_OCSP_REQUEST, \
 AROS_LCA(const OCSP_REQUEST *, (___a), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 1089, Amissl)

#define OCSP_REQUEST_it() \
      AROS_LC0(const ASN1_ITEM *, OCSP_REQUEST_it, \
     struct Library *, AMISSL_BASE_NAME, 1090, Amissl)

#define OCSP_SIGNATURE_new() \
      AROS_LC0(OCSP_SIGNATURE *, OCSP_SIGNATURE_new, \
     struct Library *, AMISSL_BASE_NAME, 1091, Amissl)

#define OCSP_SIGNATURE_free(___a) \
      AROS_LC1(void, OCSP_SIGNATURE_free, \
 AROS_LCA(OCSP_SIGNATURE *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 1092, Amissl)

#define d2i_OCSP_SIGNATURE(___a, ___in, ___len) \
      AROS_LC3(OCSP_SIGNATURE *, d2i_OCSP_SIGNATURE, \
 AROS_LCA(OCSP_SIGNATURE **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 1093, Amissl)

#define i2d_OCSP_SIGNATURE(___a, ___out) \
      AROS_LC2(int, i2d_OCSP_SIGNATURE, \
 AROS_LCA(const OCSP_SIGNATURE *, (___a), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 1094, Amissl)

#define OCSP_SIGNATURE_it() \
      AROS_LC0(const ASN1_ITEM *, OCSP_SIGNATURE_it, \
     struct Library *, AMISSL_BASE_NAME, 1095, Amissl)

#define OCSP_REQINFO_new() \
      AROS_LC0(OCSP_REQINFO *, OCSP_REQINFO_new, \
     struct Library *, AMISSL_BASE_NAME, 1096, Amissl)

#define OCSP_REQINFO_free(___a) \
      AROS_LC1(void, OCSP_REQINFO_free, \
 AROS_LCA(OCSP_REQINFO *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 1097, Amissl)

#define d2i_OCSP_REQINFO(___a, ___in, ___len) \
      AROS_LC3(OCSP_REQINFO *, d2i_OCSP_REQINFO, \
 AROS_LCA(OCSP_REQINFO **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 1098, Amissl)

#define i2d_OCSP_REQINFO(___a, ___out) \
      AROS_LC2(int, i2d_OCSP_REQINFO, \
 AROS_LCA(const OCSP_REQINFO *, (___a), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 1099, Amissl)

#define OCSP_REQINFO_it() \
      AROS_LC0(const ASN1_ITEM *, OCSP_REQINFO_it, \
     struct Library *, AMISSL_BASE_NAME, 1100, Amissl)

#define OCSP_CRLID_new() \
      AROS_LC0(OCSP_CRLID *, OCSP_CRLID_new, \
     struct Library *, AMISSL_BASE_NAME, 1101, Amissl)

#define OCSP_CRLID_free(___a) \
      AROS_LC1(void, OCSP_CRLID_free, \
 AROS_LCA(OCSP_CRLID *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 1102, Amissl)

#define d2i_OCSP_CRLID(___a, ___in, ___len) \
      AROS_LC3(OCSP_CRLID *, d2i_OCSP_CRLID, \
 AROS_LCA(OCSP_CRLID **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 1103, Amissl)

#define i2d_OCSP_CRLID(___a, ___out) \
      AROS_LC2(int, i2d_OCSP_CRLID, \
 AROS_LCA(const OCSP_CRLID *, (___a), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 1104, Amissl)

#define OCSP_CRLID_it() \
      AROS_LC0(const ASN1_ITEM *, OCSP_CRLID_it, \
     struct Library *, AMISSL_BASE_NAME, 1105, Amissl)

#define OCSP_SERVICELOC_new() \
      AROS_LC0(OCSP_SERVICELOC *, OCSP_SERVICELOC_new, \
     struct Library *, AMISSL_BASE_NAME, 1106, Amissl)

#define OCSP_SERVICELOC_free(___a) \
      AROS_LC1(void, OCSP_SERVICELOC_free, \
 AROS_LCA(OCSP_SERVICELOC *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 1107, Amissl)

#define d2i_OCSP_SERVICELOC(___a, ___in, ___len) \
      AROS_LC3(OCSP_SERVICELOC *, d2i_OCSP_SERVICELOC, \
 AROS_LCA(OCSP_SERVICELOC **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 1108, Amissl)

#define i2d_OCSP_SERVICELOC(___a, ___out) \
      AROS_LC2(int, i2d_OCSP_SERVICELOC, \
 AROS_LCA(const OCSP_SERVICELOC *, (___a), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 1109, Amissl)

#define OCSP_SERVICELOC_it() \
      AROS_LC0(const ASN1_ITEM *, OCSP_SERVICELOC_it, \
     struct Library *, AMISSL_BASE_NAME, 1110, Amissl)

#define OCSP_response_status_str(___s) \
      AROS_LC1(const char *, OCSP_response_status_str, \
 AROS_LCA(long, (___s), D0), \
     struct Library *, AMISSL_BASE_NAME, 1111, Amissl)

#define OCSP_cert_status_str(___s) \
      AROS_LC1(const char *, OCSP_cert_status_str, \
 AROS_LCA(long, (___s), D0), \
     struct Library *, AMISSL_BASE_NAME, 1112, Amissl)

#define OCSP_crl_reason_str(___s) \
      AROS_LC1(const char *, OCSP_crl_reason_str, \
 AROS_LCA(long, (___s), D0), \
     struct Library *, AMISSL_BASE_NAME, 1113, Amissl)

#define OCSP_REQUEST_print(___bp, ___a, ___flags) \
      AROS_LC3(int, OCSP_REQUEST_print, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(OCSP_REQUEST *, (___a), A1), \
 AROS_LCA(unsigned long, (___flags), D0), \
     struct Library *, AMISSL_BASE_NAME, 1114, Amissl)

#define OCSP_RESPONSE_print(___bp, ___o, ___flags) \
      AROS_LC3(int, OCSP_RESPONSE_print, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(OCSP_RESPONSE *, (___o), A1), \
 AROS_LCA(unsigned long, (___flags), D0), \
     struct Library *, AMISSL_BASE_NAME, 1115, Amissl)

#define OCSP_basic_verify(___bs, ___certs, ___st, ___flags) \
      AROS_LC4(int, OCSP_basic_verify, \
 AROS_LCA(OCSP_BASICRESP *, (___bs), A0), \
 AROS_LCA(STACK_OF(X509) *, (___certs), A1), \
 AROS_LCA(X509_STORE *, (___st), A2), \
 AROS_LCA(unsigned long, (___flags), D0), \
     struct Library *, AMISSL_BASE_NAME, 1116, Amissl)

#define ERR_load_OCSP_strings() \
      AROS_LC0(int, ERR_load_OCSP_strings, \
     struct Library *, AMISSL_BASE_NAME, 1117, Amissl)

#define PEM_get_EVP_CIPHER_INFO(___header, ___cipher) \
      AROS_LC2(int, PEM_get_EVP_CIPHER_INFO, \
 AROS_LCA(char *, (___header), A0), \
 AROS_LCA(EVP_CIPHER_INFO *, (___cipher), A1), \
     struct Library *, AMISSL_BASE_NAME, 1118, Amissl)

#define PEM_do_header(___cipher, ___data, ___len, ___callback, ___u) \
      AROS_LC5(int, PEM_do_header, \
 AROS_LCA(EVP_CIPHER_INFO *, (___cipher), A0), \
 AROS_LCA(unsigned char *, (___data), A1), \
 AROS_LCA(long *, (___len), A2), \
 AROS_LCA(pem_password_cb *, (___callback), A3), \
 AROS_LCA(void *, (___u), D0), \
     struct Library *, AMISSL_BASE_NAME, 1119, Amissl)

#define PEM_read_bio(___bp, ___name, ___header, ___data, ___len) \
      AROS_LC5(int, PEM_read_bio, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(char **, (___name), A1), \
 AROS_LCA(char **, (___header), A2), \
 AROS_LCA(unsigned char **, (___data), A3), \
 AROS_LCA(long *, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 1120, Amissl)

#define PEM_write_bio(___bp, ___name, ___hdr, ___data, ___len) \
      AROS_LC5(int, PEM_write_bio, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(const char *, (___name), A1), \
 AROS_LCA(const char *, (___hdr), A2), \
 AROS_LCA(const unsigned char *, (___data), A3), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 1121, Amissl)

#define PEM_bytes_read_bio(___pdata, ___plen, ___pnm, ___name, ___bp, ___cb, ___u) \
      AROS_LC7(int, PEM_bytes_read_bio, \
 AROS_LCA(unsigned char **, (___pdata), A0), \
 AROS_LCA(long *, (___plen), A1), \
 AROS_LCA(char **, (___pnm), A2), \
 AROS_LCA(const char *, (___name), A3), \
 AROS_LCA(BIO *, (___bp), D0), \
 AROS_LCA(pem_password_cb *, (___cb), D1), \
 AROS_LCA(void *, (___u), D2), \
     struct Library *, AMISSL_BASE_NAME, 1122, Amissl)

#define PEM_ASN1_read_bio(___d2i, ___name, ___bp, ___x, ___cb, ___u) \
      AROS_LC6(void *, PEM_ASN1_read_bio, \
 AROS_LCA(d2i_of_void *, (___d2i), A0), \
 AROS_LCA(const char *, (___name), A1), \
 AROS_LCA(BIO *, (___bp), A2), \
 AROS_LCA(void **, (___x), A3), \
 AROS_LCA(pem_password_cb *, (___cb), D0), \
 AROS_LCA(void *, (___u), D1), \
     struct Library *, AMISSL_BASE_NAME, 1123, Amissl)

#define PEM_ASN1_write_bio(___i2d, ___name, ___bp, ___x, ___enc, ___kstr, ___klen, ___cb, ___u) \
      AROS_LC9(int, PEM_ASN1_write_bio, \
 AROS_LCA(i2d_of_void *, (___i2d), A0), \
 AROS_LCA(const char *, (___name), A1), \
 AROS_LCA(BIO *, (___bp), A2), \
 AROS_LCA(const void *, (___x), A3), \
 AROS_LCA(const EVP_CIPHER *, (___enc), D0), \
 AROS_LCA(const unsigned char *, (___kstr), D1), \
 AROS_LCA(int, (___klen), D2), \
 AROS_LCA(pem_password_cb *, (___cb), D3), \
 AROS_LCA(void *, (___u), D4), \
     struct Library *, AMISSL_BASE_NAME, 1124, Amissl)

#define PEM_X509_INFO_read_bio(___bp, ___sk, ___cb, ___u) \
      AROS_LC4(STACK_OF(X509_INFO) *, PEM_X509_INFO_read_bio, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(STACK_OF(X509_INFO) *, (___sk), A1), \
 AROS_LCA(pem_password_cb *, (___cb), A2), \
 AROS_LCA(void *, (___u), A3), \
     struct Library *, AMISSL_BASE_NAME, 1125, Amissl)

#define PEM_X509_INFO_write_bio(___bp, ___xi, ___enc, ___kstr, ___klen, ___cd, ___u) \
      AROS_LC7(int, PEM_X509_INFO_write_bio, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(const X509_INFO *, (___xi), A1), \
 AROS_LCA(EVP_CIPHER *, (___enc), A2), \
 AROS_LCA(const unsigned char *, (___kstr), A3), \
 AROS_LCA(int, (___klen), D0), \
 AROS_LCA(pem_password_cb *, (___cd), D1), \
 AROS_LCA(void *, (___u), D2), \
     struct Library *, AMISSL_BASE_NAME, 1126, Amissl)

#define PEM_SignInit(___ctx, ___type) \
      AROS_LC2(int, PEM_SignInit, \
 AROS_LCA(EVP_MD_CTX *, (___ctx), A0), \
 AROS_LCA(EVP_MD *, (___type), A1), \
     struct Library *, AMISSL_BASE_NAME, 1130, Amissl)

#define PEM_SignUpdate(___ctx, ___d, ___cnt) \
      AROS_LC3(int, PEM_SignUpdate, \
 AROS_LCA(EVP_MD_CTX *, (___ctx), A0), \
 AROS_LCA(const unsigned char *, (___d), A1), \
 AROS_LCA(unsigned int, (___cnt), D0), \
     struct Library *, AMISSL_BASE_NAME, 1131, Amissl)

#define PEM_SignFinal(___ctx, ___sigret, ___siglen, ___pkey) \
      AROS_LC4(int, PEM_SignFinal, \
 AROS_LCA(EVP_MD_CTX *, (___ctx), A0), \
 AROS_LCA(unsigned char *, (___sigret), A1), \
 AROS_LCA(unsigned int *, (___siglen), A2), \
 AROS_LCA(EVP_PKEY *, (___pkey), A3), \
     struct Library *, AMISSL_BASE_NAME, 1132, Amissl)

#define PEM_def_callback(___buf, ___num, ___w, ___key) \
      AROS_LC4(int, PEM_def_callback, \
 AROS_LCA(char *, (___buf), A0), \
 AROS_LCA(int, (___num), D0), \
 AROS_LCA(int, (___w), D1), \
 AROS_LCA(void *, (___key), A1), \
     struct Library *, AMISSL_BASE_NAME, 1133, Amissl)

#define PEM_proc_type(___buf, ___type) \
      AROS_LC2(void, PEM_proc_type, \
 AROS_LCA(char *, (___buf), A0), \
 AROS_LCA(int, (___type), D0), \
     struct Library *, AMISSL_BASE_NAME, 1134, Amissl)

#define PEM_dek_info(___buf, ___type, ___len, ___str) \
      AROS_LC4(void, PEM_dek_info, \
 AROS_LCA(char *, (___buf), A0), \
 AROS_LCA(const char *, (___type), A1), \
 AROS_LCA(int, (___len), D0), \
 AROS_LCA(const char *, (___str), A2), \
     struct Library *, AMISSL_BASE_NAME, 1135, Amissl)

#define PEM_read_bio_X509(___bp, ___x, ___cb, ___u) \
      AROS_LC4(X509 *, PEM_read_bio_X509, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(X509 **, (___x), A1), \
 AROS_LCA(pem_password_cb *, (___cb), A2), \
 AROS_LCA(void *, (___u), A3), \
     struct Library *, AMISSL_BASE_NAME, 1136, Amissl)

#define PEM_write_bio_X509(___bp, ___x) \
      AROS_LC2(int, PEM_write_bio_X509, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(const X509 *, (___x), A1), \
     struct Library *, AMISSL_BASE_NAME, 1137, Amissl)

#define PEM_read_bio_X509_AUX(___bp, ___x, ___cb, ___u) \
      AROS_LC4(X509 *, PEM_read_bio_X509_AUX, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(X509 **, (___x), A1), \
 AROS_LCA(pem_password_cb *, (___cb), A2), \
 AROS_LCA(void *, (___u), A3), \
     struct Library *, AMISSL_BASE_NAME, 1138, Amissl)

#define PEM_write_bio_X509_AUX(___bp, ___x) \
      AROS_LC2(int, PEM_write_bio_X509_AUX, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(const X509 *, (___x), A1), \
     struct Library *, AMISSL_BASE_NAME, 1139, Amissl)

#define PEM_read_bio_X509_REQ(___bp, ___x, ___cb, ___u) \
      AROS_LC4(X509_REQ *, PEM_read_bio_X509_REQ, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(X509_REQ **, (___x), A1), \
 AROS_LCA(pem_password_cb *, (___cb), A2), \
 AROS_LCA(void *, (___u), A3), \
     struct Library *, AMISSL_BASE_NAME, 1140, Amissl)

#define PEM_write_bio_X509_REQ(___bp, ___x) \
      AROS_LC2(int, PEM_write_bio_X509_REQ, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(const X509_REQ *, (___x), A1), \
     struct Library *, AMISSL_BASE_NAME, 1141, Amissl)

#define PEM_write_bio_X509_REQ_NEW(___bp, ___x) \
      AROS_LC2(int, PEM_write_bio_X509_REQ_NEW, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(const X509_REQ *, (___x), A1), \
     struct Library *, AMISSL_BASE_NAME, 1142, Amissl)

#define PEM_read_bio_X509_CRL(___bp, ___x, ___cb, ___u) \
      AROS_LC4(X509_CRL *, PEM_read_bio_X509_CRL, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(X509_CRL **, (___x), A1), \
 AROS_LCA(pem_password_cb *, (___cb), A2), \
 AROS_LCA(void *, (___u), A3), \
     struct Library *, AMISSL_BASE_NAME, 1143, Amissl)

#define PEM_write_bio_X509_CRL(___bp, ___x) \
      AROS_LC2(int, PEM_write_bio_X509_CRL, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(const X509_CRL *, (___x), A1), \
     struct Library *, AMISSL_BASE_NAME, 1144, Amissl)

#define PEM_read_bio_PKCS7(___bp, ___x, ___cb, ___u) \
      AROS_LC4(PKCS7 *, PEM_read_bio_PKCS7, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(PKCS7 **, (___x), A1), \
 AROS_LCA(pem_password_cb *, (___cb), A2), \
 AROS_LCA(void *, (___u), A3), \
     struct Library *, AMISSL_BASE_NAME, 1145, Amissl)

#define PEM_write_bio_PKCS7(___bp, ___x) \
      AROS_LC2(int, PEM_write_bio_PKCS7, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(const PKCS7 *, (___x), A1), \
     struct Library *, AMISSL_BASE_NAME, 1146, Amissl)

#define PEM_read_bio_NETSCAPE_CERT_SEQUENCE(___bp, ___x, ___cb, ___u) \
      AROS_LC4(NETSCAPE_CERT_SEQUENCE *, PEM_read_bio_NETSCAPE_CERT_SEQUENCE, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(NETSCAPE_CERT_SEQUENCE **, (___x), A1), \
 AROS_LCA(pem_password_cb *, (___cb), A2), \
 AROS_LCA(void *, (___u), A3), \
     struct Library *, AMISSL_BASE_NAME, 1147, Amissl)

#define PEM_write_bio_NETSCAPE_CERT_SEQUENCE(___bp, ___x) \
      AROS_LC2(int, PEM_write_bio_NETSCAPE_CERT_SEQUENCE, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(const NETSCAPE_CERT_SEQUENCE *, (___x), A1), \
     struct Library *, AMISSL_BASE_NAME, 1148, Amissl)

#define PEM_read_bio_PKCS8(___bp, ___x, ___cb, ___u) \
      AROS_LC4(X509_SIG *, PEM_read_bio_PKCS8, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(X509_SIG **, (___x), A1), \
 AROS_LCA(pem_password_cb *, (___cb), A2), \
 AROS_LCA(void *, (___u), A3), \
     struct Library *, AMISSL_BASE_NAME, 1149, Amissl)

#define PEM_write_bio_PKCS8(___bp, ___x) \
      AROS_LC2(int, PEM_write_bio_PKCS8, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(const X509_SIG *, (___x), A1), \
     struct Library *, AMISSL_BASE_NAME, 1150, Amissl)

#define PEM_read_bio_PKCS8_PRIV_KEY_INFO(___bp, ___x, ___cb, ___u) \
      AROS_LC4(PKCS8_PRIV_KEY_INFO *, PEM_read_bio_PKCS8_PRIV_KEY_INFO, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(PKCS8_PRIV_KEY_INFO **, (___x), A1), \
 AROS_LCA(pem_password_cb *, (___cb), A2), \
 AROS_LCA(void *, (___u), A3), \
     struct Library *, AMISSL_BASE_NAME, 1151, Amissl)

#define PEM_write_bio_PKCS8_PRIV_KEY_INFO(___bp, ___x) \
      AROS_LC2(int, PEM_write_bio_PKCS8_PRIV_KEY_INFO, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(const PKCS8_PRIV_KEY_INFO *, (___x), A1), \
     struct Library *, AMISSL_BASE_NAME, 1152, Amissl)

#define PEM_read_bio_RSAPrivateKey(___bp, ___x, ___cb, ___u) \
      AROS_LC4(RSA *, PEM_read_bio_RSAPrivateKey, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(RSA **, (___x), A1), \
 AROS_LCA(pem_password_cb *, (___cb), A2), \
 AROS_LCA(void *, (___u), A3), \
     struct Library *, AMISSL_BASE_NAME, 1153, Amissl)

#define PEM_write_bio_RSAPrivateKey(___bp, ___x, ___enc, ___kstr, ___klen, ___cb, ___u) \
      AROS_LC7(int, PEM_write_bio_RSAPrivateKey, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(const RSA *, (___x), A1), \
 AROS_LCA(const EVP_CIPHER *, (___enc), A2), \
 AROS_LCA(const unsigned char *, (___kstr), A3), \
 AROS_LCA(int, (___klen), D0), \
 AROS_LCA(pem_password_cb *, (___cb), D1), \
 AROS_LCA(void *, (___u), D2), \
     struct Library *, AMISSL_BASE_NAME, 1154, Amissl)

#define PEM_read_bio_RSAPublicKey(___bp, ___x, ___cb, ___u) \
      AROS_LC4(RSA *, PEM_read_bio_RSAPublicKey, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(RSA **, (___x), A1), \
 AROS_LCA(pem_password_cb *, (___cb), A2), \
 AROS_LCA(void *, (___u), A3), \
     struct Library *, AMISSL_BASE_NAME, 1155, Amissl)

#define PEM_write_bio_RSAPublicKey(___bp, ___x) \
      AROS_LC2(int, PEM_write_bio_RSAPublicKey, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(const RSA *, (___x), A1), \
     struct Library *, AMISSL_BASE_NAME, 1156, Amissl)

#define PEM_read_bio_RSA_PUBKEY(___bp, ___x, ___cb, ___u) \
      AROS_LC4(RSA *, PEM_read_bio_RSA_PUBKEY, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(RSA **, (___x), A1), \
 AROS_LCA(pem_password_cb *, (___cb), A2), \
 AROS_LCA(void *, (___u), A3), \
     struct Library *, AMISSL_BASE_NAME, 1157, Amissl)

#define PEM_write_bio_RSA_PUBKEY(___bp, ___x) \
      AROS_LC2(int, PEM_write_bio_RSA_PUBKEY, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(const RSA *, (___x), A1), \
     struct Library *, AMISSL_BASE_NAME, 1158, Amissl)

#define PEM_read_bio_DSAPrivateKey(___bp, ___x, ___cb, ___u) \
      AROS_LC4(DSA *, PEM_read_bio_DSAPrivateKey, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(DSA **, (___x), A1), \
 AROS_LCA(pem_password_cb *, (___cb), A2), \
 AROS_LCA(void *, (___u), A3), \
     struct Library *, AMISSL_BASE_NAME, 1159, Amissl)

#define PEM_write_bio_DSAPrivateKey(___bp, ___x, ___enc, ___kstr, ___klen, ___cb, ___u) \
      AROS_LC7(int, PEM_write_bio_DSAPrivateKey, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(const DSA *, (___x), A1), \
 AROS_LCA(const EVP_CIPHER *, (___enc), A2), \
 AROS_LCA(const unsigned char *, (___kstr), A3), \
 AROS_LCA(int, (___klen), D0), \
 AROS_LCA(pem_password_cb *, (___cb), D1), \
 AROS_LCA(void *, (___u), D2), \
     struct Library *, AMISSL_BASE_NAME, 1160, Amissl)

#define PEM_read_bio_DSA_PUBKEY(___bp, ___x, ___cb, ___u) \
      AROS_LC4(DSA *, PEM_read_bio_DSA_PUBKEY, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(DSA **, (___x), A1), \
 AROS_LCA(pem_password_cb *, (___cb), A2), \
 AROS_LCA(void *, (___u), A3), \
     struct Library *, AMISSL_BASE_NAME, 1161, Amissl)

#define PEM_write_bio_DSA_PUBKEY(___bp, ___x) \
      AROS_LC2(int, PEM_write_bio_DSA_PUBKEY, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(const DSA *, (___x), A1), \
     struct Library *, AMISSL_BASE_NAME, 1162, Amissl)

#define PEM_read_bio_DSAparams(___bp, ___x, ___cb, ___u) \
      AROS_LC4(DSA *, PEM_read_bio_DSAparams, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(DSA **, (___x), A1), \
 AROS_LCA(pem_password_cb *, (___cb), A2), \
 AROS_LCA(void *, (___u), A3), \
     struct Library *, AMISSL_BASE_NAME, 1163, Amissl)

#define PEM_write_bio_DSAparams(___bp, ___x) \
      AROS_LC2(int, PEM_write_bio_DSAparams, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(const DSA *, (___x), A1), \
     struct Library *, AMISSL_BASE_NAME, 1164, Amissl)

#define PEM_read_bio_DHparams(___bp, ___x, ___cb, ___u) \
      AROS_LC4(DH *, PEM_read_bio_DHparams, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(DH **, (___x), A1), \
 AROS_LCA(pem_password_cb *, (___cb), A2), \
 AROS_LCA(void *, (___u), A3), \
     struct Library *, AMISSL_BASE_NAME, 1165, Amissl)

#define PEM_write_bio_DHparams(___bp, ___x) \
      AROS_LC2(int, PEM_write_bio_DHparams, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(const DH *, (___x), A1), \
     struct Library *, AMISSL_BASE_NAME, 1166, Amissl)

#define PEM_read_bio_PrivateKey(___bp, ___x, ___cb, ___u) \
      AROS_LC4(EVP_PKEY *, PEM_read_bio_PrivateKey, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(EVP_PKEY **, (___x), A1), \
 AROS_LCA(pem_password_cb *, (___cb), A2), \
 AROS_LCA(void *, (___u), A3), \
     struct Library *, AMISSL_BASE_NAME, 1167, Amissl)

#define PEM_write_bio_PrivateKey(___bp, ___x, ___enc, ___kstr, ___klen, ___cb, ___u) \
      AROS_LC7(int, PEM_write_bio_PrivateKey, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(const EVP_PKEY *, (___x), A1), \
 AROS_LCA(const EVP_CIPHER *, (___enc), A2), \
 AROS_LCA(const unsigned char *, (___kstr), A3), \
 AROS_LCA(int, (___klen), D0), \
 AROS_LCA(pem_password_cb *, (___cb), D1), \
 AROS_LCA(void *, (___u), D2), \
     struct Library *, AMISSL_BASE_NAME, 1168, Amissl)

#define PEM_read_bio_PUBKEY(___bp, ___x, ___cb, ___u) \
      AROS_LC4(EVP_PKEY *, PEM_read_bio_PUBKEY, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(EVP_PKEY **, (___x), A1), \
 AROS_LCA(pem_password_cb *, (___cb), A2), \
 AROS_LCA(void *, (___u), A3), \
     struct Library *, AMISSL_BASE_NAME, 1169, Amissl)

#define PEM_write_bio_PUBKEY(___bp, ___x) \
      AROS_LC2(int, PEM_write_bio_PUBKEY, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(const EVP_PKEY *, (___x), A1), \
     struct Library *, AMISSL_BASE_NAME, 1170, Amissl)

#define PEM_write_bio_PKCS8PrivateKey_nid(___bp, ___x, ___nid, ___kstr, ___klen, ___cb, ___u) \
      AROS_LC7(int, PEM_write_bio_PKCS8PrivateKey_nid, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(const EVP_PKEY *, (___x), A1), \
 AROS_LCA(int, (___nid), D0), \
 AROS_LCA(const char *, (___kstr), A2), \
 AROS_LCA(int, (___klen), D1), \
 AROS_LCA(pem_password_cb *, (___cb), A3), \
 AROS_LCA(void *, (___u), D2), \
     struct Library *, AMISSL_BASE_NAME, 1171, Amissl)

#define PEM_write_bio_PKCS8PrivateKey(___bp, ___x, ___enc, ___kstr, ___klen, ___cb, ___u) \
      AROS_LC7(int, PEM_write_bio_PKCS8PrivateKey, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(const EVP_PKEY *, (___x), A1), \
 AROS_LCA(const EVP_CIPHER *, (___enc), A2), \
 AROS_LCA(const char *, (___kstr), A3), \
 AROS_LCA(int, (___klen), D0), \
 AROS_LCA(pem_password_cb *, (___cb), D1), \
 AROS_LCA(void *, (___u), D2), \
     struct Library *, AMISSL_BASE_NAME, 1172, Amissl)

#define i2d_PKCS8PrivateKey_bio(___bp, ___x, ___enc, ___kstr, ___klen, ___cb, ___u) \
      AROS_LC7(int, i2d_PKCS8PrivateKey_bio, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(const EVP_PKEY *, (___x), A1), \
 AROS_LCA(const EVP_CIPHER *, (___enc), A2), \
 AROS_LCA(const char *, (___kstr), A3), \
 AROS_LCA(int, (___klen), D0), \
 AROS_LCA(pem_password_cb *, (___cb), D1), \
 AROS_LCA(void *, (___u), D2), \
     struct Library *, AMISSL_BASE_NAME, 1173, Amissl)

#define i2d_PKCS8PrivateKey_nid_bio(___bp, ___x, ___nid, ___kstr, ___klen, ___cb, ___u) \
      AROS_LC7(int, i2d_PKCS8PrivateKey_nid_bio, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(const EVP_PKEY *, (___x), A1), \
 AROS_LCA(int, (___nid), D0), \
 AROS_LCA(const char *, (___kstr), A2), \
 AROS_LCA(int, (___klen), D1), \
 AROS_LCA(pem_password_cb *, (___cb), A3), \
 AROS_LCA(void *, (___u), D2), \
     struct Library *, AMISSL_BASE_NAME, 1174, Amissl)

#define d2i_PKCS8PrivateKey_bio(___bp, ___x, ___cb, ___u) \
      AROS_LC4(EVP_PKEY *, d2i_PKCS8PrivateKey_bio, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(EVP_PKEY **, (___x), A1), \
 AROS_LCA(pem_password_cb *, (___cb), A2), \
 AROS_LCA(void *, (___u), A3), \
     struct Library *, AMISSL_BASE_NAME, 1175, Amissl)

#define ERR_load_PEM_strings() \
      AROS_LC0(int, ERR_load_PEM_strings, \
     struct Library *, AMISSL_BASE_NAME, 1176, Amissl)

#define OBSOLETE_PKCS12_x5092certbag(___x509) \
      AROS_LC1(PKCS12_SAFEBAG *, OBSOLETE_PKCS12_x5092certbag, \
 AROS_LCA(X509 *, (___x509), A0), \
     struct Library *, AMISSL_BASE_NAME, 1177, Amissl)

#define OBSOLETE_PKCS12_x509crl2certbag(___crl) \
      AROS_LC1(PKCS12_SAFEBAG *, OBSOLETE_PKCS12_x509crl2certbag, \
 AROS_LCA(X509_CRL *, (___crl), A0), \
     struct Library *, AMISSL_BASE_NAME, 1178, Amissl)

#define OBSOLETE_PKCS12_certbag2x509(___bag) \
      AROS_LC1(X509 *, OBSOLETE_PKCS12_certbag2x509, \
 AROS_LCA(PKCS12_SAFEBAG *, (___bag), A0), \
     struct Library *, AMISSL_BASE_NAME, 1179, Amissl)

#define PKCS12_item_pack_safebag(___obj, ___it, ___nid1, ___nid2) \
      AROS_LC4(PKCS12_SAFEBAG *, PKCS12_item_pack_safebag, \
 AROS_LCA(void *, (___obj), A0), \
 AROS_LCA(const ASN1_ITEM *, (___it), A1), \
 AROS_LCA(int, (___nid1), D0), \
 AROS_LCA(int, (___nid2), D1), \
     struct Library *, AMISSL_BASE_NAME, 1181, Amissl)

#define OBSOLETE_PKCS12_MAKE_KEYBAG(___p8) \
      AROS_LC1(PKCS12_SAFEBAG *, OBSOLETE_PKCS12_MAKE_KEYBAG, \
 AROS_LCA(PKCS8_PRIV_KEY_INFO *, (___p8), A0), \
     struct Library *, AMISSL_BASE_NAME, 1182, Amissl)

#define PKCS8_decrypt(___p8, ___pass, ___passlen) \
      AROS_LC3(PKCS8_PRIV_KEY_INFO *, PKCS8_decrypt, \
 AROS_LCA(const X509_SIG *, (___p8), A0), \
 AROS_LCA(const char *, (___pass), A1), \
 AROS_LCA(int, (___passlen), D0), \
     struct Library *, AMISSL_BASE_NAME, 1183, Amissl)

#define PKCS12_decrypt_skey(___bag, ___pass, ___passlen) \
      AROS_LC3(PKCS8_PRIV_KEY_INFO *, PKCS12_decrypt_skey, \
 AROS_LCA(const PKCS12_SAFEBAG *, (___bag), A0), \
 AROS_LCA(const char *, (___pass), A1), \
 AROS_LCA(int, (___passlen), D0), \
     struct Library *, AMISSL_BASE_NAME, 1184, Amissl)

#define PKCS8_encrypt(___pbe_nid, ___cipher, ___pass, ___passlen, ___salt, ___saltlen, ___iter, ___p8) \
      AROS_LC8(X509_SIG *, PKCS8_encrypt, \
 AROS_LCA(int, (___pbe_nid), D0), \
 AROS_LCA(const EVP_CIPHER *, (___cipher), A0), \
 AROS_LCA(const char *, (___pass), A1), \
 AROS_LCA(int, (___passlen), D1), \
 AROS_LCA(unsigned char *, (___salt), A2), \
 AROS_LCA(int, (___saltlen), D2), \
 AROS_LCA(int, (___iter), D3), \
 AROS_LCA(PKCS8_PRIV_KEY_INFO *, (___p8), A3), \
     struct Library *, AMISSL_BASE_NAME, 1185, Amissl)

#define OBSOLETE_PKCS12_MAKE_SHKEYBAG(___pbe_nid, ___pass, ___passlen, ___salt, ___saltlen, ___iter, ___p8) \
      AROS_LC7(PKCS12_SAFEBAG *, OBSOLETE_PKCS12_MAKE_SHKEYBAG, \
 AROS_LCA(int, (___pbe_nid), D0), \
 AROS_LCA(const char *, (___pass), A0), \
 AROS_LCA(int, (___passlen), D1), \
 AROS_LCA(unsigned char *, (___salt), A1), \
 AROS_LCA(int, (___saltlen), D2), \
 AROS_LCA(int, (___iter), D3), \
 AROS_LCA(PKCS8_PRIV_KEY_INFO *, (___p8), A2), \
     struct Library *, AMISSL_BASE_NAME, 1186, Amissl)

#define PKCS12_pack_p7data(___sk) \
      AROS_LC1(PKCS7 *, PKCS12_pack_p7data, \
 AROS_LCA(STACK_OF(PKCS12_SAFEBAG) *, (___sk), A0), \
     struct Library *, AMISSL_BASE_NAME, 1187, Amissl)

#define PKCS12_unpack_p7data(___p7) \
      AROS_LC1(STACK_OF(PKCS12_SAFEBAG) *, PKCS12_unpack_p7data, \
 AROS_LCA(PKCS7 *, (___p7), A0), \
     struct Library *, AMISSL_BASE_NAME, 1188, Amissl)

#define PKCS12_pack_p7encdata(___pbe_nid, ___pass, ___passlen, ___salt, ___saltlen, ___iter, ___bags) \
      AROS_LC7(PKCS7 *, PKCS12_pack_p7encdata, \
 AROS_LCA(int, (___pbe_nid), D0), \
 AROS_LCA(const char *, (___pass), A0), \
 AROS_LCA(int, (___passlen), D1), \
 AROS_LCA(unsigned char *, (___salt), A1), \
 AROS_LCA(int, (___saltlen), D2), \
 AROS_LCA(int, (___iter), D3), \
 AROS_LCA(STACK_OF(PKCS12_SAFEBAG) *, (___bags), A2), \
     struct Library *, AMISSL_BASE_NAME, 1189, Amissl)

#define PKCS12_unpack_p7encdata(___p7, ___pass, ___passlen) \
      AROS_LC3(STACK_OF(PKCS12_SAFEBAG) *, PKCS12_unpack_p7encdata, \
 AROS_LCA(PKCS7 *, (___p7), A0), \
 AROS_LCA(const char *, (___pass), A1), \
 AROS_LCA(int, (___passlen), D0), \
     struct Library *, AMISSL_BASE_NAME, 1190, Amissl)

#define PKCS12_pack_authsafes(___p12, ___safes) \
      AROS_LC2(int, PKCS12_pack_authsafes, \
 AROS_LCA(PKCS12 *, (___p12), A0), \
 AROS_LCA(STACK_OF(PKCS7) *, (___safes), A1), \
     struct Library *, AMISSL_BASE_NAME, 1191, Amissl)

#define PKCS12_unpack_authsafes(___p12) \
      AROS_LC1(STACK_OF(PKCS7) *, PKCS12_unpack_authsafes, \
 AROS_LCA(const PKCS12 *, (___p12), A0), \
     struct Library *, AMISSL_BASE_NAME, 1192, Amissl)

#define PKCS12_add_localkeyid(___bag, ___name, ___namelen) \
      AROS_LC3(int, PKCS12_add_localkeyid, \
 AROS_LCA(PKCS12_SAFEBAG *, (___bag), A0), \
 AROS_LCA(unsigned char *, (___name), A1), \
 AROS_LCA(int, (___namelen), D0), \
     struct Library *, AMISSL_BASE_NAME, 1193, Amissl)

#define PKCS12_add_friendlyname_asc(___bag, ___name, ___namelen) \
      AROS_LC3(int, PKCS12_add_friendlyname_asc, \
 AROS_LCA(PKCS12_SAFEBAG *, (___bag), A0), \
 AROS_LCA(const char *, (___name), A1), \
 AROS_LCA(int, (___namelen), D0), \
     struct Library *, AMISSL_BASE_NAME, 1194, Amissl)

#define PKCS12_add_CSPName_asc(___bag, ___name, ___namelen) \
      AROS_LC3(int, PKCS12_add_CSPName_asc, \
 AROS_LCA(PKCS12_SAFEBAG *, (___bag), A0), \
 AROS_LCA(const char *, (___name), A1), \
 AROS_LCA(int, (___namelen), D0), \
     struct Library *, AMISSL_BASE_NAME, 1195, Amissl)

#define PKCS12_add_friendlyname_uni(___bag, ___name, ___namelen) \
      AROS_LC3(int, PKCS12_add_friendlyname_uni, \
 AROS_LCA(PKCS12_SAFEBAG *, (___bag), A0), \
 AROS_LCA(const unsigned char *, (___name), A1), \
 AROS_LCA(int, (___namelen), D0), \
     struct Library *, AMISSL_BASE_NAME, 1196, Amissl)

#define PKCS8_add_keyusage(___p8, ___usage) \
      AROS_LC2(int, PKCS8_add_keyusage, \
 AROS_LCA(PKCS8_PRIV_KEY_INFO *, (___p8), A0), \
 AROS_LCA(int, (___usage), D0), \
     struct Library *, AMISSL_BASE_NAME, 1197, Amissl)

#define PKCS12_get_attr_gen(___attrs, ___attr_nid) \
      AROS_LC2(ASN1_TYPE *, PKCS12_get_attr_gen, \
 AROS_LCA(const STACK_OF(X509_ATTRIBUTE) *, (___attrs), A0), \
 AROS_LCA(int, (___attr_nid), D0), \
     struct Library *, AMISSL_BASE_NAME, 1198, Amissl)

#define PKCS12_get_friendlyname(___bag) \
      AROS_LC1(char *, PKCS12_get_friendlyname, \
 AROS_LCA(PKCS12_SAFEBAG *, (___bag), A0), \
     struct Library *, AMISSL_BASE_NAME, 1199, Amissl)

#define PKCS12_pbe_crypt(___algor, ___pass, ___passlen, ___in, ___inlen, ___data, ___datalen, ___en_de) \
      AROS_LC8(unsigned char *, PKCS12_pbe_crypt, \
 AROS_LCA(const X509_ALGOR *, (___algor), A0), \
 AROS_LCA(const char *, (___pass), A1), \
 AROS_LCA(int, (___passlen), D0), \
 AROS_LCA(const unsigned char *, (___in), A2), \
 AROS_LCA(int, (___inlen), D1), \
 AROS_LCA(unsigned char **, (___data), A3), \
 AROS_LCA(int *, (___datalen), D2), \
 AROS_LCA(int, (___en_de), D3), \
     struct Library *, AMISSL_BASE_NAME, 1200, Amissl)

#define PKCS12_item_decrypt_d2i(___algor, ___it, ___pass, ___passlen, ___oct, ___zbuf) \
      AROS_LC6(void *, PKCS12_item_decrypt_d2i, \
 AROS_LCA(const X509_ALGOR *, (___algor), A0), \
 AROS_LCA(const ASN1_ITEM *, (___it), A1), \
 AROS_LCA(const char *, (___pass), A2), \
 AROS_LCA(int, (___passlen), D0), \
 AROS_LCA(const ASN1_OCTET_STRING *, (___oct), A3), \
 AROS_LCA(int, (___zbuf), D1), \
     struct Library *, AMISSL_BASE_NAME, 1201, Amissl)

#define PKCS12_item_i2d_encrypt(___algor, ___it, ___pass, ___passlen, ___obj, ___zbuf) \
      AROS_LC6(ASN1_OCTET_STRING *, PKCS12_item_i2d_encrypt, \
 AROS_LCA(X509_ALGOR *, (___algor), A0), \
 AROS_LCA(const ASN1_ITEM *, (___it), A1), \
 AROS_LCA(const char *, (___pass), A2), \
 AROS_LCA(int, (___passlen), D0), \
 AROS_LCA(void *, (___obj), A3), \
 AROS_LCA(int, (___zbuf), D1), \
     struct Library *, AMISSL_BASE_NAME, 1202, Amissl)

#define PKCS12_init(___mode) \
      AROS_LC1(PKCS12 *, PKCS12_init, \
 AROS_LCA(int, (___mode), D0), \
     struct Library *, AMISSL_BASE_NAME, 1203, Amissl)

#define PKCS12_key_gen_asc(___pass, ___passlen, ___salt, ___saltlen, ___id, ___iter, ___n, ___out, ___md_type) \
      AROS_LC9(int, PKCS12_key_gen_asc, \
 AROS_LCA(const char *, (___pass), A0), \
 AROS_LCA(int, (___passlen), D0), \
 AROS_LCA(unsigned char *, (___salt), A1), \
 AROS_LCA(int, (___saltlen), D1), \
 AROS_LCA(int, (___id), D2), \
 AROS_LCA(int, (___iter), D3), \
 AROS_LCA(int, (___n), D4), \
 AROS_LCA(unsigned char *, (___out), A2), \
 AROS_LCA(const EVP_MD *, (___md_type), A3), \
     struct Library *, AMISSL_BASE_NAME, 1204, Amissl)

#define PKCS12_key_gen_uni(___pass, ___passlen, ___salt, ___saltlen, ___id, ___iter, ___n, ___out, ___md_type) \
      AROS_LC9(int, PKCS12_key_gen_uni, \
 AROS_LCA(unsigned char *, (___pass), A0), \
 AROS_LCA(int, (___passlen), D0), \
 AROS_LCA(unsigned char *, (___salt), A1), \
 AROS_LCA(int, (___saltlen), D1), \
 AROS_LCA(int, (___id), D2), \
 AROS_LCA(int, (___iter), D3), \
 AROS_LCA(int, (___n), D4), \
 AROS_LCA(unsigned char *, (___out), A2), \
 AROS_LCA(const EVP_MD *, (___md_type), A3), \
     struct Library *, AMISSL_BASE_NAME, 1205, Amissl)

#define PKCS12_PBE_keyivgen(___ctx, ___pass, ___passlen, ___param, ___cipher, ___md_type, ___en_de) \
      AROS_LC7(int, PKCS12_PBE_keyivgen, \
 AROS_LCA(EVP_CIPHER_CTX *, (___ctx), A0), \
 AROS_LCA(const char *, (___pass), A1), \
 AROS_LCA(int, (___passlen), D0), \
 AROS_LCA(ASN1_TYPE *, (___param), A2), \
 AROS_LCA(const EVP_CIPHER *, (___cipher), A3), \
 AROS_LCA(const EVP_MD *, (___md_type), D1), \
 AROS_LCA(int, (___en_de), D2), \
     struct Library *, AMISSL_BASE_NAME, 1206, Amissl)

#define PKCS12_gen_mac(___p12, ___pass, ___passlen, ___mac, ___maclen) \
      AROS_LC5(int, PKCS12_gen_mac, \
 AROS_LCA(PKCS12 *, (___p12), A0), \
 AROS_LCA(const char *, (___pass), A1), \
 AROS_LCA(int, (___passlen), D0), \
 AROS_LCA(unsigned char *, (___mac), A2), \
 AROS_LCA(unsigned int *, (___maclen), A3), \
     struct Library *, AMISSL_BASE_NAME, 1207, Amissl)

#define PKCS12_verify_mac(___p12, ___pass, ___passlen) \
      AROS_LC3(int, PKCS12_verify_mac, \
 AROS_LCA(PKCS12 *, (___p12), A0), \
 AROS_LCA(const char *, (___pass), A1), \
 AROS_LCA(int, (___passlen), D0), \
     struct Library *, AMISSL_BASE_NAME, 1208, Amissl)

#define PKCS12_set_mac(___p12, ___pass, ___passlen, ___salt, ___saltlen, ___iter, ___md_type) \
      AROS_LC7(int, PKCS12_set_mac, \
 AROS_LCA(PKCS12 *, (___p12), A0), \
 AROS_LCA(const char *, (___pass), A1), \
 AROS_LCA(int, (___passlen), D0), \
 AROS_LCA(unsigned char *, (___salt), A2), \
 AROS_LCA(int, (___saltlen), D1), \
 AROS_LCA(int, (___iter), D2), \
 AROS_LCA(const EVP_MD *, (___md_type), A3), \
     struct Library *, AMISSL_BASE_NAME, 1209, Amissl)

#define PKCS12_setup_mac(___p12, ___iter, ___salt, ___saltlen, ___md_type) \
      AROS_LC5(int, PKCS12_setup_mac, \
 AROS_LCA(PKCS12 *, (___p12), A0), \
 AROS_LCA(int, (___iter), D0), \
 AROS_LCA(unsigned char *, (___salt), A1), \
 AROS_LCA(int, (___saltlen), D1), \
 AROS_LCA(const EVP_MD *, (___md_type), A2), \
     struct Library *, AMISSL_BASE_NAME, 1210, Amissl)

#define OPENSSL_asc2uni(___asc, ___asclen, ___uni, ___unilen) \
      AROS_LC4(unsigned char *, OPENSSL_asc2uni, \
 AROS_LCA(const char *, (___asc), A0), \
 AROS_LCA(int, (___asclen), D0), \
 AROS_LCA(unsigned char **, (___uni), A1), \
 AROS_LCA(int *, (___unilen), A2), \
     struct Library *, AMISSL_BASE_NAME, 1211, Amissl)

#define OPENSSL_uni2asc(___uni, ___unilen) \
      AROS_LC2(char *, OPENSSL_uni2asc, \
 AROS_LCA(const unsigned char *, (___uni), A0), \
 AROS_LCA(int, (___unilen), D0), \
     struct Library *, AMISSL_BASE_NAME, 1212, Amissl)

#define PKCS12_new() \
      AROS_LC0(PKCS12 *, PKCS12_new, \
     struct Library *, AMISSL_BASE_NAME, 1213, Amissl)

#define PKCS12_free(___a) \
      AROS_LC1(void, PKCS12_free, \
 AROS_LCA(PKCS12 *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 1214, Amissl)

#define d2i_PKCS12(___a, ___in, ___len) \
      AROS_LC3(PKCS12 *, d2i_PKCS12, \
 AROS_LCA(PKCS12 **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 1215, Amissl)

#define i2d_PKCS12(___a, ___out) \
      AROS_LC2(int, i2d_PKCS12, \
 AROS_LCA(const PKCS12 *, (___a), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 1216, Amissl)

#define PKCS12_it() \
      AROS_LC0(const ASN1_ITEM *, PKCS12_it, \
     struct Library *, AMISSL_BASE_NAME, 1217, Amissl)

#define PKCS12_MAC_DATA_new() \
      AROS_LC0(PKCS12_MAC_DATA *, PKCS12_MAC_DATA_new, \
     struct Library *, AMISSL_BASE_NAME, 1218, Amissl)

#define PKCS12_MAC_DATA_free(___a) \
      AROS_LC1(void, PKCS12_MAC_DATA_free, \
 AROS_LCA(PKCS12_MAC_DATA *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 1219, Amissl)

#define d2i_PKCS12_MAC_DATA(___a, ___in, ___len) \
      AROS_LC3(PKCS12_MAC_DATA *, d2i_PKCS12_MAC_DATA, \
 AROS_LCA(PKCS12_MAC_DATA **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 1220, Amissl)

#define i2d_PKCS12_MAC_DATA(___a, ___out) \
      AROS_LC2(int, i2d_PKCS12_MAC_DATA, \
 AROS_LCA(const PKCS12_MAC_DATA *, (___a), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 1221, Amissl)

#define PKCS12_MAC_DATA_it() \
      AROS_LC0(const ASN1_ITEM *, PKCS12_MAC_DATA_it, \
     struct Library *, AMISSL_BASE_NAME, 1222, Amissl)

#define PKCS12_SAFEBAG_new() \
      AROS_LC0(PKCS12_SAFEBAG *, PKCS12_SAFEBAG_new, \
     struct Library *, AMISSL_BASE_NAME, 1223, Amissl)

#define PKCS12_SAFEBAG_free(___a) \
      AROS_LC1(void, PKCS12_SAFEBAG_free, \
 AROS_LCA(PKCS12_SAFEBAG *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 1224, Amissl)

#define d2i_PKCS12_SAFEBAG(___a, ___in, ___len) \
      AROS_LC3(PKCS12_SAFEBAG *, d2i_PKCS12_SAFEBAG, \
 AROS_LCA(PKCS12_SAFEBAG **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 1225, Amissl)

#define i2d_PKCS12_SAFEBAG(___a, ___out) \
      AROS_LC2(int, i2d_PKCS12_SAFEBAG, \
 AROS_LCA(const PKCS12_SAFEBAG *, (___a), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 1226, Amissl)

#define PKCS12_SAFEBAG_it() \
      AROS_LC0(const ASN1_ITEM *, PKCS12_SAFEBAG_it, \
     struct Library *, AMISSL_BASE_NAME, 1227, Amissl)

#define PKCS12_BAGS_new() \
      AROS_LC0(PKCS12_BAGS *, PKCS12_BAGS_new, \
     struct Library *, AMISSL_BASE_NAME, 1228, Amissl)

#define PKCS12_BAGS_free(___a) \
      AROS_LC1(void, PKCS12_BAGS_free, \
 AROS_LCA(PKCS12_BAGS *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 1229, Amissl)

#define d2i_PKCS12_BAGS(___a, ___in, ___len) \
      AROS_LC3(PKCS12_BAGS *, d2i_PKCS12_BAGS, \
 AROS_LCA(PKCS12_BAGS **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 1230, Amissl)

#define i2d_PKCS12_BAGS(___a, ___out) \
      AROS_LC2(int, i2d_PKCS12_BAGS, \
 AROS_LCA(const PKCS12_BAGS *, (___a), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 1231, Amissl)

#define PKCS12_BAGS_it() \
      AROS_LC0(const ASN1_ITEM *, PKCS12_BAGS_it, \
     struct Library *, AMISSL_BASE_NAME, 1232, Amissl)

#define PKCS12_SAFEBAGS_it() \
      AROS_LC0(const ASN1_ITEM *, PKCS12_SAFEBAGS_it, \
     struct Library *, AMISSL_BASE_NAME, 1233, Amissl)

#define PKCS12_AUTHSAFES_it() \
      AROS_LC0(const ASN1_ITEM *, PKCS12_AUTHSAFES_it, \
     struct Library *, AMISSL_BASE_NAME, 1234, Amissl)

#define PKCS12_PBE_add() \
      AROS_LC0(void, PKCS12_PBE_add, \
     struct Library *, AMISSL_BASE_NAME, 1235, Amissl)

#define PKCS12_parse(___p12, ___pass, ___pkey, ___cert, ___ca) \
      AROS_LC5(int, PKCS12_parse, \
 AROS_LCA(PKCS12 *, (___p12), A0), \
 AROS_LCA(const char *, (___pass), A1), \
 AROS_LCA(EVP_PKEY **, (___pkey), A2), \
 AROS_LCA(X509 **, (___cert), A3), \
 AROS_LCA(STACK_OF(X509) **, (___ca), D0), \
     struct Library *, AMISSL_BASE_NAME, 1236, Amissl)

#define PKCS12_create(___pass, ___name, ___pkey, ___cert, ___ca, ___nid_key, ___nid_cert, ___iter, ___mac_iter, ___keytype) \
      AROS_LC10(PKCS12 *, PKCS12_create, \
 AROS_LCA(const char *, (___pass), A0), \
 AROS_LCA(const char *, (___name), A1), \
 AROS_LCA(EVP_PKEY *, (___pkey), A2), \
 AROS_LCA(X509 *, (___cert), A3), \
 AROS_LCA(STACK_OF(X509) *, (___ca), D0), \
 AROS_LCA(int, (___nid_key), D1), \
 AROS_LCA(int, (___nid_cert), D2), \
 AROS_LCA(int, (___iter), D3), \
 AROS_LCA(int, (___mac_iter), D4), \
 AROS_LCA(int, (___keytype), D5), \
     struct Library *, AMISSL_BASE_NAME, 1237, Amissl)

#define i2d_PKCS12_bio(___bp, ___p12) \
      AROS_LC2(int, i2d_PKCS12_bio, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(const PKCS12 *, (___p12), A1), \
     struct Library *, AMISSL_BASE_NAME, 1238, Amissl)

#define d2i_PKCS12_bio(___bp, ___p12) \
      AROS_LC2(PKCS12 *, d2i_PKCS12_bio, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(PKCS12 **, (___p12), A1), \
     struct Library *, AMISSL_BASE_NAME, 1239, Amissl)

#define PKCS12_newpass(___p12, ___oldpass, ___newpass) \
      AROS_LC3(int, PKCS12_newpass, \
 AROS_LCA(PKCS12 *, (___p12), A0), \
 AROS_LCA(const char *, (___oldpass), A1), \
 AROS_LCA(const char *, (___newpass), A2), \
     struct Library *, AMISSL_BASE_NAME, 1240, Amissl)

#define ERR_load_PKCS12_strings() \
      AROS_LC0(int, ERR_load_PKCS12_strings, \
     struct Library *, AMISSL_BASE_NAME, 1241, Amissl)

#define PKCS7_ISSUER_AND_SERIAL_digest(___data, ___type, ___md, ___len) \
      AROS_LC4(int, PKCS7_ISSUER_AND_SERIAL_digest, \
 AROS_LCA(PKCS7_ISSUER_AND_SERIAL *, (___data), A0), \
 AROS_LCA(const EVP_MD *, (___type), A1), \
 AROS_LCA(unsigned char *, (___md), A2), \
 AROS_LCA(unsigned int *, (___len), A3), \
     struct Library *, AMISSL_BASE_NAME, 1242, Amissl)

#define PKCS7_dup(___p7) \
      AROS_LC1(PKCS7 *, PKCS7_dup, \
 AROS_LCA(const PKCS7 *, (___p7), A0), \
     struct Library *, AMISSL_BASE_NAME, 1243, Amissl)

#define d2i_PKCS7_bio(___bp, ___p7) \
      AROS_LC2(PKCS7 *, d2i_PKCS7_bio, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(PKCS7 **, (___p7), A1), \
     struct Library *, AMISSL_BASE_NAME, 1244, Amissl)

#define i2d_PKCS7_bio(___bp, ___p7) \
      AROS_LC2(int, i2d_PKCS7_bio, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(const PKCS7 *, (___p7), A1), \
     struct Library *, AMISSL_BASE_NAME, 1245, Amissl)

#define PKCS7_ISSUER_AND_SERIAL_new() \
      AROS_LC0(PKCS7_ISSUER_AND_SERIAL *, PKCS7_ISSUER_AND_SERIAL_new, \
     struct Library *, AMISSL_BASE_NAME, 1246, Amissl)

#define PKCS7_ISSUER_AND_SERIAL_free(___a) \
      AROS_LC1(void, PKCS7_ISSUER_AND_SERIAL_free, \
 AROS_LCA(PKCS7_ISSUER_AND_SERIAL *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 1247, Amissl)

#define d2i_PKCS7_ISSUER_AND_SERIAL(___a, ___in, ___len) \
      AROS_LC3(PKCS7_ISSUER_AND_SERIAL *, d2i_PKCS7_ISSUER_AND_SERIAL, \
 AROS_LCA(PKCS7_ISSUER_AND_SERIAL **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 1248, Amissl)

#define i2d_PKCS7_ISSUER_AND_SERIAL(___a, ___out) \
      AROS_LC2(int, i2d_PKCS7_ISSUER_AND_SERIAL, \
 AROS_LCA(const PKCS7_ISSUER_AND_SERIAL *, (___a), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 1249, Amissl)

#define PKCS7_ISSUER_AND_SERIAL_it() \
      AROS_LC0(const ASN1_ITEM *, PKCS7_ISSUER_AND_SERIAL_it, \
     struct Library *, AMISSL_BASE_NAME, 1250, Amissl)

#define PKCS7_SIGNER_INFO_new() \
      AROS_LC0(PKCS7_SIGNER_INFO *, PKCS7_SIGNER_INFO_new, \
     struct Library *, AMISSL_BASE_NAME, 1251, Amissl)

#define PKCS7_SIGNER_INFO_free(___a) \
      AROS_LC1(void, PKCS7_SIGNER_INFO_free, \
 AROS_LCA(PKCS7_SIGNER_INFO *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 1252, Amissl)

#define d2i_PKCS7_SIGNER_INFO(___a, ___in, ___len) \
      AROS_LC3(PKCS7_SIGNER_INFO *, d2i_PKCS7_SIGNER_INFO, \
 AROS_LCA(PKCS7_SIGNER_INFO **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 1253, Amissl)

#define i2d_PKCS7_SIGNER_INFO(___a, ___out) \
      AROS_LC2(int, i2d_PKCS7_SIGNER_INFO, \
 AROS_LCA(const PKCS7_SIGNER_INFO *, (___a), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 1254, Amissl)

#define PKCS7_SIGNER_INFO_it() \
      AROS_LC0(const ASN1_ITEM *, PKCS7_SIGNER_INFO_it, \
     struct Library *, AMISSL_BASE_NAME, 1255, Amissl)

#define PKCS7_RECIP_INFO_new() \
      AROS_LC0(PKCS7_RECIP_INFO *, PKCS7_RECIP_INFO_new, \
     struct Library *, AMISSL_BASE_NAME, 1256, Amissl)

#define PKCS7_RECIP_INFO_free(___a) \
      AROS_LC1(void, PKCS7_RECIP_INFO_free, \
 AROS_LCA(PKCS7_RECIP_INFO *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 1257, Amissl)

#define d2i_PKCS7_RECIP_INFO(___a, ___in, ___len) \
      AROS_LC3(PKCS7_RECIP_INFO *, d2i_PKCS7_RECIP_INFO, \
 AROS_LCA(PKCS7_RECIP_INFO **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 1258, Amissl)

#define i2d_PKCS7_RECIP_INFO(___a, ___out) \
      AROS_LC2(int, i2d_PKCS7_RECIP_INFO, \
 AROS_LCA(const PKCS7_RECIP_INFO *, (___a), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 1259, Amissl)

#define PKCS7_RECIP_INFO_it() \
      AROS_LC0(const ASN1_ITEM *, PKCS7_RECIP_INFO_it, \
     struct Library *, AMISSL_BASE_NAME, 1260, Amissl)

#define PKCS7_SIGNED_new() \
      AROS_LC0(PKCS7_SIGNED *, PKCS7_SIGNED_new, \
     struct Library *, AMISSL_BASE_NAME, 1261, Amissl)

#define PKCS7_SIGNED_free(___a) \
      AROS_LC1(void, PKCS7_SIGNED_free, \
 AROS_LCA(PKCS7_SIGNED *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 1262, Amissl)

#define d2i_PKCS7_SIGNED(___a, ___in, ___len) \
      AROS_LC3(PKCS7_SIGNED *, d2i_PKCS7_SIGNED, \
 AROS_LCA(PKCS7_SIGNED **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 1263, Amissl)

#define i2d_PKCS7_SIGNED(___a, ___out) \
      AROS_LC2(int, i2d_PKCS7_SIGNED, \
 AROS_LCA(const PKCS7_SIGNED *, (___a), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 1264, Amissl)

#define PKCS7_SIGNED_it() \
      AROS_LC0(const ASN1_ITEM *, PKCS7_SIGNED_it, \
     struct Library *, AMISSL_BASE_NAME, 1265, Amissl)

#define PKCS7_ENC_CONTENT_new() \
      AROS_LC0(PKCS7_ENC_CONTENT *, PKCS7_ENC_CONTENT_new, \
     struct Library *, AMISSL_BASE_NAME, 1266, Amissl)

#define PKCS7_ENC_CONTENT_free(___a) \
      AROS_LC1(void, PKCS7_ENC_CONTENT_free, \
 AROS_LCA(PKCS7_ENC_CONTENT *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 1267, Amissl)

#define d2i_PKCS7_ENC_CONTENT(___a, ___in, ___len) \
      AROS_LC3(PKCS7_ENC_CONTENT *, d2i_PKCS7_ENC_CONTENT, \
 AROS_LCA(PKCS7_ENC_CONTENT **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 1268, Amissl)

#define i2d_PKCS7_ENC_CONTENT(___a, ___out) \
      AROS_LC2(int, i2d_PKCS7_ENC_CONTENT, \
 AROS_LCA(const PKCS7_ENC_CONTENT *, (___a), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 1269, Amissl)

#define PKCS7_ENC_CONTENT_it() \
      AROS_LC0(const ASN1_ITEM *, PKCS7_ENC_CONTENT_it, \
     struct Library *, AMISSL_BASE_NAME, 1270, Amissl)

#define PKCS7_ENVELOPE_new() \
      AROS_LC0(PKCS7_ENVELOPE *, PKCS7_ENVELOPE_new, \
     struct Library *, AMISSL_BASE_NAME, 1271, Amissl)

#define PKCS7_ENVELOPE_free(___a) \
      AROS_LC1(void, PKCS7_ENVELOPE_free, \
 AROS_LCA(PKCS7_ENVELOPE *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 1272, Amissl)

#define d2i_PKCS7_ENVELOPE(___a, ___in, ___len) \
      AROS_LC3(PKCS7_ENVELOPE *, d2i_PKCS7_ENVELOPE, \
 AROS_LCA(PKCS7_ENVELOPE **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 1273, Amissl)

#define i2d_PKCS7_ENVELOPE(___a, ___out) \
      AROS_LC2(int, i2d_PKCS7_ENVELOPE, \
 AROS_LCA(const PKCS7_ENVELOPE *, (___a), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 1274, Amissl)

#define PKCS7_ENVELOPE_it() \
      AROS_LC0(const ASN1_ITEM *, PKCS7_ENVELOPE_it, \
     struct Library *, AMISSL_BASE_NAME, 1275, Amissl)

#define PKCS7_SIGN_ENVELOPE_new() \
      AROS_LC0(PKCS7_SIGN_ENVELOPE *, PKCS7_SIGN_ENVELOPE_new, \
     struct Library *, AMISSL_BASE_NAME, 1276, Amissl)

#define PKCS7_SIGN_ENVELOPE_free(___a) \
      AROS_LC1(void, PKCS7_SIGN_ENVELOPE_free, \
 AROS_LCA(PKCS7_SIGN_ENVELOPE *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 1277, Amissl)

#define d2i_PKCS7_SIGN_ENVELOPE(___a, ___in, ___len) \
      AROS_LC3(PKCS7_SIGN_ENVELOPE *, d2i_PKCS7_SIGN_ENVELOPE, \
 AROS_LCA(PKCS7_SIGN_ENVELOPE **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 1278, Amissl)

#define i2d_PKCS7_SIGN_ENVELOPE(___a, ___out) \
      AROS_LC2(int, i2d_PKCS7_SIGN_ENVELOPE, \
 AROS_LCA(const PKCS7_SIGN_ENVELOPE *, (___a), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 1279, Amissl)

#define PKCS7_SIGN_ENVELOPE_it() \
      AROS_LC0(const ASN1_ITEM *, PKCS7_SIGN_ENVELOPE_it, \
     struct Library *, AMISSL_BASE_NAME, 1280, Amissl)

#define PKCS7_DIGEST_new() \
      AROS_LC0(PKCS7_DIGEST *, PKCS7_DIGEST_new, \
     struct Library *, AMISSL_BASE_NAME, 1281, Amissl)

#define PKCS7_DIGEST_free(___a) \
      AROS_LC1(void, PKCS7_DIGEST_free, \
 AROS_LCA(PKCS7_DIGEST *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 1282, Amissl)

#define d2i_PKCS7_DIGEST(___a, ___in, ___len) \
      AROS_LC3(PKCS7_DIGEST *, d2i_PKCS7_DIGEST, \
 AROS_LCA(PKCS7_DIGEST **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 1283, Amissl)

#define i2d_PKCS7_DIGEST(___a, ___out) \
      AROS_LC2(int, i2d_PKCS7_DIGEST, \
 AROS_LCA(const PKCS7_DIGEST *, (___a), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 1284, Amissl)

#define PKCS7_DIGEST_it() \
      AROS_LC0(const ASN1_ITEM *, PKCS7_DIGEST_it, \
     struct Library *, AMISSL_BASE_NAME, 1285, Amissl)

#define PKCS7_ENCRYPT_new() \
      AROS_LC0(PKCS7_ENCRYPT *, PKCS7_ENCRYPT_new, \
     struct Library *, AMISSL_BASE_NAME, 1286, Amissl)

#define PKCS7_ENCRYPT_free(___a) \
      AROS_LC1(void, PKCS7_ENCRYPT_free, \
 AROS_LCA(PKCS7_ENCRYPT *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 1287, Amissl)

#define d2i_PKCS7_ENCRYPT(___a, ___in, ___len) \
      AROS_LC3(PKCS7_ENCRYPT *, d2i_PKCS7_ENCRYPT, \
 AROS_LCA(PKCS7_ENCRYPT **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 1288, Amissl)

#define i2d_PKCS7_ENCRYPT(___a, ___out) \
      AROS_LC2(int, i2d_PKCS7_ENCRYPT, \
 AROS_LCA(const PKCS7_ENCRYPT *, (___a), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 1289, Amissl)

#define PKCS7_ENCRYPT_it() \
      AROS_LC0(const ASN1_ITEM *, PKCS7_ENCRYPT_it, \
     struct Library *, AMISSL_BASE_NAME, 1290, Amissl)

#define PKCS7_new() \
      AROS_LC0(PKCS7 *, PKCS7_new, \
     struct Library *, AMISSL_BASE_NAME, 1291, Amissl)

#define PKCS7_free(___a) \
      AROS_LC1(void, PKCS7_free, \
 AROS_LCA(PKCS7 *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 1292, Amissl)

#define d2i_PKCS7(___a, ___in, ___len) \
      AROS_LC3(PKCS7 *, d2i_PKCS7, \
 AROS_LCA(PKCS7 **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 1293, Amissl)

#define i2d_PKCS7(___a, ___out) \
      AROS_LC2(int, i2d_PKCS7, \
 AROS_LCA(const PKCS7 *, (___a), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 1294, Amissl)

#define PKCS7_it() \
      AROS_LC0(const ASN1_ITEM *, PKCS7_it, \
     struct Library *, AMISSL_BASE_NAME, 1295, Amissl)

#define PKCS7_ATTR_SIGN_it() \
      AROS_LC0(const ASN1_ITEM *, PKCS7_ATTR_SIGN_it, \
     struct Library *, AMISSL_BASE_NAME, 1296, Amissl)

#define PKCS7_ATTR_VERIFY_it() \
      AROS_LC0(const ASN1_ITEM *, PKCS7_ATTR_VERIFY_it, \
     struct Library *, AMISSL_BASE_NAME, 1297, Amissl)

#define PKCS7_ctrl(___p7, ___cmd, ___larg, ___parg) \
      AROS_LC4(long, PKCS7_ctrl, \
 AROS_LCA(PKCS7 *, (___p7), A0), \
 AROS_LCA(int, (___cmd), D0), \
 AROS_LCA(long, (___larg), D1), \
 AROS_LCA(char *, (___parg), A1), \
     struct Library *, AMISSL_BASE_NAME, 1298, Amissl)

#define PKCS7_set_type(___p7, ___type) \
      AROS_LC2(int, PKCS7_set_type, \
 AROS_LCA(PKCS7 *, (___p7), A0), \
 AROS_LCA(int, (___type), D0), \
     struct Library *, AMISSL_BASE_NAME, 1299, Amissl)

#define PKCS7_set_content(___p7, ___p7_data) \
      AROS_LC2(int, PKCS7_set_content, \
 AROS_LCA(PKCS7 *, (___p7), A0), \
 AROS_LCA(PKCS7 *, (___p7_data), A1), \
     struct Library *, AMISSL_BASE_NAME, 1300, Amissl)

#define PKCS7_SIGNER_INFO_set(___p7i, ___x509, ___pkey, ___dgst) \
      AROS_LC4(int, PKCS7_SIGNER_INFO_set, \
 AROS_LCA(PKCS7_SIGNER_INFO *, (___p7i), A0), \
 AROS_LCA(X509 *, (___x509), A1), \
 AROS_LCA(EVP_PKEY *, (___pkey), A2), \
 AROS_LCA(const EVP_MD *, (___dgst), A3), \
     struct Library *, AMISSL_BASE_NAME, 1301, Amissl)

#define PKCS7_add_signer(___p7, ___p7i) \
      AROS_LC2(int, PKCS7_add_signer, \
 AROS_LCA(PKCS7 *, (___p7), A0), \
 AROS_LCA(PKCS7_SIGNER_INFO *, (___p7i), A1), \
     struct Library *, AMISSL_BASE_NAME, 1302, Amissl)

#define PKCS7_add_certificate(___p7, ___cert) \
      AROS_LC2(int, PKCS7_add_certificate, \
 AROS_LCA(PKCS7 *, (___p7), A0), \
 AROS_LCA(X509 *, (___cert), A1), \
     struct Library *, AMISSL_BASE_NAME, 1303, Amissl)

#define PKCS7_add_crl(___p7, ___crl) \
      AROS_LC2(int, PKCS7_add_crl, \
 AROS_LCA(PKCS7 *, (___p7), A0), \
 AROS_LCA(X509_CRL *, (___crl), A1), \
     struct Library *, AMISSL_BASE_NAME, 1304, Amissl)

#define PKCS7_content_new(___p7, ___nid) \
      AROS_LC2(int, PKCS7_content_new, \
 AROS_LCA(PKCS7 *, (___p7), A0), \
 AROS_LCA(int, (___nid), D0), \
     struct Library *, AMISSL_BASE_NAME, 1305, Amissl)

#define PKCS7_dataVerify(___cert_store, ___ctx, ___bio, ___p7, ___si) \
      AROS_LC5(int, PKCS7_dataVerify, \
 AROS_LCA(X509_STORE *, (___cert_store), A0), \
 AROS_LCA(X509_STORE_CTX *, (___ctx), A1), \
 AROS_LCA(BIO *, (___bio), A2), \
 AROS_LCA(PKCS7 *, (___p7), A3), \
 AROS_LCA(PKCS7_SIGNER_INFO *, (___si), D0), \
     struct Library *, AMISSL_BASE_NAME, 1306, Amissl)

#define PKCS7_signatureVerify(___bio, ___p7, ___si, ___signer) \
      AROS_LC4(int, PKCS7_signatureVerify, \
 AROS_LCA(BIO *, (___bio), A0), \
 AROS_LCA(PKCS7 *, (___p7), A1), \
 AROS_LCA(PKCS7_SIGNER_INFO *, (___si), A2), \
 AROS_LCA(X509 *, (___signer), A3), \
     struct Library *, AMISSL_BASE_NAME, 1307, Amissl)

#define PKCS7_dataInit(___p7, ___bio) \
      AROS_LC2(BIO *, PKCS7_dataInit, \
 AROS_LCA(PKCS7 *, (___p7), A0), \
 AROS_LCA(BIO *, (___bio), A1), \
     struct Library *, AMISSL_BASE_NAME, 1308, Amissl)

#define PKCS7_dataFinal(___p7, ___bio) \
      AROS_LC2(int, PKCS7_dataFinal, \
 AROS_LCA(PKCS7 *, (___p7), A0), \
 AROS_LCA(BIO *, (___bio), A1), \
     struct Library *, AMISSL_BASE_NAME, 1309, Amissl)

#define PKCS7_dataDecode(___p7, ___pkey, ___in_bio, ___pcert) \
      AROS_LC4(BIO *, PKCS7_dataDecode, \
 AROS_LCA(PKCS7 *, (___p7), A0), \
 AROS_LCA(EVP_PKEY *, (___pkey), A1), \
 AROS_LCA(BIO *, (___in_bio), A2), \
 AROS_LCA(X509 *, (___pcert), A3), \
     struct Library *, AMISSL_BASE_NAME, 1310, Amissl)

#define PKCS7_add_signature(___p7, ___x509, ___pkey, ___dgst) \
      AROS_LC4(PKCS7_SIGNER_INFO *, PKCS7_add_signature, \
 AROS_LCA(PKCS7 *, (___p7), A0), \
 AROS_LCA(X509 *, (___x509), A1), \
 AROS_LCA(EVP_PKEY *, (___pkey), A2), \
 AROS_LCA(const EVP_MD *, (___dgst), A3), \
     struct Library *, AMISSL_BASE_NAME, 1311, Amissl)

#define PKCS7_cert_from_signer_info(___p7, ___si) \
      AROS_LC2(X509 *, PKCS7_cert_from_signer_info, \
 AROS_LCA(PKCS7 *, (___p7), A0), \
 AROS_LCA(PKCS7_SIGNER_INFO *, (___si), A1), \
     struct Library *, AMISSL_BASE_NAME, 1312, Amissl)

#define PKCS7_get_signer_info(___p7) \
      AROS_LC1(STACK_OF(PKCS7_SIGNER_INFO) *, PKCS7_get_signer_info, \
 AROS_LCA(PKCS7 *, (___p7), A0), \
     struct Library *, AMISSL_BASE_NAME, 1313, Amissl)

#define PKCS7_add_recipient(___p7, ___x509) \
      AROS_LC2(PKCS7_RECIP_INFO *, PKCS7_add_recipient, \
 AROS_LCA(PKCS7 *, (___p7), A0), \
 AROS_LCA(X509 *, (___x509), A1), \
     struct Library *, AMISSL_BASE_NAME, 1314, Amissl)

#define PKCS7_add_recipient_info(___p7, ___ri) \
      AROS_LC2(int, PKCS7_add_recipient_info, \
 AROS_LCA(PKCS7 *, (___p7), A0), \
 AROS_LCA(PKCS7_RECIP_INFO *, (___ri), A1), \
     struct Library *, AMISSL_BASE_NAME, 1315, Amissl)

#define PKCS7_RECIP_INFO_set(___p7i, ___x509) \
      AROS_LC2(int, PKCS7_RECIP_INFO_set, \
 AROS_LCA(PKCS7_RECIP_INFO *, (___p7i), A0), \
 AROS_LCA(X509 *, (___x509), A1), \
     struct Library *, AMISSL_BASE_NAME, 1316, Amissl)

#define PKCS7_set_cipher(___p7, ___cipher) \
      AROS_LC2(int, PKCS7_set_cipher, \
 AROS_LCA(PKCS7 *, (___p7), A0), \
 AROS_LCA(const EVP_CIPHER *, (___cipher), A1), \
     struct Library *, AMISSL_BASE_NAME, 1317, Amissl)

#define PKCS7_get_issuer_and_serial(___p7, ___idx) \
      AROS_LC2(PKCS7_ISSUER_AND_SERIAL *, PKCS7_get_issuer_and_serial, \
 AROS_LCA(PKCS7 *, (___p7), A0), \
 AROS_LCA(int, (___idx), D0), \
     struct Library *, AMISSL_BASE_NAME, 1318, Amissl)

#define PKCS7_digest_from_attributes(___sk) \
      AROS_LC1(ASN1_OCTET_STRING *, PKCS7_digest_from_attributes, \
 AROS_LCA(STACK_OF(X509_ATTRIBUTE) *, (___sk), A0), \
     struct Library *, AMISSL_BASE_NAME, 1319, Amissl)

#define PKCS7_add_signed_attribute(___p7si, ___nid, ___type, ___data) \
      AROS_LC4(int, PKCS7_add_signed_attribute, \
 AROS_LCA(PKCS7_SIGNER_INFO *, (___p7si), A0), \
 AROS_LCA(int, (___nid), D0), \
 AROS_LCA(int, (___type), D1), \
 AROS_LCA(void *, (___data), A1), \
     struct Library *, AMISSL_BASE_NAME, 1320, Amissl)

#define PKCS7_add_attribute(___p7si, ___nid, ___atrtype, ___value) \
      AROS_LC4(int, PKCS7_add_attribute, \
 AROS_LCA(PKCS7_SIGNER_INFO *, (___p7si), A0), \
 AROS_LCA(int, (___nid), D0), \
 AROS_LCA(int, (___atrtype), D1), \
 AROS_LCA(void *, (___value), A1), \
     struct Library *, AMISSL_BASE_NAME, 1321, Amissl)

#define PKCS7_get_attribute(___si, ___nid) \
      AROS_LC2(ASN1_TYPE *, PKCS7_get_attribute, \
 AROS_LCA(const PKCS7_SIGNER_INFO *, (___si), A0), \
 AROS_LCA(int, (___nid), D0), \
     struct Library *, AMISSL_BASE_NAME, 1322, Amissl)

#define PKCS7_get_signed_attribute(___si, ___nid) \
      AROS_LC2(ASN1_TYPE *, PKCS7_get_signed_attribute, \
 AROS_LCA(const PKCS7_SIGNER_INFO *, (___si), A0), \
 AROS_LCA(int, (___nid), D0), \
     struct Library *, AMISSL_BASE_NAME, 1323, Amissl)

#define PKCS7_set_signed_attributes(___p7si, ___sk) \
      AROS_LC2(int, PKCS7_set_signed_attributes, \
 AROS_LCA(PKCS7_SIGNER_INFO *, (___p7si), A0), \
 AROS_LCA(STACK_OF(X509_ATTRIBUTE) *, (___sk), A1), \
     struct Library *, AMISSL_BASE_NAME, 1324, Amissl)

#define PKCS7_set_attributes(___p7si, ___sk) \
      AROS_LC2(int, PKCS7_set_attributes, \
 AROS_LCA(PKCS7_SIGNER_INFO *, (___p7si), A0), \
 AROS_LCA(STACK_OF(X509_ATTRIBUTE) *, (___sk), A1), \
     struct Library *, AMISSL_BASE_NAME, 1325, Amissl)

#define PKCS7_sign(___signcert, ___pkey, ___certs, ___data, ___flags) \
      AROS_LC5(PKCS7 *, PKCS7_sign, \
 AROS_LCA(X509 *, (___signcert), A0), \
 AROS_LCA(EVP_PKEY *, (___pkey), A1), \
 AROS_LCA(STACK_OF(X509) *, (___certs), A2), \
 AROS_LCA(BIO *, (___data), A3), \
 AROS_LCA(int, (___flags), D0), \
     struct Library *, AMISSL_BASE_NAME, 1326, Amissl)

#define PKCS7_verify(___p7, ___certs, ___store, ___indata, ___out, ___flags) \
      AROS_LC6(int, PKCS7_verify, \
 AROS_LCA(PKCS7 *, (___p7), A0), \
 AROS_LCA(STACK_OF(X509) *, (___certs), A1), \
 AROS_LCA(X509_STORE *, (___store), A2), \
 AROS_LCA(BIO *, (___indata), A3), \
 AROS_LCA(BIO *, (___out), D0), \
 AROS_LCA(int, (___flags), D1), \
     struct Library *, AMISSL_BASE_NAME, 1327, Amissl)

#define PKCS7_get0_signers(___p7, ___certs, ___flags) \
      AROS_LC3(STACK_OF(X509) *, PKCS7_get0_signers, \
 AROS_LCA(PKCS7 *, (___p7), A0), \
 AROS_LCA(STACK_OF(X509) *, (___certs), A1), \
 AROS_LCA(int, (___flags), D0), \
     struct Library *, AMISSL_BASE_NAME, 1328, Amissl)

#define PKCS7_encrypt(___certs, ___in, ___cipher, ___flags) \
      AROS_LC4(PKCS7 *, PKCS7_encrypt, \
 AROS_LCA(STACK_OF(X509) *, (___certs), A0), \
 AROS_LCA(BIO *, (___in), A1), \
 AROS_LCA(const EVP_CIPHER *, (___cipher), A2), \
 AROS_LCA(int, (___flags), D0), \
     struct Library *, AMISSL_BASE_NAME, 1329, Amissl)

#define PKCS7_decrypt(___p7, ___pkey, ___cert, ___data, ___flags) \
      AROS_LC5(int, PKCS7_decrypt, \
 AROS_LCA(PKCS7 *, (___p7), A0), \
 AROS_LCA(EVP_PKEY *, (___pkey), A1), \
 AROS_LCA(X509 *, (___cert), A2), \
 AROS_LCA(BIO *, (___data), A3), \
 AROS_LCA(int, (___flags), D0), \
     struct Library *, AMISSL_BASE_NAME, 1330, Amissl)

#define PKCS7_add_attrib_smimecap(___si, ___cap) \
      AROS_LC2(int, PKCS7_add_attrib_smimecap, \
 AROS_LCA(PKCS7_SIGNER_INFO *, (___si), A0), \
 AROS_LCA(STACK_OF(X509_ALGOR) *, (___cap), A1), \
     struct Library *, AMISSL_BASE_NAME, 1331, Amissl)

#define PKCS7_get_smimecap(___si) \
      AROS_LC1(STACK_OF(X509_ALGOR) *, PKCS7_get_smimecap, \
 AROS_LCA(PKCS7_SIGNER_INFO *, (___si), A0), \
     struct Library *, AMISSL_BASE_NAME, 1332, Amissl)

#define PKCS7_simple_smimecap(___sk, ___nid, ___arg) \
      AROS_LC3(int, PKCS7_simple_smimecap, \
 AROS_LCA(STACK_OF(X509_ALGOR) *, (___sk), A0), \
 AROS_LCA(int, (___nid), D0), \
 AROS_LCA(int, (___arg), D1), \
     struct Library *, AMISSL_BASE_NAME, 1333, Amissl)

#define SMIME_write_PKCS7(___bio, ___p7, ___data, ___flags) \
      AROS_LC4(int, SMIME_write_PKCS7, \
 AROS_LCA(BIO *, (___bio), A0), \
 AROS_LCA(PKCS7 *, (___p7), A1), \
 AROS_LCA(BIO *, (___data), A2), \
 AROS_LCA(int, (___flags), D0), \
     struct Library *, AMISSL_BASE_NAME, 1334, Amissl)

#define SMIME_read_PKCS7(___bio, ___bcont) \
      AROS_LC2(PKCS7 *, SMIME_read_PKCS7, \
 AROS_LCA(BIO *, (___bio), A0), \
 AROS_LCA(BIO **, (___bcont), A1), \
     struct Library *, AMISSL_BASE_NAME, 1335, Amissl)

#define SMIME_crlf_copy(___in, ___out, ___flags) \
      AROS_LC3(int, SMIME_crlf_copy, \
 AROS_LCA(BIO *, (___in), A0), \
 AROS_LCA(BIO *, (___out), A1), \
 AROS_LCA(int, (___flags), D0), \
     struct Library *, AMISSL_BASE_NAME, 1336, Amissl)

#define SMIME_text(___in, ___out) \
      AROS_LC2(int, SMIME_text, \
 AROS_LCA(BIO *, (___in), A0), \
 AROS_LCA(BIO *, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 1337, Amissl)

#define ERR_load_PKCS7_strings() \
      AROS_LC0(int, ERR_load_PKCS7_strings, \
     struct Library *, AMISSL_BASE_NAME, 1338, Amissl)

#define RAND_set_rand_method(___meth) \
      AROS_LC1(int, RAND_set_rand_method, \
 AROS_LCA(const RAND_METHOD *, (___meth), A0), \
     struct Library *, AMISSL_BASE_NAME, 1339, Amissl)

#define RAND_get_rand_method() \
      AROS_LC0(const RAND_METHOD *, RAND_get_rand_method, \
     struct Library *, AMISSL_BASE_NAME, 1340, Amissl)

#define RAND_bytes(___buf, ___num) \
      AROS_LC2(int, RAND_bytes, \
 AROS_LCA(unsigned char *, (___buf), A0), \
 AROS_LCA(int, (___num), D0), \
     struct Library *, AMISSL_BASE_NAME, 1343, Amissl)

#define RAND_pseudo_bytes(___buf, ___num) \
      AROS_LC2(int, RAND_pseudo_bytes, \
 AROS_LCA(unsigned char *, (___buf), A0), \
 AROS_LCA(int, (___num), D0), \
     struct Library *, AMISSL_BASE_NAME, 1344, Amissl)

#define RAND_seed(___buf, ___num) \
      AROS_LC2(void, RAND_seed, \
 AROS_LCA(const void *, (___buf), A0), \
 AROS_LCA(int, (___num), D0), \
     struct Library *, AMISSL_BASE_NAME, 1345, Amissl)

#define RAND_add(___buf, ___num, ___randomness) \
      AROS_LC3(void, RAND_add, \
 AROS_LCA(const void *, (___buf), A0), \
 AROS_LCA(int, (___num), D2), \
 AROS_LCA(double, (___randomness), D0), \
     struct Library *, AMISSL_BASE_NAME, 1346, Amissl)

#define RAND_load_file(___file, ___max_bytes) \
      AROS_LC2(int, RAND_load_file, \
 AROS_LCA(const char *, (___file), A0), \
 AROS_LCA(long, (___max_bytes), D0), \
     struct Library *, AMISSL_BASE_NAME, 1347, Amissl)

#define RAND_write_file(___file) \
      AROS_LC1(int, RAND_write_file, \
 AROS_LCA(const char *, (___file), A0), \
     struct Library *, AMISSL_BASE_NAME, 1348, Amissl)

#define RAND_file_name(___file, ___num) \
      AROS_LC2(const char *, RAND_file_name, \
 AROS_LCA(char *, (___file), A0), \
 AROS_LCA(size_t, (___num), D0), \
     struct Library *, AMISSL_BASE_NAME, 1349, Amissl)

#define RAND_status() \
      AROS_LC0(int, RAND_status, \
     struct Library *, AMISSL_BASE_NAME, 1350, Amissl)

#define RAND_poll() \
      AROS_LC0(int, RAND_poll, \
     struct Library *, AMISSL_BASE_NAME, 1354, Amissl)

#define ERR_load_RAND_strings() \
      AROS_LC0(int, ERR_load_RAND_strings, \
     struct Library *, AMISSL_BASE_NAME, 1355, Amissl)

#define SSL_CTX_set_msg_callback(___ctx, ___cb) \
      AROS_LC2(void, SSL_CTX_set_msg_callback, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
 AROS_LCA(void (*)(int write_p,int version,int content_type,const void *buf,size_t len,SSL *ssl,void *arg), (___cb), A1), \
     struct Library *, AMISSL_BASE_NAME, 1356, Amissl)

#define SSL_set_msg_callback(___ssl, ___cb) \
      AROS_LC2(void, SSL_set_msg_callback, \
 AROS_LCA(SSL *, (___ssl), A0), \
 AROS_LCA(void (*)(int write_p,int version,int content_type,const void *buf,size_t len,SSL *ssl,void *arg), (___cb), A1), \
     struct Library *, AMISSL_BASE_NAME, 1357, Amissl)

#define SSL_CTX_sessions(___ctx) \
      AROS_LC1(LHASH_OF(SSL_SESSION) *, SSL_CTX_sessions, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 1358, Amissl)

#define SSL_get_finished(___s, ___buf, ___count) \
      AROS_LC3(size_t, SSL_get_finished, \
 AROS_LCA(const SSL *, (___s), A0), \
 AROS_LCA(void *, (___buf), A1), \
 AROS_LCA(size_t, (___count), D0), \
     struct Library *, AMISSL_BASE_NAME, 1359, Amissl)

#define SSL_get_peer_finished(___s, ___buf, ___count) \
      AROS_LC3(size_t, SSL_get_peer_finished, \
 AROS_LCA(const SSL *, (___s), A0), \
 AROS_LCA(void *, (___buf), A1), \
 AROS_LCA(size_t, (___count), D0), \
     struct Library *, AMISSL_BASE_NAME, 1360, Amissl)

#define BIO_f_ssl() \
      AROS_LC0(const BIO_METHOD *, BIO_f_ssl, \
     struct Library *, AMISSL_BASE_NAME, 1361, Amissl)

#define BIO_new_ssl(___ctx, ___client) \
      AROS_LC2(BIO *, BIO_new_ssl, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
 AROS_LCA(int, (___client), D0), \
     struct Library *, AMISSL_BASE_NAME, 1362, Amissl)

#define BIO_new_ssl_connect(___ctx) \
      AROS_LC1(BIO *, BIO_new_ssl_connect, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 1363, Amissl)

#define BIO_new_buffer_ssl_connect(___ctx) \
      AROS_LC1(BIO *, BIO_new_buffer_ssl_connect, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 1364, Amissl)

#define BIO_ssl_copy_session_id(___to, ___from) \
      AROS_LC2(int, BIO_ssl_copy_session_id, \
 AROS_LCA(BIO *, (___to), A0), \
 AROS_LCA(BIO *, (___from), A1), \
     struct Library *, AMISSL_BASE_NAME, 1365, Amissl)

#define BIO_ssl_shutdown(___ssl_bio) \
      AROS_LC1(void, BIO_ssl_shutdown, \
 AROS_LCA(BIO *, (___ssl_bio), A0), \
     struct Library *, AMISSL_BASE_NAME, 1366, Amissl)

#define SSL_CTX_set_cipher_list(___a, ___str) \
      AROS_LC2(int, SSL_CTX_set_cipher_list, \
 AROS_LCA(SSL_CTX *, (___a), A0), \
 AROS_LCA(const char *, (___str), A1), \
     struct Library *, AMISSL_BASE_NAME, 1367, Amissl)

#define SSL_CTX_new(___meth) \
      AROS_LC1(SSL_CTX *, SSL_CTX_new, \
 AROS_LCA(const SSL_METHOD *, (___meth), A0), \
     struct Library *, AMISSL_BASE_NAME, 1368, Amissl)

#define SSL_CTX_free(___a) \
      AROS_LC1(void, SSL_CTX_free, \
 AROS_LCA(SSL_CTX *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 1369, Amissl)

#define SSL_CTX_set_timeout(___ctx, ___t) \
      AROS_LC2(long, SSL_CTX_set_timeout, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
 AROS_LCA(long, (___t), D0), \
     struct Library *, AMISSL_BASE_NAME, 1370, Amissl)

#define SSL_CTX_get_timeout(___ctx) \
      AROS_LC1(long, SSL_CTX_get_timeout, \
 AROS_LCA(const SSL_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 1371, Amissl)

#define SSL_CTX_get_cert_store(___a) \
      AROS_LC1(X509_STORE *, SSL_CTX_get_cert_store, \
 AROS_LCA(const SSL_CTX *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 1372, Amissl)

#define SSL_CTX_set_cert_store(___a, ___b) \
      AROS_LC2(void, SSL_CTX_set_cert_store, \
 AROS_LCA(SSL_CTX *, (___a), A0), \
 AROS_LCA(X509_STORE *, (___b), A1), \
     struct Library *, AMISSL_BASE_NAME, 1373, Amissl)

#define SSL_want(___s) \
      AROS_LC1(int, SSL_want, \
 AROS_LCA(const SSL *, (___s), A0), \
     struct Library *, AMISSL_BASE_NAME, 1374, Amissl)

#define SSL_clear(___s) \
      AROS_LC1(int, SSL_clear, \
 AROS_LCA(SSL *, (___s), A0), \
     struct Library *, AMISSL_BASE_NAME, 1375, Amissl)

#define SSL_CTX_flush_sessions(___ctx, ___tm) \
      AROS_LC2(void, SSL_CTX_flush_sessions, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
 AROS_LCA(long, (___tm), D0), \
     struct Library *, AMISSL_BASE_NAME, 1376, Amissl)

#define SSL_get_current_cipher(___s) \
      AROS_LC1(const SSL_CIPHER *, SSL_get_current_cipher, \
 AROS_LCA(const SSL *, (___s), A0), \
     struct Library *, AMISSL_BASE_NAME, 1377, Amissl)

#define SSL_CIPHER_get_bits(___c, ___alg_bits) \
      AROS_LC2(int, SSL_CIPHER_get_bits, \
 AROS_LCA(const SSL_CIPHER *, (___c), A0), \
 AROS_LCA(int *, (___alg_bits), A1), \
     struct Library *, AMISSL_BASE_NAME, 1378, Amissl)

#define SSL_CIPHER_get_version(___c) \
      AROS_LC1(const char *, SSL_CIPHER_get_version, \
 AROS_LCA(const SSL_CIPHER *, (___c), A0), \
     struct Library *, AMISSL_BASE_NAME, 1379, Amissl)

#define SSL_CIPHER_get_name(___c) \
      AROS_LC1(const char *, SSL_CIPHER_get_name, \
 AROS_LCA(const SSL_CIPHER *, (___c), A0), \
     struct Library *, AMISSL_BASE_NAME, 1380, Amissl)

#define SSL_CIPHER_get_mac(___cipher) \
      AROS_LC1(const char *, SSL_CIPHER_get_mac, \
 AROS_LCA(const SSL_CIPHER *, (___cipher), A0), \
     struct Library *, AMISSL_BASE_NAME, 1381, Amissl)

#define SSL_CIPHER_get_encryption(___cipher) \
      AROS_LC1(const char *, SSL_CIPHER_get_encryption, \
 AROS_LCA(const SSL_CIPHER *, (___cipher), A0), \
     struct Library *, AMISSL_BASE_NAME, 1382, Amissl)

#define SSL_CIPHER_get_authentication(___cipher) \
      AROS_LC1(const char *, SSL_CIPHER_get_authentication, \
 AROS_LCA(const SSL_CIPHER *, (___cipher), A0), \
     struct Library *, AMISSL_BASE_NAME, 1383, Amissl)

#define SSL_CIPHER_get_key_exchange(___cipher) \
      AROS_LC1(const char *, SSL_CIPHER_get_key_exchange, \
 AROS_LCA(const SSL_CIPHER *, (___cipher), A0), \
     struct Library *, AMISSL_BASE_NAME, 1384, Amissl)

#define SSL_get_fd(___s) \
      AROS_LC1(int, SSL_get_fd, \
 AROS_LCA(const SSL *, (___s), A0), \
     struct Library *, AMISSL_BASE_NAME, 1386, Amissl)

#define SSL_get_rfd(___s) \
      AROS_LC1(int, SSL_get_rfd, \
 AROS_LCA(const SSL *, (___s), A0), \
     struct Library *, AMISSL_BASE_NAME, 1387, Amissl)

#define SSL_get_wfd(___s) \
      AROS_LC1(int, SSL_get_wfd, \
 AROS_LCA(const SSL *, (___s), A0), \
     struct Library *, AMISSL_BASE_NAME, 1388, Amissl)

#define SSL_get_cipher_list(___s, ___n) \
      AROS_LC2(const char *, SSL_get_cipher_list, \
 AROS_LCA(const SSL *, (___s), A0), \
 AROS_LCA(int, (___n), D0), \
     struct Library *, AMISSL_BASE_NAME, 1389, Amissl)

#define SSL_get_shared_ciphers(___s, ___buf, ___size) \
      AROS_LC3(char *, SSL_get_shared_ciphers, \
 AROS_LCA(const SSL *, (___s), A0), \
 AROS_LCA(char *, (___buf), A1), \
 AROS_LCA(int, (___size), D0), \
     struct Library *, AMISSL_BASE_NAME, 1390, Amissl)

#define SSL_get_read_ahead(___s) \
      AROS_LC1(int, SSL_get_read_ahead, \
 AROS_LCA(const SSL *, (___s), A0), \
     struct Library *, AMISSL_BASE_NAME, 1391, Amissl)

#define SSL_pending(___s) \
      AROS_LC1(int, SSL_pending, \
 AROS_LCA(const SSL *, (___s), A0), \
     struct Library *, AMISSL_BASE_NAME, 1392, Amissl)

#define SSL_set_fd(___s, ___fd) \
      AROS_LC2(int, SSL_set_fd, \
 AROS_LCA(SSL *, (___s), A0), \
 AROS_LCA(int, (___fd), D0), \
     struct Library *, AMISSL_BASE_NAME, 1393, Amissl)

#define SSL_set_rfd(___s, ___fd) \
      AROS_LC2(int, SSL_set_rfd, \
 AROS_LCA(SSL *, (___s), A0), \
 AROS_LCA(int, (___fd), D0), \
     struct Library *, AMISSL_BASE_NAME, 1394, Amissl)

#define SSL_set_wfd(___s, ___fd) \
      AROS_LC2(int, SSL_set_wfd, \
 AROS_LCA(SSL *, (___s), A0), \
 AROS_LCA(int, (___fd), D0), \
     struct Library *, AMISSL_BASE_NAME, 1395, Amissl)

#define SSL_set_bio(___s, ___rbio, ___wbio) \
      AROS_LC3(void, SSL_set_bio, \
 AROS_LCA(SSL *, (___s), A0), \
 AROS_LCA(BIO *, (___rbio), A1), \
 AROS_LCA(BIO *, (___wbio), A2), \
     struct Library *, AMISSL_BASE_NAME, 1396, Amissl)

#define SSL_get_rbio(___s) \
      AROS_LC1(BIO *, SSL_get_rbio, \
 AROS_LCA(const SSL *, (___s), A0), \
     struct Library *, AMISSL_BASE_NAME, 1397, Amissl)

#define SSL_get_wbio(___s) \
      AROS_LC1(BIO *, SSL_get_wbio, \
 AROS_LCA(const SSL *, (___s), A0), \
     struct Library *, AMISSL_BASE_NAME, 1398, Amissl)

#define SSL_set_cipher_list(___s, ___str) \
      AROS_LC2(int, SSL_set_cipher_list, \
 AROS_LCA(SSL *, (___s), A0), \
 AROS_LCA(const char *, (___str), A1), \
     struct Library *, AMISSL_BASE_NAME, 1399, Amissl)

#define SSL_set_read_ahead(___s, ___yes) \
      AROS_LC2(void, SSL_set_read_ahead, \
 AROS_LCA(SSL *, (___s), A0), \
 AROS_LCA(int, (___yes), D0), \
     struct Library *, AMISSL_BASE_NAME, 1400, Amissl)

#define SSL_get_verify_mode(___s) \
      AROS_LC1(int, SSL_get_verify_mode, \
 AROS_LCA(const SSL *, (___s), A0), \
     struct Library *, AMISSL_BASE_NAME, 1401, Amissl)

#define SSL_get_verify_depth(___s) \
      AROS_LC1(int, SSL_get_verify_depth, \
 AROS_LCA(const SSL *, (___s), A0), \
     struct Library *, AMISSL_BASE_NAME, 1402, Amissl)

#define SSL_get_verify_callback(___s) \
      AROS_LC1(int (*)(int, X509_STORE_CTX *), SSL_get_verify_callback, \
 AROS_LCA(const SSL *, (___s), A0), \
     struct Library *, AMISSL_BASE_NAME, 1403, Amissl)

#define SSL_set_verify(___s, ___mode, ___callback) \
      AROS_LC3(void, SSL_set_verify, \
 AROS_LCA(SSL *, (___s), A0), \
 AROS_LCA(int, (___mode), D0), \
 AROS_LCA(int (*)(int,X509_STORE_CTX *), (___callback), A1), \
     struct Library *, AMISSL_BASE_NAME, 1404, Amissl)

#define SSL_set_verify_depth(___s, ___depth) \
      AROS_LC2(void, SSL_set_verify_depth, \
 AROS_LCA(SSL *, (___s), A0), \
 AROS_LCA(int, (___depth), D0), \
     struct Library *, AMISSL_BASE_NAME, 1405, Amissl)

#define SSL_use_RSAPrivateKey(___ssl, ___rsa) \
      AROS_LC2(int, SSL_use_RSAPrivateKey, \
 AROS_LCA(SSL *, (___ssl), A0), \
 AROS_LCA(RSA *, (___rsa), A1), \
     struct Library *, AMISSL_BASE_NAME, 1406, Amissl)

#define SSL_use_RSAPrivateKey_ASN1(___ssl, ___d, ___len) \
      AROS_LC3(int, SSL_use_RSAPrivateKey_ASN1, \
 AROS_LCA(SSL *, (___ssl), A0), \
 AROS_LCA(const unsigned char *, (___d), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 1407, Amissl)

#define SSL_use_PrivateKey(___ssl, ___pkey) \
      AROS_LC2(int, SSL_use_PrivateKey, \
 AROS_LCA(SSL *, (___ssl), A0), \
 AROS_LCA(EVP_PKEY *, (___pkey), A1), \
     struct Library *, AMISSL_BASE_NAME, 1408, Amissl)

#define SSL_use_PrivateKey_ASN1(___pk, ___ssl, ___d, ___len) \
      AROS_LC4(int, SSL_use_PrivateKey_ASN1, \
 AROS_LCA(int, (___pk), D0), \
 AROS_LCA(SSL *, (___ssl), A0), \
 AROS_LCA(const unsigned char *, (___d), A1), \
 AROS_LCA(long, (___len), D1), \
     struct Library *, AMISSL_BASE_NAME, 1409, Amissl)

#define SSL_use_certificate(___ssl, ___x) \
      AROS_LC2(int, SSL_use_certificate, \
 AROS_LCA(SSL *, (___ssl), A0), \
 AROS_LCA(X509 *, (___x), A1), \
     struct Library *, AMISSL_BASE_NAME, 1410, Amissl)

#define SSL_use_certificate_ASN1(___ssl, ___d, ___len) \
      AROS_LC3(int, SSL_use_certificate_ASN1, \
 AROS_LCA(SSL *, (___ssl), A0), \
 AROS_LCA(const unsigned char *, (___d), A1), \
 AROS_LCA(int, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 1411, Amissl)

#define SSL_use_RSAPrivateKey_file(___ssl, ___file, ___type) \
      AROS_LC3(int, SSL_use_RSAPrivateKey_file, \
 AROS_LCA(SSL *, (___ssl), A0), \
 AROS_LCA(const char *, (___file), A1), \
 AROS_LCA(int, (___type), D0), \
     struct Library *, AMISSL_BASE_NAME, 1412, Amissl)

#define SSL_use_PrivateKey_file(___ssl, ___file, ___type) \
      AROS_LC3(int, SSL_use_PrivateKey_file, \
 AROS_LCA(SSL *, (___ssl), A0), \
 AROS_LCA(const char *, (___file), A1), \
 AROS_LCA(int, (___type), D0), \
     struct Library *, AMISSL_BASE_NAME, 1413, Amissl)

#define SSL_use_certificate_file(___ssl, ___file, ___type) \
      AROS_LC3(int, SSL_use_certificate_file, \
 AROS_LCA(SSL *, (___ssl), A0), \
 AROS_LCA(const char *, (___file), A1), \
 AROS_LCA(int, (___type), D0), \
     struct Library *, AMISSL_BASE_NAME, 1414, Amissl)

#define SSL_CTX_use_RSAPrivateKey_file(___ctx, ___file, ___type) \
      AROS_LC3(int, SSL_CTX_use_RSAPrivateKey_file, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
 AROS_LCA(const char *, (___file), A1), \
 AROS_LCA(int, (___type), D0), \
     struct Library *, AMISSL_BASE_NAME, 1415, Amissl)

#define SSL_CTX_use_PrivateKey_file(___ctx, ___file, ___type) \
      AROS_LC3(int, SSL_CTX_use_PrivateKey_file, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
 AROS_LCA(const char *, (___file), A1), \
 AROS_LCA(int, (___type), D0), \
     struct Library *, AMISSL_BASE_NAME, 1416, Amissl)

#define SSL_CTX_use_certificate_file(___ctx, ___file, ___type) \
      AROS_LC3(int, SSL_CTX_use_certificate_file, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
 AROS_LCA(const char *, (___file), A1), \
 AROS_LCA(int, (___type), D0), \
     struct Library *, AMISSL_BASE_NAME, 1417, Amissl)

#define SSL_CTX_use_certificate_chain_file(___ctx, ___file) \
      AROS_LC2(int, SSL_CTX_use_certificate_chain_file, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
 AROS_LCA(const char *, (___file), A1), \
     struct Library *, AMISSL_BASE_NAME, 1418, Amissl)

#define SSL_load_client_CA_file(___file) \
      AROS_LC1(STACK_OF(X509_NAME) *, SSL_load_client_CA_file, \
 AROS_LCA(const char *, (___file), A0), \
     struct Library *, AMISSL_BASE_NAME, 1419, Amissl)

#define SSL_add_file_cert_subjects_to_stack(___stackCAs, ___file) \
      AROS_LC2(int, SSL_add_file_cert_subjects_to_stack, \
 AROS_LCA(STACK_OF(X509_NAME) *, (___stackCAs), A0), \
 AROS_LCA(const char *, (___file), A1), \
     struct Library *, AMISSL_BASE_NAME, 1420, Amissl)

#define SSL_add_dir_cert_subjects_to_stack(___stackCAs, ___dir) \
      AROS_LC2(int, SSL_add_dir_cert_subjects_to_stack, \
 AROS_LCA(STACK_OF(X509_NAME) *, (___stackCAs), A0), \
 AROS_LCA(const char *, (___dir), A1), \
     struct Library *, AMISSL_BASE_NAME, 1421, Amissl)

#define OBSOLETE_SSL_load_error_strings() \
      AROS_LC0(void, OBSOLETE_SSL_load_error_strings, \
     struct Library *, AMISSL_BASE_NAME, 1422, Amissl)

#define SSL_state_string(___s) \
      AROS_LC1(const char *, SSL_state_string, \
 AROS_LCA(const SSL *, (___s), A0), \
     struct Library *, AMISSL_BASE_NAME, 1423, Amissl)

#define SSL_rstate_string(___s) \
      AROS_LC1(const char *, SSL_rstate_string, \
 AROS_LCA(const SSL *, (___s), A0), \
     struct Library *, AMISSL_BASE_NAME, 1424, Amissl)

#define SSL_state_string_long(___s) \
      AROS_LC1(const char *, SSL_state_string_long, \
 AROS_LCA(const SSL *, (___s), A0), \
     struct Library *, AMISSL_BASE_NAME, 1425, Amissl)

#define SSL_rstate_string_long(___s) \
      AROS_LC1(const char *, SSL_rstate_string_long, \
 AROS_LCA(const SSL *, (___s), A0), \
     struct Library *, AMISSL_BASE_NAME, 1426, Amissl)

#define SSL_SESSION_get_time(___s) \
      AROS_LC1(long, SSL_SESSION_get_time, \
 AROS_LCA(const SSL_SESSION *, (___s), A0), \
     struct Library *, AMISSL_BASE_NAME, 1427, Amissl)

#define SSL_SESSION_set_time(___s, ___t) \
      AROS_LC2(long, SSL_SESSION_set_time, \
 AROS_LCA(SSL_SESSION *, (___s), A0), \
 AROS_LCA(long, (___t), D0), \
     struct Library *, AMISSL_BASE_NAME, 1428, Amissl)

#define SSL_SESSION_get_timeout(___s) \
      AROS_LC1(long, SSL_SESSION_get_timeout, \
 AROS_LCA(const SSL_SESSION *, (___s), A0), \
     struct Library *, AMISSL_BASE_NAME, 1429, Amissl)

#define SSL_SESSION_set_timeout(___s, ___t) \
      AROS_LC2(long, SSL_SESSION_set_timeout, \
 AROS_LCA(SSL_SESSION *, (___s), A0), \
 AROS_LCA(long, (___t), D0), \
     struct Library *, AMISSL_BASE_NAME, 1430, Amissl)

#define SSL_copy_session_id(___to, ___from) \
      AROS_LC2(int, SSL_copy_session_id, \
 AROS_LCA(SSL *, (___to), A0), \
 AROS_LCA(const SSL *, (___from), A1), \
     struct Library *, AMISSL_BASE_NAME, 1431, Amissl)

#define SSL_SESSION_new() \
      AROS_LC0(SSL_SESSION *, SSL_SESSION_new, \
     struct Library *, AMISSL_BASE_NAME, 1432, Amissl)

#define SSL_SESSION_print(___fp, ___ses) \
      AROS_LC2(int, SSL_SESSION_print, \
 AROS_LCA(BIO *, (___fp), A0), \
 AROS_LCA(const SSL_SESSION *, (___ses), A1), \
     struct Library *, AMISSL_BASE_NAME, 1435, Amissl)

#define SSL_SESSION_free(___ses) \
      AROS_LC1(void, SSL_SESSION_free, \
 AROS_LCA(SSL_SESSION *, (___ses), A0), \
     struct Library *, AMISSL_BASE_NAME, 1436, Amissl)

#define i2d_SSL_SESSION(___in, ___pp) \
      AROS_LC2(int, i2d_SSL_SESSION, \
 AROS_LCA(const SSL_SESSION *, (___in), A0), \
 AROS_LCA(unsigned char **, (___pp), A1), \
     struct Library *, AMISSL_BASE_NAME, 1437, Amissl)

#define SSL_set_session(___to, ___session) \
      AROS_LC2(int, SSL_set_session, \
 AROS_LCA(SSL *, (___to), A0), \
 AROS_LCA(SSL_SESSION *, (___session), A1), \
     struct Library *, AMISSL_BASE_NAME, 1438, Amissl)

#define SSL_CTX_add_session(___ctx, ___session) \
      AROS_LC2(int, SSL_CTX_add_session, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
 AROS_LCA(SSL_SESSION *, (___session), A1), \
     struct Library *, AMISSL_BASE_NAME, 1439, Amissl)

#define SSL_CTX_remove_session(___ctx, ___session) \
      AROS_LC2(int, SSL_CTX_remove_session, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
 AROS_LCA(SSL_SESSION *, (___session), A1), \
     struct Library *, AMISSL_BASE_NAME, 1440, Amissl)

#define SSL_CTX_set_generate_session_id(___ctx, ___cb) \
      AROS_LC2(int, SSL_CTX_set_generate_session_id, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
 AROS_LCA(GEN_SESSION_CB, (___cb), D0), \
     struct Library *, AMISSL_BASE_NAME, 1441, Amissl)

#define SSL_set_generate_session_id(___s, ___cb) \
      AROS_LC2(int, SSL_set_generate_session_id, \
 AROS_LCA(SSL *, (___s), A0), \
 AROS_LCA(GEN_SESSION_CB, (___cb), D0), \
     struct Library *, AMISSL_BASE_NAME, 1442, Amissl)

#define SSL_has_matching_session_id(___s, ___id, ___id_len) \
      AROS_LC3(int, SSL_has_matching_session_id, \
 AROS_LCA(const SSL *, (___s), A0), \
 AROS_LCA(const unsigned char *, (___id), A1), \
 AROS_LCA(unsigned int, (___id_len), D0), \
     struct Library *, AMISSL_BASE_NAME, 1443, Amissl)

#define d2i_SSL_SESSION(___a, ___pp, ___length) \
      AROS_LC3(SSL_SESSION *, d2i_SSL_SESSION, \
 AROS_LCA(SSL_SESSION **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___pp), A1), \
 AROS_LCA(long, (___length), D0), \
     struct Library *, AMISSL_BASE_NAME, 1444, Amissl)

#define SSL_get1_peer_certificate(___s) \
      AROS_LC1(X509 *, SSL_get1_peer_certificate, \
 AROS_LCA(const SSL *, (___s), A0), \
     struct Library *, AMISSL_BASE_NAME, 1445, Amissl)

#define SSL_get_peer_cert_chain(___s) \
      AROS_LC1(STACK_OF(X509) *, SSL_get_peer_cert_chain, \
 AROS_LCA(const SSL *, (___s), A0), \
     struct Library *, AMISSL_BASE_NAME, 1446, Amissl)

#define SSL_CTX_get_verify_mode(___ctx) \
      AROS_LC1(int, SSL_CTX_get_verify_mode, \
 AROS_LCA(const SSL_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 1447, Amissl)

#define SSL_CTX_get_verify_depth(___ctx) \
      AROS_LC1(int, SSL_CTX_get_verify_depth, \
 AROS_LCA(const SSL_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 1448, Amissl)

#define SSL_CTX_get_verify_callback(___ctx) \
      AROS_LC1(int (*)(int, X509_STORE_CTX *), SSL_CTX_get_verify_callback, \
 AROS_LCA(const SSL_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 1449, Amissl)

#define SSL_CTX_set_verify(___ctx, ___mode, ___callback) \
      AROS_LC3(void, SSL_CTX_set_verify, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
 AROS_LCA(int, (___mode), D0), \
 AROS_LCA(int (*)(int,X509_STORE_CTX *), (___callback), A1), \
     struct Library *, AMISSL_BASE_NAME, 1450, Amissl)

#define SSL_CTX_set_verify_depth(___ctx, ___depth) \
      AROS_LC2(void, SSL_CTX_set_verify_depth, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
 AROS_LCA(int, (___depth), D0), \
     struct Library *, AMISSL_BASE_NAME, 1451, Amissl)

#define SSL_CTX_set_cert_verify_callback(___ctx, ___cb, ___arg) \
      AROS_LC3(void, SSL_CTX_set_cert_verify_callback, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
 AROS_LCA(int (*)(X509_STORE_CTX *,void *), (___cb), A1), \
 AROS_LCA(void *, (___arg), A2), \
     struct Library *, AMISSL_BASE_NAME, 1452, Amissl)

#define SSL_CTX_use_RSAPrivateKey(___ctx, ___rsa) \
      AROS_LC2(int, SSL_CTX_use_RSAPrivateKey, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
 AROS_LCA(RSA *, (___rsa), A1), \
     struct Library *, AMISSL_BASE_NAME, 1453, Amissl)

#define SSL_CTX_use_RSAPrivateKey_ASN1(___ctx, ___d, ___len) \
      AROS_LC3(int, SSL_CTX_use_RSAPrivateKey_ASN1, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
 AROS_LCA(const unsigned char *, (___d), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 1454, Amissl)

#define SSL_CTX_use_PrivateKey(___ctx, ___pkey) \
      AROS_LC2(int, SSL_CTX_use_PrivateKey, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
 AROS_LCA(EVP_PKEY *, (___pkey), A1), \
     struct Library *, AMISSL_BASE_NAME, 1455, Amissl)

#define SSL_CTX_use_PrivateKey_ASN1(___pk, ___ctx, ___d, ___len) \
      AROS_LC4(int, SSL_CTX_use_PrivateKey_ASN1, \
 AROS_LCA(int, (___pk), D0), \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
 AROS_LCA(const unsigned char *, (___d), A1), \
 AROS_LCA(long, (___len), D1), \
     struct Library *, AMISSL_BASE_NAME, 1456, Amissl)

#define SSL_CTX_use_certificate(___ctx, ___x) \
      AROS_LC2(int, SSL_CTX_use_certificate, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
 AROS_LCA(X509 *, (___x), A1), \
     struct Library *, AMISSL_BASE_NAME, 1457, Amissl)

#define SSL_CTX_use_certificate_ASN1(___ctx, ___len, ___d) \
      AROS_LC3(int, SSL_CTX_use_certificate_ASN1, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
 AROS_LCA(int, (___len), D0), \
 AROS_LCA(const unsigned char *, (___d), A1), \
     struct Library *, AMISSL_BASE_NAME, 1458, Amissl)

#define SSL_CTX_set_default_passwd_cb(___ctx, ___cb) \
      AROS_LC2(void, SSL_CTX_set_default_passwd_cb, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
 AROS_LCA(pem_password_cb *, (___cb), A1), \
     struct Library *, AMISSL_BASE_NAME, 1459, Amissl)

#define SSL_CTX_set_default_passwd_cb_userdata(___ctx, ___u) \
      AROS_LC2(void, SSL_CTX_set_default_passwd_cb_userdata, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
 AROS_LCA(void *, (___u), A1), \
     struct Library *, AMISSL_BASE_NAME, 1460, Amissl)

#define SSL_CTX_check_private_key(___ctx) \
      AROS_LC1(int, SSL_CTX_check_private_key, \
 AROS_LCA(const SSL_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 1461, Amissl)

#define SSL_check_private_key(___ctx) \
      AROS_LC1(int, SSL_check_private_key, \
 AROS_LCA(const SSL *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 1462, Amissl)

#define SSL_CTX_set_session_id_context(___ctx, ___sid_ctx, ___sid_ctx_len) \
      AROS_LC3(int, SSL_CTX_set_session_id_context, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
 AROS_LCA(const unsigned char *, (___sid_ctx), A1), \
 AROS_LCA(unsigned int, (___sid_ctx_len), D0), \
     struct Library *, AMISSL_BASE_NAME, 1463, Amissl)

#define SSL_new(___ctx) \
      AROS_LC1(SSL *, SSL_new, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 1464, Amissl)

#define SSL_set_session_id_context(___ssl, ___sid_ctx, ___sid_ctx_len) \
      AROS_LC3(int, SSL_set_session_id_context, \
 AROS_LCA(SSL *, (___ssl), A0), \
 AROS_LCA(const unsigned char *, (___sid_ctx), A1), \
 AROS_LCA(unsigned int, (___sid_ctx_len), D0), \
     struct Library *, AMISSL_BASE_NAME, 1465, Amissl)

#define SSL_CTX_set_purpose(___ctx, ___purpose) \
      AROS_LC2(int, SSL_CTX_set_purpose, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
 AROS_LCA(int, (___purpose), D0), \
     struct Library *, AMISSL_BASE_NAME, 1466, Amissl)

#define SSL_set_purpose(___ssl, ___purpose) \
      AROS_LC2(int, SSL_set_purpose, \
 AROS_LCA(SSL *, (___ssl), A0), \
 AROS_LCA(int, (___purpose), D0), \
     struct Library *, AMISSL_BASE_NAME, 1467, Amissl)

#define SSL_CTX_set_trust(___ctx, ___trust) \
      AROS_LC2(int, SSL_CTX_set_trust, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
 AROS_LCA(int, (___trust), D0), \
     struct Library *, AMISSL_BASE_NAME, 1468, Amissl)

#define SSL_set_trust(___ssl, ___trust) \
      AROS_LC2(int, SSL_set_trust, \
 AROS_LCA(SSL *, (___ssl), A0), \
 AROS_LCA(int, (___trust), D0), \
     struct Library *, AMISSL_BASE_NAME, 1469, Amissl)

#define SSL_free(___ssl) \
      AROS_LC1(void, SSL_free, \
 AROS_LCA(SSL *, (___ssl), A0), \
     struct Library *, AMISSL_BASE_NAME, 1470, Amissl)

#define SSL_accept(___ssl) \
      AROS_LC1(int, SSL_accept, \
 AROS_LCA(SSL *, (___ssl), A0), \
     struct Library *, AMISSL_BASE_NAME, 1471, Amissl)

#define SSL_connect(___ssl) \
      AROS_LC1(int, SSL_connect, \
 AROS_LCA(SSL *, (___ssl), A0), \
     struct Library *, AMISSL_BASE_NAME, 1472, Amissl)

#define SSL_read(___ssl, ___buf, ___num) \
      AROS_LC3(int, SSL_read, \
 AROS_LCA(SSL *, (___ssl), A0), \
 AROS_LCA(void *, (___buf), A1), \
 AROS_LCA(int, (___num), D0), \
     struct Library *, AMISSL_BASE_NAME, 1473, Amissl)

#define SSL_peek(___ssl, ___buf, ___num) \
      AROS_LC3(int, SSL_peek, \
 AROS_LCA(SSL *, (___ssl), A0), \
 AROS_LCA(void *, (___buf), A1), \
 AROS_LCA(int, (___num), D0), \
     struct Library *, AMISSL_BASE_NAME, 1474, Amissl)

#define SSL_write(___ssl, ___buf, ___num) \
      AROS_LC3(int, SSL_write, \
 AROS_LCA(SSL *, (___ssl), A0), \
 AROS_LCA(const void *, (___buf), A1), \
 AROS_LCA(int, (___num), D0), \
     struct Library *, AMISSL_BASE_NAME, 1475, Amissl)

#define SSL_ctrl(___ssl, ___cmd, ___larg, ___parg) \
      AROS_LC4(long, SSL_ctrl, \
 AROS_LCA(SSL *, (___ssl), A0), \
 AROS_LCA(int, (___cmd), D0), \
 AROS_LCA(long, (___larg), D1), \
 AROS_LCA(void *, (___parg), A1), \
     struct Library *, AMISSL_BASE_NAME, 1476, Amissl)

#define SSL_callback_ctrl(___a, ___a1, ___b) \
      AROS_LC3(long, SSL_callback_ctrl, \
 AROS_LCA(SSL *, (___a), A0), \
 AROS_LCA(int, (___a1), D0), \
 AROS_LCA(void (*)(), (___b), A1), \
     struct Library *, AMISSL_BASE_NAME, 1477, Amissl)

#define SSL_CTX_ctrl(___ctx, ___cmd, ___larg, ___parg) \
      AROS_LC4(long, SSL_CTX_ctrl, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
 AROS_LCA(int, (___cmd), D0), \
 AROS_LCA(long, (___larg), D1), \
 AROS_LCA(void *, (___parg), A1), \
     struct Library *, AMISSL_BASE_NAME, 1478, Amissl)

#define SSL_CTX_callback_ctrl(___a1, ___a2, ___a3) \
      AROS_LC3(long, SSL_CTX_callback_ctrl, \
 AROS_LCA(SSL_CTX *, (___a1), A0), \
 AROS_LCA(int, (___a2), D0), \
 AROS_LCA(void (*)(void), (___a3), A1), \
     struct Library *, AMISSL_BASE_NAME, 1479, Amissl)

#define SSL_get_error(___s, ___ret_code) \
      AROS_LC2(int, SSL_get_error, \
 AROS_LCA(const SSL *, (___s), A0), \
 AROS_LCA(int, (___ret_code), D0), \
     struct Library *, AMISSL_BASE_NAME, 1480, Amissl)

#define SSL_get_version(___s) \
      AROS_LC1(const char *, SSL_get_version, \
 AROS_LCA(const SSL *, (___s), A0), \
     struct Library *, AMISSL_BASE_NAME, 1481, Amissl)

#define SSL_CTX_set_ssl_version(___ctx, ___meth) \
      AROS_LC2(int, SSL_CTX_set_ssl_version, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
 AROS_LCA(const SSL_METHOD *, (___meth), A1), \
     struct Library *, AMISSL_BASE_NAME, 1482, Amissl)

#define TLSv1_method() \
      AROS_LC0(const SSL_METHOD *, TLSv1_method, \
     struct Library *, AMISSL_BASE_NAME, 1492, Amissl)

#define TLSv1_server_method() \
      AROS_LC0(const SSL_METHOD *, TLSv1_server_method, \
     struct Library *, AMISSL_BASE_NAME, 1493, Amissl)

#define TLSv1_client_method() \
      AROS_LC0(const SSL_METHOD *, TLSv1_client_method, \
     struct Library *, AMISSL_BASE_NAME, 1494, Amissl)

#define SSL_get_ciphers(___s) \
      AROS_LC1(STACK_OF(SSL_CIPHER) *, SSL_get_ciphers, \
 AROS_LCA(const SSL *, (___s), A0), \
     struct Library *, AMISSL_BASE_NAME, 1495, Amissl)

#define SSL_do_handshake(___s) \
      AROS_LC1(int, SSL_do_handshake, \
 AROS_LCA(SSL *, (___s), A0), \
     struct Library *, AMISSL_BASE_NAME, 1496, Amissl)

#define SSL_renegotiate(___s) \
      AROS_LC1(int, SSL_renegotiate, \
 AROS_LCA(SSL *, (___s), A0), \
     struct Library *, AMISSL_BASE_NAME, 1497, Amissl)

#define SSL_renegotiate_pending(___s) \
      AROS_LC1(int, SSL_renegotiate_pending, \
 AROS_LCA(const SSL *, (___s), A0), \
     struct Library *, AMISSL_BASE_NAME, 1498, Amissl)

#define SSL_shutdown(___s) \
      AROS_LC1(int, SSL_shutdown, \
 AROS_LCA(SSL *, (___s), A0), \
     struct Library *, AMISSL_BASE_NAME, 1499, Amissl)

#define SSL_get_ssl_method(___s) \
      AROS_LC1(const SSL_METHOD *, SSL_get_ssl_method, \
 AROS_LCA(const SSL *, (___s), A0), \
     struct Library *, AMISSL_BASE_NAME, 1500, Amissl)

#define SSL_set_ssl_method(___s, ___method) \
      AROS_LC2(int, SSL_set_ssl_method, \
 AROS_LCA(SSL *, (___s), A0), \
 AROS_LCA(const SSL_METHOD *, (___method), A1), \
     struct Library *, AMISSL_BASE_NAME, 1501, Amissl)

#define SSL_alert_type_string_long(___value) \
      AROS_LC1(const char *, SSL_alert_type_string_long, \
 AROS_LCA(int, (___value), D0), \
     struct Library *, AMISSL_BASE_NAME, 1502, Amissl)

#define SSL_alert_type_string(___value) \
      AROS_LC1(const char *, SSL_alert_type_string, \
 AROS_LCA(int, (___value), D0), \
     struct Library *, AMISSL_BASE_NAME, 1503, Amissl)

#define SSL_alert_desc_string_long(___value) \
      AROS_LC1(const char *, SSL_alert_desc_string_long, \
 AROS_LCA(int, (___value), D0), \
     struct Library *, AMISSL_BASE_NAME, 1504, Amissl)

#define SSL_alert_desc_string(___value) \
      AROS_LC1(const char *, SSL_alert_desc_string, \
 AROS_LCA(int, (___value), D0), \
     struct Library *, AMISSL_BASE_NAME, 1505, Amissl)

#define SSL_set_client_CA_list(___s, ___name_list) \
      AROS_LC2(void, SSL_set_client_CA_list, \
 AROS_LCA(SSL *, (___s), A0), \
 AROS_LCA(STACK_OF(X509_NAME) *, (___name_list), A1), \
     struct Library *, AMISSL_BASE_NAME, 1506, Amissl)

#define SSL_CTX_set_client_CA_list(___ctx, ___name_list) \
      AROS_LC2(void, SSL_CTX_set_client_CA_list, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
 AROS_LCA(STACK_OF(X509_NAME) *, (___name_list), A1), \
     struct Library *, AMISSL_BASE_NAME, 1507, Amissl)

#define SSL_get_client_CA_list(___s) \
      AROS_LC1(STACK_OF(X509_NAME) *, SSL_get_client_CA_list, \
 AROS_LCA(const SSL *, (___s), A0), \
     struct Library *, AMISSL_BASE_NAME, 1508, Amissl)

#define SSL_CTX_get_client_CA_list(___s) \
      AROS_LC1(STACK_OF(X509_NAME) *, SSL_CTX_get_client_CA_list, \
 AROS_LCA(const SSL_CTX *, (___s), A0), \
     struct Library *, AMISSL_BASE_NAME, 1509, Amissl)

#define SSL_add_client_CA(___ssl, ___x) \
      AROS_LC2(int, SSL_add_client_CA, \
 AROS_LCA(SSL *, (___ssl), A0), \
 AROS_LCA(X509 *, (___x), A1), \
     struct Library *, AMISSL_BASE_NAME, 1510, Amissl)

#define SSL_CTX_add_client_CA(___ctx, ___x) \
      AROS_LC2(int, SSL_CTX_add_client_CA, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
 AROS_LCA(X509 *, (___x), A1), \
     struct Library *, AMISSL_BASE_NAME, 1511, Amissl)

#define SSL_set_connect_state(___s) \
      AROS_LC1(void, SSL_set_connect_state, \
 AROS_LCA(SSL *, (___s), A0), \
     struct Library *, AMISSL_BASE_NAME, 1512, Amissl)

#define SSL_set_accept_state(___s) \
      AROS_LC1(void, SSL_set_accept_state, \
 AROS_LCA(SSL *, (___s), A0), \
     struct Library *, AMISSL_BASE_NAME, 1513, Amissl)

#define SSL_get_default_timeout(___s) \
      AROS_LC1(long, SSL_get_default_timeout, \
 AROS_LCA(const SSL *, (___s), A0), \
     struct Library *, AMISSL_BASE_NAME, 1514, Amissl)

#define OBSOLETE_SSL_library_init() \
      AROS_LC0(int, OBSOLETE_SSL_library_init, \
     struct Library *, AMISSL_BASE_NAME, 1515, Amissl)

#define SSL_CIPHER_description(___a1, ___buf, ___size) \
      AROS_LC3(char *, SSL_CIPHER_description, \
 AROS_LCA(const SSL_CIPHER *, (___a1), A0), \
 AROS_LCA(char *, (___buf), A1), \
 AROS_LCA(int, (___size), D0), \
     struct Library *, AMISSL_BASE_NAME, 1516, Amissl)

#define SSL_dup_CA_list(___sk) \
      AROS_LC1(STACK_OF(X509_NAME) *, SSL_dup_CA_list, \
 AROS_LCA(const STACK_OF(X509_NAME) *, (___sk), A0), \
     struct Library *, AMISSL_BASE_NAME, 1517, Amissl)

#define SSL_dup(___ssl) \
      AROS_LC1(SSL *, SSL_dup, \
 AROS_LCA(SSL *, (___ssl), A0), \
     struct Library *, AMISSL_BASE_NAME, 1518, Amissl)

#define SSL_get_certificate(___ssl) \
      AROS_LC1(X509 *, SSL_get_certificate, \
 AROS_LCA(const SSL *, (___ssl), A0), \
     struct Library *, AMISSL_BASE_NAME, 1519, Amissl)

#define SSL_get_privatekey(___ssl) \
      AROS_LC1(struct evp_pkey_st *, SSL_get_privatekey, \
 AROS_LCA(const SSL *, (___ssl), A0), \
     struct Library *, AMISSL_BASE_NAME, 1520, Amissl)

#define SSL_CTX_set_quiet_shutdown(___ctx, ___mode) \
      AROS_LC2(void, SSL_CTX_set_quiet_shutdown, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
 AROS_LCA(int, (___mode), D0), \
     struct Library *, AMISSL_BASE_NAME, 1521, Amissl)

#define SSL_CTX_get_quiet_shutdown(___ctx) \
      AROS_LC1(int, SSL_CTX_get_quiet_shutdown, \
 AROS_LCA(const SSL_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 1522, Amissl)

#define SSL_set_quiet_shutdown(___ssl, ___mode) \
      AROS_LC2(void, SSL_set_quiet_shutdown, \
 AROS_LCA(SSL *, (___ssl), A0), \
 AROS_LCA(int, (___mode), D0), \
     struct Library *, AMISSL_BASE_NAME, 1523, Amissl)

#define SSL_get_quiet_shutdown(___ssl) \
      AROS_LC1(int, SSL_get_quiet_shutdown, \
 AROS_LCA(const SSL *, (___ssl), A0), \
     struct Library *, AMISSL_BASE_NAME, 1524, Amissl)

#define SSL_set_shutdown(___ssl, ___mode) \
      AROS_LC2(void, SSL_set_shutdown, \
 AROS_LCA(SSL *, (___ssl), A0), \
 AROS_LCA(int, (___mode), D0), \
     struct Library *, AMISSL_BASE_NAME, 1525, Amissl)

#define SSL_get_shutdown(___ssl) \
      AROS_LC1(int, SSL_get_shutdown, \
 AROS_LCA(const SSL *, (___ssl), A0), \
     struct Library *, AMISSL_BASE_NAME, 1526, Amissl)

#define SSL_version(___ssl) \
      AROS_LC1(int, SSL_version, \
 AROS_LCA(const SSL *, (___ssl), A0), \
     struct Library *, AMISSL_BASE_NAME, 1527, Amissl)

#define SSL_CTX_set_default_verify_paths(___ctx) \
      AROS_LC1(int, SSL_CTX_set_default_verify_paths, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 1528, Amissl)

#define SSL_CTX_load_verify_locations(___ctx, ___CAfile, ___CApath) \
      AROS_LC3(int, SSL_CTX_load_verify_locations, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
 AROS_LCA(const char *, (___CAfile), A1), \
 AROS_LCA(const char *, (___CApath), A2), \
     struct Library *, AMISSL_BASE_NAME, 1529, Amissl)

#define SSL_get_session(___ssl) \
      AROS_LC1(SSL_SESSION *, SSL_get_session, \
 AROS_LCA(const SSL *, (___ssl), A0), \
     struct Library *, AMISSL_BASE_NAME, 1530, Amissl)

#define SSL_get1_session(___ssl) \
      AROS_LC1(SSL_SESSION *, SSL_get1_session, \
 AROS_LCA(SSL *, (___ssl), A0), \
     struct Library *, AMISSL_BASE_NAME, 1531, Amissl)

#define SSL_get_SSL_CTX(___ssl) \
      AROS_LC1(SSL_CTX *, SSL_get_SSL_CTX, \
 AROS_LCA(const SSL *, (___ssl), A0), \
     struct Library *, AMISSL_BASE_NAME, 1532, Amissl)

#define SSL_set_info_callback(___ssl, ___cb) \
      AROS_LC2(void, SSL_set_info_callback, \
 AROS_LCA(SSL *, (___ssl), A0), \
 AROS_LCA(void (*)(const SSL *ssl,int type,int val), (___cb), A1), \
     struct Library *, AMISSL_BASE_NAME, 1533, Amissl)

#define SSL_get_info_callback(___ssl) \
      AROS_LC1(void (*)(const SSL *ssl, int type, int val), SSL_get_info_callback, \
 AROS_LCA(const SSL *, (___ssl), A0), \
     struct Library *, AMISSL_BASE_NAME, 1534, Amissl)

#define SSL_set_verify_result(___ssl, ___v) \
      AROS_LC2(void, SSL_set_verify_result, \
 AROS_LCA(SSL *, (___ssl), A0), \
 AROS_LCA(long, (___v), D0), \
     struct Library *, AMISSL_BASE_NAME, 1536, Amissl)

#define SSL_get_verify_result(___ssl) \
      AROS_LC1(long, SSL_get_verify_result, \
 AROS_LCA(const SSL *, (___ssl), A0), \
     struct Library *, AMISSL_BASE_NAME, 1537, Amissl)

#define SSL_set_ex_data(___ssl, ___idx, ___data) \
      AROS_LC3(int, SSL_set_ex_data, \
 AROS_LCA(SSL *, (___ssl), A0), \
 AROS_LCA(int, (___idx), D0), \
 AROS_LCA(void *, (___data), A1), \
     struct Library *, AMISSL_BASE_NAME, 1538, Amissl)

#define SSL_get_ex_data(___ssl, ___idx) \
      AROS_LC2(void *, SSL_get_ex_data, \
 AROS_LCA(const SSL *, (___ssl), A0), \
 AROS_LCA(int, (___idx), D0), \
     struct Library *, AMISSL_BASE_NAME, 1539, Amissl)

#define OBSOLETE_SSL_get_ex_new_index(___argl, ___argp, ___new_func, ___dup_func, ___free_func) \
      AROS_LC5(int, OBSOLETE_SSL_get_ex_new_index, \
 AROS_LCA(long, (___argl), D0), \
 AROS_LCA(void *, (___argp), A0), \
 AROS_LCA(CRYPTO_EX_new *, (___new_func), A1), \
 AROS_LCA(CRYPTO_EX_dup *, (___dup_func), A2), \
 AROS_LCA(CRYPTO_EX_free *, (___free_func), A3), \
     struct Library *, AMISSL_BASE_NAME, 1540, Amissl)

#define SSL_SESSION_set_ex_data(___ss, ___idx, ___data) \
      AROS_LC3(int, SSL_SESSION_set_ex_data, \
 AROS_LCA(SSL_SESSION *, (___ss), A0), \
 AROS_LCA(int, (___idx), D0), \
 AROS_LCA(void *, (___data), A1), \
     struct Library *, AMISSL_BASE_NAME, 1541, Amissl)

#define SSL_SESSION_get_ex_data(___ss, ___idx) \
      AROS_LC2(void *, SSL_SESSION_get_ex_data, \
 AROS_LCA(const SSL_SESSION *, (___ss), A0), \
 AROS_LCA(int, (___idx), D0), \
     struct Library *, AMISSL_BASE_NAME, 1542, Amissl)

#define OBSOLETE_SSL_SESSION_get_ex_new_index(___argl, ___argp, ___new_func, ___dup_func, ___free_func) \
      AROS_LC5(int, OBSOLETE_SSL_SESSION_get_ex_new_index, \
 AROS_LCA(long, (___argl), D0), \
 AROS_LCA(void *, (___argp), A0), \
 AROS_LCA(CRYPTO_EX_new *, (___new_func), A1), \
 AROS_LCA(CRYPTO_EX_dup *, (___dup_func), A2), \
 AROS_LCA(CRYPTO_EX_free *, (___free_func), A3), \
     struct Library *, AMISSL_BASE_NAME, 1543, Amissl)

#define SSL_CTX_set_ex_data(___ssl, ___idx, ___data) \
      AROS_LC3(int, SSL_CTX_set_ex_data, \
 AROS_LCA(SSL_CTX *, (___ssl), A0), \
 AROS_LCA(int, (___idx), D0), \
 AROS_LCA(void *, (___data), A1), \
     struct Library *, AMISSL_BASE_NAME, 1544, Amissl)

#define SSL_CTX_get_ex_data(___ssl, ___idx) \
      AROS_LC2(void *, SSL_CTX_get_ex_data, \
 AROS_LCA(const SSL_CTX *, (___ssl), A0), \
 AROS_LCA(int, (___idx), D0), \
     struct Library *, AMISSL_BASE_NAME, 1545, Amissl)

#define OBSOLETE_SSL_CTX_get_ex_new_index(___argl, ___argp, ___new_func, ___dup_func, ___free_func) \
      AROS_LC5(int, OBSOLETE_SSL_CTX_get_ex_new_index, \
 AROS_LCA(long, (___argl), D0), \
 AROS_LCA(void *, (___argp), A0), \
 AROS_LCA(CRYPTO_EX_new *, (___new_func), A1), \
 AROS_LCA(CRYPTO_EX_dup *, (___dup_func), A2), \
 AROS_LCA(CRYPTO_EX_free *, (___free_func), A3), \
     struct Library *, AMISSL_BASE_NAME, 1546, Amissl)

#define SSL_get_ex_data_X509_STORE_CTX_idx() \
      AROS_LC0(int, SSL_get_ex_data_X509_STORE_CTX_idx, \
     struct Library *, AMISSL_BASE_NAME, 1547, Amissl)

#define SSL_CTX_set_tmp_dh_callback(___ctx, ___dh) \
      AROS_LC2(void, SSL_CTX_set_tmp_dh_callback, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
 AROS_LCA(DH * (*)(SSL *ssl,int is_export,int keylength), (___dh), A1), \
     struct Library *, AMISSL_BASE_NAME, 1550, Amissl)

#define SSL_set_tmp_dh_callback(___ssl, ___dh) \
      AROS_LC2(void, SSL_set_tmp_dh_callback, \
 AROS_LCA(SSL *, (___ssl), A0), \
 AROS_LCA(DH * (*)(SSL *ssl,int is_export,int keylength), (___dh), A1), \
     struct Library *, AMISSL_BASE_NAME, 1551, Amissl)

#define SSL_COMP_add_compression_method(___id, ___cm) \
      AROS_LC2(int, SSL_COMP_add_compression_method, \
 AROS_LCA(int, (___id), D0), \
 AROS_LCA(COMP_METHOD *, (___cm), A0), \
     struct Library *, AMISSL_BASE_NAME, 1552, Amissl)

#define ERR_load_SSL_strings() \
      AROS_LC0(int, ERR_load_SSL_strings, \
     struct Library *, AMISSL_BASE_NAME, 1553, Amissl)

#define OPENSSL_sk_num(___a) \
      AROS_LC1(int, OPENSSL_sk_num, \
 AROS_LCA(const OPENSSL_STACK *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 1554, Amissl)

#define OPENSSL_sk_value(___a, ___b) \
      AROS_LC2(void *, OPENSSL_sk_value, \
 AROS_LCA(const OPENSSL_STACK *, (___a), A0), \
 AROS_LCA(int, (___b), D0), \
     struct Library *, AMISSL_BASE_NAME, 1555, Amissl)

#define OPENSSL_sk_set(___a, ___b, ___c) \
      AROS_LC3(void *, OPENSSL_sk_set, \
 AROS_LCA(OPENSSL_STACK *, (___a), A0), \
 AROS_LCA(int, (___b), D0), \
 AROS_LCA(const void *, (___c), A1), \
     struct Library *, AMISSL_BASE_NAME, 1556, Amissl)

#define OPENSSL_sk_new(___cmp) \
      AROS_LC1(OPENSSL_STACK *, OPENSSL_sk_new, \
 AROS_LCA(int (*)(const void *,const void *), (___cmp), A0), \
     struct Library *, AMISSL_BASE_NAME, 1557, Amissl)

#define OPENSSL_sk_new_null() \
      AROS_LC0(OPENSSL_STACK *, OPENSSL_sk_new_null, \
     struct Library *, AMISSL_BASE_NAME, 1558, Amissl)

#define OPENSSL_sk_free(___a) \
      AROS_LC1(void, OPENSSL_sk_free, \
 AROS_LCA(OPENSSL_STACK *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 1559, Amissl)

#define OPENSSL_sk_pop_free(___st, ___func) \
      AROS_LC2(void, OPENSSL_sk_pop_free, \
 AROS_LCA(OPENSSL_STACK *, (___st), A0), \
 AROS_LCA(void (*)(void *), (___func), A1), \
     struct Library *, AMISSL_BASE_NAME, 1560, Amissl)

#define OPENSSL_sk_insert(___sk, ___data, ___where) \
      AROS_LC3(int, OPENSSL_sk_insert, \
 AROS_LCA(OPENSSL_STACK *, (___sk), A0), \
 AROS_LCA(const void *, (___data), A1), \
 AROS_LCA(int, (___where), D0), \
     struct Library *, AMISSL_BASE_NAME, 1561, Amissl)

#define OPENSSL_sk_delete(___st, ___loc) \
      AROS_LC2(void *, OPENSSL_sk_delete, \
 AROS_LCA(OPENSSL_STACK *, (___st), A0), \
 AROS_LCA(int, (___loc), D0), \
     struct Library *, AMISSL_BASE_NAME, 1562, Amissl)

#define OPENSSL_sk_delete_ptr(___st, ___p) \
      AROS_LC2(void *, OPENSSL_sk_delete_ptr, \
 AROS_LCA(OPENSSL_STACK *, (___st), A0), \
 AROS_LCA(const void *, (___p), A1), \
     struct Library *, AMISSL_BASE_NAME, 1563, Amissl)

#define OPENSSL_sk_find(___st, ___data) \
      AROS_LC2(int, OPENSSL_sk_find, \
 AROS_LCA(OPENSSL_STACK *, (___st), A0), \
 AROS_LCA(const void *, (___data), A1), \
     struct Library *, AMISSL_BASE_NAME, 1564, Amissl)

#define OPENSSL_sk_push(___st, ___data) \
      AROS_LC2(int, OPENSSL_sk_push, \
 AROS_LCA(OPENSSL_STACK *, (___st), A0), \
 AROS_LCA(const void *, (___data), A1), \
     struct Library *, AMISSL_BASE_NAME, 1565, Amissl)

#define OPENSSL_sk_unshift(___st, ___data) \
      AROS_LC2(int, OPENSSL_sk_unshift, \
 AROS_LCA(OPENSSL_STACK *, (___st), A0), \
 AROS_LCA(const void *, (___data), A1), \
     struct Library *, AMISSL_BASE_NAME, 1566, Amissl)

#define OPENSSL_sk_shift(___st) \
      AROS_LC1(void *, OPENSSL_sk_shift, \
 AROS_LCA(OPENSSL_STACK *, (___st), A0), \
     struct Library *, AMISSL_BASE_NAME, 1567, Amissl)

#define OPENSSL_sk_pop(___st) \
      AROS_LC1(void *, OPENSSL_sk_pop, \
 AROS_LCA(OPENSSL_STACK *, (___st), A0), \
     struct Library *, AMISSL_BASE_NAME, 1568, Amissl)

#define OPENSSL_sk_zero(___st) \
      AROS_LC1(void, OPENSSL_sk_zero, \
 AROS_LCA(OPENSSL_STACK *, (___st), A0), \
     struct Library *, AMISSL_BASE_NAME, 1569, Amissl)

#define OPENSSL_sk_set_cmp_func(___sk, ___c) \
      AROS_LC2(int (*)(const void *, const void *), OPENSSL_sk_set_cmp_func, \
 AROS_LCA(OPENSSL_STACK *, (___sk), A0), \
 AROS_LCA(int (*)(const void *,const void *), (___c), A1), \
     struct Library *, AMISSL_BASE_NAME, 1570, Amissl)

#define OPENSSL_sk_dup(___st) \
      AROS_LC1(OPENSSL_STACK *, OPENSSL_sk_dup, \
 AROS_LCA(const OPENSSL_STACK *, (___st), A0), \
     struct Library *, AMISSL_BASE_NAME, 1571, Amissl)

#define OPENSSL_sk_sort(___st) \
      AROS_LC1(void, OPENSSL_sk_sort, \
 AROS_LCA(OPENSSL_STACK *, (___st), A0), \
     struct Library *, AMISSL_BASE_NAME, 1572, Amissl)

#define OPENSSL_sk_is_sorted(___st) \
      AROS_LC1(int, OPENSSL_sk_is_sorted, \
 AROS_LCA(const OPENSSL_STACK *, (___st), A0), \
     struct Library *, AMISSL_BASE_NAME, 1573, Amissl)

#define TXT_DB_read(___in, ___num) \
      AROS_LC2(TXT_DB *, TXT_DB_read, \
 AROS_LCA(BIO *, (___in), A0), \
 AROS_LCA(int, (___num), D0), \
     struct Library *, AMISSL_BASE_NAME, 1579, Amissl)

#define TXT_DB_write(___out, ___db) \
      AROS_LC2(long, TXT_DB_write, \
 AROS_LCA(BIO *, (___out), A0), \
 AROS_LCA(TXT_DB *, (___db), A1), \
     struct Library *, AMISSL_BASE_NAME, 1580, Amissl)

#define TXT_DB_create_index(___db, ___field, ___qual, ___hash, ___cmp) \
      AROS_LC5(int, TXT_DB_create_index, \
 AROS_LCA(TXT_DB *, (___db), A0), \
 AROS_LCA(int, (___field), D0), \
 AROS_LCA(int (*)(OPENSSL_STRING *), (___qual), A1), \
 AROS_LCA(OPENSSL_LH_HASHFUNC, (___hash), D1), \
 AROS_LCA(OPENSSL_LH_COMPFUNC, (___cmp), D2), \
     struct Library *, AMISSL_BASE_NAME, 1581, Amissl)

#define TXT_DB_free(___db) \
      AROS_LC1(void, TXT_DB_free, \
 AROS_LCA(TXT_DB *, (___db), A0), \
     struct Library *, AMISSL_BASE_NAME, 1582, Amissl)

#define TXT_DB_get_by_index(___db, ___idx, ___value) \
      AROS_LC3(char **, TXT_DB_get_by_index, \
 AROS_LCA(TXT_DB *, (___db), A0), \
 AROS_LCA(int, (___idx), D0), \
 AROS_LCA(char **, (___value), A1), \
     struct Library *, AMISSL_BASE_NAME, 1583, Amissl)

#define TXT_DB_insert(___db, ___value) \
      AROS_LC2(int, TXT_DB_insert, \
 AROS_LCA(TXT_DB *, (___db), A0), \
 AROS_LCA(char **, (___value), A1), \
     struct Library *, AMISSL_BASE_NAME, 1584, Amissl)

#define UI_new() \
      AROS_LC0(UI *, UI_new, \
     struct Library *, AMISSL_BASE_NAME, 1585, Amissl)

#define UI_new_method(___method) \
      AROS_LC1(UI *, UI_new_method, \
 AROS_LCA(const UI_METHOD *, (___method), A0), \
     struct Library *, AMISSL_BASE_NAME, 1586, Amissl)

#define UI_free(___ui) \
      AROS_LC1(void, UI_free, \
 AROS_LCA(UI *, (___ui), A0), \
     struct Library *, AMISSL_BASE_NAME, 1587, Amissl)

#define UI_add_input_string(___ui, ___prompt, ___flags, ___result_buf, ___minsize, ___maxsize) \
      AROS_LC6(int, UI_add_input_string, \
 AROS_LCA(UI *, (___ui), A0), \
 AROS_LCA(const char *, (___prompt), A1), \
 AROS_LCA(int, (___flags), D0), \
 AROS_LCA(char *, (___result_buf), A2), \
 AROS_LCA(int, (___minsize), D1), \
 AROS_LCA(int, (___maxsize), D2), \
     struct Library *, AMISSL_BASE_NAME, 1588, Amissl)

#define UI_dup_input_string(___ui, ___prompt, ___flags, ___result_buf, ___minsize, ___maxsize) \
      AROS_LC6(int, UI_dup_input_string, \
 AROS_LCA(UI *, (___ui), A0), \
 AROS_LCA(const char *, (___prompt), A1), \
 AROS_LCA(int, (___flags), D0), \
 AROS_LCA(char *, (___result_buf), A2), \
 AROS_LCA(int, (___minsize), D1), \
 AROS_LCA(int, (___maxsize), D2), \
     struct Library *, AMISSL_BASE_NAME, 1589, Amissl)

#define UI_add_verify_string(___ui, ___prompt, ___flags, ___result_buf, ___minsize, ___maxsize, ___test_buf) \
      AROS_LC7(int, UI_add_verify_string, \
 AROS_LCA(UI *, (___ui), A0), \
 AROS_LCA(const char *, (___prompt), A1), \
 AROS_LCA(int, (___flags), D0), \
 AROS_LCA(char *, (___result_buf), A2), \
 AROS_LCA(int, (___minsize), D1), \
 AROS_LCA(int, (___maxsize), D2), \
 AROS_LCA(const char *, (___test_buf), A3), \
     struct Library *, AMISSL_BASE_NAME, 1590, Amissl)

#define UI_dup_verify_string(___ui, ___prompt, ___flags, ___result_buf, ___minsize, ___maxsize, ___test_buf) \
      AROS_LC7(int, UI_dup_verify_string, \
 AROS_LCA(UI *, (___ui), A0), \
 AROS_LCA(const char *, (___prompt), A1), \
 AROS_LCA(int, (___flags), D0), \
 AROS_LCA(char *, (___result_buf), A2), \
 AROS_LCA(int, (___minsize), D1), \
 AROS_LCA(int, (___maxsize), D2), \
 AROS_LCA(const char *, (___test_buf), A3), \
     struct Library *, AMISSL_BASE_NAME, 1591, Amissl)

#define UI_add_input_boolean(___ui, ___prompt, ___action_desc, ___ok_chars, ___cancel_chars, ___flags, ___result_buf) \
      AROS_LC7(int, UI_add_input_boolean, \
 AROS_LCA(UI *, (___ui), A0), \
 AROS_LCA(const char *, (___prompt), A1), \
 AROS_LCA(const char *, (___action_desc), A2), \
 AROS_LCA(const char *, (___ok_chars), A3), \
 AROS_LCA(const char *, (___cancel_chars), D0), \
 AROS_LCA(int, (___flags), D1), \
 AROS_LCA(char *, (___result_buf), D2), \
     struct Library *, AMISSL_BASE_NAME, 1592, Amissl)

#define UI_dup_input_boolean(___ui, ___prompt, ___action_desc, ___ok_chars, ___cancel_chars, ___flags, ___result_buf) \
      AROS_LC7(int, UI_dup_input_boolean, \
 AROS_LCA(UI *, (___ui), A0), \
 AROS_LCA(const char *, (___prompt), A1), \
 AROS_LCA(const char *, (___action_desc), A2), \
 AROS_LCA(const char *, (___ok_chars), A3), \
 AROS_LCA(const char *, (___cancel_chars), D0), \
 AROS_LCA(int, (___flags), D1), \
 AROS_LCA(char *, (___result_buf), D2), \
     struct Library *, AMISSL_BASE_NAME, 1593, Amissl)

#define UI_add_info_string(___ui, ___text) \
      AROS_LC2(int, UI_add_info_string, \
 AROS_LCA(UI *, (___ui), A0), \
 AROS_LCA(const char *, (___text), A1), \
     struct Library *, AMISSL_BASE_NAME, 1594, Amissl)

#define UI_dup_info_string(___ui, ___text) \
      AROS_LC2(int, UI_dup_info_string, \
 AROS_LCA(UI *, (___ui), A0), \
 AROS_LCA(const char *, (___text), A1), \
     struct Library *, AMISSL_BASE_NAME, 1595, Amissl)

#define UI_add_error_string(___ui, ___text) \
      AROS_LC2(int, UI_add_error_string, \
 AROS_LCA(UI *, (___ui), A0), \
 AROS_LCA(const char *, (___text), A1), \
     struct Library *, AMISSL_BASE_NAME, 1596, Amissl)

#define UI_dup_error_string(___ui, ___text) \
      AROS_LC2(int, UI_dup_error_string, \
 AROS_LCA(UI *, (___ui), A0), \
 AROS_LCA(const char *, (___text), A1), \
     struct Library *, AMISSL_BASE_NAME, 1597, Amissl)

#define UI_construct_prompt(___ui_method, ___object_desc, ___object_name) \
      AROS_LC3(char *, UI_construct_prompt, \
 AROS_LCA(UI *, (___ui_method), A0), \
 AROS_LCA(const char *, (___object_desc), A1), \
 AROS_LCA(const char *, (___object_name), A2), \
     struct Library *, AMISSL_BASE_NAME, 1598, Amissl)

#define UI_add_user_data(___ui, ___user_data) \
      AROS_LC2(void *, UI_add_user_data, \
 AROS_LCA(UI *, (___ui), A0), \
 AROS_LCA(void *, (___user_data), A1), \
     struct Library *, AMISSL_BASE_NAME, 1599, Amissl)

#define UI_get0_user_data(___ui) \
      AROS_LC1(void *, UI_get0_user_data, \
 AROS_LCA(UI *, (___ui), A0), \
     struct Library *, AMISSL_BASE_NAME, 1600, Amissl)

#define UI_get0_result(___ui, ___i) \
      AROS_LC2(const char *, UI_get0_result, \
 AROS_LCA(UI *, (___ui), A0), \
 AROS_LCA(int, (___i), D0), \
     struct Library *, AMISSL_BASE_NAME, 1601, Amissl)

#define UI_process(___ui) \
      AROS_LC1(int, UI_process, \
 AROS_LCA(UI *, (___ui), A0), \
     struct Library *, AMISSL_BASE_NAME, 1602, Amissl)

#define UI_ctrl(___ui, ___cmd, ___i, ___p, ___f) \
      AROS_LC5(int, UI_ctrl, \
 AROS_LCA(UI *, (___ui), A0), \
 AROS_LCA(int, (___cmd), D0), \
 AROS_LCA(long, (___i), D1), \
 AROS_LCA(void *, (___p), A1), \
 AROS_LCA(void (*)(), (___f), A2), \
     struct Library *, AMISSL_BASE_NAME, 1603, Amissl)

#define OBSOLETE_UI_get_ex_new_index(___argl, ___argp, ___new_func, ___dup_func, ___free_func) \
      AROS_LC5(int, OBSOLETE_UI_get_ex_new_index, \
 AROS_LCA(long, (___argl), D0), \
 AROS_LCA(void *, (___argp), A0), \
 AROS_LCA(CRYPTO_EX_new *, (___new_func), A1), \
 AROS_LCA(CRYPTO_EX_dup *, (___dup_func), A2), \
 AROS_LCA(CRYPTO_EX_free *, (___free_func), A3), \
     struct Library *, AMISSL_BASE_NAME, 1604, Amissl)

#define UI_set_ex_data(___r, ___idx, ___arg) \
      AROS_LC3(int, UI_set_ex_data, \
 AROS_LCA(UI *, (___r), A0), \
 AROS_LCA(int, (___idx), D0), \
 AROS_LCA(void *, (___arg), A1), \
     struct Library *, AMISSL_BASE_NAME, 1605, Amissl)

#define UI_get_ex_data(___r, ___idx) \
      AROS_LC2(void *, UI_get_ex_data, \
 AROS_LCA(const UI *, (___r), A0), \
 AROS_LCA(int, (___idx), D0), \
     struct Library *, AMISSL_BASE_NAME, 1606, Amissl)

#define UI_set_default_method(___meth) \
      AROS_LC1(void, UI_set_default_method, \
 AROS_LCA(const UI_METHOD *, (___meth), A0), \
     struct Library *, AMISSL_BASE_NAME, 1607, Amissl)

#define UI_get_default_method() \
      AROS_LC0(const UI_METHOD *, UI_get_default_method, \
     struct Library *, AMISSL_BASE_NAME, 1608, Amissl)

#define UI_get_method(___ui) \
      AROS_LC1(const UI_METHOD *, UI_get_method, \
 AROS_LCA(UI *, (___ui), A0), \
     struct Library *, AMISSL_BASE_NAME, 1609, Amissl)

#define UI_set_method(___ui, ___meth) \
      AROS_LC2(const UI_METHOD *, UI_set_method, \
 AROS_LCA(UI *, (___ui), A0), \
 AROS_LCA(const UI_METHOD *, (___meth), A1), \
     struct Library *, AMISSL_BASE_NAME, 1610, Amissl)

#define UI_OpenSSL() \
      AROS_LC0(UI_METHOD *, UI_OpenSSL, \
     struct Library *, AMISSL_BASE_NAME, 1611, Amissl)

#define UI_create_method(___name) \
      AROS_LC1(UI_METHOD *, UI_create_method, \
 AROS_LCA(const char *, (___name), A0), \
     struct Library *, AMISSL_BASE_NAME, 1612, Amissl)

#define UI_destroy_method(___ui_method) \
      AROS_LC1(void, UI_destroy_method, \
 AROS_LCA(UI_METHOD *, (___ui_method), A0), \
     struct Library *, AMISSL_BASE_NAME, 1613, Amissl)

#define UI_method_set_opener(___method, ___opener) \
      AROS_LC2(int, UI_method_set_opener, \
 AROS_LCA(UI_METHOD *, (___method), A0), \
 AROS_LCA(int (*)(UI *ui), (___opener), A1), \
     struct Library *, AMISSL_BASE_NAME, 1614, Amissl)

#define UI_method_set_writer(___method, ___writer) \
      AROS_LC2(int, UI_method_set_writer, \
 AROS_LCA(UI_METHOD *, (___method), A0), \
 AROS_LCA(int (*)(UI *ui,UI_STRING *uis), (___writer), A1), \
     struct Library *, AMISSL_BASE_NAME, 1615, Amissl)

#define UI_method_set_flusher(___method, ___flusher) \
      AROS_LC2(int, UI_method_set_flusher, \
 AROS_LCA(UI_METHOD *, (___method), A0), \
 AROS_LCA(int (*)(UI *ui), (___flusher), A1), \
     struct Library *, AMISSL_BASE_NAME, 1616, Amissl)

#define UI_method_set_reader(___method, ___reader) \
      AROS_LC2(int, UI_method_set_reader, \
 AROS_LCA(UI_METHOD *, (___method), A0), \
 AROS_LCA(int (*)(UI *ui,UI_STRING *uis), (___reader), A1), \
     struct Library *, AMISSL_BASE_NAME, 1617, Amissl)

#define UI_method_set_closer(___method, ___closer) \
      AROS_LC2(int, UI_method_set_closer, \
 AROS_LCA(UI_METHOD *, (___method), A0), \
 AROS_LCA(int (*)(UI *ui), (___closer), A1), \
     struct Library *, AMISSL_BASE_NAME, 1618, Amissl)

#define UI_method_get_opener(___method) \
      AROS_LC1(int (*)(UI *), UI_method_get_opener, \
 AROS_LCA(const UI_METHOD *, (___method), A0), \
     struct Library *, AMISSL_BASE_NAME, 1619, Amissl)

#define UI_method_get_writer(___method) \
      AROS_LC1(int (*)(UI *, UI_STRING *), UI_method_get_writer, \
 AROS_LCA(const UI_METHOD *, (___method), A0), \
     struct Library *, AMISSL_BASE_NAME, 1620, Amissl)

#define UI_method_get_flusher(___method) \
      AROS_LC1(int (*)(UI *), UI_method_get_flusher, \
 AROS_LCA(const UI_METHOD *, (___method), A0), \
     struct Library *, AMISSL_BASE_NAME, 1621, Amissl)

#define UI_method_get_reader(___method) \
      AROS_LC1(int (*)(UI *, UI_STRING *), UI_method_get_reader, \
 AROS_LCA(const UI_METHOD *, (___method), A0), \
     struct Library *, AMISSL_BASE_NAME, 1622, Amissl)

#define UI_method_get_closer(___method) \
      AROS_LC1(int (*)(UI *), UI_method_get_closer, \
 AROS_LCA(const UI_METHOD *, (___method), A0), \
     struct Library *, AMISSL_BASE_NAME, 1623, Amissl)

#define UI_get_string_type(___uis) \
      AROS_LC1(enum UI_string_types, UI_get_string_type, \
 AROS_LCA(UI_STRING *, (___uis), A0), \
     struct Library *, AMISSL_BASE_NAME, 1624, Amissl)

#define UI_get_input_flags(___uis) \
      AROS_LC1(int, UI_get_input_flags, \
 AROS_LCA(UI_STRING *, (___uis), A0), \
     struct Library *, AMISSL_BASE_NAME, 1625, Amissl)

#define UI_get0_output_string(___uis) \
      AROS_LC1(const char *, UI_get0_output_string, \
 AROS_LCA(UI_STRING *, (___uis), A0), \
     struct Library *, AMISSL_BASE_NAME, 1626, Amissl)

#define UI_get0_action_string(___uis) \
      AROS_LC1(const char *, UI_get0_action_string, \
 AROS_LCA(UI_STRING *, (___uis), A0), \
     struct Library *, AMISSL_BASE_NAME, 1627, Amissl)

#define UI_get0_result_string(___uis) \
      AROS_LC1(const char *, UI_get0_result_string, \
 AROS_LCA(UI_STRING *, (___uis), A0), \
     struct Library *, AMISSL_BASE_NAME, 1628, Amissl)

#define UI_get0_test_string(___uis) \
      AROS_LC1(const char *, UI_get0_test_string, \
 AROS_LCA(UI_STRING *, (___uis), A0), \
     struct Library *, AMISSL_BASE_NAME, 1629, Amissl)

#define UI_get_result_minsize(___uis) \
      AROS_LC1(int, UI_get_result_minsize, \
 AROS_LCA(UI_STRING *, (___uis), A0), \
     struct Library *, AMISSL_BASE_NAME, 1630, Amissl)

#define UI_get_result_maxsize(___uis) \
      AROS_LC1(int, UI_get_result_maxsize, \
 AROS_LCA(UI_STRING *, (___uis), A0), \
     struct Library *, AMISSL_BASE_NAME, 1631, Amissl)

#define UI_set_result(___ui, ___uis, ___result) \
      AROS_LC3(int, UI_set_result, \
 AROS_LCA(UI *, (___ui), A0), \
 AROS_LCA(UI_STRING *, (___uis), A1), \
 AROS_LCA(const char *, (___result), A2), \
     struct Library *, AMISSL_BASE_NAME, 1632, Amissl)

#define UI_UTIL_read_pw_string(___buf, ___length, ___prompt, ___verify) \
      AROS_LC4(int, UI_UTIL_read_pw_string, \
 AROS_LCA(char *, (___buf), A0), \
 AROS_LCA(int, (___length), D0), \
 AROS_LCA(const char *, (___prompt), A1), \
 AROS_LCA(int, (___verify), D1), \
     struct Library *, AMISSL_BASE_NAME, 1633, Amissl)

#define UI_UTIL_read_pw(___buf, ___buff, ___size, ___prompt, ___verify) \
      AROS_LC5(int, UI_UTIL_read_pw, \
 AROS_LCA(char *, (___buf), A0), \
 AROS_LCA(char *, (___buff), A1), \
 AROS_LCA(int, (___size), D0), \
 AROS_LCA(const char *, (___prompt), A2), \
 AROS_LCA(int, (___verify), D1), \
     struct Library *, AMISSL_BASE_NAME, 1634, Amissl)

#define ERR_load_UI_strings() \
      AROS_LC0(int, ERR_load_UI_strings, \
     struct Library *, AMISSL_BASE_NAME, 1635, Amissl)

#define X509_verify_cert_error_string(___n) \
      AROS_LC1(const char *, X509_verify_cert_error_string, \
 AROS_LCA(long, (___n), D0), \
     struct Library *, AMISSL_BASE_NAME, 1638, Amissl)

#define X509_verify(___a, ___r) \
      AROS_LC2(int, X509_verify, \
 AROS_LCA(X509 *, (___a), A0), \
 AROS_LCA(EVP_PKEY *, (___r), A1), \
     struct Library *, AMISSL_BASE_NAME, 1639, Amissl)

#define X509_REQ_verify(___a, ___r) \
      AROS_LC2(int, X509_REQ_verify, \
 AROS_LCA(X509_REQ *, (___a), A0), \
 AROS_LCA(EVP_PKEY *, (___r), A1), \
     struct Library *, AMISSL_BASE_NAME, 1640, Amissl)

#define X509_CRL_verify(___a, ___r) \
      AROS_LC2(int, X509_CRL_verify, \
 AROS_LCA(X509_CRL *, (___a), A0), \
 AROS_LCA(EVP_PKEY *, (___r), A1), \
     struct Library *, AMISSL_BASE_NAME, 1641, Amissl)

#define NETSCAPE_SPKI_verify(___a, ___r) \
      AROS_LC2(int, NETSCAPE_SPKI_verify, \
 AROS_LCA(NETSCAPE_SPKI *, (___a), A0), \
 AROS_LCA(EVP_PKEY *, (___r), A1), \
     struct Library *, AMISSL_BASE_NAME, 1642, Amissl)

#define NETSCAPE_SPKI_b64_decode(___str, ___len) \
      AROS_LC2(NETSCAPE_SPKI *, NETSCAPE_SPKI_b64_decode, \
 AROS_LCA(const char *, (___str), A0), \
 AROS_LCA(int, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 1643, Amissl)

#define NETSCAPE_SPKI_b64_encode(___x) \
      AROS_LC1(char *, NETSCAPE_SPKI_b64_encode, \
 AROS_LCA(NETSCAPE_SPKI *, (___x), A0), \
     struct Library *, AMISSL_BASE_NAME, 1644, Amissl)

#define NETSCAPE_SPKI_get_pubkey(___x) \
      AROS_LC1(EVP_PKEY *, NETSCAPE_SPKI_get_pubkey, \
 AROS_LCA(NETSCAPE_SPKI *, (___x), A0), \
     struct Library *, AMISSL_BASE_NAME, 1645, Amissl)

#define NETSCAPE_SPKI_set_pubkey(___x, ___pkey) \
      AROS_LC2(int, NETSCAPE_SPKI_set_pubkey, \
 AROS_LCA(NETSCAPE_SPKI *, (___x), A0), \
 AROS_LCA(EVP_PKEY *, (___pkey), A1), \
     struct Library *, AMISSL_BASE_NAME, 1646, Amissl)

#define NETSCAPE_SPKI_print(___out, ___spki) \
      AROS_LC2(int, NETSCAPE_SPKI_print, \
 AROS_LCA(BIO *, (___out), A0), \
 AROS_LCA(NETSCAPE_SPKI *, (___spki), A1), \
     struct Library *, AMISSL_BASE_NAME, 1647, Amissl)

#define X509_signature_print(___bp, ___alg, ___sig) \
      AROS_LC3(int, X509_signature_print, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(const X509_ALGOR *, (___alg), A1), \
 AROS_LCA(const ASN1_STRING *, (___sig), A2), \
     struct Library *, AMISSL_BASE_NAME, 1648, Amissl)

#define X509_sign(___x, ___pkey, ___md) \
      AROS_LC3(int, X509_sign, \
 AROS_LCA(X509 *, (___x), A0), \
 AROS_LCA(EVP_PKEY *, (___pkey), A1), \
 AROS_LCA(const EVP_MD *, (___md), A2), \
     struct Library *, AMISSL_BASE_NAME, 1649, Amissl)

#define X509_REQ_sign(___x, ___pkey, ___md) \
      AROS_LC3(int, X509_REQ_sign, \
 AROS_LCA(X509_REQ *, (___x), A0), \
 AROS_LCA(EVP_PKEY *, (___pkey), A1), \
 AROS_LCA(const EVP_MD *, (___md), A2), \
     struct Library *, AMISSL_BASE_NAME, 1650, Amissl)

#define X509_CRL_sign(___x, ___pkey, ___md) \
      AROS_LC3(int, X509_CRL_sign, \
 AROS_LCA(X509_CRL *, (___x), A0), \
 AROS_LCA(EVP_PKEY *, (___pkey), A1), \
 AROS_LCA(const EVP_MD *, (___md), A2), \
     struct Library *, AMISSL_BASE_NAME, 1651, Amissl)

#define NETSCAPE_SPKI_sign(___x, ___pkey, ___md) \
      AROS_LC3(int, NETSCAPE_SPKI_sign, \
 AROS_LCA(NETSCAPE_SPKI *, (___x), A0), \
 AROS_LCA(EVP_PKEY *, (___pkey), A1), \
 AROS_LCA(const EVP_MD *, (___md), A2), \
     struct Library *, AMISSL_BASE_NAME, 1652, Amissl)

#define X509_pubkey_digest(___data, ___type, ___md, ___len) \
      AROS_LC4(int, X509_pubkey_digest, \
 AROS_LCA(const X509 *, (___data), A0), \
 AROS_LCA(const EVP_MD *, (___type), A1), \
 AROS_LCA(unsigned char *, (___md), A2), \
 AROS_LCA(unsigned int *, (___len), A3), \
     struct Library *, AMISSL_BASE_NAME, 1653, Amissl)

#define X509_digest(___data, ___type, ___md, ___len) \
      AROS_LC4(int, X509_digest, \
 AROS_LCA(const X509 *, (___data), A0), \
 AROS_LCA(const EVP_MD *, (___type), A1), \
 AROS_LCA(unsigned char *, (___md), A2), \
 AROS_LCA(unsigned int *, (___len), A3), \
     struct Library *, AMISSL_BASE_NAME, 1654, Amissl)

#define X509_CRL_digest(___data, ___type, ___md, ___len) \
      AROS_LC4(int, X509_CRL_digest, \
 AROS_LCA(const X509_CRL *, (___data), A0), \
 AROS_LCA(const EVP_MD *, (___type), A1), \
 AROS_LCA(unsigned char *, (___md), A2), \
 AROS_LCA(unsigned int *, (___len), A3), \
     struct Library *, AMISSL_BASE_NAME, 1655, Amissl)

#define X509_REQ_digest(___data, ___type, ___md, ___len) \
      AROS_LC4(int, X509_REQ_digest, \
 AROS_LCA(const X509_REQ *, (___data), A0), \
 AROS_LCA(const EVP_MD *, (___type), A1), \
 AROS_LCA(unsigned char *, (___md), A2), \
 AROS_LCA(unsigned int *, (___len), A3), \
     struct Library *, AMISSL_BASE_NAME, 1656, Amissl)

#define X509_NAME_digest(___data, ___type, ___md, ___len) \
      AROS_LC4(int, X509_NAME_digest, \
 AROS_LCA(const X509_NAME *, (___data), A0), \
 AROS_LCA(const EVP_MD *, (___type), A1), \
 AROS_LCA(unsigned char *, (___md), A2), \
 AROS_LCA(unsigned int *, (___len), A3), \
     struct Library *, AMISSL_BASE_NAME, 1657, Amissl)

#define d2i_X509_bio(___bp, ___x509) \
      AROS_LC2(X509 *, d2i_X509_bio, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(X509 **, (___x509), A1), \
     struct Library *, AMISSL_BASE_NAME, 1658, Amissl)

#define i2d_X509_bio(___bp, ___x509) \
      AROS_LC2(int, i2d_X509_bio, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(const X509 *, (___x509), A1), \
     struct Library *, AMISSL_BASE_NAME, 1659, Amissl)

#define d2i_X509_CRL_bio(___bp, ___crl) \
      AROS_LC2(X509_CRL *, d2i_X509_CRL_bio, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(X509_CRL **, (___crl), A1), \
     struct Library *, AMISSL_BASE_NAME, 1660, Amissl)

#define i2d_X509_CRL_bio(___bp, ___crl) \
      AROS_LC2(int, i2d_X509_CRL_bio, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(const X509_CRL *, (___crl), A1), \
     struct Library *, AMISSL_BASE_NAME, 1661, Amissl)

#define d2i_X509_REQ_bio(___bp, ___req) \
      AROS_LC2(X509_REQ *, d2i_X509_REQ_bio, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(X509_REQ **, (___req), A1), \
     struct Library *, AMISSL_BASE_NAME, 1662, Amissl)

#define i2d_X509_REQ_bio(___bp, ___req) \
      AROS_LC2(int, i2d_X509_REQ_bio, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(const X509_REQ *, (___req), A1), \
     struct Library *, AMISSL_BASE_NAME, 1663, Amissl)

#define d2i_RSAPrivateKey_bio(___bp, ___rsa) \
      AROS_LC2(RSA *, d2i_RSAPrivateKey_bio, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(RSA **, (___rsa), A1), \
     struct Library *, AMISSL_BASE_NAME, 1664, Amissl)

#define i2d_RSAPrivateKey_bio(___bp, ___rsa) \
      AROS_LC2(int, i2d_RSAPrivateKey_bio, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(const RSA *, (___rsa), A1), \
     struct Library *, AMISSL_BASE_NAME, 1665, Amissl)

#define d2i_RSAPublicKey_bio(___bp, ___rsa) \
      AROS_LC2(RSA *, d2i_RSAPublicKey_bio, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(RSA **, (___rsa), A1), \
     struct Library *, AMISSL_BASE_NAME, 1666, Amissl)

#define i2d_RSAPublicKey_bio(___bp, ___rsa) \
      AROS_LC2(int, i2d_RSAPublicKey_bio, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(const RSA *, (___rsa), A1), \
     struct Library *, AMISSL_BASE_NAME, 1667, Amissl)

#define d2i_RSA_PUBKEY_bio(___bp, ___rsa) \
      AROS_LC2(RSA *, d2i_RSA_PUBKEY_bio, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(RSA **, (___rsa), A1), \
     struct Library *, AMISSL_BASE_NAME, 1668, Amissl)

#define i2d_RSA_PUBKEY_bio(___bp, ___rsa) \
      AROS_LC2(int, i2d_RSA_PUBKEY_bio, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(const RSA *, (___rsa), A1), \
     struct Library *, AMISSL_BASE_NAME, 1669, Amissl)

#define d2i_DSA_PUBKEY_bio(___bp, ___dsa) \
      AROS_LC2(DSA *, d2i_DSA_PUBKEY_bio, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(DSA **, (___dsa), A1), \
     struct Library *, AMISSL_BASE_NAME, 1670, Amissl)

#define i2d_DSA_PUBKEY_bio(___bp, ___dsa) \
      AROS_LC2(int, i2d_DSA_PUBKEY_bio, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(const DSA *, (___dsa), A1), \
     struct Library *, AMISSL_BASE_NAME, 1671, Amissl)

#define d2i_DSAPrivateKey_bio(___bp, ___dsa) \
      AROS_LC2(DSA *, d2i_DSAPrivateKey_bio, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(DSA **, (___dsa), A1), \
     struct Library *, AMISSL_BASE_NAME, 1672, Amissl)

#define i2d_DSAPrivateKey_bio(___bp, ___dsa) \
      AROS_LC2(int, i2d_DSAPrivateKey_bio, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(const DSA *, (___dsa), A1), \
     struct Library *, AMISSL_BASE_NAME, 1673, Amissl)

#define d2i_PKCS8_bio(___bp, ___p8) \
      AROS_LC2(X509_SIG *, d2i_PKCS8_bio, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(X509_SIG **, (___p8), A1), \
     struct Library *, AMISSL_BASE_NAME, 1674, Amissl)

#define i2d_PKCS8_bio(___bp, ___p8) \
      AROS_LC2(int, i2d_PKCS8_bio, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(const X509_SIG *, (___p8), A1), \
     struct Library *, AMISSL_BASE_NAME, 1675, Amissl)

#define d2i_PKCS8_PRIV_KEY_INFO_bio(___bp, ___p8inf) \
      AROS_LC2(PKCS8_PRIV_KEY_INFO *, d2i_PKCS8_PRIV_KEY_INFO_bio, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(PKCS8_PRIV_KEY_INFO **, (___p8inf), A1), \
     struct Library *, AMISSL_BASE_NAME, 1676, Amissl)

#define i2d_PKCS8_PRIV_KEY_INFO_bio(___bp, ___p8inf) \
      AROS_LC2(int, i2d_PKCS8_PRIV_KEY_INFO_bio, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(const PKCS8_PRIV_KEY_INFO *, (___p8inf), A1), \
     struct Library *, AMISSL_BASE_NAME, 1677, Amissl)

#define i2d_PKCS8PrivateKeyInfo_bio(___bp, ___key) \
      AROS_LC2(int, i2d_PKCS8PrivateKeyInfo_bio, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(const EVP_PKEY *, (___key), A1), \
     struct Library *, AMISSL_BASE_NAME, 1678, Amissl)

#define i2d_PrivateKey_bio(___bp, ___pkey) \
      AROS_LC2(int, i2d_PrivateKey_bio, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(const EVP_PKEY *, (___pkey), A1), \
     struct Library *, AMISSL_BASE_NAME, 1679, Amissl)

#define d2i_PrivateKey_bio(___bp, ___a) \
      AROS_LC2(EVP_PKEY *, d2i_PrivateKey_bio, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(EVP_PKEY **, (___a), A1), \
     struct Library *, AMISSL_BASE_NAME, 1680, Amissl)

#define i2d_PUBKEY_bio(___bp, ___pkey) \
      AROS_LC2(int, i2d_PUBKEY_bio, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(const EVP_PKEY *, (___pkey), A1), \
     struct Library *, AMISSL_BASE_NAME, 1681, Amissl)

#define d2i_PUBKEY_bio(___bp, ___a) \
      AROS_LC2(EVP_PKEY *, d2i_PUBKEY_bio, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(EVP_PKEY **, (___a), A1), \
     struct Library *, AMISSL_BASE_NAME, 1682, Amissl)

#define X509_dup(___x509) \
      AROS_LC1(X509 *, X509_dup, \
 AROS_LCA(const X509 *, (___x509), A0), \
     struct Library *, AMISSL_BASE_NAME, 1683, Amissl)

#define X509_ATTRIBUTE_dup(___xa) \
      AROS_LC1(X509_ATTRIBUTE *, X509_ATTRIBUTE_dup, \
 AROS_LCA(const X509_ATTRIBUTE *, (___xa), A0), \
     struct Library *, AMISSL_BASE_NAME, 1684, Amissl)

#define X509_EXTENSION_dup(___ex) \
      AROS_LC1(X509_EXTENSION *, X509_EXTENSION_dup, \
 AROS_LCA(const X509_EXTENSION *, (___ex), A0), \
     struct Library *, AMISSL_BASE_NAME, 1685, Amissl)

#define X509_CRL_dup(___crl) \
      AROS_LC1(X509_CRL *, X509_CRL_dup, \
 AROS_LCA(const X509_CRL *, (___crl), A0), \
     struct Library *, AMISSL_BASE_NAME, 1686, Amissl)

#define X509_REQ_dup(___req) \
      AROS_LC1(X509_REQ *, X509_REQ_dup, \
 AROS_LCA(const X509_REQ *, (___req), A0), \
     struct Library *, AMISSL_BASE_NAME, 1687, Amissl)

#define X509_ALGOR_dup(___xn) \
      AROS_LC1(X509_ALGOR *, X509_ALGOR_dup, \
 AROS_LCA(const X509_ALGOR *, (___xn), A0), \
     struct Library *, AMISSL_BASE_NAME, 1688, Amissl)

#define X509_NAME_dup(___xn) \
      AROS_LC1(X509_NAME *, X509_NAME_dup, \
 AROS_LCA(const X509_NAME *, (___xn), A0), \
     struct Library *, AMISSL_BASE_NAME, 1689, Amissl)

#define X509_NAME_ENTRY_dup(___ne) \
      AROS_LC1(X509_NAME_ENTRY *, X509_NAME_ENTRY_dup, \
 AROS_LCA(const X509_NAME_ENTRY *, (___ne), A0), \
     struct Library *, AMISSL_BASE_NAME, 1690, Amissl)

#define X509_cmp_time(___s, ___t) \
      AROS_LC2(int, X509_cmp_time, \
 AROS_LCA(const ASN1_TIME *, (___s), A0), \
 AROS_LCA(time_t *, (___t), A1), \
     struct Library *, AMISSL_BASE_NAME, 1691, Amissl)

#define X509_cmp_current_time(___s) \
      AROS_LC1(int, X509_cmp_current_time, \
 AROS_LCA(const ASN1_TIME *, (___s), A0), \
     struct Library *, AMISSL_BASE_NAME, 1692, Amissl)

#define X509_time_adj(___s, ___adj, ___t) \
      AROS_LC3(ASN1_TIME *, X509_time_adj, \
 AROS_LCA(ASN1_TIME *, (___s), A0), \
 AROS_LCA(long, (___adj), D0), \
 AROS_LCA(time_t *, (___t), A1), \
     struct Library *, AMISSL_BASE_NAME, 1693, Amissl)

#define X509_gmtime_adj(___s, ___adj) \
      AROS_LC2(ASN1_TIME *, X509_gmtime_adj, \
 AROS_LCA(ASN1_TIME *, (___s), A0), \
 AROS_LCA(long, (___adj), D0), \
     struct Library *, AMISSL_BASE_NAME, 1694, Amissl)

#define X509_get_default_cert_area() \
      AROS_LC0(const char *, X509_get_default_cert_area, \
     struct Library *, AMISSL_BASE_NAME, 1695, Amissl)

#define X509_get_default_cert_dir() \
      AROS_LC0(const char *, X509_get_default_cert_dir, \
     struct Library *, AMISSL_BASE_NAME, 1696, Amissl)

#define X509_get_default_cert_file() \
      AROS_LC0(const char *, X509_get_default_cert_file, \
     struct Library *, AMISSL_BASE_NAME, 1697, Amissl)

#define X509_get_default_cert_dir_env() \
      AROS_LC0(const char *, X509_get_default_cert_dir_env, \
     struct Library *, AMISSL_BASE_NAME, 1698, Amissl)

#define X509_get_default_cert_file_env() \
      AROS_LC0(const char *, X509_get_default_cert_file_env, \
     struct Library *, AMISSL_BASE_NAME, 1699, Amissl)

#define X509_get_default_private_dir() \
      AROS_LC0(const char *, X509_get_default_private_dir, \
     struct Library *, AMISSL_BASE_NAME, 1700, Amissl)

#define X509_to_X509_REQ(___x, ___pkey, ___md) \
      AROS_LC3(X509_REQ *, X509_to_X509_REQ, \
 AROS_LCA(X509 *, (___x), A0), \
 AROS_LCA(EVP_PKEY *, (___pkey), A1), \
 AROS_LCA(const EVP_MD *, (___md), A2), \
     struct Library *, AMISSL_BASE_NAME, 1701, Amissl)

#define X509_REQ_to_X509(___r, ___days, ___pkey) \
      AROS_LC3(X509 *, X509_REQ_to_X509, \
 AROS_LCA(X509_REQ *, (___r), A0), \
 AROS_LCA(int, (___days), D0), \
 AROS_LCA(EVP_PKEY *, (___pkey), A1), \
     struct Library *, AMISSL_BASE_NAME, 1702, Amissl)

#define X509_ALGOR_new() \
      AROS_LC0(X509_ALGOR *, X509_ALGOR_new, \
     struct Library *, AMISSL_BASE_NAME, 1703, Amissl)

#define X509_ALGOR_free(___a) \
      AROS_LC1(void, X509_ALGOR_free, \
 AROS_LCA(X509_ALGOR *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 1704, Amissl)

#define d2i_X509_ALGOR(___a, ___in, ___len) \
      AROS_LC3(X509_ALGOR *, d2i_X509_ALGOR, \
 AROS_LCA(X509_ALGOR **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 1705, Amissl)

#define i2d_X509_ALGOR(___a, ___out) \
      AROS_LC2(int, i2d_X509_ALGOR, \
 AROS_LCA(const X509_ALGOR *, (___a), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 1706, Amissl)

#define X509_ALGOR_it() \
      AROS_LC0(const ASN1_ITEM *, X509_ALGOR_it, \
     struct Library *, AMISSL_BASE_NAME, 1707, Amissl)

#define X509_VAL_new() \
      AROS_LC0(X509_VAL *, X509_VAL_new, \
     struct Library *, AMISSL_BASE_NAME, 1708, Amissl)

#define X509_VAL_free(___a) \
      AROS_LC1(void, X509_VAL_free, \
 AROS_LCA(X509_VAL *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 1709, Amissl)

#define d2i_X509_VAL(___a, ___in, ___len) \
      AROS_LC3(X509_VAL *, d2i_X509_VAL, \
 AROS_LCA(X509_VAL **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 1710, Amissl)

#define i2d_X509_VAL(___a, ___out) \
      AROS_LC2(int, i2d_X509_VAL, \
 AROS_LCA(const X509_VAL *, (___a), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 1711, Amissl)

#define X509_VAL_it() \
      AROS_LC0(const ASN1_ITEM *, X509_VAL_it, \
     struct Library *, AMISSL_BASE_NAME, 1712, Amissl)

#define X509_PUBKEY_new() \
      AROS_LC0(X509_PUBKEY *, X509_PUBKEY_new, \
     struct Library *, AMISSL_BASE_NAME, 1713, Amissl)

#define X509_PUBKEY_free(___a) \
      AROS_LC1(void, X509_PUBKEY_free, \
 AROS_LCA(X509_PUBKEY *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 1714, Amissl)

#define d2i_X509_PUBKEY(___a, ___in, ___len) \
      AROS_LC3(X509_PUBKEY *, d2i_X509_PUBKEY, \
 AROS_LCA(X509_PUBKEY **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 1715, Amissl)

#define i2d_X509_PUBKEY(___a, ___out) \
      AROS_LC2(int, i2d_X509_PUBKEY, \
 AROS_LCA(const X509_PUBKEY *, (___a), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 1716, Amissl)

#define X509_PUBKEY_it() \
      AROS_LC0(const ASN1_ITEM *, X509_PUBKEY_it, \
     struct Library *, AMISSL_BASE_NAME, 1717, Amissl)

#define X509_PUBKEY_set(___x, ___pkey) \
      AROS_LC2(int, X509_PUBKEY_set, \
 AROS_LCA(X509_PUBKEY **, (___x), A0), \
 AROS_LCA(EVP_PKEY *, (___pkey), A1), \
     struct Library *, AMISSL_BASE_NAME, 1718, Amissl)

#define X509_PUBKEY_get(___key) \
      AROS_LC1(EVP_PKEY *, X509_PUBKEY_get, \
 AROS_LCA(const X509_PUBKEY *, (___key), A0), \
     struct Library *, AMISSL_BASE_NAME, 1719, Amissl)

#define X509_get_pubkey_parameters(___pkey, ___chain) \
      AROS_LC2(int, X509_get_pubkey_parameters, \
 AROS_LCA(EVP_PKEY *, (___pkey), A0), \
 AROS_LCA(STACK_OF(X509) *, (___chain), A1), \
     struct Library *, AMISSL_BASE_NAME, 1720, Amissl)

#define i2d_PUBKEY(___a, ___pp) \
      AROS_LC2(int, i2d_PUBKEY, \
 AROS_LCA(const EVP_PKEY *, (___a), A0), \
 AROS_LCA(unsigned char **, (___pp), A1), \
     struct Library *, AMISSL_BASE_NAME, 1721, Amissl)

#define d2i_PUBKEY(___a, ___pp, ___length) \
      AROS_LC3(EVP_PKEY *, d2i_PUBKEY, \
 AROS_LCA(EVP_PKEY **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___pp), A1), \
 AROS_LCA(long, (___length), D0), \
     struct Library *, AMISSL_BASE_NAME, 1722, Amissl)

#define i2d_RSA_PUBKEY(___a, ___pp) \
      AROS_LC2(int, i2d_RSA_PUBKEY, \
 AROS_LCA(const RSA *, (___a), A0), \
 AROS_LCA(unsigned char **, (___pp), A1), \
     struct Library *, AMISSL_BASE_NAME, 1723, Amissl)

#define d2i_RSA_PUBKEY(___a, ___pp, ___length) \
      AROS_LC3(RSA *, d2i_RSA_PUBKEY, \
 AROS_LCA(RSA **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___pp), A1), \
 AROS_LCA(long, (___length), D0), \
     struct Library *, AMISSL_BASE_NAME, 1724, Amissl)

#define i2d_DSA_PUBKEY(___a, ___pp) \
      AROS_LC2(int, i2d_DSA_PUBKEY, \
 AROS_LCA(const DSA *, (___a), A0), \
 AROS_LCA(unsigned char **, (___pp), A1), \
     struct Library *, AMISSL_BASE_NAME, 1725, Amissl)

#define d2i_DSA_PUBKEY(___a, ___pp, ___length) \
      AROS_LC3(DSA *, d2i_DSA_PUBKEY, \
 AROS_LCA(DSA **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___pp), A1), \
 AROS_LCA(long, (___length), D0), \
     struct Library *, AMISSL_BASE_NAME, 1726, Amissl)

#define X509_SIG_new() \
      AROS_LC0(X509_SIG *, X509_SIG_new, \
     struct Library *, AMISSL_BASE_NAME, 1727, Amissl)

#define X509_SIG_free(___a) \
      AROS_LC1(void, X509_SIG_free, \
 AROS_LCA(X509_SIG *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 1728, Amissl)

#define d2i_X509_SIG(___a, ___in, ___len) \
      AROS_LC3(X509_SIG *, d2i_X509_SIG, \
 AROS_LCA(X509_SIG **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 1729, Amissl)

#define i2d_X509_SIG(___a, ___out) \
      AROS_LC2(int, i2d_X509_SIG, \
 AROS_LCA(const X509_SIG *, (___a), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 1730, Amissl)

#define X509_SIG_it() \
      AROS_LC0(const ASN1_ITEM *, X509_SIG_it, \
     struct Library *, AMISSL_BASE_NAME, 1731, Amissl)

#define X509_REQ_INFO_new() \
      AROS_LC0(X509_REQ_INFO *, X509_REQ_INFO_new, \
     struct Library *, AMISSL_BASE_NAME, 1732, Amissl)

#define X509_REQ_INFO_free(___a) \
      AROS_LC1(void, X509_REQ_INFO_free, \
 AROS_LCA(X509_REQ_INFO *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 1733, Amissl)

#define d2i_X509_REQ_INFO(___a, ___in, ___len) \
      AROS_LC3(X509_REQ_INFO *, d2i_X509_REQ_INFO, \
 AROS_LCA(X509_REQ_INFO **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 1734, Amissl)

#define i2d_X509_REQ_INFO(___a, ___out) \
      AROS_LC2(int, i2d_X509_REQ_INFO, \
 AROS_LCA(const X509_REQ_INFO *, (___a), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 1735, Amissl)

#define X509_REQ_INFO_it() \
      AROS_LC0(const ASN1_ITEM *, X509_REQ_INFO_it, \
     struct Library *, AMISSL_BASE_NAME, 1736, Amissl)

#define X509_REQ_new() \
      AROS_LC0(X509_REQ *, X509_REQ_new, \
     struct Library *, AMISSL_BASE_NAME, 1737, Amissl)

#define X509_REQ_free(___a) \
      AROS_LC1(void, X509_REQ_free, \
 AROS_LCA(X509_REQ *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 1738, Amissl)

#define d2i_X509_REQ(___a, ___in, ___len) \
      AROS_LC3(X509_REQ *, d2i_X509_REQ, \
 AROS_LCA(X509_REQ **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 1739, Amissl)

#define i2d_X509_REQ(___a, ___out) \
      AROS_LC2(int, i2d_X509_REQ, \
 AROS_LCA(const X509_REQ *, (___a), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 1740, Amissl)

#define X509_REQ_it() \
      AROS_LC0(const ASN1_ITEM *, X509_REQ_it, \
     struct Library *, AMISSL_BASE_NAME, 1741, Amissl)

#define X509_ATTRIBUTE_new() \
      AROS_LC0(X509_ATTRIBUTE *, X509_ATTRIBUTE_new, \
     struct Library *, AMISSL_BASE_NAME, 1742, Amissl)

#define X509_ATTRIBUTE_free(___a) \
      AROS_LC1(void, X509_ATTRIBUTE_free, \
 AROS_LCA(X509_ATTRIBUTE *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 1743, Amissl)

#define d2i_X509_ATTRIBUTE(___a, ___in, ___len) \
      AROS_LC3(X509_ATTRIBUTE *, d2i_X509_ATTRIBUTE, \
 AROS_LCA(X509_ATTRIBUTE **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 1744, Amissl)

#define i2d_X509_ATTRIBUTE(___a, ___out) \
      AROS_LC2(int, i2d_X509_ATTRIBUTE, \
 AROS_LCA(const X509_ATTRIBUTE *, (___a), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 1745, Amissl)

#define X509_ATTRIBUTE_it() \
      AROS_LC0(const ASN1_ITEM *, X509_ATTRIBUTE_it, \
     struct Library *, AMISSL_BASE_NAME, 1746, Amissl)

#define X509_ATTRIBUTE_create(___nid, ___atrtype, ___value) \
      AROS_LC3(X509_ATTRIBUTE *, X509_ATTRIBUTE_create, \
 AROS_LCA(int, (___nid), D0), \
 AROS_LCA(int, (___atrtype), D1), \
 AROS_LCA(void *, (___value), A0), \
     struct Library *, AMISSL_BASE_NAME, 1747, Amissl)

#define X509_EXTENSION_new() \
      AROS_LC0(X509_EXTENSION *, X509_EXTENSION_new, \
     struct Library *, AMISSL_BASE_NAME, 1748, Amissl)

#define X509_EXTENSION_free(___a) \
      AROS_LC1(void, X509_EXTENSION_free, \
 AROS_LCA(X509_EXTENSION *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 1749, Amissl)

#define d2i_X509_EXTENSION(___a, ___in, ___len) \
      AROS_LC3(X509_EXTENSION *, d2i_X509_EXTENSION, \
 AROS_LCA(X509_EXTENSION **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 1750, Amissl)

#define i2d_X509_EXTENSION(___a, ___out) \
      AROS_LC2(int, i2d_X509_EXTENSION, \
 AROS_LCA(const X509_EXTENSION *, (___a), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 1751, Amissl)

#define X509_EXTENSION_it() \
      AROS_LC0(const ASN1_ITEM *, X509_EXTENSION_it, \
     struct Library *, AMISSL_BASE_NAME, 1752, Amissl)

#define X509_NAME_ENTRY_new() \
      AROS_LC0(X509_NAME_ENTRY *, X509_NAME_ENTRY_new, \
     struct Library *, AMISSL_BASE_NAME, 1753, Amissl)

#define X509_NAME_ENTRY_free(___a) \
      AROS_LC1(void, X509_NAME_ENTRY_free, \
 AROS_LCA(X509_NAME_ENTRY *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 1754, Amissl)

#define d2i_X509_NAME_ENTRY(___a, ___in, ___len) \
      AROS_LC3(X509_NAME_ENTRY *, d2i_X509_NAME_ENTRY, \
 AROS_LCA(X509_NAME_ENTRY **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 1755, Amissl)

#define i2d_X509_NAME_ENTRY(___a, ___out) \
      AROS_LC2(int, i2d_X509_NAME_ENTRY, \
 AROS_LCA(const X509_NAME_ENTRY *, (___a), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 1756, Amissl)

#define X509_NAME_ENTRY_it() \
      AROS_LC0(const ASN1_ITEM *, X509_NAME_ENTRY_it, \
     struct Library *, AMISSL_BASE_NAME, 1757, Amissl)

#define X509_NAME_new() \
      AROS_LC0(X509_NAME *, X509_NAME_new, \
     struct Library *, AMISSL_BASE_NAME, 1758, Amissl)

#define X509_NAME_free(___a) \
      AROS_LC1(void, X509_NAME_free, \
 AROS_LCA(X509_NAME *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 1759, Amissl)

#define d2i_X509_NAME(___a, ___in, ___len) \
      AROS_LC3(X509_NAME *, d2i_X509_NAME, \
 AROS_LCA(X509_NAME **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 1760, Amissl)

#define i2d_X509_NAME(___a, ___out) \
      AROS_LC2(int, i2d_X509_NAME, \
 AROS_LCA(const X509_NAME *, (___a), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 1761, Amissl)

#define X509_NAME_it() \
      AROS_LC0(const ASN1_ITEM *, X509_NAME_it, \
     struct Library *, AMISSL_BASE_NAME, 1762, Amissl)

#define X509_NAME_set(___xn, ___name) \
      AROS_LC2(int, X509_NAME_set, \
 AROS_LCA(X509_NAME **, (___xn), A0), \
 AROS_LCA(const X509_NAME *, (___name), A1), \
     struct Library *, AMISSL_BASE_NAME, 1763, Amissl)

#define X509_CINF_new() \
      AROS_LC0(X509_CINF *, X509_CINF_new, \
     struct Library *, AMISSL_BASE_NAME, 1764, Amissl)

#define X509_CINF_free(___a) \
      AROS_LC1(void, X509_CINF_free, \
 AROS_LCA(X509_CINF *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 1765, Amissl)

#define d2i_X509_CINF(___a, ___in, ___len) \
      AROS_LC3(X509_CINF *, d2i_X509_CINF, \
 AROS_LCA(X509_CINF **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 1766, Amissl)

#define i2d_X509_CINF(___a, ___out) \
      AROS_LC2(int, i2d_X509_CINF, \
 AROS_LCA(const X509_CINF *, (___a), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 1767, Amissl)

#define X509_CINF_it() \
      AROS_LC0(const ASN1_ITEM *, X509_CINF_it, \
     struct Library *, AMISSL_BASE_NAME, 1768, Amissl)

#define X509_new() \
      AROS_LC0(X509 *, X509_new, \
     struct Library *, AMISSL_BASE_NAME, 1769, Amissl)

#define X509_free(___a) \
      AROS_LC1(void, X509_free, \
 AROS_LCA(X509 *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 1770, Amissl)

#define d2i_X509(___a, ___in, ___len) \
      AROS_LC3(X509 *, d2i_X509, \
 AROS_LCA(X509 **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 1771, Amissl)

#define i2d_X509(___a, ___out) \
      AROS_LC2(int, i2d_X509, \
 AROS_LCA(const X509 *, (___a), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 1772, Amissl)

#define X509_it() \
      AROS_LC0(const ASN1_ITEM *, X509_it, \
     struct Library *, AMISSL_BASE_NAME, 1773, Amissl)

#define X509_CERT_AUX_new() \
      AROS_LC0(X509_CERT_AUX *, X509_CERT_AUX_new, \
     struct Library *, AMISSL_BASE_NAME, 1774, Amissl)

#define X509_CERT_AUX_free(___a) \
      AROS_LC1(void, X509_CERT_AUX_free, \
 AROS_LCA(X509_CERT_AUX *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 1775, Amissl)

#define d2i_X509_CERT_AUX(___a, ___in, ___len) \
      AROS_LC3(X509_CERT_AUX *, d2i_X509_CERT_AUX, \
 AROS_LCA(X509_CERT_AUX **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 1776, Amissl)

#define i2d_X509_CERT_AUX(___a, ___out) \
      AROS_LC2(int, i2d_X509_CERT_AUX, \
 AROS_LCA(const X509_CERT_AUX *, (___a), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 1777, Amissl)

#define X509_CERT_AUX_it() \
      AROS_LC0(const ASN1_ITEM *, X509_CERT_AUX_it, \
     struct Library *, AMISSL_BASE_NAME, 1778, Amissl)

#define OBSOLETE_X509_get_ex_new_index(___argl, ___argp, ___new_func, ___dup_func, ___free_func) \
      AROS_LC5(int, OBSOLETE_X509_get_ex_new_index, \
 AROS_LCA(long, (___argl), D0), \
 AROS_LCA(void *, (___argp), A0), \
 AROS_LCA(CRYPTO_EX_new *, (___new_func), A1), \
 AROS_LCA(CRYPTO_EX_dup *, (___dup_func), A2), \
 AROS_LCA(CRYPTO_EX_free *, (___free_func), A3), \
     struct Library *, AMISSL_BASE_NAME, 1779, Amissl)

#define X509_set_ex_data(___r, ___idx, ___arg) \
      AROS_LC3(int, X509_set_ex_data, \
 AROS_LCA(X509 *, (___r), A0), \
 AROS_LCA(int, (___idx), D0), \
 AROS_LCA(void *, (___arg), A1), \
     struct Library *, AMISSL_BASE_NAME, 1780, Amissl)

#define X509_get_ex_data(___r, ___idx) \
      AROS_LC2(void *, X509_get_ex_data, \
 AROS_LCA(const X509 *, (___r), A0), \
 AROS_LCA(int, (___idx), D0), \
     struct Library *, AMISSL_BASE_NAME, 1781, Amissl)

#define i2d_X509_AUX(___a, ___pp) \
      AROS_LC2(int, i2d_X509_AUX, \
 AROS_LCA(const X509 *, (___a), A0), \
 AROS_LCA(unsigned char **, (___pp), A1), \
     struct Library *, AMISSL_BASE_NAME, 1782, Amissl)

#define d2i_X509_AUX(___a, ___pp, ___length) \
      AROS_LC3(X509 *, d2i_X509_AUX, \
 AROS_LCA(X509 **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___pp), A1), \
 AROS_LCA(long, (___length), D0), \
     struct Library *, AMISSL_BASE_NAME, 1783, Amissl)

#define X509_alias_set1(___x, ___name, ___len) \
      AROS_LC3(int, X509_alias_set1, \
 AROS_LCA(X509 *, (___x), A0), \
 AROS_LCA(const unsigned char *, (___name), A1), \
 AROS_LCA(int, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 1784, Amissl)

#define X509_keyid_set1(___x, ___id, ___len) \
      AROS_LC3(int, X509_keyid_set1, \
 AROS_LCA(X509 *, (___x), A0), \
 AROS_LCA(const unsigned char *, (___id), A1), \
 AROS_LCA(int, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 1785, Amissl)

#define X509_alias_get0(___x, ___len) \
      AROS_LC2(unsigned char *, X509_alias_get0, \
 AROS_LCA(X509 *, (___x), A0), \
 AROS_LCA(int *, (___len), A1), \
     struct Library *, AMISSL_BASE_NAME, 1786, Amissl)

#define X509_TRUST_set_default(___trust) \
      AROS_LC1(int (*)(int, X509 *, int), X509_TRUST_set_default, \
 AROS_LCA(int (*)(int,X509 *,int), (___trust), A0), \
     struct Library *, AMISSL_BASE_NAME, 1787, Amissl)

#define X509_TRUST_set(___t, ___trust) \
      AROS_LC2(int, X509_TRUST_set, \
 AROS_LCA(int *, (___t), A0), \
 AROS_LCA(int, (___trust), D0), \
     struct Library *, AMISSL_BASE_NAME, 1788, Amissl)

#define X509_add1_trust_object(___x, ___obj) \
      AROS_LC2(int, X509_add1_trust_object, \
 AROS_LCA(X509 *, (___x), A0), \
 AROS_LCA(const ASN1_OBJECT *, (___obj), A1), \
     struct Library *, AMISSL_BASE_NAME, 1789, Amissl)

#define X509_add1_reject_object(___x, ___obj) \
      AROS_LC2(int, X509_add1_reject_object, \
 AROS_LCA(X509 *, (___x), A0), \
 AROS_LCA(const ASN1_OBJECT *, (___obj), A1), \
     struct Library *, AMISSL_BASE_NAME, 1790, Amissl)

#define X509_trust_clear(___x) \
      AROS_LC1(void, X509_trust_clear, \
 AROS_LCA(X509 *, (___x), A0), \
     struct Library *, AMISSL_BASE_NAME, 1791, Amissl)

#define X509_reject_clear(___x) \
      AROS_LC1(void, X509_reject_clear, \
 AROS_LCA(X509 *, (___x), A0), \
     struct Library *, AMISSL_BASE_NAME, 1792, Amissl)

#define X509_REVOKED_new() \
      AROS_LC0(X509_REVOKED *, X509_REVOKED_new, \
     struct Library *, AMISSL_BASE_NAME, 1793, Amissl)

#define X509_REVOKED_free(___a) \
      AROS_LC1(void, X509_REVOKED_free, \
 AROS_LCA(X509_REVOKED *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 1794, Amissl)

#define d2i_X509_REVOKED(___a, ___in, ___len) \
      AROS_LC3(X509_REVOKED *, d2i_X509_REVOKED, \
 AROS_LCA(X509_REVOKED **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 1795, Amissl)

#define i2d_X509_REVOKED(___a, ___out) \
      AROS_LC2(int, i2d_X509_REVOKED, \
 AROS_LCA(const X509_REVOKED *, (___a), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 1796, Amissl)

#define X509_REVOKED_it() \
      AROS_LC0(const ASN1_ITEM *, X509_REVOKED_it, \
     struct Library *, AMISSL_BASE_NAME, 1797, Amissl)

#define X509_CRL_INFO_new() \
      AROS_LC0(X509_CRL_INFO *, X509_CRL_INFO_new, \
     struct Library *, AMISSL_BASE_NAME, 1798, Amissl)

#define X509_CRL_INFO_free(___a) \
      AROS_LC1(void, X509_CRL_INFO_free, \
 AROS_LCA(X509_CRL_INFO *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 1799, Amissl)

#define d2i_X509_CRL_INFO(___a, ___in, ___len) \
      AROS_LC3(X509_CRL_INFO *, d2i_X509_CRL_INFO, \
 AROS_LCA(X509_CRL_INFO **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 1800, Amissl)

#define i2d_X509_CRL_INFO(___a, ___out) \
      AROS_LC2(int, i2d_X509_CRL_INFO, \
 AROS_LCA(const X509_CRL_INFO *, (___a), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 1801, Amissl)

#define X509_CRL_INFO_it() \
      AROS_LC0(const ASN1_ITEM *, X509_CRL_INFO_it, \
     struct Library *, AMISSL_BASE_NAME, 1802, Amissl)

#define X509_CRL_new() \
      AROS_LC0(X509_CRL *, X509_CRL_new, \
     struct Library *, AMISSL_BASE_NAME, 1803, Amissl)

#define X509_CRL_free(___a) \
      AROS_LC1(void, X509_CRL_free, \
 AROS_LCA(X509_CRL *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 1804, Amissl)

#define d2i_X509_CRL(___a, ___in, ___len) \
      AROS_LC3(X509_CRL *, d2i_X509_CRL, \
 AROS_LCA(X509_CRL **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 1805, Amissl)

#define i2d_X509_CRL(___a, ___out) \
      AROS_LC2(int, i2d_X509_CRL, \
 AROS_LCA(const X509_CRL *, (___a), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 1806, Amissl)

#define X509_CRL_it() \
      AROS_LC0(const ASN1_ITEM *, X509_CRL_it, \
     struct Library *, AMISSL_BASE_NAME, 1807, Amissl)

#define X509_CRL_add0_revoked(___crl, ___rev) \
      AROS_LC2(int, X509_CRL_add0_revoked, \
 AROS_LCA(X509_CRL *, (___crl), A0), \
 AROS_LCA(X509_REVOKED *, (___rev), A1), \
     struct Library *, AMISSL_BASE_NAME, 1808, Amissl)

#define X509_PKEY_new() \
      AROS_LC0(X509_PKEY *, X509_PKEY_new, \
     struct Library *, AMISSL_BASE_NAME, 1809, Amissl)

#define X509_PKEY_free(___a) \
      AROS_LC1(void, X509_PKEY_free, \
 AROS_LCA(X509_PKEY *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 1810, Amissl)

#define NETSCAPE_SPKI_new() \
      AROS_LC0(NETSCAPE_SPKI *, NETSCAPE_SPKI_new, \
     struct Library *, AMISSL_BASE_NAME, 1813, Amissl)

#define NETSCAPE_SPKI_free(___a) \
      AROS_LC1(void, NETSCAPE_SPKI_free, \
 AROS_LCA(NETSCAPE_SPKI *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 1814, Amissl)

#define d2i_NETSCAPE_SPKI(___a, ___in, ___len) \
      AROS_LC3(NETSCAPE_SPKI *, d2i_NETSCAPE_SPKI, \
 AROS_LCA(NETSCAPE_SPKI **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 1815, Amissl)

#define i2d_NETSCAPE_SPKI(___a, ___out) \
      AROS_LC2(int, i2d_NETSCAPE_SPKI, \
 AROS_LCA(const NETSCAPE_SPKI *, (___a), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 1816, Amissl)

#define NETSCAPE_SPKI_it() \
      AROS_LC0(const ASN1_ITEM *, NETSCAPE_SPKI_it, \
     struct Library *, AMISSL_BASE_NAME, 1817, Amissl)

#define NETSCAPE_SPKAC_new() \
      AROS_LC0(NETSCAPE_SPKAC *, NETSCAPE_SPKAC_new, \
     struct Library *, AMISSL_BASE_NAME, 1818, Amissl)

#define NETSCAPE_SPKAC_free(___a) \
      AROS_LC1(void, NETSCAPE_SPKAC_free, \
 AROS_LCA(NETSCAPE_SPKAC *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 1819, Amissl)

#define d2i_NETSCAPE_SPKAC(___a, ___in, ___len) \
      AROS_LC3(NETSCAPE_SPKAC *, d2i_NETSCAPE_SPKAC, \
 AROS_LCA(NETSCAPE_SPKAC **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 1820, Amissl)

#define i2d_NETSCAPE_SPKAC(___a, ___out) \
      AROS_LC2(int, i2d_NETSCAPE_SPKAC, \
 AROS_LCA(const NETSCAPE_SPKAC *, (___a), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 1821, Amissl)

#define NETSCAPE_SPKAC_it() \
      AROS_LC0(const ASN1_ITEM *, NETSCAPE_SPKAC_it, \
     struct Library *, AMISSL_BASE_NAME, 1822, Amissl)

#define NETSCAPE_CERT_SEQUENCE_new() \
      AROS_LC0(NETSCAPE_CERT_SEQUENCE *, NETSCAPE_CERT_SEQUENCE_new, \
     struct Library *, AMISSL_BASE_NAME, 1823, Amissl)

#define NETSCAPE_CERT_SEQUENCE_free(___a) \
      AROS_LC1(void, NETSCAPE_CERT_SEQUENCE_free, \
 AROS_LCA(NETSCAPE_CERT_SEQUENCE *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 1824, Amissl)

#define d2i_NETSCAPE_CERT_SEQUENCE(___a, ___in, ___len) \
      AROS_LC3(NETSCAPE_CERT_SEQUENCE *, d2i_NETSCAPE_CERT_SEQUENCE, \
 AROS_LCA(NETSCAPE_CERT_SEQUENCE **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 1825, Amissl)

#define i2d_NETSCAPE_CERT_SEQUENCE(___a, ___out) \
      AROS_LC2(int, i2d_NETSCAPE_CERT_SEQUENCE, \
 AROS_LCA(const NETSCAPE_CERT_SEQUENCE *, (___a), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 1826, Amissl)

#define NETSCAPE_CERT_SEQUENCE_it() \
      AROS_LC0(const ASN1_ITEM *, NETSCAPE_CERT_SEQUENCE_it, \
     struct Library *, AMISSL_BASE_NAME, 1827, Amissl)

#define X509_INFO_new() \
      AROS_LC0(X509_INFO *, X509_INFO_new, \
     struct Library *, AMISSL_BASE_NAME, 1828, Amissl)

#define X509_INFO_free(___a) \
      AROS_LC1(void, X509_INFO_free, \
 AROS_LCA(X509_INFO *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 1829, Amissl)

#define X509_NAME_oneline(___a, ___buf, ___size) \
      AROS_LC3(char *, X509_NAME_oneline, \
 AROS_LCA(const X509_NAME *, (___a), A0), \
 AROS_LCA(char *, (___buf), A1), \
 AROS_LCA(int, (___size), D0), \
     struct Library *, AMISSL_BASE_NAME, 1830, Amissl)

#define ASN1_verify(___i2d, ___algor1, ___signature, ___data, ___pkey) \
      AROS_LC5(int, ASN1_verify, \
 AROS_LCA(int (*)(), (___i2d), A0), \
 AROS_LCA(X509_ALGOR *, (___algor1), A1), \
 AROS_LCA(ASN1_BIT_STRING *, (___signature), A2), \
 AROS_LCA(char *, (___data), A3), \
 AROS_LCA(EVP_PKEY *, (___pkey), D0), \
     struct Library *, AMISSL_BASE_NAME, 1831, Amissl)

#define ASN1_digest(___i2d, ___type, ___data, ___md, ___len) \
      AROS_LC5(int, ASN1_digest, \
 AROS_LCA(int (*)(), (___i2d), A0), \
 AROS_LCA(const EVP_MD *, (___type), A1), \
 AROS_LCA(char *, (___data), A2), \
 AROS_LCA(unsigned char *, (___md), A3), \
 AROS_LCA(unsigned int *, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 1832, Amissl)

#define ASN1_sign(___i2d, ___algor1, ___algor2, ___signature, ___data, ___pkey, ___type) \
      AROS_LC7(int, ASN1_sign, \
 AROS_LCA(int (*)(), (___i2d), A0), \
 AROS_LCA(X509_ALGOR *, (___algor1), A1), \
 AROS_LCA(X509_ALGOR *, (___algor2), A2), \
 AROS_LCA(ASN1_BIT_STRING *, (___signature), A3), \
 AROS_LCA(char *, (___data), D0), \
 AROS_LCA(EVP_PKEY *, (___pkey), D1), \
 AROS_LCA(const EVP_MD *, (___type), D2), \
     struct Library *, AMISSL_BASE_NAME, 1833, Amissl)

#define ASN1_item_digest(___it, ___type, ___data, ___md, ___len) \
      AROS_LC5(int, ASN1_item_digest, \
 AROS_LCA(const ASN1_ITEM *, (___it), A0), \
 AROS_LCA(const EVP_MD *, (___type), A1), \
 AROS_LCA(void *, (___data), A2), \
 AROS_LCA(unsigned char *, (___md), A3), \
 AROS_LCA(unsigned int *, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 1834, Amissl)

#define ASN1_item_verify(___it, ___alg, ___signature, ___data, ___pkey) \
      AROS_LC5(int, ASN1_item_verify, \
 AROS_LCA(const ASN1_ITEM *, (___it), A0), \
 AROS_LCA(const X509_ALGOR *, (___alg), A1), \
 AROS_LCA(const ASN1_BIT_STRING *, (___signature), A2), \
 AROS_LCA(const void *, (___data), A3), \
 AROS_LCA(EVP_PKEY *, (___pkey), D0), \
     struct Library *, AMISSL_BASE_NAME, 1835, Amissl)

#define ASN1_item_sign(___it, ___algor1, ___algor2, ___signature, ___data, ___pkey, ___type) \
      AROS_LC7(int, ASN1_item_sign, \
 AROS_LCA(const ASN1_ITEM *, (___it), A0), \
 AROS_LCA(X509_ALGOR *, (___algor1), A1), \
 AROS_LCA(X509_ALGOR *, (___algor2), A2), \
 AROS_LCA(ASN1_BIT_STRING *, (___signature), A3), \
 AROS_LCA(const void *, (___data), D0), \
 AROS_LCA(EVP_PKEY *, (___pkey), D1), \
 AROS_LCA(const EVP_MD *, (___type), D2), \
     struct Library *, AMISSL_BASE_NAME, 1836, Amissl)

#define X509_set_version(___x, ___version) \
      AROS_LC2(int, X509_set_version, \
 AROS_LCA(X509 *, (___x), A0), \
 AROS_LCA(long, (___version), D0), \
     struct Library *, AMISSL_BASE_NAME, 1837, Amissl)

#define X509_set_serialNumber(___x, ___serial) \
      AROS_LC2(int, X509_set_serialNumber, \
 AROS_LCA(X509 *, (___x), A0), \
 AROS_LCA(ASN1_INTEGER *, (___serial), A1), \
     struct Library *, AMISSL_BASE_NAME, 1838, Amissl)

#define X509_get_serialNumber(___x) \
      AROS_LC1(ASN1_INTEGER *, X509_get_serialNumber, \
 AROS_LCA(X509 *, (___x), A0), \
     struct Library *, AMISSL_BASE_NAME, 1839, Amissl)

#define X509_set_issuer_name(___x, ___name) \
      AROS_LC2(int, X509_set_issuer_name, \
 AROS_LCA(X509 *, (___x), A0), \
 AROS_LCA(const X509_NAME *, (___name), A1), \
     struct Library *, AMISSL_BASE_NAME, 1840, Amissl)

#define X509_get_issuer_name(___a) \
      AROS_LC1(X509_NAME *, X509_get_issuer_name, \
 AROS_LCA(const X509 *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 1841, Amissl)

#define X509_set_subject_name(___x, ___name) \
      AROS_LC2(int, X509_set_subject_name, \
 AROS_LCA(X509 *, (___x), A0), \
 AROS_LCA(const X509_NAME *, (___name), A1), \
     struct Library *, AMISSL_BASE_NAME, 1842, Amissl)

#define X509_get_subject_name(___a) \
      AROS_LC1(X509_NAME *, X509_get_subject_name, \
 AROS_LCA(const X509 *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 1843, Amissl)

#define X509_set1_notBefore(___x, ___tm) \
      AROS_LC2(int, X509_set1_notBefore, \
 AROS_LCA(X509 *, (___x), A0), \
 AROS_LCA(const ASN1_TIME *, (___tm), A1), \
     struct Library *, AMISSL_BASE_NAME, 1844, Amissl)

#define X509_set1_notAfter(___x, ___tm) \
      AROS_LC2(int, X509_set1_notAfter, \
 AROS_LCA(X509 *, (___x), A0), \
 AROS_LCA(const ASN1_TIME *, (___tm), A1), \
     struct Library *, AMISSL_BASE_NAME, 1845, Amissl)

#define X509_set_pubkey(___x, ___pkey) \
      AROS_LC2(int, X509_set_pubkey, \
 AROS_LCA(X509 *, (___x), A0), \
 AROS_LCA(EVP_PKEY *, (___pkey), A1), \
     struct Library *, AMISSL_BASE_NAME, 1846, Amissl)

#define X509_get_pubkey(___x) \
      AROS_LC1(EVP_PKEY *, X509_get_pubkey, \
 AROS_LCA(X509 *, (___x), A0), \
     struct Library *, AMISSL_BASE_NAME, 1847, Amissl)

#define X509_get0_pubkey_bitstr(___x) \
      AROS_LC1(ASN1_BIT_STRING *, X509_get0_pubkey_bitstr, \
 AROS_LCA(const X509 *, (___x), A0), \
     struct Library *, AMISSL_BASE_NAME, 1848, Amissl)

#define X509_certificate_type(___x, ___pubkey) \
      AROS_LC2(int, X509_certificate_type, \
 AROS_LCA(const X509 *, (___x), A0), \
 AROS_LCA(const EVP_PKEY *, (___pubkey), A1), \
     struct Library *, AMISSL_BASE_NAME, 1849, Amissl)

#define X509_REQ_set_version(___x, ___version) \
      AROS_LC2(int, X509_REQ_set_version, \
 AROS_LCA(X509_REQ *, (___x), A0), \
 AROS_LCA(long, (___version), D0), \
     struct Library *, AMISSL_BASE_NAME, 1850, Amissl)

#define X509_REQ_set_subject_name(___req, ___name) \
      AROS_LC2(int, X509_REQ_set_subject_name, \
 AROS_LCA(X509_REQ *, (___req), A0), \
 AROS_LCA(const X509_NAME *, (___name), A1), \
     struct Library *, AMISSL_BASE_NAME, 1851, Amissl)

#define X509_REQ_set_pubkey(___x, ___pkey) \
      AROS_LC2(int, X509_REQ_set_pubkey, \
 AROS_LCA(X509_REQ *, (___x), A0), \
 AROS_LCA(EVP_PKEY *, (___pkey), A1), \
     struct Library *, AMISSL_BASE_NAME, 1852, Amissl)

#define X509_REQ_get_pubkey(___req) \
      AROS_LC1(EVP_PKEY *, X509_REQ_get_pubkey, \
 AROS_LCA(X509_REQ *, (___req), A0), \
     struct Library *, AMISSL_BASE_NAME, 1853, Amissl)

#define X509_REQ_extension_nid(___nid) \
      AROS_LC1(int, X509_REQ_extension_nid, \
 AROS_LCA(int, (___nid), D0), \
     struct Library *, AMISSL_BASE_NAME, 1854, Amissl)

#define X509_REQ_get_extension_nids() \
      AROS_LC0(int *, X509_REQ_get_extension_nids, \
     struct Library *, AMISSL_BASE_NAME, 1855, Amissl)

#define X509_REQ_set_extension_nids(___nids) \
      AROS_LC1(void, X509_REQ_set_extension_nids, \
 AROS_LCA(int *, (___nids), A0), \
     struct Library *, AMISSL_BASE_NAME, 1856, Amissl)

#define X509_REQ_get_extensions(___req) \
      AROS_LC1(STACK_OF(X509_EXTENSION) *, X509_REQ_get_extensions, \
 AROS_LCA(X509_REQ *, (___req), A0), \
     struct Library *, AMISSL_BASE_NAME, 1857, Amissl)

#define X509_REQ_add_extensions_nid(___req, ___exts, ___nid) \
      AROS_LC3(int, X509_REQ_add_extensions_nid, \
 AROS_LCA(X509_REQ *, (___req), A0), \
 AROS_LCA(const STACK_OF(X509_EXTENSION) *, (___exts), A1), \
 AROS_LCA(int, (___nid), D0), \
     struct Library *, AMISSL_BASE_NAME, 1858, Amissl)

#define X509_REQ_add_extensions(___req, ___exts) \
      AROS_LC2(int, X509_REQ_add_extensions, \
 AROS_LCA(X509_REQ *, (___req), A0), \
 AROS_LCA(const STACK_OF(X509_EXTENSION) *, (___exts), A1), \
     struct Library *, AMISSL_BASE_NAME, 1859, Amissl)

#define X509_REQ_get_attr_count(___req) \
      AROS_LC1(int, X509_REQ_get_attr_count, \
 AROS_LCA(const X509_REQ *, (___req), A0), \
     struct Library *, AMISSL_BASE_NAME, 1860, Amissl)

#define X509_REQ_get_attr_by_NID(___req, ___nid, ___lastpos) \
      AROS_LC3(int, X509_REQ_get_attr_by_NID, \
 AROS_LCA(const X509_REQ *, (___req), A0), \
 AROS_LCA(int, (___nid), D0), \
 AROS_LCA(int, (___lastpos), D1), \
     struct Library *, AMISSL_BASE_NAME, 1861, Amissl)

#define X509_REQ_get_attr_by_OBJ(___req, ___obj, ___lastpos) \
      AROS_LC3(int, X509_REQ_get_attr_by_OBJ, \
 AROS_LCA(const X509_REQ *, (___req), A0), \
 AROS_LCA(const ASN1_OBJECT *, (___obj), A1), \
 AROS_LCA(int, (___lastpos), D0), \
     struct Library *, AMISSL_BASE_NAME, 1862, Amissl)

#define X509_REQ_get_attr(___req, ___loc) \
      AROS_LC2(X509_ATTRIBUTE *, X509_REQ_get_attr, \
 AROS_LCA(const X509_REQ *, (___req), A0), \
 AROS_LCA(int, (___loc), D0), \
     struct Library *, AMISSL_BASE_NAME, 1863, Amissl)

#define X509_REQ_delete_attr(___req, ___loc) \
      AROS_LC2(X509_ATTRIBUTE *, X509_REQ_delete_attr, \
 AROS_LCA(X509_REQ *, (___req), A0), \
 AROS_LCA(int, (___loc), D0), \
     struct Library *, AMISSL_BASE_NAME, 1864, Amissl)

#define X509_REQ_add1_attr(___req, ___attr) \
      AROS_LC2(int, X509_REQ_add1_attr, \
 AROS_LCA(X509_REQ *, (___req), A0), \
 AROS_LCA(X509_ATTRIBUTE *, (___attr), A1), \
     struct Library *, AMISSL_BASE_NAME, 1865, Amissl)

#define X509_REQ_add1_attr_by_OBJ(___req, ___obj, ___type, ___bytes, ___len) \
      AROS_LC5(int, X509_REQ_add1_attr_by_OBJ, \
 AROS_LCA(X509_REQ *, (___req), A0), \
 AROS_LCA(const ASN1_OBJECT *, (___obj), A1), \
 AROS_LCA(int, (___type), D0), \
 AROS_LCA(const unsigned char *, (___bytes), A2), \
 AROS_LCA(int, (___len), D1), \
     struct Library *, AMISSL_BASE_NAME, 1866, Amissl)

#define X509_REQ_add1_attr_by_NID(___req, ___nid, ___type, ___bytes, ___len) \
      AROS_LC5(int, X509_REQ_add1_attr_by_NID, \
 AROS_LCA(X509_REQ *, (___req), A0), \
 AROS_LCA(int, (___nid), D0), \
 AROS_LCA(int, (___type), D1), \
 AROS_LCA(const unsigned char *, (___bytes), A1), \
 AROS_LCA(int, (___len), D2), \
     struct Library *, AMISSL_BASE_NAME, 1867, Amissl)

#define X509_REQ_add1_attr_by_txt(___req, ___attrname, ___type, ___bytes, ___len) \
      AROS_LC5(int, X509_REQ_add1_attr_by_txt, \
 AROS_LCA(X509_REQ *, (___req), A0), \
 AROS_LCA(const char *, (___attrname), A1), \
 AROS_LCA(int, (___type), D0), \
 AROS_LCA(const unsigned char *, (___bytes), A2), \
 AROS_LCA(int, (___len), D1), \
     struct Library *, AMISSL_BASE_NAME, 1868, Amissl)

#define X509_CRL_set_version(___x, ___version) \
      AROS_LC2(int, X509_CRL_set_version, \
 AROS_LCA(X509_CRL *, (___x), A0), \
 AROS_LCA(long, (___version), D0), \
     struct Library *, AMISSL_BASE_NAME, 1869, Amissl)

#define X509_CRL_set_issuer_name(___x, ___name) \
      AROS_LC2(int, X509_CRL_set_issuer_name, \
 AROS_LCA(X509_CRL *, (___x), A0), \
 AROS_LCA(const X509_NAME *, (___name), A1), \
     struct Library *, AMISSL_BASE_NAME, 1870, Amissl)

#define X509_CRL_set1_lastUpdate(___x, ___tm) \
      AROS_LC2(int, X509_CRL_set1_lastUpdate, \
 AROS_LCA(X509_CRL *, (___x), A0), \
 AROS_LCA(const ASN1_TIME *, (___tm), A1), \
     struct Library *, AMISSL_BASE_NAME, 1871, Amissl)

#define X509_CRL_set1_nextUpdate(___x, ___tm) \
      AROS_LC2(int, X509_CRL_set1_nextUpdate, \
 AROS_LCA(X509_CRL *, (___x), A0), \
 AROS_LCA(const ASN1_TIME *, (___tm), A1), \
     struct Library *, AMISSL_BASE_NAME, 1872, Amissl)

#define X509_CRL_sort(___crl) \
      AROS_LC1(int, X509_CRL_sort, \
 AROS_LCA(X509_CRL *, (___crl), A0), \
     struct Library *, AMISSL_BASE_NAME, 1873, Amissl)

#define X509_REVOKED_set_serialNumber(___x, ___serial) \
      AROS_LC2(int, X509_REVOKED_set_serialNumber, \
 AROS_LCA(X509_REVOKED *, (___x), A0), \
 AROS_LCA(ASN1_INTEGER *, (___serial), A1), \
     struct Library *, AMISSL_BASE_NAME, 1874, Amissl)

#define X509_REVOKED_set_revocationDate(___r, ___tm) \
      AROS_LC2(int, X509_REVOKED_set_revocationDate, \
 AROS_LCA(X509_REVOKED *, (___r), A0), \
 AROS_LCA(ASN1_TIME *, (___tm), A1), \
     struct Library *, AMISSL_BASE_NAME, 1875, Amissl)

#define X509_check_private_key(___cert, ___pkey) \
      AROS_LC2(int, X509_check_private_key, \
 AROS_LCA(const X509 *, (___cert), A0), \
 AROS_LCA(const EVP_PKEY *, (___pkey), A1), \
     struct Library *, AMISSL_BASE_NAME, 1876, Amissl)

#define X509_issuer_and_serial_cmp(___a, ___b) \
      AROS_LC2(int, X509_issuer_and_serial_cmp, \
 AROS_LCA(const X509 *, (___a), A0), \
 AROS_LCA(const X509 *, (___b), A1), \
     struct Library *, AMISSL_BASE_NAME, 1877, Amissl)

#define X509_issuer_and_serial_hash(___a) \
      AROS_LC1(unsigned long, X509_issuer_and_serial_hash, \
 AROS_LCA(X509 *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 1878, Amissl)

#define X509_issuer_name_cmp(___a, ___b) \
      AROS_LC2(int, X509_issuer_name_cmp, \
 AROS_LCA(const X509 *, (___a), A0), \
 AROS_LCA(const X509 *, (___b), A1), \
     struct Library *, AMISSL_BASE_NAME, 1879, Amissl)

#define X509_issuer_name_hash(___a) \
      AROS_LC1(unsigned long, X509_issuer_name_hash, \
 AROS_LCA(X509 *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 1880, Amissl)

#define X509_subject_name_cmp(___a, ___b) \
      AROS_LC2(int, X509_subject_name_cmp, \
 AROS_LCA(const X509 *, (___a), A0), \
 AROS_LCA(const X509 *, (___b), A1), \
     struct Library *, AMISSL_BASE_NAME, 1881, Amissl)

#define X509_subject_name_hash(___x) \
      AROS_LC1(unsigned long, X509_subject_name_hash, \
 AROS_LCA(X509 *, (___x), A0), \
     struct Library *, AMISSL_BASE_NAME, 1882, Amissl)

#define X509_cmp(___a, ___b) \
      AROS_LC2(int, X509_cmp, \
 AROS_LCA(const X509 *, (___a), A0), \
 AROS_LCA(const X509 *, (___b), A1), \
     struct Library *, AMISSL_BASE_NAME, 1883, Amissl)

#define X509_NAME_cmp(___a, ___b) \
      AROS_LC2(int, X509_NAME_cmp, \
 AROS_LCA(const X509_NAME *, (___a), A0), \
 AROS_LCA(const X509_NAME *, (___b), A1), \
     struct Library *, AMISSL_BASE_NAME, 1884, Amissl)

#define OBSOLETE_X509_NAME_hash(___x) \
      AROS_LC1(unsigned long, OBSOLETE_X509_NAME_hash, \
 AROS_LCA(X509_NAME *, (___x), A0), \
     struct Library *, AMISSL_BASE_NAME, 1885, Amissl)

#define X509_CRL_cmp(___a, ___b) \
      AROS_LC2(int, X509_CRL_cmp, \
 AROS_LCA(const X509_CRL *, (___a), A0), \
 AROS_LCA(const X509_CRL *, (___b), A1), \
     struct Library *, AMISSL_BASE_NAME, 1886, Amissl)

#define X509_NAME_print(___bp, ___name, ___obase) \
      AROS_LC3(int, X509_NAME_print, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(const X509_NAME *, (___name), A1), \
 AROS_LCA(int, (___obase), D0), \
     struct Library *, AMISSL_BASE_NAME, 1887, Amissl)

#define X509_NAME_print_ex(___out, ___nm, ___indent, ___flags) \
      AROS_LC4(int, X509_NAME_print_ex, \
 AROS_LCA(BIO *, (___out), A0), \
 AROS_LCA(const X509_NAME *, (___nm), A1), \
 AROS_LCA(int, (___indent), D0), \
 AROS_LCA(unsigned long, (___flags), D1), \
     struct Library *, AMISSL_BASE_NAME, 1888, Amissl)

#define X509_print_ex(___bp, ___x, ___nmflag, ___cflag) \
      AROS_LC4(int, X509_print_ex, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(X509 *, (___x), A1), \
 AROS_LCA(unsigned long, (___nmflag), D0), \
 AROS_LCA(unsigned long, (___cflag), D1), \
     struct Library *, AMISSL_BASE_NAME, 1889, Amissl)

#define X509_print(___bp, ___x) \
      AROS_LC2(int, X509_print, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(X509 *, (___x), A1), \
     struct Library *, AMISSL_BASE_NAME, 1890, Amissl)

#define X509_ocspid_print(___bp, ___x) \
      AROS_LC2(int, X509_ocspid_print, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(X509 *, (___x), A1), \
     struct Library *, AMISSL_BASE_NAME, 1891, Amissl)

#define X509_CRL_print(___bp, ___x) \
      AROS_LC2(int, X509_CRL_print, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(X509_CRL *, (___x), A1), \
     struct Library *, AMISSL_BASE_NAME, 1893, Amissl)

#define X509_REQ_print_ex(___bp, ___x, ___nmflag, ___cflag) \
      AROS_LC4(int, X509_REQ_print_ex, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(X509_REQ *, (___x), A1), \
 AROS_LCA(unsigned long, (___nmflag), D0), \
 AROS_LCA(unsigned long, (___cflag), D1), \
     struct Library *, AMISSL_BASE_NAME, 1894, Amissl)

#define X509_REQ_print(___bp, ___req) \
      AROS_LC2(int, X509_REQ_print, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(X509_REQ *, (___req), A1), \
     struct Library *, AMISSL_BASE_NAME, 1895, Amissl)

#define X509_NAME_entry_count(___name) \
      AROS_LC1(int, X509_NAME_entry_count, \
 AROS_LCA(const X509_NAME *, (___name), A0), \
     struct Library *, AMISSL_BASE_NAME, 1896, Amissl)

#define X509_NAME_get_text_by_NID(___name, ___nid, ___buf, ___len) \
      AROS_LC4(int, X509_NAME_get_text_by_NID, \
 AROS_LCA(const X509_NAME *, (___name), A0), \
 AROS_LCA(int, (___nid), D0), \
 AROS_LCA(char *, (___buf), A1), \
 AROS_LCA(int, (___len), D1), \
     struct Library *, AMISSL_BASE_NAME, 1897, Amissl)

#define X509_NAME_get_text_by_OBJ(___name, ___obj, ___buf, ___len) \
      AROS_LC4(int, X509_NAME_get_text_by_OBJ, \
 AROS_LCA(const X509_NAME *, (___name), A0), \
 AROS_LCA(const ASN1_OBJECT *, (___obj), A1), \
 AROS_LCA(char *, (___buf), A2), \
 AROS_LCA(int, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 1898, Amissl)

#define X509_NAME_get_index_by_NID(___name, ___nid, ___lastpos) \
      AROS_LC3(int, X509_NAME_get_index_by_NID, \
 AROS_LCA(const X509_NAME *, (___name), A0), \
 AROS_LCA(int, (___nid), D0), \
 AROS_LCA(int, (___lastpos), D1), \
     struct Library *, AMISSL_BASE_NAME, 1899, Amissl)

#define X509_NAME_get_index_by_OBJ(___name, ___obj, ___lastpos) \
      AROS_LC3(int, X509_NAME_get_index_by_OBJ, \
 AROS_LCA(const X509_NAME *, (___name), A0), \
 AROS_LCA(const ASN1_OBJECT *, (___obj), A1), \
 AROS_LCA(int, (___lastpos), D0), \
     struct Library *, AMISSL_BASE_NAME, 1900, Amissl)

#define X509_NAME_get_entry(___name, ___loc) \
      AROS_LC2(X509_NAME_ENTRY *, X509_NAME_get_entry, \
 AROS_LCA(const X509_NAME *, (___name), A0), \
 AROS_LCA(int, (___loc), D0), \
     struct Library *, AMISSL_BASE_NAME, 1901, Amissl)

#define X509_NAME_delete_entry(___name, ___loc) \
      AROS_LC2(X509_NAME_ENTRY *, X509_NAME_delete_entry, \
 AROS_LCA(X509_NAME *, (___name), A0), \
 AROS_LCA(int, (___loc), D0), \
     struct Library *, AMISSL_BASE_NAME, 1902, Amissl)

#define X509_NAME_add_entry(___name, ___ne, ___loc, ___set) \
      AROS_LC4(int, X509_NAME_add_entry, \
 AROS_LCA(X509_NAME *, (___name), A0), \
 AROS_LCA(const X509_NAME_ENTRY *, (___ne), A1), \
 AROS_LCA(int, (___loc), D0), \
 AROS_LCA(int, (___set), D1), \
     struct Library *, AMISSL_BASE_NAME, 1903, Amissl)

#define X509_NAME_add_entry_by_OBJ(___name, ___obj, ___type, ___bytes, ___len, ___loc, ___set) \
      AROS_LC7(int, X509_NAME_add_entry_by_OBJ, \
 AROS_LCA(X509_NAME *, (___name), A0), \
 AROS_LCA(const ASN1_OBJECT *, (___obj), A1), \
 AROS_LCA(int, (___type), D0), \
 AROS_LCA(const unsigned char *, (___bytes), A2), \
 AROS_LCA(int, (___len), D1), \
 AROS_LCA(int, (___loc), D2), \
 AROS_LCA(int, (___set), D3), \
     struct Library *, AMISSL_BASE_NAME, 1904, Amissl)

#define X509_NAME_add_entry_by_NID(___name, ___nid, ___type, ___bytes, ___len, ___loc, ___set) \
      AROS_LC7(int, X509_NAME_add_entry_by_NID, \
 AROS_LCA(X509_NAME *, (___name), A0), \
 AROS_LCA(int, (___nid), D0), \
 AROS_LCA(int, (___type), D1), \
 AROS_LCA(const unsigned char *, (___bytes), A1), \
 AROS_LCA(int, (___len), D2), \
 AROS_LCA(int, (___loc), D3), \
 AROS_LCA(int, (___set), D4), \
     struct Library *, AMISSL_BASE_NAME, 1905, Amissl)

#define X509_NAME_ENTRY_create_by_txt(___ne, ___field, ___type, ___bytes, ___len) \
      AROS_LC5(X509_NAME_ENTRY *, X509_NAME_ENTRY_create_by_txt, \
 AROS_LCA(X509_NAME_ENTRY **, (___ne), A0), \
 AROS_LCA(const char *, (___field), A1), \
 AROS_LCA(int, (___type), D0), \
 AROS_LCA(const unsigned char *, (___bytes), A2), \
 AROS_LCA(int, (___len), D1), \
     struct Library *, AMISSL_BASE_NAME, 1906, Amissl)

#define X509_NAME_ENTRY_create_by_NID(___ne, ___nid, ___type, ___bytes, ___len) \
      AROS_LC5(X509_NAME_ENTRY *, X509_NAME_ENTRY_create_by_NID, \
 AROS_LCA(X509_NAME_ENTRY **, (___ne), A0), \
 AROS_LCA(int, (___nid), D0), \
 AROS_LCA(int, (___type), D1), \
 AROS_LCA(const unsigned char *, (___bytes), A1), \
 AROS_LCA(int, (___len), D2), \
     struct Library *, AMISSL_BASE_NAME, 1907, Amissl)

#define X509_NAME_add_entry_by_txt(___name, ___field, ___type, ___bytes, ___len, ___loc, ___set) \
      AROS_LC7(int, X509_NAME_add_entry_by_txt, \
 AROS_LCA(X509_NAME *, (___name), A0), \
 AROS_LCA(const char *, (___field), A1), \
 AROS_LCA(int, (___type), D0), \
 AROS_LCA(const unsigned char *, (___bytes), A2), \
 AROS_LCA(int, (___len), D1), \
 AROS_LCA(int, (___loc), D2), \
 AROS_LCA(int, (___set), D3), \
     struct Library *, AMISSL_BASE_NAME, 1908, Amissl)

#define X509_NAME_ENTRY_create_by_OBJ(___ne, ___obj, ___type, ___bytes, ___len) \
      AROS_LC5(X509_NAME_ENTRY *, X509_NAME_ENTRY_create_by_OBJ, \
 AROS_LCA(X509_NAME_ENTRY **, (___ne), A0), \
 AROS_LCA(const ASN1_OBJECT *, (___obj), A1), \
 AROS_LCA(int, (___type), D0), \
 AROS_LCA(const unsigned char *, (___bytes), A2), \
 AROS_LCA(int, (___len), D1), \
     struct Library *, AMISSL_BASE_NAME, 1909, Amissl)

#define X509_NAME_ENTRY_set_object(___ne, ___obj) \
      AROS_LC2(int, X509_NAME_ENTRY_set_object, \
 AROS_LCA(X509_NAME_ENTRY *, (___ne), A0), \
 AROS_LCA(const ASN1_OBJECT *, (___obj), A1), \
     struct Library *, AMISSL_BASE_NAME, 1910, Amissl)

#define X509_NAME_ENTRY_set_data(___ne, ___type, ___bytes, ___len) \
      AROS_LC4(int, X509_NAME_ENTRY_set_data, \
 AROS_LCA(X509_NAME_ENTRY *, (___ne), A0), \
 AROS_LCA(int, (___type), D0), \
 AROS_LCA(const unsigned char *, (___bytes), A1), \
 AROS_LCA(int, (___len), D1), \
     struct Library *, AMISSL_BASE_NAME, 1911, Amissl)

#define X509_NAME_ENTRY_get_object(___ne) \
      AROS_LC1(ASN1_OBJECT *, X509_NAME_ENTRY_get_object, \
 AROS_LCA(const X509_NAME_ENTRY *, (___ne), A0), \
     struct Library *, AMISSL_BASE_NAME, 1912, Amissl)

#define X509_NAME_ENTRY_get_data(___ne) \
      AROS_LC1(ASN1_STRING *, X509_NAME_ENTRY_get_data, \
 AROS_LCA(const X509_NAME_ENTRY *, (___ne), A0), \
     struct Library *, AMISSL_BASE_NAME, 1913, Amissl)

#define X509v3_get_ext_count(___x) \
      AROS_LC1(int, X509v3_get_ext_count, \
 AROS_LCA(const STACK_OF(X509_EXTENSION) *, (___x), A0), \
     struct Library *, AMISSL_BASE_NAME, 1914, Amissl)

#define X509v3_get_ext_by_NID(___x, ___nid, ___lastpos) \
      AROS_LC3(int, X509v3_get_ext_by_NID, \
 AROS_LCA(const STACK_OF(X509_EXTENSION) *, (___x), A0), \
 AROS_LCA(int, (___nid), D0), \
 AROS_LCA(int, (___lastpos), D1), \
     struct Library *, AMISSL_BASE_NAME, 1915, Amissl)

#define X509v3_get_ext_by_OBJ(___x, ___obj, ___lastpos) \
      AROS_LC3(int, X509v3_get_ext_by_OBJ, \
 AROS_LCA(const STACK_OF(X509_EXTENSION) *, (___x), A0), \
 AROS_LCA(const ASN1_OBJECT *, (___obj), A1), \
 AROS_LCA(int, (___lastpos), D0), \
     struct Library *, AMISSL_BASE_NAME, 1916, Amissl)

#define X509v3_get_ext_by_critical(___x, ___crit, ___lastpos) \
      AROS_LC3(int, X509v3_get_ext_by_critical, \
 AROS_LCA(const STACK_OF(X509_EXTENSION) *, (___x), A0), \
 AROS_LCA(int, (___crit), D0), \
 AROS_LCA(int, (___lastpos), D1), \
     struct Library *, AMISSL_BASE_NAME, 1917, Amissl)

#define X509v3_get_ext(___x, ___loc) \
      AROS_LC2(X509_EXTENSION *, X509v3_get_ext, \
 AROS_LCA(const STACK_OF(X509_EXTENSION) *, (___x), A0), \
 AROS_LCA(int, (___loc), D0), \
     struct Library *, AMISSL_BASE_NAME, 1918, Amissl)

#define X509v3_delete_ext(___x, ___loc) \
      AROS_LC2(X509_EXTENSION *, X509v3_delete_ext, \
 AROS_LCA(STACK_OF(X509_EXTENSION) *, (___x), A0), \
 AROS_LCA(int, (___loc), D0), \
     struct Library *, AMISSL_BASE_NAME, 1919, Amissl)

#define X509v3_add_ext(___x, ___ex, ___loc) \
      AROS_LC3(STACK_OF(X509_EXTENSION) *, X509v3_add_ext, \
 AROS_LCA(STACK_OF(X509_EXTENSION) **, (___x), A0), \
 AROS_LCA(X509_EXTENSION *, (___ex), A1), \
 AROS_LCA(int, (___loc), D0), \
     struct Library *, AMISSL_BASE_NAME, 1920, Amissl)

#define X509_get_ext_count(___x) \
      AROS_LC1(int, X509_get_ext_count, \
 AROS_LCA(const X509 *, (___x), A0), \
     struct Library *, AMISSL_BASE_NAME, 1921, Amissl)

#define X509_get_ext_by_NID(___x, ___nid, ___lastpos) \
      AROS_LC3(int, X509_get_ext_by_NID, \
 AROS_LCA(const X509 *, (___x), A0), \
 AROS_LCA(int, (___nid), D0), \
 AROS_LCA(int, (___lastpos), D1), \
     struct Library *, AMISSL_BASE_NAME, 1922, Amissl)

#define X509_get_ext_by_OBJ(___x, ___obj, ___lastpos) \
      AROS_LC3(int, X509_get_ext_by_OBJ, \
 AROS_LCA(const X509 *, (___x), A0), \
 AROS_LCA(const ASN1_OBJECT *, (___obj), A1), \
 AROS_LCA(int, (___lastpos), D0), \
     struct Library *, AMISSL_BASE_NAME, 1923, Amissl)

#define X509_get_ext_by_critical(___x, ___crit, ___lastpos) \
      AROS_LC3(int, X509_get_ext_by_critical, \
 AROS_LCA(const X509 *, (___x), A0), \
 AROS_LCA(int, (___crit), D0), \
 AROS_LCA(int, (___lastpos), D1), \
     struct Library *, AMISSL_BASE_NAME, 1924, Amissl)

#define X509_get_ext(___x, ___loc) \
      AROS_LC2(X509_EXTENSION *, X509_get_ext, \
 AROS_LCA(const X509 *, (___x), A0), \
 AROS_LCA(int, (___loc), D0), \
     struct Library *, AMISSL_BASE_NAME, 1925, Amissl)

#define X509_delete_ext(___x, ___loc) \
      AROS_LC2(X509_EXTENSION *, X509_delete_ext, \
 AROS_LCA(X509 *, (___x), A0), \
 AROS_LCA(int, (___loc), D0), \
     struct Library *, AMISSL_BASE_NAME, 1926, Amissl)

#define X509_add_ext(___x, ___ex, ___loc) \
      AROS_LC3(int, X509_add_ext, \
 AROS_LCA(X509 *, (___x), A0), \
 AROS_LCA(X509_EXTENSION *, (___ex), A1), \
 AROS_LCA(int, (___loc), D0), \
     struct Library *, AMISSL_BASE_NAME, 1927, Amissl)

#define X509_get_ext_d2i(___x, ___nid, ___crit, ___idx) \
      AROS_LC4(void *, X509_get_ext_d2i, \
 AROS_LCA(const X509 *, (___x), A0), \
 AROS_LCA(int, (___nid), D0), \
 AROS_LCA(int *, (___crit), A1), \
 AROS_LCA(int *, (___idx), A2), \
     struct Library *, AMISSL_BASE_NAME, 1928, Amissl)

#define X509_add1_ext_i2d(___x, ___nid, ___value, ___crit, ___flags) \
      AROS_LC5(int, X509_add1_ext_i2d, \
 AROS_LCA(X509 *, (___x), A0), \
 AROS_LCA(int, (___nid), D0), \
 AROS_LCA(void *, (___value), A1), \
 AROS_LCA(int, (___crit), D1), \
 AROS_LCA(unsigned long, (___flags), D2), \
     struct Library *, AMISSL_BASE_NAME, 1929, Amissl)

#define X509_CRL_get_ext_count(___x) \
      AROS_LC1(int, X509_CRL_get_ext_count, \
 AROS_LCA(const X509_CRL *, (___x), A0), \
     struct Library *, AMISSL_BASE_NAME, 1930, Amissl)

#define X509_CRL_get_ext_by_NID(___x, ___nid, ___lastpos) \
      AROS_LC3(int, X509_CRL_get_ext_by_NID, \
 AROS_LCA(const X509_CRL *, (___x), A0), \
 AROS_LCA(int, (___nid), D0), \
 AROS_LCA(int, (___lastpos), D1), \
     struct Library *, AMISSL_BASE_NAME, 1931, Amissl)

#define X509_CRL_get_ext_by_OBJ(___x, ___obj, ___lastpos) \
      AROS_LC3(int, X509_CRL_get_ext_by_OBJ, \
 AROS_LCA(const X509_CRL *, (___x), A0), \
 AROS_LCA(const ASN1_OBJECT *, (___obj), A1), \
 AROS_LCA(int, (___lastpos), D0), \
     struct Library *, AMISSL_BASE_NAME, 1932, Amissl)

#define X509_CRL_get_ext_by_critical(___x, ___crit, ___lastpos) \
      AROS_LC3(int, X509_CRL_get_ext_by_critical, \
 AROS_LCA(const X509_CRL *, (___x), A0), \
 AROS_LCA(int, (___crit), D0), \
 AROS_LCA(int, (___lastpos), D1), \
     struct Library *, AMISSL_BASE_NAME, 1933, Amissl)

#define X509_CRL_get_ext(___x, ___loc) \
      AROS_LC2(X509_EXTENSION *, X509_CRL_get_ext, \
 AROS_LCA(const X509_CRL *, (___x), A0), \
 AROS_LCA(int, (___loc), D0), \
     struct Library *, AMISSL_BASE_NAME, 1934, Amissl)

#define X509_CRL_delete_ext(___x, ___loc) \
      AROS_LC2(X509_EXTENSION *, X509_CRL_delete_ext, \
 AROS_LCA(X509_CRL *, (___x), A0), \
 AROS_LCA(int, (___loc), D0), \
     struct Library *, AMISSL_BASE_NAME, 1935, Amissl)

#define X509_CRL_add_ext(___x, ___ex, ___loc) \
      AROS_LC3(int, X509_CRL_add_ext, \
 AROS_LCA(X509_CRL *, (___x), A0), \
 AROS_LCA(X509_EXTENSION *, (___ex), A1), \
 AROS_LCA(int, (___loc), D0), \
     struct Library *, AMISSL_BASE_NAME, 1936, Amissl)

#define X509_CRL_get_ext_d2i(___x, ___nid, ___crit, ___idx) \
      AROS_LC4(void *, X509_CRL_get_ext_d2i, \
 AROS_LCA(const X509_CRL *, (___x), A0), \
 AROS_LCA(int, (___nid), D0), \
 AROS_LCA(int *, (___crit), A1), \
 AROS_LCA(int *, (___idx), A2), \
     struct Library *, AMISSL_BASE_NAME, 1937, Amissl)

#define X509_CRL_add1_ext_i2d(___x, ___nid, ___value, ___crit, ___flags) \
      AROS_LC5(int, X509_CRL_add1_ext_i2d, \
 AROS_LCA(X509_CRL *, (___x), A0), \
 AROS_LCA(int, (___nid), D0), \
 AROS_LCA(void *, (___value), A1), \
 AROS_LCA(int, (___crit), D1), \
 AROS_LCA(unsigned long, (___flags), D2), \
     struct Library *, AMISSL_BASE_NAME, 1938, Amissl)

#define X509_REVOKED_get_ext_count(___x) \
      AROS_LC1(int, X509_REVOKED_get_ext_count, \
 AROS_LCA(const X509_REVOKED *, (___x), A0), \
     struct Library *, AMISSL_BASE_NAME, 1939, Amissl)

#define X509_REVOKED_get_ext_by_NID(___x, ___nid, ___lastpos) \
      AROS_LC3(int, X509_REVOKED_get_ext_by_NID, \
 AROS_LCA(const X509_REVOKED *, (___x), A0), \
 AROS_LCA(int, (___nid), D0), \
 AROS_LCA(int, (___lastpos), D1), \
     struct Library *, AMISSL_BASE_NAME, 1940, Amissl)

#define X509_REVOKED_get_ext_by_OBJ(___x, ___obj, ___lastpos) \
      AROS_LC3(int, X509_REVOKED_get_ext_by_OBJ, \
 AROS_LCA(const X509_REVOKED *, (___x), A0), \
 AROS_LCA(const ASN1_OBJECT *, (___obj), A1), \
 AROS_LCA(int, (___lastpos), D0), \
     struct Library *, AMISSL_BASE_NAME, 1941, Amissl)

#define X509_REVOKED_get_ext_by_critical(___x, ___crit, ___lastpos) \
      AROS_LC3(int, X509_REVOKED_get_ext_by_critical, \
 AROS_LCA(const X509_REVOKED *, (___x), A0), \
 AROS_LCA(int, (___crit), D0), \
 AROS_LCA(int, (___lastpos), D1), \
     struct Library *, AMISSL_BASE_NAME, 1942, Amissl)

#define X509_REVOKED_get_ext(___x, ___loc) \
      AROS_LC2(X509_EXTENSION *, X509_REVOKED_get_ext, \
 AROS_LCA(const X509_REVOKED *, (___x), A0), \
 AROS_LCA(int, (___loc), D0), \
     struct Library *, AMISSL_BASE_NAME, 1943, Amissl)

#define X509_REVOKED_delete_ext(___x, ___loc) \
      AROS_LC2(X509_EXTENSION *, X509_REVOKED_delete_ext, \
 AROS_LCA(X509_REVOKED *, (___x), A0), \
 AROS_LCA(int, (___loc), D0), \
     struct Library *, AMISSL_BASE_NAME, 1944, Amissl)

#define X509_REVOKED_add_ext(___x, ___ex, ___loc) \
      AROS_LC3(int, X509_REVOKED_add_ext, \
 AROS_LCA(X509_REVOKED *, (___x), A0), \
 AROS_LCA(X509_EXTENSION *, (___ex), A1), \
 AROS_LCA(int, (___loc), D0), \
     struct Library *, AMISSL_BASE_NAME, 1945, Amissl)

#define X509_REVOKED_get_ext_d2i(___x, ___nid, ___crit, ___idx) \
      AROS_LC4(void *, X509_REVOKED_get_ext_d2i, \
 AROS_LCA(const X509_REVOKED *, (___x), A0), \
 AROS_LCA(int, (___nid), D0), \
 AROS_LCA(int *, (___crit), A1), \
 AROS_LCA(int *, (___idx), A2), \
     struct Library *, AMISSL_BASE_NAME, 1946, Amissl)

#define X509_REVOKED_add1_ext_i2d(___x, ___nid, ___value, ___crit, ___flags) \
      AROS_LC5(int, X509_REVOKED_add1_ext_i2d, \
 AROS_LCA(X509_REVOKED *, (___x), A0), \
 AROS_LCA(int, (___nid), D0), \
 AROS_LCA(void *, (___value), A1), \
 AROS_LCA(int, (___crit), D1), \
 AROS_LCA(unsigned long, (___flags), D2), \
     struct Library *, AMISSL_BASE_NAME, 1947, Amissl)

#define X509_EXTENSION_create_by_NID(___ex, ___nid, ___crit, ___data) \
      AROS_LC4(X509_EXTENSION *, X509_EXTENSION_create_by_NID, \
 AROS_LCA(X509_EXTENSION **, (___ex), A0), \
 AROS_LCA(int, (___nid), D0), \
 AROS_LCA(int, (___crit), D1), \
 AROS_LCA(ASN1_OCTET_STRING *, (___data), A1), \
     struct Library *, AMISSL_BASE_NAME, 1948, Amissl)

#define X509_EXTENSION_create_by_OBJ(___ex, ___obj, ___crit, ___data) \
      AROS_LC4(X509_EXTENSION *, X509_EXTENSION_create_by_OBJ, \
 AROS_LCA(X509_EXTENSION **, (___ex), A0), \
 AROS_LCA(const ASN1_OBJECT *, (___obj), A1), \
 AROS_LCA(int, (___crit), D0), \
 AROS_LCA(ASN1_OCTET_STRING *, (___data), A2), \
     struct Library *, AMISSL_BASE_NAME, 1949, Amissl)

#define X509_EXTENSION_set_object(___ex, ___obj) \
      AROS_LC2(int, X509_EXTENSION_set_object, \
 AROS_LCA(X509_EXTENSION *, (___ex), A0), \
 AROS_LCA(const ASN1_OBJECT *, (___obj), A1), \
     struct Library *, AMISSL_BASE_NAME, 1950, Amissl)

#define X509_EXTENSION_set_critical(___ex, ___crit) \
      AROS_LC2(int, X509_EXTENSION_set_critical, \
 AROS_LCA(X509_EXTENSION *, (___ex), A0), \
 AROS_LCA(int, (___crit), D0), \
     struct Library *, AMISSL_BASE_NAME, 1951, Amissl)

#define X509_EXTENSION_set_data(___ex, ___data) \
      AROS_LC2(int, X509_EXTENSION_set_data, \
 AROS_LCA(X509_EXTENSION *, (___ex), A0), \
 AROS_LCA(ASN1_OCTET_STRING *, (___data), A1), \
     struct Library *, AMISSL_BASE_NAME, 1952, Amissl)

#define X509_EXTENSION_get_object(___ex) \
      AROS_LC1(ASN1_OBJECT *, X509_EXTENSION_get_object, \
 AROS_LCA(X509_EXTENSION *, (___ex), A0), \
     struct Library *, AMISSL_BASE_NAME, 1953, Amissl)

#define X509_EXTENSION_get_data(___ne) \
      AROS_LC1(ASN1_OCTET_STRING *, X509_EXTENSION_get_data, \
 AROS_LCA(X509_EXTENSION *, (___ne), A0), \
     struct Library *, AMISSL_BASE_NAME, 1954, Amissl)

#define X509_EXTENSION_get_critical(___ex) \
      AROS_LC1(int, X509_EXTENSION_get_critical, \
 AROS_LCA(const X509_EXTENSION *, (___ex), A0), \
     struct Library *, AMISSL_BASE_NAME, 1955, Amissl)

#define X509at_get_attr_count(___x) \
      AROS_LC1(int, X509at_get_attr_count, \
 AROS_LCA(const STACK_OF(X509_ATTRIBUTE) *, (___x), A0), \
     struct Library *, AMISSL_BASE_NAME, 1956, Amissl)

#define X509at_get_attr_by_NID(___x, ___nid, ___lastpos) \
      AROS_LC3(int, X509at_get_attr_by_NID, \
 AROS_LCA(const STACK_OF(X509_ATTRIBUTE) *, (___x), A0), \
 AROS_LCA(int, (___nid), D0), \
 AROS_LCA(int, (___lastpos), D1), \
     struct Library *, AMISSL_BASE_NAME, 1957, Amissl)

#define X509at_get_attr_by_OBJ(___sk, ___obj, ___lastpos) \
      AROS_LC3(int, X509at_get_attr_by_OBJ, \
 AROS_LCA(const STACK_OF(X509_ATTRIBUTE) *, (___sk), A0), \
 AROS_LCA(const ASN1_OBJECT *, (___obj), A1), \
 AROS_LCA(int, (___lastpos), D0), \
     struct Library *, AMISSL_BASE_NAME, 1958, Amissl)

#define X509at_get_attr(___x, ___loc) \
      AROS_LC2(X509_ATTRIBUTE *, X509at_get_attr, \
 AROS_LCA(const STACK_OF(X509_ATTRIBUTE) *, (___x), A0), \
 AROS_LCA(int, (___loc), D0), \
     struct Library *, AMISSL_BASE_NAME, 1959, Amissl)

#define X509at_delete_attr(___x, ___loc) \
      AROS_LC2(X509_ATTRIBUTE *, X509at_delete_attr, \
 AROS_LCA(STACK_OF(X509_ATTRIBUTE) *, (___x), A0), \
 AROS_LCA(int, (___loc), D0), \
     struct Library *, AMISSL_BASE_NAME, 1960, Amissl)

#define X509at_add1_attr(___x, ___attr) \
      AROS_LC2(STACK_OF(X509_ATTRIBUTE) *, X509at_add1_attr, \
 AROS_LCA(STACK_OF(X509_ATTRIBUTE) **, (___x), A0), \
 AROS_LCA(X509_ATTRIBUTE *, (___attr), A1), \
     struct Library *, AMISSL_BASE_NAME, 1961, Amissl)

#define X509at_add1_attr_by_OBJ(___x, ___obj, ___type, ___bytes, ___len) \
      AROS_LC5(STACK_OF(X509_ATTRIBUTE) *, X509at_add1_attr_by_OBJ, \
 AROS_LCA(STACK_OF(X509_ATTRIBUTE) **, (___x), A0), \
 AROS_LCA(const ASN1_OBJECT *, (___obj), A1), \
 AROS_LCA(int, (___type), D0), \
 AROS_LCA(const unsigned char *, (___bytes), A2), \
 AROS_LCA(int, (___len), D1), \
     struct Library *, AMISSL_BASE_NAME, 1962, Amissl)

#define X509at_add1_attr_by_NID(___x, ___nid, ___type, ___bytes, ___len) \
      AROS_LC5(STACK_OF(X509_ATTRIBUTE) *, X509at_add1_attr_by_NID, \
 AROS_LCA(STACK_OF(X509_ATTRIBUTE) **, (___x), A0), \
 AROS_LCA(int, (___nid), D0), \
 AROS_LCA(int, (___type), D1), \
 AROS_LCA(const unsigned char *, (___bytes), A1), \
 AROS_LCA(int, (___len), D2), \
     struct Library *, AMISSL_BASE_NAME, 1963, Amissl)

#define X509at_add1_attr_by_txt(___x, ___attrname, ___type, ___bytes, ___len) \
      AROS_LC5(STACK_OF(X509_ATTRIBUTE) *, X509at_add1_attr_by_txt, \
 AROS_LCA(STACK_OF(X509_ATTRIBUTE) **, (___x), A0), \
 AROS_LCA(const char *, (___attrname), A1), \
 AROS_LCA(int, (___type), D0), \
 AROS_LCA(const unsigned char *, (___bytes), A2), \
 AROS_LCA(int, (___len), D1), \
     struct Library *, AMISSL_BASE_NAME, 1964, Amissl)

#define X509_ATTRIBUTE_create_by_NID(___attr, ___nid, ___atrtype, ___data, ___len) \
      AROS_LC5(X509_ATTRIBUTE *, X509_ATTRIBUTE_create_by_NID, \
 AROS_LCA(X509_ATTRIBUTE **, (___attr), A0), \
 AROS_LCA(int, (___nid), D0), \
 AROS_LCA(int, (___atrtype), D1), \
 AROS_LCA(const void *, (___data), A1), \
 AROS_LCA(int, (___len), D2), \
     struct Library *, AMISSL_BASE_NAME, 1965, Amissl)

#define X509_ATTRIBUTE_create_by_OBJ(___attr, ___obj, ___atrtype, ___data, ___len) \
      AROS_LC5(X509_ATTRIBUTE *, X509_ATTRIBUTE_create_by_OBJ, \
 AROS_LCA(X509_ATTRIBUTE **, (___attr), A0), \
 AROS_LCA(const ASN1_OBJECT *, (___obj), A1), \
 AROS_LCA(int, (___atrtype), D0), \
 AROS_LCA(const void *, (___data), A2), \
 AROS_LCA(int, (___len), D1), \
     struct Library *, AMISSL_BASE_NAME, 1966, Amissl)

#define X509_ATTRIBUTE_create_by_txt(___attr, ___atrname, ___type, ___bytes, ___len) \
      AROS_LC5(X509_ATTRIBUTE *, X509_ATTRIBUTE_create_by_txt, \
 AROS_LCA(X509_ATTRIBUTE **, (___attr), A0), \
 AROS_LCA(const char *, (___atrname), A1), \
 AROS_LCA(int, (___type), D0), \
 AROS_LCA(const unsigned char *, (___bytes), A2), \
 AROS_LCA(int, (___len), D1), \
     struct Library *, AMISSL_BASE_NAME, 1967, Amissl)

#define X509_ATTRIBUTE_set1_object(___attr, ___obj) \
      AROS_LC2(int, X509_ATTRIBUTE_set1_object, \
 AROS_LCA(X509_ATTRIBUTE *, (___attr), A0), \
 AROS_LCA(const ASN1_OBJECT *, (___obj), A1), \
     struct Library *, AMISSL_BASE_NAME, 1968, Amissl)

#define X509_ATTRIBUTE_set1_data(___attr, ___attrtype, ___data, ___len) \
      AROS_LC4(int, X509_ATTRIBUTE_set1_data, \
 AROS_LCA(X509_ATTRIBUTE *, (___attr), A0), \
 AROS_LCA(int, (___attrtype), D0), \
 AROS_LCA(const void *, (___data), A1), \
 AROS_LCA(int, (___len), D1), \
     struct Library *, AMISSL_BASE_NAME, 1969, Amissl)

#define X509_ATTRIBUTE_get0_data(___attr, ___idx, ___atrtype, ___data) \
      AROS_LC4(void *, X509_ATTRIBUTE_get0_data, \
 AROS_LCA(X509_ATTRIBUTE *, (___attr), A0), \
 AROS_LCA(int, (___idx), D0), \
 AROS_LCA(int, (___atrtype), D1), \
 AROS_LCA(void *, (___data), A1), \
     struct Library *, AMISSL_BASE_NAME, 1970, Amissl)

#define X509_ATTRIBUTE_count(___attr) \
      AROS_LC1(int, X509_ATTRIBUTE_count, \
 AROS_LCA(const X509_ATTRIBUTE *, (___attr), A0), \
     struct Library *, AMISSL_BASE_NAME, 1971, Amissl)

#define X509_ATTRIBUTE_get0_object(___attr) \
      AROS_LC1(ASN1_OBJECT *, X509_ATTRIBUTE_get0_object, \
 AROS_LCA(X509_ATTRIBUTE *, (___attr), A0), \
     struct Library *, AMISSL_BASE_NAME, 1972, Amissl)

#define X509_ATTRIBUTE_get0_type(___attr, ___idx) \
      AROS_LC2(ASN1_TYPE *, X509_ATTRIBUTE_get0_type, \
 AROS_LCA(X509_ATTRIBUTE *, (___attr), A0), \
 AROS_LCA(int, (___idx), D0), \
     struct Library *, AMISSL_BASE_NAME, 1973, Amissl)

#define X509_verify_cert(___ctx) \
      AROS_LC1(int, X509_verify_cert, \
 AROS_LCA(X509_STORE_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 1974, Amissl)

#define X509_find_by_issuer_and_serial(___sk, ___name, ___serial) \
      AROS_LC3(X509 *, X509_find_by_issuer_and_serial, \
 AROS_LCA(STACK_OF(X509) *, (___sk), A0), \
 AROS_LCA(const X509_NAME *, (___name), A1), \
 AROS_LCA(const ASN1_INTEGER *, (___serial), A2), \
     struct Library *, AMISSL_BASE_NAME, 1975, Amissl)

#define X509_find_by_subject(___sk, ___name) \
      AROS_LC2(X509 *, X509_find_by_subject, \
 AROS_LCA(STACK_OF(X509) *, (___sk), A0), \
 AROS_LCA(const X509_NAME *, (___name), A1), \
     struct Library *, AMISSL_BASE_NAME, 1976, Amissl)

#define PBEPARAM_new() \
      AROS_LC0(PBEPARAM *, PBEPARAM_new, \
     struct Library *, AMISSL_BASE_NAME, 1977, Amissl)

#define PBEPARAM_free(___a) \
      AROS_LC1(void, PBEPARAM_free, \
 AROS_LCA(PBEPARAM *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 1978, Amissl)

#define d2i_PBEPARAM(___a, ___in, ___len) \
      AROS_LC3(PBEPARAM *, d2i_PBEPARAM, \
 AROS_LCA(PBEPARAM **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 1979, Amissl)

#define i2d_PBEPARAM(___a, ___out) \
      AROS_LC2(int, i2d_PBEPARAM, \
 AROS_LCA(const PBEPARAM *, (___a), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 1980, Amissl)

#define PBEPARAM_it() \
      AROS_LC0(const ASN1_ITEM *, PBEPARAM_it, \
     struct Library *, AMISSL_BASE_NAME, 1981, Amissl)

#define PBE2PARAM_new() \
      AROS_LC0(PBE2PARAM *, PBE2PARAM_new, \
     struct Library *, AMISSL_BASE_NAME, 1982, Amissl)

#define PBE2PARAM_free(___a) \
      AROS_LC1(void, PBE2PARAM_free, \
 AROS_LCA(PBE2PARAM *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 1983, Amissl)

#define d2i_PBE2PARAM(___a, ___in, ___len) \
      AROS_LC3(PBE2PARAM *, d2i_PBE2PARAM, \
 AROS_LCA(PBE2PARAM **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 1984, Amissl)

#define i2d_PBE2PARAM(___a, ___out) \
      AROS_LC2(int, i2d_PBE2PARAM, \
 AROS_LCA(const PBE2PARAM *, (___a), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 1985, Amissl)

#define PBE2PARAM_it() \
      AROS_LC0(const ASN1_ITEM *, PBE2PARAM_it, \
     struct Library *, AMISSL_BASE_NAME, 1986, Amissl)

#define PBKDF2PARAM_new() \
      AROS_LC0(PBKDF2PARAM *, PBKDF2PARAM_new, \
     struct Library *, AMISSL_BASE_NAME, 1987, Amissl)

#define PBKDF2PARAM_free(___a) \
      AROS_LC1(void, PBKDF2PARAM_free, \
 AROS_LCA(PBKDF2PARAM *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 1988, Amissl)

#define d2i_PBKDF2PARAM(___a, ___in, ___len) \
      AROS_LC3(PBKDF2PARAM *, d2i_PBKDF2PARAM, \
 AROS_LCA(PBKDF2PARAM **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 1989, Amissl)

#define i2d_PBKDF2PARAM(___a, ___out) \
      AROS_LC2(int, i2d_PBKDF2PARAM, \
 AROS_LCA(const PBKDF2PARAM *, (___a), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 1990, Amissl)

#define PBKDF2PARAM_it() \
      AROS_LC0(const ASN1_ITEM *, PBKDF2PARAM_it, \
     struct Library *, AMISSL_BASE_NAME, 1991, Amissl)

#define PKCS5_pbe_set(___alg, ___iter, ___salt, ___saltlen) \
      AROS_LC4(X509_ALGOR *, PKCS5_pbe_set, \
 AROS_LCA(int, (___alg), D0), \
 AROS_LCA(int, (___iter), D1), \
 AROS_LCA(const unsigned char *, (___salt), A0), \
 AROS_LCA(int, (___saltlen), D2), \
     struct Library *, AMISSL_BASE_NAME, 1992, Amissl)

#define PKCS5_pbe2_set(___cipher, ___iter, ___salt, ___saltlen) \
      AROS_LC4(X509_ALGOR *, PKCS5_pbe2_set, \
 AROS_LCA(const EVP_CIPHER *, (___cipher), A0), \
 AROS_LCA(int, (___iter), D0), \
 AROS_LCA(unsigned char *, (___salt), A1), \
 AROS_LCA(int, (___saltlen), D1), \
     struct Library *, AMISSL_BASE_NAME, 1993, Amissl)

#define PKCS8_PRIV_KEY_INFO_new() \
      AROS_LC0(PKCS8_PRIV_KEY_INFO *, PKCS8_PRIV_KEY_INFO_new, \
     struct Library *, AMISSL_BASE_NAME, 1994, Amissl)

#define PKCS8_PRIV_KEY_INFO_free(___a) \
      AROS_LC1(void, PKCS8_PRIV_KEY_INFO_free, \
 AROS_LCA(PKCS8_PRIV_KEY_INFO *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 1995, Amissl)

#define d2i_PKCS8_PRIV_KEY_INFO(___a, ___in, ___len) \
      AROS_LC3(PKCS8_PRIV_KEY_INFO *, d2i_PKCS8_PRIV_KEY_INFO, \
 AROS_LCA(PKCS8_PRIV_KEY_INFO **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 1996, Amissl)

#define i2d_PKCS8_PRIV_KEY_INFO(___a, ___out) \
      AROS_LC2(int, i2d_PKCS8_PRIV_KEY_INFO, \
 AROS_LCA(const PKCS8_PRIV_KEY_INFO *, (___a), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 1997, Amissl)

#define PKCS8_PRIV_KEY_INFO_it() \
      AROS_LC0(const ASN1_ITEM *, PKCS8_PRIV_KEY_INFO_it, \
     struct Library *, AMISSL_BASE_NAME, 1998, Amissl)

#define EVP_PKCS82PKEY(___p8) \
      AROS_LC1(EVP_PKEY *, EVP_PKCS82PKEY, \
 AROS_LCA(const PKCS8_PRIV_KEY_INFO *, (___p8), A0), \
     struct Library *, AMISSL_BASE_NAME, 1999, Amissl)

#define EVP_PKEY2PKCS8(___pkey) \
      AROS_LC1(PKCS8_PRIV_KEY_INFO *, EVP_PKEY2PKCS8, \
 AROS_LCA(const EVP_PKEY *, (___pkey), A0), \
     struct Library *, AMISSL_BASE_NAME, 2000, Amissl)

#define X509_check_trust(___x, ___id, ___flags) \
      AROS_LC3(int, X509_check_trust, \
 AROS_LCA(X509 *, (___x), A0), \
 AROS_LCA(int, (___id), D0), \
 AROS_LCA(int, (___flags), D1), \
     struct Library *, AMISSL_BASE_NAME, 2003, Amissl)

#define X509_TRUST_get_count() \
      AROS_LC0(int, X509_TRUST_get_count, \
     struct Library *, AMISSL_BASE_NAME, 2004, Amissl)

#define X509_TRUST_get0(___idx) \
      AROS_LC1(X509_TRUST *, X509_TRUST_get0, \
 AROS_LCA(int, (___idx), D0), \
     struct Library *, AMISSL_BASE_NAME, 2005, Amissl)

#define X509_TRUST_get_by_id(___id) \
      AROS_LC1(int, X509_TRUST_get_by_id, \
 AROS_LCA(int, (___id), D0), \
     struct Library *, AMISSL_BASE_NAME, 2006, Amissl)

#define X509_TRUST_add(___id, ___flags, ___ck, ___name, ___arg1, ___arg2) \
      AROS_LC6(int, X509_TRUST_add, \
 AROS_LCA(int, (___id), D0), \
 AROS_LCA(int, (___flags), D1), \
 AROS_LCA(int (*)(X509_TRUST *,X509 *,int), (___ck), A0), \
 AROS_LCA(const char *, (___name), A1), \
 AROS_LCA(int, (___arg1), D2), \
 AROS_LCA(void *, (___arg2), A2), \
     struct Library *, AMISSL_BASE_NAME, 2007, Amissl)

#define X509_TRUST_cleanup() \
      AROS_LC0(void, X509_TRUST_cleanup, \
     struct Library *, AMISSL_BASE_NAME, 2008, Amissl)

#define X509_TRUST_get_flags(___xp) \
      AROS_LC1(int, X509_TRUST_get_flags, \
 AROS_LCA(const X509_TRUST *, (___xp), A0), \
     struct Library *, AMISSL_BASE_NAME, 2009, Amissl)

#define X509_TRUST_get0_name(___xp) \
      AROS_LC1(char *, X509_TRUST_get0_name, \
 AROS_LCA(const X509_TRUST *, (___xp), A0), \
     struct Library *, AMISSL_BASE_NAME, 2010, Amissl)

#define X509_TRUST_get_trust(___xp) \
      AROS_LC1(int, X509_TRUST_get_trust, \
 AROS_LCA(const X509_TRUST *, (___xp), A0), \
     struct Library *, AMISSL_BASE_NAME, 2011, Amissl)

#define ERR_load_X509_strings() \
      AROS_LC0(int, ERR_load_X509_strings, \
     struct Library *, AMISSL_BASE_NAME, 2012, Amissl)

#define X509_OBJECT_idx_by_subject(___h, ___type, ___name) \
      AROS_LC3(int, X509_OBJECT_idx_by_subject, \
 AROS_LCA(STACK_OF(X509_OBJECT) *, (___h), A0), \
 AROS_LCA(X509_LOOKUP_TYPE, (___type), D0), \
 AROS_LCA(const X509_NAME *, (___name), A1), \
     struct Library *, AMISSL_BASE_NAME, 2013, Amissl)

#define X509_OBJECT_retrieve_by_subject(___h, ___type, ___name) \
      AROS_LC3(X509_OBJECT *, X509_OBJECT_retrieve_by_subject, \
 AROS_LCA(STACK_OF(X509_OBJECT) *, (___h), A0), \
 AROS_LCA(X509_LOOKUP_TYPE, (___type), D0), \
 AROS_LCA(const X509_NAME *, (___name), A1), \
     struct Library *, AMISSL_BASE_NAME, 2014, Amissl)

#define X509_OBJECT_retrieve_match(___h, ___x) \
      AROS_LC2(X509_OBJECT *, X509_OBJECT_retrieve_match, \
 AROS_LCA(STACK_OF(X509_OBJECT) *, (___h), A0), \
 AROS_LCA(X509_OBJECT *, (___x), A1), \
     struct Library *, AMISSL_BASE_NAME, 2015, Amissl)

#define X509_OBJECT_up_ref_count(___a) \
      AROS_LC1(int, X509_OBJECT_up_ref_count, \
 AROS_LCA(X509_OBJECT *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 2016, Amissl)

#define X509_STORE_new() \
      AROS_LC0(X509_STORE *, X509_STORE_new, \
     struct Library *, AMISSL_BASE_NAME, 2017, Amissl)

#define X509_STORE_free(___xs) \
      AROS_LC1(void, X509_STORE_free, \
 AROS_LCA(X509_STORE *, (___xs), A0), \
     struct Library *, AMISSL_BASE_NAME, 2018, Amissl)

#define X509_STORE_set_flags(___xs, ___flags) \
      AROS_LC2(int, X509_STORE_set_flags, \
 AROS_LCA(X509_STORE *, (___xs), A0), \
 AROS_LCA(unsigned long, (___flags), D0), \
     struct Library *, AMISSL_BASE_NAME, 2019, Amissl)

#define X509_STORE_set_purpose(___xs, ___purpose) \
      AROS_LC2(int, X509_STORE_set_purpose, \
 AROS_LCA(X509_STORE *, (___xs), A0), \
 AROS_LCA(int, (___purpose), D0), \
     struct Library *, AMISSL_BASE_NAME, 2020, Amissl)

#define X509_STORE_set_trust(___xs, ___trust) \
      AROS_LC2(int, X509_STORE_set_trust, \
 AROS_LCA(X509_STORE *, (___xs), A0), \
 AROS_LCA(int, (___trust), D0), \
     struct Library *, AMISSL_BASE_NAME, 2021, Amissl)

#define X509_STORE_CTX_new() \
      AROS_LC0(X509_STORE_CTX *, X509_STORE_CTX_new, \
     struct Library *, AMISSL_BASE_NAME, 2022, Amissl)

#define X509_STORE_CTX_get1_issuer(___issuer, ___ctx, ___x) \
      AROS_LC3(int, X509_STORE_CTX_get1_issuer, \
 AROS_LCA(X509 **, (___issuer), A0), \
 AROS_LCA(X509_STORE_CTX *, (___ctx), A1), \
 AROS_LCA(X509 *, (___x), A2), \
     struct Library *, AMISSL_BASE_NAME, 2023, Amissl)

#define X509_STORE_CTX_free(___ctx) \
      AROS_LC1(void, X509_STORE_CTX_free, \
 AROS_LCA(X509_STORE_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 2024, Amissl)

#define X509_STORE_CTX_init(___ctx, ___trust_store, ___target, ___untrusted) \
      AROS_LC4(int, X509_STORE_CTX_init, \
 AROS_LCA(X509_STORE_CTX *, (___ctx), A0), \
 AROS_LCA(X509_STORE *, (___trust_store), A1), \
 AROS_LCA(X509 *, (___target), A2), \
 AROS_LCA(STACK_OF(X509) *, (___untrusted), A3), \
     struct Library *, AMISSL_BASE_NAME, 2025, Amissl)

#define X509_STORE_CTX_set0_trusted_stack(___ctx, ___sk) \
      AROS_LC2(void, X509_STORE_CTX_set0_trusted_stack, \
 AROS_LCA(X509_STORE_CTX *, (___ctx), A0), \
 AROS_LCA(STACK_OF(X509) *, (___sk), A1), \
     struct Library *, AMISSL_BASE_NAME, 2026, Amissl)

#define X509_STORE_CTX_cleanup(___ctx) \
      AROS_LC1(void, X509_STORE_CTX_cleanup, \
 AROS_LCA(X509_STORE_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 2027, Amissl)

#define X509_STORE_add_lookup(___xs, ___m) \
      AROS_LC2(X509_LOOKUP *, X509_STORE_add_lookup, \
 AROS_LCA(X509_STORE *, (___xs), A0), \
 AROS_LCA(X509_LOOKUP_METHOD *, (___m), A1), \
     struct Library *, AMISSL_BASE_NAME, 2028, Amissl)

#define X509_LOOKUP_hash_dir() \
      AROS_LC0(X509_LOOKUP_METHOD *, X509_LOOKUP_hash_dir, \
     struct Library *, AMISSL_BASE_NAME, 2029, Amissl)

#define X509_LOOKUP_file() \
      AROS_LC0(X509_LOOKUP_METHOD *, X509_LOOKUP_file, \
     struct Library *, AMISSL_BASE_NAME, 2030, Amissl)

#define X509_STORE_add_cert(___xs, ___x) \
      AROS_LC2(int, X509_STORE_add_cert, \
 AROS_LCA(X509_STORE *, (___xs), A0), \
 AROS_LCA(X509 *, (___x), A1), \
     struct Library *, AMISSL_BASE_NAME, 2031, Amissl)

#define X509_STORE_add_crl(___xs, ___x) \
      AROS_LC2(int, X509_STORE_add_crl, \
 AROS_LCA(X509_STORE *, (___xs), A0), \
 AROS_LCA(X509_CRL *, (___x), A1), \
     struct Library *, AMISSL_BASE_NAME, 2032, Amissl)

#define X509_STORE_CTX_get_by_subject(___vs, ___type, ___name, ___ret) \
      AROS_LC4(int, X509_STORE_CTX_get_by_subject, \
 AROS_LCA(const X509_STORE_CTX *, (___vs), A0), \
 AROS_LCA(X509_LOOKUP_TYPE, (___type), D0), \
 AROS_LCA(const X509_NAME *, (___name), A1), \
 AROS_LCA(X509_OBJECT *, (___ret), A2), \
     struct Library *, AMISSL_BASE_NAME, 2033, Amissl)

#define X509_LOOKUP_ctrl(___ctx, ___cmd, ___argc, ___argl, ___ret) \
      AROS_LC5(int, X509_LOOKUP_ctrl, \
 AROS_LCA(X509_LOOKUP *, (___ctx), A0), \
 AROS_LCA(int, (___cmd), D0), \
 AROS_LCA(const char *, (___argc), A1), \
 AROS_LCA(long, (___argl), D1), \
 AROS_LCA(char **, (___ret), A2), \
     struct Library *, AMISSL_BASE_NAME, 2034, Amissl)

#define X509_load_cert_file(___ctx, ___file, ___type) \
      AROS_LC3(int, X509_load_cert_file, \
 AROS_LCA(X509_LOOKUP *, (___ctx), A0), \
 AROS_LCA(const char *, (___file), A1), \
 AROS_LCA(int, (___type), D0), \
     struct Library *, AMISSL_BASE_NAME, 2035, Amissl)

#define X509_load_crl_file(___ctx, ___file, ___type) \
      AROS_LC3(int, X509_load_crl_file, \
 AROS_LCA(X509_LOOKUP *, (___ctx), A0), \
 AROS_LCA(const char *, (___file), A1), \
 AROS_LCA(int, (___type), D0), \
     struct Library *, AMISSL_BASE_NAME, 2036, Amissl)

#define X509_load_cert_crl_file(___ctx, ___file, ___type) \
      AROS_LC3(int, X509_load_cert_crl_file, \
 AROS_LCA(X509_LOOKUP *, (___ctx), A0), \
 AROS_LCA(const char *, (___file), A1), \
 AROS_LCA(int, (___type), D0), \
     struct Library *, AMISSL_BASE_NAME, 2037, Amissl)

#define X509_LOOKUP_new(___method) \
      AROS_LC1(X509_LOOKUP *, X509_LOOKUP_new, \
 AROS_LCA(X509_LOOKUP_METHOD *, (___method), A0), \
     struct Library *, AMISSL_BASE_NAME, 2038, Amissl)

#define X509_LOOKUP_free(___ctx) \
      AROS_LC1(void, X509_LOOKUP_free, \
 AROS_LCA(X509_LOOKUP *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 2039, Amissl)

#define X509_LOOKUP_init(___ctx) \
      AROS_LC1(int, X509_LOOKUP_init, \
 AROS_LCA(X509_LOOKUP *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 2040, Amissl)

#define X509_LOOKUP_by_subject(___ctx, ___type, ___name, ___ret) \
      AROS_LC4(int, X509_LOOKUP_by_subject, \
 AROS_LCA(X509_LOOKUP *, (___ctx), A0), \
 AROS_LCA(X509_LOOKUP_TYPE, (___type), D0), \
 AROS_LCA(const X509_NAME *, (___name), A1), \
 AROS_LCA(X509_OBJECT *, (___ret), A2), \
     struct Library *, AMISSL_BASE_NAME, 2041, Amissl)

#define X509_LOOKUP_by_issuer_serial(___ctx, ___type, ___name, ___serial, ___ret) \
      AROS_LC5(int, X509_LOOKUP_by_issuer_serial, \
 AROS_LCA(X509_LOOKUP *, (___ctx), A0), \
 AROS_LCA(X509_LOOKUP_TYPE, (___type), D0), \
 AROS_LCA(const X509_NAME *, (___name), A1), \
 AROS_LCA(const ASN1_INTEGER *, (___serial), A2), \
 AROS_LCA(X509_OBJECT *, (___ret), A3), \
     struct Library *, AMISSL_BASE_NAME, 2042, Amissl)

#define X509_LOOKUP_by_fingerprint(___ctx, ___type, ___bytes, ___len, ___ret) \
      AROS_LC5(int, X509_LOOKUP_by_fingerprint, \
 AROS_LCA(X509_LOOKUP *, (___ctx), A0), \
 AROS_LCA(X509_LOOKUP_TYPE, (___type), D0), \
 AROS_LCA(const unsigned char *, (___bytes), A1), \
 AROS_LCA(int, (___len), D1), \
 AROS_LCA(X509_OBJECT *, (___ret), A2), \
     struct Library *, AMISSL_BASE_NAME, 2043, Amissl)

#define X509_LOOKUP_by_alias(___ctx, ___type, ___str, ___len, ___ret) \
      AROS_LC5(int, X509_LOOKUP_by_alias, \
 AROS_LCA(X509_LOOKUP *, (___ctx), A0), \
 AROS_LCA(X509_LOOKUP_TYPE, (___type), D0), \
 AROS_LCA(const char *, (___str), A1), \
 AROS_LCA(int, (___len), D1), \
 AROS_LCA(X509_OBJECT *, (___ret), A2), \
     struct Library *, AMISSL_BASE_NAME, 2044, Amissl)

#define X509_LOOKUP_shutdown(___ctx) \
      AROS_LC1(int, X509_LOOKUP_shutdown, \
 AROS_LCA(X509_LOOKUP *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 2045, Amissl)

#define X509_STORE_load_locations(___xs, ___file, ___dir) \
      AROS_LC3(int, X509_STORE_load_locations, \
 AROS_LCA(X509_STORE *, (___xs), A0), \
 AROS_LCA(const char *, (___file), A1), \
 AROS_LCA(const char *, (___dir), A2), \
     struct Library *, AMISSL_BASE_NAME, 2046, Amissl)

#define X509_STORE_set_default_paths(___xs) \
      AROS_LC1(int, X509_STORE_set_default_paths, \
 AROS_LCA(X509_STORE *, (___xs), A0), \
     struct Library *, AMISSL_BASE_NAME, 2047, Amissl)

#define OBSOLETE_X509_STORE_CTX_get_ex_new_index(___argl, ___argp, ___new_func, ___dup_func, ___free_func) \
      AROS_LC5(int, OBSOLETE_X509_STORE_CTX_get_ex_new_index, \
 AROS_LCA(long, (___argl), D0), \
 AROS_LCA(void *, (___argp), A0), \
 AROS_LCA(CRYPTO_EX_new *, (___new_func), A1), \
 AROS_LCA(CRYPTO_EX_dup *, (___dup_func), A2), \
 AROS_LCA(CRYPTO_EX_free *, (___free_func), A3), \
     struct Library *, AMISSL_BASE_NAME, 2048, Amissl)

#define X509_STORE_CTX_set_ex_data(___ctx, ___idx, ___data) \
      AROS_LC3(int, X509_STORE_CTX_set_ex_data, \
 AROS_LCA(X509_STORE_CTX *, (___ctx), A0), \
 AROS_LCA(int, (___idx), D0), \
 AROS_LCA(void *, (___data), A1), \
     struct Library *, AMISSL_BASE_NAME, 2049, Amissl)

#define X509_STORE_CTX_get_ex_data(___ctx, ___idx) \
      AROS_LC2(void *, X509_STORE_CTX_get_ex_data, \
 AROS_LCA(const X509_STORE_CTX *, (___ctx), A0), \
 AROS_LCA(int, (___idx), D0), \
     struct Library *, AMISSL_BASE_NAME, 2050, Amissl)

#define X509_STORE_CTX_get_error(___ctx) \
      AROS_LC1(int, X509_STORE_CTX_get_error, \
 AROS_LCA(const X509_STORE_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 2051, Amissl)

#define X509_STORE_CTX_set_error(___ctx, ___s) \
      AROS_LC2(void, X509_STORE_CTX_set_error, \
 AROS_LCA(X509_STORE_CTX *, (___ctx), A0), \
 AROS_LCA(int, (___s), D0), \
     struct Library *, AMISSL_BASE_NAME, 2052, Amissl)

#define X509_STORE_CTX_get_error_depth(___ctx) \
      AROS_LC1(int, X509_STORE_CTX_get_error_depth, \
 AROS_LCA(const X509_STORE_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 2053, Amissl)

#define X509_STORE_CTX_get_current_cert(___ctx) \
      AROS_LC1(X509 *, X509_STORE_CTX_get_current_cert, \
 AROS_LCA(const X509_STORE_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 2054, Amissl)

#define X509_STORE_CTX_get0_chain(___ctx) \
      AROS_LC1(STACK_OF(X509) *, X509_STORE_CTX_get0_chain, \
 AROS_LCA(const X509_STORE_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 2055, Amissl)

#define X509_STORE_CTX_get1_chain(___ctx) \
      AROS_LC1(STACK_OF(X509) *, X509_STORE_CTX_get1_chain, \
 AROS_LCA(const X509_STORE_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 2056, Amissl)

#define X509_STORE_CTX_set_cert(___c, ___x) \
      AROS_LC2(void, X509_STORE_CTX_set_cert, \
 AROS_LCA(X509_STORE_CTX *, (___c), A0), \
 AROS_LCA(X509 *, (___x), A1), \
     struct Library *, AMISSL_BASE_NAME, 2057, Amissl)

#define X509_STORE_CTX_set_purpose(___ctx, ___purpose) \
      AROS_LC2(int, X509_STORE_CTX_set_purpose, \
 AROS_LCA(X509_STORE_CTX *, (___ctx), A0), \
 AROS_LCA(int, (___purpose), D0), \
     struct Library *, AMISSL_BASE_NAME, 2058, Amissl)

#define X509_STORE_CTX_set_trust(___ctx, ___trust) \
      AROS_LC2(int, X509_STORE_CTX_set_trust, \
 AROS_LCA(X509_STORE_CTX *, (___ctx), A0), \
 AROS_LCA(int, (___trust), D0), \
     struct Library *, AMISSL_BASE_NAME, 2059, Amissl)

#define X509_STORE_CTX_purpose_inherit(___ctx, ___def_purpose, ___purpose, ___trust) \
      AROS_LC4(int, X509_STORE_CTX_purpose_inherit, \
 AROS_LCA(X509_STORE_CTX *, (___ctx), A0), \
 AROS_LCA(int, (___def_purpose), D0), \
 AROS_LCA(int, (___purpose), D1), \
 AROS_LCA(int, (___trust), D2), \
     struct Library *, AMISSL_BASE_NAME, 2060, Amissl)

#define X509_STORE_CTX_set_flags(___ctx, ___flags) \
      AROS_LC2(void, X509_STORE_CTX_set_flags, \
 AROS_LCA(X509_STORE_CTX *, (___ctx), A0), \
 AROS_LCA(unsigned long, (___flags), D0), \
     struct Library *, AMISSL_BASE_NAME, 2061, Amissl)

#define X509_STORE_CTX_set_time(___ctx, ___flags, ___t) \
      AROS_LC3(void, X509_STORE_CTX_set_time, \
 AROS_LCA(X509_STORE_CTX *, (___ctx), A0), \
 AROS_LCA(unsigned long, (___flags), D0), \
 AROS_LCA(time_t, (___t), D1), \
     struct Library *, AMISSL_BASE_NAME, 2062, Amissl)

#define X509_STORE_CTX_set_verify_cb(___ctx, ___verify_cb) \
      AROS_LC2(void, X509_STORE_CTX_set_verify_cb, \
 AROS_LCA(X509_STORE_CTX *, (___ctx), A0), \
 AROS_LCA(int (*)(int,X509_STORE_CTX *), (___verify_cb), A1), \
     struct Library *, AMISSL_BASE_NAME, 2063, Amissl)

#define BASIC_CONSTRAINTS_new() \
      AROS_LC0(BASIC_CONSTRAINTS *, BASIC_CONSTRAINTS_new, \
     struct Library *, AMISSL_BASE_NAME, 2064, Amissl)

#define BASIC_CONSTRAINTS_free(___a) \
      AROS_LC1(void, BASIC_CONSTRAINTS_free, \
 AROS_LCA(BASIC_CONSTRAINTS *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 2065, Amissl)

#define d2i_BASIC_CONSTRAINTS(___a, ___in, ___len) \
      AROS_LC3(BASIC_CONSTRAINTS *, d2i_BASIC_CONSTRAINTS, \
 AROS_LCA(BASIC_CONSTRAINTS **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 2066, Amissl)

#define i2d_BASIC_CONSTRAINTS(___a, ___out) \
      AROS_LC2(int, i2d_BASIC_CONSTRAINTS, \
 AROS_LCA(const BASIC_CONSTRAINTS *, (___a), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 2067, Amissl)

#define BASIC_CONSTRAINTS_it() \
      AROS_LC0(const ASN1_ITEM *, BASIC_CONSTRAINTS_it, \
     struct Library *, AMISSL_BASE_NAME, 2068, Amissl)

#define SXNET_new() \
      AROS_LC0(SXNET *, SXNET_new, \
     struct Library *, AMISSL_BASE_NAME, 2069, Amissl)

#define SXNET_free(___a) \
      AROS_LC1(void, SXNET_free, \
 AROS_LCA(SXNET *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 2070, Amissl)

#define d2i_SXNET(___a, ___in, ___len) \
      AROS_LC3(SXNET *, d2i_SXNET, \
 AROS_LCA(SXNET **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 2071, Amissl)

#define i2d_SXNET(___a, ___out) \
      AROS_LC2(int, i2d_SXNET, \
 AROS_LCA(const SXNET *, (___a), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 2072, Amissl)

#define SXNET_it() \
      AROS_LC0(const ASN1_ITEM *, SXNET_it, \
     struct Library *, AMISSL_BASE_NAME, 2073, Amissl)

#define SXNETID_new() \
      AROS_LC0(SXNETID *, SXNETID_new, \
     struct Library *, AMISSL_BASE_NAME, 2074, Amissl)

#define SXNETID_free(___a) \
      AROS_LC1(void, SXNETID_free, \
 AROS_LCA(SXNETID *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 2075, Amissl)

#define d2i_SXNETID(___a, ___in, ___len) \
      AROS_LC3(SXNETID *, d2i_SXNETID, \
 AROS_LCA(SXNETID **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 2076, Amissl)

#define i2d_SXNETID(___a, ___out) \
      AROS_LC2(int, i2d_SXNETID, \
 AROS_LCA(const SXNETID *, (___a), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 2077, Amissl)

#define SXNETID_it() \
      AROS_LC0(const ASN1_ITEM *, SXNETID_it, \
     struct Library *, AMISSL_BASE_NAME, 2078, Amissl)

#define SXNET_add_id_asc(___psx, ___zone, ___user, ___userlen) \
      AROS_LC4(int, SXNET_add_id_asc, \
 AROS_LCA(SXNET **, (___psx), A0), \
 AROS_LCA(const char *, (___zone), A1), \
 AROS_LCA(const char *, (___user), A2), \
 AROS_LCA(int, (___userlen), D0), \
     struct Library *, AMISSL_BASE_NAME, 2079, Amissl)

#define SXNET_add_id_ulong(___psx, ___lzone, ___user, ___userlen) \
      AROS_LC4(int, SXNET_add_id_ulong, \
 AROS_LCA(SXNET **, (___psx), A0), \
 AROS_LCA(unsigned long, (___lzone), D0), \
 AROS_LCA(const char *, (___user), A1), \
 AROS_LCA(int, (___userlen), D1), \
     struct Library *, AMISSL_BASE_NAME, 2080, Amissl)

#define SXNET_add_id_INTEGER(___psx, ___izone, ___user, ___userlen) \
      AROS_LC4(int, SXNET_add_id_INTEGER, \
 AROS_LCA(SXNET **, (___psx), A0), \
 AROS_LCA(ASN1_INTEGER *, (___izone), A1), \
 AROS_LCA(const char *, (___user), A2), \
 AROS_LCA(int, (___userlen), D0), \
     struct Library *, AMISSL_BASE_NAME, 2081, Amissl)

#define SXNET_get_id_asc(___sx, ___zone) \
      AROS_LC2(ASN1_OCTET_STRING *, SXNET_get_id_asc, \
 AROS_LCA(SXNET *, (___sx), A0), \
 AROS_LCA(const char *, (___zone), A1), \
     struct Library *, AMISSL_BASE_NAME, 2082, Amissl)

#define SXNET_get_id_ulong(___sx, ___lzone) \
      AROS_LC2(ASN1_OCTET_STRING *, SXNET_get_id_ulong, \
 AROS_LCA(SXNET *, (___sx), A0), \
 AROS_LCA(unsigned long, (___lzone), D0), \
     struct Library *, AMISSL_BASE_NAME, 2083, Amissl)

#define SXNET_get_id_INTEGER(___sx, ___zone) \
      AROS_LC2(ASN1_OCTET_STRING *, SXNET_get_id_INTEGER, \
 AROS_LCA(SXNET *, (___sx), A0), \
 AROS_LCA(ASN1_INTEGER *, (___zone), A1), \
     struct Library *, AMISSL_BASE_NAME, 2084, Amissl)

#define AUTHORITY_KEYID_new() \
      AROS_LC0(AUTHORITY_KEYID *, AUTHORITY_KEYID_new, \
     struct Library *, AMISSL_BASE_NAME, 2085, Amissl)

#define AUTHORITY_KEYID_free(___a) \
      AROS_LC1(void, AUTHORITY_KEYID_free, \
 AROS_LCA(AUTHORITY_KEYID *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 2086, Amissl)

#define d2i_AUTHORITY_KEYID(___a, ___in, ___len) \
      AROS_LC3(AUTHORITY_KEYID *, d2i_AUTHORITY_KEYID, \
 AROS_LCA(AUTHORITY_KEYID **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 2087, Amissl)

#define i2d_AUTHORITY_KEYID(___a, ___out) \
      AROS_LC2(int, i2d_AUTHORITY_KEYID, \
 AROS_LCA(const AUTHORITY_KEYID *, (___a), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 2088, Amissl)

#define AUTHORITY_KEYID_it() \
      AROS_LC0(const ASN1_ITEM *, AUTHORITY_KEYID_it, \
     struct Library *, AMISSL_BASE_NAME, 2089, Amissl)

#define PKEY_USAGE_PERIOD_new() \
      AROS_LC0(PKEY_USAGE_PERIOD *, PKEY_USAGE_PERIOD_new, \
     struct Library *, AMISSL_BASE_NAME, 2090, Amissl)

#define PKEY_USAGE_PERIOD_free(___a) \
      AROS_LC1(void, PKEY_USAGE_PERIOD_free, \
 AROS_LCA(PKEY_USAGE_PERIOD *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 2091, Amissl)

#define d2i_PKEY_USAGE_PERIOD(___a, ___in, ___len) \
      AROS_LC3(PKEY_USAGE_PERIOD *, d2i_PKEY_USAGE_PERIOD, \
 AROS_LCA(PKEY_USAGE_PERIOD **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 2092, Amissl)

#define i2d_PKEY_USAGE_PERIOD(___a, ___out) \
      AROS_LC2(int, i2d_PKEY_USAGE_PERIOD, \
 AROS_LCA(const PKEY_USAGE_PERIOD *, (___a), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 2093, Amissl)

#define PKEY_USAGE_PERIOD_it() \
      AROS_LC0(const ASN1_ITEM *, PKEY_USAGE_PERIOD_it, \
     struct Library *, AMISSL_BASE_NAME, 2094, Amissl)

#define GENERAL_NAME_new() \
      AROS_LC0(GENERAL_NAME *, GENERAL_NAME_new, \
     struct Library *, AMISSL_BASE_NAME, 2095, Amissl)

#define GENERAL_NAME_free(___a) \
      AROS_LC1(void, GENERAL_NAME_free, \
 AROS_LCA(GENERAL_NAME *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 2096, Amissl)

#define d2i_GENERAL_NAME(___a, ___in, ___len) \
      AROS_LC3(GENERAL_NAME *, d2i_GENERAL_NAME, \
 AROS_LCA(GENERAL_NAME **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 2097, Amissl)

#define i2d_GENERAL_NAME(___a, ___out) \
      AROS_LC2(int, i2d_GENERAL_NAME, \
 AROS_LCA(const GENERAL_NAME *, (___a), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 2098, Amissl)

#define GENERAL_NAME_it() \
      AROS_LC0(const ASN1_ITEM *, GENERAL_NAME_it, \
     struct Library *, AMISSL_BASE_NAME, 2099, Amissl)

#define i2v_GENERAL_NAME(___method, ___gen, ___ret) \
      AROS_LC3(STACK_OF(CONF_VALUE) *, i2v_GENERAL_NAME, \
 AROS_LCA(X509V3_EXT_METHOD *, (___method), A0), \
 AROS_LCA(GENERAL_NAME *, (___gen), A1), \
 AROS_LCA(STACK_OF(CONF_VALUE) *, (___ret), A2), \
     struct Library *, AMISSL_BASE_NAME, 2100, Amissl)

#define GENERAL_NAME_print(___out, ___gen) \
      AROS_LC2(int, GENERAL_NAME_print, \
 AROS_LCA(BIO *, (___out), A0), \
 AROS_LCA(GENERAL_NAME *, (___gen), A1), \
     struct Library *, AMISSL_BASE_NAME, 2101, Amissl)

#define GENERAL_NAMES_new() \
      AROS_LC0(GENERAL_NAMES *, GENERAL_NAMES_new, \
     struct Library *, AMISSL_BASE_NAME, 2102, Amissl)

#define GENERAL_NAMES_free(___a) \
      AROS_LC1(void, GENERAL_NAMES_free, \
 AROS_LCA(GENERAL_NAMES *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 2103, Amissl)

#define d2i_GENERAL_NAMES(___a, ___in, ___len) \
      AROS_LC3(GENERAL_NAMES *, d2i_GENERAL_NAMES, \
 AROS_LCA(GENERAL_NAMES **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 2104, Amissl)

#define i2d_GENERAL_NAMES(___a, ___out) \
      AROS_LC2(int, i2d_GENERAL_NAMES, \
 AROS_LCA(const GENERAL_NAMES *, (___a), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 2105, Amissl)

#define GENERAL_NAMES_it() \
      AROS_LC0(const ASN1_ITEM *, GENERAL_NAMES_it, \
     struct Library *, AMISSL_BASE_NAME, 2106, Amissl)

#define i2v_GENERAL_NAMES(___method, ___gen, ___extlist) \
      AROS_LC3(STACK_OF(CONF_VALUE) *, i2v_GENERAL_NAMES, \
 AROS_LCA(X509V3_EXT_METHOD *, (___method), A0), \
 AROS_LCA(GENERAL_NAMES *, (___gen), A1), \
 AROS_LCA(STACK_OF(CONF_VALUE) *, (___extlist), A2), \
     struct Library *, AMISSL_BASE_NAME, 2107, Amissl)

#define v2i_GENERAL_NAMES(___method, ___ctx, ___nval) \
      AROS_LC3(GENERAL_NAMES *, v2i_GENERAL_NAMES, \
 AROS_LCA(const X509V3_EXT_METHOD *, (___method), A0), \
 AROS_LCA(X509V3_CTX *, (___ctx), A1), \
 AROS_LCA(STACK_OF(CONF_VALUE) *, (___nval), A2), \
     struct Library *, AMISSL_BASE_NAME, 2108, Amissl)

#define OTHERNAME_new() \
      AROS_LC0(OTHERNAME *, OTHERNAME_new, \
     struct Library *, AMISSL_BASE_NAME, 2109, Amissl)

#define OTHERNAME_free(___a) \
      AROS_LC1(void, OTHERNAME_free, \
 AROS_LCA(OTHERNAME *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 2110, Amissl)

#define d2i_OTHERNAME(___a, ___in, ___len) \
      AROS_LC3(OTHERNAME *, d2i_OTHERNAME, \
 AROS_LCA(OTHERNAME **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 2111, Amissl)

#define i2d_OTHERNAME(___a, ___out) \
      AROS_LC2(int, i2d_OTHERNAME, \
 AROS_LCA(const OTHERNAME *, (___a), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 2112, Amissl)

#define OTHERNAME_it() \
      AROS_LC0(const ASN1_ITEM *, OTHERNAME_it, \
     struct Library *, AMISSL_BASE_NAME, 2113, Amissl)

#define EDIPARTYNAME_new() \
      AROS_LC0(EDIPARTYNAME *, EDIPARTYNAME_new, \
     struct Library *, AMISSL_BASE_NAME, 2114, Amissl)

#define EDIPARTYNAME_free(___a) \
      AROS_LC1(void, EDIPARTYNAME_free, \
 AROS_LCA(EDIPARTYNAME *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 2115, Amissl)

#define d2i_EDIPARTYNAME(___a, ___in, ___len) \
      AROS_LC3(EDIPARTYNAME *, d2i_EDIPARTYNAME, \
 AROS_LCA(EDIPARTYNAME **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 2116, Amissl)

#define i2d_EDIPARTYNAME(___a, ___out) \
      AROS_LC2(int, i2d_EDIPARTYNAME, \
 AROS_LCA(const EDIPARTYNAME *, (___a), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 2117, Amissl)

#define EDIPARTYNAME_it() \
      AROS_LC0(const ASN1_ITEM *, EDIPARTYNAME_it, \
     struct Library *, AMISSL_BASE_NAME, 2118, Amissl)

#define i2s_ASN1_OCTET_STRING(___method, ___ia5) \
      AROS_LC2(char *, i2s_ASN1_OCTET_STRING, \
 AROS_LCA(X509V3_EXT_METHOD *, (___method), A0), \
 AROS_LCA(const ASN1_OCTET_STRING *, (___ia5), A1), \
     struct Library *, AMISSL_BASE_NAME, 2119, Amissl)

#define s2i_ASN1_OCTET_STRING(___method, ___ctx, ___str) \
      AROS_LC3(ASN1_OCTET_STRING *, s2i_ASN1_OCTET_STRING, \
 AROS_LCA(X509V3_EXT_METHOD *, (___method), A0), \
 AROS_LCA(X509V3_CTX *, (___ctx), A1), \
 AROS_LCA(const char *, (___str), A2), \
     struct Library *, AMISSL_BASE_NAME, 2120, Amissl)

#define EXTENDED_KEY_USAGE_new() \
      AROS_LC0(EXTENDED_KEY_USAGE *, EXTENDED_KEY_USAGE_new, \
     struct Library *, AMISSL_BASE_NAME, 2121, Amissl)

#define EXTENDED_KEY_USAGE_free(___a) \
      AROS_LC1(void, EXTENDED_KEY_USAGE_free, \
 AROS_LCA(EXTENDED_KEY_USAGE *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 2122, Amissl)

#define d2i_EXTENDED_KEY_USAGE(___a, ___in, ___len) \
      AROS_LC3(EXTENDED_KEY_USAGE *, d2i_EXTENDED_KEY_USAGE, \
 AROS_LCA(EXTENDED_KEY_USAGE **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 2123, Amissl)

#define i2d_EXTENDED_KEY_USAGE(___a, ___out) \
      AROS_LC2(int, i2d_EXTENDED_KEY_USAGE, \
 AROS_LCA(const EXTENDED_KEY_USAGE *, (___a), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 2124, Amissl)

#define EXTENDED_KEY_USAGE_it() \
      AROS_LC0(const ASN1_ITEM *, EXTENDED_KEY_USAGE_it, \
     struct Library *, AMISSL_BASE_NAME, 2125, Amissl)

#define i2a_ACCESS_DESCRIPTION(___bp, ___a) \
      AROS_LC2(int, i2a_ACCESS_DESCRIPTION, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(const ACCESS_DESCRIPTION *, (___a), A1), \
     struct Library *, AMISSL_BASE_NAME, 2126, Amissl)

#define CERTIFICATEPOLICIES_new() \
      AROS_LC0(CERTIFICATEPOLICIES *, CERTIFICATEPOLICIES_new, \
     struct Library *, AMISSL_BASE_NAME, 2127, Amissl)

#define CERTIFICATEPOLICIES_free(___a) \
      AROS_LC1(void, CERTIFICATEPOLICIES_free, \
 AROS_LCA(CERTIFICATEPOLICIES *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 2128, Amissl)

#define d2i_CERTIFICATEPOLICIES(___a, ___in, ___len) \
      AROS_LC3(CERTIFICATEPOLICIES *, d2i_CERTIFICATEPOLICIES, \
 AROS_LCA(CERTIFICATEPOLICIES **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 2129, Amissl)

#define i2d_CERTIFICATEPOLICIES(___a, ___out) \
      AROS_LC2(int, i2d_CERTIFICATEPOLICIES, \
 AROS_LCA(const CERTIFICATEPOLICIES *, (___a), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 2130, Amissl)

#define CERTIFICATEPOLICIES_it() \
      AROS_LC0(const ASN1_ITEM *, CERTIFICATEPOLICIES_it, \
     struct Library *, AMISSL_BASE_NAME, 2131, Amissl)

#define POLICYINFO_new() \
      AROS_LC0(POLICYINFO *, POLICYINFO_new, \
     struct Library *, AMISSL_BASE_NAME, 2132, Amissl)

#define POLICYINFO_free(___a) \
      AROS_LC1(void, POLICYINFO_free, \
 AROS_LCA(POLICYINFO *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 2133, Amissl)

#define d2i_POLICYINFO(___a, ___in, ___len) \
      AROS_LC3(POLICYINFO *, d2i_POLICYINFO, \
 AROS_LCA(POLICYINFO **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 2134, Amissl)

#define i2d_POLICYINFO(___a, ___out) \
      AROS_LC2(int, i2d_POLICYINFO, \
 AROS_LCA(const POLICYINFO *, (___a), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 2135, Amissl)

#define POLICYINFO_it() \
      AROS_LC0(const ASN1_ITEM *, POLICYINFO_it, \
     struct Library *, AMISSL_BASE_NAME, 2136, Amissl)

#define POLICYQUALINFO_new() \
      AROS_LC0(POLICYQUALINFO *, POLICYQUALINFO_new, \
     struct Library *, AMISSL_BASE_NAME, 2137, Amissl)

#define POLICYQUALINFO_free(___a) \
      AROS_LC1(void, POLICYQUALINFO_free, \
 AROS_LCA(POLICYQUALINFO *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 2138, Amissl)

#define d2i_POLICYQUALINFO(___a, ___in, ___len) \
      AROS_LC3(POLICYQUALINFO *, d2i_POLICYQUALINFO, \
 AROS_LCA(POLICYQUALINFO **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 2139, Amissl)

#define i2d_POLICYQUALINFO(___a, ___out) \
      AROS_LC2(int, i2d_POLICYQUALINFO, \
 AROS_LCA(const POLICYQUALINFO *, (___a), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 2140, Amissl)

#define POLICYQUALINFO_it() \
      AROS_LC0(const ASN1_ITEM *, POLICYQUALINFO_it, \
     struct Library *, AMISSL_BASE_NAME, 2141, Amissl)

#define USERNOTICE_new() \
      AROS_LC0(USERNOTICE *, USERNOTICE_new, \
     struct Library *, AMISSL_BASE_NAME, 2142, Amissl)

#define USERNOTICE_free(___a) \
      AROS_LC1(void, USERNOTICE_free, \
 AROS_LCA(USERNOTICE *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 2143, Amissl)

#define d2i_USERNOTICE(___a, ___in, ___len) \
      AROS_LC3(USERNOTICE *, d2i_USERNOTICE, \
 AROS_LCA(USERNOTICE **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 2144, Amissl)

#define i2d_USERNOTICE(___a, ___out) \
      AROS_LC2(int, i2d_USERNOTICE, \
 AROS_LCA(const USERNOTICE *, (___a), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 2145, Amissl)

#define USERNOTICE_it() \
      AROS_LC0(const ASN1_ITEM *, USERNOTICE_it, \
     struct Library *, AMISSL_BASE_NAME, 2146, Amissl)

#define NOTICEREF_new() \
      AROS_LC0(NOTICEREF *, NOTICEREF_new, \
     struct Library *, AMISSL_BASE_NAME, 2147, Amissl)

#define NOTICEREF_free(___a) \
      AROS_LC1(void, NOTICEREF_free, \
 AROS_LCA(NOTICEREF *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 2148, Amissl)

#define d2i_NOTICEREF(___a, ___in, ___len) \
      AROS_LC3(NOTICEREF *, d2i_NOTICEREF, \
 AROS_LCA(NOTICEREF **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 2149, Amissl)

#define i2d_NOTICEREF(___a, ___out) \
      AROS_LC2(int, i2d_NOTICEREF, \
 AROS_LCA(const NOTICEREF *, (___a), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 2150, Amissl)

#define NOTICEREF_it() \
      AROS_LC0(const ASN1_ITEM *, NOTICEREF_it, \
     struct Library *, AMISSL_BASE_NAME, 2151, Amissl)

#define CRL_DIST_POINTS_new() \
      AROS_LC0(CRL_DIST_POINTS *, CRL_DIST_POINTS_new, \
     struct Library *, AMISSL_BASE_NAME, 2152, Amissl)

#define CRL_DIST_POINTS_free(___a) \
      AROS_LC1(void, CRL_DIST_POINTS_free, \
 AROS_LCA(CRL_DIST_POINTS *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 2153, Amissl)

#define d2i_CRL_DIST_POINTS(___a, ___in, ___len) \
      AROS_LC3(CRL_DIST_POINTS *, d2i_CRL_DIST_POINTS, \
 AROS_LCA(CRL_DIST_POINTS **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 2154, Amissl)

#define i2d_CRL_DIST_POINTS(___a, ___out) \
      AROS_LC2(int, i2d_CRL_DIST_POINTS, \
 AROS_LCA(const CRL_DIST_POINTS *, (___a), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 2155, Amissl)

#define CRL_DIST_POINTS_it() \
      AROS_LC0(const ASN1_ITEM *, CRL_DIST_POINTS_it, \
     struct Library *, AMISSL_BASE_NAME, 2156, Amissl)

#define DIST_POINT_new() \
      AROS_LC0(DIST_POINT *, DIST_POINT_new, \
     struct Library *, AMISSL_BASE_NAME, 2157, Amissl)

#define DIST_POINT_free(___a) \
      AROS_LC1(void, DIST_POINT_free, \
 AROS_LCA(DIST_POINT *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 2158, Amissl)

#define d2i_DIST_POINT(___a, ___in, ___len) \
      AROS_LC3(DIST_POINT *, d2i_DIST_POINT, \
 AROS_LCA(DIST_POINT **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 2159, Amissl)

#define i2d_DIST_POINT(___a, ___out) \
      AROS_LC2(int, i2d_DIST_POINT, \
 AROS_LCA(const DIST_POINT *, (___a), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 2160, Amissl)

#define DIST_POINT_it() \
      AROS_LC0(const ASN1_ITEM *, DIST_POINT_it, \
     struct Library *, AMISSL_BASE_NAME, 2161, Amissl)

#define DIST_POINT_NAME_new() \
      AROS_LC0(DIST_POINT_NAME *, DIST_POINT_NAME_new, \
     struct Library *, AMISSL_BASE_NAME, 2162, Amissl)

#define DIST_POINT_NAME_free(___a) \
      AROS_LC1(void, DIST_POINT_NAME_free, \
 AROS_LCA(DIST_POINT_NAME *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 2163, Amissl)

#define d2i_DIST_POINT_NAME(___a, ___in, ___len) \
      AROS_LC3(DIST_POINT_NAME *, d2i_DIST_POINT_NAME, \
 AROS_LCA(DIST_POINT_NAME **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 2164, Amissl)

#define i2d_DIST_POINT_NAME(___a, ___out) \
      AROS_LC2(int, i2d_DIST_POINT_NAME, \
 AROS_LCA(const DIST_POINT_NAME *, (___a), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 2165, Amissl)

#define DIST_POINT_NAME_it() \
      AROS_LC0(const ASN1_ITEM *, DIST_POINT_NAME_it, \
     struct Library *, AMISSL_BASE_NAME, 2166, Amissl)

#define ACCESS_DESCRIPTION_new() \
      AROS_LC0(ACCESS_DESCRIPTION *, ACCESS_DESCRIPTION_new, \
     struct Library *, AMISSL_BASE_NAME, 2167, Amissl)

#define ACCESS_DESCRIPTION_free(___a) \
      AROS_LC1(void, ACCESS_DESCRIPTION_free, \
 AROS_LCA(ACCESS_DESCRIPTION *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 2168, Amissl)

#define d2i_ACCESS_DESCRIPTION(___a, ___in, ___len) \
      AROS_LC3(ACCESS_DESCRIPTION *, d2i_ACCESS_DESCRIPTION, \
 AROS_LCA(ACCESS_DESCRIPTION **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 2169, Amissl)

#define i2d_ACCESS_DESCRIPTION(___a, ___out) \
      AROS_LC2(int, i2d_ACCESS_DESCRIPTION, \
 AROS_LCA(const ACCESS_DESCRIPTION *, (___a), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 2170, Amissl)

#define ACCESS_DESCRIPTION_it() \
      AROS_LC0(const ASN1_ITEM *, ACCESS_DESCRIPTION_it, \
     struct Library *, AMISSL_BASE_NAME, 2171, Amissl)

#define AUTHORITY_INFO_ACCESS_new() \
      AROS_LC0(AUTHORITY_INFO_ACCESS *, AUTHORITY_INFO_ACCESS_new, \
     struct Library *, AMISSL_BASE_NAME, 2172, Amissl)

#define AUTHORITY_INFO_ACCESS_free(___a) \
      AROS_LC1(void, AUTHORITY_INFO_ACCESS_free, \
 AROS_LCA(AUTHORITY_INFO_ACCESS *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 2173, Amissl)

#define d2i_AUTHORITY_INFO_ACCESS(___a, ___in, ___len) \
      AROS_LC3(AUTHORITY_INFO_ACCESS *, d2i_AUTHORITY_INFO_ACCESS, \
 AROS_LCA(AUTHORITY_INFO_ACCESS **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 2174, Amissl)

#define i2d_AUTHORITY_INFO_ACCESS(___a, ___out) \
      AROS_LC2(int, i2d_AUTHORITY_INFO_ACCESS, \
 AROS_LCA(const AUTHORITY_INFO_ACCESS *, (___a), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 2175, Amissl)

#define AUTHORITY_INFO_ACCESS_it() \
      AROS_LC0(const ASN1_ITEM *, AUTHORITY_INFO_ACCESS_it, \
     struct Library *, AMISSL_BASE_NAME, 2176, Amissl)

#define v2i_GENERAL_NAME(___method, ___ctx, ___cnf) \
      AROS_LC3(GENERAL_NAME *, v2i_GENERAL_NAME, \
 AROS_LCA(const X509V3_EXT_METHOD *, (___method), A0), \
 AROS_LCA(X509V3_CTX *, (___ctx), A1), \
 AROS_LCA(CONF_VALUE *, (___cnf), A2), \
     struct Library *, AMISSL_BASE_NAME, 2177, Amissl)

#define X509V3_conf_free(___val) \
      AROS_LC1(void, X509V3_conf_free, \
 AROS_LCA(CONF_VALUE *, (___val), A0), \
     struct Library *, AMISSL_BASE_NAME, 2178, Amissl)

#define X509V3_EXT_nconf_nid(___conf, ___ctx, ___ext_nid, ___value) \
      AROS_LC4(X509_EXTENSION *, X509V3_EXT_nconf_nid, \
 AROS_LCA(CONF *, (___conf), A0), \
 AROS_LCA(X509V3_CTX *, (___ctx), A1), \
 AROS_LCA(int, (___ext_nid), D0), \
 AROS_LCA(const char *, (___value), A2), \
     struct Library *, AMISSL_BASE_NAME, 2179, Amissl)

#define X509V3_EXT_nconf(___conf, ___ctx, ___name, ___value) \
      AROS_LC4(X509_EXTENSION *, X509V3_EXT_nconf, \
 AROS_LCA(CONF *, (___conf), A0), \
 AROS_LCA(X509V3_CTX *, (___ctx), A1), \
 AROS_LCA(const char *, (___name), A2), \
 AROS_LCA(const char *, (___value), A3), \
     struct Library *, AMISSL_BASE_NAME, 2180, Amissl)

#define X509V3_EXT_add_nconf_sk(___conf, ___ctx, ___section, ___sk) \
      AROS_LC4(int, X509V3_EXT_add_nconf_sk, \
 AROS_LCA(CONF *, (___conf), A0), \
 AROS_LCA(X509V3_CTX *, (___ctx), A1), \
 AROS_LCA(const char *, (___section), A2), \
 AROS_LCA(STACK_OF(X509_EXTENSION) **, (___sk), A3), \
     struct Library *, AMISSL_BASE_NAME, 2181, Amissl)

#define X509V3_EXT_add_nconf(___conf, ___ctx, ___section, ___cert) \
      AROS_LC4(int, X509V3_EXT_add_nconf, \
 AROS_LCA(CONF *, (___conf), A0), \
 AROS_LCA(X509V3_CTX *, (___ctx), A1), \
 AROS_LCA(const char *, (___section), A2), \
 AROS_LCA(X509 *, (___cert), A3), \
     struct Library *, AMISSL_BASE_NAME, 2182, Amissl)

#define X509V3_EXT_REQ_add_nconf(___conf, ___ctx, ___section, ___req) \
      AROS_LC4(int, X509V3_EXT_REQ_add_nconf, \
 AROS_LCA(CONF *, (___conf), A0), \
 AROS_LCA(X509V3_CTX *, (___ctx), A1), \
 AROS_LCA(const char *, (___section), A2), \
 AROS_LCA(X509_REQ *, (___req), A3), \
     struct Library *, AMISSL_BASE_NAME, 2183, Amissl)

#define X509V3_EXT_CRL_add_nconf(___conf, ___ctx, ___section, ___crl) \
      AROS_LC4(int, X509V3_EXT_CRL_add_nconf, \
 AROS_LCA(CONF *, (___conf), A0), \
 AROS_LCA(X509V3_CTX *, (___ctx), A1), \
 AROS_LCA(const char *, (___section), A2), \
 AROS_LCA(X509_CRL *, (___crl), A3), \
     struct Library *, AMISSL_BASE_NAME, 2184, Amissl)

#define X509V3_EXT_conf_nid(___conf, ___ctx, ___ext_nid, ___value) \
      AROS_LC4(X509_EXTENSION *, X509V3_EXT_conf_nid, \
 AROS_LCA(LHASH_OF(CONF_VALUE) *, (___conf), A0), \
 AROS_LCA(X509V3_CTX *, (___ctx), A1), \
 AROS_LCA(int, (___ext_nid), D0), \
 AROS_LCA(const char *, (___value), A2), \
     struct Library *, AMISSL_BASE_NAME, 2185, Amissl)

#define X509V3_EXT_conf(___conf, ___ctx, ___name, ___value) \
      AROS_LC4(X509_EXTENSION *, X509V3_EXT_conf, \
 AROS_LCA(LHASH_OF(CONF_VALUE) *, (___conf), A0), \
 AROS_LCA(X509V3_CTX *, (___ctx), A1), \
 AROS_LCA(const char *, (___name), A2), \
 AROS_LCA(const char *, (___value), A3), \
     struct Library *, AMISSL_BASE_NAME, 2186, Amissl)

#define X509V3_EXT_add_conf(___conf, ___ctx, ___section, ___cert) \
      AROS_LC4(int, X509V3_EXT_add_conf, \
 AROS_LCA(LHASH_OF(CONF_VALUE) *, (___conf), A0), \
 AROS_LCA(X509V3_CTX *, (___ctx), A1), \
 AROS_LCA(const char *, (___section), A2), \
 AROS_LCA(X509 *, (___cert), A3), \
     struct Library *, AMISSL_BASE_NAME, 2187, Amissl)

#define X509V3_EXT_REQ_add_conf(___conf, ___ctx, ___section, ___req) \
      AROS_LC4(int, X509V3_EXT_REQ_add_conf, \
 AROS_LCA(LHASH_OF(CONF_VALUE) *, (___conf), A0), \
 AROS_LCA(X509V3_CTX *, (___ctx), A1), \
 AROS_LCA(const char *, (___section), A2), \
 AROS_LCA(X509_REQ *, (___req), A3), \
     struct Library *, AMISSL_BASE_NAME, 2188, Amissl)

#define X509V3_EXT_CRL_add_conf(___conf, ___ctx, ___section, ___crl) \
      AROS_LC4(int, X509V3_EXT_CRL_add_conf, \
 AROS_LCA(LHASH_OF(CONF_VALUE) *, (___conf), A0), \
 AROS_LCA(X509V3_CTX *, (___ctx), A1), \
 AROS_LCA(const char *, (___section), A2), \
 AROS_LCA(X509_CRL *, (___crl), A3), \
     struct Library *, AMISSL_BASE_NAME, 2189, Amissl)

#define X509V3_add_value_bool_nf(___name, ___asn1_bool, ___extlist) \
      AROS_LC3(int, X509V3_add_value_bool_nf, \
 AROS_LCA(const char *, (___name), A0), \
 AROS_LCA(int, (___asn1_bool), D0), \
 AROS_LCA(STACK_OF(CONF_VALUE) **, (___extlist), A1), \
     struct Library *, AMISSL_BASE_NAME, 2190, Amissl)

#define X509V3_get_value_bool(___value, ___asn1_bool) \
      AROS_LC2(int, X509V3_get_value_bool, \
 AROS_LCA(const CONF_VALUE *, (___value), A0), \
 AROS_LCA(int *, (___asn1_bool), A1), \
     struct Library *, AMISSL_BASE_NAME, 2191, Amissl)

#define X509V3_get_value_int(___value, ___aint) \
      AROS_LC2(int, X509V3_get_value_int, \
 AROS_LCA(const CONF_VALUE *, (___value), A0), \
 AROS_LCA(ASN1_INTEGER **, (___aint), A1), \
     struct Library *, AMISSL_BASE_NAME, 2192, Amissl)

#define X509V3_set_nconf(___ctx, ___conf) \
      AROS_LC2(void, X509V3_set_nconf, \
 AROS_LCA(X509V3_CTX *, (___ctx), A0), \
 AROS_LCA(CONF *, (___conf), A1), \
     struct Library *, AMISSL_BASE_NAME, 2193, Amissl)

#define X509V3_set_conf_lhash(___ctx, ___lhash) \
      AROS_LC2(void, X509V3_set_conf_lhash, \
 AROS_LCA(X509V3_CTX *, (___ctx), A0), \
 AROS_LCA(LHASH_OF(CONF_VALUE) *, (___lhash), A1), \
     struct Library *, AMISSL_BASE_NAME, 2194, Amissl)

#define X509V3_get_string(___ctx, ___name, ___section) \
      AROS_LC3(char *, X509V3_get_string, \
 AROS_LCA(X509V3_CTX *, (___ctx), A0), \
 AROS_LCA(const char *, (___name), A1), \
 AROS_LCA(const char *, (___section), A2), \
     struct Library *, AMISSL_BASE_NAME, 2195, Amissl)

#define X509V3_get_section(___ctx, ___section) \
      AROS_LC2(STACK_OF(CONF_VALUE) *, X509V3_get_section, \
 AROS_LCA(X509V3_CTX *, (___ctx), A0), \
 AROS_LCA(const char *, (___section), A1), \
     struct Library *, AMISSL_BASE_NAME, 2196, Amissl)

#define X509V3_string_free(___ctx, ___str) \
      AROS_LC2(void, X509V3_string_free, \
 AROS_LCA(X509V3_CTX *, (___ctx), A0), \
 AROS_LCA(char *, (___str), A1), \
     struct Library *, AMISSL_BASE_NAME, 2197, Amissl)

#define X509V3_section_free(___ctx, ___section) \
      AROS_LC2(void, X509V3_section_free, \
 AROS_LCA(X509V3_CTX *, (___ctx), A0), \
 AROS_LCA(STACK_OF(CONF_VALUE) *, (___section), A1), \
     struct Library *, AMISSL_BASE_NAME, 2198, Amissl)

#define X509V3_set_ctx(___ctx, ___issuer, ___subject, ___req, ___crl, ___flags) \
      AROS_LC6(void, X509V3_set_ctx, \
 AROS_LCA(X509V3_CTX *, (___ctx), A0), \
 AROS_LCA(X509 *, (___issuer), A1), \
 AROS_LCA(X509 *, (___subject), A2), \
 AROS_LCA(X509_REQ *, (___req), A3), \
 AROS_LCA(X509_CRL *, (___crl), D0), \
 AROS_LCA(int, (___flags), D1), \
     struct Library *, AMISSL_BASE_NAME, 2199, Amissl)

#define X509V3_add_value(___name, ___value, ___extlist) \
      AROS_LC3(int, X509V3_add_value, \
 AROS_LCA(const char *, (___name), A0), \
 AROS_LCA(const char *, (___value), A1), \
 AROS_LCA(STACK_OF(CONF_VALUE) **, (___extlist), A2), \
     struct Library *, AMISSL_BASE_NAME, 2200, Amissl)

#define X509V3_add_value_uchar(___name, ___value, ___extlist) \
      AROS_LC3(int, X509V3_add_value_uchar, \
 AROS_LCA(const char *, (___name), A0), \
 AROS_LCA(const unsigned char *, (___value), A1), \
 AROS_LCA(STACK_OF(CONF_VALUE) **, (___extlist), A2), \
     struct Library *, AMISSL_BASE_NAME, 2201, Amissl)

#define X509V3_add_value_bool(___name, ___asn1_bool, ___extlist) \
      AROS_LC3(int, X509V3_add_value_bool, \
 AROS_LCA(const char *, (___name), A0), \
 AROS_LCA(int, (___asn1_bool), D0), \
 AROS_LCA(STACK_OF(CONF_VALUE) **, (___extlist), A1), \
     struct Library *, AMISSL_BASE_NAME, 2202, Amissl)

#define X509V3_add_value_int(___name, ___aint, ___extlist) \
      AROS_LC3(int, X509V3_add_value_int, \
 AROS_LCA(const char *, (___name), A0), \
 AROS_LCA(const ASN1_INTEGER *, (___aint), A1), \
 AROS_LCA(STACK_OF(CONF_VALUE) **, (___extlist), A2), \
     struct Library *, AMISSL_BASE_NAME, 2203, Amissl)

#define i2s_ASN1_INTEGER(___meth, ___aint) \
      AROS_LC2(char *, i2s_ASN1_INTEGER, \
 AROS_LCA(X509V3_EXT_METHOD *, (___meth), A0), \
 AROS_LCA(const ASN1_INTEGER *, (___aint), A1), \
     struct Library *, AMISSL_BASE_NAME, 2204, Amissl)

#define s2i_ASN1_INTEGER(___meth, ___value) \
      AROS_LC2(ASN1_INTEGER *, s2i_ASN1_INTEGER, \
 AROS_LCA(X509V3_EXT_METHOD *, (___meth), A0), \
 AROS_LCA(const char *, (___value), A1), \
     struct Library *, AMISSL_BASE_NAME, 2205, Amissl)

#define i2s_ASN1_ENUMERATED(___meth, ___aint) \
      AROS_LC2(char *, i2s_ASN1_ENUMERATED, \
 AROS_LCA(X509V3_EXT_METHOD *, (___meth), A0), \
 AROS_LCA(const ASN1_ENUMERATED *, (___aint), A1), \
     struct Library *, AMISSL_BASE_NAME, 2206, Amissl)

#define i2s_ASN1_ENUMERATED_TABLE(___meth, ___aint) \
      AROS_LC2(char *, i2s_ASN1_ENUMERATED_TABLE, \
 AROS_LCA(X509V3_EXT_METHOD *, (___meth), A0), \
 AROS_LCA(const ASN1_ENUMERATED *, (___aint), A1), \
     struct Library *, AMISSL_BASE_NAME, 2207, Amissl)

#define X509V3_EXT_add(___ext) \
      AROS_LC1(int, X509V3_EXT_add, \
 AROS_LCA(X509V3_EXT_METHOD *, (___ext), A0), \
     struct Library *, AMISSL_BASE_NAME, 2208, Amissl)

#define X509V3_EXT_add_list(___extlist) \
      AROS_LC1(int, X509V3_EXT_add_list, \
 AROS_LCA(X509V3_EXT_METHOD *, (___extlist), A0), \
     struct Library *, AMISSL_BASE_NAME, 2209, Amissl)

#define X509V3_EXT_add_alias(___nid_to, ___nid_from) \
      AROS_LC2(int, X509V3_EXT_add_alias, \
 AROS_LCA(int, (___nid_to), D0), \
 AROS_LCA(int, (___nid_from), D1), \
     struct Library *, AMISSL_BASE_NAME, 2210, Amissl)

#define X509V3_EXT_cleanup() \
      AROS_LC0(void, X509V3_EXT_cleanup, \
     struct Library *, AMISSL_BASE_NAME, 2211, Amissl)

#define X509V3_EXT_get(___ext) \
      AROS_LC1(const X509V3_EXT_METHOD *, X509V3_EXT_get, \
 AROS_LCA(X509_EXTENSION *, (___ext), A0), \
     struct Library *, AMISSL_BASE_NAME, 2212, Amissl)

#define X509V3_EXT_get_nid(___nid) \
      AROS_LC1(const X509V3_EXT_METHOD *, X509V3_EXT_get_nid, \
 AROS_LCA(int, (___nid), D0), \
     struct Library *, AMISSL_BASE_NAME, 2213, Amissl)

#define X509V3_add_standard_extensions() \
      AROS_LC0(int, X509V3_add_standard_extensions, \
     struct Library *, AMISSL_BASE_NAME, 2214, Amissl)

#define X509V3_parse_list(___line) \
      AROS_LC1(STACK_OF(CONF_VALUE) *, X509V3_parse_list, \
 AROS_LCA(const char *, (___line), A0), \
     struct Library *, AMISSL_BASE_NAME, 2215, Amissl)

#define X509V3_EXT_d2i(___ext) \
      AROS_LC1(void *, X509V3_EXT_d2i, \
 AROS_LCA(X509_EXTENSION *, (___ext), A0), \
     struct Library *, AMISSL_BASE_NAME, 2216, Amissl)

#define X509V3_get_d2i(___x, ___nid, ___crit, ___idx) \
      AROS_LC4(void *, X509V3_get_d2i, \
 AROS_LCA(const STACK_OF(X509_EXTENSION) *, (___x), A0), \
 AROS_LCA(int, (___nid), D0), \
 AROS_LCA(int *, (___crit), A1), \
 AROS_LCA(int *, (___idx), A2), \
     struct Library *, AMISSL_BASE_NAME, 2217, Amissl)

#define X509V3_EXT_i2d(___ext_nid, ___crit, ___ext_struc) \
      AROS_LC3(X509_EXTENSION *, X509V3_EXT_i2d, \
 AROS_LCA(int, (___ext_nid), D0), \
 AROS_LCA(int, (___crit), D1), \
 AROS_LCA(void *, (___ext_struc), A0), \
     struct Library *, AMISSL_BASE_NAME, 2218, Amissl)

#define X509V3_add1_i2d(___x, ___nid, ___value, ___crit, ___flags) \
      AROS_LC5(int, X509V3_add1_i2d, \
 AROS_LCA(STACK_OF(X509_EXTENSION) **, (___x), A0), \
 AROS_LCA(int, (___nid), D0), \
 AROS_LCA(void *, (___value), A1), \
 AROS_LCA(int, (___crit), D1), \
 AROS_LCA(unsigned long, (___flags), D2), \
     struct Library *, AMISSL_BASE_NAME, 2219, Amissl)

#define OPENSSL_buf2hexstr(___buffer, ___len) \
      AROS_LC2(char *, OPENSSL_buf2hexstr, \
 AROS_LCA(const unsigned char *, (___buffer), A0), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 2220, Amissl)

#define OPENSSL_hexstr2buf(___str, ___len) \
      AROS_LC2(unsigned char *, OPENSSL_hexstr2buf, \
 AROS_LCA(const char *, (___str), A0), \
 AROS_LCA(long *, (___len), A1), \
     struct Library *, AMISSL_BASE_NAME, 2221, Amissl)

#define X509V3_EXT_val_prn(___out, ___val, ___indent, ___ml) \
      AROS_LC4(void, X509V3_EXT_val_prn, \
 AROS_LCA(BIO *, (___out), A0), \
 AROS_LCA(STACK_OF(CONF_VALUE) *, (___val), A1), \
 AROS_LCA(int, (___indent), D0), \
 AROS_LCA(int, (___ml), D1), \
     struct Library *, AMISSL_BASE_NAME, 2222, Amissl)

#define X509V3_EXT_print(___out, ___ext, ___flag, ___indent) \
      AROS_LC4(int, X509V3_EXT_print, \
 AROS_LCA(BIO *, (___out), A0), \
 AROS_LCA(X509_EXTENSION *, (___ext), A1), \
 AROS_LCA(unsigned long, (___flag), D0), \
 AROS_LCA(int, (___indent), D1), \
     struct Library *, AMISSL_BASE_NAME, 2223, Amissl)

#define X509V3_extensions_print(___out, ___title, ___exts, ___flag, ___indent) \
      AROS_LC5(int, X509V3_extensions_print, \
 AROS_LCA(BIO *, (___out), A0), \
 AROS_LCA(const char *, (___title), A1), \
 AROS_LCA(const STACK_OF(X509_EXTENSION) *, (___exts), A2), \
 AROS_LCA(unsigned long, (___flag), D0), \
 AROS_LCA(int, (___indent), D1), \
     struct Library *, AMISSL_BASE_NAME, 2224, Amissl)

#define X509_check_purpose(___x, ___id, ___ca) \
      AROS_LC3(int, X509_check_purpose, \
 AROS_LCA(X509 *, (___x), A0), \
 AROS_LCA(int, (___id), D0), \
 AROS_LCA(int, (___ca), D1), \
     struct Library *, AMISSL_BASE_NAME, 2225, Amissl)

#define X509_supported_extension(___ex) \
      AROS_LC1(int, X509_supported_extension, \
 AROS_LCA(X509_EXTENSION *, (___ex), A0), \
     struct Library *, AMISSL_BASE_NAME, 2226, Amissl)

#define X509_PURPOSE_set(___p, ___purpose) \
      AROS_LC2(int, X509_PURPOSE_set, \
 AROS_LCA(int *, (___p), A0), \
 AROS_LCA(int, (___purpose), D0), \
     struct Library *, AMISSL_BASE_NAME, 2227, Amissl)

#define X509_check_issued(___issuer, ___subject) \
      AROS_LC2(int, X509_check_issued, \
 AROS_LCA(X509 *, (___issuer), A0), \
 AROS_LCA(X509 *, (___subject), A1), \
     struct Library *, AMISSL_BASE_NAME, 2228, Amissl)

#define X509_PURPOSE_get_count() \
      AROS_LC0(int, X509_PURPOSE_get_count, \
     struct Library *, AMISSL_BASE_NAME, 2229, Amissl)

#define X509_PURPOSE_get0(___idx) \
      AROS_LC1(X509_PURPOSE *, X509_PURPOSE_get0, \
 AROS_LCA(int, (___idx), D0), \
     struct Library *, AMISSL_BASE_NAME, 2230, Amissl)

#define X509_PURPOSE_get_by_sname(___sname) \
      AROS_LC1(int, X509_PURPOSE_get_by_sname, \
 AROS_LCA(const char *, (___sname), A0), \
     struct Library *, AMISSL_BASE_NAME, 2231, Amissl)

#define X509_PURPOSE_get_by_id(___id) \
      AROS_LC1(int, X509_PURPOSE_get_by_id, \
 AROS_LCA(int, (___id), D0), \
     struct Library *, AMISSL_BASE_NAME, 2232, Amissl)

#define X509_PURPOSE_add(___id, ___trust, ___flags, ___ck, ___name, ___sname, ___arg) \
      AROS_LC7(int, X509_PURPOSE_add, \
 AROS_LCA(int, (___id), D0), \
 AROS_LCA(int, (___trust), D1), \
 AROS_LCA(int, (___flags), D2), \
 AROS_LCA(int (*)(const X509_PURPOSE *,const X509 *,int), (___ck), A0), \
 AROS_LCA(const char *, (___name), A1), \
 AROS_LCA(const char *, (___sname), A2), \
 AROS_LCA(void *, (___arg), A3), \
     struct Library *, AMISSL_BASE_NAME, 2233, Amissl)

#define X509_PURPOSE_get0_name(___xp) \
      AROS_LC1(char *, X509_PURPOSE_get0_name, \
 AROS_LCA(const X509_PURPOSE *, (___xp), A0), \
     struct Library *, AMISSL_BASE_NAME, 2234, Amissl)

#define X509_PURPOSE_get0_sname(___xp) \
      AROS_LC1(char *, X509_PURPOSE_get0_sname, \
 AROS_LCA(const X509_PURPOSE *, (___xp), A0), \
     struct Library *, AMISSL_BASE_NAME, 2235, Amissl)

#define X509_PURPOSE_get_trust(___xp) \
      AROS_LC1(int, X509_PURPOSE_get_trust, \
 AROS_LCA(const X509_PURPOSE *, (___xp), A0), \
     struct Library *, AMISSL_BASE_NAME, 2236, Amissl)

#define X509_PURPOSE_cleanup() \
      AROS_LC0(void, X509_PURPOSE_cleanup, \
     struct Library *, AMISSL_BASE_NAME, 2237, Amissl)

#define X509_PURPOSE_get_id(___a) \
      AROS_LC1(int, X509_PURPOSE_get_id, \
 AROS_LCA(const X509_PURPOSE *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 2238, Amissl)

#define X509_get1_email(___x) \
      AROS_LC1(STACK_OF(OPENSSL_STRING) *, X509_get1_email, \
 AROS_LCA(X509 *, (___x), A0), \
     struct Library *, AMISSL_BASE_NAME, 2239, Amissl)

#define X509_REQ_get1_email(___x) \
      AROS_LC1(STACK_OF(OPENSSL_STRING) *, X509_REQ_get1_email, \
 AROS_LCA(X509_REQ *, (___x), A0), \
     struct Library *, AMISSL_BASE_NAME, 2240, Amissl)

#define X509_email_free(___sk) \
      AROS_LC1(void, X509_email_free, \
 AROS_LCA(STACK_OF(OPENSSL_STRING) *, (___sk), A0), \
     struct Library *, AMISSL_BASE_NAME, 2241, Amissl)

#define ERR_load_X509V3_strings() \
      AROS_LC0(int, ERR_load_X509V3_strings, \
     struct Library *, AMISSL_BASE_NAME, 2242, Amissl)

#define AES_options() \
      AROS_LC0(const char *, AES_options, \
     struct Library *, AMISSL_BASE_NAME, 2243, Amissl)

#define AES_set_encrypt_key(___userKey, ___bits, ___key) \
      AROS_LC3(int, AES_set_encrypt_key, \
 AROS_LCA(const unsigned char *, (___userKey), A0), \
 AROS_LCA(const int, (___bits), D0), \
 AROS_LCA(AES_KEY *, (___key), A1), \
     struct Library *, AMISSL_BASE_NAME, 2244, Amissl)

#define AES_set_decrypt_key(___userKey, ___bits, ___key) \
      AROS_LC3(int, AES_set_decrypt_key, \
 AROS_LCA(const unsigned char *, (___userKey), A0), \
 AROS_LCA(const int, (___bits), D0), \
 AROS_LCA(AES_KEY *, (___key), A1), \
     struct Library *, AMISSL_BASE_NAME, 2245, Amissl)

#define AES_encrypt(___in, ___out, ___key) \
      AROS_LC3(void, AES_encrypt, \
 AROS_LCA(const unsigned char *, (___in), A0), \
 AROS_LCA(unsigned char *, (___out), A1), \
 AROS_LCA(const AES_KEY *, (___key), A2), \
     struct Library *, AMISSL_BASE_NAME, 2246, Amissl)

#define AES_decrypt(___in, ___out, ___key) \
      AROS_LC3(void, AES_decrypt, \
 AROS_LCA(const unsigned char *, (___in), A0), \
 AROS_LCA(unsigned char *, (___out), A1), \
 AROS_LCA(const AES_KEY *, (___key), A2), \
     struct Library *, AMISSL_BASE_NAME, 2247, Amissl)

#define AES_ecb_encrypt(___in, ___out, ___key, ___enc) \
      AROS_LC4(void, AES_ecb_encrypt, \
 AROS_LCA(const unsigned char *, (___in), A0), \
 AROS_LCA(unsigned char *, (___out), A1), \
 AROS_LCA(const AES_KEY *, (___key), A2), \
 AROS_LCA(const int, (___enc), D0), \
     struct Library *, AMISSL_BASE_NAME, 2248, Amissl)

#define AES_cbc_encrypt(___in, ___out, ___length, ___key, ___ivec, ___enc) \
      AROS_LC6(void, AES_cbc_encrypt, \
 AROS_LCA(const unsigned char *, (___in), A0), \
 AROS_LCA(unsigned char *, (___out), A1), \
 AROS_LCA(size_t, (___length), D0), \
 AROS_LCA(const AES_KEY *, (___key), A2), \
 AROS_LCA(unsigned char *, (___ivec), A3), \
 AROS_LCA(const int, (___enc), D1), \
     struct Library *, AMISSL_BASE_NAME, 2249, Amissl)

#define AES_cfb128_encrypt(___in, ___out, ___length, ___key, ___ivec, ___num, ___enc) \
      AROS_LC7(void, AES_cfb128_encrypt, \
 AROS_LCA(const unsigned char *, (___in), A0), \
 AROS_LCA(unsigned char *, (___out), A1), \
 AROS_LCA(size_t, (___length), D0), \
 AROS_LCA(const AES_KEY *, (___key), A2), \
 AROS_LCA(unsigned char *, (___ivec), A3), \
 AROS_LCA(int *, (___num), D1), \
 AROS_LCA(const int, (___enc), D2), \
     struct Library *, AMISSL_BASE_NAME, 2250, Amissl)

#define AES_cfb1_encrypt(___in, ___out, ___length, ___key, ___ivec, ___num, ___enc) \
      AROS_LC7(void, AES_cfb1_encrypt, \
 AROS_LCA(const unsigned char *, (___in), A0), \
 AROS_LCA(unsigned char *, (___out), A1), \
 AROS_LCA(size_t, (___length), D0), \
 AROS_LCA(const AES_KEY *, (___key), A2), \
 AROS_LCA(unsigned char *, (___ivec), A3), \
 AROS_LCA(int *, (___num), D1), \
 AROS_LCA(const int, (___enc), D2), \
     struct Library *, AMISSL_BASE_NAME, 2251, Amissl)

#define AES_cfb8_encrypt(___in, ___out, ___length, ___key, ___ivec, ___num, ___enc) \
      AROS_LC7(void, AES_cfb8_encrypt, \
 AROS_LCA(const unsigned char *, (___in), A0), \
 AROS_LCA(unsigned char *, (___out), A1), \
 AROS_LCA(size_t, (___length), D0), \
 AROS_LCA(const AES_KEY *, (___key), A2), \
 AROS_LCA(unsigned char *, (___ivec), A3), \
 AROS_LCA(int *, (___num), D1), \
 AROS_LCA(const int, (___enc), D2), \
     struct Library *, AMISSL_BASE_NAME, 2252, Amissl)

#define AES_ofb128_encrypt(___in, ___out, ___length, ___key, ___ivec, ___num) \
      AROS_LC6(void, AES_ofb128_encrypt, \
 AROS_LCA(const unsigned char *, (___in), A0), \
 AROS_LCA(unsigned char *, (___out), A1), \
 AROS_LCA(size_t, (___length), D0), \
 AROS_LCA(const AES_KEY *, (___key), A2), \
 AROS_LCA(unsigned char *, (___ivec), A3), \
 AROS_LCA(int *, (___num), D1), \
     struct Library *, AMISSL_BASE_NAME, 2254, Amissl)

#define BF_set_key(___key, ___len, ___data) \
      AROS_LC3(void, BF_set_key, \
 AROS_LCA(BF_KEY *, (___key), A0), \
 AROS_LCA(int, (___len), D0), \
 AROS_LCA(const unsigned char *, (___data), A1), \
     struct Library *, AMISSL_BASE_NAME, 2256, Amissl)

#define BF_encrypt(___data, ___key) \
      AROS_LC2(void, BF_encrypt, \
 AROS_LCA(BF_LONG *, (___data), A0), \
 AROS_LCA(const BF_KEY *, (___key), A1), \
     struct Library *, AMISSL_BASE_NAME, 2257, Amissl)

#define BF_decrypt(___data, ___key) \
      AROS_LC2(void, BF_decrypt, \
 AROS_LCA(BF_LONG *, (___data), A0), \
 AROS_LCA(const BF_KEY *, (___key), A1), \
     struct Library *, AMISSL_BASE_NAME, 2258, Amissl)

#define BF_ecb_encrypt(___in, ___out, ___key, ___enc) \
      AROS_LC4(void, BF_ecb_encrypt, \
 AROS_LCA(const unsigned char *, (___in), A0), \
 AROS_LCA(unsigned char *, (___out), A1), \
 AROS_LCA(const BF_KEY *, (___key), A2), \
 AROS_LCA(int, (___enc), D0), \
     struct Library *, AMISSL_BASE_NAME, 2259, Amissl)

#define BF_cbc_encrypt(___in, ___out, ___length, ___schedule, ___ivec, ___enc) \
      AROS_LC6(void, BF_cbc_encrypt, \
 AROS_LCA(const unsigned char *, (___in), A0), \
 AROS_LCA(unsigned char *, (___out), A1), \
 AROS_LCA(long, (___length), D0), \
 AROS_LCA(const BF_KEY *, (___schedule), A2), \
 AROS_LCA(unsigned char *, (___ivec), A3), \
 AROS_LCA(int, (___enc), D1), \
     struct Library *, AMISSL_BASE_NAME, 2260, Amissl)

#define BF_cfb64_encrypt(___in, ___out, ___length, ___schedule, ___ivec, ___num, ___enc) \
      AROS_LC7(void, BF_cfb64_encrypt, \
 AROS_LCA(const unsigned char *, (___in), A0), \
 AROS_LCA(unsigned char *, (___out), A1), \
 AROS_LCA(long, (___length), D0), \
 AROS_LCA(const BF_KEY *, (___schedule), A2), \
 AROS_LCA(unsigned char *, (___ivec), A3), \
 AROS_LCA(int *, (___num), D1), \
 AROS_LCA(int, (___enc), D2), \
     struct Library *, AMISSL_BASE_NAME, 2261, Amissl)

#define BF_ofb64_encrypt(___in, ___out, ___length, ___schedule, ___ivec, ___num) \
      AROS_LC6(void, BF_ofb64_encrypt, \
 AROS_LCA(const unsigned char *, (___in), A0), \
 AROS_LCA(unsigned char *, (___out), A1), \
 AROS_LCA(long, (___length), D0), \
 AROS_LCA(const BF_KEY *, (___schedule), A2), \
 AROS_LCA(unsigned char *, (___ivec), A3), \
 AROS_LCA(int *, (___num), D1), \
     struct Library *, AMISSL_BASE_NAME, 2262, Amissl)

#define BF_options() \
      AROS_LC0(const char *, BF_options, \
     struct Library *, AMISSL_BASE_NAME, 2263, Amissl)

#define CAST_set_key(___key, ___len, ___data) \
      AROS_LC3(void, CAST_set_key, \
 AROS_LCA(CAST_KEY *, (___key), A0), \
 AROS_LCA(int, (___len), D0), \
 AROS_LCA(const unsigned char *, (___data), A1), \
     struct Library *, AMISSL_BASE_NAME, 2264, Amissl)

#define CAST_ecb_encrypt(___in, ___out, ___key, ___enc) \
      AROS_LC4(void, CAST_ecb_encrypt, \
 AROS_LCA(const unsigned char *, (___in), A0), \
 AROS_LCA(unsigned char *, (___out), A1), \
 AROS_LCA(const CAST_KEY *, (___key), A2), \
 AROS_LCA(int, (___enc), D0), \
     struct Library *, AMISSL_BASE_NAME, 2265, Amissl)

#define CAST_encrypt(___data, ___key) \
      AROS_LC2(void, CAST_encrypt, \
 AROS_LCA(CAST_LONG *, (___data), A0), \
 AROS_LCA(const CAST_KEY *, (___key), A1), \
     struct Library *, AMISSL_BASE_NAME, 2266, Amissl)

#define CAST_decrypt(___data, ___key) \
      AROS_LC2(void, CAST_decrypt, \
 AROS_LCA(CAST_LONG *, (___data), A0), \
 AROS_LCA(const CAST_KEY *, (___key), A1), \
     struct Library *, AMISSL_BASE_NAME, 2267, Amissl)

#define CAST_cbc_encrypt(___in, ___out, ___length, ___ks, ___iv, ___enc) \
      AROS_LC6(void, CAST_cbc_encrypt, \
 AROS_LCA(const unsigned char *, (___in), A0), \
 AROS_LCA(unsigned char *, (___out), A1), \
 AROS_LCA(long, (___length), D0), \
 AROS_LCA(const CAST_KEY *, (___ks), A2), \
 AROS_LCA(unsigned char *, (___iv), A3), \
 AROS_LCA(int, (___enc), D1), \
     struct Library *, AMISSL_BASE_NAME, 2268, Amissl)

#define CAST_cfb64_encrypt(___in, ___out, ___length, ___schedule, ___ivec, ___num, ___enc) \
      AROS_LC7(void, CAST_cfb64_encrypt, \
 AROS_LCA(const unsigned char *, (___in), A0), \
 AROS_LCA(unsigned char *, (___out), A1), \
 AROS_LCA(long, (___length), D0), \
 AROS_LCA(const CAST_KEY *, (___schedule), A2), \
 AROS_LCA(unsigned char *, (___ivec), A3), \
 AROS_LCA(int *, (___num), D1), \
 AROS_LCA(int, (___enc), D2), \
     struct Library *, AMISSL_BASE_NAME, 2269, Amissl)

#define CAST_ofb64_encrypt(___in, ___out, ___length, ___schedule, ___ivec, ___num) \
      AROS_LC6(void, CAST_ofb64_encrypt, \
 AROS_LCA(const unsigned char *, (___in), A0), \
 AROS_LCA(unsigned char *, (___out), A1), \
 AROS_LCA(long, (___length), D0), \
 AROS_LCA(const CAST_KEY *, (___schedule), A2), \
 AROS_LCA(unsigned char *, (___ivec), A3), \
 AROS_LCA(int *, (___num), D1), \
     struct Library *, AMISSL_BASE_NAME, 2270, Amissl)

#define DES_options() \
      AROS_LC0(const char *, DES_options, \
     struct Library *, AMISSL_BASE_NAME, 2272, Amissl)

#define DES_ecb3_encrypt(___input, ___output, ___ks1, ___ks2, ___ks3, ___enc) \
      AROS_LC6(void, DES_ecb3_encrypt, \
 AROS_LCA(const_DES_cblock *, (___input), A0), \
 AROS_LCA(DES_cblock *, (___output), A1), \
 AROS_LCA(DES_key_schedule *, (___ks1), A2), \
 AROS_LCA(DES_key_schedule *, (___ks2), A3), \
 AROS_LCA(DES_key_schedule *, (___ks3), D0), \
 AROS_LCA(int, (___enc), D1), \
     struct Library *, AMISSL_BASE_NAME, 2273, Amissl)

#define DES_cbc_cksum(___input, ___output, ___length, ___schedule, ___ivec) \
      AROS_LC5(DES_LONG, DES_cbc_cksum, \
 AROS_LCA(const unsigned char *, (___input), A0), \
 AROS_LCA(DES_cblock *, (___output), A1), \
 AROS_LCA(long, (___length), D0), \
 AROS_LCA(DES_key_schedule *, (___schedule), A2), \
 AROS_LCA(const_DES_cblock *, (___ivec), A3), \
     struct Library *, AMISSL_BASE_NAME, 2274, Amissl)

#define DES_cbc_encrypt(___input, ___output, ___length, ___schedule, ___ivec, ___enc) \
      AROS_LC6(void, DES_cbc_encrypt, \
 AROS_LCA(const unsigned char *, (___input), A0), \
 AROS_LCA(unsigned char *, (___output), A1), \
 AROS_LCA(long, (___length), D0), \
 AROS_LCA(DES_key_schedule *, (___schedule), A2), \
 AROS_LCA(DES_cblock *, (___ivec), A3), \
 AROS_LCA(int, (___enc), D1), \
     struct Library *, AMISSL_BASE_NAME, 2275, Amissl)

#define DES_ncbc_encrypt(___input, ___output, ___length, ___schedule, ___ivec, ___enc) \
      AROS_LC6(void, DES_ncbc_encrypt, \
 AROS_LCA(const unsigned char *, (___input), A0), \
 AROS_LCA(unsigned char *, (___output), A1), \
 AROS_LCA(long, (___length), D0), \
 AROS_LCA(DES_key_schedule *, (___schedule), A2), \
 AROS_LCA(DES_cblock *, (___ivec), A3), \
 AROS_LCA(int, (___enc), D1), \
     struct Library *, AMISSL_BASE_NAME, 2276, Amissl)

#define DES_xcbc_encrypt(___input, ___output, ___length, ___schedule, ___ivec, ___inw, ___outw, ___enc) \
      AROS_LC8(void, DES_xcbc_encrypt, \
 AROS_LCA(const unsigned char *, (___input), A0), \
 AROS_LCA(unsigned char *, (___output), A1), \
 AROS_LCA(long, (___length), D0), \
 AROS_LCA(DES_key_schedule *, (___schedule), A2), \
 AROS_LCA(DES_cblock *, (___ivec), A3), \
 AROS_LCA(const_DES_cblock *, (___inw), D1), \
 AROS_LCA(const_DES_cblock *, (___outw), D2), \
 AROS_LCA(int, (___enc), D3), \
     struct Library *, AMISSL_BASE_NAME, 2277, Amissl)

#define DES_cfb_encrypt(___in, ___out, ___numbits, ___length, ___schedule, ___ivec, ___enc) \
      AROS_LC7(void, DES_cfb_encrypt, \
 AROS_LCA(const unsigned char *, (___in), A0), \
 AROS_LCA(unsigned char *, (___out), A1), \
 AROS_LCA(int, (___numbits), D0), \
 AROS_LCA(long, (___length), D1), \
 AROS_LCA(DES_key_schedule *, (___schedule), A2), \
 AROS_LCA(DES_cblock *, (___ivec), A3), \
 AROS_LCA(int, (___enc), D2), \
     struct Library *, AMISSL_BASE_NAME, 2278, Amissl)

#define DES_ecb_encrypt(___input, ___output, ___ks, ___enc) \
      AROS_LC4(void, DES_ecb_encrypt, \
 AROS_LCA(const_DES_cblock *, (___input), A0), \
 AROS_LCA(DES_cblock *, (___output), A1), \
 AROS_LCA(DES_key_schedule *, (___ks), A2), \
 AROS_LCA(int, (___enc), D0), \
     struct Library *, AMISSL_BASE_NAME, 2279, Amissl)

#define DES_encrypt1(___data, ___ks, ___enc) \
      AROS_LC3(void, DES_encrypt1, \
 AROS_LCA(DES_LONG *, (___data), A0), \
 AROS_LCA(DES_key_schedule *, (___ks), A1), \
 AROS_LCA(int, (___enc), D0), \
     struct Library *, AMISSL_BASE_NAME, 2280, Amissl)

#define DES_encrypt2(___data, ___ks, ___enc) \
      AROS_LC3(void, DES_encrypt2, \
 AROS_LCA(DES_LONG *, (___data), A0), \
 AROS_LCA(DES_key_schedule *, (___ks), A1), \
 AROS_LCA(int, (___enc), D0), \
     struct Library *, AMISSL_BASE_NAME, 2281, Amissl)

#define DES_encrypt3(___data, ___ks1, ___ks2, ___ks3) \
      AROS_LC4(void, DES_encrypt3, \
 AROS_LCA(DES_LONG *, (___data), A0), \
 AROS_LCA(DES_key_schedule *, (___ks1), A1), \
 AROS_LCA(DES_key_schedule *, (___ks2), A2), \
 AROS_LCA(DES_key_schedule *, (___ks3), A3), \
     struct Library *, AMISSL_BASE_NAME, 2282, Amissl)

#define DES_decrypt3(___data, ___ks1, ___ks2, ___ks3) \
      AROS_LC4(void, DES_decrypt3, \
 AROS_LCA(DES_LONG *, (___data), A0), \
 AROS_LCA(DES_key_schedule *, (___ks1), A1), \
 AROS_LCA(DES_key_schedule *, (___ks2), A2), \
 AROS_LCA(DES_key_schedule *, (___ks3), A3), \
     struct Library *, AMISSL_BASE_NAME, 2283, Amissl)

#define DES_ede3_cbc_encrypt(___input, ___output, ___length, ___ks1, ___ks2, ___ks3, ___ivec, ___enc) \
      AROS_LC8(void, DES_ede3_cbc_encrypt, \
 AROS_LCA(const unsigned char *, (___input), A0), \
 AROS_LCA(unsigned char *, (___output), A1), \
 AROS_LCA(long, (___length), D0), \
 AROS_LCA(DES_key_schedule *, (___ks1), A2), \
 AROS_LCA(DES_key_schedule *, (___ks2), A3), \
 AROS_LCA(DES_key_schedule *, (___ks3), D1), \
 AROS_LCA(DES_cblock *, (___ivec), D2), \
 AROS_LCA(int, (___enc), D3), \
     struct Library *, AMISSL_BASE_NAME, 2284, Amissl)

#define DES_ede3_cfb64_encrypt(___in, ___out, ___length, ___ks1, ___ks2, ___ks3, ___ivec, ___num, ___enc) \
      AROS_LC9(void, DES_ede3_cfb64_encrypt, \
 AROS_LCA(const unsigned char *, (___in), A0), \
 AROS_LCA(unsigned char *, (___out), A1), \
 AROS_LCA(long, (___length), D0), \
 AROS_LCA(DES_key_schedule *, (___ks1), A2), \
 AROS_LCA(DES_key_schedule *, (___ks2), A3), \
 AROS_LCA(DES_key_schedule *, (___ks3), D1), \
 AROS_LCA(DES_cblock *, (___ivec), D2), \
 AROS_LCA(int *, (___num), D3), \
 AROS_LCA(int, (___enc), D4), \
     struct Library *, AMISSL_BASE_NAME, 2286, Amissl)

#define DES_ede3_cfb_encrypt(___in, ___out, ___numbits, ___length, ___ks1, ___ks2, ___ks3, ___ivec, ___enc) \
      AROS_LC9(void, DES_ede3_cfb_encrypt, \
 AROS_LCA(const unsigned char *, (___in), A0), \
 AROS_LCA(unsigned char *, (___out), A1), \
 AROS_LCA(int, (___numbits), D0), \
 AROS_LCA(long, (___length), D1), \
 AROS_LCA(DES_key_schedule *, (___ks1), A2), \
 AROS_LCA(DES_key_schedule *, (___ks2), A3), \
 AROS_LCA(DES_key_schedule *, (___ks3), D2), \
 AROS_LCA(DES_cblock *, (___ivec), D3), \
 AROS_LCA(int, (___enc), D4), \
     struct Library *, AMISSL_BASE_NAME, 2287, Amissl)

#define DES_ede3_ofb64_encrypt(___in, ___out, ___length, ___ks1, ___ks2, ___ks3, ___ivec, ___num) \
      AROS_LC8(void, DES_ede3_ofb64_encrypt, \
 AROS_LCA(const unsigned char *, (___in), A0), \
 AROS_LCA(unsigned char *, (___out), A1), \
 AROS_LCA(long, (___length), D0), \
 AROS_LCA(DES_key_schedule *, (___ks1), A2), \
 AROS_LCA(DES_key_schedule *, (___ks2), A3), \
 AROS_LCA(DES_key_schedule *, (___ks3), D1), \
 AROS_LCA(DES_cblock *, (___ivec), D2), \
 AROS_LCA(int *, (___num), D3), \
     struct Library *, AMISSL_BASE_NAME, 2288, Amissl)

#define DES_fcrypt(___buf, ___salt, ___ret) \
      AROS_LC3(char *, DES_fcrypt, \
 AROS_LCA(const char *, (___buf), A0), \
 AROS_LCA(const char *, (___salt), A1), \
 AROS_LCA(char *, (___ret), A2), \
     struct Library *, AMISSL_BASE_NAME, 2290, Amissl)

#define DES_crypt(___buf, ___salt) \
      AROS_LC2(char *, DES_crypt, \
 AROS_LCA(const char *, (___buf), A0), \
 AROS_LCA(const char *, (___salt), A1), \
     struct Library *, AMISSL_BASE_NAME, 2291, Amissl)

#define DES_ofb_encrypt(___in, ___out, ___numbits, ___length, ___schedule, ___ivec) \
      AROS_LC6(void, DES_ofb_encrypt, \
 AROS_LCA(const unsigned char *, (___in), A0), \
 AROS_LCA(unsigned char *, (___out), A1), \
 AROS_LCA(int, (___numbits), D0), \
 AROS_LCA(long, (___length), D1), \
 AROS_LCA(DES_key_schedule *, (___schedule), A2), \
 AROS_LCA(DES_cblock *, (___ivec), A3), \
     struct Library *, AMISSL_BASE_NAME, 2292, Amissl)

#define DES_pcbc_encrypt(___input, ___output, ___length, ___schedule, ___ivec, ___enc) \
      AROS_LC6(void, DES_pcbc_encrypt, \
 AROS_LCA(const unsigned char *, (___input), A0), \
 AROS_LCA(unsigned char *, (___output), A1), \
 AROS_LCA(long, (___length), D0), \
 AROS_LCA(DES_key_schedule *, (___schedule), A2), \
 AROS_LCA(DES_cblock *, (___ivec), A3), \
 AROS_LCA(int, (___enc), D1), \
     struct Library *, AMISSL_BASE_NAME, 2293, Amissl)

#define DES_quad_cksum(___input, ___output, ___length, ___out_count, ___seed) \
      AROS_LC5(DES_LONG, DES_quad_cksum, \
 AROS_LCA(const unsigned char *, (___input), A0), \
 AROS_LCA(DES_cblock *, (___output), A1), \
 AROS_LCA(long, (___length), D0), \
 AROS_LCA(int, (___out_count), D1), \
 AROS_LCA(DES_cblock *, (___seed), A2), \
     struct Library *, AMISSL_BASE_NAME, 2294, Amissl)

#define DES_random_key(___ret) \
      AROS_LC1(int, DES_random_key, \
 AROS_LCA(DES_cblock *, (___ret), A0), \
     struct Library *, AMISSL_BASE_NAME, 2295, Amissl)

#define DES_set_odd_parity(___key) \
      AROS_LC1(void, DES_set_odd_parity, \
 AROS_LCA(DES_cblock *, (___key), A0), \
     struct Library *, AMISSL_BASE_NAME, 2296, Amissl)

#define DES_check_key_parity(___key) \
      AROS_LC1(int, DES_check_key_parity, \
 AROS_LCA(const_DES_cblock *, (___key), A0), \
     struct Library *, AMISSL_BASE_NAME, 2297, Amissl)

#define DES_is_weak_key(___key) \
      AROS_LC1(int, DES_is_weak_key, \
 AROS_LCA(const_DES_cblock *, (___key), A0), \
     struct Library *, AMISSL_BASE_NAME, 2298, Amissl)

#define DES_set_key(___key, ___schedule) \
      AROS_LC2(int, DES_set_key, \
 AROS_LCA(const_DES_cblock *, (___key), A0), \
 AROS_LCA(DES_key_schedule *, (___schedule), A1), \
     struct Library *, AMISSL_BASE_NAME, 2299, Amissl)

#define DES_key_sched(___key, ___schedule) \
      AROS_LC2(int, DES_key_sched, \
 AROS_LCA(const_DES_cblock *, (___key), A0), \
 AROS_LCA(DES_key_schedule *, (___schedule), A1), \
     struct Library *, AMISSL_BASE_NAME, 2300, Amissl)

#define DES_set_key_checked(___key, ___schedule) \
      AROS_LC2(int, DES_set_key_checked, \
 AROS_LCA(const_DES_cblock *, (___key), A0), \
 AROS_LCA(DES_key_schedule *, (___schedule), A1), \
     struct Library *, AMISSL_BASE_NAME, 2301, Amissl)

#define DES_set_key_unchecked(___key, ___schedule) \
      AROS_LC2(void, DES_set_key_unchecked, \
 AROS_LCA(const_DES_cblock *, (___key), A0), \
 AROS_LCA(DES_key_schedule *, (___schedule), A1), \
     struct Library *, AMISSL_BASE_NAME, 2302, Amissl)

#define DES_string_to_key(___str, ___key) \
      AROS_LC2(void, DES_string_to_key, \
 AROS_LCA(const char *, (___str), A0), \
 AROS_LCA(DES_cblock *, (___key), A1), \
     struct Library *, AMISSL_BASE_NAME, 2303, Amissl)

#define DES_string_to_2keys(___str, ___key1, ___key2) \
      AROS_LC3(void, DES_string_to_2keys, \
 AROS_LCA(const char *, (___str), A0), \
 AROS_LCA(DES_cblock *, (___key1), A1), \
 AROS_LCA(DES_cblock *, (___key2), A2), \
     struct Library *, AMISSL_BASE_NAME, 2304, Amissl)

#define DES_cfb64_encrypt(___in, ___out, ___length, ___schedule, ___ivec, ___num, ___enc) \
      AROS_LC7(void, DES_cfb64_encrypt, \
 AROS_LCA(const unsigned char *, (___in), A0), \
 AROS_LCA(unsigned char *, (___out), A1), \
 AROS_LCA(long, (___length), D0), \
 AROS_LCA(DES_key_schedule *, (___schedule), A2), \
 AROS_LCA(DES_cblock *, (___ivec), A3), \
 AROS_LCA(int *, (___num), D1), \
 AROS_LCA(int, (___enc), D2), \
     struct Library *, AMISSL_BASE_NAME, 2305, Amissl)

#define DES_ofb64_encrypt(___in, ___out, ___length, ___schedule, ___ivec, ___num) \
      AROS_LC6(void, DES_ofb64_encrypt, \
 AROS_LCA(const unsigned char *, (___in), A0), \
 AROS_LCA(unsigned char *, (___out), A1), \
 AROS_LCA(long, (___length), D0), \
 AROS_LCA(DES_key_schedule *, (___schedule), A2), \
 AROS_LCA(DES_cblock *, (___ivec), A3), \
 AROS_LCA(int *, (___num), D1), \
     struct Library *, AMISSL_BASE_NAME, 2306, Amissl)

#define DH_OpenSSL() \
      AROS_LC0(const DH_METHOD *, DH_OpenSSL, \
     struct Library *, AMISSL_BASE_NAME, 2344, Amissl)

#define DH_set_default_method(___meth) \
      AROS_LC1(void, DH_set_default_method, \
 AROS_LCA(const DH_METHOD *, (___meth), A0), \
     struct Library *, AMISSL_BASE_NAME, 2345, Amissl)

#define DH_get_default_method() \
      AROS_LC0(const DH_METHOD *, DH_get_default_method, \
     struct Library *, AMISSL_BASE_NAME, 2346, Amissl)

#define DH_set_method(___dh, ___meth) \
      AROS_LC2(int, DH_set_method, \
 AROS_LCA(DH *, (___dh), A0), \
 AROS_LCA(const DH_METHOD *, (___meth), A1), \
     struct Library *, AMISSL_BASE_NAME, 2347, Amissl)

#define DH_new_method(___engine) \
      AROS_LC1(DH *, DH_new_method, \
 AROS_LCA(ENGINE *, (___engine), A0), \
     struct Library *, AMISSL_BASE_NAME, 2348, Amissl)

#define DH_new() \
      AROS_LC0(DH *, DH_new, \
     struct Library *, AMISSL_BASE_NAME, 2349, Amissl)

#define DH_free(___dh) \
      AROS_LC1(void, DH_free, \
 AROS_LCA(DH *, (___dh), A0), \
     struct Library *, AMISSL_BASE_NAME, 2350, Amissl)

#define DH_up_ref(___dh) \
      AROS_LC1(int, DH_up_ref, \
 AROS_LCA(DH *, (___dh), A0), \
     struct Library *, AMISSL_BASE_NAME, 2351, Amissl)

#define DH_size(___dh) \
      AROS_LC1(int, DH_size, \
 AROS_LCA(const DH *, (___dh), A0), \
     struct Library *, AMISSL_BASE_NAME, 2352, Amissl)

#define OBSOLETE_DH_get_ex_new_index(___argl, ___argp, ___new_func, ___dup_func, ___free_func) \
      AROS_LC5(int, OBSOLETE_DH_get_ex_new_index, \
 AROS_LCA(long, (___argl), D0), \
 AROS_LCA(void *, (___argp), A0), \
 AROS_LCA(CRYPTO_EX_new *, (___new_func), A1), \
 AROS_LCA(CRYPTO_EX_dup *, (___dup_func), A2), \
 AROS_LCA(CRYPTO_EX_free *, (___free_func), A3), \
     struct Library *, AMISSL_BASE_NAME, 2353, Amissl)

#define DH_set_ex_data(___d, ___idx, ___arg) \
      AROS_LC3(int, DH_set_ex_data, \
 AROS_LCA(DH *, (___d), A0), \
 AROS_LCA(int, (___idx), D0), \
 AROS_LCA(void *, (___arg), A1), \
     struct Library *, AMISSL_BASE_NAME, 2354, Amissl)

#define DH_get_ex_data(___d, ___idx) \
      AROS_LC2(void *, DH_get_ex_data, \
 AROS_LCA(const DH *, (___d), A0), \
 AROS_LCA(int, (___idx), D0), \
     struct Library *, AMISSL_BASE_NAME, 2355, Amissl)

#define DH_generate_parameters(___prime_len, ___generator, ___callback, ___cb_arg) \
      AROS_LC4(DH *, DH_generate_parameters, \
 AROS_LCA(int, (___prime_len), D0), \
 AROS_LCA(int, (___generator), D1), \
 AROS_LCA(void (*)(int,int,void *), (___callback), A0), \
 AROS_LCA(void *, (___cb_arg), A1), \
     struct Library *, AMISSL_BASE_NAME, 2356, Amissl)

#define DH_check(___dh, ___codes) \
      AROS_LC2(int, DH_check, \
 AROS_LCA(const DH *, (___dh), A0), \
 AROS_LCA(int *, (___codes), A1), \
     struct Library *, AMISSL_BASE_NAME, 2357, Amissl)

#define DH_generate_key(___dh) \
      AROS_LC1(int, DH_generate_key, \
 AROS_LCA(DH *, (___dh), A0), \
     struct Library *, AMISSL_BASE_NAME, 2358, Amissl)

#define DH_compute_key(___key, ___pub_key, ___dh) \
      AROS_LC3(int, DH_compute_key, \
 AROS_LCA(unsigned char *, (___key), A0), \
 AROS_LCA(const BIGNUM *, (___pub_key), A1), \
 AROS_LCA(DH *, (___dh), A2), \
     struct Library *, AMISSL_BASE_NAME, 2359, Amissl)

#define d2i_DHparams(___a, ___pp, ___length) \
      AROS_LC3(DH *, d2i_DHparams, \
 AROS_LCA(DH **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___pp), A1), \
 AROS_LCA(long, (___length), D0), \
     struct Library *, AMISSL_BASE_NAME, 2360, Amissl)

#define i2d_DHparams(___a, ___pp) \
      AROS_LC2(int, i2d_DHparams, \
 AROS_LCA(const DH *, (___a), A0), \
 AROS_LCA(unsigned char **, (___pp), A1), \
     struct Library *, AMISSL_BASE_NAME, 2361, Amissl)

#define DHparams_print(___bp, ___x) \
      AROS_LC2(int, DHparams_print, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(const DH *, (___x), A1), \
     struct Library *, AMISSL_BASE_NAME, 2362, Amissl)

#define ERR_load_DH_strings() \
      AROS_LC0(int, ERR_load_DH_strings, \
     struct Library *, AMISSL_BASE_NAME, 2363, Amissl)

#define DSA_SIG_new() \
      AROS_LC0(DSA_SIG *, DSA_SIG_new, \
     struct Library *, AMISSL_BASE_NAME, 2364, Amissl)

#define DSA_SIG_free(___a) \
      AROS_LC1(void, DSA_SIG_free, \
 AROS_LCA(DSA_SIG *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 2365, Amissl)

#define i2d_DSA_SIG(___a, ___pp) \
      AROS_LC2(int, i2d_DSA_SIG, \
 AROS_LCA(const DSA_SIG *, (___a), A0), \
 AROS_LCA(unsigned char **, (___pp), A1), \
     struct Library *, AMISSL_BASE_NAME, 2366, Amissl)

#define d2i_DSA_SIG(___v, ___pp, ___length) \
      AROS_LC3(DSA_SIG *, d2i_DSA_SIG, \
 AROS_LCA(DSA_SIG **, (___v), A0), \
 AROS_LCA(const unsigned char **, (___pp), A1), \
 AROS_LCA(long, (___length), D0), \
     struct Library *, AMISSL_BASE_NAME, 2367, Amissl)

#define DSA_do_sign(___dgst, ___dlen, ___dsa) \
      AROS_LC3(DSA_SIG *, DSA_do_sign, \
 AROS_LCA(const unsigned char *, (___dgst), A0), \
 AROS_LCA(int, (___dlen), D0), \
 AROS_LCA(DSA *, (___dsa), A1), \
     struct Library *, AMISSL_BASE_NAME, 2368, Amissl)

#define DSA_do_verify(___dgst, ___dgst_len, ___sig, ___dsa) \
      AROS_LC4(int, DSA_do_verify, \
 AROS_LCA(const unsigned char *, (___dgst), A0), \
 AROS_LCA(int, (___dgst_len), D0), \
 AROS_LCA(DSA_SIG *, (___sig), A1), \
 AROS_LCA(DSA *, (___dsa), A2), \
     struct Library *, AMISSL_BASE_NAME, 2369, Amissl)

#define DSA_OpenSSL() \
      AROS_LC0(const DSA_METHOD *, DSA_OpenSSL, \
     struct Library *, AMISSL_BASE_NAME, 2370, Amissl)

#define DSA_set_default_method(___a) \
      AROS_LC1(void, DSA_set_default_method, \
 AROS_LCA(const DSA_METHOD *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 2371, Amissl)

#define DSA_get_default_method() \
      AROS_LC0(const DSA_METHOD *, DSA_get_default_method, \
     struct Library *, AMISSL_BASE_NAME, 2372, Amissl)

#define DSA_set_method(___dsa, ___a) \
      AROS_LC2(int, DSA_set_method, \
 AROS_LCA(DSA *, (___dsa), A0), \
 AROS_LCA(const DSA_METHOD *, (___a), A1), \
     struct Library *, AMISSL_BASE_NAME, 2373, Amissl)

#define DSA_new() \
      AROS_LC0(DSA *, DSA_new, \
     struct Library *, AMISSL_BASE_NAME, 2374, Amissl)

#define DSA_new_method(___engine) \
      AROS_LC1(DSA *, DSA_new_method, \
 AROS_LCA(ENGINE *, (___engine), A0), \
     struct Library *, AMISSL_BASE_NAME, 2375, Amissl)

#define DSA_free(___r) \
      AROS_LC1(void, DSA_free, \
 AROS_LCA(DSA *, (___r), A0), \
     struct Library *, AMISSL_BASE_NAME, 2376, Amissl)

#define DSA_up_ref(___r) \
      AROS_LC1(int, DSA_up_ref, \
 AROS_LCA(DSA *, (___r), A0), \
     struct Library *, AMISSL_BASE_NAME, 2377, Amissl)

#define DSA_size(___a) \
      AROS_LC1(int, DSA_size, \
 AROS_LCA(const DSA *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 2378, Amissl)

#define DSA_sign_setup(___dsa, ___ctx_in, ___kinvp, ___rp) \
      AROS_LC4(int, DSA_sign_setup, \
 AROS_LCA(DSA *, (___dsa), A0), \
 AROS_LCA(BN_CTX *, (___ctx_in), A1), \
 AROS_LCA(BIGNUM **, (___kinvp), A2), \
 AROS_LCA(BIGNUM **, (___rp), A3), \
     struct Library *, AMISSL_BASE_NAME, 2379, Amissl)

#define DSA_sign(___type, ___dgst, ___dlen, ___sig, ___siglen, ___dsa) \
      AROS_LC6(int, DSA_sign, \
 AROS_LCA(int, (___type), D0), \
 AROS_LCA(const unsigned char *, (___dgst), A0), \
 AROS_LCA(int, (___dlen), D1), \
 AROS_LCA(unsigned char *, (___sig), A1), \
 AROS_LCA(unsigned int *, (___siglen), A2), \
 AROS_LCA(DSA *, (___dsa), A3), \
     struct Library *, AMISSL_BASE_NAME, 2380, Amissl)

#define DSA_verify(___type, ___dgst, ___dgst_len, ___sigbuf, ___siglen, ___dsa) \
      AROS_LC6(int, DSA_verify, \
 AROS_LCA(int, (___type), D0), \
 AROS_LCA(const unsigned char *, (___dgst), A0), \
 AROS_LCA(int, (___dgst_len), D1), \
 AROS_LCA(const unsigned char *, (___sigbuf), A1), \
 AROS_LCA(int, (___siglen), D2), \
 AROS_LCA(DSA *, (___dsa), A2), \
     struct Library *, AMISSL_BASE_NAME, 2381, Amissl)

#define OBSOLETE_DSA_get_ex_new_index(___argl, ___argp, ___new_func, ___dup_func, ___free_func) \
      AROS_LC5(int, OBSOLETE_DSA_get_ex_new_index, \
 AROS_LCA(long, (___argl), D0), \
 AROS_LCA(void *, (___argp), A0), \
 AROS_LCA(CRYPTO_EX_new *, (___new_func), A1), \
 AROS_LCA(CRYPTO_EX_dup *, (___dup_func), A2), \
 AROS_LCA(CRYPTO_EX_free *, (___free_func), A3), \
     struct Library *, AMISSL_BASE_NAME, 2382, Amissl)

#define DSA_set_ex_data(___d, ___idx, ___arg) \
      AROS_LC3(int, DSA_set_ex_data, \
 AROS_LCA(DSA *, (___d), A0), \
 AROS_LCA(int, (___idx), D0), \
 AROS_LCA(void *, (___arg), A1), \
     struct Library *, AMISSL_BASE_NAME, 2383, Amissl)

#define DSA_get_ex_data(___d, ___idx) \
      AROS_LC2(void *, DSA_get_ex_data, \
 AROS_LCA(const DSA *, (___d), A0), \
 AROS_LCA(int, (___idx), D0), \
     struct Library *, AMISSL_BASE_NAME, 2384, Amissl)

#define d2i_DSAPublicKey(___a, ___pp, ___length) \
      AROS_LC3(DSA *, d2i_DSAPublicKey, \
 AROS_LCA(DSA **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___pp), A1), \
 AROS_LCA(long, (___length), D0), \
     struct Library *, AMISSL_BASE_NAME, 2385, Amissl)

#define d2i_DSAPrivateKey(___a, ___pp, ___length) \
      AROS_LC3(DSA *, d2i_DSAPrivateKey, \
 AROS_LCA(DSA **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___pp), A1), \
 AROS_LCA(long, (___length), D0), \
     struct Library *, AMISSL_BASE_NAME, 2386, Amissl)

#define d2i_DSAparams(___a, ___pp, ___length) \
      AROS_LC3(DSA *, d2i_DSAparams, \
 AROS_LCA(DSA **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___pp), A1), \
 AROS_LCA(long, (___length), D0), \
     struct Library *, AMISSL_BASE_NAME, 2387, Amissl)

#define DSA_generate_parameters(___bits, ___seed, ___seed_len, ___counter_ret, ___h_ret, ___callback, ___cb_arg) \
      AROS_LC7(DSA *, DSA_generate_parameters, \
 AROS_LCA(int, (___bits), D0), \
 AROS_LCA(unsigned char *, (___seed), A0), \
 AROS_LCA(int, (___seed_len), D1), \
 AROS_LCA(int *, (___counter_ret), A1), \
 AROS_LCA(unsigned long *, (___h_ret), A2), \
 AROS_LCA(void (*)(int,int,void *), (___callback), A3), \
 AROS_LCA(void *, (___cb_arg), D2), \
     struct Library *, AMISSL_BASE_NAME, 2388, Amissl)

#define DSA_generate_key(___a) \
      AROS_LC1(int, DSA_generate_key, \
 AROS_LCA(DSA *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 2389, Amissl)

#define i2d_DSAPublicKey(___a, ___pp) \
      AROS_LC2(int, i2d_DSAPublicKey, \
 AROS_LCA(const DSA *, (___a), A0), \
 AROS_LCA(unsigned char **, (___pp), A1), \
     struct Library *, AMISSL_BASE_NAME, 2390, Amissl)

#define i2d_DSAPrivateKey(___a, ___pp) \
      AROS_LC2(int, i2d_DSAPrivateKey, \
 AROS_LCA(const DSA *, (___a), A0), \
 AROS_LCA(unsigned char **, (___pp), A1), \
     struct Library *, AMISSL_BASE_NAME, 2391, Amissl)

#define i2d_DSAparams(___a, ___pp) \
      AROS_LC2(int, i2d_DSAparams, \
 AROS_LCA(const DSA *, (___a), A0), \
 AROS_LCA(unsigned char **, (___pp), A1), \
     struct Library *, AMISSL_BASE_NAME, 2392, Amissl)

#define DSAparams_print(___bp, ___x) \
      AROS_LC2(int, DSAparams_print, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(const DSA *, (___x), A1), \
     struct Library *, AMISSL_BASE_NAME, 2393, Amissl)

#define DSA_print(___bp, ___x, ___off) \
      AROS_LC3(int, DSA_print, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(const DSA *, (___x), A1), \
 AROS_LCA(int, (___off), D0), \
     struct Library *, AMISSL_BASE_NAME, 2394, Amissl)

#define DSA_dup_DH(___r) \
      AROS_LC1(DH *, DSA_dup_DH, \
 AROS_LCA(const DSA *, (___r), A0), \
     struct Library *, AMISSL_BASE_NAME, 2395, Amissl)

#define ERR_load_DSA_strings() \
      AROS_LC0(int, ERR_load_DSA_strings, \
     struct Library *, AMISSL_BASE_NAME, 2396, Amissl)

#define IDEA_options() \
      AROS_LC0(const char *, IDEA_options, \
     struct Library *, AMISSL_BASE_NAME, 2397, Amissl)

#define IDEA_ecb_encrypt(___in, ___out, ___ks) \
      AROS_LC3(void, IDEA_ecb_encrypt, \
 AROS_LCA(const unsigned char *, (___in), A0), \
 AROS_LCA(unsigned char *, (___out), A1), \
 AROS_LCA(IDEA_KEY_SCHEDULE *, (___ks), A2), \
     struct Library *, AMISSL_BASE_NAME, 2398, Amissl)

#define IDEA_set_encrypt_key(___key, ___ks) \
      AROS_LC2(void, IDEA_set_encrypt_key, \
 AROS_LCA(const unsigned char *, (___key), A0), \
 AROS_LCA(IDEA_KEY_SCHEDULE *, (___ks), A1), \
     struct Library *, AMISSL_BASE_NAME, 2399, Amissl)

#define IDEA_set_decrypt_key(___ek, ___dk) \
      AROS_LC2(void, IDEA_set_decrypt_key, \
 AROS_LCA(IDEA_KEY_SCHEDULE *, (___ek), A0), \
 AROS_LCA(IDEA_KEY_SCHEDULE *, (___dk), A1), \
     struct Library *, AMISSL_BASE_NAME, 2400, Amissl)

#define IDEA_cbc_encrypt(___in, ___out, ___length, ___ks, ___iv, ___enc) \
      AROS_LC6(void, IDEA_cbc_encrypt, \
 AROS_LCA(const unsigned char *, (___in), A0), \
 AROS_LCA(unsigned char *, (___out), A1), \
 AROS_LCA(long, (___length), D0), \
 AROS_LCA(IDEA_KEY_SCHEDULE *, (___ks), A2), \
 AROS_LCA(unsigned char *, (___iv), A3), \
 AROS_LCA(int, (___enc), D1), \
     struct Library *, AMISSL_BASE_NAME, 2401, Amissl)

#define IDEA_cfb64_encrypt(___in, ___out, ___length, ___ks, ___iv, ___num, ___enc) \
      AROS_LC7(void, IDEA_cfb64_encrypt, \
 AROS_LCA(const unsigned char *, (___in), A0), \
 AROS_LCA(unsigned char *, (___out), A1), \
 AROS_LCA(long, (___length), D0), \
 AROS_LCA(IDEA_KEY_SCHEDULE *, (___ks), A2), \
 AROS_LCA(unsigned char *, (___iv), A3), \
 AROS_LCA(int *, (___num), D1), \
 AROS_LCA(int, (___enc), D2), \
     struct Library *, AMISSL_BASE_NAME, 2402, Amissl)

#define IDEA_ofb64_encrypt(___in, ___out, ___length, ___ks, ___iv, ___num) \
      AROS_LC6(void, IDEA_ofb64_encrypt, \
 AROS_LCA(const unsigned char *, (___in), A0), \
 AROS_LCA(unsigned char *, (___out), A1), \
 AROS_LCA(long, (___length), D0), \
 AROS_LCA(IDEA_KEY_SCHEDULE *, (___ks), A2), \
 AROS_LCA(unsigned char *, (___iv), A3), \
 AROS_LCA(int *, (___num), D1), \
     struct Library *, AMISSL_BASE_NAME, 2403, Amissl)

#define IDEA_encrypt(___in, ___ks) \
      AROS_LC2(void, IDEA_encrypt, \
 AROS_LCA(unsigned long *, (___in), A0), \
 AROS_LCA(IDEA_KEY_SCHEDULE *, (___ks), A1), \
     struct Library *, AMISSL_BASE_NAME, 2404, Amissl)

#define MD2_options() \
      AROS_LC0(const char *, MD2_options, \
     struct Library *, AMISSL_BASE_NAME, 2405, Amissl)

#define MD2_Init(___c) \
      AROS_LC1(int, MD2_Init, \
 AROS_LCA(MD2_CTX *, (___c), A0), \
     struct Library *, AMISSL_BASE_NAME, 2406, Amissl)

#define MD2_Update(___c, ___data, ___len) \
      AROS_LC3(int, MD2_Update, \
 AROS_LCA(MD2_CTX *, (___c), A0), \
 AROS_LCA(const unsigned char *, (___data), A1), \
 AROS_LCA(size_t, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 2407, Amissl)

#define MD2_Final(___md, ___c) \
      AROS_LC2(int, MD2_Final, \
 AROS_LCA(unsigned char *, (___md), A0), \
 AROS_LCA(MD2_CTX *, (___c), A1), \
     struct Library *, AMISSL_BASE_NAME, 2408, Amissl)

#define MD2(___d, ___n, ___md) \
      AROS_LC3(unsigned char *, MD2, \
 AROS_LCA(const unsigned char *, (___d), A0), \
 AROS_LCA(size_t, (___n), D0), \
 AROS_LCA(unsigned char *, (___md), A1), \
     struct Library *, AMISSL_BASE_NAME, 2409, Amissl)

#define MD4_Init(___c) \
      AROS_LC1(int, MD4_Init, \
 AROS_LCA(MD4_CTX *, (___c), A0), \
     struct Library *, AMISSL_BASE_NAME, 2410, Amissl)

#define MD4_Update(___c, ___data, ___len) \
      AROS_LC3(int, MD4_Update, \
 AROS_LCA(MD4_CTX *, (___c), A0), \
 AROS_LCA(const void *, (___data), A1), \
 AROS_LCA(size_t, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 2411, Amissl)

#define MD4_Final(___md, ___c) \
      AROS_LC2(int, MD4_Final, \
 AROS_LCA(unsigned char *, (___md), A0), \
 AROS_LCA(MD4_CTX *, (___c), A1), \
     struct Library *, AMISSL_BASE_NAME, 2412, Amissl)

#define MD4(___d, ___n, ___md) \
      AROS_LC3(unsigned char *, MD4, \
 AROS_LCA(const unsigned char *, (___d), A0), \
 AROS_LCA(size_t, (___n), D0), \
 AROS_LCA(unsigned char *, (___md), A1), \
     struct Library *, AMISSL_BASE_NAME, 2413, Amissl)

#define MD4_Transform(___c, ___b) \
      AROS_LC2(void, MD4_Transform, \
 AROS_LCA(MD4_CTX *, (___c), A0), \
 AROS_LCA(const unsigned char *, (___b), A1), \
     struct Library *, AMISSL_BASE_NAME, 2414, Amissl)

#define MD5_Init(___c) \
      AROS_LC1(int, MD5_Init, \
 AROS_LCA(MD5_CTX *, (___c), A0), \
     struct Library *, AMISSL_BASE_NAME, 2415, Amissl)

#define MD5_Update(___c, ___data, ___len) \
      AROS_LC3(int, MD5_Update, \
 AROS_LCA(MD5_CTX *, (___c), A0), \
 AROS_LCA(const void *, (___data), A1), \
 AROS_LCA(size_t, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 2416, Amissl)

#define MD5_Final(___md, ___c) \
      AROS_LC2(int, MD5_Final, \
 AROS_LCA(unsigned char *, (___md), A0), \
 AROS_LCA(MD5_CTX *, (___c), A1), \
     struct Library *, AMISSL_BASE_NAME, 2417, Amissl)

#define MD5(___d, ___n, ___md) \
      AROS_LC3(unsigned char *, MD5, \
 AROS_LCA(const unsigned char *, (___d), A0), \
 AROS_LCA(size_t, (___n), D0), \
 AROS_LCA(unsigned char *, (___md), A1), \
     struct Library *, AMISSL_BASE_NAME, 2418, Amissl)

#define MD5_Transform(___c, ___b) \
      AROS_LC2(void, MD5_Transform, \
 AROS_LCA(MD5_CTX *, (___c), A0), \
 AROS_LCA(const unsigned char *, (___b), A1), \
     struct Library *, AMISSL_BASE_NAME, 2419, Amissl)

#define MDC2_Init(___c) \
      AROS_LC1(int, MDC2_Init, \
 AROS_LCA(MDC2_CTX *, (___c), A0), \
     struct Library *, AMISSL_BASE_NAME, 2420, Amissl)

#define MDC2_Update(___c, ___data, ___len) \
      AROS_LC3(int, MDC2_Update, \
 AROS_LCA(MDC2_CTX *, (___c), A0), \
 AROS_LCA(const unsigned char *, (___data), A1), \
 AROS_LCA(size_t, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 2421, Amissl)

#define MDC2_Final(___md, ___c) \
      AROS_LC2(int, MDC2_Final, \
 AROS_LCA(unsigned char *, (___md), A0), \
 AROS_LCA(MDC2_CTX *, (___c), A1), \
     struct Library *, AMISSL_BASE_NAME, 2422, Amissl)

#define MDC2(___d, ___n, ___md) \
      AROS_LC3(unsigned char *, MDC2, \
 AROS_LCA(const unsigned char *, (___d), A0), \
 AROS_LCA(size_t, (___n), D0), \
 AROS_LCA(unsigned char *, (___md), A1), \
     struct Library *, AMISSL_BASE_NAME, 2423, Amissl)

#define RC2_set_key(___key, ___len, ___data, ___bits) \
      AROS_LC4(void, RC2_set_key, \
 AROS_LCA(RC2_KEY *, (___key), A0), \
 AROS_LCA(int, (___len), D0), \
 AROS_LCA(const unsigned char *, (___data), A1), \
 AROS_LCA(int, (___bits), D1), \
     struct Library *, AMISSL_BASE_NAME, 2424, Amissl)

#define RC2_ecb_encrypt(___in, ___out, ___key, ___enc) \
      AROS_LC4(void, RC2_ecb_encrypt, \
 AROS_LCA(const unsigned char *, (___in), A0), \
 AROS_LCA(unsigned char *, (___out), A1), \
 AROS_LCA(RC2_KEY *, (___key), A2), \
 AROS_LCA(int, (___enc), D0), \
     struct Library *, AMISSL_BASE_NAME, 2425, Amissl)

#define RC2_encrypt(___data, ___key) \
      AROS_LC2(void, RC2_encrypt, \
 AROS_LCA(unsigned long *, (___data), A0), \
 AROS_LCA(RC2_KEY *, (___key), A1), \
     struct Library *, AMISSL_BASE_NAME, 2426, Amissl)

#define RC2_decrypt(___data, ___key) \
      AROS_LC2(void, RC2_decrypt, \
 AROS_LCA(unsigned long *, (___data), A0), \
 AROS_LCA(RC2_KEY *, (___key), A1), \
     struct Library *, AMISSL_BASE_NAME, 2427, Amissl)

#define RC2_cbc_encrypt(___in, ___out, ___length, ___ks, ___iv, ___enc) \
      AROS_LC6(void, RC2_cbc_encrypt, \
 AROS_LCA(const unsigned char *, (___in), A0), \
 AROS_LCA(unsigned char *, (___out), A1), \
 AROS_LCA(long, (___length), D0), \
 AROS_LCA(RC2_KEY *, (___ks), A2), \
 AROS_LCA(unsigned char *, (___iv), A3), \
 AROS_LCA(int, (___enc), D1), \
     struct Library *, AMISSL_BASE_NAME, 2428, Amissl)

#define RC2_cfb64_encrypt(___in, ___out, ___length, ___schedule, ___ivec, ___num, ___enc) \
      AROS_LC7(void, RC2_cfb64_encrypt, \
 AROS_LCA(const unsigned char *, (___in), A0), \
 AROS_LCA(unsigned char *, (___out), A1), \
 AROS_LCA(long, (___length), D0), \
 AROS_LCA(RC2_KEY *, (___schedule), A2), \
 AROS_LCA(unsigned char *, (___ivec), A3), \
 AROS_LCA(int *, (___num), D1), \
 AROS_LCA(int, (___enc), D2), \
     struct Library *, AMISSL_BASE_NAME, 2429, Amissl)

#define RC2_ofb64_encrypt(___in, ___out, ___length, ___schedule, ___ivec, ___num) \
      AROS_LC6(void, RC2_ofb64_encrypt, \
 AROS_LCA(const unsigned char *, (___in), A0), \
 AROS_LCA(unsigned char *, (___out), A1), \
 AROS_LCA(long, (___length), D0), \
 AROS_LCA(RC2_KEY *, (___schedule), A2), \
 AROS_LCA(unsigned char *, (___ivec), A3), \
 AROS_LCA(int *, (___num), D1), \
     struct Library *, AMISSL_BASE_NAME, 2430, Amissl)

#define RC4_options() \
      AROS_LC0(const char *, RC4_options, \
     struct Library *, AMISSL_BASE_NAME, 2431, Amissl)

#define RC4_set_key(___key, ___len, ___data) \
      AROS_LC3(void, RC4_set_key, \
 AROS_LCA(RC4_KEY *, (___key), A0), \
 AROS_LCA(int, (___len), D0), \
 AROS_LCA(const unsigned char *, (___data), A1), \
     struct Library *, AMISSL_BASE_NAME, 2432, Amissl)

#define RC4(___key, ___len, ___indata, ___outdata) \
      AROS_LC4(void, RC4, \
 AROS_LCA(RC4_KEY *, (___key), A0), \
 AROS_LCA(size_t, (___len), D0), \
 AROS_LCA(const unsigned char *, (___indata), A1), \
 AROS_LCA(unsigned char *, (___outdata), A2), \
     struct Library *, AMISSL_BASE_NAME, 2433, Amissl)

#define RC5_32_set_key(___key, ___len, ___data, ___rounds) \
      AROS_LC4(int, RC5_32_set_key, \
 AROS_LCA(RC5_32_KEY *, (___key), A0), \
 AROS_LCA(int, (___len), D0), \
 AROS_LCA(const unsigned char *, (___data), A1), \
 AROS_LCA(int, (___rounds), D1), \
     struct Library *, AMISSL_BASE_NAME, 2434, Amissl)

#define RC5_32_ecb_encrypt(___in, ___out, ___key, ___enc) \
      AROS_LC4(void, RC5_32_ecb_encrypt, \
 AROS_LCA(const unsigned char *, (___in), A0), \
 AROS_LCA(unsigned char *, (___out), A1), \
 AROS_LCA(RC5_32_KEY *, (___key), A2), \
 AROS_LCA(int, (___enc), D0), \
     struct Library *, AMISSL_BASE_NAME, 2435, Amissl)

#define RC5_32_encrypt(___data, ___key) \
      AROS_LC2(void, RC5_32_encrypt, \
 AROS_LCA(unsigned long *, (___data), A0), \
 AROS_LCA(RC5_32_KEY *, (___key), A1), \
     struct Library *, AMISSL_BASE_NAME, 2436, Amissl)

#define RC5_32_decrypt(___data, ___key) \
      AROS_LC2(void, RC5_32_decrypt, \
 AROS_LCA(unsigned long *, (___data), A0), \
 AROS_LCA(RC5_32_KEY *, (___key), A1), \
     struct Library *, AMISSL_BASE_NAME, 2437, Amissl)

#define RC5_32_cbc_encrypt(___in, ___out, ___length, ___ks, ___iv, ___enc) \
      AROS_LC6(void, RC5_32_cbc_encrypt, \
 AROS_LCA(const unsigned char *, (___in), A0), \
 AROS_LCA(unsigned char *, (___out), A1), \
 AROS_LCA(long, (___length), D0), \
 AROS_LCA(RC5_32_KEY *, (___ks), A2), \
 AROS_LCA(unsigned char *, (___iv), A3), \
 AROS_LCA(int, (___enc), D1), \
     struct Library *, AMISSL_BASE_NAME, 2438, Amissl)

#define RC5_32_cfb64_encrypt(___in, ___out, ___length, ___schedule, ___ivec, ___num, ___enc) \
      AROS_LC7(void, RC5_32_cfb64_encrypt, \
 AROS_LCA(const unsigned char *, (___in), A0), \
 AROS_LCA(unsigned char *, (___out), A1), \
 AROS_LCA(long, (___length), D0), \
 AROS_LCA(RC5_32_KEY *, (___schedule), A2), \
 AROS_LCA(unsigned char *, (___ivec), A3), \
 AROS_LCA(int *, (___num), D1), \
 AROS_LCA(int, (___enc), D2), \
     struct Library *, AMISSL_BASE_NAME, 2439, Amissl)

#define RC5_32_ofb64_encrypt(___in, ___out, ___length, ___schedule, ___ivec, ___num) \
      AROS_LC6(void, RC5_32_ofb64_encrypt, \
 AROS_LCA(const unsigned char *, (___in), A0), \
 AROS_LCA(unsigned char *, (___out), A1), \
 AROS_LCA(long, (___length), D0), \
 AROS_LCA(RC5_32_KEY *, (___schedule), A2), \
 AROS_LCA(unsigned char *, (___ivec), A3), \
 AROS_LCA(int *, (___num), D1), \
     struct Library *, AMISSL_BASE_NAME, 2440, Amissl)

#define RIPEMD160_Init(___c) \
      AROS_LC1(int, RIPEMD160_Init, \
 AROS_LCA(RIPEMD160_CTX *, (___c), A0), \
     struct Library *, AMISSL_BASE_NAME, 2441, Amissl)

#define RIPEMD160_Update(___c, ___data, ___len) \
      AROS_LC3(int, RIPEMD160_Update, \
 AROS_LCA(RIPEMD160_CTX *, (___c), A0), \
 AROS_LCA(const void *, (___data), A1), \
 AROS_LCA(size_t, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 2442, Amissl)

#define RIPEMD160_Final(___md, ___c) \
      AROS_LC2(int, RIPEMD160_Final, \
 AROS_LCA(unsigned char *, (___md), A0), \
 AROS_LCA(RIPEMD160_CTX *, (___c), A1), \
     struct Library *, AMISSL_BASE_NAME, 2443, Amissl)

#define RIPEMD160(___d, ___n, ___md) \
      AROS_LC3(unsigned char *, RIPEMD160, \
 AROS_LCA(const unsigned char *, (___d), A0), \
 AROS_LCA(size_t, (___n), D0), \
 AROS_LCA(unsigned char *, (___md), A1), \
     struct Library *, AMISSL_BASE_NAME, 2444, Amissl)

#define RIPEMD160_Transform(___c, ___b) \
      AROS_LC2(void, RIPEMD160_Transform, \
 AROS_LCA(RIPEMD160_CTX *, (___c), A0), \
 AROS_LCA(const unsigned char *, (___b), A1), \
     struct Library *, AMISSL_BASE_NAME, 2445, Amissl)

#define RSA_new() \
      AROS_LC0(RSA *, RSA_new, \
     struct Library *, AMISSL_BASE_NAME, 2446, Amissl)

#define RSA_new_method(___engine) \
      AROS_LC1(RSA *, RSA_new_method, \
 AROS_LCA(ENGINE *, (___engine), A0), \
     struct Library *, AMISSL_BASE_NAME, 2447, Amissl)

#define RSA_size(___a) \
      AROS_LC1(int, RSA_size, \
 AROS_LCA(const RSA *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 2448, Amissl)

#define RSA_generate_key(___bits, ___e, ___callback, ___cb_arg) \
      AROS_LC4(RSA *, RSA_generate_key, \
 AROS_LCA(int, (___bits), D0), \
 AROS_LCA(unsigned long, (___e), D1), \
 AROS_LCA(void (*)(int,int,void *), (___callback), A0), \
 AROS_LCA(void *, (___cb_arg), A1), \
     struct Library *, AMISSL_BASE_NAME, 2449, Amissl)

#define RSA_check_key(___a) \
      AROS_LC1(int, RSA_check_key, \
 AROS_LCA(const RSA *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 2450, Amissl)

#define RSA_public_encrypt(___flen, ___from, ___to, ___rsa, ___padding) \
      AROS_LC5(int, RSA_public_encrypt, \
 AROS_LCA(int, (___flen), D0), \
 AROS_LCA(const unsigned char *, (___from), A0), \
 AROS_LCA(unsigned char *, (___to), A1), \
 AROS_LCA(RSA *, (___rsa), A2), \
 AROS_LCA(int, (___padding), D1), \
     struct Library *, AMISSL_BASE_NAME, 2451, Amissl)

#define RSA_private_encrypt(___flen, ___from, ___to, ___rsa, ___padding) \
      AROS_LC5(int, RSA_private_encrypt, \
 AROS_LCA(int, (___flen), D0), \
 AROS_LCA(const unsigned char *, (___from), A0), \
 AROS_LCA(unsigned char *, (___to), A1), \
 AROS_LCA(RSA *, (___rsa), A2), \
 AROS_LCA(int, (___padding), D1), \
     struct Library *, AMISSL_BASE_NAME, 2452, Amissl)

#define RSA_public_decrypt(___flen, ___from, ___to, ___rsa, ___padding) \
      AROS_LC5(int, RSA_public_decrypt, \
 AROS_LCA(int, (___flen), D0), \
 AROS_LCA(const unsigned char *, (___from), A0), \
 AROS_LCA(unsigned char *, (___to), A1), \
 AROS_LCA(RSA *, (___rsa), A2), \
 AROS_LCA(int, (___padding), D1), \
     struct Library *, AMISSL_BASE_NAME, 2453, Amissl)

#define RSA_private_decrypt(___flen, ___from, ___to, ___rsa, ___padding) \
      AROS_LC5(int, RSA_private_decrypt, \
 AROS_LCA(int, (___flen), D0), \
 AROS_LCA(const unsigned char *, (___from), A0), \
 AROS_LCA(unsigned char *, (___to), A1), \
 AROS_LCA(RSA *, (___rsa), A2), \
 AROS_LCA(int, (___padding), D1), \
     struct Library *, AMISSL_BASE_NAME, 2454, Amissl)

#define RSA_free(___r) \
      AROS_LC1(void, RSA_free, \
 AROS_LCA(RSA *, (___r), A0), \
     struct Library *, AMISSL_BASE_NAME, 2455, Amissl)

#define RSA_up_ref(___r) \
      AROS_LC1(int, RSA_up_ref, \
 AROS_LCA(RSA *, (___r), A0), \
     struct Library *, AMISSL_BASE_NAME, 2456, Amissl)

#define RSA_flags(___r) \
      AROS_LC1(int, RSA_flags, \
 AROS_LCA(const RSA *, (___r), A0), \
     struct Library *, AMISSL_BASE_NAME, 2457, Amissl)

#define RSA_set_default_method(___meth) \
      AROS_LC1(void, RSA_set_default_method, \
 AROS_LCA(const RSA_METHOD *, (___meth), A0), \
     struct Library *, AMISSL_BASE_NAME, 2458, Amissl)

#define RSA_get_default_method() \
      AROS_LC0(const RSA_METHOD *, RSA_get_default_method, \
     struct Library *, AMISSL_BASE_NAME, 2459, Amissl)

#define RSA_get_method(___rsa) \
      AROS_LC1(const RSA_METHOD *, RSA_get_method, \
 AROS_LCA(const RSA *, (___rsa), A0), \
     struct Library *, AMISSL_BASE_NAME, 2460, Amissl)

#define RSA_set_method(___rsa, ___meth) \
      AROS_LC2(int, RSA_set_method, \
 AROS_LCA(RSA *, (___rsa), A0), \
 AROS_LCA(const RSA_METHOD *, (___meth), A1), \
     struct Library *, AMISSL_BASE_NAME, 2461, Amissl)

#define RSA_null_method() \
      AROS_LC0(const RSA_METHOD *, RSA_null_method, \
     struct Library *, AMISSL_BASE_NAME, 2463, Amissl)

#define d2i_RSAPublicKey(___a, ___in, ___len) \
      AROS_LC3(RSA *, d2i_RSAPublicKey, \
 AROS_LCA(RSA **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 2464, Amissl)

#define i2d_RSAPublicKey(___a, ___out) \
      AROS_LC2(int, i2d_RSAPublicKey, \
 AROS_LCA(const RSA *, (___a), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 2465, Amissl)

#define RSAPublicKey_it() \
      AROS_LC0(const ASN1_ITEM *, RSAPublicKey_it, \
     struct Library *, AMISSL_BASE_NAME, 2466, Amissl)

#define d2i_RSAPrivateKey(___a, ___in, ___len) \
      AROS_LC3(RSA *, d2i_RSAPrivateKey, \
 AROS_LCA(RSA **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 2467, Amissl)

#define i2d_RSAPrivateKey(___a, ___out) \
      AROS_LC2(int, i2d_RSAPrivateKey, \
 AROS_LCA(const RSA *, (___a), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 2468, Amissl)

#define RSAPrivateKey_it() \
      AROS_LC0(const ASN1_ITEM *, RSAPrivateKey_it, \
     struct Library *, AMISSL_BASE_NAME, 2469, Amissl)

#define RSA_print(___bp, ___r, ___offset) \
      AROS_LC3(int, RSA_print, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(const RSA *, (___r), A1), \
 AROS_LCA(int, (___offset), D0), \
     struct Library *, AMISSL_BASE_NAME, 2470, Amissl)

#define RSA_sign(___type, ___m, ___m_length, ___sigret, ___siglen, ___rsa) \
      AROS_LC6(int, RSA_sign, \
 AROS_LCA(int, (___type), D0), \
 AROS_LCA(const unsigned char *, (___m), A0), \
 AROS_LCA(unsigned int, (___m_length), D1), \
 AROS_LCA(unsigned char *, (___sigret), A1), \
 AROS_LCA(unsigned int *, (___siglen), A2), \
 AROS_LCA(RSA *, (___rsa), A3), \
     struct Library *, AMISSL_BASE_NAME, 2475, Amissl)

#define RSA_verify(___type, ___m, ___m_length, ___sigbuf, ___siglen, ___rsa) \
      AROS_LC6(int, RSA_verify, \
 AROS_LCA(int, (___type), D0), \
 AROS_LCA(const unsigned char *, (___m), A0), \
 AROS_LCA(unsigned int, (___m_length), D1), \
 AROS_LCA(const unsigned char *, (___sigbuf), A1), \
 AROS_LCA(unsigned int, (___siglen), D2), \
 AROS_LCA(RSA *, (___rsa), A2), \
     struct Library *, AMISSL_BASE_NAME, 2476, Amissl)

#define RSA_sign_ASN1_OCTET_STRING(___type, ___m, ___m_length, ___sigret, ___siglen, ___rsa) \
      AROS_LC6(int, RSA_sign_ASN1_OCTET_STRING, \
 AROS_LCA(int, (___type), D0), \
 AROS_LCA(const unsigned char *, (___m), A0), \
 AROS_LCA(unsigned int, (___m_length), D1), \
 AROS_LCA(unsigned char *, (___sigret), A1), \
 AROS_LCA(unsigned int *, (___siglen), A2), \
 AROS_LCA(RSA *, (___rsa), A3), \
     struct Library *, AMISSL_BASE_NAME, 2477, Amissl)

#define RSA_verify_ASN1_OCTET_STRING(___type, ___m, ___m_length, ___sigbuf, ___siglen, ___rsa) \
      AROS_LC6(int, RSA_verify_ASN1_OCTET_STRING, \
 AROS_LCA(int, (___type), D0), \
 AROS_LCA(const unsigned char *, (___m), A0), \
 AROS_LCA(unsigned int, (___m_length), D1), \
 AROS_LCA(unsigned char *, (___sigbuf), A1), \
 AROS_LCA(unsigned int, (___siglen), D2), \
 AROS_LCA(RSA *, (___rsa), A2), \
     struct Library *, AMISSL_BASE_NAME, 2478, Amissl)

#define RSA_blinding_on(___rsa, ___ctx) \
      AROS_LC2(int, RSA_blinding_on, \
 AROS_LCA(RSA *, (___rsa), A0), \
 AROS_LCA(BN_CTX *, (___ctx), A1), \
     struct Library *, AMISSL_BASE_NAME, 2479, Amissl)

#define RSA_blinding_off(___rsa) \
      AROS_LC1(void, RSA_blinding_off, \
 AROS_LCA(RSA *, (___rsa), A0), \
     struct Library *, AMISSL_BASE_NAME, 2480, Amissl)

#define RSA_padding_add_PKCS1_type_1(___to, ___tlen, ___f, ___fl) \
      AROS_LC4(int, RSA_padding_add_PKCS1_type_1, \
 AROS_LCA(unsigned char *, (___to), A0), \
 AROS_LCA(int, (___tlen), D0), \
 AROS_LCA(const unsigned char *, (___f), A1), \
 AROS_LCA(int, (___fl), D1), \
     struct Library *, AMISSL_BASE_NAME, 2481, Amissl)

#define RSA_padding_check_PKCS1_type_1(___to, ___tlen, ___f, ___fl, ___rsa_len) \
      AROS_LC5(int, RSA_padding_check_PKCS1_type_1, \
 AROS_LCA(unsigned char *, (___to), A0), \
 AROS_LCA(int, (___tlen), D0), \
 AROS_LCA(const unsigned char *, (___f), A1), \
 AROS_LCA(int, (___fl), D1), \
 AROS_LCA(int, (___rsa_len), D2), \
     struct Library *, AMISSL_BASE_NAME, 2482, Amissl)

#define RSA_padding_add_PKCS1_type_2(___to, ___tlen, ___f, ___fl) \
      AROS_LC4(int, RSA_padding_add_PKCS1_type_2, \
 AROS_LCA(unsigned char *, (___to), A0), \
 AROS_LCA(int, (___tlen), D0), \
 AROS_LCA(const unsigned char *, (___f), A1), \
 AROS_LCA(int, (___fl), D1), \
     struct Library *, AMISSL_BASE_NAME, 2483, Amissl)

#define RSA_padding_check_PKCS1_type_2(___to, ___tlen, ___f, ___fl, ___rsa_len) \
      AROS_LC5(int, RSA_padding_check_PKCS1_type_2, \
 AROS_LCA(unsigned char *, (___to), A0), \
 AROS_LCA(int, (___tlen), D0), \
 AROS_LCA(const unsigned char *, (___f), A1), \
 AROS_LCA(int, (___fl), D1), \
 AROS_LCA(int, (___rsa_len), D2), \
     struct Library *, AMISSL_BASE_NAME, 2484, Amissl)

#define RSA_padding_add_PKCS1_OAEP(___to, ___tlen, ___f, ___fl, ___p, ___pl) \
      AROS_LC6(int, RSA_padding_add_PKCS1_OAEP, \
 AROS_LCA(unsigned char *, (___to), A0), \
 AROS_LCA(int, (___tlen), D0), \
 AROS_LCA(const unsigned char *, (___f), A1), \
 AROS_LCA(int, (___fl), D1), \
 AROS_LCA(const unsigned char *, (___p), A2), \
 AROS_LCA(int, (___pl), D2), \
     struct Library *, AMISSL_BASE_NAME, 2485, Amissl)

#define RSA_padding_check_PKCS1_OAEP(___to, ___tlen, ___f, ___fl, ___rsa_len, ___p, ___pl) \
      AROS_LC7(int, RSA_padding_check_PKCS1_OAEP, \
 AROS_LCA(unsigned char *, (___to), A0), \
 AROS_LCA(int, (___tlen), D0), \
 AROS_LCA(const unsigned char *, (___f), A1), \
 AROS_LCA(int, (___fl), D1), \
 AROS_LCA(int, (___rsa_len), D2), \
 AROS_LCA(const unsigned char *, (___p), A2), \
 AROS_LCA(int, (___pl), D3), \
     struct Library *, AMISSL_BASE_NAME, 2486, Amissl)

#define RSA_padding_add_none(___to, ___tlen, ___f, ___fl) \
      AROS_LC4(int, RSA_padding_add_none, \
 AROS_LCA(unsigned char *, (___to), A0), \
 AROS_LCA(int, (___tlen), D0), \
 AROS_LCA(const unsigned char *, (___f), A1), \
 AROS_LCA(int, (___fl), D1), \
     struct Library *, AMISSL_BASE_NAME, 2489, Amissl)

#define RSA_padding_check_none(___to, ___tlen, ___f, ___fl, ___rsa_len) \
      AROS_LC5(int, RSA_padding_check_none, \
 AROS_LCA(unsigned char *, (___to), A0), \
 AROS_LCA(int, (___tlen), D0), \
 AROS_LCA(const unsigned char *, (___f), A1), \
 AROS_LCA(int, (___fl), D1), \
 AROS_LCA(int, (___rsa_len), D2), \
     struct Library *, AMISSL_BASE_NAME, 2490, Amissl)

#define OBSOLETE_RSA_get_ex_new_index(___argl, ___argp, ___new_func, ___dup_func, ___free_func) \
      AROS_LC5(int, OBSOLETE_RSA_get_ex_new_index, \
 AROS_LCA(long, (___argl), D0), \
 AROS_LCA(void *, (___argp), A0), \
 AROS_LCA(CRYPTO_EX_new *, (___new_func), A1), \
 AROS_LCA(CRYPTO_EX_dup *, (___dup_func), A2), \
 AROS_LCA(CRYPTO_EX_free *, (___free_func), A3), \
     struct Library *, AMISSL_BASE_NAME, 2491, Amissl)

#define RSA_set_ex_data(___r, ___idx, ___arg) \
      AROS_LC3(int, RSA_set_ex_data, \
 AROS_LCA(RSA *, (___r), A0), \
 AROS_LCA(int, (___idx), D0), \
 AROS_LCA(void *, (___arg), A1), \
     struct Library *, AMISSL_BASE_NAME, 2492, Amissl)

#define RSA_get_ex_data(___r, ___idx) \
      AROS_LC2(void *, RSA_get_ex_data, \
 AROS_LCA(const RSA *, (___r), A0), \
 AROS_LCA(int, (___idx), D0), \
     struct Library *, AMISSL_BASE_NAME, 2493, Amissl)

#define RSAPublicKey_dup(___rsa) \
      AROS_LC1(RSA *, RSAPublicKey_dup, \
 AROS_LCA(const RSA *, (___rsa), A0), \
     struct Library *, AMISSL_BASE_NAME, 2494, Amissl)

#define RSAPrivateKey_dup(___rsa) \
      AROS_LC1(RSA *, RSAPrivateKey_dup, \
 AROS_LCA(const RSA *, (___rsa), A0), \
     struct Library *, AMISSL_BASE_NAME, 2495, Amissl)

#define ERR_load_RSA_strings() \
      AROS_LC0(int, ERR_load_RSA_strings, \
     struct Library *, AMISSL_BASE_NAME, 2496, Amissl)

#define SHA1_Init(___c) \
      AROS_LC1(int, SHA1_Init, \
 AROS_LCA(SHA_CTX *, (___c), A0), \
     struct Library *, AMISSL_BASE_NAME, 2502, Amissl)

#define SHA1_Update(___c, ___data, ___len) \
      AROS_LC3(int, SHA1_Update, \
 AROS_LCA(SHA_CTX *, (___c), A0), \
 AROS_LCA(const void *, (___data), A1), \
 AROS_LCA(size_t, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 2503, Amissl)

#define SHA1_Final(___md, ___c) \
      AROS_LC2(int, SHA1_Final, \
 AROS_LCA(unsigned char *, (___md), A0), \
 AROS_LCA(SHA_CTX *, (___c), A1), \
     struct Library *, AMISSL_BASE_NAME, 2504, Amissl)

#define SHA1(___d, ___n, ___md) \
      AROS_LC3(unsigned char *, SHA1, \
 AROS_LCA(const unsigned char *, (___d), A0), \
 AROS_LCA(size_t, (___n), D0), \
 AROS_LCA(unsigned char *, (___md), A1), \
     struct Library *, AMISSL_BASE_NAME, 2505, Amissl)

#define SHA1_Transform(___c, ___data) \
      AROS_LC2(void, SHA1_Transform, \
 AROS_LCA(SHA_CTX *, (___c), A0), \
 AROS_LCA(const unsigned char *, (___data), A1), \
     struct Library *, AMISSL_BASE_NAME, 2506, Amissl)

#define HMAC_CTX_set_flags(___ctx, ___flags) \
      AROS_LC2(void, HMAC_CTX_set_flags, \
 AROS_LCA(HMAC_CTX *, (___ctx), A0), \
 AROS_LCA(unsigned long, (___flags), D0), \
     struct Library *, AMISSL_BASE_NAME, 2509, Amissl)

#define X509_check_ca(___x) \
      AROS_LC1(int, X509_check_ca, \
 AROS_LCA(X509 *, (___x), A0), \
     struct Library *, AMISSL_BASE_NAME, 2510, Amissl)

#define PROXY_POLICY_new() \
      AROS_LC0(PROXY_POLICY *, PROXY_POLICY_new, \
     struct Library *, AMISSL_BASE_NAME, 2511, Amissl)

#define PROXY_POLICY_free(___a) \
      AROS_LC1(void, PROXY_POLICY_free, \
 AROS_LCA(PROXY_POLICY *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 2512, Amissl)

#define d2i_PROXY_POLICY(___a, ___in, ___len) \
      AROS_LC3(PROXY_POLICY *, d2i_PROXY_POLICY, \
 AROS_LCA(PROXY_POLICY **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 2513, Amissl)

#define i2d_PROXY_POLICY(___a, ___out) \
      AROS_LC2(int, i2d_PROXY_POLICY, \
 AROS_LCA(const PROXY_POLICY *, (___a), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 2514, Amissl)

#define PROXY_POLICY_it() \
      AROS_LC0(const ASN1_ITEM *, PROXY_POLICY_it, \
     struct Library *, AMISSL_BASE_NAME, 2515, Amissl)

#define PROXY_CERT_INFO_EXTENSION_new() \
      AROS_LC0(PROXY_CERT_INFO_EXTENSION *, PROXY_CERT_INFO_EXTENSION_new, \
     struct Library *, AMISSL_BASE_NAME, 2516, Amissl)

#define PROXY_CERT_INFO_EXTENSION_free(___a) \
      AROS_LC1(void, PROXY_CERT_INFO_EXTENSION_free, \
 AROS_LCA(PROXY_CERT_INFO_EXTENSION *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 2517, Amissl)

#define d2i_PROXY_CERT_INFO_EXTENSION(___a, ___in, ___len) \
      AROS_LC3(PROXY_CERT_INFO_EXTENSION *, d2i_PROXY_CERT_INFO_EXTENSION, \
 AROS_LCA(PROXY_CERT_INFO_EXTENSION **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 2518, Amissl)

#define i2d_PROXY_CERT_INFO_EXTENSION(___a, ___out) \
      AROS_LC2(int, i2d_PROXY_CERT_INFO_EXTENSION, \
 AROS_LCA(const PROXY_CERT_INFO_EXTENSION *, (___a), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 2519, Amissl)

#define PROXY_CERT_INFO_EXTENSION_it() \
      AROS_LC0(const ASN1_ITEM *, PROXY_CERT_INFO_EXTENSION_it, \
     struct Library *, AMISSL_BASE_NAME, 2520, Amissl)

#define BN_mod_exp_mont_consttime(___rr, ___a, ___p, ___m, ___ctx, ___in_mont) \
      AROS_LC6(int, BN_mod_exp_mont_consttime, \
 AROS_LCA(BIGNUM *, (___rr), A0), \
 AROS_LCA(const BIGNUM *, (___a), A1), \
 AROS_LCA(const BIGNUM *, (___p), A2), \
 AROS_LCA(const BIGNUM *, (___m), A3), \
 AROS_LCA(BN_CTX *, (___ctx), D0), \
 AROS_LCA(BN_MONT_CTX *, (___in_mont), D1), \
     struct Library *, AMISSL_BASE_NAME, 2523, Amissl)

#define BN_MONT_CTX_set_locked(___pmont, ___lock, ___mod, ___ctx) \
      AROS_LC4(BN_MONT_CTX *, BN_MONT_CTX_set_locked, \
 AROS_LCA(BN_MONT_CTX **, (___pmont), A0), \
 AROS_LCA(CRYPTO_RWLOCK *, (___lock), A1), \
 AROS_LCA(const BIGNUM *, (___mod), A2), \
 AROS_LCA(BN_CTX *, (___ctx), A3), \
     struct Library *, AMISSL_BASE_NAME, 2524, Amissl)

#define PKCS1_MGF1(___mask, ___len, ___seed, ___seedlen, ___dgst) \
      AROS_LC5(int, PKCS1_MGF1, \
 AROS_LCA(unsigned char *, (___mask), A0), \
 AROS_LCA(long, (___len), D0), \
 AROS_LCA(const unsigned char *, (___seed), A1), \
 AROS_LCA(long, (___seedlen), D1), \
 AROS_LCA(const EVP_MD *, (___dgst), A2), \
     struct Library *, AMISSL_BASE_NAME, 2525, Amissl)

#define RSA_padding_add_X931(___to, ___tlen, ___from, ___flen) \
      AROS_LC4(int, RSA_padding_add_X931, \
 AROS_LCA(unsigned char *, (___to), A0), \
 AROS_LCA(int, (___tlen), D0), \
 AROS_LCA(const unsigned char *, (___from), A1), \
 AROS_LCA(int, (___flen), D1), \
     struct Library *, AMISSL_BASE_NAME, 2526, Amissl)

#define RSA_padding_check_X931(___to, ___tlen, ___from, ___flen, ___num) \
      AROS_LC5(int, RSA_padding_check_X931, \
 AROS_LCA(unsigned char *, (___to), A0), \
 AROS_LCA(int, (___tlen), D0), \
 AROS_LCA(const unsigned char *, (___from), A1), \
 AROS_LCA(int, (___flen), D1), \
 AROS_LCA(int, (___num), D2), \
     struct Library *, AMISSL_BASE_NAME, 2527, Amissl)

#define RSA_X931_hash_id(___nid) \
      AROS_LC1(int, RSA_X931_hash_id, \
 AROS_LCA(int, (___nid), D0), \
     struct Library *, AMISSL_BASE_NAME, 2528, Amissl)

#define RSA_verify_PKCS1_PSS(___rsa, ___mHash, ___Hash, ___EM, ___sLen) \
      AROS_LC5(int, RSA_verify_PKCS1_PSS, \
 AROS_LCA(RSA *, (___rsa), A0), \
 AROS_LCA(const unsigned char *, (___mHash), A1), \
 AROS_LCA(const EVP_MD *, (___Hash), A2), \
 AROS_LCA(const unsigned char *, (___EM), A3), \
 AROS_LCA(int, (___sLen), D0), \
     struct Library *, AMISSL_BASE_NAME, 2529, Amissl)

#define RSA_padding_add_PKCS1_PSS(___rsa, ___EM, ___mHash, ___Hash, ___sLen) \
      AROS_LC5(int, RSA_padding_add_PKCS1_PSS, \
 AROS_LCA(RSA *, (___rsa), A0), \
 AROS_LCA(unsigned char *, (___EM), A1), \
 AROS_LCA(const unsigned char *, (___mHash), A2), \
 AROS_LCA(const EVP_MD *, (___Hash), A3), \
 AROS_LCA(int, (___sLen), D0), \
     struct Library *, AMISSL_BASE_NAME, 2530, Amissl)

#define EVP_sha224() \
      AROS_LC0(const EVP_MD *, EVP_sha224, \
     struct Library *, AMISSL_BASE_NAME, 2531, Amissl)

#define EVP_sha256() \
      AROS_LC0(const EVP_MD *, EVP_sha256, \
     struct Library *, AMISSL_BASE_NAME, 2532, Amissl)

#define EVP_sha384() \
      AROS_LC0(const EVP_MD *, EVP_sha384, \
     struct Library *, AMISSL_BASE_NAME, 2533, Amissl)

#define EVP_sha512() \
      AROS_LC0(const EVP_MD *, EVP_sha512, \
     struct Library *, AMISSL_BASE_NAME, 2534, Amissl)

#define BN_GF2m_add(___r, ___a, ___b) \
      AROS_LC3(int, BN_GF2m_add, \
 AROS_LCA(BIGNUM *, (___r), A0), \
 AROS_LCA(const BIGNUM *, (___a), A1), \
 AROS_LCA(const BIGNUM *, (___b), A2), \
     struct Library *, AMISSL_BASE_NAME, 2535, Amissl)

#define BN_GF2m_arr2poly(___p, ___a) \
      AROS_LC2(int, BN_GF2m_arr2poly, \
 AROS_LCA(const int *, (___p), A0), \
 AROS_LCA(BIGNUM *, (___a), A1), \
     struct Library *, AMISSL_BASE_NAME, 2536, Amissl)

#define BN_GF2m_mod(___r, ___a, ___p) \
      AROS_LC3(int, BN_GF2m_mod, \
 AROS_LCA(BIGNUM *, (___r), A0), \
 AROS_LCA(const BIGNUM *, (___a), A1), \
 AROS_LCA(const BIGNUM *, (___p), A2), \
     struct Library *, AMISSL_BASE_NAME, 2537, Amissl)

#define BN_GF2m_mod_mul(___r, ___a, ___b, ___p, ___ctx) \
      AROS_LC5(int, BN_GF2m_mod_mul, \
 AROS_LCA(BIGNUM *, (___r), A0), \
 AROS_LCA(const BIGNUM *, (___a), A1), \
 AROS_LCA(const BIGNUM *, (___b), A2), \
 AROS_LCA(const BIGNUM *, (___p), A3), \
 AROS_LCA(BN_CTX *, (___ctx), D0), \
     struct Library *, AMISSL_BASE_NAME, 2538, Amissl)

#define BN_GF2m_mod_sqr(___r, ___a, ___p, ___ctx) \
      AROS_LC4(int, BN_GF2m_mod_sqr, \
 AROS_LCA(BIGNUM *, (___r), A0), \
 AROS_LCA(const BIGNUM *, (___a), A1), \
 AROS_LCA(const BIGNUM *, (___p), A2), \
 AROS_LCA(BN_CTX *, (___ctx), A3), \
     struct Library *, AMISSL_BASE_NAME, 2539, Amissl)

#define BN_GF2m_mod_inv(___r, ___b, ___p, ___ctx) \
      AROS_LC4(int, BN_GF2m_mod_inv, \
 AROS_LCA(BIGNUM *, (___r), A0), \
 AROS_LCA(const BIGNUM *, (___b), A1), \
 AROS_LCA(const BIGNUM *, (___p), A2), \
 AROS_LCA(BN_CTX *, (___ctx), A3), \
     struct Library *, AMISSL_BASE_NAME, 2540, Amissl)

#define BN_GF2m_mod_div(___r, ___a, ___b, ___p, ___ctx) \
      AROS_LC5(int, BN_GF2m_mod_div, \
 AROS_LCA(BIGNUM *, (___r), A0), \
 AROS_LCA(const BIGNUM *, (___a), A1), \
 AROS_LCA(const BIGNUM *, (___b), A2), \
 AROS_LCA(const BIGNUM *, (___p), A3), \
 AROS_LCA(BN_CTX *, (___ctx), D0), \
     struct Library *, AMISSL_BASE_NAME, 2541, Amissl)

#define BN_GF2m_mod_exp(___r, ___a, ___b, ___p, ___ctx) \
      AROS_LC5(int, BN_GF2m_mod_exp, \
 AROS_LCA(BIGNUM *, (___r), A0), \
 AROS_LCA(const BIGNUM *, (___a), A1), \
 AROS_LCA(const BIGNUM *, (___b), A2), \
 AROS_LCA(const BIGNUM *, (___p), A3), \
 AROS_LCA(BN_CTX *, (___ctx), D0), \
     struct Library *, AMISSL_BASE_NAME, 2542, Amissl)

#define BN_GF2m_mod_sqrt(___r, ___a, ___p, ___ctx) \
      AROS_LC4(int, BN_GF2m_mod_sqrt, \
 AROS_LCA(BIGNUM *, (___r), A0), \
 AROS_LCA(const BIGNUM *, (___a), A1), \
 AROS_LCA(const BIGNUM *, (___p), A2), \
 AROS_LCA(BN_CTX *, (___ctx), A3), \
     struct Library *, AMISSL_BASE_NAME, 2543, Amissl)

#define BN_GF2m_mod_solve_quad(___r, ___a, ___p, ___ctx) \
      AROS_LC4(int, BN_GF2m_mod_solve_quad, \
 AROS_LCA(BIGNUM *, (___r), A0), \
 AROS_LCA(const BIGNUM *, (___a), A1), \
 AROS_LCA(const BIGNUM *, (___p), A2), \
 AROS_LCA(BN_CTX *, (___ctx), A3), \
     struct Library *, AMISSL_BASE_NAME, 2544, Amissl)

#define BN_generate_prime_ex(___ret, ___bits, ___safe, ___add, ___rem, ___cb) \
      AROS_LC6(int, BN_generate_prime_ex, \
 AROS_LCA(BIGNUM *, (___ret), A0), \
 AROS_LCA(int, (___bits), D0), \
 AROS_LCA(int, (___safe), D1), \
 AROS_LCA(const BIGNUM *, (___add), A1), \
 AROS_LCA(const BIGNUM *, (___rem), A2), \
 AROS_LCA(BN_GENCB *, (___cb), A3), \
     struct Library *, AMISSL_BASE_NAME, 2545, Amissl)

#define BN_is_prime_ex(___p, ___nchecks, ___ctx, ___cb) \
      AROS_LC4(int, BN_is_prime_ex, \
 AROS_LCA(const BIGNUM *, (___p), A0), \
 AROS_LCA(int, (___nchecks), D0), \
 AROS_LCA(BN_CTX *, (___ctx), A1), \
 AROS_LCA(BN_GENCB *, (___cb), A2), \
     struct Library *, AMISSL_BASE_NAME, 2546, Amissl)

#define BN_set_negative(___b, ___n) \
      AROS_LC2(void, BN_set_negative, \
 AROS_LCA(BIGNUM *, (___b), A0), \
 AROS_LCA(int, (___n), D0), \
     struct Library *, AMISSL_BASE_NAME, 2547, Amissl)

#define EC_GROUP_get_degree(___group) \
      AROS_LC1(int, EC_GROUP_get_degree, \
 AROS_LCA(const EC_GROUP *, (___group), A0), \
     struct Library *, AMISSL_BASE_NAME, 2548, Amissl)

#define EC_GF2m_simple_method() \
      AROS_LC0(const EC_METHOD *, EC_GF2m_simple_method, \
     struct Library *, AMISSL_BASE_NAME, 2549, Amissl)

#define EC_GROUP_set_curve_GF2m(___group, ___p, ___a, ___b, ___ctx) \
      AROS_LC5(int, EC_GROUP_set_curve_GF2m, \
 AROS_LCA(EC_GROUP *, (___group), A0), \
 AROS_LCA(const BIGNUM *, (___p), A1), \
 AROS_LCA(const BIGNUM *, (___a), A2), \
 AROS_LCA(const BIGNUM *, (___b), A3), \
 AROS_LCA(BN_CTX *, (___ctx), D0), \
     struct Library *, AMISSL_BASE_NAME, 2550, Amissl)

#define EC_GROUP_get_curve_GF2m(___group, ___p, ___a, ___b, ___ctx) \
      AROS_LC5(int, EC_GROUP_get_curve_GF2m, \
 AROS_LCA(const EC_GROUP *, (___group), A0), \
 AROS_LCA(BIGNUM *, (___p), A1), \
 AROS_LCA(BIGNUM *, (___a), A2), \
 AROS_LCA(BIGNUM *, (___b), A3), \
 AROS_LCA(BN_CTX *, (___ctx), D0), \
     struct Library *, AMISSL_BASE_NAME, 2551, Amissl)

#define EC_POINT_set_affine_coordinates_GF2m(___group, ___point, ___x, ___y, ___ctx) \
      AROS_LC5(int, EC_POINT_set_affine_coordinates_GF2m, \
 AROS_LCA(const EC_GROUP *, (___group), A0), \
 AROS_LCA(EC_POINT *, (___point), A1), \
 AROS_LCA(const BIGNUM *, (___x), A2), \
 AROS_LCA(const BIGNUM *, (___y), A3), \
 AROS_LCA(BN_CTX *, (___ctx), D0), \
     struct Library *, AMISSL_BASE_NAME, 2552, Amissl)

#define EC_POINT_get_affine_coordinates_GF2m(___group, ___point, ___x, ___y, ___ctx) \
      AROS_LC5(int, EC_POINT_get_affine_coordinates_GF2m, \
 AROS_LCA(const EC_GROUP *, (___group), A0), \
 AROS_LCA(const EC_POINT *, (___point), A1), \
 AROS_LCA(BIGNUM *, (___x), A2), \
 AROS_LCA(BIGNUM *, (___y), A3), \
 AROS_LCA(BN_CTX *, (___ctx), D0), \
     struct Library *, AMISSL_BASE_NAME, 2553, Amissl)

#define EC_get_builtin_curves(___r, ___nitems) \
      AROS_LC2(size_t, EC_get_builtin_curves, \
 AROS_LCA(EC_builtin_curve *, (___r), A0), \
 AROS_LCA(size_t, (___nitems), D0), \
     struct Library *, AMISSL_BASE_NAME, 2554, Amissl)

#define EC_GROUP_new_by_curve_name(___nid) \
      AROS_LC1(EC_GROUP *, EC_GROUP_new_by_curve_name, \
 AROS_LCA(int, (___nid), D0), \
     struct Library *, AMISSL_BASE_NAME, 2555, Amissl)

#define EC_GROUP_check(___group, ___ctx) \
      AROS_LC2(int, EC_GROUP_check, \
 AROS_LCA(const EC_GROUP *, (___group), A0), \
 AROS_LCA(BN_CTX *, (___ctx), A1), \
     struct Library *, AMISSL_BASE_NAME, 2556, Amissl)

#define DSA_generate_parameters_ex(___dsa, ___bits, ___seed, ___seed_len, ___counter_ret, ___h_ret, ___cb) \
      AROS_LC7(int, DSA_generate_parameters_ex, \
 AROS_LCA(DSA *, (___dsa), A0), \
 AROS_LCA(int, (___bits), D0), \
 AROS_LCA(const unsigned char *, (___seed), A1), \
 AROS_LCA(int, (___seed_len), D1), \
 AROS_LCA(int *, (___counter_ret), A2), \
 AROS_LCA(unsigned long *, (___h_ret), A3), \
 AROS_LCA(BN_GENCB *, (___cb), D2), \
     struct Library *, AMISSL_BASE_NAME, 2558, Amissl)

#define EC_KEY_new_by_curve_name(___nid) \
      AROS_LC1(EC_KEY *, EC_KEY_new_by_curve_name, \
 AROS_LCA(int, (___nid), D0), \
     struct Library *, AMISSL_BASE_NAME, 2560, Amissl)

#define EC_KEY_generate_key(___key) \
      AROS_LC1(int, EC_KEY_generate_key, \
 AROS_LCA(EC_KEY *, (___key), A0), \
     struct Library *, AMISSL_BASE_NAME, 2561, Amissl)

#define EC_KEY_free(___key) \
      AROS_LC1(void, EC_KEY_free, \
 AROS_LCA(EC_KEY *, (___key), A0), \
     struct Library *, AMISSL_BASE_NAME, 2562, Amissl)

#define ECDSA_SIG_free(___a) \
      AROS_LC1(void, ECDSA_SIG_free, \
 AROS_LCA(ECDSA_SIG *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 2563, Amissl)

#define ECDSA_do_sign(___dgst, ___dlen, ___eckey) \
      AROS_LC3(ECDSA_SIG *, ECDSA_do_sign, \
 AROS_LCA(const unsigned char *, (___dgst), A0), \
 AROS_LCA(int, (___dlen), D0), \
 AROS_LCA(EC_KEY *, (___eckey), A1), \
     struct Library *, AMISSL_BASE_NAME, 2564, Amissl)

#define ECDSA_do_verify(___dgst, ___dgst_len, ___sig, ___eckey) \
      AROS_LC4(int, ECDSA_do_verify, \
 AROS_LCA(const unsigned char *, (___dgst), A0), \
 AROS_LCA(int, (___dgst_len), D0), \
 AROS_LCA(const ECDSA_SIG *, (___sig), A1), \
 AROS_LCA(EC_KEY *, (___eckey), A2), \
     struct Library *, AMISSL_BASE_NAME, 2565, Amissl)

#define EC_KEY_new() \
      AROS_LC0(EC_KEY *, EC_KEY_new, \
     struct Library *, AMISSL_BASE_NAME, 2566, Amissl)

#define EC_KEY_set_group(___eckey, ___group) \
      AROS_LC2(int, EC_KEY_set_group, \
 AROS_LCA(EC_KEY *, (___eckey), A0), \
 AROS_LCA(const EC_GROUP *, (___group), A1), \
     struct Library *, AMISSL_BASE_NAME, 2567, Amissl)

#define EC_KEY_get0_group(___key) \
      AROS_LC1(const EC_GROUP *, EC_KEY_get0_group, \
 AROS_LCA(const EC_KEY *, (___key), A0), \
     struct Library *, AMISSL_BASE_NAME, 2568, Amissl)

#define EC_KEY_check_key(___eckey) \
      AROS_LC1(int, EC_KEY_check_key, \
 AROS_LCA(const EC_KEY *, (___eckey), A0), \
     struct Library *, AMISSL_BASE_NAME, 2569, Amissl)

#define ECDSA_size(___eckey) \
      AROS_LC1(int, ECDSA_size, \
 AROS_LCA(const EC_KEY *, (___eckey), A0), \
     struct Library *, AMISSL_BASE_NAME, 2570, Amissl)

#define ECDSA_sign(___type, ___dgst, ___dgstlen, ___sig, ___siglen, ___eckey) \
      AROS_LC6(int, ECDSA_sign, \
 AROS_LCA(int, (___type), D0), \
 AROS_LCA(const unsigned char *, (___dgst), A0), \
 AROS_LCA(int, (___dgstlen), D1), \
 AROS_LCA(unsigned char *, (___sig), A1), \
 AROS_LCA(unsigned int *, (___siglen), A2), \
 AROS_LCA(EC_KEY *, (___eckey), A3), \
     struct Library *, AMISSL_BASE_NAME, 2571, Amissl)

#define ECDSA_verify(___type, ___dgst, ___dgstlen, ___sig, ___siglen, ___eckey) \
      AROS_LC6(int, ECDSA_verify, \
 AROS_LCA(int, (___type), D0), \
 AROS_LCA(const unsigned char *, (___dgst), A0), \
 AROS_LCA(int, (___dgstlen), D1), \
 AROS_LCA(const unsigned char *, (___sig), A1), \
 AROS_LCA(int, (___siglen), D2), \
 AROS_LCA(EC_KEY *, (___eckey), A2), \
     struct Library *, AMISSL_BASE_NAME, 2572, Amissl)

#define d2i_ECDSA_SIG(___v, ___pp, ___len) \
      AROS_LC3(ECDSA_SIG *, d2i_ECDSA_SIG, \
 AROS_LCA(ECDSA_SIG **, (___v), A0), \
 AROS_LCA(const unsigned char **, (___pp), A1), \
 AROS_LCA(long, (___len), A2), \
     struct Library *, AMISSL_BASE_NAME, 2573, Amissl)

#define i2d_ECDSA_SIG(___a, ___pp) \
      AROS_LC2(int, i2d_ECDSA_SIG, \
 AROS_LCA(const ECDSA_SIG *, (___a), A0), \
 AROS_LCA(unsigned char **, (___pp), A1), \
     struct Library *, AMISSL_BASE_NAME, 2574, Amissl)

#define DH_generate_parameters_ex(___ret, ___prime_len, ___generator, ___cb) \
      AROS_LC4(int, DH_generate_parameters_ex, \
 AROS_LCA(DH *, (___ret), A0), \
 AROS_LCA(int, (___prime_len), D0), \
 AROS_LCA(int, (___generator), D1), \
 AROS_LCA(BN_GENCB *, (___cb), A1), \
     struct Library *, AMISSL_BASE_NAME, 2575, Amissl)

#define EC_METHOD_get_field_type(___meth) \
      AROS_LC1(int, EC_METHOD_get_field_type, \
 AROS_LCA(const EC_METHOD *, (___meth), A0), \
     struct Library *, AMISSL_BASE_NAME, 2576, Amissl)

#define EC_KEY_get0_public_key(___eckey) \
      AROS_LC1(const EC_POINT *, EC_KEY_get0_public_key, \
 AROS_LCA(const EC_KEY *, (___eckey), A0), \
     struct Library *, AMISSL_BASE_NAME, 2577, Amissl)

#define ECDH_compute_key(___out, ___outlen, ___pub_key, ___eckey, ___KDF) \
      AROS_LC5(int, ECDH_compute_key, \
 AROS_LCA(void *, (___out), A0), \
 AROS_LCA(size_t, (___outlen), D0), \
 AROS_LCA(const EC_POINT *, (___pub_key), A1), \
 AROS_LCA(const EC_KEY *, (___eckey), A2), \
 AROS_LCA(void *(*)(const void *,size_t,void *,size_t *), (___KDF), A3), \
     struct Library *, AMISSL_BASE_NAME, 2578, Amissl)

#define EC_KEY_get0_private_key(___eckey) \
      AROS_LC1(const BIGNUM *, EC_KEY_get0_private_key, \
 AROS_LCA(const EC_KEY *, (___eckey), A0), \
     struct Library *, AMISSL_BASE_NAME, 2579, Amissl)

#define ENGINE_get_first() \
      AROS_LC0(ENGINE *, ENGINE_get_first, \
     struct Library *, AMISSL_BASE_NAME, 2580, Amissl)

#define ENGINE_get_id(___e) \
      AROS_LC1(const char *, ENGINE_get_id, \
 AROS_LCA(const ENGINE *, (___e), A0), \
     struct Library *, AMISSL_BASE_NAME, 2581, Amissl)

#define ENGINE_get_name(___e) \
      AROS_LC1(const char *, ENGINE_get_name, \
 AROS_LCA(const ENGINE *, (___e), A0), \
     struct Library *, AMISSL_BASE_NAME, 2582, Amissl)

#define ENGINE_get_next(___e) \
      AROS_LC1(ENGINE *, ENGINE_get_next, \
 AROS_LCA(ENGINE *, (___e), A0), \
     struct Library *, AMISSL_BASE_NAME, 2583, Amissl)

#define ENGINE_free(___e) \
      AROS_LC1(int, ENGINE_free, \
 AROS_LCA(ENGINE *, (___e), A0), \
     struct Library *, AMISSL_BASE_NAME, 2584, Amissl)

#define ENGINE_new() \
      AROS_LC0(ENGINE *, ENGINE_new, \
     struct Library *, AMISSL_BASE_NAME, 2585, Amissl)

#define ENGINE_set_id(___e, ___id) \
      AROS_LC2(int, ENGINE_set_id, \
 AROS_LCA(ENGINE *, (___e), A0), \
 AROS_LCA(const char *, (___id), A1), \
     struct Library *, AMISSL_BASE_NAME, 2586, Amissl)

#define ENGINE_set_name(___e, ___name) \
      AROS_LC2(int, ENGINE_set_name, \
 AROS_LCA(ENGINE *, (___e), A0), \
 AROS_LCA(const char *, (___name), A1), \
     struct Library *, AMISSL_BASE_NAME, 2587, Amissl)

#define ENGINE_add(___e) \
      AROS_LC1(int, ENGINE_add, \
 AROS_LCA(ENGINE *, (___e), A0), \
     struct Library *, AMISSL_BASE_NAME, 2588, Amissl)

#define ENGINE_remove(___e) \
      AROS_LC1(int, ENGINE_remove, \
 AROS_LCA(ENGINE *, (___e), A0), \
     struct Library *, AMISSL_BASE_NAME, 2589, Amissl)

#define ENGINE_load_builtin_engines() \
      AROS_LC0(void, ENGINE_load_builtin_engines, \
     struct Library *, AMISSL_BASE_NAME, 2590, Amissl)

#define ENGINE_register_all_ciphers() \
      AROS_LC0(void, ENGINE_register_all_ciphers, \
     struct Library *, AMISSL_BASE_NAME, 2591, Amissl)

#define EVP_CIPHER_get_nid(___cipher) \
      AROS_LC1(int, EVP_CIPHER_get_nid, \
 AROS_LCA(const EVP_CIPHER *, (___cipher), A0), \
     struct Library *, AMISSL_BASE_NAME, 2592, Amissl)

#define EVP_MD_get_type(___md) \
      AROS_LC1(int, EVP_MD_get_type, \
 AROS_LCA(const EVP_MD *, (___md), A0), \
     struct Library *, AMISSL_BASE_NAME, 2593, Amissl)

#define ENGINE_register_all_digests() \
      AROS_LC0(void, ENGINE_register_all_digests, \
     struct Library *, AMISSL_BASE_NAME, 2594, Amissl)

#define BIO_test_flags(___b, ___flags) \
      AROS_LC2(int, BIO_test_flags, \
 AROS_LCA(const BIO *, (___b), A0), \
 AROS_LCA(int, (___flags), D0), \
     struct Library *, AMISSL_BASE_NAME, 2595, Amissl)

#define SSL_COMP_get_compression_methods() \
      AROS_LC0(STACK_OF(SSL_COMP) *, SSL_COMP_get_compression_methods, \
     struct Library *, AMISSL_BASE_NAME, 2596, Amissl)

#define RSA_generate_key_ex(___rsa, ___bits, ___e, ___cb) \
      AROS_LC4(int, RSA_generate_key_ex, \
 AROS_LCA(RSA *, (___rsa), A0), \
 AROS_LCA(int, (___bits), D0), \
 AROS_LCA(BIGNUM *, (___e), A1), \
 AROS_LCA(BN_GENCB *, (___cb), A2), \
     struct Library *, AMISSL_BASE_NAME, 2597, Amissl)

#define X509_VERIFY_PARAM_free(___param) \
      AROS_LC1(void, X509_VERIFY_PARAM_free, \
 AROS_LCA(X509_VERIFY_PARAM *, (___param), A0), \
     struct Library *, AMISSL_BASE_NAME, 2598, Amissl)

#define X509_STORE_set1_param(___xs, ___pm) \
      AROS_LC2(int, X509_STORE_set1_param, \
 AROS_LCA(X509_STORE *, (___xs), A0), \
 AROS_LCA(const X509_VERIFY_PARAM *, (___pm), A1), \
     struct Library *, AMISSL_BASE_NAME, 2599, Amissl)

#define ASN1_generate_nconf(___str, ___nconf) \
      AROS_LC2(ASN1_TYPE *, ASN1_generate_nconf, \
 AROS_LCA(const char *, (___str), A0), \
 AROS_LCA(CONF *, (___nconf), A1), \
     struct Library *, AMISSL_BASE_NAME, 2600, Amissl)

#define PEM_read_bio_ECPKParameters(___bp, ___x, ___cb, ___u) \
      AROS_LC4(EC_GROUP *, PEM_read_bio_ECPKParameters, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(EC_GROUP **, (___x), A1), \
 AROS_LCA(pem_password_cb *, (___cb), A2), \
 AROS_LCA(void *, (___u), A3), \
     struct Library *, AMISSL_BASE_NAME, 2601, Amissl)

#define EC_KEY_dup(___ec_key) \
      AROS_LC1(EC_KEY *, EC_KEY_dup, \
 AROS_LCA(const EC_KEY *, (___ec_key), A0), \
     struct Library *, AMISSL_BASE_NAME, 2602, Amissl)

#define BIO_set_callback(___b, ___callback) \
      AROS_LC2(void, BIO_set_callback, \
 AROS_LCA(BIO *, (___b), A0), \
 AROS_LCA(BIO_callback_fn, (___callback), A1), \
     struct Library *, AMISSL_BASE_NAME, 2603, Amissl)

#define BIO_set_callback_arg(___b, ___arg) \
      AROS_LC2(void, BIO_set_callback_arg, \
 AROS_LCA(BIO *, (___b), A0), \
 AROS_LCA(char *, (___arg), A1), \
     struct Library *, AMISSL_BASE_NAME, 2604, Amissl)

#define EVP_MD_CTX_set_flags(___ctx, ___flags) \
      AROS_LC2(void, EVP_MD_CTX_set_flags, \
 AROS_LCA(EVP_MD_CTX *, (___ctx), A0), \
 AROS_LCA(int, (___flags), D0), \
     struct Library *, AMISSL_BASE_NAME, 2605, Amissl)

#define BIO_set_flags(___b, ___flags) \
      AROS_LC2(void, BIO_set_flags, \
 AROS_LCA(BIO *, (___b), A0), \
 AROS_LCA(int, (___flags), D0), \
     struct Library *, AMISSL_BASE_NAME, 2606, Amissl)

#define EVP_CIPHER_CTX_set_flags(___ctx, ___flags) \
      AROS_LC2(void, EVP_CIPHER_CTX_set_flags, \
 AROS_LCA(EVP_CIPHER_CTX *, (___ctx), A0), \
 AROS_LCA(int, (___flags), D0), \
     struct Library *, AMISSL_BASE_NAME, 2607, Amissl)

#define EVP_CIPHER_get_iv_length(___cipher) \
      AROS_LC1(int, EVP_CIPHER_get_iv_length, \
 AROS_LCA(const EVP_CIPHER *, (___cipher), A0), \
     struct Library *, AMISSL_BASE_NAME, 2608, Amissl)

#define X509_REQ_check_private_key(___req, ___pkey) \
      AROS_LC2(int, X509_REQ_check_private_key, \
 AROS_LCA(const X509_REQ *, (___req), A0), \
 AROS_LCA(EVP_PKEY *, (___pkey), A1), \
     struct Library *, AMISSL_BASE_NAME, 2609, Amissl)

#define PEM_read_bio_EC_PUBKEY(___bp, ___x, ___cb, ___u) \
      AROS_LC4(EC_KEY *, PEM_read_bio_EC_PUBKEY, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(EC_KEY **, (___x), A1), \
 AROS_LCA(pem_password_cb *, (___cb), A2), \
 AROS_LCA(void *, (___u), A3), \
     struct Library *, AMISSL_BASE_NAME, 2610, Amissl)

#define PEM_read_bio_ECPrivateKey(___bp, ___x, ___cb, ___u) \
      AROS_LC4(EC_KEY *, PEM_read_bio_ECPrivateKey, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(EC_KEY **, (___x), A1), \
 AROS_LCA(pem_password_cb *, (___cb), A2), \
 AROS_LCA(void *, (___u), A3), \
     struct Library *, AMISSL_BASE_NAME, 2611, Amissl)

#define PEM_write_bio_EC_PUBKEY(___bp, ___x) \
      AROS_LC2(int, PEM_write_bio_EC_PUBKEY, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(const EC_KEY *, (___x), A1), \
     struct Library *, AMISSL_BASE_NAME, 2612, Amissl)

#define d2i_EC_PUBKEY_bio(___bp, ___eckey) \
      AROS_LC2(EC_KEY *, d2i_EC_PUBKEY_bio, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(EC_KEY **, (___eckey), A1), \
     struct Library *, AMISSL_BASE_NAME, 2613, Amissl)

#define EC_KEY_set_asn1_flag(___key, ___flag) \
      AROS_LC2(void, EC_KEY_set_asn1_flag, \
 AROS_LCA(EC_KEY *, (___key), A0), \
 AROS_LCA(int, (___flag), D0), \
     struct Library *, AMISSL_BASE_NAME, 2614, Amissl)

#define EC_KEY_set_conv_form(___key, ___cform) \
      AROS_LC2(void, EC_KEY_set_conv_form, \
 AROS_LCA(EC_KEY *, (___key), A0), \
 AROS_LCA(point_conversion_form_t, (___cform), D0), \
     struct Library *, AMISSL_BASE_NAME, 2615, Amissl)

#define EC_KEY_print(___bp, ___x, ___off) \
      AROS_LC3(int, EC_KEY_print, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(const EC_KEY *, (___x), A1), \
 AROS_LCA(int, (___off), D0), \
     struct Library *, AMISSL_BASE_NAME, 2616, Amissl)

#define d2i_ECPrivateKey_bio(___bp, ___eckey) \
      AROS_LC2(EC_KEY *, d2i_ECPrivateKey_bio, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(EC_KEY **, (___eckey), A1), \
     struct Library *, AMISSL_BASE_NAME, 2617, Amissl)

#define i2d_EC_PUBKEY_bio(___bp, ___eckey) \
      AROS_LC2(int, i2d_EC_PUBKEY_bio, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(const EC_KEY *, (___eckey), A1), \
     struct Library *, AMISSL_BASE_NAME, 2618, Amissl)

#define PEM_write_bio_ECPrivateKey(___bp, ___x, ___enc, ___kstr, ___klen, ___cb, ___u) \
      AROS_LC7(int, PEM_write_bio_ECPrivateKey, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(const EC_KEY *, (___x), A1), \
 AROS_LCA(const EVP_CIPHER *, (___enc), A2), \
 AROS_LCA(const unsigned char *, (___kstr), A3), \
 AROS_LCA(int, (___klen), D0), \
 AROS_LCA(pem_password_cb *, (___cb), D1), \
 AROS_LCA(void *, (___u), D2), \
     struct Library *, AMISSL_BASE_NAME, 2619, Amissl)

#define PEM_write_bio_ECPKParameters(___bp, ___x) \
      AROS_LC2(int, PEM_write_bio_ECPKParameters, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(const EC_GROUP *, (___x), A1), \
     struct Library *, AMISSL_BASE_NAME, 2620, Amissl)

#define i2d_ECPrivateKey_bio(___bp, ___eckey) \
      AROS_LC2(int, i2d_ECPrivateKey_bio, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(const EC_KEY *, (___eckey), A1), \
     struct Library *, AMISSL_BASE_NAME, 2621, Amissl)

#define i2d_ECPKParameters(___a, ___out) \
      AROS_LC2(int, i2d_ECPKParameters, \
 AROS_LCA(const EC_GROUP *, (___a), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 2622, Amissl)

#define EC_GROUP_set_asn1_flag(___group, ___flag) \
      AROS_LC2(void, EC_GROUP_set_asn1_flag, \
 AROS_LCA(EC_GROUP *, (___group), A0), \
 AROS_LCA(int, (___flag), D0), \
     struct Library *, AMISSL_BASE_NAME, 2623, Amissl)

#define EC_GROUP_set_point_conversion_form(___group, ___form) \
      AROS_LC2(void, EC_GROUP_set_point_conversion_form, \
 AROS_LCA(EC_GROUP *, (___group), A0), \
 AROS_LCA(point_conversion_form_t, (___form), D0), \
     struct Library *, AMISSL_BASE_NAME, 2624, Amissl)

#define EC_GROUP_get_point_conversion_form(___group) \
      AROS_LC1(point_conversion_form_t, EC_GROUP_get_point_conversion_form, \
 AROS_LCA(const EC_GROUP *, (___group), A0), \
     struct Library *, AMISSL_BASE_NAME, 2625, Amissl)

#define ECPKParameters_print(___bp, ___x, ___off) \
      AROS_LC3(int, ECPKParameters_print, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(const EC_GROUP *, (___x), A1), \
 AROS_LCA(int, (___off), D0), \
     struct Library *, AMISSL_BASE_NAME, 2626, Amissl)

#define EC_GROUP_set_seed(___group, ___p, ___len) \
      AROS_LC3(size_t, EC_GROUP_set_seed, \
 AROS_LCA(EC_GROUP *, (___group), A0), \
 AROS_LCA(const unsigned char *, (___p), A1), \
 AROS_LCA(size_t, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 2627, Amissl)

#define d2i_ECPKParameters(___a, ___in, ___len) \
      AROS_LC3(EC_GROUP *, d2i_ECPKParameters, \
 AROS_LCA(EC_GROUP **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 2628, Amissl)

#define EC_POINT_point2bn(___group, ___point, ___form, ___ret, ___ctx) \
      AROS_LC5(BIGNUM *, EC_POINT_point2bn, \
 AROS_LCA(const EC_GROUP *, (___group), A0), \
 AROS_LCA(const EC_POINT *, (___point), A1), \
 AROS_LCA(point_conversion_form_t, (___form), D0), \
 AROS_LCA(BIGNUM *, (___ret), A2), \
 AROS_LCA(BN_CTX *, (___ctx), A3), \
     struct Library *, AMISSL_BASE_NAME, 2629, Amissl)

#define X509_get1_ocsp(___x) \
      AROS_LC1(STACK_OF(OPENSSL_STRING) *, X509_get1_ocsp, \
 AROS_LCA(X509 *, (___x), A0), \
     struct Library *, AMISSL_BASE_NAME, 2630, Amissl)

#define SSL_get_servername(___s, ___type) \
      AROS_LC2(const char *, SSL_get_servername, \
 AROS_LCA(const SSL *, (___s), A0), \
 AROS_LCA(const int, (___type), D0), \
     struct Library *, AMISSL_BASE_NAME, 2631, Amissl)

#define SSL_set_SSL_CTX(___ssl, ___ctx) \
      AROS_LC2(SSL_CTX *, SSL_set_SSL_CTX, \
 AROS_LCA(SSL *, (___ssl), A0), \
 AROS_LCA(SSL_CTX *, (___ctx), A1), \
     struct Library *, AMISSL_BASE_NAME, 2632, Amissl)

#define SSL_CTX_set_cookie_generate_cb(___ctx, ___app_gen_cookie_cb) \
      AROS_LC2(void, SSL_CTX_set_cookie_generate_cb, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
 AROS_LCA(int (*)(SSL *ssl,unsigned char *cookie,unsigned int *cookie_len), (___app_gen_cookie_cb), A1), \
     struct Library *, AMISSL_BASE_NAME, 2633, Amissl)

#define SSL_CTX_set_cookie_verify_cb(___ctx, ___app_verify_cookie_cb) \
      AROS_LC2(void, SSL_CTX_set_cookie_verify_cb, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
 AROS_LCA(int (*)(SSL *,const unsigned char *,unsigned int), (___app_verify_cookie_cb), A1), \
     struct Library *, AMISSL_BASE_NAME, 2634, Amissl)

#define SSL_CTX_set_info_callback(___ctx, ___cb) \
      AROS_LC2(void, SSL_CTX_set_info_callback, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
 AROS_LCA(void (*)(const SSL *ssl,int type,int val), (___cb), A1), \
     struct Library *, AMISSL_BASE_NAME, 2635, Amissl)

#define BIO_new_dgram(___fd, ___close_flag) \
      AROS_LC2(BIO *, BIO_new_dgram, \
 AROS_LCA(int, (___fd), D0), \
 AROS_LCA(int, (___close_flag), D1), \
     struct Library *, AMISSL_BASE_NAME, 2637, Amissl)

#define SSL_get_servername_type(___s) \
      AROS_LC1(int, SSL_get_servername_type, \
 AROS_LCA(const SSL *, (___s), A0), \
     struct Library *, AMISSL_BASE_NAME, 2638, Amissl)

#define SSL_get_current_compression(___s) \
      AROS_LC1(const COMP_METHOD *, SSL_get_current_compression, \
 AROS_LCA(const SSL *, (___s), A0), \
     struct Library *, AMISSL_BASE_NAME, 2639, Amissl)

#define SSL_get_current_expansion(___s) \
      AROS_LC1(const COMP_METHOD *, SSL_get_current_expansion, \
 AROS_LCA(const SSL *, (___s), A0), \
     struct Library *, AMISSL_BASE_NAME, 2640, Amissl)

#define SSL_COMP_get_name(___comp) \
      AROS_LC1(const char *, SSL_COMP_get_name, \
 AROS_LCA(const COMP_METHOD *, (___comp), A0), \
     struct Library *, AMISSL_BASE_NAME, 2641, Amissl)

#define ENGINE_by_id(___id) \
      AROS_LC1(ENGINE *, ENGINE_by_id, \
 AROS_LCA(const char *, (___id), A0), \
     struct Library *, AMISSL_BASE_NAME, 2642, Amissl)

#define SSL_CTX_set_client_cert_engine(___ctx, ___e) \
      AROS_LC2(int, SSL_CTX_set_client_cert_engine, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
 AROS_LCA(ENGINE *, (___e), A1), \
     struct Library *, AMISSL_BASE_NAME, 2643, Amissl)

#define SHA256(___d, ___n, ___md) \
      AROS_LC3(unsigned char *, SHA256, \
 AROS_LCA(const unsigned char *, (___d), A0), \
 AROS_LCA(size_t, (___n), D0), \
 AROS_LCA(unsigned char *, (___md), A1), \
     struct Library *, AMISSL_BASE_NAME, 2646, Amissl)

#define SHA512(___d, ___n, ___md) \
      AROS_LC3(unsigned char *, SHA512, \
 AROS_LCA(const unsigned char *, (___d), A0), \
 AROS_LCA(size_t, (___n), D0), \
 AROS_LCA(unsigned char *, (___md), A1), \
     struct Library *, AMISSL_BASE_NAME, 2647, Amissl)

#define AES_ige_encrypt(___in, ___out, ___length, ___key, ___ivec, ___enc) \
      AROS_LC6(void, AES_ige_encrypt, \
 AROS_LCA(const unsigned char *, (___in), A0), \
 AROS_LCA(unsigned char *, (___out), A1), \
 AROS_LCA(size_t, (___length), D0), \
 AROS_LCA(const AES_KEY *, (___key), A2), \
 AROS_LCA(unsigned char *, (___ivec), A3), \
 AROS_LCA(const int, (___enc), D1), \
     struct Library *, AMISSL_BASE_NAME, 2648, Amissl)

#define EC_KEY_precompute_mult(___key, ___ctx) \
      AROS_LC2(int, EC_KEY_precompute_mult, \
 AROS_LCA(EC_KEY *, (___key), A0), \
 AROS_LCA(BN_CTX *, (___ctx), A1), \
     struct Library *, AMISSL_BASE_NAME, 2649, Amissl)

#define ENGINE_load_private_key(___e, ___key_id, ___ui_method, ___callback_data) \
      AROS_LC4(EVP_PKEY *, ENGINE_load_private_key, \
 AROS_LCA(ENGINE *, (___e), A0), \
 AROS_LCA(const char *, (___key_id), A1), \
 AROS_LCA(UI_METHOD *, (___ui_method), A2), \
 AROS_LCA(void *, (___callback_data), A3), \
     struct Library *, AMISSL_BASE_NAME, 2650, Amissl)

#define ENGINE_load_public_key(___e, ___key_id, ___ui_method, ___callback_data) \
      AROS_LC4(EVP_PKEY *, ENGINE_load_public_key, \
 AROS_LCA(ENGINE *, (___e), A0), \
 AROS_LCA(const char *, (___key_id), A1), \
 AROS_LCA(UI_METHOD *, (___ui_method), A2), \
 AROS_LCA(void *, (___callback_data), A3), \
     struct Library *, AMISSL_BASE_NAME, 2651, Amissl)

#define ENGINE_ctrl_cmd(___e, ___cmd_name, ___i, ___p, ___f, ___cmd_optional) \
      AROS_LC6(int, ENGINE_ctrl_cmd, \
 AROS_LCA(ENGINE *, (___e), A0), \
 AROS_LCA(const char *, (___cmd_name), A1), \
 AROS_LCA(long, (___i), A2), \
 AROS_LCA(void *, (___p), A3), \
 AROS_LCA(void (*)(void), (___f), D0), \
 AROS_LCA(int, (___cmd_optional), D1), \
     struct Library *, AMISSL_BASE_NAME, 2652, Amissl)

#define ENGINE_set_default(___e, ___flags) \
      AROS_LC2(int, ENGINE_set_default, \
 AROS_LCA(ENGINE *, (___e), A0), \
 AROS_LCA(unsigned int, (___flags), D0), \
     struct Library *, AMISSL_BASE_NAME, 2653, Amissl)

#define ENGINE_ctrl(___e, ___cmd, ___i, ___p, ___f) \
      AROS_LC5(int, ENGINE_ctrl, \
 AROS_LCA(ENGINE *, (___e), A0), \
 AROS_LCA(int, (___cmd), D0), \
 AROS_LCA(long, (___i), D1), \
 AROS_LCA(void *, (___p), A1), \
 AROS_LCA(void (*)(void), (___f), A2), \
     struct Library *, AMISSL_BASE_NAME, 2654, Amissl)

#define ENGINE_register_all_complete() \
      AROS_LC0(int, ENGINE_register_all_complete, \
     struct Library *, AMISSL_BASE_NAME, 2655, Amissl)

#define ENGINE_ctrl_cmd_string(___e, ___cmd_name, ___arg, ___cmd_optional) \
      AROS_LC4(int, ENGINE_ctrl_cmd_string, \
 AROS_LCA(ENGINE *, (___e), A0), \
 AROS_LCA(const char *, (___cmd_name), A1), \
 AROS_LCA(const char *, (___arg), A2), \
 AROS_LCA(int, (___cmd_optional), D0), \
     struct Library *, AMISSL_BASE_NAME, 2656, Amissl)

#define X509_VERIFY_PARAM_add0_policy(___param, ___policy) \
      AROS_LC2(int, X509_VERIFY_PARAM_add0_policy, \
 AROS_LCA(X509_VERIFY_PARAM *, (___param), A0), \
 AROS_LCA(ASN1_OBJECT *, (___policy), A1), \
     struct Library *, AMISSL_BASE_NAME, 2657, Amissl)

#define X509_VERIFY_PARAM_set_purpose(___param, ___purpose) \
      AROS_LC2(int, X509_VERIFY_PARAM_set_purpose, \
 AROS_LCA(X509_VERIFY_PARAM *, (___param), A0), \
 AROS_LCA(int, (___purpose), D0), \
     struct Library *, AMISSL_BASE_NAME, 2658, Amissl)

#define X509_VERIFY_PARAM_set_flags(___param, ___flags) \
      AROS_LC2(int, X509_VERIFY_PARAM_set_flags, \
 AROS_LCA(X509_VERIFY_PARAM *, (___param), A0), \
 AROS_LCA(unsigned long, (___flags), D0), \
     struct Library *, AMISSL_BASE_NAME, 2659, Amissl)

#define X509_VERIFY_PARAM_new() \
      AROS_LC0(X509_VERIFY_PARAM *, X509_VERIFY_PARAM_new, \
     struct Library *, AMISSL_BASE_NAME, 2660, Amissl)

#define X509_POLICY_NODE_print(___out, ___node, ___indent) \
      AROS_LC3(void, X509_POLICY_NODE_print, \
 AROS_LCA(BIO *, (___out), A0), \
 AROS_LCA(X509_POLICY_NODE *, (___node), A1), \
 AROS_LCA(int, (___indent), D0), \
     struct Library *, AMISSL_BASE_NAME, 2661, Amissl)

#define X509_STORE_CTX_get0_policy_tree(___ctx) \
      AROS_LC1(X509_POLICY_TREE *, X509_STORE_CTX_get0_policy_tree, \
 AROS_LCA(const X509_STORE_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 2662, Amissl)

#define X509_STORE_CTX_get_explicit_policy(___ctx) \
      AROS_LC1(int, X509_STORE_CTX_get_explicit_policy, \
 AROS_LCA(const X509_STORE_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 2663, Amissl)

#define X509_policy_tree_get0_policies(___tree) \
      AROS_LC1(STACK_OF(X509_POLICY_NODE) *, X509_policy_tree_get0_policies, \
 AROS_LCA(const X509_POLICY_TREE *, (___tree), A0), \
     struct Library *, AMISSL_BASE_NAME, 2664, Amissl)

#define X509_policy_tree_get0_user_policies(___tree) \
      AROS_LC1(STACK_OF(X509_POLICY_NODE) *, X509_policy_tree_get0_user_policies, \
 AROS_LCA(const X509_POLICY_TREE *, (___tree), A0), \
     struct Library *, AMISSL_BASE_NAME, 2665, Amissl)

#define BIO_get_callback_arg(___b) \
      AROS_LC1(char *, BIO_get_callback_arg, \
 AROS_LCA(const BIO *, (___b), A0), \
     struct Library *, AMISSL_BASE_NAME, 2666, Amissl)

#define EVP_PKEY_add1_attr_by_NID(___key, ___nid, ___type, ___bytes, ___len) \
      AROS_LC5(int, EVP_PKEY_add1_attr_by_NID, \
 AROS_LCA(EVP_PKEY *, (___key), A0), \
 AROS_LCA(int, (___nid), D0), \
 AROS_LCA(int, (___type), D1), \
 AROS_LCA(const unsigned char *, (___bytes), A1), \
 AROS_LCA(int, (___len), D2), \
     struct Library *, AMISSL_BASE_NAME, 2667, Amissl)

#define ENGINE_get_RSA(___e) \
      AROS_LC1(const RSA_METHOD *, ENGINE_get_RSA, \
 AROS_LCA(const ENGINE *, (___e), A0), \
     struct Library *, AMISSL_BASE_NAME, 2668, Amissl)

#define ENGINE_get_DSA(___e) \
      AROS_LC1(const DSA_METHOD *, ENGINE_get_DSA, \
 AROS_LCA(const ENGINE *, (___e), A0), \
     struct Library *, AMISSL_BASE_NAME, 2669, Amissl)

#define ENGINE_get_DH(___e) \
      AROS_LC1(const DH_METHOD *, ENGINE_get_DH, \
 AROS_LCA(const ENGINE *, (___e), A0), \
     struct Library *, AMISSL_BASE_NAME, 2670, Amissl)

#define ENGINE_get_RAND(___e) \
      AROS_LC1(const RAND_METHOD *, ENGINE_get_RAND, \
 AROS_LCA(const ENGINE *, (___e), A0), \
     struct Library *, AMISSL_BASE_NAME, 2671, Amissl)

#define ENGINE_get_ciphers(___e) \
      AROS_LC1(ENGINE_CIPHERS_PTR, ENGINE_get_ciphers, \
 AROS_LCA(const ENGINE *, (___e), A0), \
     struct Library *, AMISSL_BASE_NAME, 2672, Amissl)

#define ENGINE_get_digests(___e) \
      AROS_LC1(ENGINE_DIGESTS_PTR, ENGINE_get_digests, \
 AROS_LCA(const ENGINE *, (___e), A0), \
     struct Library *, AMISSL_BASE_NAME, 2673, Amissl)

#define ENGINE_init(___e) \
      AROS_LC1(int, ENGINE_init, \
 AROS_LCA(ENGINE *, (___e), A0), \
     struct Library *, AMISSL_BASE_NAME, 2674, Amissl)

#define ENGINE_finish(___e) \
      AROS_LC1(int, ENGINE_finish, \
 AROS_LCA(ENGINE *, (___e), A0), \
     struct Library *, AMISSL_BASE_NAME, 2675, Amissl)

#define OCSP_sendreq_new(___io, ___path, ___req, ___maxline) \
      AROS_LC4(OSSL_HTTP_REQ_CTX *, OCSP_sendreq_new, \
 AROS_LCA(BIO *, (___io), A0), \
 AROS_LCA(const char *, (___path), A1), \
 AROS_LCA(const OCSP_REQUEST *, (___req), A2), \
 AROS_LCA(int, (___maxline), A3), \
     struct Library *, AMISSL_BASE_NAME, 2676, Amissl)

#define OBSOLETE_OCSP_sendreq_nbio(___presp, ___rctx) \
      AROS_LC2(int, OBSOLETE_OCSP_sendreq_nbio, \
 AROS_LCA(OCSP_RESPONSE **, (___presp), A0), \
 AROS_LCA(OSSL_HTTP_REQ_CTX *, (___rctx), A1), \
     struct Library *, AMISSL_BASE_NAME, 2677, Amissl)

#define OSSL_HTTP_REQ_CTX_free(___rctx) \
      AROS_LC1(void, OSSL_HTTP_REQ_CTX_free, \
 AROS_LCA(OSSL_HTTP_REQ_CTX *, (___rctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 2678, Amissl)

#define SSL_CTX_use_psk_identity_hint(___ctx, ___identity_hint) \
      AROS_LC2(int, SSL_CTX_use_psk_identity_hint, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
 AROS_LCA(const char *, (___identity_hint), A1), \
     struct Library *, AMISSL_BASE_NAME, 2679, Amissl)

#define SSL_CTX_set_psk_client_callback(___ctx, ___cb) \
      AROS_LC2(void, SSL_CTX_set_psk_client_callback, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
 AROS_LCA(SSL_psk_client_cb_func, (___cb), A1), \
     struct Library *, AMISSL_BASE_NAME, 2680, Amissl)

#define SSL_get_psk_identity_hint(___s) \
      AROS_LC1(const char *, SSL_get_psk_identity_hint, \
 AROS_LCA(const SSL *, (___s), A0), \
     struct Library *, AMISSL_BASE_NAME, 2681, Amissl)

#define SSL_set_psk_server_callback(___ssl, ___cb) \
      AROS_LC2(void, SSL_set_psk_server_callback, \
 AROS_LCA(SSL *, (___ssl), A0), \
 AROS_LCA(SSL_psk_server_cb_func, (___cb), A1), \
     struct Library *, AMISSL_BASE_NAME, 2682, Amissl)

#define SSL_use_psk_identity_hint(___s, ___identity_hint) \
      AROS_LC2(int, SSL_use_psk_identity_hint, \
 AROS_LCA(SSL *, (___s), A0), \
 AROS_LCA(const char *, (___identity_hint), A1), \
     struct Library *, AMISSL_BASE_NAME, 2683, Amissl)

#define SSL_set_psk_client_callback(___ssl, ___cb) \
      AROS_LC2(void, SSL_set_psk_client_callback, \
 AROS_LCA(SSL *, (___ssl), A0), \
 AROS_LCA(SSL_psk_client_cb_func, (___cb), A1), \
     struct Library *, AMISSL_BASE_NAME, 2684, Amissl)

#define SSL_CTX_set_psk_server_callback(___ctx, ___cb) \
      AROS_LC2(void, SSL_CTX_set_psk_server_callback, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
 AROS_LCA(SSL_psk_server_cb_func, (___cb), A1), \
     struct Library *, AMISSL_BASE_NAME, 2685, Amissl)

#define SSL_get_psk_identity(___s) \
      AROS_LC1(const char *, SSL_get_psk_identity, \
 AROS_LCA(const SSL *, (___s), A0), \
     struct Library *, AMISSL_BASE_NAME, 2686, Amissl)

#define SSL_set_session_ticket_ext(___s, ___ext_data, ___ext_len) \
      AROS_LC3(int, SSL_set_session_ticket_ext, \
 AROS_LCA(SSL *, (___s), A0), \
 AROS_LCA(void *, (___ext_data), A1), \
 AROS_LCA(int, (___ext_len), D0), \
     struct Library *, AMISSL_BASE_NAME, 2687, Amissl)

#define SSL_set_session_secret_cb(___s, ___tls_session_secret_cb, ___arg) \
      AROS_LC3(int, SSL_set_session_secret_cb, \
 AROS_LCA(SSL *, (___s), A0), \
 AROS_LCA(int (*)(SSL *,void *,int *,STACK_OF(SSL_CIPHER) *,const SSL_CIPHER **,void *), (___tls_session_secret_cb), A1), \
 AROS_LCA(void *, (___arg), A2), \
     struct Library *, AMISSL_BASE_NAME, 2688, Amissl)

#define SSL_set_session_ticket_ext_cb(___s, ___cb, ___arg) \
      AROS_LC3(int, SSL_set_session_ticket_ext_cb, \
 AROS_LCA(SSL *, (___s), A0), \
 AROS_LCA(tls_session_ticket_ext_cb_fn, (___cb), A1), \
 AROS_LCA(void *, (___arg), A2), \
     struct Library *, AMISSL_BASE_NAME, 2689, Amissl)

#define SSL_set1_param(___ssl, ___vpm) \
      AROS_LC2(int, SSL_set1_param, \
 AROS_LCA(SSL *, (___ssl), A0), \
 AROS_LCA(X509_VERIFY_PARAM *, (___vpm), A1), \
     struct Library *, AMISSL_BASE_NAME, 2690, Amissl)

#define SSL_CTX_set1_param(___ctx, ___vpm) \
      AROS_LC2(int, SSL_CTX_set1_param, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
 AROS_LCA(X509_VERIFY_PARAM *, (___vpm), A1), \
     struct Library *, AMISSL_BASE_NAME, 2691, Amissl)

#define SSL_renegotiate_abbreviated(___s) \
      AROS_LC1(int, SSL_renegotiate_abbreviated, \
 AROS_LCA(SSL *, (___s), A0), \
     struct Library *, AMISSL_BASE_NAME, 2692, Amissl)

#define SSL_CTX_set_srp_client_pwd_callback(___ctx, ___cb) \
      AROS_LC2(int, SSL_CTX_set_srp_client_pwd_callback, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
 AROS_LCA(char * (*)(SSL *,void *), (___cb), A1), \
     struct Library *, AMISSL_BASE_NAME, 2696, Amissl)

#define SSL_get_srp_g(___s) \
      AROS_LC1(BIGNUM *, SSL_get_srp_g, \
 AROS_LCA(SSL *, (___s), A0), \
     struct Library *, AMISSL_BASE_NAME, 2697, Amissl)

#define SSL_CTX_set_srp_username_callback(___ctx, ___cb) \
      AROS_LC2(int, SSL_CTX_set_srp_username_callback, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
 AROS_LCA(int (*)(SSL *,int *,void *), (___cb), A1), \
     struct Library *, AMISSL_BASE_NAME, 2698, Amissl)

#define SSL_get_srp_userinfo(___s) \
      AROS_LC1(char *, SSL_get_srp_userinfo, \
 AROS_LCA(SSL *, (___s), A0), \
     struct Library *, AMISSL_BASE_NAME, 2699, Amissl)

#define SSL_set_srp_server_param(___s, ___N, ___g, ___sa, ___v, ___info) \
      AROS_LC6(int, SSL_set_srp_server_param, \
 AROS_LCA(SSL *, (___s), A0), \
 AROS_LCA(const BIGNUM *, (___N), A1), \
 AROS_LCA(const BIGNUM *, (___g), A2), \
 AROS_LCA(BIGNUM *, (___sa), A3), \
 AROS_LCA(BIGNUM *, (___v), D0), \
 AROS_LCA(char *, (___info), D1), \
     struct Library *, AMISSL_BASE_NAME, 2700, Amissl)

#define SSL_set_srp_server_param_pw(___s, ___user, ___pass, ___grp) \
      AROS_LC4(int, SSL_set_srp_server_param_pw, \
 AROS_LCA(SSL *, (___s), A0), \
 AROS_LCA(const char *, (___user), A1), \
 AROS_LCA(const char *, (___pass), A2), \
 AROS_LCA(const char *, (___grp), A3), \
     struct Library *, AMISSL_BASE_NAME, 2701, Amissl)

#define SSL_get_srp_N(___s) \
      AROS_LC1(BIGNUM *, SSL_get_srp_N, \
 AROS_LCA(SSL *, (___s), A0), \
     struct Library *, AMISSL_BASE_NAME, 2702, Amissl)

#define SSL_get_srp_username(___s) \
      AROS_LC1(char *, SSL_get_srp_username, \
 AROS_LCA(SSL *, (___s), A0), \
     struct Library *, AMISSL_BASE_NAME, 2703, Amissl)

#define SSL_CTX_set_srp_password(___ctx, ___password) \
      AROS_LC2(int, SSL_CTX_set_srp_password, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
 AROS_LCA(char *, (___password), A1), \
     struct Library *, AMISSL_BASE_NAME, 2704, Amissl)

#define SSL_CTX_set_srp_strength(___ctx, ___strength) \
      AROS_LC2(int, SSL_CTX_set_srp_strength, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
 AROS_LCA(int, (___strength), D0), \
     struct Library *, AMISSL_BASE_NAME, 2705, Amissl)

#define SSL_CTX_set_srp_verify_param_callback(___ctx, ___cb) \
      AROS_LC2(int, SSL_CTX_set_srp_verify_param_callback, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
 AROS_LCA(int (*)(SSL *,void *), (___cb), A1), \
     struct Library *, AMISSL_BASE_NAME, 2706, Amissl)

#define SSL_CTX_set_srp_cb_arg(___ctx, ___arg) \
      AROS_LC2(int, SSL_CTX_set_srp_cb_arg, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
 AROS_LCA(void *, (___arg), A1), \
     struct Library *, AMISSL_BASE_NAME, 2707, Amissl)

#define SSL_CTX_set_srp_username(___ctx, ___name) \
      AROS_LC2(int, SSL_CTX_set_srp_username, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
 AROS_LCA(char *, (___name), A1), \
     struct Library *, AMISSL_BASE_NAME, 2708, Amissl)

#define SSL_CTX_SRP_CTX_init(___ctx) \
      AROS_LC1(int, SSL_CTX_SRP_CTX_init, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 2709, Amissl)

#define SRP_Calc_A_param(___s) \
      AROS_LC1(int, SRP_Calc_A_param, \
 AROS_LCA(SSL *, (___s), A0), \
     struct Library *, AMISSL_BASE_NAME, 2710, Amissl)

#define SSL_CTX_SRP_CTX_free(___ctx) \
      AROS_LC1(int, SSL_CTX_SRP_CTX_free, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 2712, Amissl)

#define SSL_srp_server_param_with_username(___s, ___ad) \
      AROS_LC2(int, SSL_srp_server_param_with_username, \
 AROS_LCA(SSL *, (___s), A0), \
 AROS_LCA(int *, (___ad), A1), \
     struct Library *, AMISSL_BASE_NAME, 2714, Amissl)

#define SSL_SRP_CTX_free(___ctx) \
      AROS_LC1(int, SSL_SRP_CTX_free, \
 AROS_LCA(SSL *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 2715, Amissl)

#define SSL_set_debug(___s, ___debug) \
      AROS_LC2(void, SSL_set_debug, \
 AROS_LCA(SSL *, (___s), A0), \
 AROS_LCA(int, (___debug), D0), \
     struct Library *, AMISSL_BASE_NAME, 2716, Amissl)

#define SSL_SESSION_get0_peer(___s) \
      AROS_LC1(X509 *, SSL_SESSION_get0_peer, \
 AROS_LCA(SSL_SESSION *, (___s), A0), \
     struct Library *, AMISSL_BASE_NAME, 2717, Amissl)

#define SSL_SESSION_set1_id_context(___s, ___sid_ctx, ___sid_ctx_len) \
      AROS_LC3(int, SSL_SESSION_set1_id_context, \
 AROS_LCA(SSL_SESSION *, (___s), A0), \
 AROS_LCA(const unsigned char *, (___sid_ctx), A1), \
 AROS_LCA(unsigned int, (___sid_ctx_len), D0), \
     struct Library *, AMISSL_BASE_NAME, 2719, Amissl)

#define OBSOLETE_SSL_cache_hit(___s) \
      AROS_LC1(int, OBSOLETE_SSL_cache_hit, \
 AROS_LCA(SSL *, (___s), A0), \
     struct Library *, AMISSL_BASE_NAME, 2721, Amissl)

#define SSL_CIPHER_get_id(___c) \
      AROS_LC1(uint32_t, SSL_CIPHER_get_id, \
 AROS_LCA(const SSL_CIPHER *, (___c), A0), \
     struct Library *, AMISSL_BASE_NAME, 2723, Amissl)

#define SSL_export_keying_material(___s, ___out, ___olen, ___label, ___llen, ___context, ___contextlen, ___use_context) \
      AROS_LC8(int, SSL_export_keying_material, \
 AROS_LCA(SSL *, (___s), A0), \
 AROS_LCA(unsigned char *, (___out), A1), \
 AROS_LCA(size_t, (___olen), D0), \
 AROS_LCA(const char *, (___label), A2), \
 AROS_LCA(size_t, (___llen), D1), \
 AROS_LCA(const unsigned char *, (___context), A3), \
 AROS_LCA(size_t, (___contextlen), D2), \
 AROS_LCA(int, (___use_context), D3), \
     struct Library *, AMISSL_BASE_NAME, 2725, Amissl)

#define SSL_set_tlsext_use_srtp(___ssl, ___profiles) \
      AROS_LC2(int, SSL_set_tlsext_use_srtp, \
 AROS_LCA(SSL *, (___ssl), A0), \
 AROS_LCA(const char *, (___profiles), A1), \
     struct Library *, AMISSL_BASE_NAME, 2726, Amissl)

#define SSL_CTX_set_next_protos_advertised_cb(___s, ___cb, ___arg) \
      AROS_LC3(void, SSL_CTX_set_next_protos_advertised_cb, \
 AROS_LCA(SSL_CTX *, (___s), A0), \
 AROS_LCA(SSL_CTX_npn_advertised_cb_func, (___cb), A1), \
 AROS_LCA(void *, (___arg), A2), \
     struct Library *, AMISSL_BASE_NAME, 2727, Amissl)

#define SSL_get0_next_proto_negotiated(___s, ___data, ___len) \
      AROS_LC3(void, SSL_get0_next_proto_negotiated, \
 AROS_LCA(const SSL *, (___s), A0), \
 AROS_LCA(const unsigned char **, (___data), A1), \
 AROS_LCA(unsigned *, (___len), A2), \
     struct Library *, AMISSL_BASE_NAME, 2728, Amissl)

#define SSL_get_selected_srtp_profile(___s) \
      AROS_LC1(SRTP_PROTECTION_PROFILE *, SSL_get_selected_srtp_profile, \
 AROS_LCA(SSL *, (___s), A0), \
     struct Library *, AMISSL_BASE_NAME, 2729, Amissl)

#define SSL_CTX_set_tlsext_use_srtp(___ctx, ___profiles) \
      AROS_LC2(int, SSL_CTX_set_tlsext_use_srtp, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
 AROS_LCA(const char *, (___profiles), A1), \
     struct Library *, AMISSL_BASE_NAME, 2730, Amissl)

#define SSL_select_next_proto(___out, ___outlen, ___in, ___inlen, ___client, ___client_len) \
      AROS_LC6(int, SSL_select_next_proto, \
 AROS_LCA(unsigned char **, (___out), A0), \
 AROS_LCA(unsigned char *, (___outlen), A1), \
 AROS_LCA(const unsigned char *, (___in), A2), \
 AROS_LCA(unsigned int, (___inlen), D0), \
 AROS_LCA(const unsigned char *, (___client), A3), \
 AROS_LCA(unsigned int, (___client_len), D1), \
     struct Library *, AMISSL_BASE_NAME, 2731, Amissl)

#define SSL_get_srtp_profiles(___s) \
      AROS_LC1(STACK_OF(SRTP_PROTECTION_PROFILE) *, SSL_get_srtp_profiles, \
 AROS_LCA(SSL *, (___s), A0), \
     struct Library *, AMISSL_BASE_NAME, 2732, Amissl)

#define SSL_CTX_set_next_proto_select_cb(___s, ___cb, ___arg) \
      AROS_LC3(void, SSL_CTX_set_next_proto_select_cb, \
 AROS_LCA(SSL_CTX *, (___s), A0), \
 AROS_LCA(SSL_CTX_npn_select_cb_func, (___cb), A1), \
 AROS_LCA(void *, (___arg), A2), \
     struct Library *, AMISSL_BASE_NAME, 2733, Amissl)

#define SSL_SESSION_get_compress_id(___s) \
      AROS_LC1(unsigned int, SSL_SESSION_get_compress_id, \
 AROS_LCA(const SSL_SESSION *, (___s), A0), \
     struct Library *, AMISSL_BASE_NAME, 2734, Amissl)

#define SSL_SRP_CTX_init(___s) \
      AROS_LC1(int, SSL_SRP_CTX_init, \
 AROS_LCA(SSL *, (___s), A0), \
     struct Library *, AMISSL_BASE_NAME, 2737, Amissl)

#define ERR_load_ENGINE_strings() \
      AROS_LC0(int, ERR_load_ENGINE_strings, \
     struct Library *, AMISSL_BASE_NAME, 2793, Amissl)

#define ENGINE_set_DSA(___e, ___dsa_meth) \
      AROS_LC2(int, ENGINE_set_DSA, \
 AROS_LCA(ENGINE *, (___e), A0), \
 AROS_LCA(const DSA_METHOD *, (___dsa_meth), A1), \
     struct Library *, AMISSL_BASE_NAME, 2794, Amissl)

#define ENGINE_get_finish_function(___e) \
      AROS_LC1(ENGINE_GEN_INT_FUNC_PTR, ENGINE_get_finish_function, \
 AROS_LCA(const ENGINE *, (___e), A0), \
     struct Library *, AMISSL_BASE_NAME, 2795, Amissl)

#define ENGINE_get_default_RSA() \
      AROS_LC0(ENGINE *, ENGINE_get_default_RSA, \
     struct Library *, AMISSL_BASE_NAME, 2796, Amissl)

#define ENGINE_set_DH(___e, ___dh_meth) \
      AROS_LC2(int, ENGINE_set_DH, \
 AROS_LCA(ENGINE *, (___e), A0), \
 AROS_LCA(const DH_METHOD *, (___dh_meth), A1), \
     struct Library *, AMISSL_BASE_NAME, 2797, Amissl)

#define ENGINE_get_init_function(___e) \
      AROS_LC1(ENGINE_GEN_INT_FUNC_PTR, ENGINE_get_init_function, \
 AROS_LCA(const ENGINE *, (___e), A0), \
     struct Library *, AMISSL_BASE_NAME, 2798, Amissl)

#define ENGINE_set_init_function(___e, ___init_f) \
      AROS_LC2(int, ENGINE_set_init_function, \
 AROS_LCA(ENGINE *, (___e), A0), \
 AROS_LCA(ENGINE_GEN_INT_FUNC_PTR, (___init_f), A1), \
     struct Library *, AMISSL_BASE_NAME, 2799, Amissl)

#define ENGINE_set_default_DSA(___e) \
      AROS_LC1(int, ENGINE_set_default_DSA, \
 AROS_LCA(ENGINE *, (___e), A0), \
     struct Library *, AMISSL_BASE_NAME, 2800, Amissl)

#define ENGINE_get_last() \
      AROS_LC0(ENGINE *, ENGINE_get_last, \
     struct Library *, AMISSL_BASE_NAME, 2801, Amissl)

#define ENGINE_get_prev(___e) \
      AROS_LC1(ENGINE *, ENGINE_get_prev, \
 AROS_LCA(ENGINE *, (___e), A0), \
     struct Library *, AMISSL_BASE_NAME, 2802, Amissl)

#define ENGINE_get_default_DH() \
      AROS_LC0(ENGINE *, ENGINE_get_default_DH, \
     struct Library *, AMISSL_BASE_NAME, 2803, Amissl)

#define ENGINE_set_finish_function(___e, ___finish_f) \
      AROS_LC2(int, ENGINE_set_finish_function, \
 AROS_LCA(ENGINE *, (___e), A0), \
 AROS_LCA(ENGINE_GEN_INT_FUNC_PTR, (___finish_f), A1), \
     struct Library *, AMISSL_BASE_NAME, 2804, Amissl)

#define ENGINE_set_RSA(___e, ___rsa_meth) \
      AROS_LC2(int, ENGINE_set_RSA, \
 AROS_LCA(ENGINE *, (___e), A0), \
 AROS_LCA(const RSA_METHOD *, (___rsa_meth), A1), \
     struct Library *, AMISSL_BASE_NAME, 2805, Amissl)

#define ENGINE_set_default_RAND(___e) \
      AROS_LC1(int, ENGINE_set_default_RAND, \
 AROS_LCA(ENGINE *, (___e), A0), \
     struct Library *, AMISSL_BASE_NAME, 2806, Amissl)

#define ENGINE_get_default_DSA() \
      AROS_LC0(ENGINE *, ENGINE_get_default_DSA, \
     struct Library *, AMISSL_BASE_NAME, 2807, Amissl)

#define ENGINE_set_default_RSA(___e) \
      AROS_LC1(int, ENGINE_set_default_RSA, \
 AROS_LCA(ENGINE *, (___e), A0), \
     struct Library *, AMISSL_BASE_NAME, 2808, Amissl)

#define ENGINE_get_default_RAND() \
      AROS_LC0(ENGINE *, ENGINE_get_default_RAND, \
     struct Library *, AMISSL_BASE_NAME, 2809, Amissl)

#define ENGINE_set_RAND(___e, ___rand_meth) \
      AROS_LC2(int, ENGINE_set_RAND, \
 AROS_LCA(ENGINE *, (___e), A0), \
 AROS_LCA(const RAND_METHOD *, (___rand_meth), A1), \
     struct Library *, AMISSL_BASE_NAME, 2810, Amissl)

#define ENGINE_set_default_DH(___e) \
      AROS_LC1(int, ENGINE_set_default_DH, \
 AROS_LCA(ENGINE *, (___e), A0), \
     struct Library *, AMISSL_BASE_NAME, 2811, Amissl)

#define ENGINE_get_ctrl_function(___e) \
      AROS_LC1(ENGINE_CTRL_FUNC_PTR, ENGINE_get_ctrl_function, \
 AROS_LCA(const ENGINE *, (___e), A0), \
     struct Library *, AMISSL_BASE_NAME, 2812, Amissl)

#define ENGINE_set_ctrl_function(___e, ___ctrl_f) \
      AROS_LC2(int, ENGINE_set_ctrl_function, \
 AROS_LCA(ENGINE *, (___e), A0), \
 AROS_LCA(ENGINE_CTRL_FUNC_PTR, (___ctrl_f), A1), \
     struct Library *, AMISSL_BASE_NAME, 2813, Amissl)

#define ENGINE_unregister_ciphers(___e) \
      AROS_LC1(void, ENGINE_unregister_ciphers, \
 AROS_LCA(ENGINE *, (___e), A0), \
     struct Library *, AMISSL_BASE_NAME, 2814, Amissl)

#define ENGINE_unregister_RSA(___e) \
      AROS_LC1(void, ENGINE_unregister_RSA, \
 AROS_LCA(ENGINE *, (___e), A0), \
     struct Library *, AMISSL_BASE_NAME, 2815, Amissl)

#define ENGINE_register_all_RAND() \
      AROS_LC0(void, ENGINE_register_all_RAND, \
     struct Library *, AMISSL_BASE_NAME, 2816, Amissl)

#define OBSOLETE_ENGINE_load_dynamic() \
      AROS_LC0(void, OBSOLETE_ENGINE_load_dynamic, \
     struct Library *, AMISSL_BASE_NAME, 2817, Amissl)

#define ENGINE_get_digest_engine(___nid) \
      AROS_LC1(ENGINE *, ENGINE_get_digest_engine, \
 AROS_LCA(int, (___nid), D0), \
     struct Library *, AMISSL_BASE_NAME, 2818, Amissl)

#define ENGINE_register_DH(___e) \
      AROS_LC1(int, ENGINE_register_DH, \
 AROS_LCA(ENGINE *, (___e), A0), \
     struct Library *, AMISSL_BASE_NAME, 2819, Amissl)

#define ENGINE_register_RAND(___e) \
      AROS_LC1(int, ENGINE_register_RAND, \
 AROS_LCA(ENGINE *, (___e), A0), \
     struct Library *, AMISSL_BASE_NAME, 2820, Amissl)

#define OBSOLETE_ENGINE_load_cryptodev() \
      AROS_LC0(void, OBSOLETE_ENGINE_load_cryptodev, \
     struct Library *, AMISSL_BASE_NAME, 2821, Amissl)

#define ENGINE_register_ciphers(___e) \
      AROS_LC1(int, ENGINE_register_ciphers, \
 AROS_LCA(ENGINE *, (___e), A0), \
     struct Library *, AMISSL_BASE_NAME, 2822, Amissl)

#define OBSOLETE_ENGINE_load_openssl() \
      AROS_LC0(void, OBSOLETE_ENGINE_load_openssl, \
     struct Library *, AMISSL_BASE_NAME, 2824, Amissl)

#define ENGINE_get_cmd_defns(___e) \
      AROS_LC1(const ENGINE_CMD_DEFN *, ENGINE_get_cmd_defns, \
 AROS_LCA(const ENGINE *, (___e), A0), \
     struct Library *, AMISSL_BASE_NAME, 2825, Amissl)

#define ENGINE_set_load_privkey_function(___e, ___loadpriv_f) \
      AROS_LC2(int, ENGINE_set_load_privkey_function, \
 AROS_LCA(ENGINE *, (___e), A0), \
 AROS_LCA(ENGINE_LOAD_KEY_PTR, (___loadpriv_f), A1), \
     struct Library *, AMISSL_BASE_NAME, 2826, Amissl)

#define ENGINE_set_default_digests(___e) \
      AROS_LC1(int, ENGINE_set_default_digests, \
 AROS_LCA(ENGINE *, (___e), A0), \
     struct Library *, AMISSL_BASE_NAME, 2827, Amissl)

#define ENGINE_register_RSA(___e) \
      AROS_LC1(int, ENGINE_register_RSA, \
 AROS_LCA(ENGINE *, (___e), A0), \
     struct Library *, AMISSL_BASE_NAME, 2828, Amissl)

#define ENGINE_unregister_DSA(___e) \
      AROS_LC1(void, ENGINE_unregister_DSA, \
 AROS_LCA(ENGINE *, (___e), A0), \
     struct Library *, AMISSL_BASE_NAME, 2829, Amissl)

#define ENGINE_set_ciphers(___e, ___f) \
      AROS_LC2(int, ENGINE_set_ciphers, \
 AROS_LCA(ENGINE *, (___e), A0), \
 AROS_LCA(ENGINE_CIPHERS_PTR, (___f), A1), \
     struct Library *, AMISSL_BASE_NAME, 2830, Amissl)

#define RAND_set_rand_engine(___engine) \
      AROS_LC1(int, RAND_set_rand_engine, \
 AROS_LCA(ENGINE *, (___engine), A0), \
     struct Library *, AMISSL_BASE_NAME, 2831, Amissl)

#define ENGINE_get_digest(___e, ___nid) \
      AROS_LC2(const EVP_MD *, ENGINE_get_digest, \
 AROS_LCA(ENGINE *, (___e), A0), \
 AROS_LCA(int, (___nid), D0), \
     struct Library *, AMISSL_BASE_NAME, 2832, Amissl)

#define ENGINE_get_cipher(___e, ___nid) \
      AROS_LC2(const EVP_CIPHER *, ENGINE_get_cipher, \
 AROS_LCA(ENGINE *, (___e), A0), \
 AROS_LCA(int, (___nid), D0), \
     struct Library *, AMISSL_BASE_NAME, 2833, Amissl)

#define ENGINE_cmd_is_executable(___e, ___cmd) \
      AROS_LC2(int, ENGINE_cmd_is_executable, \
 AROS_LCA(ENGINE *, (___e), A0), \
 AROS_LCA(int, (___cmd), D0), \
     struct Library *, AMISSL_BASE_NAME, 2834, Amissl)

#define ENGINE_register_DSA(___e) \
      AROS_LC1(int, ENGINE_register_DSA, \
 AROS_LCA(ENGINE *, (___e), A0), \
     struct Library *, AMISSL_BASE_NAME, 2835, Amissl)

#define ENGINE_set_load_pubkey_function(___e, ___loadpub_f) \
      AROS_LC2(int, ENGINE_set_load_pubkey_function, \
 AROS_LCA(ENGINE *, (___e), A0), \
 AROS_LCA(ENGINE_LOAD_KEY_PTR, (___loadpub_f), A1), \
     struct Library *, AMISSL_BASE_NAME, 2836, Amissl)

#define ENGINE_get_load_pubkey_function(___e) \
      AROS_LC1(ENGINE_LOAD_KEY_PTR, ENGINE_get_load_pubkey_function, \
 AROS_LCA(const ENGINE *, (___e), A0), \
     struct Library *, AMISSL_BASE_NAME, 2837, Amissl)

#define ENGINE_register_all_RSA() \
      AROS_LC0(void, ENGINE_register_all_RSA, \
     struct Library *, AMISSL_BASE_NAME, 2838, Amissl)

#define ENGINE_unregister_digests(___e) \
      AROS_LC1(void, ENGINE_unregister_digests, \
 AROS_LCA(ENGINE *, (___e), A0), \
     struct Library *, AMISSL_BASE_NAME, 2839, Amissl)

#define OBSOLETE_ENGINE_get_ex_new_index(___argl, ___argp, ___new_func, ___dep_func, ___free_func) \
      AROS_LC5(int, OBSOLETE_ENGINE_get_ex_new_index, \
 AROS_LCA(long, (___argl), D0), \
 AROS_LCA(void *, (___argp), A0), \
 AROS_LCA(CRYPTO_EX_new *, (___new_func), A1), \
 AROS_LCA(CRYPTO_EX_dup *, (___dep_func), A2), \
 AROS_LCA(CRYPTO_EX_free *, (___free_func), A3), \
     struct Library *, AMISSL_BASE_NAME, 2840, Amissl)

#define ENGINE_get_ex_data(___e, ___idx) \
      AROS_LC2(void *, ENGINE_get_ex_data, \
 AROS_LCA(const ENGINE *, (___e), A0), \
 AROS_LCA(int, (___idx), D0), \
     struct Library *, AMISSL_BASE_NAME, 2841, Amissl)

#define ENGINE_set_cmd_defns(___e, ___defns) \
      AROS_LC2(int, ENGINE_set_cmd_defns, \
 AROS_LCA(ENGINE *, (___e), A0), \
 AROS_LCA(const ENGINE_CMD_DEFN *, (___defns), A1), \
     struct Library *, AMISSL_BASE_NAME, 2843, Amissl)

#define ENGINE_register_digests(___e) \
      AROS_LC1(int, ENGINE_register_digests, \
 AROS_LCA(ENGINE *, (___e), A0), \
     struct Library *, AMISSL_BASE_NAME, 2844, Amissl)

#define ENGINE_register_all_DH() \
      AROS_LC0(void, ENGINE_register_all_DH, \
     struct Library *, AMISSL_BASE_NAME, 2845, Amissl)

#define ENGINE_get_flags(___e) \
      AROS_LC1(int, ENGINE_get_flags, \
 AROS_LCA(const ENGINE *, (___e), A0), \
     struct Library *, AMISSL_BASE_NAME, 2846, Amissl)

#define ENGINE_unregister_DH(___e) \
      AROS_LC1(void, ENGINE_unregister_DH, \
 AROS_LCA(ENGINE *, (___e), A0), \
     struct Library *, AMISSL_BASE_NAME, 2847, Amissl)

#define ENGINE_register_all_DSA() \
      AROS_LC0(void, ENGINE_register_all_DSA, \
     struct Library *, AMISSL_BASE_NAME, 2848, Amissl)

#define ENGINE_set_digests(___e, ___f) \
      AROS_LC2(int, ENGINE_set_digests, \
 AROS_LCA(ENGINE *, (___e), A0), \
 AROS_LCA(ENGINE_DIGESTS_PTR, (___f), A1), \
     struct Library *, AMISSL_BASE_NAME, 2849, Amissl)

#define ENGINE_register_complete(___e) \
      AROS_LC1(int, ENGINE_register_complete, \
 AROS_LCA(ENGINE *, (___e), A0), \
     struct Library *, AMISSL_BASE_NAME, 2850, Amissl)

#define ENGINE_set_ex_data(___e, ___idx, ___arg) \
      AROS_LC3(int, ENGINE_set_ex_data, \
 AROS_LCA(ENGINE *, (___e), A0), \
 AROS_LCA(int, (___idx), D0), \
 AROS_LCA(void *, (___arg), A1), \
     struct Library *, AMISSL_BASE_NAME, 2851, Amissl)

#define ENGINE_set_destroy_function(___e, ___destroy_f) \
      AROS_LC2(int, ENGINE_set_destroy_function, \
 AROS_LCA(ENGINE *, (___e), A0), \
 AROS_LCA(ENGINE_GEN_INT_FUNC_PTR, (___destroy_f), A1), \
     struct Library *, AMISSL_BASE_NAME, 2852, Amissl)

#define ENGINE_get_cipher_engine(___nid) \
      AROS_LC1(ENGINE *, ENGINE_get_cipher_engine, \
 AROS_LCA(int, (___nid), D0), \
     struct Library *, AMISSL_BASE_NAME, 2853, Amissl)

#define ENGINE_set_default_ciphers(___e) \
      AROS_LC1(int, ENGINE_set_default_ciphers, \
 AROS_LCA(ENGINE *, (___e), A0), \
     struct Library *, AMISSL_BASE_NAME, 2856, Amissl)

#define ENGINE_unregister_RAND(___e) \
      AROS_LC1(void, ENGINE_unregister_RAND, \
 AROS_LCA(ENGINE *, (___e), A0), \
     struct Library *, AMISSL_BASE_NAME, 2857, Amissl)

#define ENGINE_set_table_flags(___flags) \
      AROS_LC1(void, ENGINE_set_table_flags, \
 AROS_LCA(unsigned int, (___flags), D0), \
     struct Library *, AMISSL_BASE_NAME, 2859, Amissl)

#define ENGINE_get_destroy_function(___e) \
      AROS_LC1(ENGINE_GEN_INT_FUNC_PTR, ENGINE_get_destroy_function, \
 AROS_LCA(const ENGINE *, (___e), A0), \
     struct Library *, AMISSL_BASE_NAME, 2861, Amissl)

#define ENGINE_get_table_flags() \
      AROS_LC0(unsigned int, ENGINE_get_table_flags, \
     struct Library *, AMISSL_BASE_NAME, 2864, Amissl)

#define ENGINE_set_flags(___e, ___flags) \
      AROS_LC2(int, ENGINE_set_flags, \
 AROS_LCA(ENGINE *, (___e), A0), \
 AROS_LCA(int, (___flags), D0), \
     struct Library *, AMISSL_BASE_NAME, 2865, Amissl)

#define ENGINE_get_load_privkey_function(___e) \
      AROS_LC1(ENGINE_LOAD_KEY_PTR, ENGINE_get_load_privkey_function, \
 AROS_LCA(const ENGINE *, (___e), A0), \
     struct Library *, AMISSL_BASE_NAME, 2866, Amissl)

#define ENGINE_set_default_string(___e, ___def_list) \
      AROS_LC2(int, ENGINE_set_default_string, \
 AROS_LCA(ENGINE *, (___e), A0), \
 AROS_LCA(const char *, (___def_list), A1), \
     struct Library *, AMISSL_BASE_NAME, 2867, Amissl)

#define ENGINE_add_conf_module() \
      AROS_LC0(void, ENGINE_add_conf_module, \
     struct Library *, AMISSL_BASE_NAME, 2868, Amissl)

#define ENGINE_up_ref(___e) \
      AROS_LC1(int, ENGINE_up_ref, \
 AROS_LCA(ENGINE *, (___e), A0), \
     struct Library *, AMISSL_BASE_NAME, 2872, Amissl)

#define EC_GROUP_get_trinomial_basis(___eg, ___k) \
      AROS_LC2(int, EC_GROUP_get_trinomial_basis, \
 AROS_LCA(const EC_GROUP *, (___eg), A0), \
 AROS_LCA(unsigned int *, (___k), A1), \
     struct Library *, AMISSL_BASE_NAME, 2876, Amissl)

#define SHA512_Update(___c, ___data, ___len) \
      AROS_LC3(int, SHA512_Update, \
 AROS_LCA(SHA512_CTX *, (___c), A0), \
 AROS_LCA(const void *, (___data), A1), \
 AROS_LCA(size_t, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 2879, Amissl)

#define i2d_ECPrivateKey(___key, ___out) \
      AROS_LC2(int, i2d_ECPrivateKey, \
 AROS_LCA(const EC_KEY *, (___key), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 2880, Amissl)

#define BN_GF2m_mod_exp_arr(___r, ___a, ___b, ___p, ___ctx) \
      AROS_LC5(int, BN_GF2m_mod_exp_arr, \
 AROS_LCA(BIGNUM *, (___r), A0), \
 AROS_LCA(const BIGNUM *, (___a), A1), \
 AROS_LCA(const BIGNUM *, (___b), A2), \
 AROS_LCA(const int *, (___p), A3), \
 AROS_LCA(BN_CTX *, (___ctx), D0), \
     struct Library *, AMISSL_BASE_NAME, 2881, Amissl)

#define BN_GF2m_mod_mul_arr(___r, ___a, ___b, ___p, ___ctx) \
      AROS_LC5(int, BN_GF2m_mod_mul_arr, \
 AROS_LCA(BIGNUM *, (___r), A0), \
 AROS_LCA(const BIGNUM *, (___a), A1), \
 AROS_LCA(const BIGNUM *, (___b), A2), \
 AROS_LCA(const int *, (___p), A3), \
 AROS_LCA(BN_CTX *, (___ctx), D0), \
     struct Library *, AMISSL_BASE_NAME, 2882, Amissl)

#define o2i_ECPublicKey(___key, ___in, ___len) \
      AROS_LC3(EC_KEY *, o2i_ECPublicKey, \
 AROS_LCA(EC_KEY **, (___key), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 2883, Amissl)

#define EC_KEY_copy(___dst, ___src) \
      AROS_LC2(EC_KEY *, EC_KEY_copy, \
 AROS_LCA(EC_KEY *, (___dst), A0), \
 AROS_LCA(const EC_KEY *, (___src), A1), \
     struct Library *, AMISSL_BASE_NAME, 2884, Amissl)

#define EC_GROUP_check_discriminant(___group, ___ctx) \
      AROS_LC2(int, EC_GROUP_check_discriminant, \
 AROS_LCA(const EC_GROUP *, (___group), A0), \
 AROS_LCA(BN_CTX *, (___ctx), A1), \
     struct Library *, AMISSL_BASE_NAME, 2886, Amissl)

#define i2o_ECPublicKey(___key, ___out) \
      AROS_LC2(int, i2o_ECPublicKey, \
 AROS_LCA(const EC_KEY *, (___key), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 2887, Amissl)

#define EC_GROUP_new_curve_GF2m(___p, ___a, ___b, ___ctx) \
      AROS_LC4(EC_GROUP *, EC_GROUP_new_curve_GF2m, \
 AROS_LCA(const BIGNUM *, (___p), A0), \
 AROS_LCA(const BIGNUM *, (___a), A1), \
 AROS_LCA(const BIGNUM *, (___b), A2), \
 AROS_LCA(BN_CTX *, (___ctx), A3), \
     struct Library *, AMISSL_BASE_NAME, 2888, Amissl)

#define EVP_PKEY_get1_EC_KEY(___pkey) \
      AROS_LC1(struct ec_key_st *, EVP_PKEY_get1_EC_KEY, \
 AROS_LCA(EVP_PKEY *, (___pkey), A0), \
     struct Library *, AMISSL_BASE_NAME, 2890, Amissl)

#define EC_KEY_get_conv_form(___key) \
      AROS_LC1(point_conversion_form_t, EC_KEY_get_conv_form, \
 AROS_LCA(const EC_KEY *, (___key), A0), \
     struct Library *, AMISSL_BASE_NAME, 2892, Amissl)

#define ENGINE_get_static_state() \
      AROS_LC0(void *, ENGINE_get_static_state, \
     struct Library *, AMISSL_BASE_NAME, 2893, Amissl)

#define ECDSA_SIG_new() \
      AROS_LC0(ECDSA_SIG *, ECDSA_SIG_new, \
     struct Library *, AMISSL_BASE_NAME, 2894, Amissl)

#define EC_POINT_bn2point(___g, ___b, ___p, ___ctx) \
      AROS_LC4(EC_POINT *, EC_POINT_bn2point, \
 AROS_LCA(const EC_GROUP *, (___g), A0), \
 AROS_LCA(const BIGNUM *, (___b), A1), \
 AROS_LCA(EC_POINT *, (___p), A2), \
 AROS_LCA(BN_CTX *, (___ctx), A3), \
     struct Library *, AMISSL_BASE_NAME, 2895, Amissl)

#define ECDSA_sign_ex(___type, ___dgst, ___dgstlen, ___sig, ___siglen, ___kinv, ___rp, ___eckey) \
      AROS_LC8(int, ECDSA_sign_ex, \
 AROS_LCA(int, (___type), D0), \
 AROS_LCA(const unsigned char *, (___dgst), A0), \
 AROS_LCA(int, (___dgstlen), D1), \
 AROS_LCA(unsigned char *, (___sig), A1), \
 AROS_LCA(unsigned int *, (___siglen), A2), \
 AROS_LCA(const BIGNUM *, (___kinv), A3), \
 AROS_LCA(const BIGNUM *, (___rp), D2), \
 AROS_LCA(EC_KEY *, (___eckey), D3), \
     struct Library *, AMISSL_BASE_NAME, 2897, Amissl)

#define EC_GROUP_get_pentanomial_basis(___ecgroup, ___k1, ___k2, ___k3) \
      AROS_LC4(int, EC_GROUP_get_pentanomial_basis, \
 AROS_LCA(const EC_GROUP *, (___ecgroup), A0), \
 AROS_LCA(unsigned int *, (___k1), A1), \
 AROS_LCA(unsigned int *, (___k2), A2), \
 AROS_LCA(unsigned int *, (___k3), A3), \
     struct Library *, AMISSL_BASE_NAME, 2898, Amissl)

#define ECDSA_sign_setup(___eckey, ___ctx, ___kinv, ___rp) \
      AROS_LC4(int, ECDSA_sign_setup, \
 AROS_LCA(EC_KEY *, (___eckey), A0), \
 AROS_LCA(BN_CTX *, (___ctx), A1), \
 AROS_LCA(BIGNUM **, (___kinv), A2), \
 AROS_LCA(BIGNUM **, (___rp), A3), \
     struct Library *, AMISSL_BASE_NAME, 2899, Amissl)

#define BN_GF2m_mod_solve_quad_arr(___r, ___a, ___p, ___ctx) \
      AROS_LC4(int, BN_GF2m_mod_solve_quad_arr, \
 AROS_LCA(BIGNUM *, (___r), A0), \
 AROS_LCA(const BIGNUM *, (___a), A1), \
 AROS_LCA(const int *, (___p), A2), \
 AROS_LCA(BN_CTX *, (___ctx), A3), \
     struct Library *, AMISSL_BASE_NAME, 2900, Amissl)

#define EC_KEY_up_ref(___key) \
      AROS_LC1(int, EC_KEY_up_ref, \
 AROS_LCA(EC_KEY *, (___key), A0), \
     struct Library *, AMISSL_BASE_NAME, 2901, Amissl)

#define d2i_EC_PUBKEY(___a, ___pp, ___length) \
      AROS_LC3(EC_KEY *, d2i_EC_PUBKEY, \
 AROS_LCA(EC_KEY **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___pp), A1), \
 AROS_LCA(long, (___length), A2), \
     struct Library *, AMISSL_BASE_NAME, 2902, Amissl)

#define EC_GROUP_have_precompute_mult(___group) \
      AROS_LC1(int, EC_GROUP_have_precompute_mult, \
 AROS_LCA(const EC_GROUP *, (___group), A0), \
     struct Library *, AMISSL_BASE_NAME, 2903, Amissl)

#define BN_GF2m_mod_arr(___r, ___a, ___p) \
      AROS_LC3(int, BN_GF2m_mod_arr, \
 AROS_LCA(BIGNUM *, (___r), A0), \
 AROS_LCA(const BIGNUM *, (___a), A1), \
 AROS_LCA(const int *, (___p), A2), \
     struct Library *, AMISSL_BASE_NAME, 2905, Amissl)

#define EC_POINT_dup(___src, ___group) \
      AROS_LC2(EC_POINT *, EC_POINT_dup, \
 AROS_LCA(const EC_POINT *, (___src), A0), \
 AROS_LCA(const EC_GROUP *, (___group), A1), \
     struct Library *, AMISSL_BASE_NAME, 2909, Amissl)

#define EVP_PKEY_set1_EC_KEY(___pkey, ___key) \
      AROS_LC2(int, EVP_PKEY_set1_EC_KEY, \
 AROS_LCA(EVP_PKEY *, (___pkey), A0), \
 AROS_LCA(struct ec_key_st *, (___key), A1), \
     struct Library *, AMISSL_BASE_NAME, 2910, Amissl)

#define BN_GF2m_mod_sqrt_arr(___r, ___a, ___p, ___ctx) \
      AROS_LC4(int, BN_GF2m_mod_sqrt_arr, \
 AROS_LCA(BIGNUM *, (___r), A0), \
 AROS_LCA(const BIGNUM *, (___a), A1), \
 AROS_LCA(const int *, (___p), A2), \
 AROS_LCA(BN_CTX *, (___ctx), A3), \
     struct Library *, AMISSL_BASE_NAME, 2911, Amissl)

#define EC_KEY_set_private_key(___key, ___prv) \
      AROS_LC2(int, EC_KEY_set_private_key, \
 AROS_LCA(EC_KEY *, (___key), A0), \
 AROS_LCA(const BIGNUM *, (___prv), A1), \
     struct Library *, AMISSL_BASE_NAME, 2913, Amissl)

#define BN_GF2m_poly2arr(___a, ___p, ___max) \
      AROS_LC3(int, BN_GF2m_poly2arr, \
 AROS_LCA(const BIGNUM *, (___a), A0), \
 AROS_LCA(int *, (___p), A1), \
 AROS_LCA(int, (___max), D0), \
     struct Library *, AMISSL_BASE_NAME, 2914, Amissl)

#define i2d_ECParameters(___key, ___out) \
      AROS_LC2(int, i2d_ECParameters, \
 AROS_LCA(const EC_KEY *, (___key), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 2915, Amissl)

#define SHA256_Init(___c) \
      AROS_LC1(int, SHA256_Init, \
 AROS_LCA(SHA256_CTX *, (___c), A0), \
     struct Library *, AMISSL_BASE_NAME, 2917, Amissl)

#define SHA224(___d, ___n, ___md) \
      AROS_LC3(unsigned char *, SHA224, \
 AROS_LCA(const unsigned char *, (___d), A0), \
 AROS_LCA(size_t, (___n), D0), \
 AROS_LCA(unsigned char *, (___md), A1), \
     struct Library *, AMISSL_BASE_NAME, 2919, Amissl)

#define EC_GROUP_get_seed_len(___ecgroup) \
      AROS_LC1(size_t, EC_GROUP_get_seed_len, \
 AROS_LCA(const EC_GROUP *, (___ecgroup), A0), \
     struct Library *, AMISSL_BASE_NAME, 2921, Amissl)

#define i2d_EC_PUBKEY(___a, ___pp) \
      AROS_LC2(int, i2d_EC_PUBKEY, \
 AROS_LCA(const EC_KEY *, (___a), A0), \
 AROS_LCA(unsigned char **, (___pp), A1), \
     struct Library *, AMISSL_BASE_NAME, 2922, Amissl)

#define EC_GFp_nist_method() \
      AROS_LC0(const EC_METHOD *, EC_GFp_nist_method, \
     struct Library *, AMISSL_BASE_NAME, 2924, Amissl)

#define OBSOLETE_ENGINE_load_padlock() \
      AROS_LC0(void, OBSOLETE_ENGINE_load_padlock, \
     struct Library *, AMISSL_BASE_NAME, 2925, Amissl)

#define EC_GROUP_set_curve_name(___group, ___nid) \
      AROS_LC2(void, EC_GROUP_set_curve_name, \
 AROS_LCA(EC_GROUP *, (___group), A0), \
 AROS_LCA(int, (___nid), D0), \
     struct Library *, AMISSL_BASE_NAME, 2926, Amissl)

#define BN_GF2m_mod_sqr_arr(___r, ___a, ___p, ___ctx) \
      AROS_LC4(int, BN_GF2m_mod_sqr_arr, \
 AROS_LCA(BIGNUM *, (___r), A0), \
 AROS_LCA(const BIGNUM *, (___a), A1), \
 AROS_LCA(const int *, (___p), A2), \
 AROS_LCA(BN_CTX *, (___ctx), A3), \
     struct Library *, AMISSL_BASE_NAME, 2927, Amissl)

#define BIO_s_datagram() \
      AROS_LC0(const BIO_METHOD *, BIO_s_datagram, \
     struct Library *, AMISSL_BASE_NAME, 2928, Amissl)

#define SHA384_Update(___c, ___data, ___len) \
      AROS_LC3(int, SHA384_Update, \
 AROS_LCA(SHA512_CTX *, (___c), A0), \
 AROS_LCA(const void *, (___data), A1), \
 AROS_LCA(size_t, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 2931, Amissl)

#define SHA224_Final(___md, ___c) \
      AROS_LC2(int, SHA224_Final, \
 AROS_LCA(unsigned char *, (___md), A0), \
 AROS_LCA(SHA256_CTX *, (___c), A1), \
     struct Library *, AMISSL_BASE_NAME, 2933, Amissl)

#define SHA224_Update(___c, ___data, ___len) \
      AROS_LC3(int, SHA224_Update, \
 AROS_LCA(SHA256_CTX *, (___c), A0), \
 AROS_LCA(const void *, (___data), A1), \
 AROS_LCA(size_t, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 2934, Amissl)

#define d2i_ECPrivateKey(___key, ___in, ___len) \
      AROS_LC3(EC_KEY *, d2i_ECPrivateKey, \
 AROS_LCA(EC_KEY **, (___key), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 2935, Amissl)

#define SHA512_Final(___md, ___c) \
      AROS_LC2(int, SHA512_Final, \
 AROS_LCA(unsigned char *, (___md), A0), \
 AROS_LCA(SHA512_CTX *, (___c), A1), \
     struct Library *, AMISSL_BASE_NAME, 2937, Amissl)

#define EC_GROUP_get_asn1_flag(___group) \
      AROS_LC1(int, EC_GROUP_get_asn1_flag, \
 AROS_LCA(const EC_GROUP *, (___group), A0), \
     struct Library *, AMISSL_BASE_NAME, 2938, Amissl)

#define EC_GROUP_get0_seed(___x) \
      AROS_LC1(unsigned char *, EC_GROUP_get0_seed, \
 AROS_LCA(const EC_GROUP *, (___x), A0), \
     struct Library *, AMISSL_BASE_NAME, 2940, Amissl)

#define BN_GF2m_mod_div_arr(___r, ___a, ___b, ___p, ___ctx) \
      AROS_LC5(int, BN_GF2m_mod_div_arr, \
 AROS_LCA(BIGNUM *, (___r), A0), \
 AROS_LCA(const BIGNUM *, (___a), A1), \
 AROS_LCA(const BIGNUM *, (___b), A2), \
 AROS_LCA(const int *, (___p), A3), \
 AROS_LCA(BN_CTX *, (___ctx), D0), \
     struct Library *, AMISSL_BASE_NAME, 2941, Amissl)

#define EC_KEY_get_enc_flags(___key) \
      AROS_LC1(unsigned, EC_KEY_get_enc_flags, \
 AROS_LCA(const EC_KEY *, (___key), A0), \
     struct Library *, AMISSL_BASE_NAME, 2948, Amissl)

#define EC_POINT_set_compressed_coordinates_GF2m(___group, ___p, ___x, ___y_bit, ___ctx) \
      AROS_LC5(int, EC_POINT_set_compressed_coordinates_GF2m, \
 AROS_LCA(const EC_GROUP *, (___group), A0), \
 AROS_LCA(EC_POINT *, (___p), A1), \
 AROS_LCA(const BIGNUM *, (___x), A2), \
 AROS_LCA(int, (___y_bit), D0), \
 AROS_LCA(BN_CTX *, (___ctx), A3), \
     struct Library *, AMISSL_BASE_NAME, 2950, Amissl)

#define EC_GROUP_cmp(___a, ___b, ___ctx) \
      AROS_LC3(int, EC_GROUP_cmp, \
 AROS_LCA(const EC_GROUP *, (___a), A0), \
 AROS_LCA(const EC_GROUP *, (___b), A1), \
 AROS_LCA(BN_CTX *, (___ctx), A2), \
     struct Library *, AMISSL_BASE_NAME, 2951, Amissl)

#define SHA224_Init(___c) \
      AROS_LC1(int, SHA224_Init, \
 AROS_LCA(SHA256_CTX *, (___c), A0), \
     struct Library *, AMISSL_BASE_NAME, 2952, Amissl)

#define SHA512_Init(___c) \
      AROS_LC1(int, SHA512_Init, \
 AROS_LCA(SHA512_CTX *, (___c), A0), \
     struct Library *, AMISSL_BASE_NAME, 2954, Amissl)

#define EC_GROUP_get_basis_type(___group) \
      AROS_LC1(int, EC_GROUP_get_basis_type, \
 AROS_LCA(const EC_GROUP *, (___group), A0), \
     struct Library *, AMISSL_BASE_NAME, 2956, Amissl)

#define EC_GROUP_dup(___src) \
      AROS_LC1(EC_GROUP *, EC_GROUP_dup, \
 AROS_LCA(const EC_GROUP *, (___src), A0), \
     struct Library *, AMISSL_BASE_NAME, 2961, Amissl)

#define SHA256_Transform(___c, ___data) \
      AROS_LC2(void, SHA256_Transform, \
 AROS_LCA(SHA256_CTX *, (___c), A0), \
 AROS_LCA(const unsigned char *, (___data), A1), \
     struct Library *, AMISSL_BASE_NAME, 2963, Amissl)

#define EC_KEY_set_enc_flags(___eckey, ___flags) \
      AROS_LC2(void, EC_KEY_set_enc_flags, \
 AROS_LCA(EC_KEY *, (___eckey), A0), \
 AROS_LCA(unsigned int, (___flags), D0), \
     struct Library *, AMISSL_BASE_NAME, 2964, Amissl)

#define EC_POINT_point2hex(___group, ___point, ___form, ___ctx) \
      AROS_LC4(char *, EC_POINT_point2hex, \
 AROS_LCA(const EC_GROUP *, (___group), A0), \
 AROS_LCA(const EC_POINT *, (___point), A1), \
 AROS_LCA(point_conversion_form_t, (___form), D0), \
 AROS_LCA(BN_CTX *, (___ctx), A2), \
     struct Library *, AMISSL_BASE_NAME, 2965, Amissl)

#define ECDSA_do_sign_ex(___dgst, ___dgstlen, ___kinv, ___rp, ___eckey) \
      AROS_LC5(ECDSA_SIG *, ECDSA_do_sign_ex, \
 AROS_LCA(const unsigned char *, (___dgst), A0), \
 AROS_LCA(int, (___dgstlen), D0), \
 AROS_LCA(const BIGNUM *, (___kinv), A1), \
 AROS_LCA(const BIGNUM *, (___rp), A2), \
 AROS_LCA(EC_KEY *, (___eckey), A3), \
     struct Library *, AMISSL_BASE_NAME, 2967, Amissl)

#define SHA512_Transform(___c, ___data) \
      AROS_LC2(void, SHA512_Transform, \
 AROS_LCA(SHA512_CTX *, (___c), A0), \
 AROS_LCA(const unsigned char *, (___data), A1), \
     struct Library *, AMISSL_BASE_NAME, 2969, Amissl)

#define EC_KEY_set_public_key(___key, ___pub) \
      AROS_LC2(int, EC_KEY_set_public_key, \
 AROS_LCA(EC_KEY *, (___key), A0), \
 AROS_LCA(const EC_POINT *, (___pub), A1), \
     struct Library *, AMISSL_BASE_NAME, 2971, Amissl)

#define EC_GROUP_get_curve_name(___group) \
      AROS_LC1(int, EC_GROUP_get_curve_name, \
 AROS_LCA(const EC_GROUP *, (___group), A0), \
     struct Library *, AMISSL_BASE_NAME, 2975, Amissl)

#define SHA256_Final(___md, ___c) \
      AROS_LC2(int, SHA256_Final, \
 AROS_LCA(unsigned char *, (___md), A0), \
 AROS_LCA(SHA256_CTX *, (___c), A1), \
     struct Library *, AMISSL_BASE_NAME, 2977, Amissl)

#define d2i_ECParameters(___key, ___in, ___len) \
      AROS_LC3(EC_KEY *, d2i_ECParameters, \
 AROS_LCA(EC_KEY **, (___key), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 2982, Amissl)

#define SHA384_Init(___c) \
      AROS_LC1(int, SHA384_Init, \
 AROS_LCA(SHA512_CTX *, (___c), A0), \
     struct Library *, AMISSL_BASE_NAME, 2983, Amissl)

#define SHA384_Final(___md, ___c) \
      AROS_LC2(int, SHA384_Final, \
 AROS_LCA(unsigned char *, (___md), A0), \
 AROS_LCA(SHA512_CTX *, (___c), A1), \
     struct Library *, AMISSL_BASE_NAME, 2985, Amissl)

#define SHA384(___d, ___n, ___md) \
      AROS_LC3(unsigned char *, SHA384, \
 AROS_LCA(const unsigned char *, (___d), A0), \
 AROS_LCA(size_t, (___n), D0), \
 AROS_LCA(unsigned char *, (___md), A1), \
     struct Library *, AMISSL_BASE_NAME, 2987, Amissl)

#define EC_POINT_hex2point(___group, ___c, ___p, ___ctx) \
      AROS_LC4(EC_POINT *, EC_POINT_hex2point, \
 AROS_LCA(const EC_GROUP *, (___group), A0), \
 AROS_LCA(const char *, (___c), A1), \
 AROS_LCA(EC_POINT *, (___p), A2), \
 AROS_LCA(BN_CTX *, (___ctx), A3), \
     struct Library *, AMISSL_BASE_NAME, 2990, Amissl)

#define SHA256_Update(___c, ___data, ___len) \
      AROS_LC3(int, SHA256_Update, \
 AROS_LCA(SHA256_CTX *, (___c), A0), \
 AROS_LCA(const void *, (___data), A1), \
 AROS_LCA(size_t, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 2991, Amissl)

#define BN_GF2m_mod_inv_arr(___r, ___b, ___p, ___ctx) \
      AROS_LC4(int, BN_GF2m_mod_inv_arr, \
 AROS_LCA(BIGNUM *, (___r), A0), \
 AROS_LCA(const BIGNUM *, (___b), A1), \
 AROS_LCA(const int *, (___p), A2), \
 AROS_LCA(BN_CTX *, (___ctx), A3), \
     struct Library *, AMISSL_BASE_NAME, 2992, Amissl)

#define DH_check_pub_key(___dh, ___pub_key, ___codes) \
      AROS_LC3(int, DH_check_pub_key, \
 AROS_LCA(const DH *, (___dh), A0), \
 AROS_LCA(const BIGNUM *, (___pub_key), A1), \
 AROS_LCA(int *, (___codes), A2), \
     struct Library *, AMISSL_BASE_NAME, 2995, Amissl)

#define Camellia_cbc_encrypt(___in, ___out, ___length, ___key, ___ivec, ___enc) \
      AROS_LC6(void, Camellia_cbc_encrypt, \
 AROS_LCA(const unsigned char *, (___in), A0), \
 AROS_LCA(unsigned char *, (___out), A1), \
 AROS_LCA(size_t, (___length), D0), \
 AROS_LCA(const CAMELLIA_KEY *, (___key), A2), \
 AROS_LCA(unsigned char *, (___ivec), A3), \
 AROS_LCA(const int, (___enc), D1), \
     struct Library *, AMISSL_BASE_NAME, 2996, Amissl)

#define Camellia_cfb128_encrypt(___in, ___out, ___length, ___key, ___ivec, ___num, ___enc) \
      AROS_LC7(void, Camellia_cfb128_encrypt, \
 AROS_LCA(const unsigned char *, (___in), A0), \
 AROS_LCA(unsigned char *, (___out), A1), \
 AROS_LCA(size_t, (___length), D0), \
 AROS_LCA(const CAMELLIA_KEY *, (___key), A2), \
 AROS_LCA(unsigned char *, (___ivec), A3), \
 AROS_LCA(int *, (___num), D1), \
 AROS_LCA(const int, (___enc), D2), \
     struct Library *, AMISSL_BASE_NAME, 2997, Amissl)

#define Camellia_cfb1_encrypt(___in, ___out, ___length, ___key, ___ivec, ___num, ___enc) \
      AROS_LC7(void, Camellia_cfb1_encrypt, \
 AROS_LCA(const unsigned char *, (___in), A0), \
 AROS_LCA(unsigned char *, (___out), A1), \
 AROS_LCA(size_t, (___length), D0), \
 AROS_LCA(const CAMELLIA_KEY *, (___key), A2), \
 AROS_LCA(unsigned char *, (___ivec), A3), \
 AROS_LCA(int *, (___num), D1), \
 AROS_LCA(const int, (___enc), D2), \
     struct Library *, AMISSL_BASE_NAME, 2998, Amissl)

#define Camellia_cfb8_encrypt(___in, ___out, ___length, ___key, ___ivec, ___num, ___enc) \
      AROS_LC7(void, Camellia_cfb8_encrypt, \
 AROS_LCA(const unsigned char *, (___in), A0), \
 AROS_LCA(unsigned char *, (___out), A1), \
 AROS_LCA(size_t, (___length), D0), \
 AROS_LCA(const CAMELLIA_KEY *, (___key), A2), \
 AROS_LCA(unsigned char *, (___ivec), A3), \
 AROS_LCA(int *, (___num), D1), \
 AROS_LCA(const int, (___enc), D2), \
     struct Library *, AMISSL_BASE_NAME, 2999, Amissl)

#define Camellia_ctr128_encrypt(___in, ___out, ___length, ___key, ___ivec, ___ecount_buf, ___num) \
      AROS_LC7(void, Camellia_ctr128_encrypt, \
 AROS_LCA(const unsigned char *, (___in), A0), \
 AROS_LCA(unsigned char *, (___out), A1), \
 AROS_LCA(size_t, (___length), D0), \
 AROS_LCA(const CAMELLIA_KEY *, (___key), A2), \
 AROS_LCA(unsigned char *, (___ivec), A3), \
 AROS_LCA(unsigned char *, (___ecount_buf), D1), \
 AROS_LCA(unsigned int *, (___num), D2), \
     struct Library *, AMISSL_BASE_NAME, 3000, Amissl)

#define Camellia_decrypt(___in, ___out, ___key) \
      AROS_LC3(void, Camellia_decrypt, \
 AROS_LCA(const unsigned char *, (___in), A0), \
 AROS_LCA(unsigned char *, (___out), A1), \
 AROS_LCA(const CAMELLIA_KEY *, (___key), A2), \
     struct Library *, AMISSL_BASE_NAME, 3001, Amissl)

#define Camellia_ecb_encrypt(___in, ___out, ___key, ___enc) \
      AROS_LC4(void, Camellia_ecb_encrypt, \
 AROS_LCA(const unsigned char *, (___in), A0), \
 AROS_LCA(unsigned char *, (___out), A1), \
 AROS_LCA(const CAMELLIA_KEY *, (___key), A2), \
 AROS_LCA(const int, (___enc), D0), \
     struct Library *, AMISSL_BASE_NAME, 3002, Amissl)

#define Camellia_encrypt(___in, ___out, ___key) \
      AROS_LC3(void, Camellia_encrypt, \
 AROS_LCA(const unsigned char *, (___in), A0), \
 AROS_LCA(unsigned char *, (___out), A1), \
 AROS_LCA(const CAMELLIA_KEY *, (___key), A2), \
     struct Library *, AMISSL_BASE_NAME, 3003, Amissl)

#define Camellia_ofb128_encrypt(___in, ___out, ___length, ___key, ___ivec, ___num) \
      AROS_LC6(void, Camellia_ofb128_encrypt, \
 AROS_LCA(const unsigned char *, (___in), A0), \
 AROS_LCA(unsigned char *, (___out), A1), \
 AROS_LCA(size_t, (___length), D0), \
 AROS_LCA(const CAMELLIA_KEY *, (___key), A2), \
 AROS_LCA(unsigned char *, (___ivec), A3), \
 AROS_LCA(int *, (___num), D1), \
     struct Library *, AMISSL_BASE_NAME, 3004, Amissl)

#define Camellia_set_key(___userKey, ___bits, ___key) \
      AROS_LC3(int, Camellia_set_key, \
 AROS_LCA(const unsigned char *, (___userKey), A0), \
 AROS_LCA(const int, (___bits), D0), \
 AROS_LCA(CAMELLIA_KEY *, (___key), A1), \
     struct Library *, AMISSL_BASE_NAME, 3005, Amissl)

#define EVP_camellia_128_cbc() \
      AROS_LC0(const EVP_CIPHER *, EVP_camellia_128_cbc, \
     struct Library *, AMISSL_BASE_NAME, 3006, Amissl)

#define EVP_camellia_128_cfb128() \
      AROS_LC0(const EVP_CIPHER *, EVP_camellia_128_cfb128, \
     struct Library *, AMISSL_BASE_NAME, 3007, Amissl)

#define EVP_camellia_128_cfb1() \
      AROS_LC0(const EVP_CIPHER *, EVP_camellia_128_cfb1, \
     struct Library *, AMISSL_BASE_NAME, 3008, Amissl)

#define EVP_camellia_128_cfb8() \
      AROS_LC0(const EVP_CIPHER *, EVP_camellia_128_cfb8, \
     struct Library *, AMISSL_BASE_NAME, 3009, Amissl)

#define EVP_camellia_128_ecb() \
      AROS_LC0(const EVP_CIPHER *, EVP_camellia_128_ecb, \
     struct Library *, AMISSL_BASE_NAME, 3010, Amissl)

#define EVP_camellia_128_ofb() \
      AROS_LC0(const EVP_CIPHER *, EVP_camellia_128_ofb, \
     struct Library *, AMISSL_BASE_NAME, 3011, Amissl)

#define EVP_camellia_192_cbc() \
      AROS_LC0(const EVP_CIPHER *, EVP_camellia_192_cbc, \
     struct Library *, AMISSL_BASE_NAME, 3012, Amissl)

#define EVP_camellia_192_cfb128() \
      AROS_LC0(const EVP_CIPHER *, EVP_camellia_192_cfb128, \
     struct Library *, AMISSL_BASE_NAME, 3013, Amissl)

#define EVP_camellia_192_cfb1() \
      AROS_LC0(const EVP_CIPHER *, EVP_camellia_192_cfb1, \
     struct Library *, AMISSL_BASE_NAME, 3014, Amissl)

#define EVP_camellia_192_cfb8() \
      AROS_LC0(const EVP_CIPHER *, EVP_camellia_192_cfb8, \
     struct Library *, AMISSL_BASE_NAME, 3015, Amissl)

#define EVP_camellia_192_ecb() \
      AROS_LC0(const EVP_CIPHER *, EVP_camellia_192_ecb, \
     struct Library *, AMISSL_BASE_NAME, 3016, Amissl)

#define EVP_camellia_192_ofb() \
      AROS_LC0(const EVP_CIPHER *, EVP_camellia_192_ofb, \
     struct Library *, AMISSL_BASE_NAME, 3017, Amissl)

#define EVP_camellia_256_cbc() \
      AROS_LC0(const EVP_CIPHER *, EVP_camellia_256_cbc, \
     struct Library *, AMISSL_BASE_NAME, 3018, Amissl)

#define EVP_camellia_256_cfb128() \
      AROS_LC0(const EVP_CIPHER *, EVP_camellia_256_cfb128, \
     struct Library *, AMISSL_BASE_NAME, 3019, Amissl)

#define EVP_camellia_256_cfb1() \
      AROS_LC0(const EVP_CIPHER *, EVP_camellia_256_cfb1, \
     struct Library *, AMISSL_BASE_NAME, 3020, Amissl)

#define EVP_camellia_256_cfb8() \
      AROS_LC0(const EVP_CIPHER *, EVP_camellia_256_cfb8, \
     struct Library *, AMISSL_BASE_NAME, 3021, Amissl)

#define EVP_camellia_256_ecb() \
      AROS_LC0(const EVP_CIPHER *, EVP_camellia_256_ecb, \
     struct Library *, AMISSL_BASE_NAME, 3022, Amissl)

#define EVP_camellia_256_ofb() \
      AROS_LC0(const EVP_CIPHER *, EVP_camellia_256_ofb, \
     struct Library *, AMISSL_BASE_NAME, 3023, Amissl)

#define AES_bi_ige_encrypt(___in, ___out, ___length, ___key, ___key2, ___ivec, ___enc) \
      AROS_LC7(void, AES_bi_ige_encrypt, \
 AROS_LCA(const unsigned char *, (___in), A0), \
 AROS_LCA(unsigned char *, (___out), A1), \
 AROS_LCA(size_t, (___length), D0), \
 AROS_LCA(const AES_KEY *, (___key), A2), \
 AROS_LCA(const AES_KEY *, (___key2), A3), \
 AROS_LCA(const unsigned char *, (___ivec), D1), \
 AROS_LCA(const int, (___enc), D2), \
     struct Library *, AMISSL_BASE_NAME, 3024, Amissl)

#define SEED_decrypt(___s, ___d, ___ks) \
      AROS_LC3(void, SEED_decrypt, \
 AROS_LCA(const unsigned char *, (___s), A0), \
 AROS_LCA(unsigned char *, (___d), A1), \
 AROS_LCA(const SEED_KEY_SCHEDULE *, (___ks), A2), \
     struct Library *, AMISSL_BASE_NAME, 3025, Amissl)

#define SEED_encrypt(___s, ___d, ___ks) \
      AROS_LC3(void, SEED_encrypt, \
 AROS_LCA(const unsigned char *, (___s), A0), \
 AROS_LCA(unsigned char *, (___d), A1), \
 AROS_LCA(const SEED_KEY_SCHEDULE *, (___ks), A2), \
     struct Library *, AMISSL_BASE_NAME, 3026, Amissl)

#define SEED_cbc_encrypt(___in, ___out, ___len, ___ks, ___ivec, ___enc) \
      AROS_LC6(void, SEED_cbc_encrypt, \
 AROS_LCA(const unsigned char *, (___in), A0), \
 AROS_LCA(unsigned char *, (___out), A1), \
 AROS_LCA(size_t, (___len), D0), \
 AROS_LCA(const SEED_KEY_SCHEDULE *, (___ks), A2), \
 AROS_LCA(unsigned char *, (___ivec), A3), \
 AROS_LCA(int, (___enc), D1), \
     struct Library *, AMISSL_BASE_NAME, 3027, Amissl)

#define EVP_seed_ofb() \
      AROS_LC0(const EVP_CIPHER *, EVP_seed_ofb, \
     struct Library *, AMISSL_BASE_NAME, 3028, Amissl)

#define SEED_cfb128_encrypt(___in, ___out, ___len, ___ks, ___ivec, ___num, ___enc) \
      AROS_LC7(void, SEED_cfb128_encrypt, \
 AROS_LCA(const unsigned char *, (___in), A0), \
 AROS_LCA(unsigned char *, (___out), A1), \
 AROS_LCA(size_t, (___len), D0), \
 AROS_LCA(const SEED_KEY_SCHEDULE *, (___ks), A2), \
 AROS_LCA(unsigned char *, (___ivec), A3), \
 AROS_LCA(int *, (___num), D1), \
 AROS_LCA(int, (___enc), D2), \
     struct Library *, AMISSL_BASE_NAME, 3029, Amissl)

#define SEED_ofb128_encrypt(___in, ___out, ___len, ___ks, ___ivec, ___num) \
      AROS_LC6(void, SEED_ofb128_encrypt, \
 AROS_LCA(const unsigned char *, (___in), A0), \
 AROS_LCA(unsigned char *, (___out), A1), \
 AROS_LCA(size_t, (___len), D0), \
 AROS_LCA(const SEED_KEY_SCHEDULE *, (___ks), A2), \
 AROS_LCA(unsigned char *, (___ivec), A3), \
 AROS_LCA(int *, (___num), D1), \
     struct Library *, AMISSL_BASE_NAME, 3030, Amissl)

#define EVP_seed_cbc() \
      AROS_LC0(const EVP_CIPHER *, EVP_seed_cbc, \
     struct Library *, AMISSL_BASE_NAME, 3031, Amissl)

#define SEED_ecb_encrypt(___in, ___out, ___ks, ___enc) \
      AROS_LC4(void, SEED_ecb_encrypt, \
 AROS_LCA(const unsigned char *, (___in), A0), \
 AROS_LCA(unsigned char *, (___out), A1), \
 AROS_LCA(const SEED_KEY_SCHEDULE *, (___ks), A2), \
 AROS_LCA(int, (___enc), D0), \
     struct Library *, AMISSL_BASE_NAME, 3032, Amissl)

#define EVP_seed_ecb() \
      AROS_LC0(const EVP_CIPHER *, EVP_seed_ecb, \
     struct Library *, AMISSL_BASE_NAME, 3033, Amissl)

#define SEED_set_key(___rawkey, ___ks) \
      AROS_LC2(void, SEED_set_key, \
 AROS_LCA(const unsigned char *, (___rawkey), A0), \
 AROS_LCA(SEED_KEY_SCHEDULE *, (___ks), A1), \
     struct Library *, AMISSL_BASE_NAME, 3034, Amissl)

#define EVP_seed_cfb128() \
      AROS_LC0(const EVP_CIPHER *, EVP_seed_cfb128, \
     struct Library *, AMISSL_BASE_NAME, 3035, Amissl)

#define AES_unwrap_key(___key, ___iv, ___out, ___in, ___inlen) \
      AROS_LC5(int, AES_unwrap_key, \
 AROS_LCA(AES_KEY *, (___key), A0), \
 AROS_LCA(const unsigned char *, (___iv), A1), \
 AROS_LCA(unsigned char *, (___out), A2), \
 AROS_LCA(const unsigned char *, (___in), A3), \
 AROS_LCA(unsigned int, (___inlen), D0), \
     struct Library *, AMISSL_BASE_NAME, 3036, Amissl)

#define AES_wrap_key(___key, ___iv, ___out, ___in, ___inlen) \
      AROS_LC5(int, AES_wrap_key, \
 AROS_LCA(AES_KEY *, (___key), A0), \
 AROS_LCA(const unsigned char *, (___iv), A1), \
 AROS_LCA(unsigned char *, (___out), A2), \
 AROS_LCA(const unsigned char *, (___in), A3), \
 AROS_LCA(unsigned int, (___inlen), D0), \
     struct Library *, AMISSL_BASE_NAME, 3037, Amissl)

#define CMS_ReceiptRequest_free(___rr) \
      AROS_LC1(void, CMS_ReceiptRequest_free, \
 AROS_LCA(CMS_ReceiptRequest *, (___rr), A0), \
     struct Library *, AMISSL_BASE_NAME, 3038, Amissl)

#define CMS_add0_CertificateChoices(___cms) \
      AROS_LC1(CMS_CertificateChoices *, CMS_add0_CertificateChoices, \
 AROS_LCA(CMS_ContentInfo *, (___cms), A0), \
     struct Library *, AMISSL_BASE_NAME, 3040, Amissl)

#define CMS_unsigned_add1_attr_by_OBJ(___si, ___obj, ___type, ___bytes, ___len) \
      AROS_LC5(int, CMS_unsigned_add1_attr_by_OBJ, \
 AROS_LCA(CMS_SignerInfo *, (___si), A0), \
 AROS_LCA(const ASN1_OBJECT *, (___obj), A1), \
 AROS_LCA(int, (___type), D0), \
 AROS_LCA(const void *, (___bytes), A2), \
 AROS_LCA(int, (___len), D1), \
     struct Library *, AMISSL_BASE_NAME, 3041, Amissl)

#define ERR_load_CMS_strings() \
      AROS_LC0(int, ERR_load_CMS_strings, \
     struct Library *, AMISSL_BASE_NAME, 3042, Amissl)

#define CMS_sign_receipt(___si, ___signcert, ___pkey, ___certs, ___flags) \
      AROS_LC5(CMS_ContentInfo *, CMS_sign_receipt, \
 AROS_LCA(CMS_SignerInfo *, (___si), A0), \
 AROS_LCA(X509 *, (___signcert), A1), \
 AROS_LCA(EVP_PKEY *, (___pkey), A2), \
 AROS_LCA(STACK_OF(X509) *, (___certs), A3), \
 AROS_LCA(unsigned int, (___flags), D0), \
     struct Library *, AMISSL_BASE_NAME, 3043, Amissl)

#define i2d_CMS_ContentInfo(___a, ___out) \
      AROS_LC2(int, i2d_CMS_ContentInfo, \
 AROS_LCA(const CMS_ContentInfo *, (___a), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 3044, Amissl)

#define CMS_signed_delete_attr(___si, ___loc) \
      AROS_LC2(X509_ATTRIBUTE *, CMS_signed_delete_attr, \
 AROS_LCA(CMS_SignerInfo *, (___si), A0), \
 AROS_LCA(int, (___loc), D0), \
     struct Library *, AMISSL_BASE_NAME, 3045, Amissl)

#define d2i_CMS_bio(___bp, ___cms) \
      AROS_LC2(CMS_ContentInfo *, d2i_CMS_bio, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(CMS_ContentInfo **, (___cms), A1), \
     struct Library *, AMISSL_BASE_NAME, 3046, Amissl)

#define CMS_unsigned_get_attr_by_NID(___si, ___nid, ___lastpos) \
      AROS_LC3(int, CMS_unsigned_get_attr_by_NID, \
 AROS_LCA(const CMS_SignerInfo *, (___si), A0), \
 AROS_LCA(int, (___nid), D0), \
 AROS_LCA(int, (___lastpos), D1), \
     struct Library *, AMISSL_BASE_NAME, 3047, Amissl)

#define CMS_verify(___cms, ___certs, ___store, ___dcont, ___out, ___flags) \
      AROS_LC6(int, CMS_verify, \
 AROS_LCA(CMS_ContentInfo *, (___cms), A0), \
 AROS_LCA(STACK_OF(X509) *, (___certs), A1), \
 AROS_LCA(X509_STORE *, (___store), A2), \
 AROS_LCA(BIO *, (___dcont), A3), \
 AROS_LCA(BIO *, (___out), D0), \
 AROS_LCA(unsigned int, (___flags), D1), \
     struct Library *, AMISSL_BASE_NAME, 3048, Amissl)

#define SMIME_read_CMS(___bio, ___biocont) \
      AROS_LC2(CMS_ContentInfo *, SMIME_read_CMS, \
 AROS_LCA(BIO *, (___bio), A0), \
 AROS_LCA(BIO **, (___biocont), A1), \
     struct Library *, AMISSL_BASE_NAME, 3049, Amissl)

#define CMS_decrypt_set1_key(___cms, ___key, ___keylen, ___id, ___idlen) \
      AROS_LC5(int, CMS_decrypt_set1_key, \
 AROS_LCA(CMS_ContentInfo *, (___cms), A0), \
 AROS_LCA(unsigned char *, (___key), A1), \
 AROS_LCA(size_t, (___keylen), D0), \
 AROS_LCA(const unsigned char *, (___id), A2), \
 AROS_LCA(size_t, (___idlen), D1), \
     struct Library *, AMISSL_BASE_NAME, 3050, Amissl)

#define CMS_SignerInfo_get0_algs(___si, ___pk, ___signer, ___pdig, ___psig) \
      AROS_LC5(void, CMS_SignerInfo_get0_algs, \
 AROS_LCA(CMS_SignerInfo *, (___si), A0), \
 AROS_LCA(EVP_PKEY **, (___pk), A1), \
 AROS_LCA(X509 **, (___signer), A2), \
 AROS_LCA(X509_ALGOR **, (___pdig), A3), \
 AROS_LCA(X509_ALGOR **, (___psig), D0), \
     struct Library *, AMISSL_BASE_NAME, 3051, Amissl)

#define CMS_add1_cert(___cms, ___cert) \
      AROS_LC2(int, CMS_add1_cert, \
 AROS_LCA(CMS_ContentInfo *, (___cms), A0), \
 AROS_LCA(X509 *, (___cert), A1), \
     struct Library *, AMISSL_BASE_NAME, 3052, Amissl)

#define CMS_set_detached(___cms, ___detached) \
      AROS_LC2(int, CMS_set_detached, \
 AROS_LCA(CMS_ContentInfo *, (___cms), A0), \
 AROS_LCA(int, (___detached), D0), \
     struct Library *, AMISSL_BASE_NAME, 3053, Amissl)

#define CMS_encrypt(___certs, ___in, ___cipher, ___flags) \
      AROS_LC4(CMS_ContentInfo *, CMS_encrypt, \
 AROS_LCA(STACK_OF(X509) *, (___certs), A0), \
 AROS_LCA(BIO *, (___in), A1), \
 AROS_LCA(const EVP_CIPHER *, (___cipher), A2), \
 AROS_LCA(unsigned int, (___flags), D0), \
     struct Library *, AMISSL_BASE_NAME, 3054, Amissl)

#define CMS_EnvelopedData_create(___cipher) \
      AROS_LC1(CMS_ContentInfo *, CMS_EnvelopedData_create, \
 AROS_LCA(const EVP_CIPHER *, (___cipher), A0), \
     struct Library *, AMISSL_BASE_NAME, 3055, Amissl)

#define CMS_uncompress(___cms, ___dcont, ___out, ___flags) \
      AROS_LC4(int, CMS_uncompress, \
 AROS_LCA(CMS_ContentInfo *, (___cms), A0), \
 AROS_LCA(BIO *, (___dcont), A1), \
 AROS_LCA(BIO *, (___out), A2), \
 AROS_LCA(unsigned int, (___flags), D0), \
     struct Library *, AMISSL_BASE_NAME, 3056, Amissl)

#define CMS_add0_crl(___cms, ___crl) \
      AROS_LC2(int, CMS_add0_crl, \
 AROS_LCA(CMS_ContentInfo *, (___cms), A0), \
 AROS_LCA(X509_CRL *, (___crl), A1), \
     struct Library *, AMISSL_BASE_NAME, 3057, Amissl)

#define CMS_SignerInfo_verify_content(___si, ___chain) \
      AROS_LC2(int, CMS_SignerInfo_verify_content, \
 AROS_LCA(CMS_SignerInfo *, (___si), A0), \
 AROS_LCA(BIO *, (___chain), A1), \
     struct Library *, AMISSL_BASE_NAME, 3058, Amissl)

#define CMS_unsigned_get0_data_by_OBJ(___si, ___oid, ___lastpos, ___type) \
      AROS_LC4(void *, CMS_unsigned_get0_data_by_OBJ, \
 AROS_LCA(CMS_SignerInfo *, (___si), A0), \
 AROS_LCA(ASN1_OBJECT *, (___oid), A1), \
 AROS_LCA(int, (___lastpos), D0), \
 AROS_LCA(int, (___type), D1), \
     struct Library *, AMISSL_BASE_NAME, 3059, Amissl)

#define PEM_write_bio_CMS(___out, ___cms) \
      AROS_LC2(int, PEM_write_bio_CMS, \
 AROS_LCA(BIO *, (___out), A0), \
 AROS_LCA(const CMS_ContentInfo *, (___cms), A1), \
     struct Library *, AMISSL_BASE_NAME, 3060, Amissl)

#define CMS_unsigned_get_attr(___si, ___loc) \
      AROS_LC2(X509_ATTRIBUTE *, CMS_unsigned_get_attr, \
 AROS_LCA(const CMS_SignerInfo *, (___si), A0), \
 AROS_LCA(int, (___loc), D0), \
     struct Library *, AMISSL_BASE_NAME, 3061, Amissl)

#define CMS_RecipientInfo_ktri_cert_cmp(___ri, ___cert) \
      AROS_LC2(int, CMS_RecipientInfo_ktri_cert_cmp, \
 AROS_LCA(CMS_RecipientInfo *, (___ri), A0), \
 AROS_LCA(X509 *, (___cert), A1), \
     struct Library *, AMISSL_BASE_NAME, 3062, Amissl)

#define CMS_RecipientInfo_ktri_get0_algs(___ri, ___pk, ___recip, ___palg) \
      AROS_LC4(int, CMS_RecipientInfo_ktri_get0_algs, \
 AROS_LCA(CMS_RecipientInfo *, (___ri), A0), \
 AROS_LCA(EVP_PKEY **, (___pk), A1), \
 AROS_LCA(X509 **, (___recip), A2), \
 AROS_LCA(X509_ALGOR **, (___palg), A3), \
     struct Library *, AMISSL_BASE_NAME, 3063, Amissl)

#define CMS_ContentInfo_free(___cms) \
      AROS_LC1(void, CMS_ContentInfo_free, \
 AROS_LCA(CMS_ContentInfo *, (___cms), A0), \
     struct Library *, AMISSL_BASE_NAME, 3064, Amissl)

#define CMS_final(___cms, ___data, ___dcont, ___flags) \
      AROS_LC4(int, CMS_final, \
 AROS_LCA(CMS_ContentInfo *, (___cms), A0), \
 AROS_LCA(BIO *, (___data), A1), \
 AROS_LCA(BIO *, (___dcont), A2), \
 AROS_LCA(unsigned int, (___flags), D0), \
     struct Library *, AMISSL_BASE_NAME, 3065, Amissl)

#define CMS_add_simple_smimecap(___algs, ___algnid, ___keysize) \
      AROS_LC3(int, CMS_add_simple_smimecap, \
 AROS_LCA(STACK_OF(X509_ALGOR) **, (___algs), A0), \
 AROS_LCA(int, (___algnid), D0), \
 AROS_LCA(int, (___keysize), D1), \
     struct Library *, AMISSL_BASE_NAME, 3066, Amissl)

#define CMS_SignerInfo_verify(___si) \
      AROS_LC1(int, CMS_SignerInfo_verify, \
 AROS_LCA(CMS_SignerInfo *, (___si), A0), \
     struct Library *, AMISSL_BASE_NAME, 3067, Amissl)

#define CMS_data(___cms, ___out, ___flags) \
      AROS_LC3(int, CMS_data, \
 AROS_LCA(CMS_ContentInfo *, (___cms), A0), \
 AROS_LCA(BIO *, (___out), A1), \
 AROS_LCA(unsigned int, (___flags), D0), \
     struct Library *, AMISSL_BASE_NAME, 3068, Amissl)

#define d2i_CMS_ReceiptRequest(___a, ___in, ___len) \
      AROS_LC3(CMS_ReceiptRequest *, d2i_CMS_ReceiptRequest, \
 AROS_LCA(CMS_ReceiptRequest **, (___a), A0), \
 AROS_LCA(unsigned char const **, (___in), A1), \
 AROS_LCA(long, (___len), A2), \
     struct Library *, AMISSL_BASE_NAME, 3069, Amissl)

#define CMS_compress(___in, ___comp_nid, ___flags) \
      AROS_LC3(CMS_ContentInfo *, CMS_compress, \
 AROS_LCA(BIO *, (___in), A0), \
 AROS_LCA(int, (___comp_nid), D0), \
 AROS_LCA(unsigned int, (___flags), D1), \
     struct Library *, AMISSL_BASE_NAME, 3070, Amissl)

#define CMS_digest_create(___in, ___md, ___flags) \
      AROS_LC3(CMS_ContentInfo *, CMS_digest_create, \
 AROS_LCA(BIO *, (___in), A0), \
 AROS_LCA(const EVP_MD *, (___md), A1), \
 AROS_LCA(unsigned int, (___flags), D0), \
     struct Library *, AMISSL_BASE_NAME, 3071, Amissl)

#define CMS_SignerInfo_cert_cmp(___si, ___cert) \
      AROS_LC2(int, CMS_SignerInfo_cert_cmp, \
 AROS_LCA(CMS_SignerInfo *, (___si), A0), \
 AROS_LCA(X509 *, (___cert), A1), \
     struct Library *, AMISSL_BASE_NAME, 3072, Amissl)

#define CMS_SignerInfo_sign(___si) \
      AROS_LC1(int, CMS_SignerInfo_sign, \
 AROS_LCA(CMS_SignerInfo *, (___si), A0), \
     struct Library *, AMISSL_BASE_NAME, 3073, Amissl)

#define CMS_data_create(___in, ___flags) \
      AROS_LC2(CMS_ContentInfo *, CMS_data_create, \
 AROS_LCA(BIO *, (___in), A0), \
 AROS_LCA(unsigned int, (___flags), D0), \
     struct Library *, AMISSL_BASE_NAME, 3074, Amissl)

#define i2d_CMS_bio(___bp, ___cms) \
      AROS_LC2(int, i2d_CMS_bio, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(CMS_ContentInfo *, (___cms), A1), \
     struct Library *, AMISSL_BASE_NAME, 3075, Amissl)

#define CMS_EncryptedData_set1_key(___cms, ___ciph, ___key, ___keylen) \
      AROS_LC4(int, CMS_EncryptedData_set1_key, \
 AROS_LCA(CMS_ContentInfo *, (___cms), A0), \
 AROS_LCA(const EVP_CIPHER *, (___ciph), A1), \
 AROS_LCA(const unsigned char *, (___key), A2), \
 AROS_LCA(size_t, (___keylen), D0), \
     struct Library *, AMISSL_BASE_NAME, 3076, Amissl)

#define CMS_decrypt(___cms, ___pkey, ___cert, ___dcont, ___out, ___flags) \
      AROS_LC6(int, CMS_decrypt, \
 AROS_LCA(CMS_ContentInfo *, (___cms), A0), \
 AROS_LCA(EVP_PKEY *, (___pkey), A1), \
 AROS_LCA(X509 *, (___cert), A2), \
 AROS_LCA(BIO *, (___dcont), A3), \
 AROS_LCA(BIO *, (___out), D0), \
 AROS_LCA(unsigned int, (___flags), D1), \
     struct Library *, AMISSL_BASE_NAME, 3077, Amissl)

#define CMS_unsigned_delete_attr(___si, ___loc) \
      AROS_LC2(X509_ATTRIBUTE *, CMS_unsigned_delete_attr, \
 AROS_LCA(CMS_SignerInfo *, (___si), A0), \
 AROS_LCA(int, (___loc), D0), \
     struct Library *, AMISSL_BASE_NAME, 3078, Amissl)

#define CMS_unsigned_get_attr_count(___si) \
      AROS_LC1(int, CMS_unsigned_get_attr_count, \
 AROS_LCA(const CMS_SignerInfo *, (___si), A0), \
     struct Library *, AMISSL_BASE_NAME, 3079, Amissl)

#define CMS_add_smimecap(___si, ___algs) \
      AROS_LC2(int, CMS_add_smimecap, \
 AROS_LCA(CMS_SignerInfo *, (___si), A0), \
 AROS_LCA(STACK_OF(X509_ALGOR) *, (___algs), A1), \
     struct Library *, AMISSL_BASE_NAME, 3080, Amissl)

#define CMS_signed_get_attr_by_OBJ(___si, ___obj, ___lastpos) \
      AROS_LC3(int, CMS_signed_get_attr_by_OBJ, \
 AROS_LCA(const CMS_SignerInfo *, (___si), A0), \
 AROS_LCA(const ASN1_OBJECT *, (___obj), A1), \
 AROS_LCA(int, (___lastpos), D0), \
     struct Library *, AMISSL_BASE_NAME, 3082, Amissl)

#define d2i_CMS_ContentInfo(___a, ___in, ___len) \
      AROS_LC3(CMS_ContentInfo *, d2i_CMS_ContentInfo, \
 AROS_LCA(CMS_ContentInfo **, (___a), A0), \
 AROS_LCA(unsigned char const **, (___in), A1), \
 AROS_LCA(long, (___len), A2), \
     struct Library *, AMISSL_BASE_NAME, 3083, Amissl)

#define CMS_add_standard_smimecap(___smcap) \
      AROS_LC1(int, CMS_add_standard_smimecap, \
 AROS_LCA(STACK_OF(X509_ALGOR) **, (___smcap), A0), \
     struct Library *, AMISSL_BASE_NAME, 3084, Amissl)

#define CMS_ContentInfo_new() \
      AROS_LC0(CMS_ContentInfo *, CMS_ContentInfo_new, \
     struct Library *, AMISSL_BASE_NAME, 3085, Amissl)

#define CMS_RecipientInfo_type(___ri) \
      AROS_LC1(int, CMS_RecipientInfo_type, \
 AROS_LCA(CMS_RecipientInfo *, (___ri), A0), \
     struct Library *, AMISSL_BASE_NAME, 3086, Amissl)

#define CMS_get0_type(___cms) \
      AROS_LC1(const ASN1_OBJECT *, CMS_get0_type, \
 AROS_LCA(const CMS_ContentInfo *, (___cms), A0), \
     struct Library *, AMISSL_BASE_NAME, 3087, Amissl)

#define CMS_is_detached(___cms) \
      AROS_LC1(int, CMS_is_detached, \
 AROS_LCA(CMS_ContentInfo *, (___cms), A0), \
     struct Library *, AMISSL_BASE_NAME, 3088, Amissl)

#define CMS_sign(___signcert, ___pkey, ___certs, ___data, ___flags) \
      AROS_LC5(CMS_ContentInfo *, CMS_sign, \
 AROS_LCA(X509 *, (___signcert), A0), \
 AROS_LCA(EVP_PKEY *, (___pkey), A1), \
 AROS_LCA(STACK_OF(X509) *, (___certs), A2), \
 AROS_LCA(BIO *, (___data), A3), \
 AROS_LCA(unsigned int, (___flags), D0), \
     struct Library *, AMISSL_BASE_NAME, 3089, Amissl)

#define CMS_signed_add1_attr(___si, ___attr) \
      AROS_LC2(int, CMS_signed_add1_attr, \
 AROS_LCA(CMS_SignerInfo *, (___si), A0), \
 AROS_LCA(X509_ATTRIBUTE *, (___attr), A1), \
     struct Library *, AMISSL_BASE_NAME, 3090, Amissl)

#define CMS_unsigned_get_attr_by_OBJ(___si, ___obj, ___lastpos) \
      AROS_LC3(int, CMS_unsigned_get_attr_by_OBJ, \
 AROS_LCA(const CMS_SignerInfo *, (___si), A0), \
 AROS_LCA(const ASN1_OBJECT *, (___obj), A1), \
 AROS_LCA(int, (___lastpos), D0), \
     struct Library *, AMISSL_BASE_NAME, 3091, Amissl)

#define SMIME_write_CMS(___bio, ___cms, ___data, ___flags) \
      AROS_LC4(int, SMIME_write_CMS, \
 AROS_LCA(BIO *, (___bio), A0), \
 AROS_LCA(CMS_ContentInfo *, (___cms), A1), \
 AROS_LCA(BIO *, (___data), A2), \
 AROS_LCA(int, (___flags), D0), \
     struct Library *, AMISSL_BASE_NAME, 3092, Amissl)

#define CMS_EncryptedData_decrypt(___cms, ___key, ___keylen, ___dcont, ___out, ___flags) \
      AROS_LC6(int, CMS_EncryptedData_decrypt, \
 AROS_LCA(CMS_ContentInfo *, (___cms), A0), \
 AROS_LCA(const unsigned char *, (___key), A1), \
 AROS_LCA(size_t, (___keylen), D0), \
 AROS_LCA(BIO *, (___dcont), A2), \
 AROS_LCA(BIO *, (___out), A3), \
 AROS_LCA(unsigned int, (___flags), D1), \
     struct Library *, AMISSL_BASE_NAME, 3093, Amissl)

#define CMS_get0_RecipientInfos(___cms) \
      AROS_LC1(STACK_OF(CMS_RecipientInfo) *, CMS_get0_RecipientInfos, \
 AROS_LCA(CMS_ContentInfo *, (___cms), A0), \
     struct Library *, AMISSL_BASE_NAME, 3094, Amissl)

#define CMS_add0_RevocationInfoChoice(___cms) \
      AROS_LC1(CMS_RevocationInfoChoice *, CMS_add0_RevocationInfoChoice, \
 AROS_LCA(CMS_ContentInfo *, (___cms), A0), \
     struct Library *, AMISSL_BASE_NAME, 3095, Amissl)

#define CMS_decrypt_set1_pkey(___cms, ___pk, ___cert) \
      AROS_LC3(int, CMS_decrypt_set1_pkey, \
 AROS_LCA(CMS_ContentInfo *, (___cms), A0), \
 AROS_LCA(EVP_PKEY *, (___pk), A1), \
 AROS_LCA(X509 *, (___cert), A2), \
     struct Library *, AMISSL_BASE_NAME, 3096, Amissl)

#define CMS_SignerInfo_set1_signer_cert(___si, ___signer) \
      AROS_LC2(void, CMS_SignerInfo_set1_signer_cert, \
 AROS_LCA(CMS_SignerInfo *, (___si), A0), \
 AROS_LCA(X509 *, (___signer), A1), \
     struct Library *, AMISSL_BASE_NAME, 3097, Amissl)

#define CMS_get0_signers(___cms) \
      AROS_LC1(STACK_OF(X509) *, CMS_get0_signers, \
 AROS_LCA(CMS_ContentInfo *, (___cms), A0), \
     struct Library *, AMISSL_BASE_NAME, 3098, Amissl)

#define CMS_ReceiptRequest_get0_values(___rr, ___pcid, ___pallorfirst, ___plist, ___prto) \
      AROS_LC5(void, CMS_ReceiptRequest_get0_values, \
 AROS_LCA(CMS_ReceiptRequest *, (___rr), A0), \
 AROS_LCA(ASN1_STRING **, (___pcid), A1), \
 AROS_LCA(int *, (___pallorfirst), A2), \
 AROS_LCA(STACK_OF(GENERAL_NAMES) **, (___plist), A3), \
 AROS_LCA(STACK_OF(GENERAL_NAMES) **, (___prto), D0), \
     struct Library *, AMISSL_BASE_NAME, 3099, Amissl)

#define CMS_signed_get0_data_by_OBJ(___si, ___oid, ___lastpos, ___type) \
      AROS_LC4(void *, CMS_signed_get0_data_by_OBJ, \
 AROS_LCA(const CMS_SignerInfo *, (___si), A0), \
 AROS_LCA(const ASN1_OBJECT *, (___oid), A1), \
 AROS_LCA(int, (___lastpos), D0), \
 AROS_LCA(int, (___type), D1), \
     struct Library *, AMISSL_BASE_NAME, 3100, Amissl)

#define CMS_get0_SignerInfos(___cms) \
      AROS_LC1(STACK_OF(CMS_SignerInfo) *, CMS_get0_SignerInfos, \
 AROS_LCA(CMS_ContentInfo *, (___cms), A0), \
     struct Library *, AMISSL_BASE_NAME, 3101, Amissl)

#define CMS_add0_cert(___cms, ___cert) \
      AROS_LC2(int, CMS_add0_cert, \
 AROS_LCA(CMS_ContentInfo *, (___cms), A0), \
 AROS_LCA(X509 *, (___cert), A1), \
     struct Library *, AMISSL_BASE_NAME, 3102, Amissl)

#define CMS_EncryptedData_encrypt(___in, ___cipher, ___key, ___keylen, ___flags) \
      AROS_LC5(CMS_ContentInfo *, CMS_EncryptedData_encrypt, \
 AROS_LCA(BIO *, (___in), A0), \
 AROS_LCA(const EVP_CIPHER *, (___cipher), A1), \
 AROS_LCA(const unsigned char *, (___key), A2), \
 AROS_LCA(size_t, (___keylen), D0), \
 AROS_LCA(unsigned int, (___flags), D1), \
     struct Library *, AMISSL_BASE_NAME, 3103, Amissl)

#define CMS_digest_verify(___cms, ___dcont, ___out, ___flags) \
      AROS_LC4(int, CMS_digest_verify, \
 AROS_LCA(CMS_ContentInfo *, (___cms), A0), \
 AROS_LCA(BIO *, (___dcont), A1), \
 AROS_LCA(BIO *, (___out), A2), \
 AROS_LCA(unsigned int, (___flags), D0), \
     struct Library *, AMISSL_BASE_NAME, 3104, Amissl)

#define CMS_set1_signers_certs(___cms, ___certs, ___flags) \
      AROS_LC3(int, CMS_set1_signers_certs, \
 AROS_LCA(CMS_ContentInfo *, (___cms), A0), \
 AROS_LCA(STACK_OF(X509) *, (___certs), A1), \
 AROS_LCA(unsigned int, (___flags), D0), \
     struct Library *, AMISSL_BASE_NAME, 3105, Amissl)

#define CMS_signed_get_attr(___si, ___loc) \
      AROS_LC2(X509_ATTRIBUTE *, CMS_signed_get_attr, \
 AROS_LCA(const CMS_SignerInfo *, (___si), A0), \
 AROS_LCA(int, (___loc), D0), \
     struct Library *, AMISSL_BASE_NAME, 3106, Amissl)

#define CMS_RecipientInfo_set0_key(___ri, ___key, ___keylen) \
      AROS_LC3(int, CMS_RecipientInfo_set0_key, \
 AROS_LCA(CMS_RecipientInfo *, (___ri), A0), \
 AROS_LCA(unsigned char *, (___key), A1), \
 AROS_LCA(size_t, (___keylen), D0), \
     struct Library *, AMISSL_BASE_NAME, 3107, Amissl)

#define CMS_SignedData_init(___cms) \
      AROS_LC1(int, CMS_SignedData_init, \
 AROS_LCA(CMS_ContentInfo *, (___cms), A0), \
     struct Library *, AMISSL_BASE_NAME, 3108, Amissl)

#define CMS_RecipientInfo_kekri_get0_id(___ri, ___palg, ___pid, ___pdate, ___potherid, ___pothertype) \
      AROS_LC6(int, CMS_RecipientInfo_kekri_get0_id, \
 AROS_LCA(CMS_RecipientInfo *, (___ri), A0), \
 AROS_LCA(X509_ALGOR **, (___palg), A1), \
 AROS_LCA(ASN1_OCTET_STRING **, (___pid), A2), \
 AROS_LCA(ASN1_GENERALIZEDTIME **, (___pdate), A3), \
 AROS_LCA(ASN1_OBJECT **, (___potherid), D0), \
 AROS_LCA(ASN1_TYPE **, (___pothertype), D1), \
     struct Library *, AMISSL_BASE_NAME, 3109, Amissl)

#define CMS_verify_receipt(___rcms, ___ocms, ___certs, ___store, ___flags) \
      AROS_LC5(int, CMS_verify_receipt, \
 AROS_LCA(CMS_ContentInfo *, (___rcms), A0), \
 AROS_LCA(CMS_ContentInfo *, (___ocms), A1), \
 AROS_LCA(STACK_OF(X509) *, (___certs), A2), \
 AROS_LCA(X509_STORE *, (___store), A3), \
 AROS_LCA(unsigned int, (___flags), D0), \
     struct Library *, AMISSL_BASE_NAME, 3110, Amissl)

#define PEM_read_bio_CMS(___bp, ___x, ___cb, ___u) \
      AROS_LC4(CMS_ContentInfo *, PEM_read_bio_CMS, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(CMS_ContentInfo **, (___x), A1), \
 AROS_LCA(pem_password_cb *, (___cb), A2), \
 AROS_LCA(void *, (___u), A3), \
     struct Library *, AMISSL_BASE_NAME, 3111, Amissl)

#define CMS_get1_crls(___cms) \
      AROS_LC1(STACK_OF(X509_CRL) *, CMS_get1_crls, \
 AROS_LCA(CMS_ContentInfo *, (___cms), A0), \
     struct Library *, AMISSL_BASE_NAME, 3112, Amissl)

#define CMS_add0_recipient_key(___cms, ___nid, ___key, ___keylen, ___id, ___idlen, ___date, ___otherTypeId, ___otherType) \
      AROS_LC9(CMS_RecipientInfo *, CMS_add0_recipient_key, \
 AROS_LCA(CMS_ContentInfo *, (___cms), A0), \
 AROS_LCA(int, (___nid), D0), \
 AROS_LCA(unsigned char *, (___key), A1), \
 AROS_LCA(size_t, (___keylen), D1), \
 AROS_LCA(unsigned char *, (___id), A2), \
 AROS_LCA(size_t, (___idlen), D2), \
 AROS_LCA(ASN1_GENERALIZEDTIME *, (___date), A3), \
 AROS_LCA(ASN1_OBJECT *, (___otherTypeId), D3), \
 AROS_LCA(ASN1_TYPE *, (___otherType), D4), \
     struct Library *, AMISSL_BASE_NAME, 3113, Amissl)

#define CMS_ReceiptRequest_new() \
      AROS_LC0(CMS_ReceiptRequest *, CMS_ReceiptRequest_new, \
     struct Library *, AMISSL_BASE_NAME, 3114, Amissl)

#define CMS_get0_content(___cms) \
      AROS_LC1(ASN1_OCTET_STRING **, CMS_get0_content, \
 AROS_LCA(CMS_ContentInfo *, (___cms), A0), \
     struct Library *, AMISSL_BASE_NAME, 3115, Amissl)

#define CMS_get1_ReceiptRequest(___si, ___prr) \
      AROS_LC2(int, CMS_get1_ReceiptRequest, \
 AROS_LCA(CMS_SignerInfo *, (___si), A0), \
 AROS_LCA(CMS_ReceiptRequest **, (___prr), A1), \
     struct Library *, AMISSL_BASE_NAME, 3116, Amissl)

#define CMS_signed_add1_attr_by_OBJ(___si, ___obj, ___type, ___bytes, ___len) \
      AROS_LC5(int, CMS_signed_add1_attr_by_OBJ, \
 AROS_LCA(CMS_SignerInfo *, (___si), A0), \
 AROS_LCA(const ASN1_OBJECT *, (___obj), A1), \
 AROS_LCA(int, (___type), D0), \
 AROS_LCA(const void *, (___bytes), A2), \
 AROS_LCA(int, (___len), D1), \
     struct Library *, AMISSL_BASE_NAME, 3117, Amissl)

#define CMS_RecipientInfo_kekri_id_cmp(___ri, ___id, ___idlen) \
      AROS_LC3(int, CMS_RecipientInfo_kekri_id_cmp, \
 AROS_LCA(CMS_RecipientInfo *, (___ri), A0), \
 AROS_LCA(const unsigned char *, (___id), A1), \
 AROS_LCA(size_t, (___idlen), D0), \
     struct Library *, AMISSL_BASE_NAME, 3118, Amissl)

#define CMS_add1_ReceiptRequest(___si, ___rr) \
      AROS_LC2(int, CMS_add1_ReceiptRequest, \
 AROS_LCA(CMS_SignerInfo *, (___si), A0), \
 AROS_LCA(CMS_ReceiptRequest *, (___rr), A1), \
     struct Library *, AMISSL_BASE_NAME, 3119, Amissl)

#define CMS_SignerInfo_get0_signer_id(___si, ___keyid, ___issuer, ___sno) \
      AROS_LC4(int, CMS_SignerInfo_get0_signer_id, \
 AROS_LCA(CMS_SignerInfo *, (___si), A0), \
 AROS_LCA(ASN1_OCTET_STRING **, (___keyid), A1), \
 AROS_LCA(X509_NAME **, (___issuer), A2), \
 AROS_LCA(ASN1_INTEGER **, (___sno), A3), \
     struct Library *, AMISSL_BASE_NAME, 3120, Amissl)

#define CMS_unsigned_add1_attr_by_NID(___si, ___nid, ___type, ___bytes, ___len) \
      AROS_LC5(int, CMS_unsigned_add1_attr_by_NID, \
 AROS_LCA(CMS_SignerInfo *, (___si), A0), \
 AROS_LCA(int, (___nid), D0), \
 AROS_LCA(int, (___type), D1), \
 AROS_LCA(const void *, (___bytes), A1), \
 AROS_LCA(int, (___len), D2), \
     struct Library *, AMISSL_BASE_NAME, 3121, Amissl)

#define CMS_unsigned_add1_attr(___si, ___attr) \
      AROS_LC2(int, CMS_unsigned_add1_attr, \
 AROS_LCA(CMS_SignerInfo *, (___si), A0), \
 AROS_LCA(X509_ATTRIBUTE *, (___attr), A1), \
     struct Library *, AMISSL_BASE_NAME, 3122, Amissl)

#define CMS_signed_get_attr_by_NID(___si, ___nid, ___lastpos) \
      AROS_LC3(int, CMS_signed_get_attr_by_NID, \
 AROS_LCA(const CMS_SignerInfo *, (___si), A0), \
 AROS_LCA(int, (___nid), D0), \
 AROS_LCA(int, (___lastpos), D1), \
     struct Library *, AMISSL_BASE_NAME, 3123, Amissl)

#define CMS_get1_certs(___cms) \
      AROS_LC1(STACK_OF(X509) *, CMS_get1_certs, \
 AROS_LCA(CMS_ContentInfo *, (___cms), A0), \
     struct Library *, AMISSL_BASE_NAME, 3124, Amissl)

#define CMS_signed_add1_attr_by_NID(___si, ___nid, ___type, ___bytes, ___len) \
      AROS_LC5(int, CMS_signed_add1_attr_by_NID, \
 AROS_LCA(CMS_SignerInfo *, (___si), A0), \
 AROS_LCA(int, (___nid), D0), \
 AROS_LCA(int, (___type), D1), \
 AROS_LCA(const void *, (___bytes), A1), \
 AROS_LCA(int, (___len), D2), \
     struct Library *, AMISSL_BASE_NAME, 3125, Amissl)

#define CMS_unsigned_add1_attr_by_txt(___si, ___attrname, ___type, ___bytes, ___len) \
      AROS_LC5(int, CMS_unsigned_add1_attr_by_txt, \
 AROS_LCA(CMS_SignerInfo *, (___si), A0), \
 AROS_LCA(const char *, (___attrname), A1), \
 AROS_LCA(int, (___type), D0), \
 AROS_LCA(const void *, (___bytes), A2), \
 AROS_LCA(int, (___len), D1), \
     struct Library *, AMISSL_BASE_NAME, 3126, Amissl)

#define CMS_dataFinal(___cms, ___bio) \
      AROS_LC2(int, CMS_dataFinal, \
 AROS_LCA(CMS_ContentInfo *, (___cms), A0), \
 AROS_LCA(BIO *, (___bio), A1), \
     struct Library *, AMISSL_BASE_NAME, 3127, Amissl)

#define CMS_RecipientInfo_ktri_get0_signer_id(___ri, ___keyid, ___issuer, ___sno) \
      AROS_LC4(int, CMS_RecipientInfo_ktri_get0_signer_id, \
 AROS_LCA(CMS_RecipientInfo *, (___ri), A0), \
 AROS_LCA(ASN1_OCTET_STRING **, (___keyid), A1), \
 AROS_LCA(X509_NAME **, (___issuer), A2), \
 AROS_LCA(ASN1_INTEGER **, (___sno), A3), \
     struct Library *, AMISSL_BASE_NAME, 3128, Amissl)

#define i2d_CMS_ReceiptRequest(___a, ___out) \
      AROS_LC2(int, i2d_CMS_ReceiptRequest, \
 AROS_LCA(const CMS_ReceiptRequest *, (___a), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 3129, Amissl)

#define CMS_add1_recipient_cert(___cms, ___recip, ___flags) \
      AROS_LC3(CMS_RecipientInfo *, CMS_add1_recipient_cert, \
 AROS_LCA(CMS_ContentInfo *, (___cms), A0), \
 AROS_LCA(X509 *, (___recip), A1), \
 AROS_LCA(unsigned int, (___flags), D0), \
     struct Library *, AMISSL_BASE_NAME, 3130, Amissl)

#define CMS_dataInit(___cms, ___icont) \
      AROS_LC2(BIO *, CMS_dataInit, \
 AROS_LCA(CMS_ContentInfo *, (___cms), A0), \
 AROS_LCA(BIO *, (___icont), A1), \
     struct Library *, AMISSL_BASE_NAME, 3131, Amissl)

#define CMS_signed_add1_attr_by_txt(___si, ___attrname, ___type, ___bytes, ___len) \
      AROS_LC5(int, CMS_signed_add1_attr_by_txt, \
 AROS_LCA(CMS_SignerInfo *, (___si), A0), \
 AROS_LCA(const char *, (___attrname), A1), \
 AROS_LCA(int, (___type), D0), \
 AROS_LCA(const void *, (___bytes), A2), \
 AROS_LCA(int, (___len), D1), \
     struct Library *, AMISSL_BASE_NAME, 3132, Amissl)

#define CMS_RecipientInfo_decrypt(___cms, ___ri) \
      AROS_LC2(int, CMS_RecipientInfo_decrypt, \
 AROS_LCA(CMS_ContentInfo *, (___cms), A0), \
 AROS_LCA(CMS_RecipientInfo *, (___ri), A1), \
     struct Library *, AMISSL_BASE_NAME, 3133, Amissl)

#define CMS_signed_get_attr_count(___si) \
      AROS_LC1(int, CMS_signed_get_attr_count, \
 AROS_LCA(const CMS_SignerInfo *, (___si), A0), \
     struct Library *, AMISSL_BASE_NAME, 3134, Amissl)

#define CMS_get0_eContentType(___cms) \
      AROS_LC1(const ASN1_OBJECT *, CMS_get0_eContentType, \
 AROS_LCA(CMS_ContentInfo *, (___cms), A0), \
     struct Library *, AMISSL_BASE_NAME, 3135, Amissl)

#define CMS_set1_eContentType(___cms, ___oid) \
      AROS_LC2(int, CMS_set1_eContentType, \
 AROS_LCA(CMS_ContentInfo *, (___cms), A0), \
 AROS_LCA(const ASN1_OBJECT *, (___oid), A1), \
     struct Library *, AMISSL_BASE_NAME, 3136, Amissl)

#define CMS_ReceiptRequest_create0(___id, ___idlen, ___allorfirst, ___receiptList, ___receiptsTo) \
      AROS_LC5(CMS_ReceiptRequest *, CMS_ReceiptRequest_create0, \
 AROS_LCA(unsigned char *, (___id), A0), \
 AROS_LCA(int, (___idlen), D0), \
 AROS_LCA(int, (___allorfirst), D1), \
 AROS_LCA(STACK_OF(GENERAL_NAMES) *, (___receiptList), A1), \
 AROS_LCA(STACK_OF(GENERAL_NAMES) *, (___receiptsTo), A2), \
     struct Library *, AMISSL_BASE_NAME, 3137, Amissl)

#define CMS_add1_signer(___cms, ___signer, ___pk, ___md, ___flags) \
      AROS_LC5(CMS_SignerInfo *, CMS_add1_signer, \
 AROS_LCA(CMS_ContentInfo *, (___cms), A0), \
 AROS_LCA(X509 *, (___signer), A1), \
 AROS_LCA(EVP_PKEY *, (___pk), A2), \
 AROS_LCA(const EVP_MD *, (___md), A3), \
 AROS_LCA(unsigned int, (___flags), D0), \
     struct Library *, AMISSL_BASE_NAME, 3138, Amissl)

#define CMS_RecipientInfo_set0_pkey(___ri, ___pkey) \
      AROS_LC2(int, CMS_RecipientInfo_set0_pkey, \
 AROS_LCA(CMS_RecipientInfo *, (___ri), A0), \
 AROS_LCA(EVP_PKEY *, (___pkey), A1), \
     struct Library *, AMISSL_BASE_NAME, 3139, Amissl)

#define ENGINE_set_load_ssl_client_cert_function(___e, ___loadssl_f) \
      AROS_LC2(int, ENGINE_set_load_ssl_client_cert_function, \
 AROS_LCA(ENGINE *, (___e), A0), \
 AROS_LCA(ENGINE_SSL_CLIENT_CERT_PTR, (___loadssl_f), A1), \
     struct Library *, AMISSL_BASE_NAME, 3140, Amissl)

#define ENGINE_get_ssl_client_cert_function(___e) \
      AROS_LC1(ENGINE_SSL_CLIENT_CERT_PTR, ENGINE_get_ssl_client_cert_function, \
 AROS_LCA(const ENGINE *, (___e), A0), \
     struct Library *, AMISSL_BASE_NAME, 3141, Amissl)

#define ENGINE_load_ssl_client_cert(___e, ___s, ___ca_dn, ___pcert, ___ppkey, ___pother, ___ui_method, ___callback_data) \
      AROS_LC8(int, ENGINE_load_ssl_client_cert, \
 AROS_LCA(ENGINE *, (___e), A0), \
 AROS_LCA(SSL *, (___s), A1), \
 AROS_LCA(STACK_OF(X509_NAME) *, (___ca_dn), A2), \
 AROS_LCA(X509 **, (___pcert), A3), \
 AROS_LCA(EVP_PKEY **, (___ppkey), D0), \
 AROS_LCA(STACK_OF(X509) **, (___pother), D1), \
 AROS_LCA(UI_METHOD *, (___ui_method), D2), \
 AROS_LCA(void *, (___callback_data), D3), \
     struct Library *, AMISSL_BASE_NAME, 3142, Amissl)

#define OBSOLETE_ENGINE_load_capi() \
      AROS_LC0(void, OBSOLETE_ENGINE_load_capi, \
     struct Library *, AMISSL_BASE_NAME, 3143, Amissl)

#define ENGINE_register_pkey_meths(___e) \
      AROS_LC1(int, ENGINE_register_pkey_meths, \
 AROS_LCA(ENGINE *, (___e), A0), \
     struct Library *, AMISSL_BASE_NAME, 3144, Amissl)

#define ENGINE_get_pkey_asn1_meth_engine(___nid) \
      AROS_LC1(ENGINE *, ENGINE_get_pkey_asn1_meth_engine, \
 AROS_LCA(int, (___nid), D0), \
     struct Library *, AMISSL_BASE_NAME, 3145, Amissl)

#define WHIRLPOOL_Init(___c) \
      AROS_LC1(int, WHIRLPOOL_Init, \
 AROS_LCA(WHIRLPOOL_CTX *, (___c), A0), \
     struct Library *, AMISSL_BASE_NAME, 3146, Amissl)

#define WHIRLPOOL(___inp, ___bytes, ___md) \
      AROS_LC3(unsigned char *, WHIRLPOOL, \
 AROS_LCA(const void *, (___inp), A0), \
 AROS_LCA(size_t, (___bytes), D0), \
 AROS_LCA(unsigned char *, (___md), A1), \
     struct Library *, AMISSL_BASE_NAME, 3147, Amissl)

#define ENGINE_get_pkey_asn1_meth(___e, ___nid) \
      AROS_LC2(const EVP_PKEY_ASN1_METHOD *, ENGINE_get_pkey_asn1_meth, \
 AROS_LCA(ENGINE *, (___e), A0), \
 AROS_LCA(int, (___nid), D0), \
     struct Library *, AMISSL_BASE_NAME, 3148, Amissl)

#define ENGINE_get_pkey_meth(___e, ___nid) \
      AROS_LC2(const EVP_PKEY_METHOD *, ENGINE_get_pkey_meth, \
 AROS_LCA(ENGINE *, (___e), A0), \
 AROS_LCA(int, (___nid), D0), \
     struct Library *, AMISSL_BASE_NAME, 3149, Amissl)

#define BIO_new_CMS(___out, ___cms) \
      AROS_LC2(BIO *, BIO_new_CMS, \
 AROS_LCA(BIO *, (___out), A0), \
 AROS_LCA(CMS_ContentInfo *, (___cms), A1), \
     struct Library *, AMISSL_BASE_NAME, 3150, Amissl)

#define ENGINE_set_default_pkey_asn1_meths(___e) \
      AROS_LC1(int, ENGINE_set_default_pkey_asn1_meths, \
 AROS_LCA(ENGINE *, (___e), A0), \
     struct Library *, AMISSL_BASE_NAME, 3151, Amissl)

#define WHIRLPOOL_BitUpdate(___ctx, ___inp, ___bits) \
      AROS_LC3(void, WHIRLPOOL_BitUpdate, \
 AROS_LCA(WHIRLPOOL_CTX *, (___ctx), A0), \
 AROS_LCA(const void *, (___inp), A1), \
 AROS_LCA(size_t, (___bits), D0), \
     struct Library *, AMISSL_BASE_NAME, 3152, Amissl)

#define i2d_CMS_bio_stream(___out, ___cms, ___in, ___flags) \
      AROS_LC4(int, i2d_CMS_bio_stream, \
 AROS_LCA(BIO *, (___out), A0), \
 AROS_LCA(CMS_ContentInfo *, (___cms), A1), \
 AROS_LCA(BIO *, (___in), A2), \
 AROS_LCA(int, (___flags), D0), \
     struct Library *, AMISSL_BASE_NAME, 3153, Amissl)

#define CMS_stream(___boundary, ___cms) \
      AROS_LC2(int, CMS_stream, \
 AROS_LCA(unsigned char ***, (___boundary), A0), \
 AROS_LCA(CMS_ContentInfo *, (___cms), A1), \
     struct Library *, AMISSL_BASE_NAME, 3154, Amissl)

#define ENGINE_pkey_asn1_find_str(___pe, ___str, ___len) \
      AROS_LC3(const EVP_PKEY_ASN1_METHOD *, ENGINE_pkey_asn1_find_str, \
 AROS_LCA(ENGINE **, (___pe), A0), \
 AROS_LCA(const char *, (___str), A1), \
 AROS_LCA(int, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 3155, Amissl)

#define ENGINE_get_pkey_meths(___e) \
      AROS_LC1(ENGINE_PKEY_METHS_PTR, ENGINE_get_pkey_meths, \
 AROS_LCA(const ENGINE *, (___e), A0), \
     struct Library *, AMISSL_BASE_NAME, 3156, Amissl)

#define ENGINE_register_pkey_asn1_meths(___e) \
      AROS_LC1(int, ENGINE_register_pkey_asn1_meths, \
 AROS_LCA(ENGINE *, (___e), A0), \
     struct Library *, AMISSL_BASE_NAME, 3157, Amissl)

#define ENGINE_set_default_pkey_meths(___e) \
      AROS_LC1(int, ENGINE_set_default_pkey_meths, \
 AROS_LCA(ENGINE *, (___e), A0), \
     struct Library *, AMISSL_BASE_NAME, 3158, Amissl)

#define HMAC_CTX_copy(___dctx, ___sctx) \
      AROS_LC2(int, HMAC_CTX_copy, \
 AROS_LCA(HMAC_CTX *, (___dctx), A0), \
 AROS_LCA(HMAC_CTX *, (___sctx), A1), \
     struct Library *, AMISSL_BASE_NAME, 3159, Amissl)

#define ENGINE_get_pkey_asn1_meths(___e) \
      AROS_LC1(ENGINE_PKEY_ASN1_METHS_PTR, ENGINE_get_pkey_asn1_meths, \
 AROS_LCA(const ENGINE *, (___e), A0), \
     struct Library *, AMISSL_BASE_NAME, 3160, Amissl)

#define EVP_whirlpool() \
      AROS_LC0(const EVP_MD *, EVP_whirlpool, \
     struct Library *, AMISSL_BASE_NAME, 3161, Amissl)

#define ENGINE_register_all_pkey_meths() \
      AROS_LC0(void, ENGINE_register_all_pkey_meths, \
     struct Library *, AMISSL_BASE_NAME, 3162, Amissl)

#define WHIRLPOOL_Final(___md, ___c) \
      AROS_LC2(int, WHIRLPOOL_Final, \
 AROS_LCA(unsigned char *, (___md), A0), \
 AROS_LCA(WHIRLPOOL_CTX *, (___c), A1), \
     struct Library *, AMISSL_BASE_NAME, 3163, Amissl)

#define ENGINE_get_pkey_asn1_meth_str(___e, ___str, ___len) \
      AROS_LC3(const EVP_PKEY_ASN1_METHOD *, ENGINE_get_pkey_asn1_meth_str, \
 AROS_LCA(ENGINE *, (___e), A0), \
 AROS_LCA(const char *, (___str), A1), \
 AROS_LCA(int, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 3164, Amissl)

#define ENGINE_register_all_pkey_asn1_meths() \
      AROS_LC0(void, ENGINE_register_all_pkey_asn1_meths, \
     struct Library *, AMISSL_BASE_NAME, 3165, Amissl)

#define CMS_ContentInfo_print_ctx(___out, ___x, ___indent, ___pctx) \
      AROS_LC4(int, CMS_ContentInfo_print_ctx, \
 AROS_LCA(BIO *, (___out), A0), \
 AROS_LCA(const CMS_ContentInfo *, (___x), A1), \
 AROS_LCA(int, (___indent), D0), \
 AROS_LCA(const ASN1_PCTX *, (___pctx), A2), \
     struct Library *, AMISSL_BASE_NAME, 3166, Amissl)

#define CMS_add1_crl(___cms, ___crl) \
      AROS_LC2(int, CMS_add1_crl, \
 AROS_LCA(CMS_ContentInfo *, (___cms), A0), \
 AROS_LCA(X509_CRL *, (___crl), A1), \
     struct Library *, AMISSL_BASE_NAME, 3167, Amissl)

#define ENGINE_set_pkey_asn1_meths(___e, ___f) \
      AROS_LC2(int, ENGINE_set_pkey_asn1_meths, \
 AROS_LCA(ENGINE *, (___e), A0), \
 AROS_LCA(ENGINE_PKEY_ASN1_METHS_PTR, (___f), A1), \
     struct Library *, AMISSL_BASE_NAME, 3168, Amissl)

#define ENGINE_get_pkey_meth_engine(___nid) \
      AROS_LC1(ENGINE *, ENGINE_get_pkey_meth_engine, \
 AROS_LCA(int, (___nid), D0), \
     struct Library *, AMISSL_BASE_NAME, 3169, Amissl)

#define WHIRLPOOL_Update(___c, ___inp, ___bytes) \
      AROS_LC3(int, WHIRLPOOL_Update, \
 AROS_LCA(WHIRLPOOL_CTX *, (___c), A0), \
 AROS_LCA(const void *, (___inp), A1), \
 AROS_LCA(size_t, (___bytes), D0), \
     struct Library *, AMISSL_BASE_NAME, 3170, Amissl)

#define PEM_write_bio_CMS_stream(___out, ___cms, ___in, ___flags) \
      AROS_LC4(int, PEM_write_bio_CMS_stream, \
 AROS_LCA(BIO *, (___out), A0), \
 AROS_LCA(CMS_ContentInfo *, (___cms), A1), \
 AROS_LCA(BIO *, (___in), A2), \
 AROS_LCA(int, (___flags), D0), \
     struct Library *, AMISSL_BASE_NAME, 3171, Amissl)

#define ENGINE_unregister_pkey_meths(___e) \
      AROS_LC1(void, ENGINE_unregister_pkey_meths, \
 AROS_LCA(ENGINE *, (___e), A0), \
     struct Library *, AMISSL_BASE_NAME, 3172, Amissl)

#define ENGINE_unregister_pkey_asn1_meths(___e) \
      AROS_LC1(void, ENGINE_unregister_pkey_asn1_meths, \
 AROS_LCA(ENGINE *, (___e), A0), \
     struct Library *, AMISSL_BASE_NAME, 3173, Amissl)

#define ENGINE_set_pkey_meths(___e, ___f) \
      AROS_LC2(int, ENGINE_set_pkey_meths, \
 AROS_LCA(ENGINE *, (___e), A0), \
 AROS_LCA(ENGINE_PKEY_METHS_PTR, (___f), A1), \
     struct Library *, AMISSL_BASE_NAME, 3174, Amissl)

#define DSAparams_dup(___x) \
      AROS_LC1(DSA *, DSAparams_dup, \
 AROS_LCA(const DSA *, (___x), A0), \
     struct Library *, AMISSL_BASE_NAME, 3175, Amissl)

#define DHparams_dup(___d) \
      AROS_LC1(DH *, DHparams_dup, \
 AROS_LCA(const DH *, (___d), A0), \
     struct Library *, AMISSL_BASE_NAME, 3176, Amissl)

#define X509_issuer_name_hash_old(___a) \
      AROS_LC1(unsigned long, X509_issuer_name_hash_old, \
 AROS_LCA(X509 *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 3177, Amissl)

#define X509_subject_name_hash_old(___x) \
      AROS_LC1(unsigned long, X509_subject_name_hash_old, \
 AROS_LCA(X509 *, (___x), A0), \
     struct Library *, AMISSL_BASE_NAME, 3178, Amissl)

#define SRP_VBASE_get_by_user(___vb, ___username) \
      AROS_LC2(SRP_user_pwd *, SRP_VBASE_get_by_user, \
 AROS_LCA(SRP_VBASE *, (___vb), A0), \
 AROS_LCA(char *, (___username), A1), \
     struct Library *, AMISSL_BASE_NAME, 3179, Amissl)

#define SRP_Calc_server_key(___A, ___v, ___u, ___b, ___N) \
      AROS_LC5(BIGNUM *, SRP_Calc_server_key, \
 AROS_LCA(const BIGNUM *, (___A), A0), \
 AROS_LCA(const BIGNUM *, (___v), A1), \
 AROS_LCA(const BIGNUM *, (___u), A2), \
 AROS_LCA(const BIGNUM *, (___b), A3), \
 AROS_LCA(const BIGNUM *, (___N), D0), \
     struct Library *, AMISSL_BASE_NAME, 3180, Amissl)

#define SRP_create_verifier(___user, ___pass, ___salt, ___verifier, ___N, ___g) \
      AROS_LC6(char *, SRP_create_verifier, \
 AROS_LCA(const char *, (___user), A0), \
 AROS_LCA(const char *, (___pass), A1), \
 AROS_LCA(char **, (___salt), A2), \
 AROS_LCA(char **, (___verifier), A3), \
 AROS_LCA(const char *, (___N), D0), \
 AROS_LCA(const char *, (___g), D1), \
     struct Library *, AMISSL_BASE_NAME, 3181, Amissl)

#define SRP_create_verifier_BN(___user, ___pass, ___salt, ___verifier, ___N, ___g) \
      AROS_LC6(int, SRP_create_verifier_BN, \
 AROS_LCA(const char *, (___user), A0), \
 AROS_LCA(const char *, (___pass), A1), \
 AROS_LCA(BIGNUM **, (___salt), A2), \
 AROS_LCA(BIGNUM **, (___verifier), A3), \
 AROS_LCA(const BIGNUM *, (___N), D0), \
 AROS_LCA(const BIGNUM *, (___g), D1), \
     struct Library *, AMISSL_BASE_NAME, 3182, Amissl)

#define SRP_Calc_u(___A, ___B, ___N) \
      AROS_LC3(BIGNUM *, SRP_Calc_u, \
 AROS_LCA(const BIGNUM *, (___A), A0), \
 AROS_LCA(const BIGNUM *, (___B), A1), \
 AROS_LCA(const BIGNUM *, (___N), A2), \
     struct Library *, AMISSL_BASE_NAME, 3183, Amissl)

#define SRP_VBASE_free(___vb) \
      AROS_LC1(void, SRP_VBASE_free, \
 AROS_LCA(SRP_VBASE *, (___vb), A0), \
     struct Library *, AMISSL_BASE_NAME, 3184, Amissl)

#define SRP_Calc_client_key(___N, ___B, ___g, ___x, ___a, ___u) \
      AROS_LC6(BIGNUM *, SRP_Calc_client_key, \
 AROS_LCA(const BIGNUM *, (___N), A0), \
 AROS_LCA(const BIGNUM *, (___B), A1), \
 AROS_LCA(const BIGNUM *, (___g), A2), \
 AROS_LCA(const BIGNUM *, (___x), A3), \
 AROS_LCA(const BIGNUM *, (___a), D0), \
 AROS_LCA(const BIGNUM *, (___u), D1), \
     struct Library *, AMISSL_BASE_NAME, 3185, Amissl)

#define SRP_get_default_gN(___id) \
      AROS_LC1(SRP_gN *, SRP_get_default_gN, \
 AROS_LCA(const char *, (___id), A0), \
     struct Library *, AMISSL_BASE_NAME, 3186, Amissl)

#define SRP_Calc_x(___s, ___user, ___pass) \
      AROS_LC3(BIGNUM *, SRP_Calc_x, \
 AROS_LCA(const BIGNUM *, (___s), A0), \
 AROS_LCA(const char *, (___user), A1), \
 AROS_LCA(const char *, (___pass), A2), \
     struct Library *, AMISSL_BASE_NAME, 3187, Amissl)

#define SRP_Calc_B(___b, ___N, ___g, ___v) \
      AROS_LC4(BIGNUM *, SRP_Calc_B, \
 AROS_LCA(const BIGNUM *, (___b), A0), \
 AROS_LCA(const BIGNUM *, (___N), A1), \
 AROS_LCA(const BIGNUM *, (___g), A2), \
 AROS_LCA(const BIGNUM *, (___v), A3), \
     struct Library *, AMISSL_BASE_NAME, 3188, Amissl)

#define SRP_VBASE_new(___seed_key) \
      AROS_LC1(SRP_VBASE *, SRP_VBASE_new, \
 AROS_LCA(char *, (___seed_key), A0), \
     struct Library *, AMISSL_BASE_NAME, 3189, Amissl)

#define SRP_check_known_gN_param(___g, ___N) \
      AROS_LC2(char *, SRP_check_known_gN_param, \
 AROS_LCA(const BIGNUM *, (___g), A0), \
 AROS_LCA(const BIGNUM *, (___N), A1), \
     struct Library *, AMISSL_BASE_NAME, 3190, Amissl)

#define SRP_Calc_A(___a, ___N, ___g) \
      AROS_LC3(BIGNUM *, SRP_Calc_A, \
 AROS_LCA(const BIGNUM *, (___a), A0), \
 AROS_LCA(const BIGNUM *, (___N), A1), \
 AROS_LCA(const BIGNUM *, (___g), A2), \
     struct Library *, AMISSL_BASE_NAME, 3191, Amissl)

#define SRP_Verify_A_mod_N(___A, ___N) \
      AROS_LC2(int, SRP_Verify_A_mod_N, \
 AROS_LCA(const BIGNUM *, (___A), A0), \
 AROS_LCA(const BIGNUM *, (___N), A1), \
     struct Library *, AMISSL_BASE_NAME, 3192, Amissl)

#define SRP_VBASE_init(___vb, ___verifier_file) \
      AROS_LC2(int, SRP_VBASE_init, \
 AROS_LCA(SRP_VBASE *, (___vb), A0), \
 AROS_LCA(char *, (___verifier_file), A1), \
     struct Library *, AMISSL_BASE_NAME, 3193, Amissl)

#define SRP_Verify_B_mod_N(___B, ___N) \
      AROS_LC2(int, SRP_Verify_B_mod_N, \
 AROS_LCA(const BIGNUM *, (___B), A0), \
 AROS_LCA(const BIGNUM *, (___N), A1), \
     struct Library *, AMISSL_BASE_NAME, 3194, Amissl)

#define EC_KEY_set_public_key_affine_coordinates(___key, ___x, ___y) \
      AROS_LC3(int, EC_KEY_set_public_key_affine_coordinates, \
 AROS_LCA(EC_KEY *, (___key), A0), \
 AROS_LCA(BIGNUM *, (___x), A1), \
 AROS_LCA(BIGNUM *, (___y), A2), \
     struct Library *, AMISSL_BASE_NAME, 3195, Amissl)

#define EVP_aes_192_ctr() \
      AROS_LC0(const EVP_CIPHER *, EVP_aes_192_ctr, \
     struct Library *, AMISSL_BASE_NAME, 3196, Amissl)

#define EVP_aes_128_ctr() \
      AROS_LC0(const EVP_CIPHER *, EVP_aes_128_ctr, \
     struct Library *, AMISSL_BASE_NAME, 3197, Amissl)

#define EVP_aes_256_ctr() \
      AROS_LC0(const EVP_CIPHER *, EVP_aes_256_ctr, \
     struct Library *, AMISSL_BASE_NAME, 3198, Amissl)

#define EC_KEY_get_flags(___key) \
      AROS_LC1(int, EC_KEY_get_flags, \
 AROS_LCA(const EC_KEY *, (___key), A0), \
     struct Library *, AMISSL_BASE_NAME, 3199, Amissl)

#define EVP_aes_128_xts() \
      AROS_LC0(const EVP_CIPHER *, EVP_aes_128_xts, \
     struct Library *, AMISSL_BASE_NAME, 3200, Amissl)

#define EVP_aes_256_xts() \
      AROS_LC0(const EVP_CIPHER *, EVP_aes_256_xts, \
     struct Library *, AMISSL_BASE_NAME, 3202, Amissl)

#define EVP_aes_128_gcm() \
      AROS_LC0(const EVP_CIPHER *, EVP_aes_128_gcm, \
     struct Library *, AMISSL_BASE_NAME, 3203, Amissl)

#define EC_KEY_clear_flags(___key, ___flags) \
      AROS_LC2(void, EC_KEY_clear_flags, \
 AROS_LCA(EC_KEY *, (___key), A0), \
 AROS_LCA(int, (___flags), D0), \
     struct Library *, AMISSL_BASE_NAME, 3204, Amissl)

#define EC_KEY_set_flags(___key, ___flags) \
      AROS_LC2(void, EC_KEY_set_flags, \
 AROS_LCA(EC_KEY *, (___key), A0), \
 AROS_LCA(int, (___flags), D0), \
     struct Library *, AMISSL_BASE_NAME, 3205, Amissl)

#define EVP_aes_256_ccm() \
      AROS_LC0(const EVP_CIPHER *, EVP_aes_256_ccm, \
     struct Library *, AMISSL_BASE_NAME, 3206, Amissl)

#define EVP_aes_128_ccm() \
      AROS_LC0(const EVP_CIPHER *, EVP_aes_128_ccm, \
     struct Library *, AMISSL_BASE_NAME, 3208, Amissl)

#define EVP_aes_192_gcm() \
      AROS_LC0(const EVP_CIPHER *, EVP_aes_192_gcm, \
     struct Library *, AMISSL_BASE_NAME, 3209, Amissl)

#define EVP_aes_256_gcm() \
      AROS_LC0(const EVP_CIPHER *, EVP_aes_256_gcm, \
     struct Library *, AMISSL_BASE_NAME, 3210, Amissl)

#define EVP_aes_192_ccm() \
      AROS_LC0(const EVP_CIPHER *, EVP_aes_192_ccm, \
     struct Library *, AMISSL_BASE_NAME, 3211, Amissl)

#define EVP_rc4_hmac_md5() \
      AROS_LC0(const EVP_CIPHER *, EVP_rc4_hmac_md5, \
     struct Library *, AMISSL_BASE_NAME, 3212, Amissl)

#define EVP_aes_128_cbc_hmac_sha1() \
      AROS_LC0(const EVP_CIPHER *, EVP_aes_128_cbc_hmac_sha1, \
     struct Library *, AMISSL_BASE_NAME, 3213, Amissl)

#define OBSOLETE_ENGINE_load_rdrand() \
      AROS_LC0(void, OBSOLETE_ENGINE_load_rdrand, \
     struct Library *, AMISSL_BASE_NAME, 3214, Amissl)

#define EVP_aes_256_cbc_hmac_sha1() \
      AROS_LC0(const EVP_CIPHER *, EVP_aes_256_cbc_hmac_sha1, \
     struct Library *, AMISSL_BASE_NAME, 3216, Amissl)

#define CMS_add0_recipient_password(___cms, ___iter, ___wrap_nid, ___pbe_nid, ___pass, ___passlen, ___kekciph) \
      AROS_LC7(CMS_RecipientInfo *, CMS_add0_recipient_password, \
 AROS_LCA(CMS_ContentInfo *, (___cms), A0), \
 AROS_LCA(int, (___iter), D0), \
 AROS_LCA(int, (___wrap_nid), D1), \
 AROS_LCA(int, (___pbe_nid), D2), \
 AROS_LCA(unsigned char *, (___pass), A1), \
 AROS_LCA(ossl_ssize_t, (___passlen), D3), \
 AROS_LCA(const EVP_CIPHER *, (___kekciph), A2), \
     struct Library *, AMISSL_BASE_NAME, 3217, Amissl)

#define CMS_decrypt_set1_password(___cms, ___pass, ___passlen) \
      AROS_LC3(int, CMS_decrypt_set1_password, \
 AROS_LCA(CMS_ContentInfo *, (___cms), A0), \
 AROS_LCA(unsigned char *, (___pass), A1), \
 AROS_LCA(ossl_ssize_t, (___passlen), D0), \
     struct Library *, AMISSL_BASE_NAME, 3218, Amissl)

#define CMS_RecipientInfo_set0_password(___ri, ___pass, ___passlen) \
      AROS_LC3(int, CMS_RecipientInfo_set0_password, \
 AROS_LCA(CMS_RecipientInfo *, (___ri), A0), \
 AROS_LCA(unsigned char *, (___pass), A1), \
 AROS_LCA(ossl_ssize_t, (___passlen), D0), \
     struct Library *, AMISSL_BASE_NAME, 3219, Amissl)

#define X509_REQ_sign_ctx(___x, ___ctx) \
      AROS_LC2(int, X509_REQ_sign_ctx, \
 AROS_LCA(X509_REQ *, (___x), A0), \
 AROS_LCA(EVP_MD_CTX *, (___ctx), A1), \
     struct Library *, AMISSL_BASE_NAME, 3220, Amissl)

#define X509_CRL_sign_ctx(___x, ___ctx) \
      AROS_LC2(int, X509_CRL_sign_ctx, \
 AROS_LCA(X509_CRL *, (___x), A0), \
 AROS_LCA(EVP_MD_CTX *, (___ctx), A1), \
     struct Library *, AMISSL_BASE_NAME, 3221, Amissl)

#define X509_signature_dump(___bp, ___sig, ___indent) \
      AROS_LC3(int, X509_signature_dump, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(const ASN1_STRING *, (___sig), A1), \
 AROS_LCA(int, (___indent), D0), \
     struct Library *, AMISSL_BASE_NAME, 3222, Amissl)

#define X509_sign_ctx(___x, ___ctx) \
      AROS_LC2(int, X509_sign_ctx, \
 AROS_LCA(X509 *, (___x), A0), \
 AROS_LCA(EVP_MD_CTX *, (___ctx), A1), \
     struct Library *, AMISSL_BASE_NAME, 3223, Amissl)

#define ASN1_item_sign_ctx(___it, ___algor1, ___algor2, ___signature, ___data, ___ctx) \
      AROS_LC6(int, ASN1_item_sign_ctx, \
 AROS_LCA(const ASN1_ITEM *, (___it), A0), \
 AROS_LCA(X509_ALGOR *, (___algor1), A1), \
 AROS_LCA(X509_ALGOR *, (___algor2), A2), \
 AROS_LCA(ASN1_BIT_STRING *, (___signature), A3), \
 AROS_LCA(const void *, (___data), D0), \
 AROS_LCA(EVP_MD_CTX *, (___ctx), D1), \
     struct Library *, AMISSL_BASE_NAME, 3224, Amissl)

#define X509_STORE_CTX_set0_crls(___ctx, ___sk) \
      AROS_LC2(void, X509_STORE_CTX_set0_crls, \
 AROS_LCA(X509_STORE_CTX *, (___ctx), A0), \
 AROS_LCA(STACK_OF(X509_CRL) *, (___sk), A1), \
     struct Library *, AMISSL_BASE_NAME, 3227, Amissl)

#define SSL_SESSION_get_id(___s, ___len) \
      AROS_LC2(const unsigned char *, SSL_SESSION_get_id, \
 AROS_LCA(const SSL_SESSION *, (___s), A0), \
 AROS_LCA(unsigned int *, (___len), A1), \
     struct Library *, AMISSL_BASE_NAME, 3228, Amissl)

#define SSL_CTX_sess_set_new_cb(___ctx, ___new_session_cb) \
      AROS_LC2(void, SSL_CTX_sess_set_new_cb, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
 AROS_LCA(int (*)(struct ssl_st *ssl,SSL_SESSION *sess), (___new_session_cb), A1), \
     struct Library *, AMISSL_BASE_NAME, 3229, Amissl)

#define SSL_CTX_sess_get_get_cb(___ctx) \
      AROS_LC1(SSL_SESSION *(*)(SSL *, const unsigned char *, int, int *), SSL_CTX_sess_get_get_cb, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 3230, Amissl)

#define SSL_CTX_sess_set_get_cb(___ctx, ___get_session_cb) \
      AROS_LC2(void, SSL_CTX_sess_set_get_cb, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
 AROS_LCA(SSL_SESSION *(*)(SSL *,const unsigned char *,int,int *), (___get_session_cb), A1), \
     struct Library *, AMISSL_BASE_NAME, 3231, Amissl)

#define SSL_CTX_get_info_callback(___ctx) \
      AROS_LC1(void (*)(const SSL *ssl,int type,int val), SSL_CTX_get_info_callback, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 3232, Amissl)

#define SSL_CTX_set_client_cert_cb(___ctx, ___client_cert_cb) \
      AROS_LC2(void, SSL_CTX_set_client_cert_cb, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
 AROS_LCA(int (*)(SSL *ssl,X509 **x509,EVP_PKEY **pkey), (___client_cert_cb), A1), \
     struct Library *, AMISSL_BASE_NAME, 3233, Amissl)

#define SSL_CTX_sess_set_remove_cb(___ctx, ___remove_session_cb) \
      AROS_LC2(void, SSL_CTX_sess_set_remove_cb, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
 AROS_LCA(void (*)(struct ssl_ctx_st *ctx,SSL_SESSION *sess), (___remove_session_cb), A1), \
     struct Library *, AMISSL_BASE_NAME, 3234, Amissl)

#define SSL_CTX_sess_get_new_cb(___ctx) \
      AROS_LC1(int (*)(struct ssl_st *ssl, SSL_SESSION *sess), SSL_CTX_sess_get_new_cb, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 3235, Amissl)

#define SSL_CTX_get_client_cert_cb(___ctx) \
      AROS_LC1(int (*)(SSL *ssl, X509 **x509, EVP_PKEY **pkey), SSL_CTX_get_client_cert_cb, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 3236, Amissl)

#define SSL_CTX_sess_get_remove_cb(___ctx) \
      AROS_LC1(void (*)(struct ssl_ctx_st *ctx, SSL_SESSION *sess), SSL_CTX_sess_get_remove_cb, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 3237, Amissl)

#define PEM_write_bio_SSL_SESSION(___bp, ___x) \
      AROS_LC2(int, PEM_write_bio_SSL_SESSION, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(const SSL_SESSION *, (___x), A1), \
     struct Library *, AMISSL_BASE_NAME, 3238, Amissl)

#define PEM_read_bio_SSL_SESSION(___bp, ___x, ___cb, ___u) \
      AROS_LC4(SSL_SESSION *, PEM_read_bio_SSL_SESSION, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(SSL_SESSION **, (___x), A1), \
 AROS_LCA(pem_password_cb *, (___cb), A2), \
 AROS_LCA(void *, (___u), A3), \
     struct Library *, AMISSL_BASE_NAME, 3240, Amissl)

#define BN_X931_generate_Xpq(___Xp, ___Xq, ___nbits, ___ctx) \
      AROS_LC4(int, BN_X931_generate_Xpq, \
 AROS_LCA(BIGNUM *, (___Xp), A0), \
 AROS_LCA(BIGNUM *, (___Xq), A1), \
 AROS_LCA(int, (___nbits), D0), \
 AROS_LCA(BN_CTX *, (___ctx), A2), \
     struct Library *, AMISSL_BASE_NAME, 3280, Amissl)

#define BN_get0_nist_prime_384() \
      AROS_LC0(const BIGNUM *, BN_get0_nist_prime_384, \
     struct Library *, AMISSL_BASE_NAME, 3281, Amissl)

#define ERR_set_mark() \
      AROS_LC0(int, ERR_set_mark, \
     struct Library *, AMISSL_BASE_NAME, 3282, Amissl)

#define BN_BLINDING_invert_ex(___n, ___r, ___b, ___ctx) \
      AROS_LC4(int, BN_BLINDING_invert_ex, \
 AROS_LCA(BIGNUM *, (___n), A0), \
 AROS_LCA(const BIGNUM *, (___r), A1), \
 AROS_LCA(BN_BLINDING *, (___b), A2), \
 AROS_LCA(BN_CTX *, (___ctx), A3), \
     struct Library *, AMISSL_BASE_NAME, 3283, Amissl)

#define NAME_CONSTRAINTS_free(___ncons) \
      AROS_LC1(void, NAME_CONSTRAINTS_free, \
 AROS_LCA(NAME_CONSTRAINTS *, (___ncons), A0), \
     struct Library *, AMISSL_BASE_NAME, 3284, Amissl)

#define X509_STORE_CTX_set0_param(___ctx, ___param) \
      AROS_LC2(void, X509_STORE_CTX_set0_param, \
 AROS_LCA(X509_STORE_CTX *, (___ctx), A0), \
 AROS_LCA(X509_VERIFY_PARAM *, (___param), A1), \
     struct Library *, AMISSL_BASE_NAME, 3285, Amissl)

#define POLICY_CONSTRAINTS_free(___pcons) \
      AROS_LC1(void, POLICY_CONSTRAINTS_free, \
 AROS_LCA(POLICY_CONSTRAINTS *, (___pcons), A0), \
     struct Library *, AMISSL_BASE_NAME, 3286, Amissl)

#define BN_nist_mod_192(___r, ___a, ___p, ___ctx) \
      AROS_LC4(int, BN_nist_mod_192, \
 AROS_LCA(BIGNUM *, (___r), A0), \
 AROS_LCA(const BIGNUM *, (___a), A1), \
 AROS_LCA(const BIGNUM *, (___p), A2), \
 AROS_LCA(BN_CTX *, (___ctx), A3), \
     struct Library *, AMISSL_BASE_NAME, 3287, Amissl)

#define GENERAL_SUBTREE_free(___sub) \
      AROS_LC1(void, GENERAL_SUBTREE_free, \
 AROS_LCA(GENERAL_SUBTREE *, (___sub), A0), \
     struct Library *, AMISSL_BASE_NAME, 3288, Amissl)

#define PKCS12_add_safe(___psafes, ___bags, ___safe_nid, ___iter, ___pass) \
      AROS_LC5(int, PKCS12_add_safe, \
 AROS_LCA(STACK_OF(PKCS7) **, (___psafes), A0), \
 AROS_LCA(STACK_OF(PKCS12_SAFEBAG) *, (___bags), A1), \
 AROS_LCA(int, (___safe_nid), D0), \
 AROS_LCA(int, (___iter), D1), \
 AROS_LCA(const char *, (___pass), A2), \
     struct Library *, AMISSL_BASE_NAME, 3289, Amissl)

#define BN_get0_nist_prime_192() \
      AROS_LC0(const BIGNUM *, BN_get0_nist_prime_192, \
     struct Library *, AMISSL_BASE_NAME, 3290, Amissl)

#define X509_keyid_get0(___x, ___len) \
      AROS_LC2(unsigned char *, X509_keyid_get0, \
 AROS_LCA(X509 *, (___x), A0), \
 AROS_LCA(int *, (___len), A1), \
     struct Library *, AMISSL_BASE_NAME, 3291, Amissl)

#define X509_policy_node_get0_parent(___node) \
      AROS_LC1(const X509_POLICY_NODE *, X509_policy_node_get0_parent, \
 AROS_LCA(const X509_POLICY_NODE *, (___node), A0), \
     struct Library *, AMISSL_BASE_NAME, 3293, Amissl)

#define a2i_IPADDRESS(___ipasc) \
      AROS_LC1(ASN1_OCTET_STRING *, a2i_IPADDRESS, \
 AROS_LCA(const char *, (___ipasc), A0), \
     struct Library *, AMISSL_BASE_NAME, 3294, Amissl)

#define X509_STORE_CTX_set_depth(___ctx, ___depth) \
      AROS_LC2(void, X509_STORE_CTX_set_depth, \
 AROS_LCA(X509_STORE_CTX *, (___ctx), A0), \
 AROS_LCA(int, (___depth), D0), \
     struct Library *, AMISSL_BASE_NAME, 3295, Amissl)

#define X509_VERIFY_PARAM_inherit(___to, ___from) \
      AROS_LC2(int, X509_VERIFY_PARAM_inherit, \
 AROS_LCA(X509_VERIFY_PARAM *, (___to), A0), \
 AROS_LCA(const X509_VERIFY_PARAM *, (___from), A1), \
     struct Library *, AMISSL_BASE_NAME, 3296, Amissl)

#define X509_VERIFY_PARAM_set_depth(___param, ___depth) \
      AROS_LC2(void, X509_VERIFY_PARAM_set_depth, \
 AROS_LCA(X509_VERIFY_PARAM *, (___param), A0), \
 AROS_LCA(int, (___depth), D0), \
     struct Library *, AMISSL_BASE_NAME, 3298, Amissl)

#define EVP_PKEY_add1_attr_by_txt(___key, ___attrname, ___type, ___bytes, ___len) \
      AROS_LC5(int, EVP_PKEY_add1_attr_by_txt, \
 AROS_LCA(EVP_PKEY *, (___key), A0), \
 AROS_LCA(const char *, (___attrname), A1), \
 AROS_LCA(int, (___type), D0), \
 AROS_LCA(const unsigned char *, (___bytes), A2), \
 AROS_LCA(int, (___len), D1), \
     struct Library *, AMISSL_BASE_NAME, 3299, Amissl)

#define BN_BLINDING_set_flags(___b, ___l) \
      AROS_LC2(void, BN_BLINDING_set_flags, \
 AROS_LCA(BN_BLINDING *, (___b), A0), \
 AROS_LCA(unsigned long, (___l), D0), \
     struct Library *, AMISSL_BASE_NAME, 3300, Amissl)

#define X509_VERIFY_PARAM_set1_policies(___param, ___policies) \
      AROS_LC2(int, X509_VERIFY_PARAM_set1_policies, \
 AROS_LCA(X509_VERIFY_PARAM *, (___param), A0), \
 AROS_LCA(STACK_OF(ASN1_OBJECT) *, (___policies), A1), \
     struct Library *, AMISSL_BASE_NAME, 3301, Amissl)

#define X509_VERIFY_PARAM_set1_name(___param, ___name) \
      AROS_LC2(int, X509_VERIFY_PARAM_set1_name, \
 AROS_LCA(X509_VERIFY_PARAM *, (___param), A0), \
 AROS_LCA(const char *, (___name), A1), \
     struct Library *, AMISSL_BASE_NAME, 3302, Amissl)

#define POLICY_MAPPING_free(___pmap) \
      AROS_LC1(void, POLICY_MAPPING_free, \
 AROS_LCA(POLICY_MAPPING *, (___pmap), A0), \
     struct Library *, AMISSL_BASE_NAME, 3303, Amissl)

#define EVP_PKEY_cmp(___a, ___b) \
      AROS_LC2(int, EVP_PKEY_cmp, \
 AROS_LCA(const EVP_PKEY *, (___a), A0), \
 AROS_LCA(const EVP_PKEY *, (___b), A1), \
     struct Library *, AMISSL_BASE_NAME, 3306, Amissl)

#define X509_policy_level_node_count(___level) \
      AROS_LC1(int, X509_policy_level_node_count, \
 AROS_LCA(X509_POLICY_LEVEL *, (___level), A0), \
     struct Library *, AMISSL_BASE_NAME, 3307, Amissl)

#define EVP_PKEY_get_attr(___key, ___loc) \
      AROS_LC2(X509_ATTRIBUTE *, EVP_PKEY_get_attr, \
 AROS_LCA(const EVP_PKEY *, (___key), A0), \
 AROS_LCA(int, (___loc), D0), \
     struct Library *, AMISSL_BASE_NAME, 3308, Amissl)

#define GENERAL_SUBTREE_new() \
      AROS_LC0(GENERAL_SUBTREE *, GENERAL_SUBTREE_new, \
     struct Library *, AMISSL_BASE_NAME, 3309, Amissl)

#define X509_policy_node_get0_qualifiers(___node) \
      AROS_LC1(STACK_OF(POLICYQUALINFO) *, X509_policy_node_get0_qualifiers, \
 AROS_LCA(const X509_POLICY_NODE *, (___node), A0), \
     struct Library *, AMISSL_BASE_NAME, 3310, Amissl)

#define X509_policy_node_get0_policy(___node) \
      AROS_LC1(const ASN1_OBJECT *, X509_policy_node_get0_policy, \
 AROS_LCA(const X509_POLICY_NODE *, (___node), A0), \
     struct Library *, AMISSL_BASE_NAME, 3313, Amissl)

#define PKCS12_add_safes(___safes, ___p7_nid) \
      AROS_LC2(PKCS12 *, PKCS12_add_safes, \
 AROS_LCA(STACK_OF(PKCS7) *, (___safes), A0), \
 AROS_LCA(int, (___p7_nid), D0), \
     struct Library *, AMISSL_BASE_NAME, 3314, Amissl)

#define BN_BLINDING_convert_ex(___n, ___r, ___b, ___ctx) \
      AROS_LC4(int, BN_BLINDING_convert_ex, \
 AROS_LCA(BIGNUM *, (___n), A0), \
 AROS_LCA(BIGNUM *, (___r), A1), \
 AROS_LCA(BN_BLINDING *, (___b), A2), \
 AROS_LCA(BN_CTX *, (___ctx), A3), \
     struct Library *, AMISSL_BASE_NAME, 3315, Amissl)

#define X509_policy_tree_free(___tree) \
      AROS_LC1(void, X509_policy_tree_free, \
 AROS_LCA(X509_POLICY_TREE *, (___tree), A0), \
     struct Library *, AMISSL_BASE_NAME, 3316, Amissl)

#define BN_get0_nist_prime_224() \
      AROS_LC0(const BIGNUM *, BN_get0_nist_prime_224, \
     struct Library *, AMISSL_BASE_NAME, 3318, Amissl)

#define BN_GENCB_call(___cb, ___a, ___b) \
      AROS_LC3(int, BN_GENCB_call, \
 AROS_LCA(BN_GENCB *, (___cb), A0), \
 AROS_LCA(int, (___a), D0), \
 AROS_LCA(int, (___b), D1), \
     struct Library *, AMISSL_BASE_NAME, 3319, Amissl)

#define NAME_CONSTRAINTS_new() \
      AROS_LC0(NAME_CONSTRAINTS *, NAME_CONSTRAINTS_new, \
     struct Library *, AMISSL_BASE_NAME, 3320, Amissl)

#define ECParameters_print(___bp, ___key) \
      AROS_LC2(int, ECParameters_print, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(const EC_KEY *, (___key), A1), \
     struct Library *, AMISSL_BASE_NAME, 3321, Amissl)

#define OBSOLETE_BUF_memdup(___data, ___siz) \
      AROS_LC2(void *, OBSOLETE_BUF_memdup, \
 AROS_LCA(const void *, (___data), A0), \
 AROS_LCA(size_t, (___siz), D0), \
     struct Library *, AMISSL_BASE_NAME, 3322, Amissl)

#define X509_VERIFY_PARAM_set_trust(___param, ___trust) \
      AROS_LC2(int, X509_VERIFY_PARAM_set_trust, \
 AROS_LCA(X509_VERIFY_PARAM *, (___param), A0), \
 AROS_LCA(int, (___trust), D0), \
     struct Library *, AMISSL_BASE_NAME, 3323, Amissl)

#define EVP_PKEY_get_attr_count(___key) \
      AROS_LC1(int, EVP_PKEY_get_attr_count, \
 AROS_LCA(const EVP_PKEY *, (___key), A0), \
     struct Library *, AMISSL_BASE_NAME, 3324, Amissl)

#define X509_STORE_CTX_get0_param(___ctx) \
      AROS_LC1(X509_VERIFY_PARAM *, X509_STORE_CTX_get0_param, \
 AROS_LCA(const X509_STORE_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 3325, Amissl)

#define X509_STORE_set_depth(___store, ___depth) \
      AROS_LC2(int, X509_STORE_set_depth, \
 AROS_LCA(X509_STORE *, (___store), A0), \
 AROS_LCA(int, (___depth), D0), \
     struct Library *, AMISSL_BASE_NAME, 3327, Amissl)

#define OBSOLETE_BUF_strndup(___str, ___siz) \
      AROS_LC2(char *, OBSOLETE_BUF_strndup, \
 AROS_LCA(const char *, (___str), A0), \
 AROS_LCA(size_t, (___siz), D0), \
     struct Library *, AMISSL_BASE_NAME, 3328, Amissl)

#define ASN1_put_eoc(___pp) \
      AROS_LC1(int, ASN1_put_eoc, \
 AROS_LCA(unsigned char **, (___pp), A0), \
     struct Library *, AMISSL_BASE_NAME, 3329, Amissl)

#define X509_VERIFY_PARAM_table_cleanup() \
      AROS_LC0(void, X509_VERIFY_PARAM_table_cleanup, \
     struct Library *, AMISSL_BASE_NAME, 3330, Amissl)

#define RSA_setup_blinding(___rsa, ___ctx) \
      AROS_LC2(BN_BLINDING *, RSA_setup_blinding, \
 AROS_LCA(RSA *, (___rsa), A0), \
 AROS_LCA(BN_CTX *, (___ctx), A1), \
     struct Library *, AMISSL_BASE_NAME, 3331, Amissl)

#define OPENSSL_sk_find_ex(___st, ___data) \
      AROS_LC2(int, OPENSSL_sk_find_ex, \
 AROS_LCA(OPENSSL_STACK *, (___st), A0), \
 AROS_LCA(const void *, (___data), A1), \
     struct Library *, AMISSL_BASE_NAME, 3332, Amissl)

#define POLICY_CONSTRAINTS_new() \
      AROS_LC0(POLICY_CONSTRAINTS *, POLICY_CONSTRAINTS_new, \
     struct Library *, AMISSL_BASE_NAME, 3333, Amissl)

#define X509_VERIFY_PARAM_get_depth(___param) \
      AROS_LC1(int, X509_VERIFY_PARAM_get_depth, \
 AROS_LCA(const X509_VERIFY_PARAM *, (___param), A0), \
     struct Library *, AMISSL_BASE_NAME, 3334, Amissl)

#define ASN1_item_ndef_i2d(___val, ___out, ___it) \
      AROS_LC3(int, ASN1_item_ndef_i2d, \
 AROS_LCA(const ASN1_VALUE *, (___val), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
 AROS_LCA(const ASN1_ITEM *, (___it), A2), \
     struct Library *, AMISSL_BASE_NAME, 3335, Amissl)

#define ERR_pop_to_mark() \
      AROS_LC0(int, ERR_pop_to_mark, \
     struct Library *, AMISSL_BASE_NAME, 3336, Amissl)

#define X509_policy_level_get0_node(___level, ___i) \
      AROS_LC2(X509_POLICY_NODE *, X509_policy_level_get0_node, \
 AROS_LCA(const X509_POLICY_LEVEL *, (___level), A0), \
 AROS_LCA(int, (___i), D0), \
     struct Library *, AMISSL_BASE_NAME, 3337, Amissl)

#define i2d_PKCS7_NDEF(___a, ___out) \
      AROS_LC2(int, i2d_PKCS7_NDEF, \
 AROS_LCA(const PKCS7 *, (___a), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 3338, Amissl)

#define ASN1_generate_v3(___str, ___cnf) \
      AROS_LC2(ASN1_TYPE *, ASN1_generate_v3, \
 AROS_LCA(const char *, (___str), A0), \
 AROS_LCA(X509V3_CTX *, (___cnf), A1), \
     struct Library *, AMISSL_BASE_NAME, 3339, Amissl)

#define X509_policy_tree_level_count(___tree) \
      AROS_LC1(int, X509_policy_tree_level_count, \
 AROS_LCA(const X509_POLICY_TREE *, (___tree), A0), \
     struct Library *, AMISSL_BASE_NAME, 3340, Amissl)

#define BN_nist_mod_224(___r, ___a, ___p, ___ctx) \
      AROS_LC4(int, BN_nist_mod_224, \
 AROS_LCA(BIGNUM *, (___r), A0), \
 AROS_LCA(const BIGNUM *, (___a), A1), \
 AROS_LCA(const BIGNUM *, (___p), A2), \
 AROS_LCA(BN_CTX *, (___ctx), A3), \
     struct Library *, AMISSL_BASE_NAME, 3342, Amissl)

#define BIO_dgram_non_fatal_error(___error) \
      AROS_LC1(int, BIO_dgram_non_fatal_error, \
 AROS_LCA(int, (___error), D0), \
     struct Library *, AMISSL_BASE_NAME, 3343, Amissl)

#define v2i_ASN1_BIT_STRING(___method, ___ctx, ___nval) \
      AROS_LC3(ASN1_BIT_STRING *, v2i_ASN1_BIT_STRING, \
 AROS_LCA(X509V3_EXT_METHOD *, (___method), A0), \
 AROS_LCA(X509V3_CTX *, (___ctx), A1), \
 AROS_LCA(STACK_OF(CONF_VALUE) *, (___nval), A2), \
     struct Library *, AMISSL_BASE_NAME, 3344, Amissl)

#define X509_STORE_CTX_set_default(___ctx, ___name) \
      AROS_LC2(int, X509_STORE_CTX_set_default, \
 AROS_LCA(X509_STORE_CTX *, (___ctx), A0), \
 AROS_LCA(const char *, (___name), A1), \
     struct Library *, AMISSL_BASE_NAME, 3345, Amissl)

#define X509_VERIFY_PARAM_set1(___to, ___from) \
      AROS_LC2(int, X509_VERIFY_PARAM_set1, \
 AROS_LCA(X509_VERIFY_PARAM *, (___to), A0), \
 AROS_LCA(const X509_VERIFY_PARAM *, (___from), A1), \
     struct Library *, AMISSL_BASE_NAME, 3346, Amissl)

#define v2i_GENERAL_NAME_ex(___out, ___method, ___ctx, ___cnf, ___is_nc) \
      AROS_LC5(GENERAL_NAME *, v2i_GENERAL_NAME_ex, \
 AROS_LCA(GENERAL_NAME *, (___out), A0), \
 AROS_LCA(const X509V3_EXT_METHOD *, (___method), A1), \
 AROS_LCA(X509V3_CTX *, (___ctx), A2), \
 AROS_LCA(CONF_VALUE *, (___cnf), A3), \
 AROS_LCA(int, (___is_nc), D0), \
     struct Library *, AMISSL_BASE_NAME, 3347, Amissl)

#define BN_nist_mod_521(___r, ___a, ___p, ___ctx) \
      AROS_LC4(int, BN_nist_mod_521, \
 AROS_LCA(BIGNUM *, (___r), A0), \
 AROS_LCA(const BIGNUM *, (___a), A1), \
 AROS_LCA(const BIGNUM *, (___p), A2), \
 AROS_LCA(BN_CTX *, (___ctx), A3), \
     struct Library *, AMISSL_BASE_NAME, 3348, Amissl)

#define X509_policy_tree_get0_level(___tree, ___i) \
      AROS_LC2(X509_POLICY_LEVEL *, X509_policy_tree_get0_level, \
 AROS_LCA(const X509_POLICY_TREE *, (___tree), A0), \
 AROS_LCA(int, (___i), D0), \
     struct Library *, AMISSL_BASE_NAME, 3349, Amissl)

#define ASN1_const_check_infinite_end(___p, ___len) \
      AROS_LC2(int, ASN1_const_check_infinite_end, \
 AROS_LCA(const unsigned char **, (___p), A0), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 3350, Amissl)

#define EVP_PKEY_delete_attr(___key, ___loc) \
      AROS_LC2(X509_ATTRIBUTE *, EVP_PKEY_delete_attr, \
 AROS_LCA(EVP_PKEY *, (___key), A0), \
 AROS_LCA(int, (___loc), D0), \
     struct Library *, AMISSL_BASE_NAME, 3351, Amissl)

#define BN_get0_nist_prime_256() \
      AROS_LC0(const BIGNUM *, BN_get0_nist_prime_256, \
     struct Library *, AMISSL_BASE_NAME, 3352, Amissl)

#define i2v_ASN1_BIT_STRING(___method, ___bits, ___extlist) \
      AROS_LC3(STACK_OF(CONF_VALUE) *, i2v_ASN1_BIT_STRING, \
 AROS_LCA(X509V3_EXT_METHOD *, (___method), A0), \
 AROS_LCA(ASN1_BIT_STRING *, (___bits), A1), \
 AROS_LCA(STACK_OF(CONF_VALUE) *, (___extlist), A2), \
     struct Library *, AMISSL_BASE_NAME, 3353, Amissl)

#define BN_nist_mod_384(___r, ___a, ___p, ___ctx) \
      AROS_LC4(int, BN_nist_mod_384, \
 AROS_LCA(BIGNUM *, (___r), A0), \
 AROS_LCA(const BIGNUM *, (___a), A1), \
 AROS_LCA(const BIGNUM *, (___p), A2), \
 AROS_LCA(BN_CTX *, (___ctx), A3), \
     struct Library *, AMISSL_BASE_NAME, 3354, Amissl)

#define EVP_PKEY_get_attr_by_OBJ(___key, ___obj, ___lastpos) \
      AROS_LC3(int, EVP_PKEY_get_attr_by_OBJ, \
 AROS_LCA(const EVP_PKEY *, (___key), A0), \
 AROS_LCA(const ASN1_OBJECT *, (___obj), A1), \
 AROS_LCA(int, (___lastpos), D0), \
     struct Library *, AMISSL_BASE_NAME, 3357, Amissl)

#define X509_VERIFY_PARAM_lookup(___name) \
      AROS_LC1(const X509_VERIFY_PARAM *, X509_VERIFY_PARAM_lookup, \
 AROS_LCA(const char *, (___name), A0), \
     struct Library *, AMISSL_BASE_NAME, 3358, Amissl)

#define X509V3_NAME_from_section(___nm, ___dn_sk, ___chtype) \
      AROS_LC3(int, X509V3_NAME_from_section, \
 AROS_LCA(X509_NAME *, (___nm), A0), \
 AROS_LCA(STACK_OF(CONF_VALUE) *, (___dn_sk), A1), \
 AROS_LCA(unsigned long, (___chtype), A2), \
     struct Library *, AMISSL_BASE_NAME, 3360, Amissl)

#define EVP_PKEY_add1_attr(___key, ___attr) \
      AROS_LC2(int, EVP_PKEY_add1_attr, \
 AROS_LCA(EVP_PKEY *, (___key), A0), \
 AROS_LCA(X509_ATTRIBUTE *, (___attr), A1), \
     struct Library *, AMISSL_BASE_NAME, 3361, Amissl)

#define BIO_dump_indent_cb(___cb, ___u, ___s, ___len, ___indent) \
      AROS_LC5(int, BIO_dump_indent_cb, \
 AROS_LCA(int (*)(const void *data,size_t len,void *u), (___cb), A0), \
 AROS_LCA(void *, (___u), A1), \
 AROS_LCA(const void *, (___s), A2), \
 AROS_LCA(int, (___len), D0), \
 AROS_LCA(int, (___indent), D1), \
     struct Library *, AMISSL_BASE_NAME, 3363, Amissl)

#define BN_nist_mod_256(___r, ___a, ___p, ___ctx) \
      AROS_LC4(int, BN_nist_mod_256, \
 AROS_LCA(BIGNUM *, (___r), A0), \
 AROS_LCA(const BIGNUM *, (___a), A1), \
 AROS_LCA(const BIGNUM *, (___p), A2), \
 AROS_LCA(BN_CTX *, (___ctx), A3), \
     struct Library *, AMISSL_BASE_NAME, 3366, Amissl)

#define X509_VERIFY_PARAM_add0_table(___param) \
      AROS_LC1(int, X509_VERIFY_PARAM_add0_table, \
 AROS_LCA(X509_VERIFY_PARAM *, (___param), A0), \
     struct Library *, AMISSL_BASE_NAME, 3367, Amissl)

#define BN_BLINDING_create_param(___b, ___e, ___m, ___ctx, ___bn_mod_exp, ___m_ctx) \
      AROS_LC6(BN_BLINDING *, BN_BLINDING_create_param, \
 AROS_LCA(BN_BLINDING *, (___b), A0), \
 AROS_LCA(const BIGNUM *, (___e), A1), \
 AROS_LCA(BIGNUM *, (___m), A2), \
 AROS_LCA(BN_CTX *, (___ctx), A3), \
 AROS_LCA(int (*)(BIGNUM *r,const BIGNUM *a,const BIGNUM *p,const BIGNUM *m,BN_CTX *ctx,BN_MONT_CTX *m_ctx), (___bn_mod_exp), D0), \
 AROS_LCA(BN_MONT_CTX *, (___m_ctx), D1), \
     struct Library *, AMISSL_BASE_NAME, 3369, Amissl)

#define BN_get0_nist_prime_521() \
      AROS_LC0(const BIGNUM *, BN_get0_nist_prime_521, \
     struct Library *, AMISSL_BASE_NAME, 3370, Amissl)

#define BN_is_prime_fasttest_ex(___p, ___nchecks, ___ctx, ___do_trial_devision, ___cb) \
      AROS_LC5(int, BN_is_prime_fasttest_ex, \
 AROS_LCA(const BIGNUM *, (___p), A0), \
 AROS_LCA(int, (___nchecks), D0), \
 AROS_LCA(BN_CTX *, (___ctx), A1), \
 AROS_LCA(int, (___do_trial_devision), D1), \
 AROS_LCA(BN_GENCB *, (___cb), A2), \
     struct Library *, AMISSL_BASE_NAME, 3371, Amissl)

#define X509_policy_check(___ptree, ___pexplicit_policy, ___certs, ___policy_oids, ___flags) \
      AROS_LC5(int, X509_policy_check, \
 AROS_LCA(X509_POLICY_TREE **, (___ptree), A0), \
 AROS_LCA(int *, (___pexplicit_policy), A1), \
 AROS_LCA(STACK_OF(X509) *, (___certs), A2), \
 AROS_LCA(STACK_OF(ASN1_OBJECT) *, (___policy_oids), A3), \
 AROS_LCA(unsigned int, (___flags), D0), \
     struct Library *, AMISSL_BASE_NAME, 3372, Amissl)

#define EVP_PKEY_get_attr_by_NID(___key, ___nid, ___lastpos) \
      AROS_LC3(int, EVP_PKEY_get_attr_by_NID, \
 AROS_LCA(const EVP_PKEY *, (___key), A0), \
 AROS_LCA(int, (___nid), D0), \
 AROS_LCA(int, (___lastpos), D1), \
     struct Library *, AMISSL_BASE_NAME, 3373, Amissl)

#define BN_BLINDING_get_flags(___b) \
      AROS_LC1(unsigned long, BN_BLINDING_get_flags, \
 AROS_LCA(const BN_BLINDING *, (___b), A0), \
     struct Library *, AMISSL_BASE_NAME, 3374, Amissl)

#define PKCS12_add_cert(___pbags, ___cert) \
      AROS_LC2(PKCS12_SAFEBAG *, PKCS12_add_cert, \
 AROS_LCA(STACK_OF(PKCS12_SAFEBAG) **, (___pbags), A0), \
 AROS_LCA(X509 *, (___cert), A1), \
     struct Library *, AMISSL_BASE_NAME, 3375, Amissl)

#define EVP_CIPHER_CTX_rand_key(___ctx, ___key) \
      AROS_LC2(int, EVP_CIPHER_CTX_rand_key, \
 AROS_LCA(EVP_CIPHER_CTX *, (___ctx), A0), \
 AROS_LCA(unsigned char *, (___key), A1), \
     struct Library *, AMISSL_BASE_NAME, 3376, Amissl)

#define a2i_IPADDRESS_NC(___ipasc) \
      AROS_LC1(ASN1_OCTET_STRING *, a2i_IPADDRESS_NC, \
 AROS_LCA(const char *, (___ipasc), A0), \
     struct Library *, AMISSL_BASE_NAME, 3377, Amissl)

#define PKCS7_set_digest(___p7, ___md) \
      AROS_LC2(int, PKCS7_set_digest, \
 AROS_LCA(PKCS7 *, (___p7), A0), \
 AROS_LCA(const EVP_MD *, (___md), A1), \
     struct Library *, AMISSL_BASE_NAME, 3378, Amissl)

#define POLICY_MAPPING_new() \
      AROS_LC0(POLICY_MAPPING *, POLICY_MAPPING_new, \
     struct Library *, AMISSL_BASE_NAME, 3379, Amissl)

#define PKCS7_set0_type_other(___p7, ___type, ___other) \
      AROS_LC3(int, PKCS7_set0_type_other, \
 AROS_LCA(PKCS7 *, (___p7), A0), \
 AROS_LCA(int, (___type), D0), \
 AROS_LCA(ASN1_TYPE *, (___other), A1), \
     struct Library *, AMISSL_BASE_NAME, 3380, Amissl)

#define EVP_PKEY_add1_attr_by_OBJ(___key, ___obj, ___type, ___bytes, ___len) \
      AROS_LC5(int, EVP_PKEY_add1_attr_by_OBJ, \
 AROS_LCA(EVP_PKEY *, (___key), A0), \
 AROS_LCA(const ASN1_OBJECT *, (___obj), A1), \
 AROS_LCA(int, (___type), D0), \
 AROS_LCA(const unsigned char *, (___bytes), A2), \
 AROS_LCA(int, (___len), D1), \
     struct Library *, AMISSL_BASE_NAME, 3383, Amissl)

#define X509_VERIFY_PARAM_set_time(___param, ___t) \
      AROS_LC2(void, X509_VERIFY_PARAM_set_time, \
 AROS_LCA(X509_VERIFY_PARAM *, (___param), A0), \
 AROS_LCA(time_t, (___t), D0), \
     struct Library *, AMISSL_BASE_NAME, 3384, Amissl)

#define PKCS12_add_key(___pbags, ___key, ___key_usage, ___iter, ___key_nid, ___pass) \
      AROS_LC6(PKCS12_SAFEBAG *, PKCS12_add_key, \
 AROS_LCA(STACK_OF(PKCS12_SAFEBAG) **, (___pbags), A0), \
 AROS_LCA(EVP_PKEY *, (___key), A1), \
 AROS_LCA(int, (___key_usage), D0), \
 AROS_LCA(int, (___iter), D1), \
 AROS_LCA(int, (___key_nid), D2), \
 AROS_LCA(const char *, (___pass), A2), \
     struct Library *, AMISSL_BASE_NAME, 3386, Amissl)

#define BIO_dump_cb(___cb, ___u, ___s, ___len) \
      AROS_LC4(int, BIO_dump_cb, \
 AROS_LCA(int (*)(const void *data,size_t len,void *u), (___cb), A0), \
 AROS_LCA(void *, (___u), A1), \
 AROS_LCA(const void *, (___s), A2), \
 AROS_LCA(int, (___len), A3), \
     struct Library *, AMISSL_BASE_NAME, 3388, Amissl)

#define BN_get_rfc3526_prime_8192(___bn) \
      AROS_LC1(BIGNUM *, BN_get_rfc3526_prime_8192, \
 AROS_LCA(BIGNUM *, (___bn), A0), \
     struct Library *, AMISSL_BASE_NAME, 3391, Amissl)

#define X509_VERIFY_PARAM_clear_flags(___param, ___flags) \
      AROS_LC2(int, X509_VERIFY_PARAM_clear_flags, \
 AROS_LCA(X509_VERIFY_PARAM *, (___param), A0), \
 AROS_LCA(unsigned long, (___flags), D0), \
     struct Library *, AMISSL_BASE_NAME, 3392, Amissl)

#define BN_get_rfc2409_prime_1024(___bn) \
      AROS_LC1(BIGNUM *, BN_get_rfc2409_prime_1024, \
 AROS_LCA(BIGNUM *, (___bn), A0), \
     struct Library *, AMISSL_BASE_NAME, 3393, Amissl)

#define BN_get_rfc3526_prime_2048(___bn) \
      AROS_LC1(BIGNUM *, BN_get_rfc3526_prime_2048, \
 AROS_LCA(BIGNUM *, (___bn), A0), \
     struct Library *, AMISSL_BASE_NAME, 3394, Amissl)

#define BN_get_rfc3526_prime_6144(___bn) \
      AROS_LC1(BIGNUM *, BN_get_rfc3526_prime_6144, \
 AROS_LCA(BIGNUM *, (___bn), A0), \
     struct Library *, AMISSL_BASE_NAME, 3395, Amissl)

#define BN_get_rfc3526_prime_1536(___bn) \
      AROS_LC1(BIGNUM *, BN_get_rfc3526_prime_1536, \
 AROS_LCA(BIGNUM *, (___bn), A0), \
     struct Library *, AMISSL_BASE_NAME, 3396, Amissl)

#define BN_get_rfc3526_prime_3072(___bn) \
      AROS_LC1(BIGNUM *, BN_get_rfc3526_prime_3072, \
 AROS_LCA(BIGNUM *, (___bn), A0), \
     struct Library *, AMISSL_BASE_NAME, 3397, Amissl)

#define BN_get_rfc3526_prime_4096(___bn) \
      AROS_LC1(BIGNUM *, BN_get_rfc3526_prime_4096, \
 AROS_LCA(BIGNUM *, (___bn), A0), \
     struct Library *, AMISSL_BASE_NAME, 3398, Amissl)

#define BN_get_rfc2409_prime_768(___bn) \
      AROS_LC1(BIGNUM *, BN_get_rfc2409_prime_768, \
 AROS_LCA(BIGNUM *, (___bn), A0), \
     struct Library *, AMISSL_BASE_NAME, 3399, Amissl)

#define X509_VERIFY_PARAM_get_flags(___param) \
      AROS_LC1(unsigned long, X509_VERIFY_PARAM_get_flags, \
 AROS_LCA(const X509_VERIFY_PARAM *, (___param), A0), \
     struct Library *, AMISSL_BASE_NAME, 3400, Amissl)

#define EVP_CIPHER_CTX_new() \
      AROS_LC0(EVP_CIPHER_CTX *, EVP_CIPHER_CTX_new, \
     struct Library *, AMISSL_BASE_NAME, 3401, Amissl)

#define EVP_CIPHER_CTX_free(___a) \
      AROS_LC1(void, EVP_CIPHER_CTX_free, \
 AROS_LCA(EVP_CIPHER_CTX *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 3402, Amissl)

#define EVP_CIPHER_get_block_size(___cipher) \
      AROS_LC1(int, EVP_CIPHER_get_block_size, \
 AROS_LCA(const EVP_CIPHER *, (___cipher), A0), \
     struct Library *, AMISSL_BASE_NAME, 3403, Amissl)

#define EVP_CIPHER_CTX_set_app_data(___ctx, ___data) \
      AROS_LC2(void, EVP_CIPHER_CTX_set_app_data, \
 AROS_LCA(EVP_CIPHER_CTX *, (___ctx), A0), \
 AROS_LCA(void *, (___data), A1), \
     struct Library *, AMISSL_BASE_NAME, 3404, Amissl)

#define BIO_method_type(___b) \
      AROS_LC1(int, BIO_method_type, \
 AROS_LCA(const BIO *, (___b), A0), \
     struct Library *, AMISSL_BASE_NAME, 3405, Amissl)

#define EVP_CIPHER_CTX_get_nid(___ctx) \
      AROS_LC1(int, EVP_CIPHER_CTX_get_nid, \
 AROS_LCA(const EVP_CIPHER_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 3406, Amissl)

#define EVP_CIPHER_CTX_get_key_length(___ctx) \
      AROS_LC1(int, EVP_CIPHER_CTX_get_key_length, \
 AROS_LCA(const EVP_CIPHER_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 3407, Amissl)

#define EVP_MD_get_size(___md) \
      AROS_LC1(int, EVP_MD_get_size, \
 AROS_LCA(const EVP_MD *, (___md), A0), \
     struct Library *, AMISSL_BASE_NAME, 3408, Amissl)

#define EVP_MD_CTX_test_flags(___ctx, ___flags) \
      AROS_LC2(int, EVP_MD_CTX_test_flags, \
 AROS_LCA(const EVP_MD_CTX *, (___ctx), A0), \
 AROS_LCA(int, (___flags), D0), \
     struct Library *, AMISSL_BASE_NAME, 3409, Amissl)

#define BIO_clear_flags(___b, ___flags) \
      AROS_LC2(void, BIO_clear_flags, \
 AROS_LCA(BIO *, (___b), A0), \
 AROS_LCA(int, (___flags), D0), \
     struct Library *, AMISSL_BASE_NAME, 3410, Amissl)

#define EVP_MD_get_pkey_type(___md) \
      AROS_LC1(int, EVP_MD_get_pkey_type, \
 AROS_LCA(const EVP_MD *, (___md), A0), \
     struct Library *, AMISSL_BASE_NAME, 3411, Amissl)

#define EVP_MD_CTX_clear_flags(___ctx, ___flags) \
      AROS_LC2(void, EVP_MD_CTX_clear_flags, \
 AROS_LCA(EVP_MD_CTX *, (___ctx), A0), \
 AROS_LCA(int, (___flags), D0), \
     struct Library *, AMISSL_BASE_NAME, 3412, Amissl)

#define EVP_CIPHER_get_flags(___cipher) \
      AROS_LC1(unsigned long, EVP_CIPHER_get_flags, \
 AROS_LCA(const EVP_CIPHER *, (___cipher), A0), \
     struct Library *, AMISSL_BASE_NAME, 3413, Amissl)

#define BIO_get_callback(___b) \
      AROS_LC1(BIO_callback_fn, BIO_get_callback, \
 AROS_LCA(const BIO *, (___b), A0), \
     struct Library *, AMISSL_BASE_NAME, 3414, Amissl)

#define EVP_CIPHER_get_key_length(___cipher) \
      AROS_LC1(int, EVP_CIPHER_get_key_length, \
 AROS_LCA(const EVP_CIPHER *, (___cipher), A0), \
     struct Library *, AMISSL_BASE_NAME, 3415, Amissl)

#define EVP_Cipher(___c, ___out, ___in, ___inl) \
      AROS_LC4(int, EVP_Cipher, \
 AROS_LCA(EVP_CIPHER_CTX *, (___c), A0), \
 AROS_LCA(unsigned char *, (___out), A1), \
 AROS_LCA(const unsigned char *, (___in), A2), \
 AROS_LCA(unsigned int, (___inl), D0), \
     struct Library *, AMISSL_BASE_NAME, 3416, Amissl)

#define EVP_CIPHER_CTX_get_block_size(___ctx) \
      AROS_LC1(int, EVP_CIPHER_CTX_get_block_size, \
 AROS_LCA(const EVP_CIPHER_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 3417, Amissl)

#define EVP_CIPHER_CTX_cipher(___ctx) \
      AROS_LC1(const EVP_CIPHER *, EVP_CIPHER_CTX_cipher, \
 AROS_LCA(const EVP_CIPHER_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 3418, Amissl)

#define EVP_CIPHER_CTX_get_app_data(___ctx) \
      AROS_LC1(void *, EVP_CIPHER_CTX_get_app_data, \
 AROS_LCA(const EVP_CIPHER_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 3419, Amissl)

#define EVP_MD_get_block_size(___md) \
      AROS_LC1(int, EVP_MD_get_block_size, \
 AROS_LCA(const EVP_MD *, (___md), A0), \
     struct Library *, AMISSL_BASE_NAME, 3420, Amissl)

#define OBSOLETE_EVP_CIPHER_CTX_flags(___ctx) \
      AROS_LC1(unsigned long, OBSOLETE_EVP_CIPHER_CTX_flags, \
 AROS_LCA(const EVP_CIPHER_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 3421, Amissl)

#define EVP_MD_CTX_md(___ctx) \
      AROS_LC1(const EVP_MD *, EVP_MD_CTX_md, \
 AROS_LCA(const EVP_MD_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 3422, Amissl)

#define BIO_method_name(___b) \
      AROS_LC1(const char *, BIO_method_name, \
 AROS_LCA(const BIO *, (___b), A0), \
     struct Library *, AMISSL_BASE_NAME, 3423, Amissl)

#define EVP_CIPHER_CTX_get_iv_length(___ctx) \
      AROS_LC1(int, EVP_CIPHER_CTX_get_iv_length, \
 AROS_LCA(const EVP_CIPHER_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 3424, Amissl)

#define CRYPTO_memcmp(___in_a, ___in_b, ___len) \
      AROS_LC3(int, CRYPTO_memcmp, \
 AROS_LCA(const void *, (___in_a), A0), \
 AROS_LCA(const void *, (___in_b), A1), \
 AROS_LCA(size_t, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 3425, Amissl)

#define BN_consttime_swap(___swap, ___a, ___b, ___nwords) \
      AROS_LC4(void, BN_consttime_swap, \
 AROS_LCA(BN_ULONG, (___swap), D0), \
 AROS_LCA(BIGNUM *, (___a), A0), \
 AROS_LCA(BIGNUM *, (___b), A1), \
 AROS_LCA(int, (___nwords), D1), \
     struct Library *, AMISSL_BASE_NAME, 3426, Amissl)

#define i2d_X509_EXTENSIONS(___a, ___out) \
      AROS_LC2(int, i2d_X509_EXTENSIONS, \
 AROS_LCA(const X509_EXTENSIONS *, (___a), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 3427, Amissl)

#define d2i_X509_EXTENSIONS(___a, ___in, ___len) \
      AROS_LC3(X509_EXTENSIONS *, d2i_X509_EXTENSIONS, \
 AROS_LCA(X509_EXTENSIONS **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 3428, Amissl)

#define X509_ALGOR_get0(___pobj, ___pptype, ___ppval, ___algor) \
      AROS_LC4(void, X509_ALGOR_get0, \
 AROS_LCA(const ASN1_OBJECT **, (___pobj), A0), \
 AROS_LCA(int *, (___pptype), A1), \
 AROS_LCA(const void **, (___ppval), A2), \
 AROS_LCA(const X509_ALGOR *, (___algor), A3), \
     struct Library *, AMISSL_BASE_NAME, 3429, Amissl)

#define X509_ALGOR_set0(___alg, ___aobj, ___ptype, ___pval) \
      AROS_LC4(int, X509_ALGOR_set0, \
 AROS_LCA(X509_ALGOR *, (___alg), A0), \
 AROS_LCA(ASN1_OBJECT *, (___aobj), A1), \
 AROS_LCA(int, (___ptype), D0), \
 AROS_LCA(void *, (___pval), A2), \
     struct Library *, AMISSL_BASE_NAME, 3430, Amissl)

#define X509at_get0_data_by_OBJ(___x, ___obj, ___lastpos, ___type) \
      AROS_LC4(void *, X509at_get0_data_by_OBJ, \
 AROS_LCA(const STACK_OF(X509_ATTRIBUTE) *, (___x), A0), \
 AROS_LCA(const ASN1_OBJECT *, (___obj), A1), \
 AROS_LCA(int, (___lastpos), D0), \
 AROS_LCA(int, (___type), D1), \
     struct Library *, AMISSL_BASE_NAME, 3431, Amissl)

#define ASN1_TYPE_set1(___a, ___type, ___value) \
      AROS_LC3(int, ASN1_TYPE_set1, \
 AROS_LCA(ASN1_TYPE *, (___a), A0), \
 AROS_LCA(int, (___type), D0), \
 AROS_LCA(const void *, (___value), A1), \
     struct Library *, AMISSL_BASE_NAME, 3432, Amissl)

#define ASN1_STRING_set0(___str, ___data, ___len) \
      AROS_LC3(void, ASN1_STRING_set0, \
 AROS_LCA(ASN1_STRING *, (___str), A0), \
 AROS_LCA(void *, (___data), A1), \
 AROS_LCA(int, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 3433, Amissl)

#define i2d_X509_ALGORS(___a, ___out) \
      AROS_LC2(int, i2d_X509_ALGORS, \
 AROS_LCA(const X509_ALGORS *, (___a), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 3434, Amissl)

#define d2i_X509_ALGORS(___a, ___in, ___len) \
      AROS_LC3(X509_ALGORS *, d2i_X509_ALGORS, \
 AROS_LCA(X509_ALGORS **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 3436, Amissl)

#define SMIME_read_ASN1(___bio, ___bcont, ___it) \
      AROS_LC3(ASN1_VALUE *, SMIME_read_ASN1, \
 AROS_LCA(BIO *, (___bio), A0), \
 AROS_LCA(BIO **, (___bcont), A1), \
 AROS_LCA(const ASN1_ITEM *, (___it), A2), \
     struct Library *, AMISSL_BASE_NAME, 3437, Amissl)

#define OPENSSL_isservice() \
      AROS_LC0(int, OPENSSL_isservice, \
     struct Library *, AMISSL_BASE_NAME, 3438, Amissl)

#define EVP_CIPHER_CTX_clear_flags(___ctx, ___flags) \
      AROS_LC2(void, EVP_CIPHER_CTX_clear_flags, \
 AROS_LCA(EVP_CIPHER_CTX *, (___ctx), A0), \
 AROS_LCA(int, (___flags), D0), \
     struct Library *, AMISSL_BASE_NAME, 3439, Amissl)

#define BN_X931_generate_prime_ex(___p, ___p1, ___p2, ___Xp1, ___Xp2, ___Xp, ___e, ___ctx, ___cb) \
      AROS_LC9(int, BN_X931_generate_prime_ex, \
 AROS_LCA(BIGNUM *, (___p), A0), \
 AROS_LCA(BIGNUM *, (___p1), A1), \
 AROS_LCA(BIGNUM *, (___p2), A2), \
 AROS_LCA(BIGNUM *, (___Xp1), A3), \
 AROS_LCA(BIGNUM *, (___Xp2), D0), \
 AROS_LCA(const BIGNUM *, (___Xp), D1), \
 AROS_LCA(const BIGNUM *, (___e), D2), \
 AROS_LCA(BN_CTX *, (___ctx), D3), \
 AROS_LCA(BN_GENCB *, (___cb), D4), \
     struct Library *, AMISSL_BASE_NAME, 3440, Amissl)

#define EVP_CIPHER_CTX_test_flags(___ctx, ___flags) \
      AROS_LC2(int, EVP_CIPHER_CTX_test_flags, \
 AROS_LCA(const EVP_CIPHER_CTX *, (___ctx), A0), \
 AROS_LCA(int, (___flags), D0), \
     struct Library *, AMISSL_BASE_NAME, 3441, Amissl)

#define EVP_add_alg_module() \
      AROS_LC0(void, EVP_add_alg_module, \
     struct Library *, AMISSL_BASE_NAME, 3442, Amissl)

#define BN_X931_derive_prime_ex(___p, ___p1, ___p2, ___Xp, ___Xp1, ___Xp2, ___e, ___ctx, ___cb) \
      AROS_LC9(int, BN_X931_derive_prime_ex, \
 AROS_LCA(BIGNUM *, (___p), A0), \
 AROS_LCA(BIGNUM *, (___p1), A1), \
 AROS_LCA(BIGNUM *, (___p2), A2), \
 AROS_LCA(const BIGNUM *, (___Xp), D0), \
 AROS_LCA(const BIGNUM *, (___Xp1), A3), \
 AROS_LCA(const BIGNUM *, (___Xp2), D1), \
 AROS_LCA(const BIGNUM *, (___e), D2), \
 AROS_LCA(BN_CTX *, (___ctx), D3), \
 AROS_LCA(BN_GENCB *, (___cb), D4), \
     struct Library *, AMISSL_BASE_NAME, 3443, Amissl)

#define OPENSSL_init() \
      AROS_LC0(void, OPENSSL_init, \
     struct Library *, AMISSL_BASE_NAME, 3444, Amissl)

#define CRYPTO_strdup(___str, ___file, ___line) \
      AROS_LC3(char *, CRYPTO_strdup, \
 AROS_LCA(const char *, (___str), A0), \
 AROS_LCA(const char *, (___file), A1), \
 AROS_LCA(int, (___line), D0), \
     struct Library *, AMISSL_BASE_NAME, 3445, Amissl)

#define i2d_TS_ACCURACY(___a, ___pp) \
      AROS_LC2(int, i2d_TS_ACCURACY, \
 AROS_LCA(const TS_ACCURACY *, (___a), A0), \
 AROS_LCA(unsigned char **, (___pp), A1), \
     struct Library *, AMISSL_BASE_NAME, 3447, Amissl)

#define i2d_TS_MSG_IMPRINT(___a, ___pp) \
      AROS_LC2(int, i2d_TS_MSG_IMPRINT, \
 AROS_LCA(const TS_MSG_IMPRINT *, (___a), A0), \
 AROS_LCA(unsigned char **, (___pp), A1), \
     struct Library *, AMISSL_BASE_NAME, 3449, Amissl)

#define EVP_PKEY_print_public(___out, ___pkey, ___indent, ___pctx) \
      AROS_LC4(int, EVP_PKEY_print_public, \
 AROS_LCA(BIO *, (___out), A0), \
 AROS_LCA(const EVP_PKEY *, (___pkey), A1), \
 AROS_LCA(int, (___indent), D0), \
 AROS_LCA(ASN1_PCTX *, (___pctx), A2), \
     struct Library *, AMISSL_BASE_NAME, 3450, Amissl)

#define EVP_PKEY_CTX_new(___pkey, ___e) \
      AROS_LC2(EVP_PKEY_CTX *, EVP_PKEY_CTX_new, \
 AROS_LCA(EVP_PKEY *, (___pkey), A0), \
 AROS_LCA(ENGINE *, (___e), A1), \
     struct Library *, AMISSL_BASE_NAME, 3451, Amissl)

#define i2d_TS_TST_INFO(___a, ___pp) \
      AROS_LC2(int, i2d_TS_TST_INFO, \
 AROS_LCA(const TS_TST_INFO *, (___a), A0), \
 AROS_LCA(unsigned char **, (___pp), A1), \
     struct Library *, AMISSL_BASE_NAME, 3452, Amissl)

#define EVP_PKEY_asn1_find(___pe, ___type) \
      AROS_LC2(const EVP_PKEY_ASN1_METHOD *, EVP_PKEY_asn1_find, \
 AROS_LCA(ENGINE **, (___pe), A0), \
 AROS_LCA(int, (___type), A1), \
     struct Library *, AMISSL_BASE_NAME, 3453, Amissl)

#define TS_CONF_load_cert(___file) \
      AROS_LC1(X509 *, TS_CONF_load_cert, \
 AROS_LCA(const char *, (___file), A0), \
     struct Library *, AMISSL_BASE_NAME, 3455, Amissl)

#define TS_REQ_get_ext(___a, ___loc) \
      AROS_LC2(X509_EXTENSION *, TS_REQ_get_ext, \
 AROS_LCA(TS_REQ *, (___a), A0), \
 AROS_LCA(int, (___loc), D0), \
     struct Library *, AMISSL_BASE_NAME, 3456, Amissl)

#define EVP_PKEY_sign_init(___ctx) \
      AROS_LC1(int, EVP_PKEY_sign_init, \
 AROS_LCA(EVP_PKEY_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 3457, Amissl)

#define ASN1_item_print(___out, ___ifld, ___indent, ___it, ___ctx) \
      AROS_LC5(int, ASN1_item_print, \
 AROS_LCA(BIO *, (___out), A0), \
 AROS_LCA(const ASN1_VALUE *, (___ifld), A1), \
 AROS_LCA(int, (___indent), D0), \
 AROS_LCA(const ASN1_ITEM *, (___it), A2), \
 AROS_LCA(const ASN1_PCTX *, (___ctx), A3), \
     struct Library *, AMISSL_BASE_NAME, 3458, Amissl)

#define TS_TST_INFO_set_nonce(___a, ___nonce) \
      AROS_LC2(int, TS_TST_INFO_set_nonce, \
 AROS_LCA(TS_TST_INFO *, (___a), A0), \
 AROS_LCA(const ASN1_INTEGER *, (___nonce), A1), \
     struct Library *, AMISSL_BASE_NAME, 3459, Amissl)

#define TS_RESP_dup(___a) \
      AROS_LC1(TS_RESP *, TS_RESP_dup, \
 AROS_LCA(const TS_RESP *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 3460, Amissl)

#define EVP_PKEY_asn1_add0(___ameth) \
      AROS_LC1(int, EVP_PKEY_asn1_add0, \
 AROS_LCA(const EVP_PKEY_ASN1_METHOD *, (___ameth), A0), \
     struct Library *, AMISSL_BASE_NAME, 3461, Amissl)

#define PKCS7_add0_attrib_signing_time(___si, ___t) \
      AROS_LC2(int, PKCS7_add0_attrib_signing_time, \
 AROS_LCA(PKCS7_SIGNER_INFO *, (___si), A0), \
 AROS_LCA(ASN1_TIME *, (___t), A1), \
     struct Library *, AMISSL_BASE_NAME, 3462, Amissl)

#define BIO_asn1_get_prefix(___b, ___pprefix, ___pprefix_free) \
      AROS_LC3(int, BIO_asn1_get_prefix, \
 AROS_LCA(BIO *, (___b), A0), \
 AROS_LCA(asn1_ps_func **, (___pprefix), A1), \
 AROS_LCA(asn1_ps_func **, (___pprefix_free), A2), \
     struct Library *, AMISSL_BASE_NAME, 3464, Amissl)

#define TS_TST_INFO_set_time(___a, ___gtime) \
      AROS_LC2(int, TS_TST_INFO_set_time, \
 AROS_LCA(TS_TST_INFO *, (___a), A0), \
 AROS_LCA(const ASN1_GENERALIZEDTIME *, (___gtime), A1), \
     struct Library *, AMISSL_BASE_NAME, 3465, Amissl)

#define EVP_PKEY_meth_set_decrypt(___pmeth, ___decrypt_init, ___decrypt) \
      AROS_LC3(void, EVP_PKEY_meth_set_decrypt, \
 AROS_LCA(EVP_PKEY_METHOD *, (___pmeth), A0), \
 AROS_LCA(int (*)(EVP_PKEY_CTX *ctx), (___decrypt_init), A1), \
 AROS_LCA(int (*)(EVP_PKEY_CTX *ctx,unsigned char *out,size_t *outlen,const unsigned char *in,size_t inlen), (___decrypt), A2), \
     struct Library *, AMISSL_BASE_NAME, 3466, Amissl)

#define EVP_PKEY_set_type_str(___pkey, ___str, ___len) \
      AROS_LC3(int, EVP_PKEY_set_type_str, \
 AROS_LCA(EVP_PKEY *, (___pkey), A0), \
 AROS_LCA(const char *, (___str), A1), \
 AROS_LCA(int, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 3467, Amissl)

#define EVP_PKEY_CTX_get_keygen_info(___ctx, ___idx) \
      AROS_LC2(int, EVP_PKEY_CTX_get_keygen_info, \
 AROS_LCA(EVP_PKEY_CTX *, (___ctx), A0), \
 AROS_LCA(int, (___idx), D0), \
     struct Library *, AMISSL_BASE_NAME, 3468, Amissl)

#define TS_REQ_set_policy_id(___a, ___policy) \
      AROS_LC2(int, TS_REQ_set_policy_id, \
 AROS_LCA(TS_REQ *, (___a), A0), \
 AROS_LCA(const ASN1_OBJECT *, (___policy), A1), \
     struct Library *, AMISSL_BASE_NAME, 3469, Amissl)

#define TS_RESP_set_status_info(___a, ___info) \
      AROS_LC2(int, TS_RESP_set_status_info, \
 AROS_LCA(TS_RESP *, (___a), A0), \
 AROS_LCA(TS_STATUS_INFO *, (___info), A1), \
     struct Library *, AMISSL_BASE_NAME, 3471, Amissl)

#define EVP_PKEY_keygen(___ctx, ___ppkey) \
      AROS_LC2(int, EVP_PKEY_keygen, \
 AROS_LCA(EVP_PKEY_CTX *, (___ctx), A0), \
 AROS_LCA(EVP_PKEY **, (___ppkey), A1), \
     struct Library *, AMISSL_BASE_NAME, 3472, Amissl)

#define EVP_DigestSignInit(___ctx, ___pctx, ___type, ___e, ___pkey) \
      AROS_LC5(int, EVP_DigestSignInit, \
 AROS_LCA(EVP_MD_CTX *, (___ctx), A0), \
 AROS_LCA(EVP_PKEY_CTX **, (___pctx), A1), \
 AROS_LCA(const EVP_MD *, (___type), A2), \
 AROS_LCA(ENGINE *, (___e), A3), \
 AROS_LCA(EVP_PKEY *, (___pkey), D0), \
     struct Library *, AMISSL_BASE_NAME, 3473, Amissl)

#define TS_ACCURACY_set_millis(___a, ___millis) \
      AROS_LC2(int, TS_ACCURACY_set_millis, \
 AROS_LCA(TS_ACCURACY *, (___a), A0), \
 AROS_LCA(const ASN1_INTEGER *, (___millis), A1), \
     struct Library *, AMISSL_BASE_NAME, 3474, Amissl)

#define TS_REQ_dup(___a) \
      AROS_LC1(TS_REQ *, TS_REQ_dup, \
 AROS_LCA(const TS_REQ *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 3475, Amissl)

#define GENERAL_NAME_dup(___a) \
      AROS_LC1(GENERAL_NAME *, GENERAL_NAME_dup, \
 AROS_LCA(const GENERAL_NAME *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 3476, Amissl)

#define X509_STORE_CTX_get1_crls(___st, ___nm) \
      AROS_LC2(STACK_OF(X509_CRL) *, X509_STORE_CTX_get1_crls, \
 AROS_LCA(const X509_STORE_CTX *, (___st), A0), \
 AROS_LCA(const X509_NAME *, (___nm), A1), \
     struct Library *, AMISSL_BASE_NAME, 3477, Amissl)

#define EVP_PKEY_asn1_new(___id, ___flags, ___pem_str, ___info) \
      AROS_LC4(EVP_PKEY_ASN1_METHOD *, EVP_PKEY_asn1_new, \
 AROS_LCA(int, (___id), D0), \
 AROS_LCA(int, (___flags), D1), \
 AROS_LCA(const char *, (___pem_str), A0), \
 AROS_LCA(const char *, (___info), A1), \
     struct Library *, AMISSL_BASE_NAME, 3478, Amissl)

#define BIO_new_NDEF(___out, ___val, ___it) \
      AROS_LC3(BIO *, BIO_new_NDEF, \
 AROS_LCA(BIO *, (___out), A0), \
 AROS_LCA(ASN1_VALUE *, (___val), A1), \
 AROS_LCA(const ASN1_ITEM *, (___it), A2), \
     struct Library *, AMISSL_BASE_NAME, 3479, Amissl)

#define TS_MSG_IMPRINT_set_algo(___a, ___alg) \
      AROS_LC2(int, TS_MSG_IMPRINT_set_algo, \
 AROS_LCA(TS_MSG_IMPRINT *, (___a), A0), \
 AROS_LCA(X509_ALGOR *, (___alg), A1), \
     struct Library *, AMISSL_BASE_NAME, 3480, Amissl)

#define i2d_TS_TST_INFO_bio(___fp, ___a) \
      AROS_LC2(int, i2d_TS_TST_INFO_bio, \
 AROS_LCA(BIO *, (___fp), A0), \
 AROS_LCA(const TS_TST_INFO *, (___a), A1), \
     struct Library *, AMISSL_BASE_NAME, 3481, Amissl)

#define TS_TST_INFO_set_ordering(___a, ___ordering) \
      AROS_LC2(int, TS_TST_INFO_set_ordering, \
 AROS_LCA(TS_TST_INFO *, (___a), A0), \
 AROS_LCA(int, (___ordering), D0), \
     struct Library *, AMISSL_BASE_NAME, 3482, Amissl)

#define TS_TST_INFO_get_ext_by_OBJ(___a, ___obj, ___lastpos) \
      AROS_LC3(int, TS_TST_INFO_get_ext_by_OBJ, \
 AROS_LCA(TS_TST_INFO *, (___a), A0), \
 AROS_LCA(const ASN1_OBJECT *, (___obj), A1), \
 AROS_LCA(int, (___lastpos), D0), \
     struct Library *, AMISSL_BASE_NAME, 3483, Amissl)

#define TS_CONF_get_tsa_section(___conf, ___section) \
      AROS_LC2(const char *, TS_CONF_get_tsa_section, \
 AROS_LCA(CONF *, (___conf), A0), \
 AROS_LCA(const char *, (___section), A1), \
     struct Library *, AMISSL_BASE_NAME, 3485, Amissl)

#define SMIME_write_ASN1(___bio, ___val, ___data, ___flags, ___ctype_nid, ___econt_nid, ___mdalgs, ___it) \
      AROS_LC8(int, SMIME_write_ASN1, \
 AROS_LCA(BIO *, (___bio), A0), \
 AROS_LCA(ASN1_VALUE *, (___val), A1), \
 AROS_LCA(BIO *, (___data), A2), \
 AROS_LCA(int, (___flags), A3), \
 AROS_LCA(int, (___ctype_nid), D0), \
 AROS_LCA(int, (___econt_nid), D1), \
 AROS_LCA(STACK_OF(X509_ALGOR) *, (___mdalgs), D2), \
 AROS_LCA(const ASN1_ITEM *, (___it), D3), \
     struct Library *, AMISSL_BASE_NAME, 3486, Amissl)

#define TS_RESP_CTX_set_signer_key(___ctx, ___key) \
      AROS_LC2(int, TS_RESP_CTX_set_signer_key, \
 AROS_LCA(TS_RESP_CTX *, (___ctx), A0), \
 AROS_LCA(EVP_PKEY *, (___key), A1), \
     struct Library *, AMISSL_BASE_NAME, 3487, Amissl)

#define EVP_PKEY_encrypt_old(___enc_key, ___key, ___key_len, ___pub_key) \
      AROS_LC4(int, EVP_PKEY_encrypt_old, \
 AROS_LCA(unsigned char *, (___enc_key), A0), \
 AROS_LCA(const unsigned char *, (___key), A1), \
 AROS_LCA(int, (___key_len), D0), \
 AROS_LCA(EVP_PKEY *, (___pub_key), A2), \
     struct Library *, AMISSL_BASE_NAME, 3488, Amissl)

#define EVP_PKEY_encrypt_init(___ctx) \
      AROS_LC1(int, EVP_PKEY_encrypt_init, \
 AROS_LCA(EVP_PKEY_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 3489, Amissl)

#define ASN1_PCTX_get_cert_flags(___p) \
      AROS_LC1(unsigned long, ASN1_PCTX_get_cert_flags, \
 AROS_LCA(const ASN1_PCTX *, (___p), A0), \
     struct Library *, AMISSL_BASE_NAME, 3491, Amissl)

#define i2d_ESS_SIGNING_CERT(___a, ___pp) \
      AROS_LC2(int, i2d_ESS_SIGNING_CERT, \
 AROS_LCA(const ESS_SIGNING_CERT *, (___a), A0), \
 AROS_LCA(unsigned char **, (___pp), A1), \
     struct Library *, AMISSL_BASE_NAME, 3492, Amissl)

#define TS_CONF_load_key(___file, ___pass) \
      AROS_LC2(EVP_PKEY *, TS_CONF_load_key, \
 AROS_LCA(const char *, (___file), A0), \
 AROS_LCA(const char *, (___pass), A1), \
     struct Library *, AMISSL_BASE_NAME, 3493, Amissl)

#define i2d_ASN1_SEQUENCE_ANY(___a, ___pp) \
      AROS_LC2(int, i2d_ASN1_SEQUENCE_ANY, \
 AROS_LCA(const ASN1_SEQUENCE_ANY *, (___a), A0), \
 AROS_LCA(unsigned char **, (___pp), A1), \
     struct Library *, AMISSL_BASE_NAME, 3494, Amissl)

#define d2i_TS_MSG_IMPRINT_bio(___fp, ___a) \
      AROS_LC2(TS_MSG_IMPRINT *, d2i_TS_MSG_IMPRINT_bio, \
 AROS_LCA(BIO *, (___fp), A0), \
 AROS_LCA(TS_MSG_IMPRINT **, (___a), A1), \
     struct Library *, AMISSL_BASE_NAME, 3495, Amissl)

#define EVP_PKEY_asn1_set_public(___ameth, ___pub_decode, ___pub_encode, ___pub_cmp, ___pub_print, ___pkey_size, ___pkey_bits) \
      AROS_LC7(void, EVP_PKEY_asn1_set_public, \
 AROS_LCA(EVP_PKEY_ASN1_METHOD *, (___ameth), A0), \
 AROS_LCA(int (*)(EVP_PKEY *pk,const X509_PUBKEY *pub), (___pub_decode), A1), \
 AROS_LCA(int (*)(X509_PUBKEY *pub,const EVP_PKEY *pk), (___pub_encode), A2), \
 AROS_LCA(int (*)(const EVP_PKEY *a,const EVP_PKEY *b), (___pub_cmp), A3), \
 AROS_LCA(int (*)(BIO *out,const EVP_PKEY *pkey,int indent,ASN1_PCTX *pctx), (___pub_print), D0), \
 AROS_LCA(int (*)(const EVP_PKEY *pk), (___pkey_size), D1), \
 AROS_LCA(int (*)(const EVP_PKEY *pk), (___pkey_bits), D2), \
     struct Library *, AMISSL_BASE_NAME, 3496, Amissl)

#define b2i_PublicKey_bio(___in) \
      AROS_LC1(EVP_PKEY *, b2i_PublicKey_bio, \
 AROS_LCA(BIO *, (___in), A0), \
     struct Library *, AMISSL_BASE_NAME, 3497, Amissl)

#define BIO_asn1_set_prefix(___b, ___prefix, ___prefix_free) \
      AROS_LC3(int, BIO_asn1_set_prefix, \
 AROS_LCA(BIO *, (___b), A0), \
 AROS_LCA(asn1_ps_func *, (___prefix), A1), \
 AROS_LCA(asn1_ps_func *, (___prefix_free), A2), \
     struct Library *, AMISSL_BASE_NAME, 3498, Amissl)

#define EVP_PKEY_new_mac_key(___type, ___e, ___key, ___keylen) \
      AROS_LC4(EVP_PKEY *, EVP_PKEY_new_mac_key, \
 AROS_LCA(int, (___type), A0), \
 AROS_LCA(ENGINE *, (___e), A1), \
 AROS_LCA(const unsigned char *, (___key), A2), \
 AROS_LCA(int, (___keylen), D0), \
     struct Library *, AMISSL_BASE_NAME, 3499, Amissl)

#define TS_REQ_ext_free(___a) \
      AROS_LC1(void, TS_REQ_ext_free, \
 AROS_LCA(TS_REQ *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 3501, Amissl)

#define EVP_PKEY_asn1_set_free(___ameth, ___pkey_free) \
      AROS_LC2(void, EVP_PKEY_asn1_set_free, \
 AROS_LCA(EVP_PKEY_ASN1_METHOD *, (___ameth), A0), \
 AROS_LCA(void (*)(EVP_PKEY *pkey), (___pkey_free), A1), \
     struct Library *, AMISSL_BASE_NAME, 3502, Amissl)

#define EVP_PKEY_get0_asn1(___pkey) \
      AROS_LC1(const EVP_PKEY_ASN1_METHOD *, EVP_PKEY_get0_asn1, \
 AROS_LCA(const EVP_PKEY *, (___pkey), A0), \
     struct Library *, AMISSL_BASE_NAME, 3503, Amissl)

#define EVP_PKEY_verify_recover_init(___ctx) \
      AROS_LC1(int, EVP_PKEY_verify_recover_init, \
 AROS_LCA(EVP_PKEY_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 3505, Amissl)

#define EVP_PKEY_CTX_set_data(___ctx, ___data) \
      AROS_LC2(void, EVP_PKEY_CTX_set_data, \
 AROS_LCA(EVP_PKEY_CTX *, (___ctx), A0), \
 AROS_LCA(void *, (___data), A1), \
     struct Library *, AMISSL_BASE_NAME, 3506, Amissl)

#define EVP_PKEY_keygen_init(___ctx) \
      AROS_LC1(int, EVP_PKEY_keygen_init, \
 AROS_LCA(EVP_PKEY_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 3507, Amissl)

#define TS_RESP_CTX_set_status_info(___ctx, ___status, ___text) \
      AROS_LC3(int, TS_RESP_CTX_set_status_info, \
 AROS_LCA(TS_RESP_CTX *, (___ctx), A0), \
 AROS_LCA(int, (___status), D0), \
 AROS_LCA(const char *, (___text), A1), \
     struct Library *, AMISSL_BASE_NAME, 3508, Amissl)

#define TS_MSG_IMPRINT_get_algo(___a) \
      AROS_LC1(X509_ALGOR *, TS_MSG_IMPRINT_get_algo, \
 AROS_LCA(TS_MSG_IMPRINT *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 3509, Amissl)

#define TS_REQ_print_bio(___bio, ___a) \
      AROS_LC2(int, TS_REQ_print_bio, \
 AROS_LCA(BIO *, (___bio), A0), \
 AROS_LCA(TS_REQ *, (___a), A1), \
     struct Library *, AMISSL_BASE_NAME, 3510, Amissl)

#define EVP_PKEY_CTX_ctrl_str(___ctx, ___type, ___value) \
      AROS_LC3(int, EVP_PKEY_CTX_ctrl_str, \
 AROS_LCA(EVP_PKEY_CTX *, (___ctx), A0), \
 AROS_LCA(const char *, (___type), A1), \
 AROS_LCA(const char *, (___value), A2), \
     struct Library *, AMISSL_BASE_NAME, 3511, Amissl)

#define EVP_PKEY_get_default_digest_nid(___pkey, ___pnid) \
      AROS_LC2(int, EVP_PKEY_get_default_digest_nid, \
 AROS_LCA(EVP_PKEY *, (___pkey), A0), \
 AROS_LCA(int *, (___pnid), A1), \
     struct Library *, AMISSL_BASE_NAME, 3512, Amissl)

#define PEM_write_bio_PKCS7_stream(___out, ___p7, ___in, ___flags) \
      AROS_LC4(int, PEM_write_bio_PKCS7_stream, \
 AROS_LCA(BIO *, (___out), A0), \
 AROS_LCA(PKCS7 *, (___p7), A1), \
 AROS_LCA(BIO *, (___in), A2), \
 AROS_LCA(int, (___flags), D0), \
     struct Library *, AMISSL_BASE_NAME, 3513, Amissl)

#define TS_MSG_IMPRINT_print_bio(___bio, ___msg) \
      AROS_LC2(int, TS_MSG_IMPRINT_print_bio, \
 AROS_LCA(BIO *, (___bio), A0), \
 AROS_LCA(TS_MSG_IMPRINT *, (___msg), A1), \
     struct Library *, AMISSL_BASE_NAME, 3514, Amissl)

#define BN_asc2bn(___a, ___str) \
      AROS_LC2(int, BN_asc2bn, \
 AROS_LCA(BIGNUM **, (___a), A0), \
 AROS_LCA(const char *, (___str), A1), \
     struct Library *, AMISSL_BASE_NAME, 3515, Amissl)

#define TS_REQ_get_policy_id(___a) \
      AROS_LC1(ASN1_OBJECT *, TS_REQ_get_policy_id, \
 AROS_LCA(TS_REQ *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 3516, Amissl)

#define d2i_TS_ACCURACY(___a, ___pp, ___length) \
      AROS_LC3(TS_ACCURACY *, d2i_TS_ACCURACY, \
 AROS_LCA(TS_ACCURACY **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___pp), A1), \
 AROS_LCA(long, (___length), D0), \
     struct Library *, AMISSL_BASE_NAME, 3517, Amissl)

#define DSO_global_lookup(___name) \
      AROS_LC1(void *, DSO_global_lookup, \
 AROS_LCA(const char *, (___name), A0), \
     struct Library *, AMISSL_BASE_NAME, 3518, Amissl)

#define TS_CONF_set_tsa_name(___conf, ___section, ___ctx) \
      AROS_LC3(int, TS_CONF_set_tsa_name, \
 AROS_LCA(CONF *, (___conf), A0), \
 AROS_LCA(const char *, (___section), A1), \
 AROS_LCA(TS_RESP_CTX *, (___ctx), A2), \
     struct Library *, AMISSL_BASE_NAME, 3519, Amissl)

#define i2d_ASN1_SET_ANY(___a, ___pp) \
      AROS_LC2(int, i2d_ASN1_SET_ANY, \
 AROS_LCA(const ASN1_SEQUENCE_ANY *, (___a), A0), \
 AROS_LCA(unsigned char **, (___pp), A1), \
     struct Library *, AMISSL_BASE_NAME, 3520, Amissl)

#define ASN1_PCTX_get_flags(___p) \
      AROS_LC1(unsigned long, ASN1_PCTX_get_flags, \
 AROS_LCA(const ASN1_PCTX *, (___p), A0), \
     struct Library *, AMISSL_BASE_NAME, 3521, Amissl)

#define TS_TST_INFO_get_ext_by_NID(___a, ___nid, ___lastpos) \
      AROS_LC3(int, TS_TST_INFO_get_ext_by_NID, \
 AROS_LCA(TS_TST_INFO *, (___a), A0), \
 AROS_LCA(int, (___nid), D0), \
 AROS_LCA(int, (___lastpos), D1), \
     struct Library *, AMISSL_BASE_NAME, 3522, Amissl)

#define TS_RESP_new() \
      AROS_LC0(TS_RESP *, TS_RESP_new, \
     struct Library *, AMISSL_BASE_NAME, 3523, Amissl)

#define ESS_CERT_ID_dup(___a) \
      AROS_LC1(ESS_CERT_ID *, ESS_CERT_ID_dup, \
 AROS_LCA(const ESS_CERT_ID *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 3524, Amissl)

#define TS_STATUS_INFO_dup(___a) \
      AROS_LC1(TS_STATUS_INFO *, TS_STATUS_INFO_dup, \
 AROS_LCA(const TS_STATUS_INFO *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 3525, Amissl)

#define TS_REQ_delete_ext(___a, ___loc) \
      AROS_LC2(X509_EXTENSION *, TS_REQ_delete_ext, \
 AROS_LCA(TS_REQ *, (___a), A0), \
 AROS_LCA(int, (___loc), D0), \
     struct Library *, AMISSL_BASE_NAME, 3526, Amissl)

#define EVP_DigestVerifyFinal(___ctx, ___sig, ___siglen) \
      AROS_LC3(int, EVP_DigestVerifyFinal, \
 AROS_LCA(EVP_MD_CTX *, (___ctx), A0), \
 AROS_LCA(const unsigned char *, (___sig), A1), \
 AROS_LCA(size_t, (___siglen), D0), \
     struct Library *, AMISSL_BASE_NAME, 3527, Amissl)

#define EVP_PKEY_print_params(___out, ___pkey, ___inden, ___pctx) \
      AROS_LC4(int, EVP_PKEY_print_params, \
 AROS_LCA(BIO *, (___out), A0), \
 AROS_LCA(const EVP_PKEY *, (___pkey), A1), \
 AROS_LCA(int, (___inden), D0), \
 AROS_LCA(ASN1_PCTX *, (___pctx), A2), \
     struct Library *, AMISSL_BASE_NAME, 3528, Amissl)

#define TS_REQ_get_msg_imprint(___a) \
      AROS_LC1(TS_MSG_IMPRINT *, TS_REQ_get_msg_imprint, \
 AROS_LCA(TS_REQ *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 3529, Amissl)

#define OBJ_find_sigid_by_algs(___psignid, ___dig_nid, ___pkey_nid) \
      AROS_LC3(int, OBJ_find_sigid_by_algs, \
 AROS_LCA(int *, (___psignid), A0), \
 AROS_LCA(int, (___dig_nid), D0), \
 AROS_LCA(int, (___pkey_nid), D1), \
     struct Library *, AMISSL_BASE_NAME, 3530, Amissl)

#define TS_TST_INFO_get_serial(___a) \
      AROS_LC1(const ASN1_INTEGER *, TS_TST_INFO_get_serial, \
 AROS_LCA(const TS_TST_INFO *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 3531, Amissl)

#define TS_REQ_get_nonce(___a) \
      AROS_LC1(const ASN1_INTEGER *, TS_REQ_get_nonce, \
 AROS_LCA(const TS_REQ *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 3532, Amissl)

#define X509_PUBKEY_set0_param(___pub, ___aobj, ___ptype, ___pval, ___penc, ___penclen) \
      AROS_LC6(int, X509_PUBKEY_set0_param, \
 AROS_LCA(X509_PUBKEY *, (___pub), A0), \
 AROS_LCA(ASN1_OBJECT *, (___aobj), A1), \
 AROS_LCA(int, (___ptype), D0), \
 AROS_LCA(void *, (___pval), A2), \
 AROS_LCA(unsigned char *, (___penc), A3), \
 AROS_LCA(int, (___penclen), D1), \
     struct Library *, AMISSL_BASE_NAME, 3533, Amissl)

#define EVP_PKEY_CTX_set0_keygen_info(___ctx, ___dat, ___datlen) \
      AROS_LC3(void, EVP_PKEY_CTX_set0_keygen_info, \
 AROS_LCA(EVP_PKEY_CTX *, (___ctx), A0), \
 AROS_LCA(int *, (___dat), A1), \
 AROS_LCA(int, (___datlen), D0), \
     struct Library *, AMISSL_BASE_NAME, 3534, Amissl)

#define DIST_POINT_set_dpname(___dpn, ___iname) \
      AROS_LC2(int, DIST_POINT_set_dpname, \
 AROS_LCA(DIST_POINT_NAME *, (___dpn), A0), \
 AROS_LCA(const X509_NAME *, (___iname), A1), \
     struct Library *, AMISSL_BASE_NAME, 3535, Amissl)

#define i2d_ISSUING_DIST_POINT(___a, ___pp) \
      AROS_LC2(int, i2d_ISSUING_DIST_POINT, \
 AROS_LCA(const ISSUING_DIST_POINT *, (___a), A0), \
 AROS_LCA(unsigned char **, (___pp), A1), \
     struct Library *, AMISSL_BASE_NAME, 3536, Amissl)

#define EVP_PKEY_CTX_get_data(___ctx) \
      AROS_LC1(void *, EVP_PKEY_CTX_get_data, \
 AROS_LCA(const EVP_PKEY_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 3537, Amissl)

#define TS_STATUS_INFO_print_bio(___bio, ___a) \
      AROS_LC2(int, TS_STATUS_INFO_print_bio, \
 AROS_LCA(BIO *, (___bio), A0), \
 AROS_LCA(TS_STATUS_INFO *, (___a), A1), \
     struct Library *, AMISSL_BASE_NAME, 3538, Amissl)

#define EVP_PKEY_derive_init(___ctx) \
      AROS_LC1(int, EVP_PKEY_derive_init, \
 AROS_LCA(EVP_PKEY_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 3539, Amissl)

#define d2i_TS_TST_INFO(___a, ___pp, ___length) \
      AROS_LC3(TS_TST_INFO *, d2i_TS_TST_INFO, \
 AROS_LCA(TS_TST_INFO **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___pp), A1), \
 AROS_LCA(long, (___length), D0), \
     struct Library *, AMISSL_BASE_NAME, 3540, Amissl)

#define EVP_PKEY_asn1_add_alias(___to, ___from) \
      AROS_LC2(int, EVP_PKEY_asn1_add_alias, \
 AROS_LCA(int, (___to), D0), \
 AROS_LCA(int, (___from), D1), \
     struct Library *, AMISSL_BASE_NAME, 3541, Amissl)

#define d2i_TS_RESP_bio(___fp, ___a) \
      AROS_LC2(TS_RESP *, d2i_TS_RESP_bio, \
 AROS_LCA(BIO *, (___fp), A0), \
 AROS_LCA(TS_RESP **, (___a), A1), \
     struct Library *, AMISSL_BASE_NAME, 3542, Amissl)

#define OTHERNAME_cmp(___a, ___b) \
      AROS_LC2(int, OTHERNAME_cmp, \
 AROS_LCA(OTHERNAME *, (___a), A0), \
 AROS_LCA(OTHERNAME *, (___b), A1), \
     struct Library *, AMISSL_BASE_NAME, 3543, Amissl)

#define GENERAL_NAME_set0_value(___a, ___type, ___value) \
      AROS_LC3(void, GENERAL_NAME_set0_value, \
 AROS_LCA(GENERAL_NAME *, (___a), A0), \
 AROS_LCA(int, (___type), D0), \
 AROS_LCA(void *, (___value), A1), \
     struct Library *, AMISSL_BASE_NAME, 3544, Amissl)

#define PKCS7_RECIP_INFO_get0_alg(___ri, ___penc) \
      AROS_LC2(void, PKCS7_RECIP_INFO_get0_alg, \
 AROS_LCA(PKCS7_RECIP_INFO *, (___ri), A0), \
 AROS_LCA(X509_ALGOR **, (___penc), A1), \
     struct Library *, AMISSL_BASE_NAME, 3545, Amissl)

#define TS_RESP_CTX_new() \
      AROS_LC0(TS_RESP_CTX *, TS_RESP_CTX_new, \
     struct Library *, AMISSL_BASE_NAME, 3546, Amissl)

#define TS_RESP_set_tst_info(___a, ___p7, ___tst_info) \
      AROS_LC3(void, TS_RESP_set_tst_info, \
 AROS_LCA(TS_RESP *, (___a), A0), \
 AROS_LCA(PKCS7 *, (___p7), A1), \
 AROS_LCA(TS_TST_INFO *, (___tst_info), A2), \
     struct Library *, AMISSL_BASE_NAME, 3547, Amissl)

#define PKCS7_final(___p7, ___data, ___flags) \
      AROS_LC3(int, PKCS7_final, \
 AROS_LCA(PKCS7 *, (___p7), A0), \
 AROS_LCA(BIO *, (___data), A1), \
 AROS_LCA(int, (___flags), D0), \
     struct Library *, AMISSL_BASE_NAME, 3548, Amissl)

#define EVP_PKEY_get_base_id(___pkey) \
      AROS_LC1(int, EVP_PKEY_get_base_id, \
 AROS_LCA(const EVP_PKEY *, (___pkey), A0), \
     struct Library *, AMISSL_BASE_NAME, 3549, Amissl)

#define TS_RESP_CTX_set_signer_cert(___ctx, ___signer) \
      AROS_LC2(int, TS_RESP_CTX_set_signer_cert, \
 AROS_LCA(TS_RESP_CTX *, (___ctx), A0), \
 AROS_LCA(X509 *, (___signer), A1), \
     struct Library *, AMISSL_BASE_NAME, 3550, Amissl)

#define TS_REQ_set_msg_imprint(___a, ___msg_imprint) \
      AROS_LC2(int, TS_REQ_set_msg_imprint, \
 AROS_LCA(TS_REQ *, (___a), A0), \
 AROS_LCA(TS_MSG_IMPRINT *, (___msg_imprint), A1), \
     struct Library *, AMISSL_BASE_NAME, 3551, Amissl)

#define EVP_PKEY_CTX_ctrl(___ctx, ___keytype, ___optype, ___cmd, ___p1, ___p2) \
      AROS_LC6(int, EVP_PKEY_CTX_ctrl, \
 AROS_LCA(EVP_PKEY_CTX *, (___ctx), A0), \
 AROS_LCA(int, (___keytype), D0), \
 AROS_LCA(int, (___optype), D1), \
 AROS_LCA(int, (___cmd), D2), \
 AROS_LCA(int, (___p1), D3), \
 AROS_LCA(void *, (___p2), A1), \
     struct Library *, AMISSL_BASE_NAME, 3552, Amissl)

#define TS_CONF_set_digests(___conf, ___section, ___ctx) \
      AROS_LC3(int, TS_CONF_set_digests, \
 AROS_LCA(CONF *, (___conf), A0), \
 AROS_LCA(const char *, (___section), A1), \
 AROS_LCA(TS_RESP_CTX *, (___ctx), A2), \
     struct Library *, AMISSL_BASE_NAME, 3553, Amissl)

#define d2i_TS_MSG_IMPRINT(___a, ___pp, ___length) \
      AROS_LC3(TS_MSG_IMPRINT *, d2i_TS_MSG_IMPRINT, \
 AROS_LCA(TS_MSG_IMPRINT **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___pp), A1), \
 AROS_LCA(long, (___length), D0), \
     struct Library *, AMISSL_BASE_NAME, 3554, Amissl)

#define EVP_PKEY_meth_set_ctrl(___pmeth, ___ctrl, ___ctrl_str) \
      AROS_LC3(void, EVP_PKEY_meth_set_ctrl, \
 AROS_LCA(EVP_PKEY_METHOD *, (___pmeth), A0), \
 AROS_LCA(int (*)(EVP_PKEY_CTX *ctx,int type,int p1,void *p2), (___ctrl), A1), \
 AROS_LCA(int (*)(EVP_PKEY_CTX *ctx,const char *type,const char *value), (___ctrl_str), A2), \
     struct Library *, AMISSL_BASE_NAME, 3555, Amissl)

#define TS_REQ_get_ext_by_NID(___a, ___nid, ___lastpos) \
      AROS_LC3(int, TS_REQ_get_ext_by_NID, \
 AROS_LCA(TS_REQ *, (___a), A0), \
 AROS_LCA(int, (___nid), D0), \
 AROS_LCA(int, (___lastpos), D1), \
     struct Library *, AMISSL_BASE_NAME, 3556, Amissl)

#define PKCS5_pbe_set0_algor(___algor, ___alg, ___iter, ___salt, ___saltlen) \
      AROS_LC5(int, PKCS5_pbe_set0_algor, \
 AROS_LCA(X509_ALGOR *, (___algor), A0), \
 AROS_LCA(int, (___alg), D0), \
 AROS_LCA(int, (___iter), D1), \
 AROS_LCA(const unsigned char *, (___salt), A1), \
 AROS_LCA(int, (___saltlen), D2), \
     struct Library *, AMISSL_BASE_NAME, 3557, Amissl)

#define TS_ACCURACY_new() \
      AROS_LC0(TS_ACCURACY *, TS_ACCURACY_new, \
     struct Library *, AMISSL_BASE_NAME, 3559, Amissl)

#define X509_CRL_METHOD_free(___m) \
      AROS_LC1(void, X509_CRL_METHOD_free, \
 AROS_LCA(X509_CRL_METHOD *, (___m), A0), \
     struct Library *, AMISSL_BASE_NAME, 3560, Amissl)

#define ASN1_PCTX_get_nm_flags(___p) \
      AROS_LC1(unsigned long, ASN1_PCTX_get_nm_flags, \
 AROS_LCA(const ASN1_PCTX *, (___p), A0), \
     struct Library *, AMISSL_BASE_NAME, 3561, Amissl)

#define EVP_PKEY_meth_set_sign(___pmeth, ___sign_init, ___sign) \
      AROS_LC3(void, EVP_PKEY_meth_set_sign, \
 AROS_LCA(EVP_PKEY_METHOD *, (___pmeth), A0), \
 AROS_LCA(int (*)(EVP_PKEY_CTX *ctx), (___sign_init), A1), \
 AROS_LCA(int (*)(EVP_PKEY_CTX *ctx,unsigned char *sig,size_t *siglen,const unsigned char *tbs,size_t tbslen), (___sign), A2), \
     struct Library *, AMISSL_BASE_NAME, 3562, Amissl)

#define EVP_PKEY_decrypt_init(___ctx) \
      AROS_LC1(int, EVP_PKEY_decrypt_init, \
 AROS_LCA(EVP_PKEY_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 3564, Amissl)

#define i2b_PVK_bio(___out, ___pk, ___enclevel, ___cb, ___u) \
      AROS_LC5(int, i2b_PVK_bio, \
 AROS_LCA(BIO *, (___out), A0), \
 AROS_LCA(const EVP_PKEY *, (___pk), A1), \
 AROS_LCA(int, (___enclevel), D0), \
 AROS_LCA(pem_password_cb *, (___cb), A2), \
 AROS_LCA(void *, (___u), A3), \
     struct Library *, AMISSL_BASE_NAME, 3566, Amissl)

#define EVP_PKEY_print_private(___out, ___pkey, ___indent, ___pctx) \
      AROS_LC4(int, EVP_PKEY_print_private, \
 AROS_LCA(BIO *, (___out), A0), \
 AROS_LCA(const EVP_PKEY *, (___pkey), A1), \
 AROS_LCA(int, (___indent), D0), \
 AROS_LCA(ASN1_PCTX *, (___pctx), A2), \
     struct Library *, AMISSL_BASE_NAME, 3567, Amissl)

#define GENERAL_NAME_get0_value(___a, ___ptype) \
      AROS_LC2(void *, GENERAL_NAME_get0_value, \
 AROS_LCA(const GENERAL_NAME *, (___a), A0), \
 AROS_LCA(int *, (___ptype), A1), \
     struct Library *, AMISSL_BASE_NAME, 3568, Amissl)

#define b2i_PVK_bio(___in, ___cb, ___u) \
      AROS_LC3(EVP_PKEY *, b2i_PVK_bio, \
 AROS_LCA(BIO *, (___in), A0), \
 AROS_LCA(pem_password_cb *, (___cb), A1), \
 AROS_LCA(void *, (___u), A2), \
     struct Library *, AMISSL_BASE_NAME, 3569, Amissl)

#define ASN1_UTCTIME_adj(___s, ___t, ___offset_day, ___offset_sec) \
      AROS_LC4(ASN1_UTCTIME *, ASN1_UTCTIME_adj, \
 AROS_LCA(ASN1_UTCTIME *, (___s), A0), \
 AROS_LCA(time_t, (___t), D0), \
 AROS_LCA(int, (___offset_day), D1), \
 AROS_LCA(long, (___offset_sec), D2), \
     struct Library *, AMISSL_BASE_NAME, 3570, Amissl)

#define TS_TST_INFO_new() \
      AROS_LC0(TS_TST_INFO *, TS_TST_INFO_new, \
     struct Library *, AMISSL_BASE_NAME, 3571, Amissl)

#define EVP_MD_do_all_sorted(___fn, ___arg) \
      AROS_LC2(void, EVP_MD_do_all_sorted, \
 AROS_LCA(void (*)(const EVP_MD *ciph,const char *from,const char *to,void *x), (___fn), A0), \
 AROS_LCA(void *, (___arg), A1), \
     struct Library *, AMISSL_BASE_NAME, 3572, Amissl)

#define TS_CONF_set_default_engine(___name) \
      AROS_LC1(int, TS_CONF_set_default_engine, \
 AROS_LCA(const char *, (___name), A0), \
     struct Library *, AMISSL_BASE_NAME, 3573, Amissl)

#define TS_ACCURACY_set_seconds(___a, ___seconds) \
      AROS_LC2(int, TS_ACCURACY_set_seconds, \
 AROS_LCA(TS_ACCURACY *, (___a), A0), \
 AROS_LCA(const ASN1_INTEGER *, (___seconds), A1), \
     struct Library *, AMISSL_BASE_NAME, 3574, Amissl)

#define TS_TST_INFO_get_time(___a) \
      AROS_LC1(const ASN1_GENERALIZEDTIME *, TS_TST_INFO_get_time, \
 AROS_LCA(const TS_TST_INFO *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 3575, Amissl)

#define PKCS8_pkey_get0(___ppkalg, ___pk, ___ppklen, ___pa, ___p8) \
      AROS_LC5(int, PKCS8_pkey_get0, \
 AROS_LCA(const ASN1_OBJECT **, (___ppkalg), A0), \
 AROS_LCA(const unsigned char **, (___pk), A1), \
 AROS_LCA(int *, (___ppklen), A2), \
 AROS_LCA(const X509_ALGOR **, (___pa), A3), \
 AROS_LCA(const PKCS8_PRIV_KEY_INFO *, (___p8), D0), \
     struct Library *, AMISSL_BASE_NAME, 3576, Amissl)

#define EVP_PKEY_asn1_get0(___idx) \
      AROS_LC1(const EVP_PKEY_ASN1_METHOD *, EVP_PKEY_asn1_get0, \
 AROS_LCA(int, (___idx), D0), \
     struct Library *, AMISSL_BASE_NAME, 3577, Amissl)

#define OBJ_add_sigid(___signid, ___dig_id, ___pkey_id) \
      AROS_LC3(int, OBJ_add_sigid, \
 AROS_LCA(int, (___signid), D0), \
 AROS_LCA(int, (___dig_id), D1), \
 AROS_LCA(int, (___pkey_id), D2), \
     struct Library *, AMISSL_BASE_NAME, 3578, Amissl)

#define PKCS7_SIGNER_INFO_sign(___si) \
      AROS_LC1(int, PKCS7_SIGNER_INFO_sign, \
 AROS_LCA(PKCS7_SIGNER_INFO *, (___si), A0), \
     struct Library *, AMISSL_BASE_NAME, 3579, Amissl)

#define EVP_PKEY_paramgen_init(___ctx) \
      AROS_LC1(int, EVP_PKEY_paramgen_init, \
 AROS_LCA(EVP_PKEY_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 3580, Amissl)

#define EVP_PKEY_sign(___ctx, ___sig, ___siglen, ___tbs, ___tbslen) \
      AROS_LC5(int, EVP_PKEY_sign, \
 AROS_LCA(EVP_PKEY_CTX *, (___ctx), A0), \
 AROS_LCA(unsigned char *, (___sig), A1), \
 AROS_LCA(size_t *, (___siglen), D0), \
 AROS_LCA(const unsigned char *, (___tbs), A2), \
 AROS_LCA(size_t, (___tbslen), D1), \
     struct Library *, AMISSL_BASE_NAME, 3581, Amissl)

#define OBJ_sigid_free() \
      AROS_LC0(void, OBJ_sigid_free, \
     struct Library *, AMISSL_BASE_NAME, 3582, Amissl)

#define EVP_PKEY_meth_set_init(___pmeth, ___init) \
      AROS_LC2(void, EVP_PKEY_meth_set_init, \
 AROS_LCA(EVP_PKEY_METHOD *, (___pmeth), A0), \
 AROS_LCA(int (*)(EVP_PKEY_CTX *ctx), (___init), A1), \
     struct Library *, AMISSL_BASE_NAME, 3583, Amissl)

#define d2i_ESS_ISSUER_SERIAL(___a, ___pp, ___length) \
      AROS_LC3(ESS_ISSUER_SERIAL *, d2i_ESS_ISSUER_SERIAL, \
 AROS_LCA(ESS_ISSUER_SERIAL **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___pp), A1), \
 AROS_LCA(long, (___length), D0), \
     struct Library *, AMISSL_BASE_NAME, 3584, Amissl)

#define ISSUING_DIST_POINT_new() \
      AROS_LC0(ISSUING_DIST_POINT *, ISSUING_DIST_POINT_new, \
     struct Library *, AMISSL_BASE_NAME, 3585, Amissl)

#define ASN1_TIME_adj(___s, ___t, ___offset_day, ___offset_sec) \
      AROS_LC4(ASN1_TIME *, ASN1_TIME_adj, \
 AROS_LCA(ASN1_TIME *, (___s), A0), \
 AROS_LCA(time_t, (___t), D0), \
 AROS_LCA(int, (___offset_day), D1), \
 AROS_LCA(long, (___offset_sec), D2), \
     struct Library *, AMISSL_BASE_NAME, 3586, Amissl)

#define TS_OBJ_print_bio(___bio, ___obj) \
      AROS_LC2(int, TS_OBJ_print_bio, \
 AROS_LCA(BIO *, (___bio), A0), \
 AROS_LCA(const ASN1_OBJECT *, (___obj), A1), \
     struct Library *, AMISSL_BASE_NAME, 3587, Amissl)

#define EVP_PKEY_meth_set_verify_recover(___pmeth, ___verify_recover_init, ___verify_recover) \
      AROS_LC3(void, EVP_PKEY_meth_set_verify_recover, \
 AROS_LCA(EVP_PKEY_METHOD *, (___pmeth), A0), \
 AROS_LCA(int (*)(EVP_PKEY_CTX *ctx), (___verify_recover_init), A1), \
 AROS_LCA(int (*)(EVP_PKEY_CTX *ctx,unsigned char *sig,size_t *siglen,const unsigned char *tbs,size_t tbslen), (___verify_recover), A2), \
     struct Library *, AMISSL_BASE_NAME, 3588, Amissl)

#define TS_RESP_get_status_info(___g) \
      AROS_LC1(TS_STATUS_INFO *, TS_RESP_get_status_info, \
 AROS_LCA(TS_RESP *, (___g), A0), \
     struct Library *, AMISSL_BASE_NAME, 3589, Amissl)

#define EVP_PKEY_CTX_set_cb(___ctx, ___cb) \
      AROS_LC2(void, EVP_PKEY_CTX_set_cb, \
 AROS_LCA(EVP_PKEY_CTX *, (___ctx), A0), \
 AROS_LCA(EVP_PKEY_gen_cb *, (___cb), A1), \
     struct Library *, AMISSL_BASE_NAME, 3590, Amissl)

#define PKCS7_to_TS_TST_INFO(___token) \
      AROS_LC1(TS_TST_INFO *, PKCS7_to_TS_TST_INFO, \
 AROS_LCA(PKCS7 *, (___token), A0), \
     struct Library *, AMISSL_BASE_NAME, 3591, Amissl)

#define ASN1_PCTX_get_oid_flags(___p) \
      AROS_LC1(unsigned long, ASN1_PCTX_get_oid_flags, \
 AROS_LCA(const ASN1_PCTX *, (___p), A0), \
     struct Library *, AMISSL_BASE_NAME, 3592, Amissl)

#define TS_TST_INFO_add_ext(___a, ___ex, ___loc) \
      AROS_LC3(int, TS_TST_INFO_add_ext, \
 AROS_LCA(TS_TST_INFO *, (___a), A0), \
 AROS_LCA(X509_EXTENSION *, (___ex), A1), \
 AROS_LCA(int, (___loc), D0), \
     struct Library *, AMISSL_BASE_NAME, 3593, Amissl)

#define EVP_PKEY_meth_set_derive(___pmeth, ___derive_init, ___derive) \
      AROS_LC3(void, EVP_PKEY_meth_set_derive, \
 AROS_LCA(EVP_PKEY_METHOD *, (___pmeth), A0), \
 AROS_LCA(int (*)(EVP_PKEY_CTX *ctx), (___derive_init), A1), \
 AROS_LCA(int (*)(EVP_PKEY_CTX *ctx,unsigned char *key,size_t *keylen), (___derive), A2), \
     struct Library *, AMISSL_BASE_NAME, 3594, Amissl)

#define i2d_TS_MSG_IMPRINT_bio(___fp, ___a) \
      AROS_LC2(int, i2d_TS_MSG_IMPRINT_bio, \
 AROS_LCA(BIO *, (___fp), A0), \
 AROS_LCA(const TS_MSG_IMPRINT *, (___a), A1), \
     struct Library *, AMISSL_BASE_NAME, 3596, Amissl)

#define TS_RESP_CTX_set_accuracy(___ctx, ___secs, ___millis, ___micros) \
      AROS_LC4(int, TS_RESP_CTX_set_accuracy, \
 AROS_LCA(TS_RESP_CTX *, (___ctx), A0), \
 AROS_LCA(int, (___secs), D0), \
 AROS_LCA(int, (___millis), D1), \
 AROS_LCA(int, (___micros), D2), \
     struct Library *, AMISSL_BASE_NAME, 3597, Amissl)

#define TS_REQ_set_nonce(___a, ___nonce) \
      AROS_LC2(int, TS_REQ_set_nonce, \
 AROS_LCA(TS_REQ *, (___a), A0), \
 AROS_LCA(const ASN1_INTEGER *, (___nonce), A1), \
     struct Library *, AMISSL_BASE_NAME, 3598, Amissl)

#define ESS_CERT_ID_new() \
      AROS_LC0(ESS_CERT_ID *, ESS_CERT_ID_new, \
     struct Library *, AMISSL_BASE_NAME, 3599, Amissl)

#define TS_REQ_get_ext_count(___a) \
      AROS_LC1(int, TS_REQ_get_ext_count, \
 AROS_LCA(TS_REQ *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 3600, Amissl)

#define BUF_reverse(___out, ___in, ___siz) \
      AROS_LC3(void, BUF_reverse, \
 AROS_LCA(unsigned char *, (___out), A0), \
 AROS_LCA(const unsigned char *, (___in), A1), \
 AROS_LCA(size_t, (___siz), D0), \
     struct Library *, AMISSL_BASE_NAME, 3601, Amissl)

#define TS_TST_INFO_print_bio(___bio, ___a) \
      AROS_LC2(int, TS_TST_INFO_print_bio, \
 AROS_LCA(BIO *, (___bio), A0), \
 AROS_LCA(TS_TST_INFO *, (___a), A1), \
     struct Library *, AMISSL_BASE_NAME, 3602, Amissl)

#define d2i_ISSUING_DIST_POINT(___a, ___pp, ___length) \
      AROS_LC3(ISSUING_DIST_POINT *, d2i_ISSUING_DIST_POINT, \
 AROS_LCA(ISSUING_DIST_POINT **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___pp), A1), \
 AROS_LCA(long, (___length), D0), \
     struct Library *, AMISSL_BASE_NAME, 3603, Amissl)

#define i2b_PrivateKey_bio(___out, ___pk) \
      AROS_LC2(int, i2b_PrivateKey_bio, \
 AROS_LCA(BIO *, (___out), A0), \
 AROS_LCA(const EVP_PKEY *, (___pk), A1), \
     struct Library *, AMISSL_BASE_NAME, 3604, Amissl)

#define i2d_TS_RESP(___a, ___pp) \
      AROS_LC2(int, i2d_TS_RESP, \
 AROS_LCA(const TS_RESP *, (___a), A0), \
 AROS_LCA(unsigned char **, (___pp), A1), \
     struct Library *, AMISSL_BASE_NAME, 3605, Amissl)

#define b2i_PublicKey(___in, ___length) \
      AROS_LC2(EVP_PKEY *, b2i_PublicKey, \
 AROS_LCA(const unsigned char **, (___in), A0), \
 AROS_LCA(long, (___length), D0), \
     struct Library *, AMISSL_BASE_NAME, 3606, Amissl)

#define TS_VERIFY_CTX_cleanup(___ctx) \
      AROS_LC1(void, TS_VERIFY_CTX_cleanup, \
 AROS_LCA(TS_VERIFY_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 3607, Amissl)

#define TS_STATUS_INFO_free(___a) \
      AROS_LC1(void, TS_STATUS_INFO_free, \
 AROS_LCA(TS_STATUS_INFO *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 3608, Amissl)

#define TS_RESP_verify_token(___ctx, ___token) \
      AROS_LC2(int, TS_RESP_verify_token, \
 AROS_LCA(TS_VERIFY_CTX *, (___ctx), A0), \
 AROS_LCA(PKCS7 *, (___token), A1), \
     struct Library *, AMISSL_BASE_NAME, 3609, Amissl)

#define OBJ_bsearch_ex_(___key, ___base, ___num, ___size, ___cmp, ___flags) \
      AROS_LC6(const void *, OBJ_bsearch_ex_, \
 AROS_LCA(const void *, (___key), A0), \
 AROS_LCA(const void *, (___base), A1), \
 AROS_LCA(int, (___num), D0), \
 AROS_LCA(int, (___size), D1), \
 AROS_LCA(int (*)(const void *,const void *), (___cmp), A2), \
 AROS_LCA(int, (___flags), D2), \
     struct Library *, AMISSL_BASE_NAME, 3610, Amissl)

#define ASN1_bn_print(___bp, ___number, ___num, ___ign, ___indent) \
      AROS_LC5(int, ASN1_bn_print, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(const char *, (___number), A1), \
 AROS_LCA(const BIGNUM *, (___num), A2), \
 AROS_LCA(unsigned char *, (___ign), A3), \
 AROS_LCA(int, (___indent), D0), \
     struct Library *, AMISSL_BASE_NAME, 3611, Amissl)

#define EVP_PKEY_asn1_get_count() \
      AROS_LC0(int, EVP_PKEY_asn1_get_count, \
     struct Library *, AMISSL_BASE_NAME, 3612, Amissl)

#define ASN1_PCTX_set_nm_flags(___p, ___flags) \
      AROS_LC2(void, ASN1_PCTX_set_nm_flags, \
 AROS_LCA(ASN1_PCTX *, (___p), A0), \
 AROS_LCA(unsigned long, (___flags), D0), \
     struct Library *, AMISSL_BASE_NAME, 3613, Amissl)

#define EVP_DigestVerifyInit(___ctx, ___pctx, ___type, ___e, ___pkey) \
      AROS_LC5(int, EVP_DigestVerifyInit, \
 AROS_LCA(EVP_MD_CTX *, (___ctx), A0), \
 AROS_LCA(EVP_PKEY_CTX **, (___pctx), A1), \
 AROS_LCA(const EVP_MD *, (___type), A2), \
 AROS_LCA(ENGINE *, (___e), A3), \
 AROS_LCA(EVP_PKEY *, (___pkey), D0), \
     struct Library *, AMISSL_BASE_NAME, 3614, Amissl)

#define TS_TST_INFO_get_policy_id(___a) \
      AROS_LC1(ASN1_OBJECT *, TS_TST_INFO_get_policy_id, \
 AROS_LCA(TS_TST_INFO *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 3615, Amissl)

#define TS_REQ_get_cert_req(___a) \
      AROS_LC1(int, TS_REQ_get_cert_req, \
 AROS_LCA(const TS_REQ *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 3616, Amissl)

#define X509_CRL_set_meth_data(___crl, ___dat) \
      AROS_LC2(void, X509_CRL_set_meth_data, \
 AROS_LCA(X509_CRL *, (___crl), A0), \
 AROS_LCA(void *, (___dat), A1), \
     struct Library *, AMISSL_BASE_NAME, 3617, Amissl)

#define PKCS8_pkey_set0(___priv, ___aobj, ___version, ___ptype, ___pval, ___penc, ___penclen) \
      AROS_LC7(int, PKCS8_pkey_set0, \
 AROS_LCA(PKCS8_PRIV_KEY_INFO *, (___priv), A0), \
 AROS_LCA(ASN1_OBJECT *, (___aobj), A1), \
 AROS_LCA(int, (___version), D0), \
 AROS_LCA(int, (___ptype), D1), \
 AROS_LCA(void *, (___pval), A2), \
 AROS_LCA(unsigned char *, (___penc), A3), \
 AROS_LCA(int, (___penclen), D2), \
     struct Library *, AMISSL_BASE_NAME, 3618, Amissl)

#define ASN1_STRING_copy(___dst, ___str) \
      AROS_LC2(int, ASN1_STRING_copy, \
 AROS_LCA(ASN1_STRING *, (___dst), A0), \
 AROS_LCA(const ASN1_STRING *, (___str), A1), \
     struct Library *, AMISSL_BASE_NAME, 3619, Amissl)

#define X509_CRL_match(___a, ___b) \
      AROS_LC2(int, X509_CRL_match, \
 AROS_LCA(const X509_CRL *, (___a), A0), \
 AROS_LCA(const X509_CRL *, (___b), A1), \
     struct Library *, AMISSL_BASE_NAME, 3621, Amissl)

#define EVP_PKEY_asn1_set_private(___ameth, ___priv_decode, ___priv_encode, ___priv_print) \
      AROS_LC4(void, EVP_PKEY_asn1_set_private, \
 AROS_LCA(EVP_PKEY_ASN1_METHOD *, (___ameth), A0), \
 AROS_LCA(int (*)(EVP_PKEY *pk,const PKCS8_PRIV_KEY_INFO *p8inf), (___priv_decode), A1), \
 AROS_LCA(int (*)(PKCS8_PRIV_KEY_INFO *p8,const EVP_PKEY *pk), (___priv_encode), A2), \
 AROS_LCA(int (*)(BIO *out,const EVP_PKEY *pkey,int indent,ASN1_PCTX *pctx), (___priv_print), A3), \
     struct Library *, AMISSL_BASE_NAME, 3622, Amissl)

#define TS_TST_INFO_get_ext_d2i(___a, ___nid, ___crit, ___idx) \
      AROS_LC4(void *, TS_TST_INFO_get_ext_d2i, \
 AROS_LCA(TS_TST_INFO *, (___a), A0), \
 AROS_LCA(int, (___nid), D0), \
 AROS_LCA(int *, (___crit), A1), \
 AROS_LCA(int *, (___idx), A2), \
     struct Library *, AMISSL_BASE_NAME, 3623, Amissl)

#define TS_RESP_CTX_add_policy(___ctx, ___policy) \
      AROS_LC2(int, TS_RESP_CTX_add_policy, \
 AROS_LCA(TS_RESP_CTX *, (___ctx), A0), \
 AROS_LCA(const ASN1_OBJECT *, (___policy), A1), \
     struct Library *, AMISSL_BASE_NAME, 3624, Amissl)

#define d2i_TS_RESP(___a, ___pp, ___length) \
      AROS_LC3(TS_RESP *, d2i_TS_RESP, \
 AROS_LCA(TS_RESP **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___pp), A1), \
 AROS_LCA(long, (___length), D0), \
     struct Library *, AMISSL_BASE_NAME, 3625, Amissl)

#define TS_CONF_load_certs(___file) \
      AROS_LC1(STACK_OF(X509) *, TS_CONF_load_certs, \
 AROS_LCA(const char *, (___file), A0), \
     struct Library *, AMISSL_BASE_NAME, 3626, Amissl)

#define TS_TST_INFO_get_msg_imprint(___a) \
      AROS_LC1(TS_MSG_IMPRINT *, TS_TST_INFO_get_msg_imprint, \
 AROS_LCA(TS_TST_INFO *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 3627, Amissl)

#define ERR_load_TS_strings() \
      AROS_LC0(int, ERR_load_TS_strings, \
     struct Library *, AMISSL_BASE_NAME, 3628, Amissl)

#define TS_TST_INFO_get_version(___a) \
      AROS_LC1(long, TS_TST_INFO_get_version, \
 AROS_LCA(const TS_TST_INFO *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 3629, Amissl)

#define EVP_PKEY_CTX_dup(___ctx) \
      AROS_LC1(EVP_PKEY_CTX *, EVP_PKEY_CTX_dup, \
 AROS_LCA(const EVP_PKEY_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 3630, Amissl)

#define EVP_PKEY_meth_set_verify(___pmeth, ___verify_init, ___verify) \
      AROS_LC3(void, EVP_PKEY_meth_set_verify, \
 AROS_LCA(EVP_PKEY_METHOD *, (___pmeth), A0), \
 AROS_LCA(int (*)(EVP_PKEY_CTX *ctx), (___verify_init), A1), \
 AROS_LCA(int (*)(EVP_PKEY_CTX *ctx,const unsigned char *sig,size_t siglen,const unsigned char *tbs,size_t tbslen), (___verify), A2), \
     struct Library *, AMISSL_BASE_NAME, 3631, Amissl)

#define i2b_PublicKey_bio(___out, ___pk) \
      AROS_LC2(int, i2b_PublicKey_bio, \
 AROS_LCA(BIO *, (___out), A0), \
 AROS_LCA(const EVP_PKEY *, (___pk), A1), \
     struct Library *, AMISSL_BASE_NAME, 3632, Amissl)

#define TS_CONF_set_certs(___conf, ___section, ___certs, ___ctx) \
      AROS_LC4(int, TS_CONF_set_certs, \
 AROS_LCA(CONF *, (___conf), A0), \
 AROS_LCA(const char *, (___section), A1), \
 AROS_LCA(const char *, (___certs), A2), \
 AROS_LCA(TS_RESP_CTX *, (___ctx), A3), \
     struct Library *, AMISSL_BASE_NAME, 3633, Amissl)

#define EVP_PKEY_asn1_get0_info(___ppkey_id, ___ppkey_base_id, ___ppkey_flags, ___pinfo, ___ppem_str, ___ameth) \
      AROS_LC6(int, EVP_PKEY_asn1_get0_info, \
 AROS_LCA(int *, (___ppkey_id), A0), \
 AROS_LCA(int *, (___ppkey_base_id), A1), \
 AROS_LCA(int *, (___ppkey_flags), A2), \
 AROS_LCA(const char **, (___pinfo), A3), \
 AROS_LCA(const char **, (___ppem_str), D0), \
 AROS_LCA(const EVP_PKEY_ASN1_METHOD *, (___ameth), D1), \
     struct Library *, AMISSL_BASE_NAME, 3634, Amissl)

#define TS_VERIFY_CTX_free(___ctx) \
      AROS_LC1(void, TS_VERIFY_CTX_free, \
 AROS_LCA(TS_VERIFY_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 3635, Amissl)

#define TS_REQ_get_ext_by_critical(___a, ___crit, ___lastpos) \
      AROS_LC3(int, TS_REQ_get_ext_by_critical, \
 AROS_LCA(TS_REQ *, (___a), A0), \
 AROS_LCA(int, (___crit), D0), \
 AROS_LCA(int, (___lastpos), D1), \
     struct Library *, AMISSL_BASE_NAME, 3636, Amissl)

#define TS_RESP_CTX_set_serial_cb(___ctx, ___cb, ___data) \
      AROS_LC3(void, TS_RESP_CTX_set_serial_cb, \
 AROS_LCA(TS_RESP_CTX *, (___ctx), A0), \
 AROS_LCA(TS_serial_cb, (___cb), D0), \
 AROS_LCA(void *, (___data), A1), \
     struct Library *, AMISSL_BASE_NAME, 3637, Amissl)

#define X509_CRL_get_meth_data(___crl) \
      AROS_LC1(void *, X509_CRL_get_meth_data, \
 AROS_LCA(X509_CRL *, (___crl), A0), \
     struct Library *, AMISSL_BASE_NAME, 3638, Amissl)

#define TS_RESP_CTX_set_time_cb(___ctx, ___cb, ___data) \
      AROS_LC3(void, TS_RESP_CTX_set_time_cb, \
 AROS_LCA(TS_RESP_CTX *, (___ctx), A0), \
 AROS_LCA(TS_time_cb, (___cb), D0), \
 AROS_LCA(void *, (___data), A1), \
     struct Library *, AMISSL_BASE_NAME, 3639, Amissl)

#define TS_MSG_IMPRINT_get_msg(___a) \
      AROS_LC1(ASN1_OCTET_STRING *, TS_MSG_IMPRINT_get_msg, \
 AROS_LCA(TS_MSG_IMPRINT *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 3640, Amissl)

#define TS_TST_INFO_ext_free(___a) \
      AROS_LC1(void, TS_TST_INFO_ext_free, \
 AROS_LCA(TS_TST_INFO *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 3641, Amissl)

#define TS_REQ_get_version(___a) \
      AROS_LC1(long, TS_REQ_get_version, \
 AROS_LCA(const TS_REQ *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 3642, Amissl)

#define TS_REQ_add_ext(___a, ___ex, ___loc) \
      AROS_LC3(int, TS_REQ_add_ext, \
 AROS_LCA(TS_REQ *, (___a), A0), \
 AROS_LCA(X509_EXTENSION *, (___ex), A1), \
 AROS_LCA(int, (___loc), D0), \
     struct Library *, AMISSL_BASE_NAME, 3643, Amissl)

#define EVP_PKEY_CTX_set_app_data(___ctx, ___data) \
      AROS_LC2(void, EVP_PKEY_CTX_set_app_data, \
 AROS_LCA(EVP_PKEY_CTX *, (___ctx), A0), \
 AROS_LCA(void *, (___data), A1), \
     struct Library *, AMISSL_BASE_NAME, 3644, Amissl)

#define OBJ_bsearch_(___key, ___base, ___num, ___size, ___cmp) \
      AROS_LC5(const void *, OBJ_bsearch_, \
 AROS_LCA(const void *, (___key), A0), \
 AROS_LCA(const void *, (___base), A1), \
 AROS_LCA(int, (___num), D0), \
 AROS_LCA(int, (___size), D1), \
 AROS_LCA(int (*)(const void *,const void *), (___cmp), A2), \
     struct Library *, AMISSL_BASE_NAME, 3645, Amissl)

#define EVP_PKEY_meth_set_verifyctx(___pmeth, ___verifyctx_init, ___verifyctx) \
      AROS_LC3(void, EVP_PKEY_meth_set_verifyctx, \
 AROS_LCA(EVP_PKEY_METHOD *, (___pmeth), A0), \
 AROS_LCA(int (*)(EVP_PKEY_CTX *ctx,EVP_MD_CTX *mctx), (___verifyctx_init), A1), \
 AROS_LCA(int (*)(EVP_PKEY_CTX *ctx,const unsigned char *sig,int siglen,EVP_MD_CTX *mctx), (___verifyctx), A2), \
     struct Library *, AMISSL_BASE_NAME, 3646, Amissl)

#define i2d_PKCS7_bio_stream(___out, ___p7, ___in, ___flags) \
      AROS_LC4(int, i2d_PKCS7_bio_stream, \
 AROS_LCA(BIO *, (___out), A0), \
 AROS_LCA(PKCS7 *, (___p7), A1), \
 AROS_LCA(BIO *, (___in), A2), \
 AROS_LCA(int, (___flags), D0), \
     struct Library *, AMISSL_BASE_NAME, 3647, Amissl)

#define PKCS7_sign_add_signer(___p7, ___signcert, ___pkey, ___md, ___flags) \
      AROS_LC5(PKCS7_SIGNER_INFO *, PKCS7_sign_add_signer, \
 AROS_LCA(PKCS7 *, (___p7), A0), \
 AROS_LCA(X509 *, (___signcert), A1), \
 AROS_LCA(EVP_PKEY *, (___pkey), A2), \
 AROS_LCA(const EVP_MD *, (___md), A3), \
 AROS_LCA(int, (___flags), D0), \
     struct Library *, AMISSL_BASE_NAME, 3649, Amissl)

#define d2i_TS_TST_INFO_bio(___bp, ___a) \
      AROS_LC2(TS_TST_INFO *, d2i_TS_TST_INFO_bio, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(TS_TST_INFO **, (___a), A1), \
     struct Library *, AMISSL_BASE_NAME, 3650, Amissl)

#define TS_TST_INFO_get_ordering(___a) \
      AROS_LC1(int, TS_TST_INFO_get_ordering, \
 AROS_LCA(const TS_TST_INFO *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 3651, Amissl)

#define TS_RESP_print_bio(___bio, ___a) \
      AROS_LC2(int, TS_RESP_print_bio, \
 AROS_LCA(BIO *, (___bio), A0), \
 AROS_LCA(TS_RESP *, (___a), A1), \
     struct Library *, AMISSL_BASE_NAME, 3652, Amissl)

#define TS_TST_INFO_get_exts(___a) \
      AROS_LC1(STACK_OF(X509_EXTENSION) *, TS_TST_INFO_get_exts, \
 AROS_LCA(TS_TST_INFO *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 3653, Amissl)

#define PKCS5_pbe2_set_iv(___cipher, ___iter, ___salt, ___saltlen, ___aiv, ___prf_nid) \
      AROS_LC6(X509_ALGOR *, PKCS5_pbe2_set_iv, \
 AROS_LCA(const EVP_CIPHER *, (___cipher), A0), \
 AROS_LCA(int, (___iter), D0), \
 AROS_LCA(unsigned char *, (___salt), A1), \
 AROS_LCA(int, (___saltlen), D1), \
 AROS_LCA(unsigned char *, (___aiv), A2), \
 AROS_LCA(int, (___prf_nid), D2), \
     struct Library *, AMISSL_BASE_NAME, 3654, Amissl)

#define b2i_PrivateKey(___in, ___length) \
      AROS_LC2(EVP_PKEY *, b2i_PrivateKey, \
 AROS_LCA(const unsigned char **, (___in), A0), \
 AROS_LCA(long, (___length), D0), \
     struct Library *, AMISSL_BASE_NAME, 3655, Amissl)

#define EVP_PKEY_CTX_get_app_data(___ctx) \
      AROS_LC1(void *, EVP_PKEY_CTX_get_app_data, \
 AROS_LCA(EVP_PKEY_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 3656, Amissl)

#define TS_REQ_set_cert_req(___a, ___cert_req) \
      AROS_LC2(int, TS_REQ_set_cert_req, \
 AROS_LCA(TS_REQ *, (___a), A0), \
 AROS_LCA(int, (___cert_req), D0), \
     struct Library *, AMISSL_BASE_NAME, 3657, Amissl)

#define TS_CONF_set_serial(___conf, ___section, ___cb, ___ctx) \
      AROS_LC4(int, TS_CONF_set_serial, \
 AROS_LCA(CONF *, (___conf), A0), \
 AROS_LCA(const char *, (___section), A1), \
 AROS_LCA(TS_serial_cb, (___cb), A2), \
 AROS_LCA(TS_RESP_CTX *, (___ctx), A3), \
     struct Library *, AMISSL_BASE_NAME, 3659, Amissl)

#define TS_TST_INFO_free(___a) \
      AROS_LC1(void, TS_TST_INFO_free, \
 AROS_LCA(TS_TST_INFO *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 3660, Amissl)

#define TS_RESP_verify_response(___ctx, ___response) \
      AROS_LC2(int, TS_RESP_verify_response, \
 AROS_LCA(TS_VERIFY_CTX *, (___ctx), A0), \
 AROS_LCA(TS_RESP *, (___response), A1), \
     struct Library *, AMISSL_BASE_NAME, 3662, Amissl)

#define i2d_ESS_ISSUER_SERIAL(___a, ___pp) \
      AROS_LC2(int, i2d_ESS_ISSUER_SERIAL, \
 AROS_LCA(const ESS_ISSUER_SERIAL *, (___a), A0), \
 AROS_LCA(unsigned char **, (___pp), A1), \
     struct Library *, AMISSL_BASE_NAME, 3663, Amissl)

#define TS_ACCURACY_get_seconds(___a) \
      AROS_LC1(const ASN1_INTEGER *, TS_ACCURACY_get_seconds, \
 AROS_LCA(const TS_ACCURACY *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 3664, Amissl)

#define EVP_CIPHER_do_all(___fn, ___arg) \
      AROS_LC2(void, EVP_CIPHER_do_all, \
 AROS_LCA(void (*)(const EVP_CIPHER *ciph,const char *from,const char *to,void *x), (___fn), A0), \
 AROS_LCA(void *, (___arg), A1), \
     struct Library *, AMISSL_BASE_NAME, 3665, Amissl)

#define b2i_PrivateKey_bio(___in) \
      AROS_LC1(EVP_PKEY *, b2i_PrivateKey_bio, \
 AROS_LCA(BIO *, (___in), A0), \
     struct Library *, AMISSL_BASE_NAME, 3666, Amissl)

#define OCSP_CERTID_dup(___a) \
      AROS_LC1(OCSP_CERTID *, OCSP_CERTID_dup, \
 AROS_LCA(const OCSP_CERTID *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 3667, Amissl)

#define X509_PUBKEY_get0_param(___ppkalg, ___pk, ___ppklen, ___pa, ___pub) \
      AROS_LC5(int, X509_PUBKEY_get0_param, \
 AROS_LCA(ASN1_OBJECT **, (___ppkalg), A0), \
 AROS_LCA(const unsigned char **, (___pk), A1), \
 AROS_LCA(int *, (___ppklen), A2), \
 AROS_LCA(X509_ALGOR **, (___pa), A3), \
 AROS_LCA(const X509_PUBKEY *, (___pub), D0), \
     struct Library *, AMISSL_BASE_NAME, 3668, Amissl)

#define TS_MSG_IMPRINT_dup(___a) \
      AROS_LC1(TS_MSG_IMPRINT *, TS_MSG_IMPRINT_dup, \
 AROS_LCA(const TS_MSG_IMPRINT *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 3669, Amissl)

#define PKCS7_print_ctx(___out, ___x, ___indent, ___pctx) \
      AROS_LC4(int, PKCS7_print_ctx, \
 AROS_LCA(BIO *, (___out), A0), \
 AROS_LCA(const PKCS7 *, (___x), A1), \
 AROS_LCA(int, (___indent), D0), \
 AROS_LCA(const ASN1_PCTX *, (___pctx), A2), \
     struct Library *, AMISSL_BASE_NAME, 3670, Amissl)

#define i2d_TS_REQ_bio(___fp, ___a) \
      AROS_LC2(int, i2d_TS_REQ_bio, \
 AROS_LCA(BIO *, (___fp), A0), \
 AROS_LCA(const TS_REQ *, (___a), A1), \
     struct Library *, AMISSL_BASE_NAME, 3671, Amissl)

#define EVP_PKEY_asn1_set_param(___ameth, ___param_decode, ___param_encode, ___param_missing, ___param_copy, ___param_cmp, ___param_print) \
      AROS_LC7(void, EVP_PKEY_asn1_set_param, \
 AROS_LCA(EVP_PKEY_ASN1_METHOD *, (___ameth), A0), \
 AROS_LCA(int (*)(EVP_PKEY *pkey,const unsigned char **pder,int derlen), (___param_decode), A1), \
 AROS_LCA(int (*)(const EVP_PKEY *pkey,unsigned char **pder), (___param_encode), A2), \
 AROS_LCA(int (*)(const EVP_PKEY *pk), (___param_missing), A3), \
 AROS_LCA(int (*)(EVP_PKEY *to,const EVP_PKEY *from), (___param_copy), D0), \
 AROS_LCA(int (*)(const EVP_PKEY *a,const EVP_PKEY *b), (___param_cmp), D1), \
 AROS_LCA(int (*)(BIO *out,const EVP_PKEY *pkey,int indent,ASN1_PCTX *pctx), (___param_print), D2), \
     struct Library *, AMISSL_BASE_NAME, 3672, Amissl)

#define EVP_PKEY_meth_set_encrypt(___pmeth, ___encrypt_init, ___encryptfn) \
      AROS_LC3(void, EVP_PKEY_meth_set_encrypt, \
 AROS_LCA(EVP_PKEY_METHOD *, (___pmeth), A0), \
 AROS_LCA(int (*)(EVP_PKEY_CTX *ctx), (___encrypt_init), A1), \
 AROS_LCA(int (*)(EVP_PKEY_CTX *ctx,unsigned char *out,size_t *outlen,const unsigned char *in,size_t inlen), (___encryptfn), A2), \
     struct Library *, AMISSL_BASE_NAME, 3673, Amissl)

#define ASN1_PCTX_set_flags(___p, ___flags) \
      AROS_LC2(void, ASN1_PCTX_set_flags, \
 AROS_LCA(ASN1_PCTX *, (___p), A0), \
 AROS_LCA(unsigned long, (___flags), D0), \
     struct Library *, AMISSL_BASE_NAME, 3674, Amissl)

#define i2d_ESS_CERT_ID(___a, ___pp) \
      AROS_LC2(int, i2d_ESS_CERT_ID, \
 AROS_LCA(const ESS_CERT_ID *, (___a), A0), \
 AROS_LCA(unsigned char **, (___pp), A1), \
     struct Library *, AMISSL_BASE_NAME, 3675, Amissl)

#define TS_VERIFY_CTX_new() \
      AROS_LC0(TS_VERIFY_CTX *, TS_VERIFY_CTX_new, \
     struct Library *, AMISSL_BASE_NAME, 3676, Amissl)

#define TS_RESP_CTX_set_extension_cb(___ctx, ___cb, ___data) \
      AROS_LC3(void, TS_RESP_CTX_set_extension_cb, \
 AROS_LCA(TS_RESP_CTX *, (___ctx), A0), \
 AROS_LCA(TS_extension_cb, (___cb), A1), \
 AROS_LCA(void *, (___data), A2), \
     struct Library *, AMISSL_BASE_NAME, 3677, Amissl)

#define TS_RESP_CTX_set_status_info_cond(___ctx, ___status, ___text) \
      AROS_LC3(int, TS_RESP_CTX_set_status_info_cond, \
 AROS_LCA(TS_RESP_CTX *, (___ctx), A0), \
 AROS_LCA(int, (___status), D0), \
 AROS_LCA(const char *, (___text), A1), \
     struct Library *, AMISSL_BASE_NAME, 3678, Amissl)

#define EVP_PKEY_verify(___ctx, ___sig, ___siglen, ___tbs, ___tbslen) \
      AROS_LC5(int, EVP_PKEY_verify, \
 AROS_LCA(EVP_PKEY_CTX *, (___ctx), A0), \
 AROS_LCA(const unsigned char *, (___sig), A1), \
 AROS_LCA(size_t, (___siglen), D0), \
 AROS_LCA(const unsigned char *, (___tbs), A2), \
 AROS_LCA(size_t, (___tbslen), D1), \
     struct Library *, AMISSL_BASE_NAME, 3679, Amissl)

#define X509_CRL_METHOD_new(___crl_init, ___crl_free, ___crl_lookup, ___crl_verify) \
      AROS_LC4(X509_CRL_METHOD *, X509_CRL_METHOD_new, \
 AROS_LCA(int (*)(X509_CRL *crl), (___crl_init), A0), \
 AROS_LCA(int (*)(X509_CRL *crl), (___crl_free), A1), \
 AROS_LCA(int (*)(X509_CRL *crl,X509_REVOKED **ret,const ASN1_INTEGER *serial,const X509_NAME *issuer), (___crl_lookup), A2), \
 AROS_LCA(int (*)(X509_CRL *crl,EVP_PKEY *pk), (___crl_verify), A3), \
     struct Library *, AMISSL_BASE_NAME, 3680, Amissl)

#define EVP_DigestSignFinal(___ctx, ___sigret, ___siglen) \
      AROS_LC3(int, EVP_DigestSignFinal, \
 AROS_LCA(EVP_MD_CTX *, (___ctx), A0), \
 AROS_LCA(unsigned char *, (___sigret), A1), \
 AROS_LCA(size_t *, (___siglen), A2), \
     struct Library *, AMISSL_BASE_NAME, 3681, Amissl)

#define TS_RESP_CTX_set_def_policy(___ctx, ___def_policy) \
      AROS_LC2(int, TS_RESP_CTX_set_def_policy, \
 AROS_LCA(TS_RESP_CTX *, (___ctx), A0), \
 AROS_LCA(const ASN1_OBJECT *, (___def_policy), A1), \
     struct Library *, AMISSL_BASE_NAME, 3682, Amissl)

#define TS_RESP_create_response(___ctx, ___req_bio) \
      AROS_LC2(TS_RESP *, TS_RESP_create_response, \
 AROS_LCA(TS_RESP_CTX *, (___ctx), A0), \
 AROS_LCA(BIO *, (___req_bio), A1), \
     struct Library *, AMISSL_BASE_NAME, 3683, Amissl)

#define PKCS7_SIGNER_INFO_get0_algs(___si, ___pk, ___pdig, ___psig) \
      AROS_LC4(void, PKCS7_SIGNER_INFO_get0_algs, \
 AROS_LCA(PKCS7_SIGNER_INFO *, (___si), A0), \
 AROS_LCA(EVP_PKEY **, (___pk), A1), \
 AROS_LCA(X509_ALGOR **, (___pdig), A2), \
 AROS_LCA(X509_ALGOR **, (___psig), A3), \
     struct Library *, AMISSL_BASE_NAME, 3684, Amissl)

#define TS_TST_INFO_get_nonce(___a) \
      AROS_LC1(const ASN1_INTEGER *, TS_TST_INFO_get_nonce, \
 AROS_LCA(const TS_TST_INFO *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 3685, Amissl)

#define EVP_PKEY_decrypt_old(___dec_key, ___enc_key, ___enc_key_len, ___private_key) \
      AROS_LC4(int, EVP_PKEY_decrypt_old, \
 AROS_LCA(unsigned char *, (___dec_key), A0), \
 AROS_LCA(const unsigned char *, (___enc_key), A1), \
 AROS_LCA(int, (___enc_key_len), D0), \
 AROS_LCA(EVP_PKEY *, (___private_key), A2), \
     struct Library *, AMISSL_BASE_NAME, 3686, Amissl)

#define TS_TST_INFO_set_policy_id(___a, ___policy_id) \
      AROS_LC2(int, TS_TST_INFO_set_policy_id, \
 AROS_LCA(TS_TST_INFO *, (___a), A0), \
 AROS_LCA(ASN1_OBJECT *, (___policy_id), A1), \
     struct Library *, AMISSL_BASE_NAME, 3687, Amissl)

#define TS_CONF_set_ess_cert_id_chain(___conf, ___section, ___ctx) \
      AROS_LC3(int, TS_CONF_set_ess_cert_id_chain, \
 AROS_LCA(CONF *, (___conf), A0), \
 AROS_LCA(const char *, (___section), A1), \
 AROS_LCA(TS_RESP_CTX *, (___ctx), A2), \
     struct Library *, AMISSL_BASE_NAME, 3688, Amissl)

#define EVP_PKEY_CTX_get0_pkey(___ctx) \
      AROS_LC1(EVP_PKEY *, EVP_PKEY_CTX_get0_pkey, \
 AROS_LCA(EVP_PKEY_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 3689, Amissl)

#define d2i_TS_REQ(___a, ___pp, ___length) \
      AROS_LC3(TS_REQ *, d2i_TS_REQ, \
 AROS_LCA(TS_REQ **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___pp), A1), \
 AROS_LCA(long, (___length), D0), \
     struct Library *, AMISSL_BASE_NAME, 3690, Amissl)

#define EVP_PKEY_asn1_find_str(___pe, ___str, ___len) \
      AROS_LC3(const EVP_PKEY_ASN1_METHOD *, EVP_PKEY_asn1_find_str, \
 AROS_LCA(ENGINE **, (___pe), A0), \
 AROS_LCA(const char *, (___str), A1), \
 AROS_LCA(int, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 3691, Amissl)

#define BIO_f_asn1() \
      AROS_LC0(const BIO_METHOD *, BIO_f_asn1, \
     struct Library *, AMISSL_BASE_NAME, 3692, Amissl)

#define ESS_SIGNING_CERT_new() \
      AROS_LC0(ESS_SIGNING_CERT *, ESS_SIGNING_CERT_new, \
     struct Library *, AMISSL_BASE_NAME, 3693, Amissl)

#define EVP_PBE_find(___type, ___pbe_nid, ___pcnid, ___pmnid, ___pkeygen) \
      AROS_LC5(int, EVP_PBE_find, \
 AROS_LCA(int, (___type), D0), \
 AROS_LCA(int, (___pbe_nid), D1), \
 AROS_LCA(int *, (___pcnid), A0), \
 AROS_LCA(int *, (___pmnid), A1), \
 AROS_LCA(EVP_PBE_KEYGEN **, (___pkeygen), A2), \
     struct Library *, AMISSL_BASE_NAME, 3694, Amissl)

#define X509_CRL_get0_by_cert(___crl, ___ret, ___x) \
      AROS_LC3(int, X509_CRL_get0_by_cert, \
 AROS_LCA(X509_CRL *, (___crl), A0), \
 AROS_LCA(X509_REVOKED **, (___ret), A1), \
 AROS_LCA(X509 *, (___x), A2), \
     struct Library *, AMISSL_BASE_NAME, 3695, Amissl)

#define EVP_PKEY_derive(___ctx, ___key, ___keylen) \
      AROS_LC3(int, EVP_PKEY_derive, \
 AROS_LCA(EVP_PKEY_CTX *, (___ctx), A0), \
 AROS_LCA(unsigned char *, (___key), A1), \
 AROS_LCA(size_t *, (___keylen), A2), \
     struct Library *, AMISSL_BASE_NAME, 3696, Amissl)

#define i2d_TS_REQ(___a, ___pp) \
      AROS_LC2(int, i2d_TS_REQ, \
 AROS_LCA(const TS_REQ *, (___a), A0), \
 AROS_LCA(unsigned char **, (___pp), A1), \
     struct Library *, AMISSL_BASE_NAME, 3697, Amissl)

#define TS_TST_INFO_delete_ext(___a, ___loc) \
      AROS_LC2(X509_EXTENSION *, TS_TST_INFO_delete_ext, \
 AROS_LCA(TS_TST_INFO *, (___a), A0), \
 AROS_LCA(int, (___loc), D0), \
     struct Library *, AMISSL_BASE_NAME, 3698, Amissl)

#define ESS_ISSUER_SERIAL_free(___a) \
      AROS_LC1(void, ESS_ISSUER_SERIAL_free, \
 AROS_LCA(ESS_ISSUER_SERIAL *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 3699, Amissl)

#define ASN1_PCTX_set_str_flags(___p, ___flags) \
      AROS_LC2(void, ASN1_PCTX_set_str_flags, \
 AROS_LCA(ASN1_PCTX *, (___p), A0), \
 AROS_LCA(unsigned long, (___flags), D0), \
     struct Library *, AMISSL_BASE_NAME, 3700, Amissl)

#define TS_CONF_set_signer_key(___conf, ___section, ___key, ___pass, ___ctx) \
      AROS_LC5(int, TS_CONF_set_signer_key, \
 AROS_LCA(CONF *, (___conf), A0), \
 AROS_LCA(const char *, (___section), A1), \
 AROS_LCA(const char *, (___key), A2), \
 AROS_LCA(const char *, (___pass), A3), \
 AROS_LCA(TS_RESP_CTX *, (___ctx), D0), \
     struct Library *, AMISSL_BASE_NAME, 3701, Amissl)

#define TS_ACCURACY_get_millis(___a) \
      AROS_LC1(const ASN1_INTEGER *, TS_ACCURACY_get_millis, \
 AROS_LCA(const TS_ACCURACY *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 3702, Amissl)

#define TS_RESP_get_token(___a) \
      AROS_LC1(PKCS7 *, TS_RESP_get_token, \
 AROS_LCA(TS_RESP *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 3703, Amissl)

#define TS_ACCURACY_dup(___a) \
      AROS_LC1(TS_ACCURACY *, TS_ACCURACY_dup, \
 AROS_LCA(const TS_ACCURACY *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 3704, Amissl)

#define X509_CRL_set_default_method(___meth) \
      AROS_LC1(void, X509_CRL_set_default_method, \
 AROS_LCA(const X509_CRL_METHOD *, (___meth), A0), \
     struct Library *, AMISSL_BASE_NAME, 3705, Amissl)

#define TS_RESP_free(___a) \
      AROS_LC1(void, TS_RESP_free, \
 AROS_LCA(TS_RESP *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 3707, Amissl)

#define ISSUING_DIST_POINT_free(___a) \
      AROS_LC1(void, ISSUING_DIST_POINT_free, \
 AROS_LCA(ISSUING_DIST_POINT *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 3708, Amissl)

#define ESS_ISSUER_SERIAL_new() \
      AROS_LC0(ESS_ISSUER_SERIAL *, ESS_ISSUER_SERIAL_new, \
     struct Library *, AMISSL_BASE_NAME, 3709, Amissl)

#define PKCS7_add1_attrib_digest(___si, ___md, ___mdlen) \
      AROS_LC3(int, PKCS7_add1_attrib_digest, \
 AROS_LCA(PKCS7_SIGNER_INFO *, (___si), A0), \
 AROS_LCA(const unsigned char *, (___md), A1), \
 AROS_LCA(int, (___mdlen), D0), \
     struct Library *, AMISSL_BASE_NAME, 3710, Amissl)

#define TS_RESP_CTX_add_md(___ctx, ___md) \
      AROS_LC2(int, TS_RESP_CTX_add_md, \
 AROS_LCA(TS_RESP_CTX *, (___ctx), A0), \
 AROS_LCA(const EVP_MD *, (___md), A1), \
     struct Library *, AMISSL_BASE_NAME, 3711, Amissl)

#define TS_TST_INFO_dup(___a) \
      AROS_LC1(TS_TST_INFO *, TS_TST_INFO_dup, \
 AROS_LCA(const TS_TST_INFO *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 3712, Amissl)

#define PEM_write_bio_Parameters(___bp, ___x) \
      AROS_LC2(int, PEM_write_bio_Parameters, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(const EVP_PKEY *, (___x), A1), \
     struct Library *, AMISSL_BASE_NAME, 3713, Amissl)

#define TS_TST_INFO_get_accuracy(___a) \
      AROS_LC1(TS_ACCURACY *, TS_TST_INFO_get_accuracy, \
 AROS_LCA(TS_TST_INFO *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 3714, Amissl)

#define X509_CRL_get0_by_serial(___crl, ___ret, ___serial) \
      AROS_LC3(int, X509_CRL_get0_by_serial, \
 AROS_LCA(X509_CRL *, (___crl), A0), \
 AROS_LCA(X509_REVOKED **, (___ret), A1), \
 AROS_LCA(const ASN1_INTEGER *, (___serial), A2), \
     struct Library *, AMISSL_BASE_NAME, 3715, Amissl)

#define TS_TST_INFO_set_version(___a, ___version) \
      AROS_LC2(int, TS_TST_INFO_set_version, \
 AROS_LCA(TS_TST_INFO *, (___a), A0), \
 AROS_LCA(long, (___version), D0), \
     struct Library *, AMISSL_BASE_NAME, 3716, Amissl)

#define TS_RESP_CTX_get_tst_info(___ctx) \
      AROS_LC1(TS_TST_INFO *, TS_RESP_CTX_get_tst_info, \
 AROS_LCA(TS_RESP_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 3717, Amissl)

#define TS_RESP_verify_signature(___token, ___certs, ___store, ___signer_out) \
      AROS_LC4(int, TS_RESP_verify_signature, \
 AROS_LCA(PKCS7 *, (___token), A0), \
 AROS_LCA(STACK_OF(X509) *, (___certs), A1), \
 AROS_LCA(X509_STORE *, (___store), A2), \
 AROS_LCA(X509 **, (___signer_out), A3), \
     struct Library *, AMISSL_BASE_NAME, 3718, Amissl)

#define TS_TST_INFO_get_tsa(___a) \
      AROS_LC1(GENERAL_NAME *, TS_TST_INFO_get_tsa, \
 AROS_LCA(TS_TST_INFO *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 3720, Amissl)

#define TS_STATUS_INFO_new() \
      AROS_LC0(TS_STATUS_INFO *, TS_STATUS_INFO_new, \
     struct Library *, AMISSL_BASE_NAME, 3721, Amissl)

#define EVP_PKEY_CTX_get_cb(___ctx) \
      AROS_LC1(int (*)(EVP_PKEY_CTX *ctx), EVP_PKEY_CTX_get_cb, \
 AROS_LCA(EVP_PKEY_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 3722, Amissl)

#define TS_REQ_get_ext_d2i(___a, ___nid, ___crit, ___idx) \
      AROS_LC4(void *, TS_REQ_get_ext_d2i, \
 AROS_LCA(TS_REQ *, (___a), A0), \
 AROS_LCA(int, (___nid), D0), \
 AROS_LCA(int *, (___crit), A1), \
 AROS_LCA(int *, (___idx), D1), \
     struct Library *, AMISSL_BASE_NAME, 3723, Amissl)

#define GENERAL_NAME_set0_othername(___gen, ___oid, ___value) \
      AROS_LC3(int, GENERAL_NAME_set0_othername, \
 AROS_LCA(GENERAL_NAME *, (___gen), A0), \
 AROS_LCA(ASN1_OBJECT *, (___oid), A1), \
 AROS_LCA(ASN1_TYPE *, (___value), A2), \
     struct Library *, AMISSL_BASE_NAME, 3724, Amissl)

#define TS_TST_INFO_get_ext_count(___a) \
      AROS_LC1(int, TS_TST_INFO_get_ext_count, \
 AROS_LCA(TS_TST_INFO *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 3725, Amissl)

#define TS_RESP_CTX_get_request(___ctx) \
      AROS_LC1(TS_REQ *, TS_RESP_CTX_get_request, \
 AROS_LCA(TS_RESP_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 3726, Amissl)

#define EVP_PKEY_meth_set_signctx(___pmeth, ___signctx_init, ___signctx) \
      AROS_LC3(void, EVP_PKEY_meth_set_signctx, \
 AROS_LCA(EVP_PKEY_METHOD *, (___pmeth), A0), \
 AROS_LCA(int (*)(EVP_PKEY_CTX *ctx,EVP_MD_CTX *mctx), (___signctx_init), A1), \
 AROS_LCA(int (*)(EVP_PKEY_CTX *ctx,unsigned char *sig,size_t *siglen,EVP_MD_CTX *mctx), (___signctx), A2), \
     struct Library *, AMISSL_BASE_NAME, 3728, Amissl)

#define EVP_PKEY_asn1_copy(___dst, ___src) \
      AROS_LC2(void, EVP_PKEY_asn1_copy, \
 AROS_LCA(EVP_PKEY_ASN1_METHOD *, (___dst), A0), \
 AROS_LCA(const EVP_PKEY_ASN1_METHOD *, (___src), A1), \
     struct Library *, AMISSL_BASE_NAME, 3729, Amissl)

#define ASN1_TYPE_cmp(___a, ___b) \
      AROS_LC2(int, ASN1_TYPE_cmp, \
 AROS_LCA(const ASN1_TYPE *, (___a), A0), \
 AROS_LCA(const ASN1_TYPE *, (___b), A1), \
     struct Library *, AMISSL_BASE_NAME, 3730, Amissl)

#define EVP_CIPHER_do_all_sorted(___fn, ___arg) \
      AROS_LC2(void, EVP_CIPHER_do_all_sorted, \
 AROS_LCA(void (*)(const EVP_CIPHER *ciph,const char *from,const char *to,void *x), (___fn), A0), \
 AROS_LCA(void *, (___arg), A1), \
     struct Library *, AMISSL_BASE_NAME, 3731, Amissl)

#define EVP_PKEY_CTX_free(___ctx) \
      AROS_LC1(void, EVP_PKEY_CTX_free, \
 AROS_LCA(EVP_PKEY_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 3732, Amissl)

#define X509_STORE_CTX_get1_certs(___xs, ___nm) \
      AROS_LC2(STACK_OF(X509) *, X509_STORE_CTX_get1_certs, \
 AROS_LCA(X509_STORE_CTX *, (___xs), A0), \
 AROS_LCA(const X509_NAME *, (___nm), A1), \
     struct Library *, AMISSL_BASE_NAME, 3734, Amissl)

#define EVP_PKEY_CTX_get_operation(___ctx) \
      AROS_LC1(int, EVP_PKEY_CTX_get_operation, \
 AROS_LCA(EVP_PKEY_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 3735, Amissl)

#define d2i_ESS_SIGNING_CERT(___a, ___pp, ___length) \
      AROS_LC3(ESS_SIGNING_CERT *, d2i_ESS_SIGNING_CERT, \
 AROS_LCA(ESS_SIGNING_CERT **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___pp), A1), \
 AROS_LCA(long, (___length), D0), \
     struct Library *, AMISSL_BASE_NAME, 3736, Amissl)

#define TS_CONF_set_ordering(___conf, ___section, ___ctx) \
      AROS_LC3(int, TS_CONF_set_ordering, \
 AROS_LCA(CONF *, (___conf), A0), \
 AROS_LCA(const char *, (___section), A1), \
 AROS_LCA(TS_RESP_CTX *, (___ctx), A2), \
     struct Library *, AMISSL_BASE_NAME, 3737, Amissl)

#define EVP_PBE_alg_add_type(___pbe_type, ___pbe_nid, ___cipher_nid, ___md_nid, ___keygen) \
      AROS_LC5(int, EVP_PBE_alg_add_type, \
 AROS_LCA(int, (___pbe_type), D0), \
 AROS_LCA(int, (___pbe_nid), D1), \
 AROS_LCA(int, (___cipher_nid), D2), \
 AROS_LCA(int, (___md_nid), D3), \
 AROS_LCA(EVP_PBE_KEYGEN *, (___keygen), A0), \
     struct Library *, AMISSL_BASE_NAME, 3738, Amissl)

#define TS_REQ_set_version(___a, ___version) \
      AROS_LC2(int, TS_REQ_set_version, \
 AROS_LCA(TS_REQ *, (___a), A0), \
 AROS_LCA(long, (___version), D0), \
     struct Library *, AMISSL_BASE_NAME, 3739, Amissl)

#define EVP_PKEY_get0(___pkey) \
      AROS_LC1(void *, EVP_PKEY_get0, \
 AROS_LCA(const EVP_PKEY *, (___pkey), A0), \
     struct Library *, AMISSL_BASE_NAME, 3740, Amissl)

#define BIO_asn1_set_suffix(___b, ___suffix, ___suffix_free) \
      AROS_LC3(int, BIO_asn1_set_suffix, \
 AROS_LCA(BIO *, (___b), A0), \
 AROS_LCA(asn1_ps_func *, (___suffix), A1), \
 AROS_LCA(asn1_ps_func *, (___suffix_free), A2), \
     struct Library *, AMISSL_BASE_NAME, 3741, Amissl)

#define i2d_TS_STATUS_INFO(___a, ___pp) \
      AROS_LC2(int, i2d_TS_STATUS_INFO, \
 AROS_LCA(const TS_STATUS_INFO *, (___a), A0), \
 AROS_LCA(unsigned char **, (___pp), A1), \
     struct Library *, AMISSL_BASE_NAME, 3742, Amissl)

#define EVP_MD_do_all(___fn, ___arg) \
      AROS_LC2(void, EVP_MD_do_all, \
 AROS_LCA(void (*)(const EVP_MD *ciph,const char *from,const char *to,void *x), (___fn), A0), \
 AROS_LCA(void *, (___arg), A1), \
     struct Library *, AMISSL_BASE_NAME, 3743, Amissl)

#define TS_TST_INFO_set_accuracy(___a, ___accuracy) \
      AROS_LC2(int, TS_TST_INFO_set_accuracy, \
 AROS_LCA(TS_TST_INFO *, (___a), A0), \
 AROS_LCA(TS_ACCURACY *, (___accuracy), A1), \
     struct Library *, AMISSL_BASE_NAME, 3744, Amissl)

#define PKCS7_add_attrib_content_type(___si, ___coid) \
      AROS_LC2(int, PKCS7_add_attrib_content_type, \
 AROS_LCA(PKCS7_SIGNER_INFO *, (___si), A0), \
 AROS_LCA(ASN1_OBJECT *, (___coid), A1), \
     struct Library *, AMISSL_BASE_NAME, 3745, Amissl)

#define EVP_PKEY_meth_add0(___pmeth) \
      AROS_LC1(int, EVP_PKEY_meth_add0, \
 AROS_LCA(const EVP_PKEY_METHOD *, (___pmeth), A0), \
     struct Library *, AMISSL_BASE_NAME, 3746, Amissl)

#define TS_TST_INFO_set_tsa(___a, ___tsa) \
      AROS_LC2(int, TS_TST_INFO_set_tsa, \
 AROS_LCA(TS_TST_INFO *, (___a), A0), \
 AROS_LCA(GENERAL_NAME *, (___tsa), A1), \
     struct Library *, AMISSL_BASE_NAME, 3747, Amissl)

#define EVP_PKEY_meth_new(___id, ___flags) \
      AROS_LC2(EVP_PKEY_METHOD *, EVP_PKEY_meth_new, \
 AROS_LCA(int, (___id), D0), \
 AROS_LCA(int, (___flags), D1), \
     struct Library *, AMISSL_BASE_NAME, 3748, Amissl)

#define TS_CONF_set_accuracy(___conf, ___section, ___ctx) \
      AROS_LC3(int, TS_CONF_set_accuracy, \
 AROS_LCA(CONF *, (___conf), A0), \
 AROS_LCA(const char *, (___section), A1), \
 AROS_LCA(TS_RESP_CTX *, (___ctx), A2), \
     struct Library *, AMISSL_BASE_NAME, 3749, Amissl)

#define ASN1_PCTX_set_oid_flags(___p, ___flags) \
      AROS_LC2(void, ASN1_PCTX_set_oid_flags, \
 AROS_LCA(ASN1_PCTX *, (___p), A0), \
 AROS_LCA(unsigned long, (___flags), D0), \
     struct Library *, AMISSL_BASE_NAME, 3750, Amissl)

#define ESS_SIGNING_CERT_dup(___a) \
      AROS_LC1(ESS_SIGNING_CERT *, ESS_SIGNING_CERT_dup, \
 AROS_LCA(const ESS_SIGNING_CERT *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 3751, Amissl)

#define d2i_TS_REQ_bio(___fp, ___a) \
      AROS_LC2(TS_REQ *, d2i_TS_REQ_bio, \
 AROS_LCA(BIO *, (___fp), A0), \
 AROS_LCA(TS_REQ **, (___a), A1), \
     struct Library *, AMISSL_BASE_NAME, 3752, Amissl)

#define X509_time_adj_ex(___s, ___offset_day, ___offset_sec, ___t) \
      AROS_LC4(ASN1_TIME *, X509_time_adj_ex, \
 AROS_LCA(ASN1_TIME *, (___s), A0), \
 AROS_LCA(int, (___offset_day), D0), \
 AROS_LCA(long, (___offset_sec), D1), \
 AROS_LCA(time_t *, (___t), A1), \
     struct Library *, AMISSL_BASE_NAME, 3753, Amissl)

#define TS_RESP_CTX_add_flags(___ctx, ___flags) \
      AROS_LC2(void, TS_RESP_CTX_add_flags, \
 AROS_LCA(TS_RESP_CTX *, (___ctx), A0), \
 AROS_LCA(int, (___flags), D0), \
     struct Library *, AMISSL_BASE_NAME, 3754, Amissl)

#define d2i_TS_STATUS_INFO(___a, ___pp, ___length) \
      AROS_LC3(TS_STATUS_INFO *, d2i_TS_STATUS_INFO, \
 AROS_LCA(TS_STATUS_INFO **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___pp), A1), \
 AROS_LCA(long, (___length), D0), \
     struct Library *, AMISSL_BASE_NAME, 3755, Amissl)

#define TS_MSG_IMPRINT_set_msg(___a, ___d, ___len) \
      AROS_LC3(int, TS_MSG_IMPRINT_set_msg, \
 AROS_LCA(TS_MSG_IMPRINT *, (___a), A0), \
 AROS_LCA(unsigned char *, (___d), A1), \
 AROS_LCA(int, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 3756, Amissl)

#define BIO_asn1_get_suffix(___b, ___psuffix, ___psuffix_free) \
      AROS_LC3(int, BIO_asn1_get_suffix, \
 AROS_LCA(BIO *, (___b), A0), \
 AROS_LCA(asn1_ps_func **, (___psuffix), A1), \
 AROS_LCA(asn1_ps_func **, (___psuffix_free), A2), \
     struct Library *, AMISSL_BASE_NAME, 3757, Amissl)

#define TS_REQ_free(___a) \
      AROS_LC1(void, TS_REQ_free, \
 AROS_LCA(TS_REQ *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 3758, Amissl)

#define EVP_PKEY_meth_free(___pmeth) \
      AROS_LC1(void, EVP_PKEY_meth_free, \
 AROS_LCA(EVP_PKEY_METHOD *, (___pmeth), A0), \
     struct Library *, AMISSL_BASE_NAME, 3759, Amissl)

#define TS_REQ_get_exts(___a) \
      AROS_LC1(STACK_OF(X509_EXTENSION) *, TS_REQ_get_exts, \
 AROS_LCA(TS_REQ *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 3760, Amissl)

#define TS_RESP_CTX_set_clock_precision_digits(___ctx, ___clock_precision_digits) \
      AROS_LC2(int, TS_RESP_CTX_set_clock_precision_digits, \
 AROS_LCA(TS_RESP_CTX *, (___ctx), A0), \
 AROS_LCA(unsigned, (___clock_precision_digits), D0), \
     struct Library *, AMISSL_BASE_NAME, 3761, Amissl)

#define TS_RESP_CTX_add_failure_info(___ctx, ___failure) \
      AROS_LC2(int, TS_RESP_CTX_add_failure_info, \
 AROS_LCA(TS_RESP_CTX *, (___ctx), A0), \
 AROS_LCA(int, (___failure), D0), \
     struct Library *, AMISSL_BASE_NAME, 3762, Amissl)

#define i2d_TS_RESP_bio(___fp, ___a) \
      AROS_LC2(int, i2d_TS_RESP_bio, \
 AROS_LCA(BIO *, (___fp), A0), \
 AROS_LCA(const TS_RESP *, (___a), A1), \
     struct Library *, AMISSL_BASE_NAME, 3763, Amissl)

#define EVP_PKEY_CTX_get0_peerkey(___ctx) \
      AROS_LC1(EVP_PKEY *, EVP_PKEY_CTX_get0_peerkey, \
 AROS_LCA(EVP_PKEY_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 3764, Amissl)

#define TS_REQ_new() \
      AROS_LC0(TS_REQ *, TS_REQ_new, \
     struct Library *, AMISSL_BASE_NAME, 3765, Amissl)

#define TS_MSG_IMPRINT_new() \
      AROS_LC0(TS_MSG_IMPRINT *, TS_MSG_IMPRINT_new, \
     struct Library *, AMISSL_BASE_NAME, 3766, Amissl)

#define EVP_PKEY_meth_find(___type) \
      AROS_LC1(const EVP_PKEY_METHOD *, EVP_PKEY_meth_find, \
 AROS_LCA(int, (___type), A0), \
     struct Library *, AMISSL_BASE_NAME, 3767, Amissl)

#define EVP_PKEY_get_id(___pkey) \
      AROS_LC1(int, EVP_PKEY_get_id, \
 AROS_LCA(const EVP_PKEY *, (___pkey), A0), \
     struct Library *, AMISSL_BASE_NAME, 3768, Amissl)

#define TS_TST_INFO_set_serial(___a, ___serial) \
      AROS_LC2(int, TS_TST_INFO_set_serial, \
 AROS_LCA(TS_TST_INFO *, (___a), A0), \
 AROS_LCA(const ASN1_INTEGER *, (___serial), A1), \
     struct Library *, AMISSL_BASE_NAME, 3769, Amissl)

#define a2i_GENERAL_NAME(___out, ___method, ___ctx, ___gen_type, ___value, ___is_nc) \
      AROS_LC6(GENERAL_NAME *, a2i_GENERAL_NAME, \
 AROS_LCA(GENERAL_NAME *, (___out), A0), \
 AROS_LCA(const X509V3_EXT_METHOD *, (___method), A1), \
 AROS_LCA(X509V3_CTX *, (___ctx), A2), \
 AROS_LCA(int, (___gen_type), D0), \
 AROS_LCA(const char *, (___value), A3), \
 AROS_LCA(int, (___is_nc), D1), \
     struct Library *, AMISSL_BASE_NAME, 3770, Amissl)

#define TS_CONF_set_crypto_device(___conf, ___section, ___device) \
      AROS_LC3(int, TS_CONF_set_crypto_device, \
 AROS_LCA(CONF *, (___conf), A0), \
 AROS_LCA(const char *, (___section), A1), \
 AROS_LCA(const char *, (___device), A2), \
     struct Library *, AMISSL_BASE_NAME, 3771, Amissl)

#define EVP_PKEY_verify_init(___ctx) \
      AROS_LC1(int, EVP_PKEY_verify_init, \
 AROS_LCA(EVP_PKEY_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 3772, Amissl)

#define TS_CONF_set_policies(___conf, ___section, ___ctx) \
      AROS_LC3(int, TS_CONF_set_policies, \
 AROS_LCA(CONF *, (___conf), A0), \
 AROS_LCA(const char *, (___section), A1), \
 AROS_LCA(TS_RESP_CTX *, (___ctx), A2), \
     struct Library *, AMISSL_BASE_NAME, 3773, Amissl)

#define ASN1_PCTX_new() \
      AROS_LC0(ASN1_PCTX *, ASN1_PCTX_new, \
     struct Library *, AMISSL_BASE_NAME, 3774, Amissl)

#define ESS_CERT_ID_free(___a) \
      AROS_LC1(void, ESS_CERT_ID_free, \
 AROS_LCA(ESS_CERT_ID *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 3775, Amissl)

#define TS_MSG_IMPRINT_free(___a) \
      AROS_LC1(void, TS_MSG_IMPRINT_free, \
 AROS_LCA(TS_MSG_IMPRINT *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 3776, Amissl)

#define TS_VERIFY_CTX_init(___ctx) \
      AROS_LC1(void, TS_VERIFY_CTX_init, \
 AROS_LCA(TS_VERIFY_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 3777, Amissl)

#define PKCS7_stream(___boundary, ___p7) \
      AROS_LC2(int, PKCS7_stream, \
 AROS_LCA(unsigned char ***, (___boundary), A0), \
 AROS_LCA(PKCS7 *, (___p7), A1), \
     struct Library *, AMISSL_BASE_NAME, 3778, Amissl)

#define TS_RESP_CTX_set_certs(___ctx, ___certs) \
      AROS_LC2(int, TS_RESP_CTX_set_certs, \
 AROS_LCA(TS_RESP_CTX *, (___ctx), A0), \
 AROS_LCA(STACK_OF(X509) *, (___certs), A1), \
     struct Library *, AMISSL_BASE_NAME, 3779, Amissl)

#define TS_CONF_set_def_policy(___conf, ___section, ___policy, ___ctx) \
      AROS_LC4(int, TS_CONF_set_def_policy, \
 AROS_LCA(CONF *, (___conf), A0), \
 AROS_LCA(const char *, (___section), A1), \
 AROS_LCA(const char *, (___policy), A2), \
 AROS_LCA(TS_RESP_CTX *, (___ctx), A3), \
     struct Library *, AMISSL_BASE_NAME, 3780, Amissl)

#define ASN1_GENERALIZEDTIME_adj(___s, ___t, ___offset_day, ___offset_sec) \
      AROS_LC4(ASN1_GENERALIZEDTIME *, ASN1_GENERALIZEDTIME_adj, \
 AROS_LCA(ASN1_GENERALIZEDTIME *, (___s), A0), \
 AROS_LCA(time_t, (___t), D0), \
 AROS_LCA(int, (___offset_day), D1), \
 AROS_LCA(long, (___offset_sec), D2), \
     struct Library *, AMISSL_BASE_NAME, 3781, Amissl)

#define TS_ACCURACY_free(___a) \
      AROS_LC1(void, TS_ACCURACY_free, \
 AROS_LCA(TS_ACCURACY *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 3783, Amissl)

#define TS_RESP_get_tst_info(___a) \
      AROS_LC1(TS_TST_INFO *, TS_RESP_get_tst_info, \
 AROS_LCA(TS_RESP *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 3784, Amissl)

#define EVP_PKEY_derive_set_peer(___ctx, ___peer) \
      AROS_LC2(int, EVP_PKEY_derive_set_peer, \
 AROS_LCA(EVP_PKEY_CTX *, (___ctx), A0), \
 AROS_LCA(EVP_PKEY *, (___peer), A1), \
     struct Library *, AMISSL_BASE_NAME, 3785, Amissl)

#define PEM_read_bio_Parameters(___bp, ___x) \
      AROS_LC2(EVP_PKEY *, PEM_read_bio_Parameters, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(EVP_PKEY **, (___x), A1), \
     struct Library *, AMISSL_BASE_NAME, 3786, Amissl)

#define TS_CONF_set_clock_precision_digits(___conf, ___section, ___ctx) \
      AROS_LC3(int, TS_CONF_set_clock_precision_digits, \
 AROS_LCA(const CONF *, (___conf), A0), \
 AROS_LCA(const char *, (___section), A1), \
 AROS_LCA(TS_RESP_CTX *, (___ctx), A2), \
     struct Library *, AMISSL_BASE_NAME, 3787, Amissl)

#define ESS_ISSUER_SERIAL_dup(___a) \
      AROS_LC1(ESS_ISSUER_SERIAL *, ESS_ISSUER_SERIAL_dup, \
 AROS_LCA(const ESS_ISSUER_SERIAL *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 3788, Amissl)

#define TS_ACCURACY_get_micros(___a) \
      AROS_LC1(const ASN1_INTEGER *, TS_ACCURACY_get_micros, \
 AROS_LCA(const TS_ACCURACY *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 3789, Amissl)

#define ASN1_PCTX_get_str_flags(___p) \
      AROS_LC1(unsigned long, ASN1_PCTX_get_str_flags, \
 AROS_LCA(const ASN1_PCTX *, (___p), A0), \
     struct Library *, AMISSL_BASE_NAME, 3790, Amissl)

#define NAME_CONSTRAINTS_check(___x, ___nc) \
      AROS_LC2(int, NAME_CONSTRAINTS_check, \
 AROS_LCA(X509 *, (___x), A0), \
 AROS_LCA(NAME_CONSTRAINTS *, (___nc), A1), \
     struct Library *, AMISSL_BASE_NAME, 3791, Amissl)

#define ASN1_BIT_STRING_check(___a, ___flags, ___flags_len) \
      AROS_LC3(int, ASN1_BIT_STRING_check, \
 AROS_LCA(const ASN1_BIT_STRING *, (___a), A0), \
 AROS_LCA(const unsigned char *, (___flags), A1), \
 AROS_LCA(int, (___flags_len), D0), \
     struct Library *, AMISSL_BASE_NAME, 3792, Amissl)

#define X509_check_akid(___issuer, ___akid) \
      AROS_LC2(int, X509_check_akid, \
 AROS_LCA(const X509 *, (___issuer), A0), \
 AROS_LCA(const AUTHORITY_KEYID *, (___akid), A1), \
     struct Library *, AMISSL_BASE_NAME, 3793, Amissl)

#define ASN1_PCTX_free(___p) \
      AROS_LC1(void, ASN1_PCTX_free, \
 AROS_LCA(ASN1_PCTX *, (___p), A0), \
     struct Library *, AMISSL_BASE_NAME, 3794, Amissl)

#define PEM_write_bio_ASN1_stream(___out, ___val, ___in, ___flags, ___hdr, ___it) \
      AROS_LC6(int, PEM_write_bio_ASN1_stream, \
 AROS_LCA(BIO *, (___out), A0), \
 AROS_LCA(ASN1_VALUE *, (___val), A1), \
 AROS_LCA(BIO *, (___in), A2), \
 AROS_LCA(int, (___flags), D0), \
 AROS_LCA(const char *, (___hdr), A3), \
 AROS_LCA(const ASN1_ITEM *, (___it), D1), \
     struct Library *, AMISSL_BASE_NAME, 3795, Amissl)

#define i2d_ASN1_bio_stream(___out, ___val, ___in, ___flags, ___it) \
      AROS_LC5(int, i2d_ASN1_bio_stream, \
 AROS_LCA(BIO *, (___out), A0), \
 AROS_LCA(ASN1_VALUE *, (___val), A1), \
 AROS_LCA(BIO *, (___in), A2), \
 AROS_LCA(int, (___flags), D0), \
 AROS_LCA(const ASN1_ITEM *, (___it), A3), \
     struct Library *, AMISSL_BASE_NAME, 3796, Amissl)

#define TS_X509_ALGOR_print_bio(___bio, ___alg) \
      AROS_LC2(int, TS_X509_ALGOR_print_bio, \
 AROS_LCA(BIO *, (___bio), A0), \
 AROS_LCA(const X509_ALGOR *, (___alg), A1), \
     struct Library *, AMISSL_BASE_NAME, 3797, Amissl)

#define EVP_PKEY_meth_set_cleanup(___pmeth, ___cleanup) \
      AROS_LC2(void, EVP_PKEY_meth_set_cleanup, \
 AROS_LCA(EVP_PKEY_METHOD *, (___pmeth), A0), \
 AROS_LCA(void (*)(EVP_PKEY_CTX *ctx), (___cleanup), A1), \
     struct Library *, AMISSL_BASE_NAME, 3798, Amissl)

#define EVP_PKEY_asn1_free(___ameth) \
      AROS_LC1(void, EVP_PKEY_asn1_free, \
 AROS_LCA(EVP_PKEY_ASN1_METHOD *, (___ameth), A0), \
     struct Library *, AMISSL_BASE_NAME, 3799, Amissl)

#define ESS_SIGNING_CERT_free(___a) \
      AROS_LC1(void, ESS_SIGNING_CERT_free, \
 AROS_LCA(ESS_SIGNING_CERT *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 3800, Amissl)

#define TS_TST_INFO_set_msg_imprint(___a, ___msg_imprint) \
      AROS_LC2(int, TS_TST_INFO_set_msg_imprint, \
 AROS_LCA(TS_TST_INFO *, (___a), A0), \
 AROS_LCA(TS_MSG_IMPRINT *, (___msg_imprint), A1), \
     struct Library *, AMISSL_BASE_NAME, 3801, Amissl)

#define GENERAL_NAME_cmp(___a, ___b) \
      AROS_LC2(int, GENERAL_NAME_cmp, \
 AROS_LCA(GENERAL_NAME *, (___a), A0), \
 AROS_LCA(GENERAL_NAME *, (___b), A1), \
     struct Library *, AMISSL_BASE_NAME, 3802, Amissl)

#define d2i_ASN1_SET_ANY(___a, ___pp, ___length) \
      AROS_LC3(ASN1_SEQUENCE_ANY *, d2i_ASN1_SET_ANY, \
 AROS_LCA(ASN1_SEQUENCE_ANY **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___pp), A1), \
 AROS_LCA(long, (___length), D0), \
     struct Library *, AMISSL_BASE_NAME, 3803, Amissl)

#define d2i_ASN1_SEQUENCE_ANY(___a, ___pp, ___length) \
      AROS_LC3(ASN1_SEQUENCE_ANY *, d2i_ASN1_SEQUENCE_ANY, \
 AROS_LCA(ASN1_SEQUENCE_ANY **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___pp), A1), \
 AROS_LCA(long, (___length), D0), \
     struct Library *, AMISSL_BASE_NAME, 3805, Amissl)

#define GENERAL_NAME_get0_otherName(___gen, ___poid, ___pvalue) \
      AROS_LC3(int, GENERAL_NAME_get0_otherName, \
 AROS_LCA(const GENERAL_NAME *, (___gen), A0), \
 AROS_LCA(ASN1_OBJECT **, (___poid), A1), \
 AROS_LCA(ASN1_TYPE **, (___pvalue), A2), \
     struct Library *, AMISSL_BASE_NAME, 3806, Amissl)

#define d2i_ESS_CERT_ID(___a, ___pp, ___length) \
      AROS_LC3(ESS_CERT_ID *, d2i_ESS_CERT_ID, \
 AROS_LCA(ESS_CERT_ID **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___pp), A1), \
 AROS_LCA(long, (___length), D0), \
     struct Library *, AMISSL_BASE_NAME, 3807, Amissl)

#define OBJ_find_sigid_algs(___signid, ___pdig_nid, ___ppkey_nid) \
      AROS_LC3(int, OBJ_find_sigid_algs, \
 AROS_LCA(int, (___signid), D0), \
 AROS_LCA(int *, (___pdig_nid), A0), \
 AROS_LCA(int *, (___ppkey_nid), A1), \
     struct Library *, AMISSL_BASE_NAME, 3808, Amissl)

#define EVP_PKEY_meth_set_keygen(___pmeth, ___keygen_init, ___keygen) \
      AROS_LC3(void, EVP_PKEY_meth_set_keygen, \
 AROS_LCA(EVP_PKEY_METHOD *, (___pmeth), A0), \
 AROS_LCA(int (*)(EVP_PKEY_CTX *ctx), (___keygen_init), A1), \
 AROS_LCA(int (*)(EVP_PKEY_CTX *ctx,EVP_PKEY *pkey), (___keygen), A2), \
     struct Library *, AMISSL_BASE_NAME, 3809, Amissl)

#define PKCS5_PBKDF2_HMAC(___pass, ___passlen, ___salt, ___saltlen, ___iter, ___digest, ___keylen, ___out) \
      AROS_LC8(int, PKCS5_PBKDF2_HMAC, \
 AROS_LCA(const char *, (___pass), A0), \
 AROS_LCA(int, (___passlen), D0), \
 AROS_LCA(const unsigned char *, (___salt), A1), \
 AROS_LCA(int, (___saltlen), D1), \
 AROS_LCA(int, (___iter), D2), \
 AROS_LCA(const EVP_MD *, (___digest), A2), \
 AROS_LCA(int, (___keylen), D3), \
 AROS_LCA(unsigned char *, (___out), A3), \
     struct Library *, AMISSL_BASE_NAME, 3810, Amissl)

#define EVP_PKEY_paramgen(___ctx, ___ppkey) \
      AROS_LC2(int, EVP_PKEY_paramgen, \
 AROS_LCA(EVP_PKEY_CTX *, (___ctx), A0), \
 AROS_LCA(EVP_PKEY **, (___ppkey), A1), \
     struct Library *, AMISSL_BASE_NAME, 3811, Amissl)

#define EVP_PKEY_meth_set_paramgen(___pmeth, ___paramgen_init, ___paramgen) \
      AROS_LC3(void, EVP_PKEY_meth_set_paramgen, \
 AROS_LCA(EVP_PKEY_METHOD *, (___pmeth), A0), \
 AROS_LCA(int (*)(EVP_PKEY_CTX *ctx), (___paramgen_init), A1), \
 AROS_LCA(int (*)(EVP_PKEY_CTX *ctx,EVP_PKEY *pkey), (___paramgen), A2), \
     struct Library *, AMISSL_BASE_NAME, 3812, Amissl)

#define BIO_new_PKCS7(___out, ___p7) \
      AROS_LC2(BIO *, BIO_new_PKCS7, \
 AROS_LCA(BIO *, (___out), A0), \
 AROS_LCA(PKCS7 *, (___p7), A1), \
     struct Library *, AMISSL_BASE_NAME, 3813, Amissl)

#define EVP_PKEY_verify_recover(___ctx, ___rout, ___routlen, ___sig, ___siglen) \
      AROS_LC5(int, EVP_PKEY_verify_recover, \
 AROS_LCA(EVP_PKEY_CTX *, (___ctx), A0), \
 AROS_LCA(unsigned char *, (___rout), A1), \
 AROS_LCA(size_t *, (___routlen), A2), \
 AROS_LCA(const unsigned char *, (___sig), A3), \
 AROS_LCA(size_t, (___siglen), D0), \
     struct Library *, AMISSL_BASE_NAME, 3814, Amissl)

#define TS_ext_print_bio(___bio, ___extensions) \
      AROS_LC2(int, TS_ext_print_bio, \
 AROS_LCA(BIO *, (___bio), A0), \
 AROS_LCA(const STACK_OF(X509_EXTENSION) *, (___extensions), A1), \
     struct Library *, AMISSL_BASE_NAME, 3815, Amissl)

#define TS_ASN1_INTEGER_print_bio(___bio, ___num) \
      AROS_LC2(int, TS_ASN1_INTEGER_print_bio, \
 AROS_LCA(BIO *, (___bio), A0), \
 AROS_LCA(const ASN1_INTEGER *, (___num), A1), \
     struct Library *, AMISSL_BASE_NAME, 3816, Amissl)

#define EVP_PKEY_set_type(___pkey, ___type) \
      AROS_LC2(int, EVP_PKEY_set_type, \
 AROS_LCA(EVP_PKEY *, (___pkey), A0), \
 AROS_LCA(int, (___type), D0), \
     struct Library *, AMISSL_BASE_NAME, 3819, Amissl)

#define TS_ACCURACY_set_micros(___a, ___micros) \
      AROS_LC2(int, TS_ACCURACY_set_micros, \
 AROS_LCA(TS_ACCURACY *, (___a), A0), \
 AROS_LCA(const ASN1_INTEGER *, (___micros), A1), \
     struct Library *, AMISSL_BASE_NAME, 3820, Amissl)

#define TS_REQ_to_TS_VERIFY_CTX(___req, ___ctx) \
      AROS_LC2(TS_VERIFY_CTX *, TS_REQ_to_TS_VERIFY_CTX, \
 AROS_LCA(TS_REQ *, (___req), A0), \
 AROS_LCA(TS_VERIFY_CTX *, (___ctx), A1), \
     struct Library *, AMISSL_BASE_NAME, 3821, Amissl)

#define EVP_PKEY_meth_set_copy(___pmeth, ___copy) \
      AROS_LC2(void, EVP_PKEY_meth_set_copy, \
 AROS_LCA(EVP_PKEY_METHOD *, (___pmeth), A0), \
 AROS_LCA(int (*)(EVP_PKEY_CTX *dst,const EVP_PKEY_CTX *src), (___copy), A1), \
     struct Library *, AMISSL_BASE_NAME, 3822, Amissl)

#define ASN1_PCTX_set_cert_flags(___p, ___flags) \
      AROS_LC2(void, ASN1_PCTX_set_cert_flags, \
 AROS_LCA(ASN1_PCTX *, (___p), A0), \
 AROS_LCA(unsigned long, (___flags), D0), \
     struct Library *, AMISSL_BASE_NAME, 3823, Amissl)

#define TS_TST_INFO_get_ext(___a, ___loc) \
      AROS_LC2(X509_EXTENSION *, TS_TST_INFO_get_ext, \
 AROS_LCA(TS_TST_INFO *, (___a), A0), \
 AROS_LCA(int, (___loc), D0), \
     struct Library *, AMISSL_BASE_NAME, 3824, Amissl)

#define EVP_PKEY_asn1_set_ctrl(___ameth, ___pkey_ctrl) \
      AROS_LC2(void, EVP_PKEY_asn1_set_ctrl, \
 AROS_LCA(EVP_PKEY_ASN1_METHOD *, (___ameth), A0), \
 AROS_LCA(int (*)(EVP_PKEY *pkey,int op,long arg1,void *arg2), (___pkey_ctrl), A1), \
     struct Library *, AMISSL_BASE_NAME, 3825, Amissl)

#define TS_TST_INFO_get_ext_by_critical(___a, ___crit, ___lastpos) \
      AROS_LC3(int, TS_TST_INFO_get_ext_by_critical, \
 AROS_LCA(TS_TST_INFO *, (___a), A0), \
 AROS_LCA(int, (___crit), D0), \
 AROS_LCA(int, (___lastpos), D1), \
     struct Library *, AMISSL_BASE_NAME, 3826, Amissl)

#define EVP_PKEY_CTX_new_id(___id, ___e) \
      AROS_LC2(EVP_PKEY_CTX *, EVP_PKEY_CTX_new_id, \
 AROS_LCA(int, (___id), D0), \
 AROS_LCA(ENGINE *, (___e), A0), \
     struct Library *, AMISSL_BASE_NAME, 3827, Amissl)

#define TS_REQ_get_ext_by_OBJ(___a, ___obj, ___lastpos) \
      AROS_LC3(int, TS_REQ_get_ext_by_OBJ, \
 AROS_LCA(TS_REQ *, (___a), A0), \
 AROS_LCA(const ASN1_OBJECT *, (___obj), A1), \
 AROS_LCA(int, (___lastpos), D0), \
     struct Library *, AMISSL_BASE_NAME, 3828, Amissl)

#define TS_CONF_set_signer_cert(___conf, ___section, ___cert, ___ctx) \
      AROS_LC4(int, TS_CONF_set_signer_cert, \
 AROS_LCA(CONF *, (___conf), A0), \
 AROS_LCA(const char *, (___section), A1), \
 AROS_LCA(const char *, (___cert), A2), \
 AROS_LCA(TS_RESP_CTX *, (___ctx), A3), \
     struct Library *, AMISSL_BASE_NAME, 3829, Amissl)

#define X509_NAME_hash_old(___x) \
      AROS_LC1(unsigned long, X509_NAME_hash_old, \
 AROS_LCA(const X509_NAME *, (___x), A0), \
     struct Library *, AMISSL_BASE_NAME, 3830, Amissl)

#define ASN1_TIME_set_string(___s, ___str) \
      AROS_LC2(int, ASN1_TIME_set_string, \
 AROS_LCA(ASN1_TIME *, (___s), A0), \
 AROS_LCA(const char *, (___str), A1), \
     struct Library *, AMISSL_BASE_NAME, 3831, Amissl)

#define EVP_MD_get_flags(___md) \
      AROS_LC1(unsigned long, EVP_MD_get_flags, \
 AROS_LCA(const EVP_MD *, (___md), A0), \
     struct Library *, AMISSL_BASE_NAME, 3832, Amissl)

#define TS_RESP_CTX_free(___ctx) \
      AROS_LC1(void, TS_RESP_CTX_free, \
 AROS_LCA(TS_RESP_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 3833, Amissl)

#define OSSL_HTTP_REQ_CTX_add1_header(___rctx, ___name, ___value) \
      AROS_LC3(int, OSSL_HTTP_REQ_CTX_add1_header, \
 AROS_LCA(OSSL_HTTP_REQ_CTX *, (___rctx), A0), \
 AROS_LCA(const char *, (___name), A1), \
 AROS_LCA(const char *, (___value), A2), \
     struct Library *, AMISSL_BASE_NAME, 3834, Amissl)

#define OBSOLETE_OCSP_REQ_CTX_set1_req(___rctx, ___req) \
      AROS_LC2(int, OBSOLETE_OCSP_REQ_CTX_set1_req, \
 AROS_LCA(OSSL_HTTP_REQ_CTX *, (___rctx), A0), \
 AROS_LCA(OCSP_REQUEST *, (___req), A1), \
     struct Library *, AMISSL_BASE_NAME, 3835, Amissl)

#define X509_STORE_set_verify_cb(___xs, ___verify_cb) \
      AROS_LC2(void, X509_STORE_set_verify_cb, \
 AROS_LCA(X509_STORE *, (___xs), A0), \
 AROS_LCA(X509_STORE_CTX_verify_cb, (___verify_cb), A1), \
     struct Library *, AMISSL_BASE_NAME, 3836, Amissl)

#define X509_STORE_CTX_get0_current_crl(___ctx) \
      AROS_LC1(X509_CRL *, X509_STORE_CTX_get0_current_crl, \
 AROS_LCA(const X509_STORE_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 3837, Amissl)

#define X509_STORE_CTX_get0_parent_ctx(___ctx) \
      AROS_LC1(X509_STORE_CTX *, X509_STORE_CTX_get0_parent_ctx, \
 AROS_LCA(const X509_STORE_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 3838, Amissl)

#define X509_STORE_CTX_get0_current_issuer(___ctx) \
      AROS_LC1(X509 *, X509_STORE_CTX_get0_current_issuer, \
 AROS_LCA(const X509_STORE_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 3839, Amissl)

#define EVP_CIPHER_CTX_copy(___out, ___in) \
      AROS_LC2(int, EVP_CIPHER_CTX_copy, \
 AROS_LCA(EVP_CIPHER_CTX *, (___out), A0), \
 AROS_LCA(const EVP_CIPHER_CTX *, (___in), A1), \
     struct Library *, AMISSL_BASE_NAME, 3840, Amissl)

#define UI_method_get_prompt_constructor(___method) \
      AROS_LC1(char *(*)(UI*, const char*, const char*), UI_method_get_prompt_constructor, \
 AROS_LCA(const UI_METHOD *, (___method), A0), \
     struct Library *, AMISSL_BASE_NAME, 3841, Amissl)

#define UI_method_set_prompt_constructor(___method, ___prompt_constructor) \
      AROS_LC2(int, UI_method_set_prompt_constructor, \
 AROS_LCA(UI_METHOD *, (___method), A0), \
 AROS_LCA(char *(*)(UI* ui,const char* object_desc,const char* object_name), (___prompt_constructor), A1), \
     struct Library *, AMISSL_BASE_NAME, 3842, Amissl)

#define EVP_read_pw_string_min(___buf, ___minlen, ___maxlen, ___prompt, ___verify) \
      AROS_LC5(int, EVP_read_pw_string_min, \
 AROS_LCA(char *, (___buf), A0), \
 AROS_LCA(int, (___minlen), D0), \
 AROS_LCA(int, (___maxlen), D1), \
 AROS_LCA(const char *, (___prompt), A1), \
 AROS_LCA(int, (___verify), D2), \
     struct Library *, AMISSL_BASE_NAME, 3843, Amissl)

#define CRYPTO_cts128_encrypt(___in, ___out, ___len, ___key, ___ivec, ___cbc) \
      AROS_LC6(size_t, CRYPTO_cts128_encrypt, \
 AROS_LCA(const unsigned char *, (___in), A0), \
 AROS_LCA(unsigned char *, (___out), A1), \
 AROS_LCA(size_t, (___len), D0), \
 AROS_LCA(const void *, (___key), A2), \
 AROS_LCA(unsigned char *, (___ivec), A3), \
 AROS_LCA(cbc128_f, (___cbc), D1), \
     struct Library *, AMISSL_BASE_NAME, 3844, Amissl)

#define CRYPTO_cts128_decrypt_block(___in, ___out, ___len, ___key, ___ivec, ___block) \
      AROS_LC6(size_t, CRYPTO_cts128_decrypt_block, \
 AROS_LCA(const unsigned char *, (___in), A0), \
 AROS_LCA(unsigned char *, (___out), A1), \
 AROS_LCA(size_t, (___len), D0), \
 AROS_LCA(const void *, (___key), A2), \
 AROS_LCA(unsigned char *, (___ivec), A3), \
 AROS_LCA(block128_f, (___block), D1), \
     struct Library *, AMISSL_BASE_NAME, 3845, Amissl)

#define CRYPTO_cfb128_1_encrypt(___in, ___out, ___bits, ___key, ___ivec, ___num, ___enc, ___block) \
      AROS_LC8(void, CRYPTO_cfb128_1_encrypt, \
 AROS_LCA(const unsigned char *, (___in), A0), \
 AROS_LCA(unsigned char *, (___out), A1), \
 AROS_LCA(size_t, (___bits), D0), \
 AROS_LCA(const void *, (___key), A2), \
 AROS_LCA(unsigned char *, (___ivec), A3), \
 AROS_LCA(int *, (___num), D1), \
 AROS_LCA(int, (___enc), D2), \
 AROS_LCA(block128_f, (___block), D3), \
     struct Library *, AMISSL_BASE_NAME, 3846, Amissl)

#define CRYPTO_cbc128_encrypt(___in, ___out, ___len, ___key, ___ivec, ___block) \
      AROS_LC6(void, CRYPTO_cbc128_encrypt, \
 AROS_LCA(const unsigned char *, (___in), A0), \
 AROS_LCA(unsigned char *, (___out), A1), \
 AROS_LCA(size_t, (___len), D0), \
 AROS_LCA(const void *, (___key), A2), \
 AROS_LCA(unsigned char *, (___ivec), A3), \
 AROS_LCA(block128_f, (___block), D1), \
     struct Library *, AMISSL_BASE_NAME, 3847, Amissl)

#define CRYPTO_ctr128_encrypt(___in, ___out, ___len, ___key, ___ivec, ___ecount_buf, ___num, ___block) \
      AROS_LC8(void, CRYPTO_ctr128_encrypt, \
 AROS_LCA(const unsigned char *, (___in), A0), \
 AROS_LCA(unsigned char *, (___out), A1), \
 AROS_LCA(size_t, (___len), D0), \
 AROS_LCA(const void *, (___key), A2), \
 AROS_LCA(unsigned char *, (___ivec), A3), \
 AROS_LCA(unsigned char *, (___ecount_buf), D1), \
 AROS_LCA(unsigned int *, (___num), D2), \
 AROS_LCA(block128_f, (___block), D3), \
     struct Library *, AMISSL_BASE_NAME, 3848, Amissl)

#define CRYPTO_ofb128_encrypt(___in, ___out, ___len, ___key, ___ivec, ___num, ___block) \
      AROS_LC7(void, CRYPTO_ofb128_encrypt, \
 AROS_LCA(const unsigned char *, (___in), A0), \
 AROS_LCA(unsigned char *, (___out), A1), \
 AROS_LCA(size_t, (___len), D0), \
 AROS_LCA(const void *, (___key), A2), \
 AROS_LCA(unsigned char *, (___ivec), A3), \
 AROS_LCA(int *, (___num), D1), \
 AROS_LCA(block128_f, (___block), D2), \
     struct Library *, AMISSL_BASE_NAME, 3849, Amissl)

#define CRYPTO_cts128_decrypt(___in, ___out, ___len, ___key, ___ivec, ___cbc) \
      AROS_LC6(size_t, CRYPTO_cts128_decrypt, \
 AROS_LCA(const unsigned char *, (___in), A0), \
 AROS_LCA(unsigned char *, (___out), A1), \
 AROS_LCA(size_t, (___len), D0), \
 AROS_LCA(const void *, (___key), A2), \
 AROS_LCA(unsigned char *, (___ivec), A3), \
 AROS_LCA(cbc128_f, (___cbc), D1), \
     struct Library *, AMISSL_BASE_NAME, 3850, Amissl)

#define CRYPTO_cts128_encrypt_block(___in, ___out, ___len, ___key, ___ivec, ___block) \
      AROS_LC6(size_t, CRYPTO_cts128_encrypt_block, \
 AROS_LCA(const unsigned char *, (___in), A0), \
 AROS_LCA(unsigned char *, (___out), A1), \
 AROS_LCA(size_t, (___len), D0), \
 AROS_LCA(const void *, (___key), A2), \
 AROS_LCA(unsigned char *, (___ivec), A3), \
 AROS_LCA(block128_f, (___block), D1), \
     struct Library *, AMISSL_BASE_NAME, 3851, Amissl)

#define CRYPTO_cbc128_decrypt(___in, ___out, ___len, ___key, ___ivec, ___block) \
      AROS_LC6(void, CRYPTO_cbc128_decrypt, \
 AROS_LCA(const unsigned char *, (___in), A0), \
 AROS_LCA(unsigned char *, (___out), A1), \
 AROS_LCA(size_t, (___len), D0), \
 AROS_LCA(const void *, (___key), A2), \
 AROS_LCA(unsigned char *, (___ivec), A3), \
 AROS_LCA(block128_f, (___block), D1), \
     struct Library *, AMISSL_BASE_NAME, 3852, Amissl)

#define CRYPTO_cfb128_encrypt(___in, ___out, ___len, ___key, ___ivec, ___num, ___enc, ___block) \
      AROS_LC8(void, CRYPTO_cfb128_encrypt, \
 AROS_LCA(const unsigned char *, (___in), A0), \
 AROS_LCA(unsigned char *, (___out), A1), \
 AROS_LCA(size_t, (___len), D0), \
 AROS_LCA(const void *, (___key), A2), \
 AROS_LCA(unsigned char *, (___ivec), A3), \
 AROS_LCA(int *, (___num), D1), \
 AROS_LCA(int, (___enc), D2), \
 AROS_LCA(block128_f, (___block), D3), \
     struct Library *, AMISSL_BASE_NAME, 3853, Amissl)

#define CRYPTO_cfb128_8_encrypt(___in, ___out, ___length, ___key, ___ivec, ___num, ___enc, ___block) \
      AROS_LC8(void, CRYPTO_cfb128_8_encrypt, \
 AROS_LCA(const unsigned char *, (___in), A0), \
 AROS_LCA(unsigned char *, (___out), A1), \
 AROS_LCA(size_t, (___length), D0), \
 AROS_LCA(const void *, (___key), A2), \
 AROS_LCA(unsigned char *, (___ivec), A3), \
 AROS_LCA(int *, (___num), D1), \
 AROS_LCA(int, (___enc), D2), \
 AROS_LCA(block128_f, (___block), D3), \
     struct Library *, AMISSL_BASE_NAME, 3854, Amissl)

#define OPENSSL_gmtime(___timer, ___result) \
      AROS_LC2(struct tm *, OPENSSL_gmtime, \
 AROS_LCA(const time_t *, (___timer), A0), \
 AROS_LCA(struct tm *, (___result), A1), \
     struct Library *, AMISSL_BASE_NAME, 3856, Amissl)

#define OPENSSL_gmtime_adj(___tm, ___offset_day, ___offset_sec) \
      AROS_LC3(int, OPENSSL_gmtime_adj, \
 AROS_LCA(struct tm *, (___tm), A0), \
 AROS_LCA(int, (___offset_day), D0), \
 AROS_LCA(long, (___offset_sec), D1), \
     struct Library *, AMISSL_BASE_NAME, 3857, Amissl)

#define OPENSSL_gmtime_diff(___pday, ___psec, ___from, ___to) \
      AROS_LC4(int, OPENSSL_gmtime_diff, \
 AROS_LCA(int *, (___pday), A0), \
 AROS_LCA(int *, (___psec), A1), \
 AROS_LCA(const struct tm *, (___from), A2), \
 AROS_LCA(const struct tm *, (___to), A3), \
     struct Library *, AMISSL_BASE_NAME, 3858, Amissl)

#define EVP_PKEY_meth_get0_info(___ppkey_id, ___pflags, ___meth) \
      AROS_LC3(void, EVP_PKEY_meth_get0_info, \
 AROS_LCA(int *, (___ppkey_id), A0), \
 AROS_LCA(int *, (___pflags), A1), \
 AROS_LCA(const EVP_PKEY_METHOD *, (___meth), A2), \
     struct Library *, AMISSL_BASE_NAME, 3859, Amissl)

#define EVP_PKEY_meth_copy(___dst, ___src) \
      AROS_LC2(void, EVP_PKEY_meth_copy, \
 AROS_LCA(EVP_PKEY_METHOD *, (___dst), A0), \
 AROS_LCA(const EVP_PKEY_METHOD *, (___src), A1), \
     struct Library *, AMISSL_BASE_NAME, 3860, Amissl)

#define RSA_padding_add_PKCS1_PSS_mgf1(___rsa, ___EM, ___mHash, ___Hash, ___mgf1Hash, ___sLen) \
      AROS_LC6(int, RSA_padding_add_PKCS1_PSS_mgf1, \
 AROS_LCA(RSA *, (___rsa), A0), \
 AROS_LCA(unsigned char *, (___EM), A1), \
 AROS_LCA(const unsigned char *, (___mHash), A2), \
 AROS_LCA(const EVP_MD *, (___Hash), A3), \
 AROS_LCA(const EVP_MD *, (___mgf1Hash), D0), \
 AROS_LCA(int, (___sLen), D1), \
     struct Library *, AMISSL_BASE_NAME, 3861, Amissl)

#define RSA_verify_PKCS1_PSS_mgf1(___rsa, ___mHash, ___Hash, ___mgf1Hash, ___EM, ___sLen) \
      AROS_LC6(int, RSA_verify_PKCS1_PSS_mgf1, \
 AROS_LCA(RSA *, (___rsa), A0), \
 AROS_LCA(const unsigned char *, (___mHash), A1), \
 AROS_LCA(const EVP_MD *, (___Hash), A2), \
 AROS_LCA(const EVP_MD *, (___mgf1Hash), A3), \
 AROS_LCA(const unsigned char *, (___EM), D0), \
 AROS_LCA(int, (___sLen), D1), \
     struct Library *, AMISSL_BASE_NAME, 3862, Amissl)

#define X509_ALGOR_set_md(___alg, ___md) \
      AROS_LC2(void, X509_ALGOR_set_md, \
 AROS_LCA(X509_ALGOR *, (___alg), A0), \
 AROS_LCA(const EVP_MD *, (___md), A1), \
     struct Library *, AMISSL_BASE_NAME, 3863, Amissl)

#define CMAC_CTX_copy(___out, ___in) \
      AROS_LC2(int, CMAC_CTX_copy, \
 AROS_LCA(CMAC_CTX *, (___out), A0), \
 AROS_LCA(const CMAC_CTX *, (___in), A1), \
     struct Library *, AMISSL_BASE_NAME, 3864, Amissl)

#define CMAC_CTX_free(___ctx) \
      AROS_LC1(void, CMAC_CTX_free, \
 AROS_LCA(CMAC_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 3865, Amissl)

#define CMAC_CTX_get0_cipher_ctx(___ctx) \
      AROS_LC1(EVP_CIPHER_CTX *, CMAC_CTX_get0_cipher_ctx, \
 AROS_LCA(CMAC_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 3866, Amissl)

#define CMAC_CTX_cleanup(___ctx) \
      AROS_LC1(void, CMAC_CTX_cleanup, \
 AROS_LCA(CMAC_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 3867, Amissl)

#define CMAC_Init(___ctx, ___key, ___keylen, ___cipher, ___impl) \
      AROS_LC5(int, CMAC_Init, \
 AROS_LCA(CMAC_CTX *, (___ctx), A0), \
 AROS_LCA(const void *, (___key), A1), \
 AROS_LCA(size_t, (___keylen), D0), \
 AROS_LCA(const EVP_CIPHER *, (___cipher), A2), \
 AROS_LCA(ENGINE *, (___impl), A3), \
     struct Library *, AMISSL_BASE_NAME, 3868, Amissl)

#define CMAC_Update(___ctx, ___data, ___dlen) \
      AROS_LC3(int, CMAC_Update, \
 AROS_LCA(CMAC_CTX *, (___ctx), A0), \
 AROS_LCA(const void *, (___data), A1), \
 AROS_LCA(size_t, (___dlen), D0), \
     struct Library *, AMISSL_BASE_NAME, 3869, Amissl)

#define CMAC_resume(___ctx) \
      AROS_LC1(int, CMAC_resume, \
 AROS_LCA(CMAC_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 3870, Amissl)

#define CMAC_CTX_new() \
      AROS_LC0(CMAC_CTX *, CMAC_CTX_new, \
     struct Library *, AMISSL_BASE_NAME, 3871, Amissl)

#define CMAC_Final(___ctx, ___out, ___poutlen) \
      AROS_LC3(int, CMAC_Final, \
 AROS_LCA(CMAC_CTX *, (___ctx), A0), \
 AROS_LCA(unsigned char *, (___out), A1), \
 AROS_LCA(size_t *, (___poutlen), A2), \
     struct Library *, AMISSL_BASE_NAME, 3872, Amissl)

#define CRYPTO_ctr128_encrypt_ctr32(___in, ___out, ___len, ___key, ___ivec, ___ecount_buf, ___num, ___ctr) \
      AROS_LC8(void, CRYPTO_ctr128_encrypt_ctr32, \
 AROS_LCA(const unsigned char *, (___in), A0), \
 AROS_LCA(unsigned char *, (___out), A1), \
 AROS_LCA(size_t, (___len), D0), \
 AROS_LCA(const void *, (___key), A2), \
 AROS_LCA(unsigned char *, (___ivec), A3), \
 AROS_LCA(unsigned char *, (___ecount_buf), D1), \
 AROS_LCA(unsigned int *, (___num), D2), \
 AROS_LCA(ctr128_f, (___ctr), D3), \
     struct Library *, AMISSL_BASE_NAME, 3873, Amissl)

#define CRYPTO_gcm128_release(___ctx) \
      AROS_LC1(void, CRYPTO_gcm128_release, \
 AROS_LCA(GCM128_CONTEXT *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 3874, Amissl)

#define CRYPTO_ccm128_decrypt_ccm64(___ctx, ___inp, ___out, ___len, ___stream) \
      AROS_LC5(int, CRYPTO_ccm128_decrypt_ccm64, \
 AROS_LCA(CCM128_CONTEXT *, (___ctx), A0), \
 AROS_LCA(const unsigned char *, (___inp), A1), \
 AROS_LCA(unsigned char *, (___out), A2), \
 AROS_LCA(size_t, (___len), D0), \
 AROS_LCA(ccm128_f, (___stream), A3), \
     struct Library *, AMISSL_BASE_NAME, 3875, Amissl)

#define CRYPTO_ccm128_encrypt(___ctx, ___inp, ___out, ___len) \
      AROS_LC4(int, CRYPTO_ccm128_encrypt, \
 AROS_LCA(CCM128_CONTEXT *, (___ctx), A0), \
 AROS_LCA(const unsigned char *, (___inp), A1), \
 AROS_LCA(unsigned char *, (___out), A2), \
 AROS_LCA(size_t, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 3876, Amissl)

#define CRYPTO_gcm128_encrypt(___ctx, ___in, ___out, ___len) \
      AROS_LC4(int, CRYPTO_gcm128_encrypt, \
 AROS_LCA(GCM128_CONTEXT *, (___ctx), A0), \
 AROS_LCA(const unsigned char *, (___in), A1), \
 AROS_LCA(unsigned char *, (___out), A2), \
 AROS_LCA(size_t, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 3877, Amissl)

#define CRYPTO_xts128_encrypt(___ctx, ___iv, ___inp, ___out, ___len, ___enc) \
      AROS_LC6(int, CRYPTO_xts128_encrypt, \
 AROS_LCA(const XTS128_CONTEXT *, (___ctx), A0), \
 AROS_LCA(const unsigned char *, (___iv), A1), \
 AROS_LCA(const unsigned char *, (___inp), A2), \
 AROS_LCA(unsigned char *, (___out), A3), \
 AROS_LCA(size_t, (___len), D0), \
 AROS_LCA(int, (___enc), D1), \
     struct Library *, AMISSL_BASE_NAME, 3878, Amissl)

#define CRYPTO_nistcts128_decrypt_block(___in, ___out, ___len, ___key, ___ivec, ___block) \
      AROS_LC6(size_t, CRYPTO_nistcts128_decrypt_block, \
 AROS_LCA(const unsigned char *, (___in), A0), \
 AROS_LCA(unsigned char *, (___out), A1), \
 AROS_LCA(size_t, (___len), D0), \
 AROS_LCA(const void *, (___key), A2), \
 AROS_LCA(unsigned char *, (___ivec), D1), \
 AROS_LCA(block128_f, (___block), A3), \
     struct Library *, AMISSL_BASE_NAME, 3879, Amissl)

#define CRYPTO_gcm128_setiv(___ctx, ___iv, ___len) \
      AROS_LC3(void, CRYPTO_gcm128_setiv, \
 AROS_LCA(GCM128_CONTEXT *, (___ctx), A0), \
 AROS_LCA(const unsigned char *, (___iv), A1), \
 AROS_LCA(size_t, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 3880, Amissl)

#define CRYPTO_nistcts128_encrypt(___in, ___out, ___len, ___key, ___ivec, ___cbc) \
      AROS_LC6(size_t, CRYPTO_nistcts128_encrypt, \
 AROS_LCA(const unsigned char *, (___in), A0), \
 AROS_LCA(unsigned char *, (___out), A1), \
 AROS_LCA(size_t, (___len), D0), \
 AROS_LCA(const void *, (___key), A2), \
 AROS_LCA(unsigned char *, (___ivec), A3), \
 AROS_LCA(cbc128_f, (___cbc), D1), \
     struct Library *, AMISSL_BASE_NAME, 3881, Amissl)

#define CRYPTO_gcm128_tag(___ctx, ___tag, ___len) \
      AROS_LC3(void, CRYPTO_gcm128_tag, \
 AROS_LCA(GCM128_CONTEXT *, (___ctx), A0), \
 AROS_LCA(unsigned char *, (___tag), A1), \
 AROS_LCA(size_t, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 3882, Amissl)

#define CRYPTO_ccm128_encrypt_ccm64(___ctx, ___inp, ___out, ___len, ___stream) \
      AROS_LC5(int, CRYPTO_ccm128_encrypt_ccm64, \
 AROS_LCA(CCM128_CONTEXT *, (___ctx), A0), \
 AROS_LCA(const unsigned char *, (___inp), A1), \
 AROS_LCA(unsigned char *, (___out), A2), \
 AROS_LCA(size_t, (___len), D0), \
 AROS_LCA(ccm128_f, (___stream), A3), \
     struct Library *, AMISSL_BASE_NAME, 3883, Amissl)

#define CRYPTO_ccm128_setiv(___ctx, ___nonce, ___nlen, ___mlen) \
      AROS_LC4(int, CRYPTO_ccm128_setiv, \
 AROS_LCA(CCM128_CONTEXT *, (___ctx), A0), \
 AROS_LCA(const unsigned char *, (___nonce), A1), \
 AROS_LCA(size_t, (___nlen), D0), \
 AROS_LCA(size_t, (___mlen), D1), \
     struct Library *, AMISSL_BASE_NAME, 3884, Amissl)

#define CRYPTO_nistcts128_encrypt_block(___in, ___out, ___len, ___key, ___ivec, ___block) \
      AROS_LC6(size_t, CRYPTO_nistcts128_encrypt_block, \
 AROS_LCA(const unsigned char *, (___in), A0), \
 AROS_LCA(unsigned char *, (___out), A1), \
 AROS_LCA(size_t, (___len), D0), \
 AROS_LCA(const void *, (___key), A2), \
 AROS_LCA(unsigned char *, (___ivec), A3), \
 AROS_LCA(block128_f, (___block), D1), \
     struct Library *, AMISSL_BASE_NAME, 3885, Amissl)

#define CRYPTO_gcm128_aad(___ctx, ___aad, ___len) \
      AROS_LC3(int, CRYPTO_gcm128_aad, \
 AROS_LCA(GCM128_CONTEXT *, (___ctx), A0), \
 AROS_LCA(const unsigned char *, (___aad), A1), \
 AROS_LCA(size_t, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 3886, Amissl)

#define CRYPTO_ccm128_init(___ctx, ___M, ___L, ___key, ___block) \
      AROS_LC5(void, CRYPTO_ccm128_init, \
 AROS_LCA(CCM128_CONTEXT *, (___ctx), A0), \
 AROS_LCA(unsigned int, (___M), D0), \
 AROS_LCA(unsigned int, (___L), D1), \
 AROS_LCA(void *, (___key), A1), \
 AROS_LCA(block128_f, (___block), A2), \
     struct Library *, AMISSL_BASE_NAME, 3887, Amissl)

#define CRYPTO_nistcts128_decrypt(___in, ___out, ___len, ___key, ___ivec, ___cbc) \
      AROS_LC6(size_t, CRYPTO_nistcts128_decrypt, \
 AROS_LCA(const unsigned char *, (___in), A0), \
 AROS_LCA(unsigned char *, (___out), A1), \
 AROS_LCA(size_t, (___len), D0), \
 AROS_LCA(const void *, (___key), A2), \
 AROS_LCA(unsigned char *, (___ivec), A3), \
 AROS_LCA(cbc128_f, (___cbc), D1), \
     struct Library *, AMISSL_BASE_NAME, 3888, Amissl)

#define CRYPTO_gcm128_new(___key, ___block) \
      AROS_LC2(GCM128_CONTEXT *, CRYPTO_gcm128_new, \
 AROS_LCA(void *, (___key), A0), \
 AROS_LCA(block128_f, (___block), A1), \
     struct Library *, AMISSL_BASE_NAME, 3889, Amissl)

#define CRYPTO_ccm128_tag(___ctx, ___tag, ___len) \
      AROS_LC3(size_t, CRYPTO_ccm128_tag, \
 AROS_LCA(CCM128_CONTEXT *, (___ctx), A0), \
 AROS_LCA(unsigned char *, (___tag), A1), \
 AROS_LCA(size_t, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 3890, Amissl)

#define CRYPTO_ccm128_decrypt(___ctx, ___inp, ___out, ___len) \
      AROS_LC4(int, CRYPTO_ccm128_decrypt, \
 AROS_LCA(CCM128_CONTEXT *, (___ctx), A0), \
 AROS_LCA(const unsigned char *, (___inp), A1), \
 AROS_LCA(unsigned char *, (___out), A2), \
 AROS_LCA(size_t, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 3891, Amissl)

#define CRYPTO_ccm128_aad(___ctx, ___aad, ___alen) \
      AROS_LC3(void, CRYPTO_ccm128_aad, \
 AROS_LCA(CCM128_CONTEXT *, (___ctx), A0), \
 AROS_LCA(const unsigned char *, (___aad), A1), \
 AROS_LCA(size_t, (___alen), D0), \
     struct Library *, AMISSL_BASE_NAME, 3892, Amissl)

#define CRYPTO_gcm128_init(___ctx, ___key, ___block) \
      AROS_LC3(void, CRYPTO_gcm128_init, \
 AROS_LCA(GCM128_CONTEXT *, (___ctx), A0), \
 AROS_LCA(void *, (___key), A1), \
 AROS_LCA(block128_f, (___block), A2), \
     struct Library *, AMISSL_BASE_NAME, 3893, Amissl)

#define CRYPTO_gcm128_decrypt(___ctx, ___in, ___out, ___len) \
      AROS_LC4(int, CRYPTO_gcm128_decrypt, \
 AROS_LCA(GCM128_CONTEXT *, (___ctx), A0), \
 AROS_LCA(const unsigned char *, (___in), A1), \
 AROS_LCA(unsigned char *, (___out), A2), \
 AROS_LCA(size_t, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 3894, Amissl)

#define CRYPTO_gcm128_decrypt_ctr32(___ctx, ___in, ___out, ___len, ___stream) \
      AROS_LC5(int, CRYPTO_gcm128_decrypt_ctr32, \
 AROS_LCA(GCM128_CONTEXT *, (___ctx), A0), \
 AROS_LCA(const unsigned char *, (___in), A1), \
 AROS_LCA(unsigned char *, (___out), A2), \
 AROS_LCA(size_t, (___len), D0), \
 AROS_LCA(ctr128_f, (___stream), A3), \
     struct Library *, AMISSL_BASE_NAME, 3895, Amissl)

#define CRYPTO_gcm128_encrypt_ctr32(___ctx, ___in, ___out, ___len, ___stream) \
      AROS_LC5(int, CRYPTO_gcm128_encrypt_ctr32, \
 AROS_LCA(GCM128_CONTEXT *, (___ctx), A0), \
 AROS_LCA(const unsigned char *, (___in), A1), \
 AROS_LCA(unsigned char *, (___out), A2), \
 AROS_LCA(size_t, (___len), D0), \
 AROS_LCA(ctr128_f, (___stream), A3), \
     struct Library *, AMISSL_BASE_NAME, 3896, Amissl)

#define CRYPTO_gcm128_finish(___ctx, ___tag, ___len) \
      AROS_LC3(int, CRYPTO_gcm128_finish, \
 AROS_LCA(GCM128_CONTEXT *, (___ctx), A0), \
 AROS_LCA(const unsigned char *, (___tag), A1), \
 AROS_LCA(size_t, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 3897, Amissl)

#define PKCS5_pbkdf2_set(___iter, ___salt, ___saltlen, ___prf_nid, ___keylen) \
      AROS_LC5(X509_ALGOR *, PKCS5_pbkdf2_set, \
 AROS_LCA(int, (___iter), D0), \
 AROS_LCA(unsigned char *, (___salt), A0), \
 AROS_LCA(int, (___saltlen), D1), \
 AROS_LCA(int, (___prf_nid), D2), \
 AROS_LCA(int, (___keylen), D3), \
     struct Library *, AMISSL_BASE_NAME, 3898, Amissl)

#define RSA_PSS_PARAMS_new() \
      AROS_LC0(RSA_PSS_PARAMS *, RSA_PSS_PARAMS_new, \
     struct Library *, AMISSL_BASE_NAME, 3899, Amissl)

#define d2i_RSA_PSS_PARAMS(___a, ___pp, ___length) \
      AROS_LC3(RSA_PSS_PARAMS *, d2i_RSA_PSS_PARAMS, \
 AROS_LCA(RSA_PSS_PARAMS **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___pp), A1), \
 AROS_LCA(long, (___length), D0), \
     struct Library *, AMISSL_BASE_NAME, 3900, Amissl)

#define RSA_PSS_PARAMS_free(___a) \
      AROS_LC1(void, RSA_PSS_PARAMS_free, \
 AROS_LCA(RSA_PSS_PARAMS *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 3901, Amissl)

#define i2d_RSA_PSS_PARAMS(___a, ___out) \
      AROS_LC2(int, i2d_RSA_PSS_PARAMS, \
 AROS_LCA(const RSA_PSS_PARAMS *, (___a), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 3902, Amissl)

#define POLICY_MAPPING_it() \
      AROS_LC0(const ASN1_ITEM *, POLICY_MAPPING_it, \
     struct Library *, AMISSL_BASE_NAME, 3904, Amissl)

#define NAME_CONSTRAINTS_it() \
      AROS_LC0(const ASN1_ITEM *, NAME_CONSTRAINTS_it, \
     struct Library *, AMISSL_BASE_NAME, 3905, Amissl)

#define ASN1_OCTET_STRING_NDEF_it() \
      AROS_LC0(const ASN1_ITEM *, ASN1_OCTET_STRING_NDEF_it, \
     struct Library *, AMISSL_BASE_NAME, 3906, Amissl)

#define POLICY_CONSTRAINTS_it() \
      AROS_LC0(const ASN1_ITEM *, POLICY_CONSTRAINTS_it, \
     struct Library *, AMISSL_BASE_NAME, 3908, Amissl)

#define POLICY_MAPPINGS_it() \
      AROS_LC0(const ASN1_ITEM *, POLICY_MAPPINGS_it, \
     struct Library *, AMISSL_BASE_NAME, 3909, Amissl)

#define GENERAL_SUBTREE_it() \
      AROS_LC0(const ASN1_ITEM *, GENERAL_SUBTREE_it, \
     struct Library *, AMISSL_BASE_NAME, 3910, Amissl)

#define X509_EXTENSIONS_it() \
      AROS_LC0(const ASN1_ITEM *, X509_EXTENSIONS_it, \
     struct Library *, AMISSL_BASE_NAME, 3911, Amissl)

#define X509_ALGORS_it() \
      AROS_LC0(const ASN1_ITEM *, X509_ALGORS_it, \
     struct Library *, AMISSL_BASE_NAME, 3912, Amissl)

#define CMS_ContentInfo_it() \
      AROS_LC0(const ASN1_ITEM *, CMS_ContentInfo_it, \
     struct Library *, AMISSL_BASE_NAME, 3913, Amissl)

#define CMS_ReceiptRequest_it() \
      AROS_LC0(const ASN1_ITEM *, CMS_ReceiptRequest_it, \
     struct Library *, AMISSL_BASE_NAME, 3914, Amissl)

#define ASN1_SEQUENCE_ANY_it() \
      AROS_LC0(const ASN1_ITEM *, ASN1_SEQUENCE_ANY_it, \
     struct Library *, AMISSL_BASE_NAME, 3915, Amissl)

#define ASN1_SET_ANY_it() \
      AROS_LC0(const ASN1_ITEM *, ASN1_SET_ANY_it, \
     struct Library *, AMISSL_BASE_NAME, 3916, Amissl)

#define ISSUING_DIST_POINT_it() \
      AROS_LC0(const ASN1_ITEM *, ISSUING_DIST_POINT_it, \
     struct Library *, AMISSL_BASE_NAME, 3918, Amissl)

#define RSA_PSS_PARAMS_it() \
      AROS_LC0(const ASN1_ITEM *, RSA_PSS_PARAMS_it, \
     struct Library *, AMISSL_BASE_NAME, 3919, Amissl)

#define PEM_write_bio_DHxparams(___bp, ___x) \
      AROS_LC2(int, PEM_write_bio_DHxparams, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(const DH *, (___x), A1), \
     struct Library *, AMISSL_BASE_NAME, 3921, Amissl)

#define X509_ALGOR_cmp(___a, ___b) \
      AROS_LC2(int, X509_ALGOR_cmp, \
 AROS_LCA(const X509_ALGOR *, (___a), A0), \
 AROS_LCA(const X509_ALGOR *, (___b), A1), \
     struct Library *, AMISSL_BASE_NAME, 3922, Amissl)

#define ASN1_STRING_clear_free(___a) \
      AROS_LC1(void, ASN1_STRING_clear_free, \
 AROS_LCA(ASN1_STRING *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 3923, Amissl)

#define ASN1_TIME_diff(___pday, ___psec, ___from, ___to) \
      AROS_LC4(int, ASN1_TIME_diff, \
 AROS_LCA(int *, (___pday), A0), \
 AROS_LCA(int *, (___psec), A1), \
 AROS_LCA(const ASN1_TIME *, (___from), A2), \
 AROS_LCA(const ASN1_TIME *, (___to), A3), \
     struct Library *, AMISSL_BASE_NAME, 3924, Amissl)

#define BIO_hex_string(___out, ___indent, ___width, ___data, ___datalen) \
      AROS_LC5(int, BIO_hex_string, \
 AROS_LCA(BIO *, (___out), A0), \
 AROS_LCA(int, (___indent), D0), \
 AROS_LCA(int, (___width), D1), \
 AROS_LCA(const void *, (___data), A1), \
 AROS_LCA(int, (___datalen), D2), \
     struct Library *, AMISSL_BASE_NAME, 3925, Amissl)

#define OBSOLETE_BUF_strnlen(___str, ___maxlen) \
      AROS_LC2(size_t, OBSOLETE_BUF_strnlen, \
 AROS_LCA(const char *, (___str), A0), \
 AROS_LCA(size_t, (___maxlen), D0), \
     struct Library *, AMISSL_BASE_NAME, 3926, Amissl)

#define CMS_RecipientEncryptedKey_cert_cmp(___rek, ___cert) \
      AROS_LC2(int, CMS_RecipientEncryptedKey_cert_cmp, \
 AROS_LCA(CMS_RecipientEncryptedKey *, (___rek), A0), \
 AROS_LCA(X509 *, (___cert), A1), \
     struct Library *, AMISSL_BASE_NAME, 3927, Amissl)

#define CMS_RecipientEncryptedKey_get0_id(___rek, ___keyid, ___tm, ___other, ___issuer, ___sno) \
      AROS_LC6(int, CMS_RecipientEncryptedKey_get0_id, \
 AROS_LCA(CMS_RecipientEncryptedKey *, (___rek), A0), \
 AROS_LCA(ASN1_OCTET_STRING **, (___keyid), A1), \
 AROS_LCA(ASN1_GENERALIZEDTIME **, (___tm), A2), \
 AROS_LCA(CMS_OtherKeyAttribute **, (___other), A3), \
 AROS_LCA(X509_NAME **, (___issuer), D0), \
 AROS_LCA(ASN1_INTEGER **, (___sno), D1), \
     struct Library *, AMISSL_BASE_NAME, 3928, Amissl)

#define CMS_RecipientInfo_encrypt(___cms, ___ri) \
      AROS_LC2(int, CMS_RecipientInfo_encrypt, \
 AROS_LCA(const CMS_ContentInfo *, (___cms), A0), \
 AROS_LCA(CMS_RecipientInfo *, (___ri), A1), \
     struct Library *, AMISSL_BASE_NAME, 3929, Amissl)

#define CMS_RecipientInfo_get0_pkey_ctx(___ri) \
      AROS_LC1(EVP_PKEY_CTX *, CMS_RecipientInfo_get0_pkey_ctx, \
 AROS_LCA(CMS_RecipientInfo *, (___ri), A0), \
     struct Library *, AMISSL_BASE_NAME, 3930, Amissl)

#define CMS_RecipientInfo_kari_decrypt(___cms, ___ri, ___rek) \
      AROS_LC3(int, CMS_RecipientInfo_kari_decrypt, \
 AROS_LCA(CMS_ContentInfo *, (___cms), A0), \
 AROS_LCA(CMS_RecipientInfo *, (___ri), A1), \
 AROS_LCA(CMS_RecipientEncryptedKey *, (___rek), A2), \
     struct Library *, AMISSL_BASE_NAME, 3931, Amissl)

#define CMS_RecipientInfo_kari_get0_alg(___ri, ___palg, ___pukm) \
      AROS_LC3(int, CMS_RecipientInfo_kari_get0_alg, \
 AROS_LCA(CMS_RecipientInfo *, (___ri), A0), \
 AROS_LCA(X509_ALGOR **, (___palg), A1), \
 AROS_LCA(ASN1_OCTET_STRING **, (___pukm), A2), \
     struct Library *, AMISSL_BASE_NAME, 3932, Amissl)

#define CMS_RecipientInfo_kari_get0_ctx(___ri) \
      AROS_LC1(EVP_CIPHER_CTX *, CMS_RecipientInfo_kari_get0_ctx, \
 AROS_LCA(CMS_RecipientInfo *, (___ri), A0), \
     struct Library *, AMISSL_BASE_NAME, 3933, Amissl)

#define CMS_RecipientInfo_kari_get0_orig_id(___ri, ___pubalg, ___pubkey, ___keyid, ___issuer, ___sno) \
      AROS_LC6(int, CMS_RecipientInfo_kari_get0_orig_id, \
 AROS_LCA(CMS_RecipientInfo *, (___ri), A0), \
 AROS_LCA(X509_ALGOR **, (___pubalg), A1), \
 AROS_LCA(ASN1_BIT_STRING **, (___pubkey), A2), \
 AROS_LCA(ASN1_OCTET_STRING **, (___keyid), A3), \
 AROS_LCA(X509_NAME **, (___issuer), D0), \
 AROS_LCA(ASN1_INTEGER **, (___sno), D1), \
     struct Library *, AMISSL_BASE_NAME, 3934, Amissl)

#define CMS_RecipientInfo_kari_get0_reks(___ri) \
      AROS_LC1(STACK_OF(CMS_RecipientEncryptedKey) *, CMS_RecipientInfo_kari_get0_reks, \
 AROS_LCA(CMS_RecipientInfo *, (___ri), A0), \
     struct Library *, AMISSL_BASE_NAME, 3935, Amissl)

#define CMS_RecipientInfo_kari_orig_id_cmp(___ri, ___cert) \
      AROS_LC2(int, CMS_RecipientInfo_kari_orig_id_cmp, \
 AROS_LCA(CMS_RecipientInfo *, (___ri), A0), \
 AROS_LCA(X509 *, (___cert), A1), \
     struct Library *, AMISSL_BASE_NAME, 3936, Amissl)

#define CMS_RecipientInfo_kari_set0_pkey(___ri, ___pk) \
      AROS_LC2(int, CMS_RecipientInfo_kari_set0_pkey, \
 AROS_LCA(CMS_RecipientInfo *, (___ri), A0), \
 AROS_LCA(EVP_PKEY *, (___pk), A1), \
     struct Library *, AMISSL_BASE_NAME, 3937, Amissl)

#define CMS_SharedInfo_encode(___pder, ___kekalg, ___ukm, ___keylen) \
      AROS_LC4(int, CMS_SharedInfo_encode, \
 AROS_LCA(unsigned char **, (___pder), A0), \
 AROS_LCA(X509_ALGOR *, (___kekalg), A1), \
 AROS_LCA(ASN1_OCTET_STRING *, (___ukm), A2), \
 AROS_LCA(int, (___keylen), D0), \
     struct Library *, AMISSL_BASE_NAME, 3938, Amissl)

#define CMS_SignerInfo_get0_md_ctx(___si) \
      AROS_LC1(EVP_MD_CTX *, CMS_SignerInfo_get0_md_ctx, \
 AROS_LCA(CMS_SignerInfo *, (___si), A0), \
     struct Library *, AMISSL_BASE_NAME, 3939, Amissl)

#define CMS_SignerInfo_get0_pkey_ctx(___si) \
      AROS_LC1(EVP_PKEY_CTX *, CMS_SignerInfo_get0_pkey_ctx, \
 AROS_LCA(CMS_SignerInfo *, (___si), A0), \
     struct Library *, AMISSL_BASE_NAME, 3940, Amissl)

#define CMS_SignerInfo_get0_signature(___si) \
      AROS_LC1(ASN1_OCTET_STRING *, CMS_SignerInfo_get0_signature, \
 AROS_LCA(CMS_SignerInfo *, (___si), A0), \
     struct Library *, AMISSL_BASE_NAME, 3941, Amissl)

#define d2i_DHxparams(___a, ___pp, ___length) \
      AROS_LC3(DH *, d2i_DHxparams, \
 AROS_LCA(DH **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___pp), A1), \
 AROS_LCA(long, (___length), D0), \
     struct Library *, AMISSL_BASE_NAME, 3942, Amissl)

#define i2d_DHxparams(___dh, ___pp) \
      AROS_LC2(int, i2d_DHxparams, \
 AROS_LCA(const DH *, (___dh), A0), \
 AROS_LCA(unsigned char **, (___pp), A1), \
     struct Library *, AMISSL_BASE_NAME, 3943, Amissl)

#define DH_compute_key_padded(___key, ___pub_key, ___dh) \
      AROS_LC3(int, DH_compute_key_padded, \
 AROS_LCA(unsigned char *, (___key), A0), \
 AROS_LCA(const BIGNUM *, (___pub_key), A1), \
 AROS_LCA(DH *, (___dh), A2), \
     struct Library *, AMISSL_BASE_NAME, 3944, Amissl)

#define DH_get_1024_160() \
      AROS_LC0(DH *, DH_get_1024_160, \
     struct Library *, AMISSL_BASE_NAME, 3945, Amissl)

#define DH_get_2048_224() \
      AROS_LC0(DH *, DH_get_2048_224, \
     struct Library *, AMISSL_BASE_NAME, 3946, Amissl)

#define DH_get_2048_256() \
      AROS_LC0(DH *, DH_get_2048_256, \
     struct Library *, AMISSL_BASE_NAME, 3947, Amissl)

#define DH_KDF_X9_42(___out, ___outlen, ___Z, ___Zlen, ___key_oid, ___ukm, ___ukmlen, ___md) \
      AROS_LC8(int, DH_KDF_X9_42, \
 AROS_LCA(unsigned char *, (___out), A0), \
 AROS_LCA(size_t, (___outlen), D0), \
 AROS_LCA(const unsigned char *, (___Z), A1), \
 AROS_LCA(size_t, (___Zlen), D1), \
 AROS_LCA(ASN1_OBJECT *, (___key_oid), A2), \
 AROS_LCA(const unsigned char *, (___ukm), A3), \
 AROS_LCA(size_t, (___ukmlen), D2), \
 AROS_LCA(const EVP_MD *, (___md), D3), \
     struct Library *, AMISSL_BASE_NAME, 3948, Amissl)

#define EC_curve_nid2nist(___nid) \
      AROS_LC1(const char *, EC_curve_nid2nist, \
 AROS_LCA(int, (___nid), D0), \
     struct Library *, AMISSL_BASE_NAME, 3949, Amissl)

#define EC_curve_nist2nid(___name) \
      AROS_LC1(int, EC_curve_nist2nid, \
 AROS_LCA(const char *, (___name), A0), \
     struct Library *, AMISSL_BASE_NAME, 3950, Amissl)

#define EC_GROUP_get_mont_data(___group) \
      AROS_LC1(BN_MONT_CTX *, EC_GROUP_get_mont_data, \
 AROS_LCA(const EC_GROUP *, (___group), A0), \
     struct Library *, AMISSL_BASE_NAME, 3951, Amissl)

#define ECDH_KDF_X9_62(___out, ___outlen, ___Z, ___Zlen, ___sinfo, ___sinfolen, ___md) \
      AROS_LC7(int, ECDH_KDF_X9_62, \
 AROS_LCA(unsigned char *, (___out), A0), \
 AROS_LCA(size_t, (___outlen), D0), \
 AROS_LCA(const unsigned char *, (___Z), A1), \
 AROS_LCA(size_t, (___Zlen), D1), \
 AROS_LCA(const unsigned char *, (___sinfo), A2), \
 AROS_LCA(size_t, (___sinfolen), D2), \
 AROS_LCA(const EVP_MD *, (___md), D3), \
     struct Library *, AMISSL_BASE_NAME, 3952, Amissl)

#define EVP_aes_128_cbc_hmac_sha256() \
      AROS_LC0(const EVP_CIPHER *, EVP_aes_128_cbc_hmac_sha256, \
     struct Library *, AMISSL_BASE_NAME, 3962, Amissl)

#define EVP_aes_128_wrap() \
      AROS_LC0(const EVP_CIPHER *, EVP_aes_128_wrap, \
     struct Library *, AMISSL_BASE_NAME, 3963, Amissl)

#define EVP_aes_192_wrap() \
      AROS_LC0(const EVP_CIPHER *, EVP_aes_192_wrap, \
     struct Library *, AMISSL_BASE_NAME, 3964, Amissl)

#define EVP_aes_256_cbc_hmac_sha256() \
      AROS_LC0(const EVP_CIPHER *, EVP_aes_256_cbc_hmac_sha256, \
     struct Library *, AMISSL_BASE_NAME, 3965, Amissl)

#define EVP_aes_256_wrap() \
      AROS_LC0(const EVP_CIPHER *, EVP_aes_256_wrap, \
     struct Library *, AMISSL_BASE_NAME, 3966, Amissl)

#define EVP_des_ede3_wrap() \
      AROS_LC0(const EVP_CIPHER *, EVP_des_ede3_wrap, \
     struct Library *, AMISSL_BASE_NAME, 3967, Amissl)

#define CRYPTO_128_unwrap(___key, ___iv, ___out, ___in, ___inlen, ___block) \
      AROS_LC6(size_t, CRYPTO_128_unwrap, \
 AROS_LCA(void *, (___key), A0), \
 AROS_LCA(const unsigned char *, (___iv), A1), \
 AROS_LCA(unsigned char *, (___out), A2), \
 AROS_LCA(const unsigned char *, (___in), A3), \
 AROS_LCA(size_t, (___inlen), D0), \
 AROS_LCA(block128_f, (___block), D1), \
     struct Library *, AMISSL_BASE_NAME, 3968, Amissl)

#define CRYPTO_128_wrap(___key, ___iv, ___out, ___in, ___inlen, ___block) \
      AROS_LC6(size_t, CRYPTO_128_wrap, \
 AROS_LCA(void *, (___key), A0), \
 AROS_LCA(const unsigned char *, (___iv), A1), \
 AROS_LCA(unsigned char *, (___out), A2), \
 AROS_LCA(const unsigned char *, (___in), A3), \
 AROS_LCA(size_t, (___inlen), D0), \
 AROS_LCA(block128_f, (___block), D1), \
     struct Library *, AMISSL_BASE_NAME, 3969, Amissl)

#define OSSL_HTTP_REQ_CTX_get0_mem_bio(___rctx) \
      AROS_LC1(BIO *, OSSL_HTTP_REQ_CTX_get0_mem_bio, \
 AROS_LCA(const OSSL_HTTP_REQ_CTX *, (___rctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 3970, Amissl)

#define OBSOLETE_OCSP_REQ_CTX_http(___rctx, ___op, ___path) \
      AROS_LC3(int, OBSOLETE_OCSP_REQ_CTX_http, \
 AROS_LCA(OSSL_HTTP_REQ_CTX *, (___rctx), A0), \
 AROS_LCA(const char *, (___op), A1), \
 AROS_LCA(const char *, (___path), A2), \
     struct Library *, AMISSL_BASE_NAME, 3971, Amissl)

#define OBSOLETE_OCSP_REQ_CTX_i2d(___rctx, ___it, ___val) \
      AROS_LC3(int, OBSOLETE_OCSP_REQ_CTX_i2d, \
 AROS_LCA(OSSL_HTTP_REQ_CTX *, (___rctx), A0), \
 AROS_LCA(const ASN1_ITEM *, (___it), A1), \
 AROS_LCA(ASN1_VALUE *, (___val), A2), \
     struct Library *, AMISSL_BASE_NAME, 3972, Amissl)

#define OSSL_HTTP_REQ_CTX_nbio(___rctx) \
      AROS_LC1(int, OSSL_HTTP_REQ_CTX_nbio, \
 AROS_LCA(OSSL_HTTP_REQ_CTX *, (___rctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 3973, Amissl)

#define OSSL_HTTP_REQ_CTX_nbio_d2i(___rctx, ___pval, ___it) \
      AROS_LC3(int, OSSL_HTTP_REQ_CTX_nbio_d2i, \
 AROS_LCA(OSSL_HTTP_REQ_CTX *, (___rctx), A0), \
 AROS_LCA(ASN1_VALUE **, (___pval), A1), \
 AROS_LCA(const ASN1_ITEM *, (___it), A2), \
     struct Library *, AMISSL_BASE_NAME, 3974, Amissl)

#define OBSOLETE_OCSP_REQ_CTX_new(___io, ___maxline) \
      AROS_LC2(OSSL_HTTP_REQ_CTX *, OBSOLETE_OCSP_REQ_CTX_new, \
 AROS_LCA(BIO *, (___io), A0), \
 AROS_LCA(int, (___maxline), D0), \
     struct Library *, AMISSL_BASE_NAME, 3975, Amissl)

#define OSSL_HTTP_REQ_CTX_set_max_response_length(___rctx, ___len) \
      AROS_LC2(void, OSSL_HTTP_REQ_CTX_set_max_response_length, \
 AROS_LCA(OSSL_HTTP_REQ_CTX *, (___rctx), A0), \
 AROS_LCA(unsigned long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 3976, Amissl)

#define d2i_RSA_OAEP_PARAMS(___a, ___in, ___len) \
      AROS_LC3(RSA_OAEP_PARAMS *, d2i_RSA_OAEP_PARAMS, \
 AROS_LCA(RSA_OAEP_PARAMS **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 3977, Amissl)

#define RSA_OAEP_PARAMS_free(___a) \
      AROS_LC1(void, RSA_OAEP_PARAMS_free, \
 AROS_LCA(RSA_OAEP_PARAMS *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 3978, Amissl)

#define RSA_OAEP_PARAMS_it() \
      AROS_LC0(const ASN1_ITEM *, RSA_OAEP_PARAMS_it, \
     struct Library *, AMISSL_BASE_NAME, 3979, Amissl)

#define RSA_OAEP_PARAMS_new() \
      AROS_LC0(RSA_OAEP_PARAMS *, RSA_OAEP_PARAMS_new, \
     struct Library *, AMISSL_BASE_NAME, 3980, Amissl)

#define RSA_padding_add_PKCS1_OAEP_mgf1(___to, ___tlen, ___from, ___flen, ___param, ___plen, ___md, ___mgf1md) \
      AROS_LC8(int, RSA_padding_add_PKCS1_OAEP_mgf1, \
 AROS_LCA(unsigned char *, (___to), A0), \
 AROS_LCA(int, (___tlen), D0), \
 AROS_LCA(const unsigned char *, (___from), A1), \
 AROS_LCA(int, (___flen), D1), \
 AROS_LCA(const unsigned char *, (___param), A2), \
 AROS_LCA(int, (___plen), D2), \
 AROS_LCA(const EVP_MD *, (___md), A3), \
 AROS_LCA(const EVP_MD *, (___mgf1md), D3), \
     struct Library *, AMISSL_BASE_NAME, 3981, Amissl)

#define RSA_padding_check_PKCS1_OAEP_mgf1(___to, ___tlen, ___from, ___flen, ___num, ___param, ___plen, ___md, ___mgf1md) \
      AROS_LC9(int, RSA_padding_check_PKCS1_OAEP_mgf1, \
 AROS_LCA(unsigned char *, (___to), A0), \
 AROS_LCA(int, (___tlen), D0), \
 AROS_LCA(const unsigned char *, (___from), A1), \
 AROS_LCA(int, (___flen), D1), \
 AROS_LCA(int, (___num), D2), \
 AROS_LCA(const unsigned char *, (___param), A2), \
 AROS_LCA(int, (___plen), D3), \
 AROS_LCA(const EVP_MD *, (___md), A3), \
 AROS_LCA(const EVP_MD *, (___mgf1md), D4), \
     struct Library *, AMISSL_BASE_NAME, 3982, Amissl)

#define OPENSSL_sk_deep_copy(___sk, ___c, ___f) \
      AROS_LC3(OPENSSL_STACK *, OPENSSL_sk_deep_copy, \
 AROS_LCA(const OPENSSL_STACK *, (___sk), A0), \
 AROS_LCA(OPENSSL_sk_copyfunc, (___c), A1), \
 AROS_LCA(OPENSSL_sk_freefunc, (___f), A2), \
     struct Library *, AMISSL_BASE_NAME, 3983, Amissl)

#define i2d_re_X509_tbs(___x, ___pp) \
      AROS_LC2(int, i2d_re_X509_tbs, \
 AROS_LCA(X509 *, (___x), A0), \
 AROS_LCA(unsigned char **, (___pp), A1), \
     struct Library *, AMISSL_BASE_NAME, 3984, Amissl)

#define X509_chain_check_suiteb(___perror_depth, ___x, ___chain, ___flags) \
      AROS_LC4(int, X509_chain_check_suiteb, \
 AROS_LCA(int *, (___perror_depth), A0), \
 AROS_LCA(X509 *, (___x), A1), \
 AROS_LCA(STACK_OF(X509) *, (___chain), A2), \
 AROS_LCA(unsigned long, (___flags), D0), \
     struct Library *, AMISSL_BASE_NAME, 3985, Amissl)

#define X509_chain_up_ref(___chain) \
      AROS_LC1(STACK_OF(X509) *, X509_chain_up_ref, \
 AROS_LCA(STACK_OF(X509) *, (___chain), A0), \
     struct Library *, AMISSL_BASE_NAME, 3986, Amissl)

#define X509_CRL_check_suiteb(___crl, ___pk, ___flags) \
      AROS_LC3(int, X509_CRL_check_suiteb, \
 AROS_LCA(X509_CRL *, (___crl), A0), \
 AROS_LCA(EVP_PKEY *, (___pk), A1), \
 AROS_LCA(unsigned long, (___flags), D0), \
     struct Library *, AMISSL_BASE_NAME, 3987, Amissl)

#define X509_CRL_diff(___base, ___newer, ___skey, ___md, ___flags) \
      AROS_LC5(X509_CRL *, X509_CRL_diff, \
 AROS_LCA(X509_CRL *, (___base), A0), \
 AROS_LCA(X509_CRL *, (___newer), A1), \
 AROS_LCA(EVP_PKEY *, (___skey), A2), \
 AROS_LCA(const EVP_MD *, (___md), A3), \
 AROS_LCA(unsigned int, (___flags), D0), \
     struct Library *, AMISSL_BASE_NAME, 3988, Amissl)

#define OBSOLETE_X509_CRL_http_nbio(___rctx, ___pcrl) \
      AROS_LC2(int, OBSOLETE_X509_CRL_http_nbio, \
 AROS_LCA(OSSL_HTTP_REQ_CTX *, (___rctx), A0), \
 AROS_LCA(X509_CRL **, (___pcrl), A1), \
     struct Library *, AMISSL_BASE_NAME, 3989, Amissl)

#define X509_get0_signature(___psig, ___palg, ___x) \
      AROS_LC3(void, X509_get0_signature, \
 AROS_LCA(const ASN1_BIT_STRING **, (___psig), A0), \
 AROS_LCA(const X509_ALGOR **, (___palg), A1), \
 AROS_LCA(const X509 *, (___x), A2), \
     struct Library *, AMISSL_BASE_NAME, 3990, Amissl)

#define X509_get_signature_nid(___x) \
      AROS_LC1(int, X509_get_signature_nid, \
 AROS_LCA(const X509 *, (___x), A0), \
     struct Library *, AMISSL_BASE_NAME, 3991, Amissl)

#define OBSOLETE_X509_http_nbio(___rctx, ___pcert) \
      AROS_LC2(int, OBSOLETE_X509_http_nbio, \
 AROS_LCA(OSSL_HTTP_REQ_CTX *, (___rctx), A0), \
 AROS_LCA(X509 **, (___pcert), A1), \
     struct Library *, AMISSL_BASE_NAME, 3992, Amissl)

#define X509_REVOKED_dup(___rev) \
      AROS_LC1(X509_REVOKED *, X509_REVOKED_dup, \
 AROS_LCA(const X509_REVOKED *, (___rev), A0), \
     struct Library *, AMISSL_BASE_NAME, 3993, Amissl)

#define X509_STORE_CTX_get0_store(___ctx) \
      AROS_LC1(X509_STORE *, X509_STORE_CTX_get0_store, \
 AROS_LCA(const X509_STORE_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 3994, Amissl)

#define X509_VERIFY_PARAM_add1_host(___param, ___name, ___namelen) \
      AROS_LC3(int, X509_VERIFY_PARAM_add1_host, \
 AROS_LCA(X509_VERIFY_PARAM *, (___param), A0), \
 AROS_LCA(const char *, (___name), A1), \
 AROS_LCA(size_t, (___namelen), D0), \
     struct Library *, AMISSL_BASE_NAME, 3995, Amissl)

#define X509_VERIFY_PARAM_get0(___id) \
      AROS_LC1(const X509_VERIFY_PARAM *, X509_VERIFY_PARAM_get0, \
 AROS_LCA(int, (___id), D0), \
     struct Library *, AMISSL_BASE_NAME, 3996, Amissl)

#define X509_VERIFY_PARAM_get0_name(___param) \
      AROS_LC1(const char *, X509_VERIFY_PARAM_get0_name, \
 AROS_LCA(const X509_VERIFY_PARAM *, (___param), A0), \
     struct Library *, AMISSL_BASE_NAME, 3997, Amissl)

#define X509_VERIFY_PARAM_get0_peername(___param) \
      AROS_LC1(char *, X509_VERIFY_PARAM_get0_peername, \
 AROS_LCA(const X509_VERIFY_PARAM *, (___param), A0), \
     struct Library *, AMISSL_BASE_NAME, 3998, Amissl)

#define X509_VERIFY_PARAM_get_count() \
      AROS_LC0(int, X509_VERIFY_PARAM_get_count, \
     struct Library *, AMISSL_BASE_NAME, 3999, Amissl)

#define X509_VERIFY_PARAM_set1_email(___param, ___email, ___emaillen) \
      AROS_LC3(int, X509_VERIFY_PARAM_set1_email, \
 AROS_LCA(X509_VERIFY_PARAM *, (___param), A0), \
 AROS_LCA(const char *, (___email), A1), \
 AROS_LCA(size_t, (___emaillen), D0), \
     struct Library *, AMISSL_BASE_NAME, 4000, Amissl)

#define X509_VERIFY_PARAM_set1_host(___param, ___name, ___namelen) \
      AROS_LC3(int, X509_VERIFY_PARAM_set1_host, \
 AROS_LCA(X509_VERIFY_PARAM *, (___param), A0), \
 AROS_LCA(const char *, (___name), A1), \
 AROS_LCA(size_t, (___namelen), D0), \
     struct Library *, AMISSL_BASE_NAME, 4001, Amissl)

#define X509_VERIFY_PARAM_set1_ip(___param, ___ip, ___iplen) \
      AROS_LC3(int, X509_VERIFY_PARAM_set1_ip, \
 AROS_LCA(X509_VERIFY_PARAM *, (___param), A0), \
 AROS_LCA(const unsigned char *, (___ip), A1), \
 AROS_LCA(size_t, (___iplen), D0), \
     struct Library *, AMISSL_BASE_NAME, 4002, Amissl)

#define X509_VERIFY_PARAM_set1_ip_asc(___param, ___ipasc) \
      AROS_LC2(int, X509_VERIFY_PARAM_set1_ip_asc, \
 AROS_LCA(X509_VERIFY_PARAM *, (___param), A0), \
 AROS_LCA(const char *, (___ipasc), A1), \
     struct Library *, AMISSL_BASE_NAME, 4003, Amissl)

#define X509_VERIFY_PARAM_set_hostflags(___param, ___flags) \
      AROS_LC2(void, X509_VERIFY_PARAM_set_hostflags, \
 AROS_LCA(X509_VERIFY_PARAM *, (___param), A0), \
 AROS_LCA(unsigned int, (___flags), D0), \
     struct Library *, AMISSL_BASE_NAME, 4004, Amissl)

#define X509_check_email(___x, ___chk, ___chklen, ___flags) \
      AROS_LC4(int, X509_check_email, \
 AROS_LCA(X509 *, (___x), A0), \
 AROS_LCA(const char *, (___chk), A1), \
 AROS_LCA(size_t, (___chklen), D0), \
 AROS_LCA(unsigned int, (___flags), D1), \
     struct Library *, AMISSL_BASE_NAME, 4005, Amissl)

#define X509_check_host(___x, ___chk, ___chklen, ___flags, ___peername) \
      AROS_LC5(int, X509_check_host, \
 AROS_LCA(X509 *, (___x), A0), \
 AROS_LCA(const char *, (___chk), A1), \
 AROS_LCA(size_t, (___chklen), D0), \
 AROS_LCA(unsigned int, (___flags), D1), \
 AROS_LCA(char **, (___peername), A2), \
     struct Library *, AMISSL_BASE_NAME, 4006, Amissl)

#define X509_check_ip(___x, ___chk, ___chklen, ___flags) \
      AROS_LC4(int, X509_check_ip, \
 AROS_LCA(X509 *, (___x), A0), \
 AROS_LCA(const unsigned char *, (___chk), A1), \
 AROS_LCA(size_t, (___chklen), D0), \
 AROS_LCA(unsigned int, (___flags), D1), \
     struct Library *, AMISSL_BASE_NAME, 4007, Amissl)

#define X509_check_ip_asc(___x, ___ipasc, ___flags) \
      AROS_LC3(int, X509_check_ip_asc, \
 AROS_LCA(X509 *, (___x), A0), \
 AROS_LCA(const char *, (___ipasc), A1), \
 AROS_LCA(unsigned int, (___flags), D1), \
     struct Library *, AMISSL_BASE_NAME, 4008, Amissl)

#define EVP_PKEY_asn1_set_item(___ameth, ___item_verify, ___item_sign) \
      AROS_LC3(void, EVP_PKEY_asn1_set_item, \
 AROS_LCA(EVP_PKEY_ASN1_METHOD *, (___ameth), A0), \
 AROS_LCA(int (*)(EVP_MD_CTX *,const ASN1_ITEM *,const void *,const X509_ALGOR *,const ASN1_BIT_STRING *,EVP_PKEY *), (___item_verify), A1), \
 AROS_LCA(int (*)(EVP_MD_CTX *,const ASN1_ITEM *,const void *,X509_ALGOR *,X509_ALGOR *,ASN1_BIT_STRING *), (___item_sign), A2), \
     struct Library *, AMISSL_BASE_NAME, 4010, Amissl)

#define DTLS_client_method() \
      AROS_LC0(const SSL_METHOD *, DTLS_client_method, \
     struct Library *, AMISSL_BASE_NAME, 4011, Amissl)

#define DTLS_method() \
      AROS_LC0(const SSL_METHOD *, DTLS_method, \
     struct Library *, AMISSL_BASE_NAME, 4012, Amissl)

#define DTLS_server_method() \
      AROS_LC0(const SSL_METHOD *, DTLS_server_method, \
     struct Library *, AMISSL_BASE_NAME, 4013, Amissl)

#define SSL_certs_clear(___s) \
      AROS_LC1(void, SSL_certs_clear, \
 AROS_LCA(SSL *, (___s), A0), \
     struct Library *, AMISSL_BASE_NAME, 4017, Amissl)

#define SSL_CIPHER_find(___ssl, ___ptr) \
      AROS_LC2(const SSL_CIPHER *, SSL_CIPHER_find, \
 AROS_LCA(SSL *, (___ssl), A0), \
 AROS_LCA(const unsigned char *, (___ptr), A1), \
     struct Library *, AMISSL_BASE_NAME, 4018, Amissl)

#define SSL_CONF_cmd(___ctx, ___cmd, ___value) \
      AROS_LC3(int, SSL_CONF_cmd, \
 AROS_LCA(SSL_CONF_CTX *, (___ctx), A0), \
 AROS_LCA(const char *, (___cmd), A1), \
 AROS_LCA(const char *, (___value), A2), \
     struct Library *, AMISSL_BASE_NAME, 4020, Amissl)

#define SSL_CONF_cmd_argv(___cctx, ___pargc, ___pargv) \
      AROS_LC3(int, SSL_CONF_cmd_argv, \
 AROS_LCA(SSL_CONF_CTX *, (___cctx), A0), \
 AROS_LCA(int *, (___pargc), A1), \
 AROS_LCA(char ***, (___pargv), A2), \
     struct Library *, AMISSL_BASE_NAME, 4021, Amissl)

#define SSL_CONF_cmd_value_type(___cctx, ___cmd) \
      AROS_LC2(int, SSL_CONF_cmd_value_type, \
 AROS_LCA(SSL_CONF_CTX *, (___cctx), A0), \
 AROS_LCA(const char *, (___cmd), A1), \
     struct Library *, AMISSL_BASE_NAME, 4022, Amissl)

#define SSL_CONF_CTX_clear_flags(___cctx, ___flags) \
      AROS_LC2(unsigned int, SSL_CONF_CTX_clear_flags, \
 AROS_LCA(SSL_CONF_CTX *, (___cctx), A0), \
 AROS_LCA(unsigned int, (___flags), A1), \
     struct Library *, AMISSL_BASE_NAME, 4023, Amissl)

#define SSL_CONF_CTX_finish(___cctx) \
      AROS_LC1(int, SSL_CONF_CTX_finish, \
 AROS_LCA(SSL_CONF_CTX *, (___cctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 4024, Amissl)

#define SSL_CONF_CTX_free(___cctx) \
      AROS_LC1(void, SSL_CONF_CTX_free, \
 AROS_LCA(SSL_CONF_CTX *, (___cctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 4025, Amissl)

#define SSL_CONF_CTX_new() \
      AROS_LC0(SSL_CONF_CTX *, SSL_CONF_CTX_new, \
     struct Library *, AMISSL_BASE_NAME, 4026, Amissl)

#define SSL_CONF_CTX_set1_prefix(___cctx, ___pre) \
      AROS_LC2(int, SSL_CONF_CTX_set1_prefix, \
 AROS_LCA(SSL_CONF_CTX *, (___cctx), A0), \
 AROS_LCA(const char *, (___pre), A1), \
     struct Library *, AMISSL_BASE_NAME, 4027, Amissl)

#define SSL_CONF_CTX_set_flags(___cctx, ___flags) \
      AROS_LC2(unsigned int, SSL_CONF_CTX_set_flags, \
 AROS_LCA(SSL_CONF_CTX *, (___cctx), A0), \
 AROS_LCA(unsigned int, (___flags), A1), \
     struct Library *, AMISSL_BASE_NAME, 4028, Amissl)

#define SSL_CONF_CTX_set_ssl(___cctx, ___ssl) \
      AROS_LC2(void, SSL_CONF_CTX_set_ssl, \
 AROS_LCA(SSL_CONF_CTX *, (___cctx), A0), \
 AROS_LCA(SSL *, (___ssl), A1), \
     struct Library *, AMISSL_BASE_NAME, 4029, Amissl)

#define SSL_CONF_CTX_set_ssl_ctx(___cctx, ___ctx) \
      AROS_LC2(void, SSL_CONF_CTX_set_ssl_ctx, \
 AROS_LCA(SSL_CONF_CTX *, (___cctx), A0), \
 AROS_LCA(SSL_CTX *, (___ctx), A1), \
     struct Library *, AMISSL_BASE_NAME, 4030, Amissl)

#define SSL_CTX_add_client_custom_ext(___ctx, ___ext_type, ___add_cb, ___free_cb, ___add_arg, ___parse_cb, ___parse_arg) \
      AROS_LC7(int, SSL_CTX_add_client_custom_ext, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
 AROS_LCA(unsigned int, (___ext_type), D0), \
 AROS_LCA(custom_ext_add_cb, (___add_cb), D1), \
 AROS_LCA(custom_ext_free_cb, (___free_cb), D2), \
 AROS_LCA(void *, (___add_arg), A1), \
 AROS_LCA(custom_ext_parse_cb, (___parse_cb), D3), \
 AROS_LCA(void *, (___parse_arg), A2), \
     struct Library *, AMISSL_BASE_NAME, 4031, Amissl)

#define SSL_CTX_add_server_custom_ext(___ctx, ___ext_type, ___add_cb, ___free_cb, ___add_arg, ___parse_cb, ___parse_arg) \
      AROS_LC7(int, SSL_CTX_add_server_custom_ext, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
 AROS_LCA(unsigned int, (___ext_type), D0), \
 AROS_LCA(custom_ext_add_cb, (___add_cb), D1), \
 AROS_LCA(custom_ext_free_cb, (___free_cb), D2), \
 AROS_LCA(void *, (___add_arg), A1), \
 AROS_LCA(custom_ext_parse_cb, (___parse_cb), D3), \
 AROS_LCA(void *, (___parse_arg), A2), \
     struct Library *, AMISSL_BASE_NAME, 4032, Amissl)

#define SSL_CTX_get0_certificate(___ctx) \
      AROS_LC1(X509 *, SSL_CTX_get0_certificate, \
 AROS_LCA(const SSL_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 4033, Amissl)

#define SSL_CTX_get0_param(___ctx) \
      AROS_LC1(X509_VERIFY_PARAM *, SSL_CTX_get0_param, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 4034, Amissl)

#define SSL_CTX_get0_privatekey(___ctx) \
      AROS_LC1(EVP_PKEY *, SSL_CTX_get0_privatekey, \
 AROS_LCA(const SSL_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 4035, Amissl)

#define SSL_CTX_get_ssl_method(___ctx) \
      AROS_LC1(const SSL_METHOD *, SSL_CTX_get_ssl_method, \
 AROS_LCA(const SSL_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 4036, Amissl)

#define SSL_CTX_set_alpn_protos(___ctx, ___protos, ___protos_len) \
      AROS_LC3(int, SSL_CTX_set_alpn_protos, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
 AROS_LCA(const unsigned char *, (___protos), A1), \
 AROS_LCA(unsigned int, (___protos_len), D0), \
     struct Library *, AMISSL_BASE_NAME, 4037, Amissl)

#define SSL_CTX_set_alpn_select_cb(___ctx, ___cb, ___arg) \
      AROS_LC3(void, SSL_CTX_set_alpn_select_cb, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
 AROS_LCA(SSL_CTX_alpn_select_cb_func, (___cb), A1), \
 AROS_LCA(void *, (___arg), A2), \
     struct Library *, AMISSL_BASE_NAME, 4038, Amissl)

#define SSL_CTX_set_cert_cb(___c, ___cb, ___arg) \
      AROS_LC3(void, SSL_CTX_set_cert_cb, \
 AROS_LCA(SSL_CTX *, (___c), A0), \
 AROS_LCA(int (*)(SSL *ssl,void *arg), (___cb), A1), \
 AROS_LCA(void *, (___arg), A2), \
     struct Library *, AMISSL_BASE_NAME, 4039, Amissl)

#define SSL_CTX_use_serverinfo(___ctx, ___serverinfo, ___serverinfo_length) \
      AROS_LC3(int, SSL_CTX_use_serverinfo, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
 AROS_LCA(const unsigned char *, (___serverinfo), A1), \
 AROS_LCA(size_t, (___serverinfo_length), D0), \
     struct Library *, AMISSL_BASE_NAME, 4040, Amissl)

#define SSL_CTX_use_serverinfo_file(___ctx, ___file) \
      AROS_LC2(int, SSL_CTX_use_serverinfo_file, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
 AROS_LCA(const char *, (___file), A1), \
     struct Library *, AMISSL_BASE_NAME, 4041, Amissl)

#define SSL_extension_supported(___ext_type) \
      AROS_LC1(int, SSL_extension_supported, \
 AROS_LCA(unsigned int, (___ext_type), D0), \
     struct Library *, AMISSL_BASE_NAME, 4042, Amissl)

#define SSL_get0_alpn_selected(___ssl, ___data, ___len) \
      AROS_LC3(void, SSL_get0_alpn_selected, \
 AROS_LCA(const SSL *, (___ssl), A0), \
 AROS_LCA(const unsigned char **, (___data), A1), \
 AROS_LCA(unsigned int *, (___len), A2), \
     struct Library *, AMISSL_BASE_NAME, 4043, Amissl)

#define SSL_get0_param(___ssl) \
      AROS_LC1(X509_VERIFY_PARAM *, SSL_get0_param, \
 AROS_LCA(SSL *, (___ssl), A0), \
     struct Library *, AMISSL_BASE_NAME, 4044, Amissl)

#define SSL_is_server(___s) \
      AROS_LC1(int, SSL_is_server, \
 AROS_LCA(const SSL *, (___s), A0), \
     struct Library *, AMISSL_BASE_NAME, 4045, Amissl)

#define SSL_set_alpn_protos(___ssl, ___protos, ___protos_len) \
      AROS_LC3(int, SSL_set_alpn_protos, \
 AROS_LCA(SSL *, (___ssl), A0), \
 AROS_LCA(const unsigned char *, (___protos), A1), \
 AROS_LCA(unsigned int, (___protos_len), A2), \
     struct Library *, AMISSL_BASE_NAME, 4046, Amissl)

#define SSL_set_cert_cb(___s, ___cb, ___arg) \
      AROS_LC3(void, SSL_set_cert_cb, \
 AROS_LCA(SSL *, (___s), A0), \
 AROS_LCA(int (*)(SSL *ssl,void *arg), (___cb), A1), \
 AROS_LCA(void *, (___arg), A2), \
     struct Library *, AMISSL_BASE_NAME, 4047, Amissl)

#define SSL_check_chain(___s, ___x, ___pk, ___chain) \
      AROS_LC4(int, SSL_check_chain, \
 AROS_LCA(SSL *, (___s), A0), \
 AROS_LCA(X509 *, (___x), A1), \
 AROS_LCA(EVP_PKEY *, (___pk), A2), \
 AROS_LCA(STACK_OF(X509) *, (___chain), A3), \
     struct Library *, AMISSL_BASE_NAME, 4048, Amissl)

#define SSL_get_shared_sigalgs(___s, ___idx, ___psign, ___phash, ___psignandhash, ___rsig, ___rhash) \
      AROS_LC7(int, SSL_get_shared_sigalgs, \
 AROS_LCA(SSL *, (___s), A0), \
 AROS_LCA(int, (___idx), D0), \
 AROS_LCA(int *, (___psign), A1), \
 AROS_LCA(int *, (___phash), A2), \
 AROS_LCA(int *, (___psignandhash), A3), \
 AROS_LCA(unsigned char *, (___rsig), D1), \
 AROS_LCA(unsigned char *, (___rhash), D2), \
     struct Library *, AMISSL_BASE_NAME, 4049, Amissl)

#define SSL_get_sigalgs(___s, ___idx, ___psign, ___phash, ___psignandhash, ___rsig, ___rhash) \
      AROS_LC7(int, SSL_get_sigalgs, \
 AROS_LCA(SSL *, (___s), A0), \
 AROS_LCA(int, (___idx), D0), \
 AROS_LCA(int *, (___psign), A1), \
 AROS_LCA(int *, (___phash), A2), \
 AROS_LCA(int *, (___psignandhash), A3), \
 AROS_LCA(unsigned char *, (___rsig), D1), \
 AROS_LCA(unsigned char *, (___rhash), D2), \
     struct Library *, AMISSL_BASE_NAME, 4050, Amissl)

#define ASN1_add_stable_module() \
      AROS_LC0(void, ASN1_add_stable_module, \
     struct Library *, AMISSL_BASE_NAME, 4051, Amissl)

#define ASN1_buf_print(___bp, ___buf, ___buflen, ___off) \
      AROS_LC4(int, ASN1_buf_print, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(const unsigned char *, (___buf), A1), \
 AROS_LCA(size_t, (___buflen), A2), \
 AROS_LCA(int, (___off), D0), \
     struct Library *, AMISSL_BASE_NAME, 4052, Amissl)

#define ASN1_ENUMERATED_get_int64(___pr, ___a) \
      AROS_LC2(int, ASN1_ENUMERATED_get_int64, \
 AROS_LCA(int64_t *, (___pr), A0), \
 AROS_LCA(const ASN1_ENUMERATED *, (___a), A1), \
     struct Library *, AMISSL_BASE_NAME, 4053, Amissl)

#define ASN1_ENUMERATED_set_int64(___a, ___r) \
      AROS_LC2(int, ASN1_ENUMERATED_set_int64, \
 AROS_LCA(ASN1_ENUMERATED *, (___a), A0), \
 AROS_LCA(int64_t, (___r), D0), \
     struct Library *, AMISSL_BASE_NAME, 4054, Amissl)

#define ASN1_INTEGER_get_int64(___pr, ___a) \
      AROS_LC2(int, ASN1_INTEGER_get_int64, \
 AROS_LCA(int64_t *, (___pr), A0), \
 AROS_LCA(const ASN1_INTEGER *, (___a), A1), \
     struct Library *, AMISSL_BASE_NAME, 4055, Amissl)

#define ASN1_INTEGER_get_uint64(___pr, ___a) \
      AROS_LC2(int, ASN1_INTEGER_get_uint64, \
 AROS_LCA(uint64_t *, (___pr), A0), \
 AROS_LCA(const ASN1_INTEGER *, (___a), A1), \
     struct Library *, AMISSL_BASE_NAME, 4056, Amissl)

#define ASN1_INTEGER_set_int64(___a, ___r) \
      AROS_LC2(int, ASN1_INTEGER_set_int64, \
 AROS_LCA(ASN1_INTEGER *, (___a), A0), \
 AROS_LCA(int64_t, (___r), D0), \
     struct Library *, AMISSL_BASE_NAME, 4057, Amissl)

#define ASN1_INTEGER_set_uint64(___a, ___r) \
      AROS_LC2(int, ASN1_INTEGER_set_uint64, \
 AROS_LCA(ASN1_INTEGER *, (___a), A0), \
 AROS_LCA(uint64_t, (___r), D0), \
     struct Library *, AMISSL_BASE_NAME, 4058, Amissl)

#define ASN1_SCTX_free(___p) \
      AROS_LC1(void, ASN1_SCTX_free, \
 AROS_LCA(ASN1_SCTX *, (___p), A0), \
     struct Library *, AMISSL_BASE_NAME, 4059, Amissl)

#define ASN1_SCTX_get_app_data(___p) \
      AROS_LC1(void *, ASN1_SCTX_get_app_data, \
 AROS_LCA(ASN1_SCTX *, (___p), A0), \
     struct Library *, AMISSL_BASE_NAME, 4060, Amissl)

#define ASN1_SCTX_get_flags(___p) \
      AROS_LC1(unsigned long, ASN1_SCTX_get_flags, \
 AROS_LCA(ASN1_SCTX *, (___p), A0), \
     struct Library *, AMISSL_BASE_NAME, 4061, Amissl)

#define ASN1_SCTX_get_item(___p) \
      AROS_LC1(const ASN1_ITEM *, ASN1_SCTX_get_item, \
 AROS_LCA(ASN1_SCTX *, (___p), A0), \
     struct Library *, AMISSL_BASE_NAME, 4062, Amissl)

#define ASN1_SCTX_get_template(___p) \
      AROS_LC1(const ASN1_TEMPLATE *, ASN1_SCTX_get_template, \
 AROS_LCA(ASN1_SCTX *, (___p), A0), \
     struct Library *, AMISSL_BASE_NAME, 4063, Amissl)

#define ASN1_SCTX_new(___scan_cb) \
      AROS_LC1(ASN1_SCTX *, ASN1_SCTX_new, \
 AROS_LCA(int (*)(ASN1_SCTX *), (___scan_cb), A0), \
     struct Library *, AMISSL_BASE_NAME, 4064, Amissl)

#define ASN1_SCTX_set_app_data(___p, ___data) \
      AROS_LC2(void, ASN1_SCTX_set_app_data, \
 AROS_LCA(ASN1_SCTX *, (___p), A0), \
 AROS_LCA(void *, (___data), A1), \
     struct Library *, AMISSL_BASE_NAME, 4065, Amissl)

#define ASN1_str2mask(___str, ___pmask) \
      AROS_LC2(int, ASN1_str2mask, \
 AROS_LCA(const char *, (___str), A0), \
 AROS_LCA(unsigned long *, (___pmask), A1), \
     struct Library *, AMISSL_BASE_NAME, 4066, Amissl)

#define ASN1_TYPE_pack_sequence(___it, ___s, ___t) \
      AROS_LC3(ASN1_TYPE *, ASN1_TYPE_pack_sequence, \
 AROS_LCA(const ASN1_ITEM *, (___it), A0), \
 AROS_LCA(void *, (___s), A1), \
 AROS_LCA(ASN1_TYPE **, (___t), A2), \
     struct Library *, AMISSL_BASE_NAME, 4067, Amissl)

#define ASN1_TYPE_unpack_sequence(___it, ___t) \
      AROS_LC2(void *, ASN1_TYPE_unpack_sequence, \
 AROS_LCA(const ASN1_ITEM *, (___it), A0), \
 AROS_LCA(const ASN1_TYPE *, (___t), A1), \
     struct Library *, AMISSL_BASE_NAME, 4068, Amissl)

#define ASYNC_block_pause() \
      AROS_LC0(void, ASYNC_block_pause, \
     struct Library *, AMISSL_BASE_NAME, 4069, Amissl)

#define ASYNC_cleanup_thread() \
      AROS_LC0(void, ASYNC_cleanup_thread, \
     struct Library *, AMISSL_BASE_NAME, 4070, Amissl)

#define ASYNC_get_current_job() \
      AROS_LC0(ASYNC_JOB *, ASYNC_get_current_job, \
     struct Library *, AMISSL_BASE_NAME, 4072, Amissl)

#define ASYNC_init_thread(___max_size, ___init_size) \
      AROS_LC2(int, ASYNC_init_thread, \
 AROS_LCA(size_t, (___max_size), D0), \
 AROS_LCA(size_t, (___init_size), D1), \
     struct Library *, AMISSL_BASE_NAME, 4074, Amissl)

#define ASYNC_pause_job() \
      AROS_LC0(int, ASYNC_pause_job, \
     struct Library *, AMISSL_BASE_NAME, 4075, Amissl)

#define ASYNC_start_job(___job, ___ctx, ___ret, ___func, ___args, ___size) \
      AROS_LC6(int, ASYNC_start_job, \
 AROS_LCA(ASYNC_JOB **, (___job), A0), \
 AROS_LCA(ASYNC_WAIT_CTX *, (___ctx), A1), \
 AROS_LCA(int *, (___ret), A2), \
 AROS_LCA(int (*)(void *), (___func), A3), \
 AROS_LCA(void *, (___args), D0), \
 AROS_LCA(size_t, (___size), D1), \
     struct Library *, AMISSL_BASE_NAME, 4076, Amissl)

#define ASYNC_unblock_pause() \
      AROS_LC0(void, ASYNC_unblock_pause, \
     struct Library *, AMISSL_BASE_NAME, 4077, Amissl)

#define ERR_load_ASYNC_strings() \
      AROS_LC0(int, ERR_load_ASYNC_strings, \
     struct Library *, AMISSL_BASE_NAME, 4079, Amissl)

#define BIO_accept_ex(___accept_sock, ___addr, ___options) \
      AROS_LC3(int, BIO_accept_ex, \
 AROS_LCA(int, (___accept_sock), D0), \
 AROS_LCA(BIO_ADDR *, (___addr), A0), \
 AROS_LCA(int, (___options), D1), \
     struct Library *, AMISSL_BASE_NAME, 4080, Amissl)

#define BIO_ADDR_clear(___ap) \
      AROS_LC1(void, BIO_ADDR_clear, \
 AROS_LCA(BIO_ADDR *, (___ap), A0), \
     struct Library *, AMISSL_BASE_NAME, 4081, Amissl)

#define BIO_ADDR_family(___ap) \
      AROS_LC1(int, BIO_ADDR_family, \
 AROS_LCA(const BIO_ADDR *, (___ap), A0), \
     struct Library *, AMISSL_BASE_NAME, 4082, Amissl)

#define BIO_ADDR_free(___ap) \
      AROS_LC1(void, BIO_ADDR_free, \
 AROS_LCA(BIO_ADDR *, (___ap), A0), \
     struct Library *, AMISSL_BASE_NAME, 4083, Amissl)

#define BIO_ADDR_hostname_string(___ap, ___numeric) \
      AROS_LC2(char *, BIO_ADDR_hostname_string, \
 AROS_LCA(const BIO_ADDR *, (___ap), A0), \
 AROS_LCA(int, (___numeric), A1), \
     struct Library *, AMISSL_BASE_NAME, 4084, Amissl)

#define BIO_ADDR_new() \
      AROS_LC0(BIO_ADDR *, BIO_ADDR_new, \
     struct Library *, AMISSL_BASE_NAME, 4085, Amissl)

#define BIO_ADDR_path_string(___ap) \
      AROS_LC1(char *, BIO_ADDR_path_string, \
 AROS_LCA(const BIO_ADDR *, (___ap), A0), \
     struct Library *, AMISSL_BASE_NAME, 4086, Amissl)

#define BIO_ADDR_rawaddress(___ap, ___p, ___l) \
      AROS_LC3(int, BIO_ADDR_rawaddress, \
 AROS_LCA(const BIO_ADDR *, (___ap), A0), \
 AROS_LCA(void *, (___p), A1), \
 AROS_LCA(size_t *, (___l), A2), \
     struct Library *, AMISSL_BASE_NAME, 4087, Amissl)

#define BIO_ADDR_rawmake(___ap, ___family, ___where, ___wherelen, ___port) \
      AROS_LC5(int, BIO_ADDR_rawmake, \
 AROS_LCA(BIO_ADDR *, (___ap), A0), \
 AROS_LCA(int, (___family), D0), \
 AROS_LCA(const void *, (___where), A1), \
 AROS_LCA(size_t, (___wherelen), D1), \
 AROS_LCA(unsigned short, (___port), D2), \
     struct Library *, AMISSL_BASE_NAME, 4088, Amissl)

#define BIO_ADDR_rawport(___ap) \
      AROS_LC1(unsigned short, BIO_ADDR_rawport, \
 AROS_LCA(const BIO_ADDR *, (___ap), A0), \
     struct Library *, AMISSL_BASE_NAME, 4089, Amissl)

#define BIO_ADDR_service_string(___ap, ___numeric) \
      AROS_LC2(char *, BIO_ADDR_service_string, \
 AROS_LCA(const BIO_ADDR *, (___ap), A0), \
 AROS_LCA(int, (___numeric), D0), \
     struct Library *, AMISSL_BASE_NAME, 4090, Amissl)

#define BIO_ADDRINFO_address(___bai) \
      AROS_LC1(const BIO_ADDR *, BIO_ADDRINFO_address, \
 AROS_LCA(const BIO_ADDRINFO *, (___bai), A0), \
     struct Library *, AMISSL_BASE_NAME, 4091, Amissl)

#define BIO_ADDRINFO_family(___bai) \
      AROS_LC1(int, BIO_ADDRINFO_family, \
 AROS_LCA(const BIO_ADDRINFO *, (___bai), A0), \
     struct Library *, AMISSL_BASE_NAME, 4092, Amissl)

#define BIO_ADDRINFO_free(___bai) \
      AROS_LC1(void, BIO_ADDRINFO_free, \
 AROS_LCA(BIO_ADDRINFO *, (___bai), A0), \
     struct Library *, AMISSL_BASE_NAME, 4093, Amissl)

#define BIO_ADDRINFO_next(___bai) \
      AROS_LC1(const BIO_ADDRINFO *, BIO_ADDRINFO_next, \
 AROS_LCA(const BIO_ADDRINFO *, (___bai), A0), \
     struct Library *, AMISSL_BASE_NAME, 4094, Amissl)

#define BIO_ADDRINFO_protocol(___bai) \
      AROS_LC1(int, BIO_ADDRINFO_protocol, \
 AROS_LCA(const BIO_ADDRINFO *, (___bai), A0), \
     struct Library *, AMISSL_BASE_NAME, 4095, Amissl)

#define BIO_ADDRINFO_socktype(___bai) \
      AROS_LC1(int, BIO_ADDRINFO_socktype, \
 AROS_LCA(const BIO_ADDRINFO *, (___bai), A0), \
     struct Library *, AMISSL_BASE_NAME, 4096, Amissl)

#define BIO_closesocket(___sock) \
      AROS_LC1(int, BIO_closesocket, \
 AROS_LCA(int, (___sock), D0), \
     struct Library *, AMISSL_BASE_NAME, 4097, Amissl)

#define BIO_connect(___sock, ___addr, ___options) \
      AROS_LC3(int, BIO_connect, \
 AROS_LCA(int, (___sock), D0), \
 AROS_LCA(const BIO_ADDR *, (___addr), A0), \
 AROS_LCA(int, (___options), D1), \
     struct Library *, AMISSL_BASE_NAME, 4098, Amissl)

#define BIO_listen(___sock, ___addr, ___options) \
      AROS_LC3(int, BIO_listen, \
 AROS_LCA(int, (___sock), D0), \
 AROS_LCA(const BIO_ADDR *, (___addr), A0), \
 AROS_LCA(int, (___options), D1), \
     struct Library *, AMISSL_BASE_NAME, 4099, Amissl)

#define BIO_lookup(___host, ___service, ___lookup_type, ___family, ___socktype, ___res) \
      AROS_LC6(int, BIO_lookup, \
 AROS_LCA(const char *, (___host), A0), \
 AROS_LCA(const char *, (___service), A1), \
 AROS_LCA(enum BIO_lookup_type, (___lookup_type), D0), \
 AROS_LCA(int, (___family), D1), \
 AROS_LCA(int, (___socktype), D2), \
 AROS_LCA(BIO_ADDRINFO **, (___res), A2), \
     struct Library *, AMISSL_BASE_NAME, 4100, Amissl)

#define BIO_parse_hostserv(___hostserv, ___host, ___service, ___hostserv_prio) \
      AROS_LC4(int, BIO_parse_hostserv, \
 AROS_LCA(const char *, (___hostserv), A0), \
 AROS_LCA(char **, (___host), A1), \
 AROS_LCA(char **, (___service), A2), \
 AROS_LCA(enum BIO_hostserv_priorities, (___hostserv_prio), D0), \
     struct Library *, AMISSL_BASE_NAME, 4101, Amissl)

#define BIO_s_secmem() \
      AROS_LC0(const BIO_METHOD *, BIO_s_secmem, \
     struct Library *, AMISSL_BASE_NAME, 4102, Amissl)

#define BIO_sock_info(___sock, ___type, ___info) \
      AROS_LC3(int, BIO_sock_info, \
 AROS_LCA(int, (___sock), D0), \
 AROS_LCA(enum BIO_sock_info_type, (___type), D1), \
 AROS_LCA(union BIO_sock_info_u *, (___info), A0), \
     struct Library *, AMISSL_BASE_NAME, 4103, Amissl)

#define BIO_socket(___domain, ___socktype, ___protocol, ___options) \
      AROS_LC4(int, BIO_socket, \
 AROS_LCA(int, (___domain), D0), \
 AROS_LCA(int, (___socktype), D1), \
 AROS_LCA(int, (___protocol), D2), \
 AROS_LCA(int, (___options), D3), \
     struct Library *, AMISSL_BASE_NAME, 4104, Amissl)

#define BN_abs_is_word(___a, ___w) \
      AROS_LC2(int, BN_abs_is_word, \
 AROS_LCA(const BIGNUM *, (___a), A0), \
 AROS_LCA(const BN_ULONG, (___w), D0), \
     struct Library *, AMISSL_BASE_NAME, 4105, Amissl)

#define BN_bn2binpad(___a, ___to, ___tolen) \
      AROS_LC3(int, BN_bn2binpad, \
 AROS_LCA(const BIGNUM *, (___a), A0), \
 AROS_LCA(unsigned char *, (___to), A1), \
 AROS_LCA(int, (___tolen), D0), \
     struct Library *, AMISSL_BASE_NAME, 4106, Amissl)

#define BN_bn2lebinpad(___a, ___to, ___tolen) \
      AROS_LC3(int, BN_bn2lebinpad, \
 AROS_LCA(const BIGNUM *, (___a), A0), \
 AROS_LCA(unsigned char *, (___to), A1), \
 AROS_LCA(int, (___tolen), D0), \
     struct Library *, AMISSL_BASE_NAME, 4107, Amissl)

#define BN_CTX_secure_new() \
      AROS_LC0(BN_CTX *, BN_CTX_secure_new, \
     struct Library *, AMISSL_BASE_NAME, 4108, Amissl)

#define BN_GENCB_free(___cb) \
      AROS_LC1(void, BN_GENCB_free, \
 AROS_LCA(BN_GENCB *, (___cb), A0), \
     struct Library *, AMISSL_BASE_NAME, 4109, Amissl)

#define BN_GENCB_get_arg(___cb) \
      AROS_LC1(void *, BN_GENCB_get_arg, \
 AROS_LCA(BN_GENCB *, (___cb), A0), \
     struct Library *, AMISSL_BASE_NAME, 4110, Amissl)

#define BN_GENCB_new() \
      AROS_LC0(BN_GENCB *, BN_GENCB_new, \
     struct Library *, AMISSL_BASE_NAME, 4111, Amissl)

#define BN_GENCB_set(___gencb, ___callback, ___cb_arg) \
      AROS_LC3(void, BN_GENCB_set, \
 AROS_LCA(BN_GENCB *, (___gencb), A0), \
 AROS_LCA(int (*)(int,int,BN_GENCB *), (___callback), A1), \
 AROS_LCA(void *, (___cb_arg), A2), \
     struct Library *, AMISSL_BASE_NAME, 4112, Amissl)

#define BN_GENCB_set_old(___gencb, ___callback, ___cb_arg) \
      AROS_LC3(void, BN_GENCB_set_old, \
 AROS_LCA(BN_GENCB *, (___gencb), A0), \
 AROS_LCA(void (*)(int,int,void *), (___callback), A1), \
 AROS_LCA(void *, (___cb_arg), A2), \
     struct Library *, AMISSL_BASE_NAME, 4113, Amissl)

#define BN_generate_dsa_nonce(___out, ___range, ___priv, ___message, ___message_len, ___ctx) \
      AROS_LC6(int, BN_generate_dsa_nonce, \
 AROS_LCA(BIGNUM *, (___out), A0), \
 AROS_LCA(const BIGNUM *, (___range), A1), \
 AROS_LCA(const BIGNUM *, (___priv), A2), \
 AROS_LCA(const unsigned char *, (___message), A3), \
 AROS_LCA(size_t, (___message_len), D0), \
 AROS_LCA(BN_CTX *, (___ctx), D1), \
     struct Library *, AMISSL_BASE_NAME, 4114, Amissl)

#define BN_get_flags(___b, ___n) \
      AROS_LC2(int, BN_get_flags, \
 AROS_LCA(const BIGNUM *, (___b), A0), \
 AROS_LCA(int, (___n), D0), \
     struct Library *, AMISSL_BASE_NAME, 4115, Amissl)

#define BN_is_negative(___a) \
      AROS_LC1(int, BN_is_negative, \
 AROS_LCA(const BIGNUM *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 4116, Amissl)

#define BN_is_odd(___a) \
      AROS_LC1(int, BN_is_odd, \
 AROS_LCA(const BIGNUM *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 4117, Amissl)

#define BN_is_one(___a) \
      AROS_LC1(int, BN_is_one, \
 AROS_LCA(const BIGNUM *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 4118, Amissl)

#define BN_is_word(___a, ___w) \
      AROS_LC2(int, BN_is_word, \
 AROS_LCA(const BIGNUM *, (___a), A0), \
 AROS_LCA(const BN_ULONG, (___w), D0), \
     struct Library *, AMISSL_BASE_NAME, 4119, Amissl)

#define BN_is_zero(___a) \
      AROS_LC1(int, BN_is_zero, \
 AROS_LCA(const BIGNUM *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 4120, Amissl)

#define BN_lebin2bn(___s, ___len, ___ret) \
      AROS_LC3(BIGNUM *, BN_lebin2bn, \
 AROS_LCA(const unsigned char *, (___s), A0), \
 AROS_LCA(int, (___len), D0), \
 AROS_LCA(BIGNUM *, (___ret), A1), \
     struct Library *, AMISSL_BASE_NAME, 4121, Amissl)

#define BN_nist_mod_func(___p) \
      AROS_LC1(int (*)(BIGNUM *, const BIGNUM *, const BIGNUM *, BN_CTX *), BN_nist_mod_func, \
 AROS_LCA(const BIGNUM *, (___p), A0), \
     struct Library *, AMISSL_BASE_NAME, 4122, Amissl)

#define BN_secure_new() \
      AROS_LC0(BIGNUM *, BN_secure_new, \
     struct Library *, AMISSL_BASE_NAME, 4123, Amissl)

#define BN_security_bits(___L, ___N) \
      AROS_LC2(int, BN_security_bits, \
 AROS_LCA(int, (___L), D0), \
 AROS_LCA(int, (___N), D1), \
     struct Library *, AMISSL_BASE_NAME, 4124, Amissl)

#define BN_set_flags(___b, ___n) \
      AROS_LC2(void, BN_set_flags, \
 AROS_LCA(BIGNUM *, (___b), A0), \
 AROS_LCA(int, (___n), D0), \
     struct Library *, AMISSL_BASE_NAME, 4125, Amissl)

#define BN_to_montgomery(___r, ___a, ___mont, ___ctx) \
      AROS_LC4(int, BN_to_montgomery, \
 AROS_LCA(BIGNUM *, (___r), A0), \
 AROS_LCA(const BIGNUM *, (___a), A1), \
 AROS_LCA(BN_MONT_CTX *, (___mont), A2), \
 AROS_LCA(BN_CTX *, (___ctx), A3), \
     struct Library *, AMISSL_BASE_NAME, 4126, Amissl)

#define BN_with_flags(___dest, ___b, ___flags) \
      AROS_LC3(void, BN_with_flags, \
 AROS_LCA(BIGNUM *, (___dest), A0), \
 AROS_LCA(const BIGNUM *, (___b), A1), \
 AROS_LCA(int, (___flags), D0), \
     struct Library *, AMISSL_BASE_NAME, 4127, Amissl)

#define BN_zero_ex(___a) \
      AROS_LC1(void, BN_zero_ex, \
 AROS_LCA(BIGNUM *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 4128, Amissl)

#define BUF_MEM_new_ex(___flags) \
      AROS_LC1(BUF_MEM *, BUF_MEM_new_ex, \
 AROS_LCA(unsigned long, (___flags), D0), \
     struct Library *, AMISSL_BASE_NAME, 4129, Amissl)

#define COMP_CTX_get_method(___ctx) \
      AROS_LC1(const COMP_METHOD *, COMP_CTX_get_method, \
 AROS_LCA(const COMP_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 4130, Amissl)

#define COMP_CTX_get_type(___ctx) \
      AROS_LC1(int, COMP_CTX_get_type, \
 AROS_LCA(const COMP_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 4131, Amissl)

#define COMP_get_name(___meth) \
      AROS_LC1(const char *, COMP_get_name, \
 AROS_LCA(const COMP_METHOD *, (___meth), A0), \
     struct Library *, AMISSL_BASE_NAME, 4132, Amissl)

#define COMP_get_type(___meth) \
      AROS_LC1(int, COMP_get_type, \
 AROS_LCA(const COMP_METHOD *, (___meth), A0), \
     struct Library *, AMISSL_BASE_NAME, 4133, Amissl)

#define CRYPTO_clear_free(___str, ___num, ___file, ___line) \
      AROS_LC4(void, CRYPTO_clear_free, \
 AROS_LCA(void *, (___str), A0), \
 AROS_LCA(size_t, (___num), D0), \
 AROS_LCA(const char *, (___file), A1), \
 AROS_LCA(int, (___line), D1), \
     struct Library *, AMISSL_BASE_NAME, 4134, Amissl)

#define CRYPTO_clear_realloc(___str, ___old_len, ___num, ___file, ___line) \
      AROS_LC5(void *, CRYPTO_clear_realloc, \
 AROS_LCA(void *, (___str), A0), \
 AROS_LCA(size_t, (___old_len), D0), \
 AROS_LCA(size_t, (___num), D1), \
 AROS_LCA(const char *, (___file), A1), \
 AROS_LCA(int, (___line), D2), \
     struct Library *, AMISSL_BASE_NAME, 4135, Amissl)

#define CRYPTO_free_ex_index(___class_index, ___idx) \
      AROS_LC2(int, CRYPTO_free_ex_index, \
 AROS_LCA(int, (___class_index), D0), \
 AROS_LCA(int, (___idx), D1), \
     struct Library *, AMISSL_BASE_NAME, 4136, Amissl)

#define CRYPTO_memdup(___data, ___siz, ___file, ___line) \
      AROS_LC4(void *, CRYPTO_memdup, \
 AROS_LCA(const void *, (___data), A0), \
 AROS_LCA(size_t, (___siz), D0), \
 AROS_LCA(const char *, (___file), A1), \
 AROS_LCA(int, (___line), D1), \
     struct Library *, AMISSL_BASE_NAME, 4137, Amissl)

#define CRYPTO_secure_actual_size(___ptr) \
      AROS_LC1(size_t, CRYPTO_secure_actual_size, \
 AROS_LCA(void *, (___ptr), A0), \
     struct Library *, AMISSL_BASE_NAME, 4138, Amissl)

#define CRYPTO_secure_allocated(___ptr) \
      AROS_LC1(int, CRYPTO_secure_allocated, \
 AROS_LCA(const void *, (___ptr), A0), \
     struct Library *, AMISSL_BASE_NAME, 4139, Amissl)

#define CRYPTO_secure_free(___ptr, ___file, ___line) \
      AROS_LC3(void, CRYPTO_secure_free, \
 AROS_LCA(void *, (___ptr), A0), \
 AROS_LCA(const char *, (___file), A1), \
 AROS_LCA(int, (___line), D0), \
     struct Library *, AMISSL_BASE_NAME, 4140, Amissl)

#define CRYPTO_secure_malloc(___num, ___file, ___line) \
      AROS_LC3(void *, CRYPTO_secure_malloc, \
 AROS_LCA(size_t, (___num), D0), \
 AROS_LCA(const char *, (___file), A0), \
 AROS_LCA(int, (___line), D1), \
     struct Library *, AMISSL_BASE_NAME, 4141, Amissl)

#define CRYPTO_secure_malloc_done() \
      AROS_LC0(int, CRYPTO_secure_malloc_done, \
     struct Library *, AMISSL_BASE_NAME, 4142, Amissl)

#define CRYPTO_secure_malloc_init(___sz, ___minsize) \
      AROS_LC2(int, CRYPTO_secure_malloc_init, \
 AROS_LCA(size_t, (___sz), D0), \
 AROS_LCA(size_t, (___minsize), D1), \
     struct Library *, AMISSL_BASE_NAME, 4143, Amissl)

#define CRYPTO_secure_malloc_initialized() \
      AROS_LC0(int, CRYPTO_secure_malloc_initialized, \
     struct Library *, AMISSL_BASE_NAME, 4144, Amissl)

#define CRYPTO_secure_used() \
      AROS_LC0(size_t, CRYPTO_secure_used, \
     struct Library *, AMISSL_BASE_NAME, 4145, Amissl)

#define CRYPTO_secure_zalloc(___num, ___file, ___line) \
      AROS_LC3(void *, CRYPTO_secure_zalloc, \
 AROS_LCA(size_t, (___num), D0), \
 AROS_LCA(const char *, (___file), A0), \
 AROS_LCA(int, (___line), D1), \
     struct Library *, AMISSL_BASE_NAME, 4146, Amissl)

#define CRYPTO_strndup(___str, ___s, ___file, ___line) \
      AROS_LC4(char *, CRYPTO_strndup, \
 AROS_LCA(const char *, (___str), A0), \
 AROS_LCA(size_t, (___s), D0), \
 AROS_LCA(const char *, (___file), A1), \
 AROS_LCA(int, (___line), D1), \
     struct Library *, AMISSL_BASE_NAME, 4148, Amissl)

#define CRYPTO_zalloc(___num, ___file, ___line) \
      AROS_LC3(void *, CRYPTO_zalloc, \
 AROS_LCA(size_t, (___num), D0), \
 AROS_LCA(const char *, (___file), A0), \
 AROS_LCA(int, (___line), D1), \
     struct Library *, AMISSL_BASE_NAME, 4149, Amissl)

#define OPENSSL_atexit(___handler) \
      AROS_LC1(int, OPENSSL_atexit, \
 AROS_LCA(void (*)(void), (___handler), A0), \
     struct Library *, AMISSL_BASE_NAME, 4150, Amissl)

#define OPENSSL_cleanup() \
      AROS_LC0(void, OPENSSL_cleanup, \
     struct Library *, AMISSL_BASE_NAME, 4151, Amissl)

#define OPENSSL_init_crypto(___opts, ___settings) \
      AROS_LC2(int, OPENSSL_init_crypto, \
 AROS_LCA(uint64_t, (___opts), D0), \
 AROS_LCA(const OPENSSL_INIT_SETTINGS *, (___settings), A0), \
     struct Library *, AMISSL_BASE_NAME, 4152, Amissl)

#define OPENSSL_INIT_free(___settings) \
      AROS_LC1(void, OPENSSL_INIT_free, \
 AROS_LCA(OPENSSL_INIT_SETTINGS *, (___settings), A0), \
     struct Library *, AMISSL_BASE_NAME, 4153, Amissl)

#define OPENSSL_INIT_new() \
      AROS_LC0(OPENSSL_INIT_SETTINGS *, OPENSSL_INIT_new, \
     struct Library *, AMISSL_BASE_NAME, 4154, Amissl)

#define OPENSSL_strlcat(___dst, ___src, ___size) \
      AROS_LC3(size_t, OPENSSL_strlcat, \
 AROS_LCA(char *, (___dst), A0), \
 AROS_LCA(const char *, (___src), A1), \
 AROS_LCA(size_t, (___size), D0), \
     struct Library *, AMISSL_BASE_NAME, 4156, Amissl)

#define OPENSSL_strlcpy(___dst, ___src, ___size) \
      AROS_LC3(size_t, OPENSSL_strlcpy, \
 AROS_LCA(char *, (___dst), A0), \
 AROS_LCA(const char *, (___src), A1), \
 AROS_LCA(size_t, (___size), D0), \
     struct Library *, AMISSL_BASE_NAME, 4157, Amissl)

#define OPENSSL_strnlen(___str, ___maxlen) \
      AROS_LC2(size_t, OPENSSL_strnlen, \
 AROS_LCA(const char *, (___str), A0), \
 AROS_LCA(size_t, (___maxlen), D0), \
     struct Library *, AMISSL_BASE_NAME, 4158, Amissl)

#define OPENSSL_thread_stop() \
      AROS_LC0(void, OPENSSL_thread_stop, \
     struct Library *, AMISSL_BASE_NAME, 4159, Amissl)

#define OpenSSL_version(___type) \
      AROS_LC1(const char *, OpenSSL_version, \
 AROS_LCA(int, (___type), D0), \
     struct Library *, AMISSL_BASE_NAME, 4160, Amissl)

#define OpenSSL_version_num() \
      AROS_LC0(unsigned long, OpenSSL_version_num, \
     struct Library *, AMISSL_BASE_NAME, 4161, Amissl)

#define DH_bits(___dh) \
      AROS_LC1(int, DH_bits, \
 AROS_LCA(const DH *, (___dh), A0), \
     struct Library *, AMISSL_BASE_NAME, 4162, Amissl)

#define DH_security_bits(___dh) \
      AROS_LC1(int, DH_security_bits, \
 AROS_LCA(const DH *, (___dh), A0), \
     struct Library *, AMISSL_BASE_NAME, 4163, Amissl)

#define DSA_security_bits(___d) \
      AROS_LC1(int, DSA_security_bits, \
 AROS_LCA(const DSA *, (___d), A0), \
     struct Library *, AMISSL_BASE_NAME, 4164, Amissl)

#define EC_GROUP_get0_cofactor(___group) \
      AROS_LC1(const BIGNUM *, EC_GROUP_get0_cofactor, \
 AROS_LCA(const EC_GROUP *, (___group), A0), \
     struct Library *, AMISSL_BASE_NAME, 4165, Amissl)

#define EC_GROUP_get0_order(___group) \
      AROS_LC1(const BIGNUM *, EC_GROUP_get0_order, \
 AROS_LCA(const EC_GROUP *, (___group), A0), \
     struct Library *, AMISSL_BASE_NAME, 4166, Amissl)

#define EC_GROUP_order_bits(___group) \
      AROS_LC1(int, EC_GROUP_order_bits, \
 AROS_LCA(const EC_GROUP *, (___group), A0), \
     struct Library *, AMISSL_BASE_NAME, 4167, Amissl)

#define EC_KEY_get_default_method() \
      AROS_LC0(const EC_KEY_METHOD *, EC_KEY_get_default_method, \
     struct Library *, AMISSL_BASE_NAME, 4168, Amissl)

#define EC_KEY_get_ex_data(___key, ___idx) \
      AROS_LC2(void *, EC_KEY_get_ex_data, \
 AROS_LCA(const EC_KEY *, (___key), A0), \
 AROS_LCA(int, (___idx), D0), \
     struct Library *, AMISSL_BASE_NAME, 4169, Amissl)

#define EC_KEY_get_method(___key) \
      AROS_LC1(const EC_KEY_METHOD *, EC_KEY_get_method, \
 AROS_LCA(const EC_KEY *, (___key), A0), \
     struct Library *, AMISSL_BASE_NAME, 4170, Amissl)

#define EC_KEY_key2buf(___key, ___form, ___pbuf, ___ctx) \
      AROS_LC4(size_t, EC_KEY_key2buf, \
 AROS_LCA(const EC_KEY *, (___key), A0), \
 AROS_LCA(point_conversion_form_t, (___form), D0), \
 AROS_LCA(unsigned char **, (___pbuf), A1), \
 AROS_LCA(BN_CTX *, (___ctx), A2), \
     struct Library *, AMISSL_BASE_NAME, 4171, Amissl)

#define EC_KEY_METHOD_free(___meth) \
      AROS_LC1(void, EC_KEY_METHOD_free, \
 AROS_LCA(EC_KEY_METHOD *, (___meth), A0), \
     struct Library *, AMISSL_BASE_NAME, 4172, Amissl)

#define EC_KEY_METHOD_get_compute_key(___meth, ___pck) \
      AROS_LC2(void, EC_KEY_METHOD_get_compute_key, \
 AROS_LCA(const EC_KEY_METHOD *, (___meth), A0), \
 AROS_LCA(int (**)(unsigned char **,size_t *,const EC_POINT *,const EC_KEY *), (___pck), A1), \
     struct Library *, AMISSL_BASE_NAME, 4173, Amissl)

#define EC_KEY_METHOD_get_init(___meth, ___pinit, ___pfinish, ___pcopy, ___pset_group, ___pset_private, ___pset_public) \
      AROS_LC7(void, EC_KEY_METHOD_get_init, \
 AROS_LCA(const EC_KEY_METHOD *, (___meth), A0), \
 AROS_LCA(int (**)(EC_KEY *), (___pinit), A1), \
 AROS_LCA(void (**)(EC_KEY *), (___pfinish), A2), \
 AROS_LCA(int (**)(EC_KEY *,const EC_KEY *), (___pcopy), A3), \
 AROS_LCA(int (**)(EC_KEY *,const EC_GROUP *), (___pset_group), D0), \
 AROS_LCA(int (**)(EC_KEY *,const BIGNUM *), (___pset_private), D1), \
 AROS_LCA(int (**)(EC_KEY *,const EC_POINT *), (___pset_public), D2), \
     struct Library *, AMISSL_BASE_NAME, 4174, Amissl)

#define EC_KEY_METHOD_get_keygen(___meth, ___pkeygen) \
      AROS_LC2(void, EC_KEY_METHOD_get_keygen, \
 AROS_LCA(const EC_KEY_METHOD *, (___meth), A0), \
 AROS_LCA(int (**)(EC_KEY *), (___pkeygen), A1), \
     struct Library *, AMISSL_BASE_NAME, 4175, Amissl)

#define EC_KEY_METHOD_get_sign(___meth, ___psign, ___psign_setup, ___psign_sig) \
      AROS_LC4(void, EC_KEY_METHOD_get_sign, \
 AROS_LCA(const EC_KEY_METHOD *, (___meth), A0), \
 AROS_LCA(int (**)(int,const unsigned char *,int,unsigned char *,unsigned int *,const BIGNUM *,const BIGNUM *,EC_KEY *), (___psign), A1), \
 AROS_LCA(int (**)(EC_KEY *,BN_CTX *,BIGNUM **,BIGNUM **), (___psign_setup), A2), \
 AROS_LCA(ECDSA_SIG * (**)(const unsigned char *,int,const BIGNUM *,const BIGNUM *,EC_KEY *), (___psign_sig), A3), \
     struct Library *, AMISSL_BASE_NAME, 4176, Amissl)

#define EC_KEY_METHOD_get_verify(___meth, ___pverify, ___pverify_sig) \
      AROS_LC3(void, EC_KEY_METHOD_get_verify, \
 AROS_LCA(const EC_KEY_METHOD *, (___meth), A0), \
 AROS_LCA(int (**)(int,const unsigned char *,int,const unsigned char *,int,EC_KEY *), (___pverify), A1), \
 AROS_LCA(int (**)(const unsigned char *,int,const ECDSA_SIG *,EC_KEY *), (___pverify_sig), A2), \
     struct Library *, AMISSL_BASE_NAME, 4177, Amissl)

#define EC_KEY_METHOD_new(___meth) \
      AROS_LC1(EC_KEY_METHOD *, EC_KEY_METHOD_new, \
 AROS_LCA(const EC_KEY_METHOD *, (___meth), A0), \
     struct Library *, AMISSL_BASE_NAME, 4178, Amissl)

#define EC_KEY_METHOD_set_compute_key(___meth, ___ckey) \
      AROS_LC2(void, EC_KEY_METHOD_set_compute_key, \
 AROS_LCA(EC_KEY_METHOD *, (___meth), A0), \
 AROS_LCA(int (*)(unsigned char **,size_t *,const EC_POINT *,const EC_KEY *), (___ckey), A1), \
     struct Library *, AMISSL_BASE_NAME, 4179, Amissl)

#define EC_KEY_METHOD_set_init(___meth, ___init, ___finish, ___copy, ___set_group, ___set_private, ___set_public) \
      AROS_LC7(void, EC_KEY_METHOD_set_init, \
 AROS_LCA(EC_KEY_METHOD *, (___meth), A0), \
 AROS_LCA(int (*)(EC_KEY *), (___init), A1), \
 AROS_LCA(void (*)(EC_KEY *), (___finish), A2), \
 AROS_LCA(int (*)(EC_KEY *,const EC_KEY *), (___copy), A3), \
 AROS_LCA(int (*)(EC_KEY *,const EC_GROUP *), (___set_group), D0), \
 AROS_LCA(int (*)(EC_KEY *,const BIGNUM *), (___set_private), D1), \
 AROS_LCA(int (*)(EC_KEY *,const EC_POINT *), (___set_public), D2), \
     struct Library *, AMISSL_BASE_NAME, 4180, Amissl)

#define EC_KEY_METHOD_set_keygen(___meth, ___keygen) \
      AROS_LC2(void, EC_KEY_METHOD_set_keygen, \
 AROS_LCA(EC_KEY_METHOD *, (___meth), A0), \
 AROS_LCA(int (*)(EC_KEY *), (___keygen), A1), \
     struct Library *, AMISSL_BASE_NAME, 4181, Amissl)

#define EC_KEY_METHOD_set_sign(___meth, ___sign, ___sign_setup, ___sign_sig) \
      AROS_LC4(void, EC_KEY_METHOD_set_sign, \
 AROS_LCA(EC_KEY_METHOD *, (___meth), A0), \
 AROS_LCA(int (*)(int,const unsigned char *,int,unsigned char *,unsigned int *,const BIGNUM *,const BIGNUM *,EC_KEY *), (___sign), A1), \
 AROS_LCA(int (*)(EC_KEY *,BN_CTX *,BIGNUM **,BIGNUM **), (___sign_setup), A2), \
 AROS_LCA(ECDSA_SIG * (*)(const unsigned char *,int,const BIGNUM *,const BIGNUM *,EC_KEY *), (___sign_sig), A3), \
     struct Library *, AMISSL_BASE_NAME, 4182, Amissl)

#define EC_KEY_METHOD_set_verify(___meth, ___verify, ___verify_sig) \
      AROS_LC3(void, EC_KEY_METHOD_set_verify, \
 AROS_LCA(EC_KEY_METHOD *, (___meth), A0), \
 AROS_LCA(int (*)(int,const unsigned char *,int,const unsigned char *,int,EC_KEY *), (___verify), A1), \
 AROS_LCA(int (*)(const unsigned char *,int,const ECDSA_SIG *,EC_KEY *), (___verify_sig), A2), \
     struct Library *, AMISSL_BASE_NAME, 4183, Amissl)

#define EC_KEY_new_method(___engine) \
      AROS_LC1(EC_KEY *, EC_KEY_new_method, \
 AROS_LCA(ENGINE *, (___engine), A0), \
     struct Library *, AMISSL_BASE_NAME, 4184, Amissl)

#define EC_KEY_oct2key(___key, ___buf, ___len, ___ctx) \
      AROS_LC4(int, EC_KEY_oct2key, \
 AROS_LCA(EC_KEY *, (___key), A0), \
 AROS_LCA(const unsigned char *, (___buf), A1), \
 AROS_LCA(size_t, (___len), D0), \
 AROS_LCA(BN_CTX *, (___ctx), A2), \
     struct Library *, AMISSL_BASE_NAME, 4185, Amissl)

#define EC_KEY_oct2priv(___key, ___buf, ___len) \
      AROS_LC3(int, EC_KEY_oct2priv, \
 AROS_LCA(EC_KEY *, (___key), A0), \
 AROS_LCA(const unsigned char *, (___buf), A1), \
 AROS_LCA(size_t, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 4186, Amissl)

#define EC_KEY_OpenSSL() \
      AROS_LC0(const EC_KEY_METHOD *, EC_KEY_OpenSSL, \
     struct Library *, AMISSL_BASE_NAME, 4187, Amissl)

#define EC_KEY_priv2buf(___eckey, ___pbuf) \
      AROS_LC2(size_t, EC_KEY_priv2buf, \
 AROS_LCA(const EC_KEY *, (___eckey), A0), \
 AROS_LCA(unsigned char **, (___pbuf), A1), \
     struct Library *, AMISSL_BASE_NAME, 4188, Amissl)

#define EC_KEY_priv2oct(___eckey, ___buf, ___len) \
      AROS_LC3(size_t, EC_KEY_priv2oct, \
 AROS_LCA(const EC_KEY *, (___eckey), A0), \
 AROS_LCA(unsigned char *, (___buf), A1), \
 AROS_LCA(size_t, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 4189, Amissl)

#define EC_KEY_set_default_method(___meth) \
      AROS_LC1(void, EC_KEY_set_default_method, \
 AROS_LCA(const EC_KEY_METHOD *, (___meth), A0), \
     struct Library *, AMISSL_BASE_NAME, 4190, Amissl)

#define EC_KEY_set_ex_data(___key, ___idx, ___arg) \
      AROS_LC3(int, EC_KEY_set_ex_data, \
 AROS_LCA(EC_KEY *, (___key), A0), \
 AROS_LCA(int, (___idx), D0), \
 AROS_LCA(void *, (___arg), A1), \
     struct Library *, AMISSL_BASE_NAME, 4191, Amissl)

#define EC_KEY_set_method(___key, ___meth) \
      AROS_LC2(int, EC_KEY_set_method, \
 AROS_LCA(EC_KEY *, (___key), A0), \
 AROS_LCA(const EC_KEY_METHOD *, (___meth), A1), \
     struct Library *, AMISSL_BASE_NAME, 4192, Amissl)

#define EC_POINT_point2buf(___group, ___point, ___form, ___pbuf, ___ctx) \
      AROS_LC5(size_t, EC_POINT_point2buf, \
 AROS_LCA(const EC_GROUP *, (___group), A0), \
 AROS_LCA(const EC_POINT *, (___point), A1), \
 AROS_LCA(point_conversion_form_t, (___form), D0), \
 AROS_LCA(unsigned char **, (___pbuf), A2), \
 AROS_LCA(BN_CTX *, (___ctx), A3), \
     struct Library *, AMISSL_BASE_NAME, 4193, Amissl)

#define ECDSA_SIG_get0(___sig, ___pr, ___ps) \
      AROS_LC3(void, ECDSA_SIG_get0, \
 AROS_LCA(const ECDSA_SIG *, (___sig), A0), \
 AROS_LCA(const BIGNUM **, (___pr), A1), \
 AROS_LCA(const BIGNUM **, (___ps), A2), \
     struct Library *, AMISSL_BASE_NAME, 4194, Amissl)

#define ENGINE_get_default_EC() \
      AROS_LC0(ENGINE *, ENGINE_get_default_EC, \
     struct Library *, AMISSL_BASE_NAME, 4195, Amissl)

#define ENGINE_get_EC(___e) \
      AROS_LC1(const EC_KEY_METHOD *, ENGINE_get_EC, \
 AROS_LCA(const ENGINE *, (___e), A0), \
     struct Library *, AMISSL_BASE_NAME, 4196, Amissl)

#define ENGINE_register_all_EC() \
      AROS_LC0(void, ENGINE_register_all_EC, \
     struct Library *, AMISSL_BASE_NAME, 4197, Amissl)

#define ENGINE_register_EC(___e) \
      AROS_LC1(int, ENGINE_register_EC, \
 AROS_LCA(ENGINE *, (___e), A0), \
     struct Library *, AMISSL_BASE_NAME, 4198, Amissl)

#define ENGINE_set_default_EC(___e) \
      AROS_LC1(int, ENGINE_set_default_EC, \
 AROS_LCA(ENGINE *, (___e), A0), \
     struct Library *, AMISSL_BASE_NAME, 4199, Amissl)

#define ENGINE_set_EC(___e, ___ecdsa_meth) \
      AROS_LC2(int, ENGINE_set_EC, \
 AROS_LCA(ENGINE *, (___e), A0), \
 AROS_LCA(const EC_KEY_METHOD *, (___ecdsa_meth), A1), \
     struct Library *, AMISSL_BASE_NAME, 4200, Amissl)

#define ENGINE_unregister_EC(___e) \
      AROS_LC1(void, ENGINE_unregister_EC, \
 AROS_LCA(ENGINE *, (___e), A0), \
     struct Library *, AMISSL_BASE_NAME, 4201, Amissl)

#define EVP_aes_128_ocb() \
      AROS_LC0(const EVP_CIPHER *, EVP_aes_128_ocb, \
     struct Library *, AMISSL_BASE_NAME, 4202, Amissl)

#define EVP_aes_128_wrap_pad() \
      AROS_LC0(const EVP_CIPHER *, EVP_aes_128_wrap_pad, \
     struct Library *, AMISSL_BASE_NAME, 4203, Amissl)

#define EVP_aes_192_ocb() \
      AROS_LC0(const EVP_CIPHER *, EVP_aes_192_ocb, \
     struct Library *, AMISSL_BASE_NAME, 4204, Amissl)

#define EVP_aes_192_wrap_pad() \
      AROS_LC0(const EVP_CIPHER *, EVP_aes_192_wrap_pad, \
     struct Library *, AMISSL_BASE_NAME, 4205, Amissl)

#define EVP_aes_256_ocb() \
      AROS_LC0(const EVP_CIPHER *, EVP_aes_256_ocb, \
     struct Library *, AMISSL_BASE_NAME, 4206, Amissl)

#define EVP_aes_256_wrap_pad() \
      AROS_LC0(const EVP_CIPHER *, EVP_aes_256_wrap_pad, \
     struct Library *, AMISSL_BASE_NAME, 4207, Amissl)

#define EVP_camellia_128_ctr() \
      AROS_LC0(const EVP_CIPHER *, EVP_camellia_128_ctr, \
     struct Library *, AMISSL_BASE_NAME, 4208, Amissl)

#define EVP_camellia_192_ctr() \
      AROS_LC0(const EVP_CIPHER *, EVP_camellia_192_ctr, \
     struct Library *, AMISSL_BASE_NAME, 4209, Amissl)

#define EVP_camellia_256_ctr() \
      AROS_LC0(const EVP_CIPHER *, EVP_camellia_256_ctr, \
     struct Library *, AMISSL_BASE_NAME, 4210, Amissl)

#define EVP_chacha20() \
      AROS_LC0(const EVP_CIPHER *, EVP_chacha20, \
     struct Library *, AMISSL_BASE_NAME, 4211, Amissl)

#define EVP_chacha20_poly1305() \
      AROS_LC0(const EVP_CIPHER *, EVP_chacha20_poly1305, \
     struct Library *, AMISSL_BASE_NAME, 4212, Amissl)

#define EVP_CIPHER_CTX_buf_noconst(___ctx) \
      AROS_LC1(unsigned char *, EVP_CIPHER_CTX_buf_noconst, \
 AROS_LCA(EVP_CIPHER_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 4213, Amissl)

#define EVP_CIPHER_CTX_get_cipher_data(___ctx) \
      AROS_LC1(void *, EVP_CIPHER_CTX_get_cipher_data, \
 AROS_LCA(const EVP_CIPHER_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 4214, Amissl)

#define EVP_CIPHER_CTX_set_cipher_data(___ctx, ___cipher_data) \
      AROS_LC2(void *, EVP_CIPHER_CTX_set_cipher_data, \
 AROS_LCA(EVP_CIPHER_CTX *, (___ctx), A0), \
 AROS_LCA(void *, (___cipher_data), A1), \
     struct Library *, AMISSL_BASE_NAME, 4215, Amissl)

#define EVP_CIPHER_CTX_is_encrypting(___ctx) \
      AROS_LC1(int, EVP_CIPHER_CTX_is_encrypting, \
 AROS_LCA(const EVP_CIPHER_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 4216, Amissl)

#define EVP_CIPHER_CTX_iv(___ctx) \
      AROS_LC1(const unsigned char *, EVP_CIPHER_CTX_iv, \
 AROS_LCA(const EVP_CIPHER_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 4217, Amissl)

#define EVP_CIPHER_CTX_iv_noconst(___ctx) \
      AROS_LC1(unsigned char *, EVP_CIPHER_CTX_iv_noconst, \
 AROS_LCA(EVP_CIPHER_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 4218, Amissl)

#define EVP_CIPHER_CTX_get_num(___ctx) \
      AROS_LC1(int, EVP_CIPHER_CTX_get_num, \
 AROS_LCA(const EVP_CIPHER_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 4219, Amissl)

#define EVP_CIPHER_CTX_original_iv(___ctx) \
      AROS_LC1(const unsigned char *, EVP_CIPHER_CTX_original_iv, \
 AROS_LCA(const EVP_CIPHER_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 4220, Amissl)

#define EVP_CIPHER_CTX_reset(___ctx) \
      AROS_LC1(int, EVP_CIPHER_CTX_reset, \
 AROS_LCA(EVP_CIPHER_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 4221, Amissl)

#define EVP_CIPHER_CTX_set_num(___ctx, ___num) \
      AROS_LC2(int, EVP_CIPHER_CTX_set_num, \
 AROS_LCA(EVP_CIPHER_CTX *, (___ctx), A0), \
 AROS_LCA(int, (___num), D0), \
     struct Library *, AMISSL_BASE_NAME, 4222, Amissl)

#define EVP_CIPHER_impl_ctx_size(___cipher) \
      AROS_LC1(int, EVP_CIPHER_impl_ctx_size, \
 AROS_LCA(const EVP_CIPHER *, (___cipher), A0), \
     struct Library *, AMISSL_BASE_NAME, 4223, Amissl)

#define EVP_CIPHER_meth_dup(___cipher) \
      AROS_LC1(EVP_CIPHER *, EVP_CIPHER_meth_dup, \
 AROS_LCA(const EVP_CIPHER *, (___cipher), A0), \
     struct Library *, AMISSL_BASE_NAME, 4224, Amissl)

#define EVP_CIPHER_meth_free(___cipher) \
      AROS_LC1(void, EVP_CIPHER_meth_free, \
 AROS_LCA(EVP_CIPHER *, (___cipher), A0), \
     struct Library *, AMISSL_BASE_NAME, 4225, Amissl)

#define EVP_CIPHER_meth_get_cleanup(___cipher) \
      AROS_LC1(int (*)(EVP_CIPHER_CTX *), EVP_CIPHER_meth_get_cleanup, \
 AROS_LCA(const EVP_CIPHER *, (___cipher), A0), \
     struct Library *, AMISSL_BASE_NAME, 4226, Amissl)

#define EVP_CIPHER_meth_get_ctrl(___cipher) \
      AROS_LC1(int (*)(EVP_CIPHER_CTX *, int, int, void *), EVP_CIPHER_meth_get_ctrl, \
 AROS_LCA(const EVP_CIPHER *, (___cipher), A0), \
     struct Library *, AMISSL_BASE_NAME, 4227, Amissl)

#define EVP_CIPHER_meth_get_do_cipher(___cipher) \
      AROS_LC1(int (*)(EVP_CIPHER_CTX *, unsigned char *, const unsigned char *, size_t), EVP_CIPHER_meth_get_do_cipher, \
 AROS_LCA(const EVP_CIPHER *, (___cipher), A0), \
     struct Library *, AMISSL_BASE_NAME, 4228, Amissl)

#define EVP_CIPHER_meth_get_get_asn1_params(___cipher) \
      AROS_LC1(int (*)(EVP_CIPHER_CTX *, ASN1_TYPE *), EVP_CIPHER_meth_get_get_asn1_params, \
 AROS_LCA(const EVP_CIPHER *, (___cipher), A0), \
     struct Library *, AMISSL_BASE_NAME, 4229, Amissl)

#define EVP_CIPHER_meth_get_init(___cipher) \
      AROS_LC1(int (*)(EVP_CIPHER_CTX *, const unsigned char *, const unsigned char *, int), EVP_CIPHER_meth_get_init, \
 AROS_LCA(const EVP_CIPHER *, (___cipher), A0), \
     struct Library *, AMISSL_BASE_NAME, 4230, Amissl)

#define EVP_CIPHER_meth_get_set_asn1_params(___cipher) \
      AROS_LC1(int (*)(EVP_CIPHER_CTX *, ASN1_TYPE *), EVP_CIPHER_meth_get_set_asn1_params, \
 AROS_LCA(const EVP_CIPHER *, (___cipher), A0), \
     struct Library *, AMISSL_BASE_NAME, 4231, Amissl)

#define EVP_CIPHER_meth_new(___cipher_type, ___block_size, ___key_len) \
      AROS_LC3(EVP_CIPHER *, EVP_CIPHER_meth_new, \
 AROS_LCA(int, (___cipher_type), D0), \
 AROS_LCA(int, (___block_size), D1), \
 AROS_LCA(int, (___key_len), D2), \
     struct Library *, AMISSL_BASE_NAME, 4232, Amissl)

#define EVP_CIPHER_meth_set_cleanup(___cipher, ___cleanup) \
      AROS_LC2(int, EVP_CIPHER_meth_set_cleanup, \
 AROS_LCA(EVP_CIPHER *, (___cipher), A0), \
 AROS_LCA(int (*)(EVP_CIPHER_CTX *), (___cleanup), A1), \
     struct Library *, AMISSL_BASE_NAME, 4233, Amissl)

#define EVP_CIPHER_meth_set_ctrl(___cipher, ___ctrl) \
      AROS_LC2(int, EVP_CIPHER_meth_set_ctrl, \
 AROS_LCA(EVP_CIPHER *, (___cipher), A0), \
 AROS_LCA(int (*)(EVP_CIPHER_CTX *,int,int,void *), (___ctrl), A1), \
     struct Library *, AMISSL_BASE_NAME, 4234, Amissl)

#define EVP_CIPHER_meth_set_do_cipher(___cipher, ___do_cipher) \
      AROS_LC2(int, EVP_CIPHER_meth_set_do_cipher, \
 AROS_LCA(EVP_CIPHER *, (___cipher), A0), \
 AROS_LCA(int (*)(EVP_CIPHER_CTX *,unsigned char *,const unsigned char *,size_t), (___do_cipher), A1), \
     struct Library *, AMISSL_BASE_NAME, 4235, Amissl)

#define EVP_CIPHER_meth_set_flags(___cipher, ___flags) \
      AROS_LC2(int, EVP_CIPHER_meth_set_flags, \
 AROS_LCA(EVP_CIPHER *, (___cipher), A0), \
 AROS_LCA(unsigned long, (___flags), D0), \
     struct Library *, AMISSL_BASE_NAME, 4236, Amissl)

#define EVP_CIPHER_meth_set_get_asn1_params(___cipher, ___get_asn1_parameters) \
      AROS_LC2(int, EVP_CIPHER_meth_set_get_asn1_params, \
 AROS_LCA(EVP_CIPHER *, (___cipher), A0), \
 AROS_LCA(int (*)(EVP_CIPHER_CTX *,ASN1_TYPE *), (___get_asn1_parameters), A1), \
     struct Library *, AMISSL_BASE_NAME, 4237, Amissl)

#define EVP_CIPHER_meth_set_impl_ctx_size(___cipher, ___ctx_size) \
      AROS_LC2(int, EVP_CIPHER_meth_set_impl_ctx_size, \
 AROS_LCA(EVP_CIPHER *, (___cipher), A0), \
 AROS_LCA(int, (___ctx_size), D0), \
     struct Library *, AMISSL_BASE_NAME, 4238, Amissl)

#define EVP_CIPHER_meth_set_init(___cipher, ___init) \
      AROS_LC2(int, EVP_CIPHER_meth_set_init, \
 AROS_LCA(EVP_CIPHER *, (___cipher), A0), \
 AROS_LCA(int (*)(EVP_CIPHER_CTX *,const unsigned char *,const unsigned char *,int), (___init), A1), \
     struct Library *, AMISSL_BASE_NAME, 4239, Amissl)

#define EVP_CIPHER_meth_set_iv_length(___cipher, ___iv_len) \
      AROS_LC2(int, EVP_CIPHER_meth_set_iv_length, \
 AROS_LCA(EVP_CIPHER *, (___cipher), A0), \
 AROS_LCA(int, (___iv_len), D0), \
     struct Library *, AMISSL_BASE_NAME, 4240, Amissl)

#define EVP_CIPHER_meth_set_set_asn1_params(___cipher, ___set_asn1_parameters) \
      AROS_LC2(int, EVP_CIPHER_meth_set_set_asn1_params, \
 AROS_LCA(EVP_CIPHER *, (___cipher), A0), \
 AROS_LCA(int (*)(EVP_CIPHER_CTX *,ASN1_TYPE *), (___set_asn1_parameters), A1), \
     struct Library *, AMISSL_BASE_NAME, 4241, Amissl)

#define EVP_ENCODE_CTX_free(___ctx) \
      AROS_LC1(void, EVP_ENCODE_CTX_free, \
 AROS_LCA(EVP_ENCODE_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 4242, Amissl)

#define EVP_ENCODE_CTX_new() \
      AROS_LC0(EVP_ENCODE_CTX *, EVP_ENCODE_CTX_new, \
     struct Library *, AMISSL_BASE_NAME, 4243, Amissl)

#define EVP_ENCODE_CTX_num(___ctx) \
      AROS_LC1(int, EVP_ENCODE_CTX_num, \
 AROS_LCA(EVP_ENCODE_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 4244, Amissl)

#define EVP_md5_sha1() \
      AROS_LC0(const EVP_MD *, EVP_md5_sha1, \
     struct Library *, AMISSL_BASE_NAME, 4245, Amissl)

#define EVP_MD_CTX_ctrl(___ctx, ___cmd, ___p1, ___p2) \
      AROS_LC4(int, EVP_MD_CTX_ctrl, \
 AROS_LCA(EVP_MD_CTX *, (___ctx), A0), \
 AROS_LCA(int, (___cmd), D0), \
 AROS_LCA(int, (___p1), D1), \
 AROS_LCA(void *, (___p2), A1), \
     struct Library *, AMISSL_BASE_NAME, 4246, Amissl)

#define EVP_MD_CTX_free(___ctx) \
      AROS_LC1(void, EVP_MD_CTX_free, \
 AROS_LCA(EVP_MD_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 4247, Amissl)

#define EVP_MD_CTX_get0_md_data(___ctx) \
      AROS_LC1(void *, EVP_MD_CTX_get0_md_data, \
 AROS_LCA(const EVP_MD_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 4248, Amissl)

#define EVP_MD_CTX_new() \
      AROS_LC0(EVP_MD_CTX *, EVP_MD_CTX_new, \
     struct Library *, AMISSL_BASE_NAME, 4249, Amissl)

#define EVP_MD_CTX_get_pkey_ctx(___ctx) \
      AROS_LC1(EVP_PKEY_CTX *, EVP_MD_CTX_get_pkey_ctx, \
 AROS_LCA(const EVP_MD_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 4250, Amissl)

#define EVP_MD_CTX_reset(___ctx) \
      AROS_LC1(int, EVP_MD_CTX_reset, \
 AROS_LCA(EVP_MD_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 4251, Amissl)

#define EVP_MD_CTX_set_update_fn(___ctx, ___update) \
      AROS_LC2(void, EVP_MD_CTX_set_update_fn, \
 AROS_LCA(EVP_MD_CTX *, (___ctx), A0), \
 AROS_LCA(int (*)(EVP_MD_CTX *,const void *,size_t), (___update), A1), \
     struct Library *, AMISSL_BASE_NAME, 4252, Amissl)

#define EVP_MD_CTX_update_fn(___ctx) \
      AROS_LC1(int (*)(EVP_MD_CTX *, const void *, size_t), EVP_MD_CTX_update_fn, \
 AROS_LCA(EVP_MD_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 4253, Amissl)

#define EVP_MD_meth_dup(___md) \
      AROS_LC1(EVP_MD *, EVP_MD_meth_dup, \
 AROS_LCA(const EVP_MD *, (___md), A0), \
     struct Library *, AMISSL_BASE_NAME, 4254, Amissl)

#define EVP_MD_meth_free(___md) \
      AROS_LC1(void, EVP_MD_meth_free, \
 AROS_LCA(EVP_MD *, (___md), A0), \
     struct Library *, AMISSL_BASE_NAME, 4255, Amissl)

#define EVP_MD_meth_get_app_datasize(___md) \
      AROS_LC1(int, EVP_MD_meth_get_app_datasize, \
 AROS_LCA(const EVP_MD *, (___md), A0), \
     struct Library *, AMISSL_BASE_NAME, 4256, Amissl)

#define EVP_MD_meth_get_cleanup(___md) \
      AROS_LC1(int (*)(EVP_MD_CTX *), EVP_MD_meth_get_cleanup, \
 AROS_LCA(const EVP_MD *, (___md), A0), \
     struct Library *, AMISSL_BASE_NAME, 4257, Amissl)

#define EVP_MD_meth_get_copy(___md) \
      AROS_LC1(int (*)(EVP_MD_CTX *, const EVP_MD_CTX *), EVP_MD_meth_get_copy, \
 AROS_LCA(const EVP_MD *, (___md), A0), \
     struct Library *, AMISSL_BASE_NAME, 4258, Amissl)

#define EVP_MD_meth_get_ctrl(___md) \
      AROS_LC1(int (*)(EVP_MD_CTX *, int, int, void *), EVP_MD_meth_get_ctrl, \
 AROS_LCA(const EVP_MD *, (___md), A0), \
     struct Library *, AMISSL_BASE_NAME, 4259, Amissl)

#define EVP_MD_meth_get_final(___md) \
      AROS_LC1(int (*)(EVP_MD_CTX *, unsigned char *), EVP_MD_meth_get_final, \
 AROS_LCA(const EVP_MD *, (___md), A0), \
     struct Library *, AMISSL_BASE_NAME, 4260, Amissl)

#define EVP_MD_meth_get_flags(___md) \
      AROS_LC1(unsigned long, EVP_MD_meth_get_flags, \
 AROS_LCA(const EVP_MD *, (___md), A0), \
     struct Library *, AMISSL_BASE_NAME, 4261, Amissl)

#define EVP_MD_meth_get_init(___md) \
      AROS_LC1(int (*)(EVP_MD_CTX *), EVP_MD_meth_get_init, \
 AROS_LCA(const EVP_MD *, (___md), A0), \
     struct Library *, AMISSL_BASE_NAME, 4262, Amissl)

#define EVP_MD_meth_get_input_blocksize(___md) \
      AROS_LC1(int, EVP_MD_meth_get_input_blocksize, \
 AROS_LCA(const EVP_MD *, (___md), A0), \
     struct Library *, AMISSL_BASE_NAME, 4263, Amissl)

#define EVP_MD_meth_get_result_size(___md) \
      AROS_LC1(int, EVP_MD_meth_get_result_size, \
 AROS_LCA(const EVP_MD *, (___md), A0), \
     struct Library *, AMISSL_BASE_NAME, 4264, Amissl)

#define EVP_MD_meth_get_update(___md) \
      AROS_LC1(int (*)(EVP_MD_CTX *, const void *, size_t), EVP_MD_meth_get_update, \
 AROS_LCA(const EVP_MD *, (___md), A0), \
     struct Library *, AMISSL_BASE_NAME, 4265, Amissl)

#define EVP_MD_meth_new(___md_type, ___pkey_type) \
      AROS_LC2(EVP_MD *, EVP_MD_meth_new, \
 AROS_LCA(int, (___md_type), D0), \
 AROS_LCA(int, (___pkey_type), D1), \
     struct Library *, AMISSL_BASE_NAME, 4266, Amissl)

#define EVP_MD_meth_set_app_datasize(___md, ___datasize) \
      AROS_LC2(int, EVP_MD_meth_set_app_datasize, \
 AROS_LCA(EVP_MD *, (___md), A0), \
 AROS_LCA(int, (___datasize), D0), \
     struct Library *, AMISSL_BASE_NAME, 4267, Amissl)

#define EVP_MD_meth_set_cleanup(___md, ___cleanup) \
      AROS_LC2(int, EVP_MD_meth_set_cleanup, \
 AROS_LCA(EVP_MD *, (___md), A0), \
 AROS_LCA(int (*)(EVP_MD_CTX *), (___cleanup), A1), \
     struct Library *, AMISSL_BASE_NAME, 4268, Amissl)

#define EVP_MD_meth_set_copy(___md, ___copy) \
      AROS_LC2(int, EVP_MD_meth_set_copy, \
 AROS_LCA(EVP_MD *, (___md), A0), \
 AROS_LCA(int (*)(EVP_MD_CTX *,const EVP_MD_CTX *), (___copy), A1), \
     struct Library *, AMISSL_BASE_NAME, 4269, Amissl)

#define EVP_MD_meth_set_ctrl(___md, ___ctrl) \
      AROS_LC2(int, EVP_MD_meth_set_ctrl, \
 AROS_LCA(EVP_MD *, (___md), A0), \
 AROS_LCA(int (*)(EVP_MD_CTX *,int,int,void *), (___ctrl), A1), \
     struct Library *, AMISSL_BASE_NAME, 4270, Amissl)

#define EVP_MD_meth_set_final(___md, ___final) \
      AROS_LC2(int, EVP_MD_meth_set_final, \
 AROS_LCA(EVP_MD *, (___md), A0), \
 AROS_LCA(int (*)(EVP_MD_CTX *,unsigned char *), (___final), A1), \
     struct Library *, AMISSL_BASE_NAME, 4271, Amissl)

#define EVP_MD_meth_set_flags(___md, ___flags) \
      AROS_LC2(int, EVP_MD_meth_set_flags, \
 AROS_LCA(EVP_MD *, (___md), A0), \
 AROS_LCA(unsigned long, (___flags), D0), \
     struct Library *, AMISSL_BASE_NAME, 4272, Amissl)

#define EVP_MD_meth_set_init(___md, ___init) \
      AROS_LC2(int, EVP_MD_meth_set_init, \
 AROS_LCA(EVP_MD *, (___md), A0), \
 AROS_LCA(int (*)(EVP_MD_CTX *), (___init), A1), \
     struct Library *, AMISSL_BASE_NAME, 4273, Amissl)

#define EVP_MD_meth_set_input_blocksize(___md, ___blocksize) \
      AROS_LC2(int, EVP_MD_meth_set_input_blocksize, \
 AROS_LCA(EVP_MD *, (___md), A0), \
 AROS_LCA(int, (___blocksize), D0), \
     struct Library *, AMISSL_BASE_NAME, 4274, Amissl)

#define EVP_MD_meth_set_result_size(___md, ___resultsize) \
      AROS_LC2(int, EVP_MD_meth_set_result_size, \
 AROS_LCA(EVP_MD *, (___md), A0), \
 AROS_LCA(int, (___resultsize), D0), \
     struct Library *, AMISSL_BASE_NAME, 4275, Amissl)

#define EVP_MD_meth_set_update(___md, ___update) \
      AROS_LC2(int, EVP_MD_meth_set_update, \
 AROS_LCA(EVP_MD *, (___md), A0), \
 AROS_LCA(int (*)(EVP_MD_CTX *,const void *,size_t), (___update), A1), \
     struct Library *, AMISSL_BASE_NAME, 4276, Amissl)

#define EVP_PBE_get(___ptype, ___ppbe_nid, ___num) \
      AROS_LC3(int, EVP_PBE_get, \
 AROS_LCA(int *, (___ptype), A0), \
 AROS_LCA(int *, (___ppbe_nid), A1), \
 AROS_LCA(size_t, (___num), D0), \
     struct Library *, AMISSL_BASE_NAME, 4277, Amissl)

#define OBSOLETE_EVP_PBE_scrypt(___pass, ___passlen, ___salt, ___saltlen, ___N, ___r, ___p, ___maxmem, ___key, ___keylen) \
      AROS_LC10(int, OBSOLETE_EVP_PBE_scrypt, \
 AROS_LCA(const char *, (___pass), A0), \
 AROS_LCA(size_t, (___passlen), D0), \
 AROS_LCA(const unsigned char *, (___salt), A1), \
 AROS_LCA(size_t, (___saltlen), D1), \
 AROS_LCA(unsigned long, (___N), D2), \
 AROS_LCA(unsigned long, (___r), D3), \
 AROS_LCA(unsigned long, (___p), D4), \
 AROS_LCA(uint64_t, (___maxmem), D5), \
 AROS_LCA(unsigned char *, (___key), A2), \
 AROS_LCA(size_t, (___keylen), A3), \
     struct Library *, AMISSL_BASE_NAME, 4278, Amissl)

#define EVP_PKEY_asn1_set_security_bits(___ameth, ___pkey_security_bits) \
      AROS_LC2(void, EVP_PKEY_asn1_set_security_bits, \
 AROS_LCA(EVP_PKEY_ASN1_METHOD *, (___ameth), A0), \
 AROS_LCA(int (*)(const EVP_PKEY *), (___pkey_security_bits), A1), \
     struct Library *, AMISSL_BASE_NAME, 4279, Amissl)

#define EVP_PKEY_get0_DH(___pkey) \
      AROS_LC1(const DH *, EVP_PKEY_get0_DH, \
 AROS_LCA(const EVP_PKEY *, (___pkey), A0), \
     struct Library *, AMISSL_BASE_NAME, 4280, Amissl)

#define EVP_PKEY_get0_DSA(___pkey) \
      AROS_LC1(const DSA *, EVP_PKEY_get0_DSA, \
 AROS_LCA(const EVP_PKEY *, (___pkey), A0), \
     struct Library *, AMISSL_BASE_NAME, 4281, Amissl)

#define EVP_PKEY_get0_EC_KEY(___pkey) \
      AROS_LC1(const EC_KEY *, EVP_PKEY_get0_EC_KEY, \
 AROS_LCA(const EVP_PKEY *, (___pkey), A0), \
     struct Library *, AMISSL_BASE_NAME, 4282, Amissl)

#define EVP_PKEY_get0_RSA(___pkey) \
      AROS_LC1(const RSA *, EVP_PKEY_get0_RSA, \
 AROS_LCA(const EVP_PKEY *, (___pkey), A0), \
     struct Library *, AMISSL_BASE_NAME, 4283, Amissl)

#define EVP_PKEY_meth_get_cleanup(___pmeth, ___pcleanup) \
      AROS_LC2(void, EVP_PKEY_meth_get_cleanup, \
 AROS_LCA(const EVP_PKEY_METHOD *, (___pmeth), A0), \
 AROS_LCA(void (**)(EVP_PKEY_CTX *), (___pcleanup), A1), \
     struct Library *, AMISSL_BASE_NAME, 4284, Amissl)

#define EVP_PKEY_meth_get_copy(___pmeth, ___pcopy) \
      AROS_LC2(void, EVP_PKEY_meth_get_copy, \
 AROS_LCA(const EVP_PKEY_METHOD *, (___pmeth), A0), \
 AROS_LCA(int (**)(EVP_PKEY_CTX *,const EVP_PKEY_CTX *), (___pcopy), A1), \
     struct Library *, AMISSL_BASE_NAME, 4285, Amissl)

#define EVP_PKEY_meth_get_ctrl(___pmeth, ___pctrl, ___pctrl_str) \
      AROS_LC3(void, EVP_PKEY_meth_get_ctrl, \
 AROS_LCA(const EVP_PKEY_METHOD *, (___pmeth), A0), \
 AROS_LCA(int (**)(EVP_PKEY_CTX *,int,int,void *), (___pctrl), A1), \
 AROS_LCA(int (**)(EVP_PKEY_CTX *,const char *,const char *), (___pctrl_str), A2), \
     struct Library *, AMISSL_BASE_NAME, 4286, Amissl)

#define EVP_PKEY_meth_get_decrypt(___pmeth, ___pdecrypt_init, ___pdecrypt) \
      AROS_LC3(void, EVP_PKEY_meth_get_decrypt, \
 AROS_LCA(const EVP_PKEY_METHOD *, (___pmeth), A0), \
 AROS_LCA(int (**)(EVP_PKEY_CTX *), (___pdecrypt_init), A1), \
 AROS_LCA(int (**)(EVP_PKEY_CTX *,unsigned char *,size_t *,const unsigned char *,size_t), (___pdecrypt), A2), \
     struct Library *, AMISSL_BASE_NAME, 4287, Amissl)

#define EVP_PKEY_meth_get_derive(___pmeth, ___pderive_init, ___pderive) \
      AROS_LC3(void, EVP_PKEY_meth_get_derive, \
 AROS_LCA(const EVP_PKEY_METHOD *, (___pmeth), A0), \
 AROS_LCA(int (**)(EVP_PKEY_CTX *), (___pderive_init), A1), \
 AROS_LCA(int (**)(EVP_PKEY_CTX *,unsigned char *,size_t *), (___pderive), A2), \
     struct Library *, AMISSL_BASE_NAME, 4288, Amissl)

#define EVP_PKEY_meth_get_encrypt(___pmeth, ___pencrypt_init, ___pencryptfn) \
      AROS_LC3(void, EVP_PKEY_meth_get_encrypt, \
 AROS_LCA(const EVP_PKEY_METHOD *, (___pmeth), A0), \
 AROS_LCA(int (**)(EVP_PKEY_CTX *), (___pencrypt_init), A1), \
 AROS_LCA(int (**)(EVP_PKEY_CTX *,unsigned char *,size_t *,const unsigned char *,size_t), (___pencryptfn), A2), \
     struct Library *, AMISSL_BASE_NAME, 4289, Amissl)

#define EVP_PKEY_meth_get_init(___pmeth, ___pinit) \
      AROS_LC2(void, EVP_PKEY_meth_get_init, \
 AROS_LCA(const EVP_PKEY_METHOD *, (___pmeth), A0), \
 AROS_LCA(int (**)(EVP_PKEY_CTX *), (___pinit), A1), \
     struct Library *, AMISSL_BASE_NAME, 4290, Amissl)

#define EVP_PKEY_meth_get_keygen(___pmeth, ___pkeygen_init, ___pkeygen) \
      AROS_LC3(void, EVP_PKEY_meth_get_keygen, \
 AROS_LCA(const EVP_PKEY_METHOD *, (___pmeth), A0), \
 AROS_LCA(int (**)(EVP_PKEY_CTX *), (___pkeygen_init), A1), \
 AROS_LCA(int (**)(EVP_PKEY_CTX *,EVP_PKEY *), (___pkeygen), A2), \
     struct Library *, AMISSL_BASE_NAME, 4291, Amissl)

#define EVP_PKEY_meth_get_paramgen(___pmeth, ___pparamgen_init, ___pparamgen) \
      AROS_LC3(void, EVP_PKEY_meth_get_paramgen, \
 AROS_LCA(const EVP_PKEY_METHOD *, (___pmeth), A0), \
 AROS_LCA(int (**)(EVP_PKEY_CTX *), (___pparamgen_init), A1), \
 AROS_LCA(int (**)(EVP_PKEY_CTX *,EVP_PKEY *), (___pparamgen), A2), \
     struct Library *, AMISSL_BASE_NAME, 4292, Amissl)

#define EVP_PKEY_meth_get_sign(___pmeth, ___psign_init, ___psign) \
      AROS_LC3(void, EVP_PKEY_meth_get_sign, \
 AROS_LCA(const EVP_PKEY_METHOD *, (___pmeth), A0), \
 AROS_LCA(int (**)(EVP_PKEY_CTX *), (___psign_init), A1), \
 AROS_LCA(int (**)(EVP_PKEY_CTX *,unsigned char *,size_t *,const unsigned char *,size_t), (___psign), A2), \
     struct Library *, AMISSL_BASE_NAME, 4293, Amissl)

#define EVP_PKEY_meth_get_signctx(___pmeth, ___psignctx_init, ___psignctx) \
      AROS_LC3(void, EVP_PKEY_meth_get_signctx, \
 AROS_LCA(const EVP_PKEY_METHOD *, (___pmeth), A0), \
 AROS_LCA(int (**)(EVP_PKEY_CTX *,EVP_MD_CTX *), (___psignctx_init), A1), \
 AROS_LCA(int (**)(EVP_PKEY_CTX *,unsigned char *,size_t *,EVP_MD_CTX *), (___psignctx), A2), \
     struct Library *, AMISSL_BASE_NAME, 4294, Amissl)

#define EVP_PKEY_meth_get_verify(___pmeth, ___pverify_init, ___pverify) \
      AROS_LC3(void, EVP_PKEY_meth_get_verify, \
 AROS_LCA(const EVP_PKEY_METHOD *, (___pmeth), A0), \
 AROS_LCA(int (**)(EVP_PKEY_CTX *), (___pverify_init), A1), \
 AROS_LCA(int (**)(EVP_PKEY_CTX *,const unsigned char *,size_t,const unsigned char *,size_t), (___pverify), A2), \
     struct Library *, AMISSL_BASE_NAME, 4295, Amissl)

#define EVP_PKEY_meth_get_verify_recover(___pmeth, ___pverify_recover_init, ___pverify_recover) \
      AROS_LC3(void, EVP_PKEY_meth_get_verify_recover, \
 AROS_LCA(const EVP_PKEY_METHOD *, (___pmeth), A0), \
 AROS_LCA(int (**)(EVP_PKEY_CTX *), (___pverify_recover_init), A1), \
 AROS_LCA(int (**)(EVP_PKEY_CTX *,unsigned char *,size_t *,const unsigned char *,size_t), (___pverify_recover), A2), \
     struct Library *, AMISSL_BASE_NAME, 4296, Amissl)

#define EVP_PKEY_meth_get_verifyctx(___pmeth, ___pverifyctx_init, ___pverifyctx) \
      AROS_LC3(void, EVP_PKEY_meth_get_verifyctx, \
 AROS_LCA(const EVP_PKEY_METHOD *, (___pmeth), A0), \
 AROS_LCA(int (**)(EVP_PKEY_CTX *,EVP_MD_CTX *), (___pverifyctx_init), A1), \
 AROS_LCA(int (**)(EVP_PKEY_CTX *,const unsigned char *,int,EVP_MD_CTX *), (___pverifyctx), A2), \
     struct Library *, AMISSL_BASE_NAME, 4297, Amissl)

#define EVP_PKEY_get_security_bits(___pkey) \
      AROS_LC1(int, EVP_PKEY_get_security_bits, \
 AROS_LCA(const EVP_PKEY *, (___pkey), A0), \
     struct Library *, AMISSL_BASE_NAME, 4298, Amissl)

#define EVP_PKEY_up_ref(___pkey) \
      AROS_LC1(int, EVP_PKEY_up_ref, \
 AROS_LCA(EVP_PKEY *, (___pkey), A0), \
     struct Library *, AMISSL_BASE_NAME, 4299, Amissl)

#define PKCS5_v2_scrypt_keyivgen(___ctx, ___pass, ___passlen, ___param, ___c, ___md, ___en_de) \
      AROS_LC7(int, PKCS5_v2_scrypt_keyivgen, \
 AROS_LCA(EVP_CIPHER_CTX *, (___ctx), A0), \
 AROS_LCA(const char *, (___pass), A1), \
 AROS_LCA(int, (___passlen), D0), \
 AROS_LCA(ASN1_TYPE *, (___param), A2), \
 AROS_LCA(const EVP_CIPHER *, (___c), A3), \
 AROS_LCA(const EVP_MD *, (___md), D1), \
 AROS_LCA(int, (___en_de), D2), \
     struct Library *, AMISSL_BASE_NAME, 4300, Amissl)

#define HMAC_CTX_free(___ctx) \
      AROS_LC1(void, HMAC_CTX_free, \
 AROS_LCA(HMAC_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 4301, Amissl)

#define HMAC_CTX_new() \
      AROS_LC0(HMAC_CTX *, HMAC_CTX_new, \
     struct Library *, AMISSL_BASE_NAME, 4302, Amissl)

#define HMAC_CTX_reset(___ctx) \
      AROS_LC1(int, HMAC_CTX_reset, \
 AROS_LCA(HMAC_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 4303, Amissl)

#define HMAC_size(___ctx) \
      AROS_LC1(size_t, HMAC_size, \
 AROS_LCA(const HMAC_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 4304, Amissl)

#define OPENSSL_LH_error(___lh) \
      AROS_LC1(int, OPENSSL_LH_error, \
 AROS_LCA(OPENSSL_LHASH *, (___lh), A0), \
     struct Library *, AMISSL_BASE_NAME, 4305, Amissl)

#define OPENSSL_LH_get_down_load(___lh) \
      AROS_LC1(unsigned long, OPENSSL_LH_get_down_load, \
 AROS_LCA(const OPENSSL_LHASH *, (___lh), A0), \
     struct Library *, AMISSL_BASE_NAME, 4306, Amissl)

#define OPENSSL_LH_set_down_load(___lh, ___down_load) \
      AROS_LC2(void, OPENSSL_LH_set_down_load, \
 AROS_LCA(OPENSSL_LHASH *, (___lh), A0), \
 AROS_LCA(unsigned long, (___down_load), D0), \
     struct Library *, AMISSL_BASE_NAME, 4307, Amissl)

#define CRYPTO_128_unwrap_pad(___key, ___icv, ___out, ___in, ___inlen, ___block) \
      AROS_LC6(size_t, CRYPTO_128_unwrap_pad, \
 AROS_LCA(void *, (___key), A0), \
 AROS_LCA(const unsigned char *, (___icv), A1), \
 AROS_LCA(unsigned char *, (___out), A2), \
 AROS_LCA(const unsigned char *, (___in), A3), \
 AROS_LCA(size_t, (___inlen), D0), \
 AROS_LCA(block128_f, (___block), D1), \
     struct Library *, AMISSL_BASE_NAME, 4308, Amissl)

#define CRYPTO_128_wrap_pad(___key, ___icv, ___out, ___in, ___inlen, ___block) \
      AROS_LC6(size_t, CRYPTO_128_wrap_pad, \
 AROS_LCA(void *, (___key), A0), \
 AROS_LCA(const unsigned char *, (___icv), A1), \
 AROS_LCA(unsigned char *, (___out), A2), \
 AROS_LCA(const unsigned char *, (___in), A3), \
 AROS_LCA(size_t, (___inlen), D0), \
 AROS_LCA(block128_f, (___block), D1), \
     struct Library *, AMISSL_BASE_NAME, 4309, Amissl)

#define CRYPTO_ocb128_aad(___ctx, ___aad, ___len) \
      AROS_LC3(int, CRYPTO_ocb128_aad, \
 AROS_LCA(OCB128_CONTEXT *, (___ctx), A0), \
 AROS_LCA(const unsigned char *, (___aad), A1), \
 AROS_LCA(size_t, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 4310, Amissl)

#define CRYPTO_ocb128_cleanup(___ctx) \
      AROS_LC1(void, CRYPTO_ocb128_cleanup, \
 AROS_LCA(OCB128_CONTEXT *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 4311, Amissl)

#define CRYPTO_ocb128_copy_ctx(___dest, ___src, ___keyenc, ___keydec) \
      AROS_LC4(int, CRYPTO_ocb128_copy_ctx, \
 AROS_LCA(OCB128_CONTEXT *, (___dest), A0), \
 AROS_LCA(OCB128_CONTEXT *, (___src), A1), \
 AROS_LCA(void *, (___keyenc), A2), \
 AROS_LCA(void *, (___keydec), A3), \
     struct Library *, AMISSL_BASE_NAME, 4312, Amissl)

#define CRYPTO_ocb128_decrypt(___ctx, ___in, ___out, ___len) \
      AROS_LC4(int, CRYPTO_ocb128_decrypt, \
 AROS_LCA(OCB128_CONTEXT *, (___ctx), A0), \
 AROS_LCA(const unsigned char *, (___in), A1), \
 AROS_LCA(unsigned char *, (___out), A2), \
 AROS_LCA(size_t, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 4313, Amissl)

#define CRYPTO_ocb128_encrypt(___ctx, ___in, ___out, ___len) \
      AROS_LC4(int, CRYPTO_ocb128_encrypt, \
 AROS_LCA(OCB128_CONTEXT *, (___ctx), A0), \
 AROS_LCA(const unsigned char *, (___in), A1), \
 AROS_LCA(unsigned char *, (___out), A2), \
 AROS_LCA(size_t, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 4314, Amissl)

#define CRYPTO_ocb128_finish(___ctx, ___tag, ___len) \
      AROS_LC3(int, CRYPTO_ocb128_finish, \
 AROS_LCA(OCB128_CONTEXT *, (___ctx), A0), \
 AROS_LCA(const unsigned char *, (___tag), A1), \
 AROS_LCA(size_t, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 4315, Amissl)

#define CRYPTO_ocb128_init(___ctx, ___keyenc, ___keydec, ___encrypt, ___decrypt, ___stream) \
      AROS_LC6(int, CRYPTO_ocb128_init, \
 AROS_LCA(OCB128_CONTEXT *, (___ctx), A0), \
 AROS_LCA(void *, (___keyenc), A1), \
 AROS_LCA(void *, (___keydec), A2), \
 AROS_LCA(block128_f, (___encrypt), D0), \
 AROS_LCA(block128_f, (___decrypt), D1), \
 AROS_LCA(ocb128_f, (___stream), D2), \
     struct Library *, AMISSL_BASE_NAME, 4316, Amissl)

#define CRYPTO_ocb128_new(___keyenc, ___keydec, ___encrypt, ___decrypt, ___stream) \
      AROS_LC5(OCB128_CONTEXT *, CRYPTO_ocb128_new, \
 AROS_LCA(void *, (___keyenc), A0), \
 AROS_LCA(void *, (___keydec), A1), \
 AROS_LCA(block128_f, (___encrypt), D0), \
 AROS_LCA(block128_f, (___decrypt), D1), \
 AROS_LCA(ocb128_f, (___stream), D2), \
     struct Library *, AMISSL_BASE_NAME, 4317, Amissl)

#define CRYPTO_ocb128_setiv(___ctx, ___iv, ___len, ___taglen) \
      AROS_LC4(int, CRYPTO_ocb128_setiv, \
 AROS_LCA(OCB128_CONTEXT *, (___ctx), A0), \
 AROS_LCA(const unsigned char *, (___iv), A1), \
 AROS_LCA(size_t, (___len), D0), \
 AROS_LCA(size_t, (___taglen), D1), \
     struct Library *, AMISSL_BASE_NAME, 4318, Amissl)

#define CRYPTO_ocb128_tag(___ctx, ___tag, ___len) \
      AROS_LC3(int, CRYPTO_ocb128_tag, \
 AROS_LCA(OCB128_CONTEXT *, (___ctx), A0), \
 AROS_LCA(unsigned char *, (___tag), A1), \
 AROS_LCA(size_t, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 4319, Amissl)

#define OBJ_get0_data(___obj) \
      AROS_LC1(const unsigned char *, OBJ_get0_data, \
 AROS_LCA(const ASN1_OBJECT *, (___obj), A0), \
     struct Library *, AMISSL_BASE_NAME, 4320, Amissl)

#define OBJ_length(___obj) \
      AROS_LC1(size_t, OBJ_length, \
 AROS_LCA(const ASN1_OBJECT *, (___obj), A0), \
     struct Library *, AMISSL_BASE_NAME, 4321, Amissl)

#define OCSP_resp_get0_produced_at(___bs) \
      AROS_LC1(const ASN1_GENERALIZEDTIME *, OCSP_resp_get0_produced_at, \
 AROS_LCA(const OCSP_BASICRESP *, (___bs), A0), \
     struct Library *, AMISSL_BASE_NAME, 4322, Amissl)

#define OCSP_resp_get0_signature(___bs) \
      AROS_LC1(const ASN1_OCTET_STRING *, OCSP_resp_get0_signature, \
 AROS_LCA(const OCSP_BASICRESP *, (___bs), A0), \
     struct Library *, AMISSL_BASE_NAME, 4323, Amissl)

#define OCSP_SINGLERESP_get0_id(___bs) \
      AROS_LC1(const OCSP_CERTID *, OCSP_SINGLERESP_get0_id, \
 AROS_LCA(const OCSP_SINGLERESP *, (___bs), A0), \
     struct Library *, AMISSL_BASE_NAME, 4324, Amissl)

#define PKCS12_get0_mac(___pmac, ___pmacalg, ___psalt, ___piter, ___p12) \
      AROS_LC5(void, PKCS12_get0_mac, \
 AROS_LCA(const ASN1_OCTET_STRING **, (___pmac), A0), \
 AROS_LCA(const X509_ALGOR **, (___pmacalg), A1), \
 AROS_LCA(const ASN1_OCTET_STRING **, (___psalt), A2), \
 AROS_LCA(const ASN1_INTEGER **, (___piter), A3), \
 AROS_LCA(const PKCS12 *, (___p12), D0), \
     struct Library *, AMISSL_BASE_NAME, 4325, Amissl)

#define PKCS12_mac_present(___p12) \
      AROS_LC1(int, PKCS12_mac_present, \
 AROS_LCA(const PKCS12 *, (___p12), A0), \
     struct Library *, AMISSL_BASE_NAME, 4326, Amissl)

#define PKCS12_SAFEBAG_create0_p8inf(___p8) \
      AROS_LC1(PKCS12_SAFEBAG *, PKCS12_SAFEBAG_create0_p8inf, \
 AROS_LCA(PKCS8_PRIV_KEY_INFO *, (___p8), A0), \
     struct Library *, AMISSL_BASE_NAME, 4327, Amissl)

#define PKCS12_SAFEBAG_create0_pkcs8(___p8) \
      AROS_LC1(PKCS12_SAFEBAG *, PKCS12_SAFEBAG_create0_pkcs8, \
 AROS_LCA(X509_SIG *, (___p8), A0), \
     struct Library *, AMISSL_BASE_NAME, 4328, Amissl)

#define PKCS12_SAFEBAG_create_cert(___x509) \
      AROS_LC1(PKCS12_SAFEBAG *, PKCS12_SAFEBAG_create_cert, \
 AROS_LCA(X509 *, (___x509), A0), \
     struct Library *, AMISSL_BASE_NAME, 4329, Amissl)

#define PKCS12_SAFEBAG_create_crl(___crl) \
      AROS_LC1(PKCS12_SAFEBAG *, PKCS12_SAFEBAG_create_crl, \
 AROS_LCA(X509_CRL *, (___crl), A0), \
     struct Library *, AMISSL_BASE_NAME, 4330, Amissl)

#define PKCS12_SAFEBAG_create_pkcs8_encrypt(___pbe_nid, ___pass, ___passlen, ___salt, ___saltlen, ___iter, ___p8inf) \
      AROS_LC7(PKCS12_SAFEBAG *, PKCS12_SAFEBAG_create_pkcs8_encrypt, \
 AROS_LCA(int, (___pbe_nid), D0), \
 AROS_LCA(const char *, (___pass), A0), \
 AROS_LCA(int, (___passlen), D1), \
 AROS_LCA(unsigned char *, (___salt), A1), \
 AROS_LCA(int, (___saltlen), D2), \
 AROS_LCA(int, (___iter), D3), \
 AROS_LCA(PKCS8_PRIV_KEY_INFO *, (___p8inf), A2), \
     struct Library *, AMISSL_BASE_NAME, 4331, Amissl)

#define PKCS12_SAFEBAG_get0_attr(___bag, ___attr_nid) \
      AROS_LC2(const ASN1_TYPE *, PKCS12_SAFEBAG_get0_attr, \
 AROS_LCA(const PKCS12_SAFEBAG *, (___bag), A0), \
 AROS_LCA(int, (___attr_nid), D0), \
     struct Library *, AMISSL_BASE_NAME, 4332, Amissl)

#define PKCS12_SAFEBAG_get0_attrs(___bag) \
      AROS_LC1(const STACK_OF(X509_ATTRIBUTE) *, PKCS12_SAFEBAG_get0_attrs, \
 AROS_LCA(const PKCS12_SAFEBAG *, (___bag), A0), \
     struct Library *, AMISSL_BASE_NAME, 4333, Amissl)

#define PKCS12_SAFEBAG_get0_p8inf(___bag) \
      AROS_LC1(const PKCS8_PRIV_KEY_INFO *, PKCS12_SAFEBAG_get0_p8inf, \
 AROS_LCA(const PKCS12_SAFEBAG *, (___bag), A0), \
     struct Library *, AMISSL_BASE_NAME, 4334, Amissl)

#define PKCS12_SAFEBAG_get0_pkcs8(___bag) \
      AROS_LC1(const X509_SIG *, PKCS12_SAFEBAG_get0_pkcs8, \
 AROS_LCA(const PKCS12_SAFEBAG *, (___bag), A0), \
     struct Library *, AMISSL_BASE_NAME, 4335, Amissl)

#define PKCS12_SAFEBAG_get0_safes(___bag) \
      AROS_LC1(const STACK_OF(PKCS12_SAFEBAG) *, PKCS12_SAFEBAG_get0_safes, \
 AROS_LCA(const PKCS12_SAFEBAG *, (___bag), A0), \
     struct Library *, AMISSL_BASE_NAME, 4336, Amissl)

#define PKCS12_SAFEBAG_get0_type(___bag) \
      AROS_LC1(const ASN1_OBJECT *, PKCS12_SAFEBAG_get0_type, \
 AROS_LCA(const PKCS12_SAFEBAG *, (___bag), A0), \
     struct Library *, AMISSL_BASE_NAME, 4337, Amissl)

#define PKCS12_SAFEBAG_get1_cert(___bag) \
      AROS_LC1(X509 *, PKCS12_SAFEBAG_get1_cert, \
 AROS_LCA(const PKCS12_SAFEBAG *, (___bag), A0), \
     struct Library *, AMISSL_BASE_NAME, 4338, Amissl)

#define PKCS12_SAFEBAG_get1_crl(___bag) \
      AROS_LC1(X509_CRL *, PKCS12_SAFEBAG_get1_crl, \
 AROS_LCA(const PKCS12_SAFEBAG *, (___bag), A0), \
     struct Library *, AMISSL_BASE_NAME, 4339, Amissl)

#define PKCS12_SAFEBAG_get_bag_nid(___bag) \
      AROS_LC1(int, PKCS12_SAFEBAG_get_bag_nid, \
 AROS_LCA(const PKCS12_SAFEBAG *, (___bag), A0), \
     struct Library *, AMISSL_BASE_NAME, 4340, Amissl)

#define PKCS12_SAFEBAG_get_nid(___bag) \
      AROS_LC1(int, PKCS12_SAFEBAG_get_nid, \
 AROS_LCA(const PKCS12_SAFEBAG *, (___bag), A0), \
     struct Library *, AMISSL_BASE_NAME, 4341, Amissl)

#define PKCS8_get_attr(___p8, ___attr_nid) \
      AROS_LC2(ASN1_TYPE *, PKCS8_get_attr, \
 AROS_LCA(PKCS8_PRIV_KEY_INFO *, (___p8), A0), \
 AROS_LCA(int, (___attr_nid), D0), \
     struct Library *, AMISSL_BASE_NAME, 4342, Amissl)

#define PKCS8_set0_pbe(___pass, ___passlen, ___p8inf, ___pbe) \
      AROS_LC4(X509_SIG *, PKCS8_set0_pbe, \
 AROS_LCA(const char *, (___pass), A0), \
 AROS_LCA(int, (___passlen), D0), \
 AROS_LCA(PKCS8_PRIV_KEY_INFO *, (___p8inf), A1), \
 AROS_LCA(X509_ALGOR *, (___pbe), A2), \
     struct Library *, AMISSL_BASE_NAME, 4343, Amissl)

#define RAND_OpenSSL() \
      AROS_LC0(RAND_METHOD *, RAND_OpenSSL, \
     struct Library *, AMISSL_BASE_NAME, 4344, Amissl)

#define RSA_bits(___r) \
      AROS_LC1(int, RSA_bits, \
 AROS_LCA(const RSA *, (___r), A0), \
     struct Library *, AMISSL_BASE_NAME, 4345, Amissl)

#define RSA_check_key_ex(___key, ___cb) \
      AROS_LC2(int, RSA_check_key_ex, \
 AROS_LCA(const RSA *, (___key), A0), \
 AROS_LCA(BN_GENCB *, (___cb), A1), \
     struct Library *, AMISSL_BASE_NAME, 4346, Amissl)

#define RSA_PKCS1_OpenSSL() \
      AROS_LC0(const RSA_METHOD *, RSA_PKCS1_OpenSSL, \
     struct Library *, AMISSL_BASE_NAME, 4347, Amissl)

#define RSA_security_bits(___rsa) \
      AROS_LC1(int, RSA_security_bits, \
 AROS_LCA(const RSA *, (___rsa), A0), \
     struct Library *, AMISSL_BASE_NAME, 4348, Amissl)

#define OBSOLETE_RSA_X931_derive_ex(___rsa, ___p1, ___p2, ___q1, ___q2, ___Xp1, ___Xp2, ___Xp, ___Xq1, ___Xq2, ___Xq, ___e, ___cb) \
      AROS_LC13(int, OBSOLETE_RSA_X931_derive_ex, \
 AROS_LCA(RSA *, (___rsa), A0), \
 AROS_LCA(BIGNUM *, (___p1), A1), \
 AROS_LCA(BIGNUM *, (___p2), A2), \
 AROS_LCA(BIGNUM *, (___q1), A3), \
 AROS_LCA(BIGNUM *, (___q2), D0), \
 AROS_LCA(const BIGNUM *, (___Xp1), D1), \
 AROS_LCA(const BIGNUM *, (___Xp2), D2), \
 AROS_LCA(const BIGNUM *, (___Xp), D3), \
 AROS_LCA(const BIGNUM *, (___Xq1), D4), \
 AROS_LCA(const BIGNUM *, (___Xq2), D5), \
 AROS_LCA(const BIGNUM *, (___Xq), D6), \
 AROS_LCA(const BIGNUM *, (___e), D7), \
 AROS_LCA(BN_GENCB *, (___cb), A4), \
     struct Library *, AMISSL_BASE_NAME, 4349, Amissl)

#define RSA_X931_generate_key_ex(___rsa, ___bits, ___e, ___cb) \
      AROS_LC4(int, RSA_X931_generate_key_ex, \
 AROS_LCA(RSA *, (___rsa), A0), \
 AROS_LCA(int, (___bits), D0), \
 AROS_LCA(const BIGNUM *, (___e), A1), \
 AROS_LCA(BN_GENCB *, (___cb), D1), \
     struct Library *, AMISSL_BASE_NAME, 4350, Amissl)

#define TS_CONF_set_signer_digest(___conf, ___section, ___md, ___ctx) \
      AROS_LC4(int, TS_CONF_set_signer_digest, \
 AROS_LCA(CONF *, (___conf), A0), \
 AROS_LCA(const char *, (___section), A1), \
 AROS_LCA(const char *, (___md), A2), \
 AROS_LCA(TS_RESP_CTX *, (___ctx), A3), \
     struct Library *, AMISSL_BASE_NAME, 4351, Amissl)

#define TS_RESP_CTX_set_signer_digest(___ctx, ___md) \
      AROS_LC2(int, TS_RESP_CTX_set_signer_digest, \
 AROS_LCA(TS_RESP_CTX *, (___ctx), A0), \
 AROS_LCA(const EVP_MD *, (___md), A1), \
     struct Library *, AMISSL_BASE_NAME, 4352, Amissl)

#define TS_STATUS_INFO_get0_failure_info(___a) \
      AROS_LC1(const ASN1_BIT_STRING *, TS_STATUS_INFO_get0_failure_info, \
 AROS_LCA(const TS_STATUS_INFO *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 4353, Amissl)

#define TS_STATUS_INFO_get0_status(___a) \
      AROS_LC1(const ASN1_INTEGER *, TS_STATUS_INFO_get0_status, \
 AROS_LCA(const TS_STATUS_INFO *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 4354, Amissl)

#define TS_STATUS_INFO_set_status(___a, ___i) \
      AROS_LC2(int, TS_STATUS_INFO_set_status, \
 AROS_LCA(TS_STATUS_INFO *, (___a), A0), \
 AROS_LCA(int, (___i), D0), \
     struct Library *, AMISSL_BASE_NAME, 4355, Amissl)

#define TS_VERIFY_CTX_add_flags(___ctx, ___f) \
      AROS_LC2(int, TS_VERIFY_CTX_add_flags, \
 AROS_LCA(TS_VERIFY_CTX *, (___ctx), A0), \
 AROS_LCA(int, (___f), D0), \
     struct Library *, AMISSL_BASE_NAME, 4356, Amissl)

#define TS_VERIFY_CTX_set_data(___ctx, ___b) \
      AROS_LC2(BIO *, TS_VERIFY_CTX_set_data, \
 AROS_LCA(TS_VERIFY_CTX *, (___ctx), A0), \
 AROS_LCA(BIO *, (___b), A1), \
     struct Library *, AMISSL_BASE_NAME, 4357, Amissl)

#define TS_VERIFY_CTX_set_flags(___ctx, ___f) \
      AROS_LC2(int, TS_VERIFY_CTX_set_flags, \
 AROS_LCA(TS_VERIFY_CTX *, (___ctx), A0), \
 AROS_LCA(int, (___f), D0), \
     struct Library *, AMISSL_BASE_NAME, 4358, Amissl)

#define TS_VERIFY_CTX_set_imprint(___ctx, ___hexstr, ___len) \
      AROS_LC3(unsigned char *, TS_VERIFY_CTX_set_imprint, \
 AROS_LCA(TS_VERIFY_CTX *, (___ctx), A0), \
 AROS_LCA(unsigned char *, (___hexstr), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 4359, Amissl)

#define TS_VERIFY_CTX_set_store(___ctx, ___s) \
      AROS_LC2(X509_STORE *, TS_VERIFY_CTX_set_store, \
 AROS_LCA(TS_VERIFY_CTX *, (___ctx), A0), \
 AROS_LCA(X509_STORE *, (___s), A1), \
     struct Library *, AMISSL_BASE_NAME, 4360, Amissl)

#define TS_VERIFY_CTX_set_certs(___ctx, ___certs) \
      AROS_LC2(STACK_OF(X509) *, TS_VERIFY_CTX_set_certs, \
 AROS_LCA(TS_VERIFY_CTX *, (___ctx), A0), \
 AROS_LCA(STACK_OF(X509) *, (___certs), A1), \
     struct Library *, AMISSL_BASE_NAME, 4361, Amissl)

#define i2d_re_X509_CRL_tbs(___req, ___pp) \
      AROS_LC2(int, i2d_re_X509_CRL_tbs, \
 AROS_LCA(X509_CRL *, (___req), A0), \
 AROS_LCA(unsigned char **, (___pp), A1), \
     struct Library *, AMISSL_BASE_NAME, 4362, Amissl)

#define i2d_re_X509_REQ_tbs(___req, ___pp) \
      AROS_LC2(int, i2d_re_X509_REQ_tbs, \
 AROS_LCA(X509_REQ *, (___req), A0), \
 AROS_LCA(unsigned char **, (___pp), A1), \
     struct Library *, AMISSL_BASE_NAME, 4363, Amissl)

#define PKCS5_pbe2_set_scrypt(___cipher, ___salt, ___saltlen, ___aiv, ___N, ___r, ___p) \
      AROS_LC7(X509_ALGOR *, PKCS5_pbe2_set_scrypt, \
 AROS_LCA(const EVP_CIPHER *, (___cipher), A0), \
 AROS_LCA(const unsigned char *, (___salt), A1), \
 AROS_LCA(int, (___saltlen), D0), \
 AROS_LCA(unsigned char *, (___aiv), A2), \
 AROS_LCA(uint64_t, (___N), D2), \
 AROS_LCA(uint64_t, (___r), D4), \
 AROS_LCA(uint64_t, (___p), D6), \
     struct Library *, AMISSL_BASE_NAME, 4364, Amissl)

#define X509_CRL_get0_extensions(___crl) \
      AROS_LC1(const STACK_OF(X509_EXTENSION) *, X509_CRL_get0_extensions, \
 AROS_LCA(const X509_CRL *, (___crl), A0), \
     struct Library *, AMISSL_BASE_NAME, 4366, Amissl)

#define X509_CRL_get0_signature(___crl, ___psig, ___palg) \
      AROS_LC3(void, X509_CRL_get0_signature, \
 AROS_LCA(const X509_CRL *, (___crl), A0), \
 AROS_LCA(const ASN1_BIT_STRING **, (___psig), A1), \
 AROS_LCA(const X509_ALGOR **, (___palg), A2), \
     struct Library *, AMISSL_BASE_NAME, 4367, Amissl)

#define X509_CRL_get_issuer(___crl) \
      AROS_LC1(X509_NAME *, X509_CRL_get_issuer, \
 AROS_LCA(const X509_CRL *, (___crl), A0), \
     struct Library *, AMISSL_BASE_NAME, 4368, Amissl)

#define X509_CRL_get_lastUpdate(___crl) \
      AROS_LC1(ASN1_TIME *, X509_CRL_get_lastUpdate, \
 AROS_LCA(X509_CRL *, (___crl), A0), \
     struct Library *, AMISSL_BASE_NAME, 4369, Amissl)

#define X509_CRL_get_nextUpdate(___crl) \
      AROS_LC1(ASN1_TIME *, X509_CRL_get_nextUpdate, \
 AROS_LCA(X509_CRL *, (___crl), A0), \
     struct Library *, AMISSL_BASE_NAME, 4370, Amissl)

#define X509_CRL_get_REVOKED(___crl) \
      AROS_LC1(STACK_OF(X509_REVOKED) *, X509_CRL_get_REVOKED, \
 AROS_LCA(X509_CRL *, (___crl), A0), \
     struct Library *, AMISSL_BASE_NAME, 4371, Amissl)

#define X509_CRL_get_signature_nid(___crl) \
      AROS_LC1(int, X509_CRL_get_signature_nid, \
 AROS_LCA(const X509_CRL *, (___crl), A0), \
     struct Library *, AMISSL_BASE_NAME, 4372, Amissl)

#define X509_CRL_get_version(___crl) \
      AROS_LC1(long, X509_CRL_get_version, \
 AROS_LCA(const X509_CRL *, (___crl), A0), \
     struct Library *, AMISSL_BASE_NAME, 4373, Amissl)

#define X509_CRL_up_ref(___crl) \
      AROS_LC1(int, X509_CRL_up_ref, \
 AROS_LCA(X509_CRL *, (___crl), A0), \
     struct Library *, AMISSL_BASE_NAME, 4374, Amissl)

#define X509_get0_extensions(___x) \
      AROS_LC1(const STACK_OF(X509_EXTENSION) *, X509_get0_extensions, \
 AROS_LCA(const X509 *, (___x), A0), \
     struct Library *, AMISSL_BASE_NAME, 4375, Amissl)

#define X509_get0_pubkey(___x) \
      AROS_LC1(EVP_PKEY *, X509_get0_pubkey, \
 AROS_LCA(const X509 *, (___x), A0), \
     struct Library *, AMISSL_BASE_NAME, 4376, Amissl)

#define X509_get0_reject_objects(___x) \
      AROS_LC1(STACK_OF(ASN1_OBJECT) *, X509_get0_reject_objects, \
 AROS_LCA(X509 *, (___x), A0), \
     struct Library *, AMISSL_BASE_NAME, 4377, Amissl)

#define X509_get0_tbs_sigalg(___x) \
      AROS_LC1(const X509_ALGOR *, X509_get0_tbs_sigalg, \
 AROS_LCA(const X509 *, (___x), A0), \
     struct Library *, AMISSL_BASE_NAME, 4378, Amissl)

#define X509_get0_trust_objects(___x) \
      AROS_LC1(STACK_OF(ASN1_OBJECT) *, X509_get0_trust_objects, \
 AROS_LCA(X509 *, (___x), A0), \
     struct Library *, AMISSL_BASE_NAME, 4379, Amissl)

#define X509_get0_uids(___x, ___piuid, ___psuid) \
      AROS_LC3(void, X509_get0_uids, \
 AROS_LCA(const X509 *, (___x), A0), \
 AROS_LCA(const ASN1_BIT_STRING **, (___piuid), A1), \
 AROS_LCA(const ASN1_BIT_STRING **, (___psuid), A2), \
     struct Library *, AMISSL_BASE_NAME, 4380, Amissl)

#define X509_getm_notAfter(___x) \
      AROS_LC1(ASN1_TIME *, X509_getm_notAfter, \
 AROS_LCA(const X509 *, (___x), A0), \
     struct Library *, AMISSL_BASE_NAME, 4381, Amissl)

#define X509_getm_notBefore(___x) \
      AROS_LC1(ASN1_TIME *, X509_getm_notBefore, \
 AROS_LCA(const X509 *, (___x), A0), \
     struct Library *, AMISSL_BASE_NAME, 4382, Amissl)

#define X509_get_signature_type(___x) \
      AROS_LC1(int, X509_get_signature_type, \
 AROS_LCA(const X509 *, (___x), A0), \
     struct Library *, AMISSL_BASE_NAME, 4383, Amissl)

#define X509_get_version(___x) \
      AROS_LC1(long, X509_get_version, \
 AROS_LCA(const X509 *, (___x), A0), \
     struct Library *, AMISSL_BASE_NAME, 4384, Amissl)

#define X509_get_X509_PUBKEY(___x) \
      AROS_LC1(X509_PUBKEY *, X509_get_X509_PUBKEY, \
 AROS_LCA(const X509 *, (___x), A0), \
     struct Library *, AMISSL_BASE_NAME, 4385, Amissl)

#define X509_NAME_ENTRY_set(___ne) \
      AROS_LC1(int, X509_NAME_ENTRY_set, \
 AROS_LCA(const X509_NAME_ENTRY *, (___ne), A0), \
     struct Library *, AMISSL_BASE_NAME, 4386, Amissl)

#define X509_NAME_get0_der(___nm, ___pder, ___pderlen) \
      AROS_LC3(int, X509_NAME_get0_der, \
 AROS_LCA(const X509_NAME *, (___nm), A0), \
 AROS_LCA(const unsigned char **, (___pder), A1), \
 AROS_LCA(size_t *, (___pderlen), A2), \
     struct Library *, AMISSL_BASE_NAME, 4387, Amissl)

#define X509_PUBKEY_get0(___key) \
      AROS_LC1(EVP_PKEY *, X509_PUBKEY_get0, \
 AROS_LCA(const X509_PUBKEY *, (___key), A0), \
     struct Library *, AMISSL_BASE_NAME, 4388, Amissl)

#define X509_REQ_get0_signature(___req, ___psig, ___palg) \
      AROS_LC3(void, X509_REQ_get0_signature, \
 AROS_LCA(const X509_REQ *, (___req), A0), \
 AROS_LCA(const ASN1_BIT_STRING **, (___psig), A1), \
 AROS_LCA(const X509_ALGOR **, (___palg), A2), \
     struct Library *, AMISSL_BASE_NAME, 4389, Amissl)

#define X509_REQ_get_signature_nid(___req) \
      AROS_LC1(int, X509_REQ_get_signature_nid, \
 AROS_LCA(const X509_REQ *, (___req), A0), \
     struct Library *, AMISSL_BASE_NAME, 4390, Amissl)

#define X509_REQ_get_subject_name(___req) \
      AROS_LC1(X509_NAME *, X509_REQ_get_subject_name, \
 AROS_LCA(const X509_REQ *, (___req), A0), \
     struct Library *, AMISSL_BASE_NAME, 4391, Amissl)

#define X509_REQ_get_version(___req) \
      AROS_LC1(long, X509_REQ_get_version, \
 AROS_LCA(const X509_REQ *, (___req), A0), \
     struct Library *, AMISSL_BASE_NAME, 4392, Amissl)

#define X509_REQ_get_X509_PUBKEY(___req) \
      AROS_LC1(X509_PUBKEY *, X509_REQ_get_X509_PUBKEY, \
 AROS_LCA(X509_REQ *, (___req), A0), \
     struct Library *, AMISSL_BASE_NAME, 4393, Amissl)

#define X509_REVOKED_get0_extensions(___r) \
      AROS_LC1(const STACK_OF(X509_EXTENSION) *, X509_REVOKED_get0_extensions, \
 AROS_LCA(const X509_REVOKED *, (___r), A0), \
     struct Library *, AMISSL_BASE_NAME, 4394, Amissl)

#define X509_REVOKED_get0_revocationDate(___x) \
      AROS_LC1(const ASN1_TIME *, X509_REVOKED_get0_revocationDate, \
 AROS_LCA(const X509_REVOKED *, (___x), A0), \
     struct Library *, AMISSL_BASE_NAME, 4395, Amissl)

#define X509_REVOKED_get0_serialNumber(___x) \
      AROS_LC1(const ASN1_INTEGER *, X509_REVOKED_get0_serialNumber, \
 AROS_LCA(const X509_REVOKED *, (___x), A0), \
     struct Library *, AMISSL_BASE_NAME, 4396, Amissl)

#define X509_trusted(___x) \
      AROS_LC1(int, X509_trusted, \
 AROS_LCA(const X509 *, (___x), A0), \
     struct Library *, AMISSL_BASE_NAME, 4397, Amissl)

#define X509_up_ref(___x) \
      AROS_LC1(int, X509_up_ref, \
 AROS_LCA(X509 *, (___x), A0), \
     struct Library *, AMISSL_BASE_NAME, 4398, Amissl)

#define X509_STORE_CTX_get_num_untrusted(___ctx) \
      AROS_LC1(int, X509_STORE_CTX_get_num_untrusted, \
 AROS_LCA(const X509_STORE_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 4399, Amissl)

#define X509_STORE_CTX_set0_dane(___ctx, ___dane) \
      AROS_LC2(void, X509_STORE_CTX_set0_dane, \
 AROS_LCA(X509_STORE_CTX *, (___ctx), A0), \
 AROS_LCA(SSL_DANE *, (___dane), A1), \
     struct Library *, AMISSL_BASE_NAME, 4400, Amissl)

#define X509_VERIFY_PARAM_move_peername(___to, ___from) \
      AROS_LC2(void, X509_VERIFY_PARAM_move_peername, \
 AROS_LCA(X509_VERIFY_PARAM *, (___to), A0), \
 AROS_LCA(X509_VERIFY_PARAM *, (___from), A1), \
     struct Library *, AMISSL_BASE_NAME, 4401, Amissl)

#define i2s_ASN1_IA5STRING(___method, ___ia5) \
      AROS_LC2(char *, i2s_ASN1_IA5STRING, \
 AROS_LCA(X509V3_EXT_METHOD *, (___method), A0), \
 AROS_LCA(ASN1_IA5STRING *, (___ia5), A1), \
     struct Library *, AMISSL_BASE_NAME, 4402, Amissl)

#define s2i_ASN1_IA5STRING(___method, ___ctx, ___str) \
      AROS_LC3(ASN1_IA5STRING *, s2i_ASN1_IA5STRING, \
 AROS_LCA(X509V3_EXT_METHOD *, (___method), A0), \
 AROS_LCA(X509V3_CTX *, (___ctx), A1), \
 AROS_LCA(const char *, (___str), A2), \
     struct Library *, AMISSL_BASE_NAME, 4403, Amissl)

#define X509v3_addr_add_inherit(___addr, ___afi, ___safi) \
      AROS_LC3(int, X509v3_addr_add_inherit, \
 AROS_LCA(IPAddrBlocks *, (___addr), A0), \
 AROS_LCA(const unsigned, (___afi), D0), \
 AROS_LCA(const unsigned *, (___safi), A1), \
     struct Library *, AMISSL_BASE_NAME, 4404, Amissl)

#define X509v3_addr_add_prefix(___addr, ___afi, ___safi, ___a, ___prefixlen) \
      AROS_LC5(int, X509v3_addr_add_prefix, \
 AROS_LCA(IPAddrBlocks *, (___addr), A0), \
 AROS_LCA(const unsigned, (___afi), D0), \
 AROS_LCA(const unsigned *, (___safi), A1), \
 AROS_LCA(unsigned char *, (___a), A2), \
 AROS_LCA(const int, (___prefixlen), D1), \
     struct Library *, AMISSL_BASE_NAME, 4405, Amissl)

#define X509v3_addr_add_range(___addr, ___afi, ___safi, ___min, ___max) \
      AROS_LC5(int, X509v3_addr_add_range, \
 AROS_LCA(IPAddrBlocks *, (___addr), A0), \
 AROS_LCA(const unsigned, (___afi), D0), \
 AROS_LCA(const unsigned *, (___safi), A1), \
 AROS_LCA(unsigned char *, (___min), A2), \
 AROS_LCA(unsigned char *, (___max), A3), \
     struct Library *, AMISSL_BASE_NAME, 4406, Amissl)

#define X509v3_addr_canonize(___addr) \
      AROS_LC1(int, X509v3_addr_canonize, \
 AROS_LCA(IPAddrBlocks *, (___addr), A0), \
     struct Library *, AMISSL_BASE_NAME, 4407, Amissl)

#define X509v3_addr_get_afi(___f) \
      AROS_LC1(unsigned, X509v3_addr_get_afi, \
 AROS_LCA(const IPAddressFamily *, (___f), A0), \
     struct Library *, AMISSL_BASE_NAME, 4408, Amissl)

#define X509v3_addr_get_range(___aor, ___afi, ___min, ___max, ___length) \
      AROS_LC5(int, X509v3_addr_get_range, \
 AROS_LCA(IPAddressOrRange *, (___aor), A0), \
 AROS_LCA(const unsigned, (___afi), D0), \
 AROS_LCA(unsigned char *, (___min), A1), \
 AROS_LCA(unsigned char *, (___max), A2), \
 AROS_LCA(const int, (___length), D1), \
     struct Library *, AMISSL_BASE_NAME, 4409, Amissl)

#define X509v3_addr_inherits(___addr) \
      AROS_LC1(int, X509v3_addr_inherits, \
 AROS_LCA(IPAddrBlocks *, (___addr), A0), \
     struct Library *, AMISSL_BASE_NAME, 4410, Amissl)

#define X509v3_addr_is_canonical(___addr) \
      AROS_LC1(int, X509v3_addr_is_canonical, \
 AROS_LCA(IPAddrBlocks *, (___addr), A0), \
     struct Library *, AMISSL_BASE_NAME, 4411, Amissl)

#define X509v3_addr_subset(___a, ___b) \
      AROS_LC2(int, X509v3_addr_subset, \
 AROS_LCA(IPAddrBlocks *, (___a), A0), \
 AROS_LCA(IPAddrBlocks *, (___b), A1), \
     struct Library *, AMISSL_BASE_NAME, 4412, Amissl)

#define X509v3_addr_validate_path(___ctx) \
      AROS_LC1(int, X509v3_addr_validate_path, \
 AROS_LCA(X509_STORE_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 4413, Amissl)

#define X509v3_addr_validate_resource_set(___chain, ___ext, ___allow_inheritance) \
      AROS_LC3(int, X509v3_addr_validate_resource_set, \
 AROS_LCA(STACK_OF(X509) *, (___chain), A0), \
 AROS_LCA(IPAddrBlocks *, (___ext), A1), \
 AROS_LCA(int, (___allow_inheritance), D0), \
     struct Library *, AMISSL_BASE_NAME, 4414, Amissl)

#define X509v3_asid_add_inherit(___asid, ___which) \
      AROS_LC2(int, X509v3_asid_add_inherit, \
 AROS_LCA(ASIdentifiers *, (___asid), A0), \
 AROS_LCA(int, (___which), D0), \
     struct Library *, AMISSL_BASE_NAME, 4415, Amissl)

#define X509v3_asid_add_id_or_range(___asid, ___which, ___min, ___max) \
      AROS_LC4(int, X509v3_asid_add_id_or_range, \
 AROS_LCA(ASIdentifiers *, (___asid), A0), \
 AROS_LCA(int, (___which), D0), \
 AROS_LCA(ASN1_INTEGER *, (___min), A1), \
 AROS_LCA(ASN1_INTEGER *, (___max), A2), \
     struct Library *, AMISSL_BASE_NAME, 4416, Amissl)

#define X509v3_asid_canonize(___asid) \
      AROS_LC1(int, X509v3_asid_canonize, \
 AROS_LCA(ASIdentifiers *, (___asid), A0), \
     struct Library *, AMISSL_BASE_NAME, 4417, Amissl)

#define X509v3_asid_inherits(___asid) \
      AROS_LC1(int, X509v3_asid_inherits, \
 AROS_LCA(ASIdentifiers *, (___asid), A0), \
     struct Library *, AMISSL_BASE_NAME, 4418, Amissl)

#define X509v3_asid_is_canonical(___asid) \
      AROS_LC1(int, X509v3_asid_is_canonical, \
 AROS_LCA(ASIdentifiers *, (___asid), A0), \
     struct Library *, AMISSL_BASE_NAME, 4419, Amissl)

#define X509v3_asid_subset(___a, ___b) \
      AROS_LC2(int, X509v3_asid_subset, \
 AROS_LCA(ASIdentifiers *, (___a), A0), \
 AROS_LCA(ASIdentifiers *, (___b), A1), \
     struct Library *, AMISSL_BASE_NAME, 4420, Amissl)

#define X509v3_asid_validate_path(___ctx) \
      AROS_LC1(int, X509v3_asid_validate_path, \
 AROS_LCA(X509_STORE_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 4421, Amissl)

#define X509v3_asid_validate_resource_set(___chain, ___ext, ___allow_inheritance) \
      AROS_LC3(int, X509v3_asid_validate_resource_set, \
 AROS_LCA(STACK_OF(X509) *, (___chain), A0), \
 AROS_LCA(ASIdentifiers *, (___ext), A1), \
 AROS_LCA(int, (___allow_inheritance), D0), \
     struct Library *, AMISSL_BASE_NAME, 4422, Amissl)

#define X509_get0_subject_key_id(___x) \
      AROS_LC1(const ASN1_OCTET_STRING *, X509_get0_subject_key_id, \
 AROS_LCA(X509 *, (___x), A0), \
     struct Library *, AMISSL_BASE_NAME, 4423, Amissl)

#define X509_get_extended_key_usage(___x) \
      AROS_LC1(uint32_t, X509_get_extended_key_usage, \
 AROS_LCA(X509 *, (___x), A0), \
     struct Library *, AMISSL_BASE_NAME, 4424, Amissl)

#define X509_get_extension_flags(___x) \
      AROS_LC1(uint32_t, X509_get_extension_flags, \
 AROS_LCA(X509 *, (___x), A0), \
     struct Library *, AMISSL_BASE_NAME, 4425, Amissl)

#define X509_get_key_usage(___x) \
      AROS_LC1(uint32_t, X509_get_key_usage, \
 AROS_LCA(X509 *, (___x), A0), \
     struct Library *, AMISSL_BASE_NAME, 4426, Amissl)

#define DTLSv1_listen(___s, ___client) \
      AROS_LC2(int, DTLSv1_listen, \
 AROS_LCA(SSL *, (___s), A0), \
 AROS_LCA(BIO_ADDR *, (___client), A1), \
     struct Library *, AMISSL_BASE_NAME, 4427, Amissl)

#define OPENSSL_init_ssl(___opts, ___settings) \
      AROS_LC2(int, OPENSSL_init_ssl, \
 AROS_LCA(uint64_t, (___opts), D0), \
 AROS_LCA(const OPENSSL_INIT_SETTINGS *, (___settings), A0), \
     struct Library *, AMISSL_BASE_NAME, 4428, Amissl)

#define SSL_add1_host(___s, ___host) \
      AROS_LC2(int, SSL_add1_host, \
 AROS_LCA(SSL *, (___s), A0), \
 AROS_LCA(const char *, (___host), A1), \
     struct Library *, AMISSL_BASE_NAME, 4429, Amissl)

#define SSL_add_ssl_module() \
      AROS_LC0(void, SSL_add_ssl_module, \
     struct Library *, AMISSL_BASE_NAME, 4430, Amissl)

#define SSL_CIPHER_get_cipher_nid(___c) \
      AROS_LC1(int, SSL_CIPHER_get_cipher_nid, \
 AROS_LCA(const SSL_CIPHER *, (___c), A0), \
     struct Library *, AMISSL_BASE_NAME, 4431, Amissl)

#define SSL_CIPHER_get_digest_nid(___c) \
      AROS_LC1(int, SSL_CIPHER_get_digest_nid, \
 AROS_LCA(const SSL_CIPHER *, (___c), A0), \
     struct Library *, AMISSL_BASE_NAME, 4432, Amissl)

#define SSL_clear_options(___s, ___op) \
      AROS_LC2(uint64_t, SSL_clear_options, \
 AROS_LCA(SSL *, (___s), A0), \
 AROS_LCA(uint64_t, (___op), D0), \
     struct Library *, AMISSL_BASE_NAME, 4433, Amissl)

#define SSL_config(___s, ___name) \
      AROS_LC2(int, SSL_config, \
 AROS_LCA(SSL *, (___s), A0), \
 AROS_LCA(const char *, (___name), A1), \
     struct Library *, AMISSL_BASE_NAME, 4434, Amissl)

#define SSL_CTX_clear_options(___ctx, ___op) \
      AROS_LC2(uint64_t, SSL_CTX_clear_options, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
 AROS_LCA(uint64_t, (___op), D0), \
     struct Library *, AMISSL_BASE_NAME, 4435, Amissl)

#define SSL_CTX_config(___ctx, ___name) \
      AROS_LC2(int, SSL_CTX_config, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
 AROS_LCA(const char *, (___name), A1), \
     struct Library *, AMISSL_BASE_NAME, 4436, Amissl)

#define SSL_CTX_dane_enable(___ctx) \
      AROS_LC1(int, SSL_CTX_dane_enable, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 4437, Amissl)

#define SSL_CTX_dane_mtype_set(___ctx, ___md, ___mtype, ___ord) \
      AROS_LC4(int, SSL_CTX_dane_mtype_set, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
 AROS_LCA(const EVP_MD *, (___md), A1), \
 AROS_LCA(uint8_t, (___mtype), D0), \
 AROS_LCA(uint8_t, (___ord), D1), \
     struct Library *, AMISSL_BASE_NAME, 4438, Amissl)

#define SSL_CTX_get0_security_ex_data(___ctx) \
      AROS_LC1(void *, SSL_CTX_get0_security_ex_data, \
 AROS_LCA(const SSL_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 4439, Amissl)

#define SSL_CTX_get_options(___ctx) \
      AROS_LC1(uint64_t, SSL_CTX_get_options, \
 AROS_LCA(const SSL_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 4440, Amissl)

#define SSL_CTX_get_security_callback(___ctx) \
      AROS_LC1(int (*)(const SSL *, const SSL_CTX *, int, int, int, void *, void *), SSL_CTX_get_security_callback, \
 AROS_LCA(const SSL_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 4441, Amissl)

#define SSL_CTX_get_security_level(___ctx) \
      AROS_LC1(int, SSL_CTX_get_security_level, \
 AROS_LCA(const SSL_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 4442, Amissl)

#define SSL_CTX_set0_security_ex_data(___ctx, ___ex) \
      AROS_LC2(void, SSL_CTX_set0_security_ex_data, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
 AROS_LCA(void *, (___ex), A1), \
     struct Library *, AMISSL_BASE_NAME, 4443, Amissl)

#define SSL_CTX_set_default_verify_dir(___ctx) \
      AROS_LC1(int, SSL_CTX_set_default_verify_dir, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 4444, Amissl)

#define SSL_CTX_set_default_verify_file(___ctx) \
      AROS_LC1(int, SSL_CTX_set_default_verify_file, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 4445, Amissl)

#define SSL_CTX_set_not_resumable_session_callback(___ctx, ___cb) \
      AROS_LC2(void, SSL_CTX_set_not_resumable_session_callback, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
 AROS_LCA(int (*)(SSL *,int), (___cb), A1), \
     struct Library *, AMISSL_BASE_NAME, 4446, Amissl)

#define SSL_CTX_set_options(___ctx, ___op) \
      AROS_LC2(uint64_t, SSL_CTX_set_options, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
 AROS_LCA(uint64_t, (___op), D0), \
     struct Library *, AMISSL_BASE_NAME, 4447, Amissl)

#define SSL_CTX_set_security_callback(___ctx, ___cb) \
      AROS_LC2(void, SSL_CTX_set_security_callback, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
 AROS_LCA(int (*)(const SSL *,const SSL_CTX *,int,int,int,void *,void *), (___cb), A1), \
     struct Library *, AMISSL_BASE_NAME, 4448, Amissl)

#define SSL_CTX_set_security_level(___ctx, ___level) \
      AROS_LC2(void, SSL_CTX_set_security_level, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
 AROS_LCA(int, (___level), D0), \
     struct Library *, AMISSL_BASE_NAME, 4449, Amissl)

#define SSL_CTX_up_ref(___ctx) \
      AROS_LC1(int, SSL_CTX_up_ref, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 4450, Amissl)

#define SSL_dane_enable(___s, ___basedomain) \
      AROS_LC2(int, SSL_dane_enable, \
 AROS_LCA(SSL *, (___s), A0), \
 AROS_LCA(const char *, (___basedomain), A1), \
     struct Library *, AMISSL_BASE_NAME, 4451, Amissl)

#define SSL_dane_tlsa_add(___s, ___usage, ___selector, ___mtype, ___data, ___dlen) \
      AROS_LC6(int, SSL_dane_tlsa_add, \
 AROS_LCA(SSL *, (___s), A0), \
 AROS_LCA(uint8_t, (___usage), D0), \
 AROS_LCA(uint8_t, (___selector), D1), \
 AROS_LCA(uint8_t, (___mtype), D2), \
 AROS_LCA(unsigned const char *, (___data), A1), \
 AROS_LCA(size_t, (___dlen), D3), \
     struct Library *, AMISSL_BASE_NAME, 4452, Amissl)

#define SSL_get0_dane(___ssl) \
      AROS_LC1(SSL_DANE *, SSL_get0_dane, \
 AROS_LCA(SSL *, (___ssl), A0), \
     struct Library *, AMISSL_BASE_NAME, 4453, Amissl)

#define SSL_get0_dane_authority(___s, ___mcert, ___mspki) \
      AROS_LC3(int, SSL_get0_dane_authority, \
 AROS_LCA(SSL *, (___s), A0), \
 AROS_LCA(X509 **, (___mcert), A1), \
 AROS_LCA(EVP_PKEY **, (___mspki), A2), \
     struct Library *, AMISSL_BASE_NAME, 4454, Amissl)

#define SSL_get0_dane_tlsa(___s, ___usage, ___selector, ___mtype, ___data, ___dlen) \
      AROS_LC6(int, SSL_get0_dane_tlsa, \
 AROS_LCA(SSL *, (___s), A0), \
 AROS_LCA(uint8_t *, (___usage), A1), \
 AROS_LCA(uint8_t *, (___selector), A2), \
 AROS_LCA(uint8_t *, (___mtype), A3), \
 AROS_LCA(unsigned const char **, (___data), D0), \
 AROS_LCA(size_t *, (___dlen), D1), \
     struct Library *, AMISSL_BASE_NAME, 4455, Amissl)

#define SSL_get0_peername(___s) \
      AROS_LC1(const char *, SSL_get0_peername, \
 AROS_LCA(SSL *, (___s), A0), \
     struct Library *, AMISSL_BASE_NAME, 4456, Amissl)

#define SSL_get0_security_ex_data(___s) \
      AROS_LC1(void *, SSL_get0_security_ex_data, \
 AROS_LCA(const SSL *, (___s), A0), \
     struct Library *, AMISSL_BASE_NAME, 4457, Amissl)

#define SSL_get1_supported_ciphers(___s) \
      AROS_LC1(STACK_OF(SSL_CIPHER) *, SSL_get1_supported_ciphers, \
 AROS_LCA(SSL *, (___s), A0), \
     struct Library *, AMISSL_BASE_NAME, 4458, Amissl)

#define SSL_get_client_random(___s, ___out, ___outlen) \
      AROS_LC3(size_t, SSL_get_client_random, \
 AROS_LCA(const SSL *, (___s), A0), \
 AROS_LCA(unsigned char *, (___out), A1), \
 AROS_LCA(size_t, (___outlen), D0), \
     struct Library *, AMISSL_BASE_NAME, 4460, Amissl)

#define SSL_get_options(___s) \
      AROS_LC1(uint64_t, SSL_get_options, \
 AROS_LCA(const SSL *, (___s), A0), \
     struct Library *, AMISSL_BASE_NAME, 4461, Amissl)

#define SSL_get_security_callback(___s) \
      AROS_LC1(int (*)(const SSL *, const SSL_CTX *, int, int, int, void *, void *), SSL_get_security_callback, \
 AROS_LCA(const SSL *, (___s), A0), \
     struct Library *, AMISSL_BASE_NAME, 4462, Amissl)

#define SSL_get_security_level(___s) \
      AROS_LC1(int, SSL_get_security_level, \
 AROS_LCA(const SSL *, (___s), A0), \
     struct Library *, AMISSL_BASE_NAME, 4463, Amissl)

#define SSL_get_server_random(___s, ___out, ___outlen) \
      AROS_LC3(size_t, SSL_get_server_random, \
 AROS_LCA(const SSL *, (___s), A0), \
 AROS_LCA(unsigned char *, (___out), A1), \
 AROS_LCA(size_t, (___outlen), D0), \
     struct Library *, AMISSL_BASE_NAME, 4464, Amissl)

#define SSL_get_state(___ssl) \
      AROS_LC1(OSSL_HANDSHAKE_STATE, SSL_get_state, \
 AROS_LCA(const SSL *, (___ssl), A0), \
     struct Library *, AMISSL_BASE_NAME, 4465, Amissl)

#define SSL_in_before(___s) \
      AROS_LC1(int, SSL_in_before, \
 AROS_LCA(const SSL *, (___s), A0), \
     struct Library *, AMISSL_BASE_NAME, 4466, Amissl)

#define SSL_in_init(___s) \
      AROS_LC1(int, SSL_in_init, \
 AROS_LCA(const SSL *, (___s), A0), \
     struct Library *, AMISSL_BASE_NAME, 4467, Amissl)

#define SSL_is_init_finished(___s) \
      AROS_LC1(int, SSL_is_init_finished, \
 AROS_LCA(const SSL *, (___s), A0), \
     struct Library *, AMISSL_BASE_NAME, 4468, Amissl)

#define SSL_SESSION_get0_ticket(___s, ___tick, ___len) \
      AROS_LC3(void, SSL_SESSION_get0_ticket, \
 AROS_LCA(const SSL_SESSION *, (___s), A0), \
 AROS_LCA(const unsigned char **, (___tick), A1), \
 AROS_LCA(size_t *, (___len), A2), \
     struct Library *, AMISSL_BASE_NAME, 4469, Amissl)

#define SSL_SESSION_get_master_key(___sess, ___out, ___outlen) \
      AROS_LC3(size_t, SSL_SESSION_get_master_key, \
 AROS_LCA(const SSL_SESSION *, (___sess), A0), \
 AROS_LCA(unsigned char *, (___out), A1), \
 AROS_LCA(size_t, (___outlen), D0), \
     struct Library *, AMISSL_BASE_NAME, 4470, Amissl)

#define SSL_SESSION_get_ticket_lifetime_hint(___s) \
      AROS_LC1(unsigned long, SSL_SESSION_get_ticket_lifetime_hint, \
 AROS_LCA(const SSL_SESSION *, (___s), A0), \
     struct Library *, AMISSL_BASE_NAME, 4471, Amissl)

#define SSL_SESSION_has_ticket(___s) \
      AROS_LC1(int, SSL_SESSION_has_ticket, \
 AROS_LCA(const SSL_SESSION *, (___s), A0), \
     struct Library *, AMISSL_BASE_NAME, 4472, Amissl)

#define SSL_SESSION_print_keylog(___bp, ___x) \
      AROS_LC2(int, SSL_SESSION_print_keylog, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(const SSL_SESSION *, (___x), A1), \
     struct Library *, AMISSL_BASE_NAME, 4473, Amissl)

#define SSL_session_reused(___s) \
      AROS_LC1(int, SSL_session_reused, \
 AROS_LCA(const SSL *, (___s), A0), \
     struct Library *, AMISSL_BASE_NAME, 4474, Amissl)

#define SSL_set0_security_ex_data(___s, ___ex) \
      AROS_LC2(void, SSL_set0_security_ex_data, \
 AROS_LCA(SSL *, (___s), A0), \
 AROS_LCA(void *, (___ex), A1), \
     struct Library *, AMISSL_BASE_NAME, 4475, Amissl)

#define SSL_set1_host(___s, ___host) \
      AROS_LC2(int, SSL_set1_host, \
 AROS_LCA(SSL *, (___s), A0), \
 AROS_LCA(const char *, (___host), A1), \
     struct Library *, AMISSL_BASE_NAME, 4476, Amissl)

#define SSL_set_default_passwd_cb(___s, ___cb) \
      AROS_LC2(void, SSL_set_default_passwd_cb, \
 AROS_LCA(SSL *, (___s), A0), \
 AROS_LCA(pem_password_cb *, (___cb), A1), \
     struct Library *, AMISSL_BASE_NAME, 4477, Amissl)

#define SSL_set_default_passwd_cb_userdata(___s, ___u) \
      AROS_LC2(void, SSL_set_default_passwd_cb_userdata, \
 AROS_LCA(SSL *, (___s), A0), \
 AROS_LCA(void *, (___u), A1), \
     struct Library *, AMISSL_BASE_NAME, 4478, Amissl)

#define SSL_set_hostflags(___s, ___flags) \
      AROS_LC2(void, SSL_set_hostflags, \
 AROS_LCA(SSL *, (___s), A0), \
 AROS_LCA(unsigned int, (___flags), D0), \
     struct Library *, AMISSL_BASE_NAME, 4479, Amissl)

#define SSL_set_not_resumable_session_callback(___ssl, ___cb) \
      AROS_LC2(void, SSL_set_not_resumable_session_callback, \
 AROS_LCA(SSL *, (___ssl), A0), \
 AROS_LCA(int (*)(SSL *,int), (___cb), A1), \
     struct Library *, AMISSL_BASE_NAME, 4480, Amissl)

#define SSL_set_options(___s, ___op) \
      AROS_LC2(uint64_t, SSL_set_options, \
 AROS_LCA(SSL *, (___s), A0), \
 AROS_LCA(uint64_t, (___op), D0), \
     struct Library *, AMISSL_BASE_NAME, 4481, Amissl)

#define SSL_set0_rbio(___s, ___rbio) \
      AROS_LC2(void, SSL_set0_rbio, \
 AROS_LCA(SSL *, (___s), A0), \
 AROS_LCA(BIO *, (___rbio), A1), \
     struct Library *, AMISSL_BASE_NAME, 4482, Amissl)

#define SSL_set_security_callback(___s, ___cb) \
      AROS_LC2(void, SSL_set_security_callback, \
 AROS_LCA(SSL *, (___s), A0), \
 AROS_LCA(int (*)(const SSL *,const SSL_CTX *,int,int,int,void *,void *), (___cb), A1), \
     struct Library *, AMISSL_BASE_NAME, 4483, Amissl)

#define SSL_set_security_level(___s, ___level) \
      AROS_LC2(void, SSL_set_security_level, \
 AROS_LCA(SSL *, (___s), A0), \
 AROS_LCA(int, (___level), D0), \
     struct Library *, AMISSL_BASE_NAME, 4484, Amissl)

#define SSL_set0_wbio(___s, ___wbio) \
      AROS_LC2(void, SSL_set0_wbio, \
 AROS_LCA(SSL *, (___s), A0), \
 AROS_LCA(BIO *, (___wbio), A1), \
     struct Library *, AMISSL_BASE_NAME, 4485, Amissl)

#define SSL_up_ref(___s) \
      AROS_LC1(int, SSL_up_ref, \
 AROS_LCA(SSL *, (___s), A0), \
     struct Library *, AMISSL_BASE_NAME, 4486, Amissl)

#define SSL_use_certificate_chain_file(___ssl, ___file) \
      AROS_LC2(int, SSL_use_certificate_chain_file, \
 AROS_LCA(SSL *, (___ssl), A0), \
 AROS_LCA(const char *, (___file), A1), \
     struct Library *, AMISSL_BASE_NAME, 4487, Amissl)

#define SSL_waiting_for_async(___s) \
      AROS_LC1(int, SSL_waiting_for_async, \
 AROS_LCA(SSL *, (___s), A0), \
     struct Library *, AMISSL_BASE_NAME, 4488, Amissl)

#define TLS_client_method() \
      AROS_LC0(const SSL_METHOD *, TLS_client_method, \
     struct Library *, AMISSL_BASE_NAME, 4489, Amissl)

#define TLS_method() \
      AROS_LC0(const SSL_METHOD *, TLS_method, \
     struct Library *, AMISSL_BASE_NAME, 4490, Amissl)

#define TLS_server_method() \
      AROS_LC0(const SSL_METHOD *, TLS_server_method, \
     struct Library *, AMISSL_BASE_NAME, 4491, Amissl)

#define ASYNC_WAIT_CTX_new() \
      AROS_LC0(ASYNC_WAIT_CTX *, ASYNC_WAIT_CTX_new, \
     struct Library *, AMISSL_BASE_NAME, 4492, Amissl)

#define ASYNC_WAIT_CTX_free(___ctx) \
      AROS_LC1(void, ASYNC_WAIT_CTX_free, \
 AROS_LCA(ASYNC_WAIT_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 4493, Amissl)

#define ASYNC_WAIT_CTX_set_wait_fd(___ctx, ___key, ___fd, ___custom_data, ___cleanup) \
      AROS_LC5(int, ASYNC_WAIT_CTX_set_wait_fd, \
 AROS_LCA(ASYNC_WAIT_CTX *, (___ctx), A0), \
 AROS_LCA(const void *, (___key), A1), \
 AROS_LCA(OSSL_ASYNC_FD, (___fd), D0), \
 AROS_LCA(void *, (___custom_data), A2), \
 AROS_LCA(void (*)(ASYNC_WAIT_CTX *,const void *,OSSL_ASYNC_FD,void *), (___cleanup), A3), \
     struct Library *, AMISSL_BASE_NAME, 4494, Amissl)

#define ASYNC_WAIT_CTX_get_fd(___ctx, ___key, ___fd, ___custom_data) \
      AROS_LC4(int, ASYNC_WAIT_CTX_get_fd, \
 AROS_LCA(ASYNC_WAIT_CTX *, (___ctx), A0), \
 AROS_LCA(const void *, (___key), A1), \
 AROS_LCA(OSSL_ASYNC_FD *, (___fd), A2), \
 AROS_LCA(void **, (___custom_data), A3), \
     struct Library *, AMISSL_BASE_NAME, 4495, Amissl)

#define ASYNC_WAIT_CTX_get_all_fds(___ctx, ___fd, ___numfds) \
      AROS_LC3(int, ASYNC_WAIT_CTX_get_all_fds, \
 AROS_LCA(ASYNC_WAIT_CTX *, (___ctx), A0), \
 AROS_LCA(OSSL_ASYNC_FD *, (___fd), A1), \
 AROS_LCA(size_t *, (___numfds), A2), \
     struct Library *, AMISSL_BASE_NAME, 4496, Amissl)

#define ASYNC_WAIT_CTX_get_changed_fds(___ctx, ___addfd, ___numaddfds, ___delfd, ___numdelfds) \
      AROS_LC5(int, ASYNC_WAIT_CTX_get_changed_fds, \
 AROS_LCA(ASYNC_WAIT_CTX *, (___ctx), A0), \
 AROS_LCA(OSSL_ASYNC_FD *, (___addfd), A1), \
 AROS_LCA(size_t *, (___numaddfds), A2), \
 AROS_LCA(OSSL_ASYNC_FD *, (___delfd), A3), \
 AROS_LCA(size_t *, (___numdelfds), D0), \
     struct Library *, AMISSL_BASE_NAME, 4497, Amissl)

#define ASYNC_WAIT_CTX_clear_fd(___ctx, ___key) \
      AROS_LC2(int, ASYNC_WAIT_CTX_clear_fd, \
 AROS_LCA(ASYNC_WAIT_CTX *, (___ctx), A0), \
 AROS_LCA(const void *, (___key), A1), \
     struct Library *, AMISSL_BASE_NAME, 4498, Amissl)

#define ASYNC_is_capable() \
      AROS_LC0(int, ASYNC_is_capable, \
     struct Library *, AMISSL_BASE_NAME, 4499, Amissl)

#define ASYNC_get_wait_ctx(___job) \
      AROS_LC1(ASYNC_WAIT_CTX *, ASYNC_get_wait_ctx, \
 AROS_LCA(ASYNC_JOB *, (___job), A0), \
     struct Library *, AMISSL_BASE_NAME, 4500, Amissl)

#define BIO_up_ref(___a) \
      AROS_LC1(int, BIO_up_ref, \
 AROS_LCA(BIO *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 4501, Amissl)

#define BN_BLINDING_is_current_thread(___b) \
      AROS_LC1(int, BN_BLINDING_is_current_thread, \
 AROS_LCA(BN_BLINDING *, (___b), A0), \
     struct Library *, AMISSL_BASE_NAME, 4502, Amissl)

#define BN_BLINDING_set_current_thread(___b) \
      AROS_LC1(void, BN_BLINDING_set_current_thread, \
 AROS_LCA(BN_BLINDING *, (___b), A0), \
     struct Library *, AMISSL_BASE_NAME, 4503, Amissl)

#define BN_BLINDING_lock(___b) \
      AROS_LC1(int, BN_BLINDING_lock, \
 AROS_LCA(BN_BLINDING *, (___b), A0), \
     struct Library *, AMISSL_BASE_NAME, 4504, Amissl)

#define BN_BLINDING_unlock(___b) \
      AROS_LC1(int, BN_BLINDING_unlock, \
 AROS_LCA(BN_BLINDING *, (___b), A0), \
     struct Library *, AMISSL_BASE_NAME, 4505, Amissl)

#define CRYPTO_THREAD_run_once(___once, ___init) \
      AROS_LC2(int, CRYPTO_THREAD_run_once, \
 AROS_LCA(CRYPTO_ONCE *, (___once), A0), \
 AROS_LCA(void (*)(void), (___init), A1), \
     struct Library *, AMISSL_BASE_NAME, 4506, Amissl)

#define CRYPTO_THREAD_init_local(___key, ___cleanup) \
      AROS_LC2(int, CRYPTO_THREAD_init_local, \
 AROS_LCA(CRYPTO_THREAD_LOCAL *, (___key), A0), \
 AROS_LCA(void (*)(void *), (___cleanup), A1), \
     struct Library *, AMISSL_BASE_NAME, 4507, Amissl)

#define CRYPTO_THREAD_get_local(___key) \
      AROS_LC1(void *, CRYPTO_THREAD_get_local, \
 AROS_LCA(CRYPTO_THREAD_LOCAL *, (___key), A0), \
     struct Library *, AMISSL_BASE_NAME, 4508, Amissl)

#define CRYPTO_THREAD_set_local(___key, ___val) \
      AROS_LC2(int, CRYPTO_THREAD_set_local, \
 AROS_LCA(CRYPTO_THREAD_LOCAL *, (___key), A0), \
 AROS_LCA(void *, (___val), A1), \
     struct Library *, AMISSL_BASE_NAME, 4509, Amissl)

#define CRYPTO_THREAD_cleanup_local(___key) \
      AROS_LC1(int, CRYPTO_THREAD_cleanup_local, \
 AROS_LCA(CRYPTO_THREAD_LOCAL *, (___key), A0), \
     struct Library *, AMISSL_BASE_NAME, 4510, Amissl)

#define CRYPTO_THREAD_get_current_id() \
      AROS_LC0(CRYPTO_THREAD_ID, CRYPTO_THREAD_get_current_id, \
     struct Library *, AMISSL_BASE_NAME, 4511, Amissl)

#define CRYPTO_THREAD_compare_id(___a, ___b) \
      AROS_LC2(int, CRYPTO_THREAD_compare_id, \
 AROS_LCA(CRYPTO_THREAD_ID, (___a), D0), \
 AROS_LCA(CRYPTO_THREAD_ID, (___b), D1), \
     struct Library *, AMISSL_BASE_NAME, 4512, Amissl)

#define CRYPTO_THREAD_lock_new() \
      AROS_LC0(CRYPTO_RWLOCK *, CRYPTO_THREAD_lock_new, \
     struct Library *, AMISSL_BASE_NAME, 4513, Amissl)

#define CRYPTO_THREAD_read_lock(___lock) \
      AROS_LC1(int, CRYPTO_THREAD_read_lock, \
 AROS_LCA(CRYPTO_RWLOCK *, (___lock), A0), \
     struct Library *, AMISSL_BASE_NAME, 4514, Amissl)

#define CRYPTO_THREAD_write_lock(___lock) \
      AROS_LC1(int, CRYPTO_THREAD_write_lock, \
 AROS_LCA(CRYPTO_RWLOCK *, (___lock), A0), \
     struct Library *, AMISSL_BASE_NAME, 4515, Amissl)

#define CRYPTO_THREAD_unlock(___lock) \
      AROS_LC1(int, CRYPTO_THREAD_unlock, \
 AROS_LCA(CRYPTO_RWLOCK *, (___lock), A0), \
     struct Library *, AMISSL_BASE_NAME, 4516, Amissl)

#define CRYPTO_THREAD_lock_free(___lock) \
      AROS_LC1(void, CRYPTO_THREAD_lock_free, \
 AROS_LCA(CRYPTO_RWLOCK *, (___lock), A0), \
     struct Library *, AMISSL_BASE_NAME, 4517, Amissl)

#define CRYPTO_atomic_add(___val, ___amount, ___ret, ___lock) \
      AROS_LC4(int, CRYPTO_atomic_add, \
 AROS_LCA(int *, (___val), A0), \
 AROS_LCA(int, (___amount), D0), \
 AROS_LCA(int *, (___ret), A1), \
 AROS_LCA(CRYPTO_RWLOCK *, (___lock), A2), \
     struct Library *, AMISSL_BASE_NAME, 4518, Amissl)

#define OPENSSL_die(___assertion, ___file, ___line) \
      AROS_LC3(void, OPENSSL_die, \
 AROS_LCA(const char *, (___assertion), A0), \
 AROS_LCA(const char *, (___file), A1), \
 AROS_LCA(int, (___line), D0), \
     struct Library *, AMISSL_BASE_NAME, 4519, Amissl)

#define CT_POLICY_EVAL_CTX_new() \
      AROS_LC0(CT_POLICY_EVAL_CTX *, CT_POLICY_EVAL_CTX_new, \
     struct Library *, AMISSL_BASE_NAME, 4520, Amissl)

#define CT_POLICY_EVAL_CTX_free(___ctx) \
      AROS_LC1(void, CT_POLICY_EVAL_CTX_free, \
 AROS_LCA(CT_POLICY_EVAL_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 4521, Amissl)

#define CT_POLICY_EVAL_CTX_get0_cert(___ctx) \
      AROS_LC1(X509 *, CT_POLICY_EVAL_CTX_get0_cert, \
 AROS_LCA(const CT_POLICY_EVAL_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 4522, Amissl)

#define CT_POLICY_EVAL_CTX_get0_issuer(___ctx) \
      AROS_LC1(X509 *, CT_POLICY_EVAL_CTX_get0_issuer, \
 AROS_LCA(const CT_POLICY_EVAL_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 4523, Amissl)

#define CT_POLICY_EVAL_CTX_get0_log_store(___ctx) \
      AROS_LC1(const CTLOG_STORE *, CT_POLICY_EVAL_CTX_get0_log_store, \
 AROS_LCA(const CT_POLICY_EVAL_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 4524, Amissl)

#define SCT_new() \
      AROS_LC0(SCT *, SCT_new, \
     struct Library *, AMISSL_BASE_NAME, 4525, Amissl)

#define SCT_new_from_base64(___version, ___logid_base64, ___entry_type, ___timestamp, ___extensions_base64, ___signature_base64) \
      AROS_LC6(SCT *, SCT_new_from_base64, \
 AROS_LCA(unsigned char, (___version), D0), \
 AROS_LCA(const char *, (___logid_base64), A0), \
 AROS_LCA(ct_log_entry_type_t, (___entry_type), D1), \
 AROS_LCA(uint64_t, (___timestamp), D2), \
 AROS_LCA(const char *, (___extensions_base64), A1), \
 AROS_LCA(const char *, (___signature_base64), A2), \
     struct Library *, AMISSL_BASE_NAME, 4526, Amissl)

#define SCT_free(___sct) \
      AROS_LC1(void, SCT_free, \
 AROS_LCA(SCT *, (___sct), A0), \
     struct Library *, AMISSL_BASE_NAME, 4527, Amissl)

#define SCT_LIST_free(___a) \
      AROS_LC1(void, SCT_LIST_free, \
 AROS_LCA(STACK_OF(SCT) *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 4528, Amissl)

#define SCT_get_version(___sct) \
      AROS_LC1(sct_version_t, SCT_get_version, \
 AROS_LCA(const SCT *, (___sct), A0), \
     struct Library *, AMISSL_BASE_NAME, 4529, Amissl)

#define SCT_set_version(___sct, ___version) \
      AROS_LC2(int, SCT_set_version, \
 AROS_LCA(SCT *, (___sct), A0), \
 AROS_LCA(sct_version_t, (___version), D0), \
     struct Library *, AMISSL_BASE_NAME, 4530, Amissl)

#define SCT_get_log_entry_type(___sct) \
      AROS_LC1(ct_log_entry_type_t, SCT_get_log_entry_type, \
 AROS_LCA(const SCT *, (___sct), A0), \
     struct Library *, AMISSL_BASE_NAME, 4531, Amissl)

#define SCT_set_log_entry_type(___sct, ___entry_type) \
      AROS_LC2(int, SCT_set_log_entry_type, \
 AROS_LCA(SCT *, (___sct), A0), \
 AROS_LCA(ct_log_entry_type_t, (___entry_type), D0), \
     struct Library *, AMISSL_BASE_NAME, 4532, Amissl)

#define SCT_get0_log_id(___sct, ___log_id) \
      AROS_LC2(size_t, SCT_get0_log_id, \
 AROS_LCA(const SCT *, (___sct), A0), \
 AROS_LCA(unsigned char **, (___log_id), A1), \
     struct Library *, AMISSL_BASE_NAME, 4533, Amissl)

#define SCT_set0_log_id(___sct, ___log_id, ___log_id_len) \
      AROS_LC3(int, SCT_set0_log_id, \
 AROS_LCA(SCT *, (___sct), A0), \
 AROS_LCA(unsigned char *, (___log_id), A1), \
 AROS_LCA(size_t, (___log_id_len), D0), \
     struct Library *, AMISSL_BASE_NAME, 4534, Amissl)

#define SCT_set1_log_id(___sct, ___log_id, ___log_id_len) \
      AROS_LC3(int, SCT_set1_log_id, \
 AROS_LCA(SCT *, (___sct), A0), \
 AROS_LCA(const unsigned char *, (___log_id), A1), \
 AROS_LCA(size_t, (___log_id_len), D0), \
     struct Library *, AMISSL_BASE_NAME, 4535, Amissl)

#define SCT_get_timestamp(___sct) \
      AROS_LC1(uint64_t, SCT_get_timestamp, \
 AROS_LCA(const SCT *, (___sct), A0), \
     struct Library *, AMISSL_BASE_NAME, 4536, Amissl)

#define SCT_set_timestamp(___sct, ___timestamp) \
      AROS_LC2(void, SCT_set_timestamp, \
 AROS_LCA(SCT *, (___sct), A0), \
 AROS_LCA(uint64_t, (___timestamp), D0), \
     struct Library *, AMISSL_BASE_NAME, 4537, Amissl)

#define SCT_get_signature_nid(___sct) \
      AROS_LC1(int, SCT_get_signature_nid, \
 AROS_LCA(const SCT *, (___sct), A0), \
     struct Library *, AMISSL_BASE_NAME, 4538, Amissl)

#define SCT_set_signature_nid(___sct, ___nid) \
      AROS_LC2(int, SCT_set_signature_nid, \
 AROS_LCA(SCT *, (___sct), A0), \
 AROS_LCA(int, (___nid), D0), \
     struct Library *, AMISSL_BASE_NAME, 4539, Amissl)

#define SCT_get0_extensions(___sct, ___ext) \
      AROS_LC2(size_t, SCT_get0_extensions, \
 AROS_LCA(const SCT *, (___sct), A0), \
 AROS_LCA(unsigned char **, (___ext), A1), \
     struct Library *, AMISSL_BASE_NAME, 4540, Amissl)

#define SCT_set0_extensions(___sct, ___ext, ___ext_len) \
      AROS_LC3(void, SCT_set0_extensions, \
 AROS_LCA(SCT *, (___sct), A0), \
 AROS_LCA(unsigned char *, (___ext), A1), \
 AROS_LCA(size_t, (___ext_len), D0), \
     struct Library *, AMISSL_BASE_NAME, 4541, Amissl)

#define SCT_set1_extensions(___sct, ___ext, ___ext_len) \
      AROS_LC3(int, SCT_set1_extensions, \
 AROS_LCA(SCT *, (___sct), A0), \
 AROS_LCA(const unsigned char *, (___ext), A1), \
 AROS_LCA(size_t, (___ext_len), D0), \
     struct Library *, AMISSL_BASE_NAME, 4542, Amissl)

#define SCT_get0_signature(___sct, ___sig) \
      AROS_LC2(size_t, SCT_get0_signature, \
 AROS_LCA(const SCT *, (___sct), A0), \
 AROS_LCA(unsigned char **, (___sig), A1), \
     struct Library *, AMISSL_BASE_NAME, 4543, Amissl)

#define SCT_set0_signature(___sct, ___sig, ___sig_len) \
      AROS_LC3(void, SCT_set0_signature, \
 AROS_LCA(SCT *, (___sct), A0), \
 AROS_LCA(unsigned char *, (___sig), A1), \
 AROS_LCA(size_t, (___sig_len), D0), \
     struct Library *, AMISSL_BASE_NAME, 4544, Amissl)

#define SCT_set1_signature(___sct, ___sig, ___sig_len) \
      AROS_LC3(int, SCT_set1_signature, \
 AROS_LCA(SCT *, (___sct), A0), \
 AROS_LCA(const unsigned char *, (___sig), A1), \
 AROS_LCA(size_t, (___sig_len), D0), \
     struct Library *, AMISSL_BASE_NAME, 4545, Amissl)

#define SCT_get_source(___sct) \
      AROS_LC1(sct_source_t, SCT_get_source, \
 AROS_LCA(const SCT *, (___sct), A0), \
     struct Library *, AMISSL_BASE_NAME, 4546, Amissl)

#define SCT_set_source(___sct, ___source) \
      AROS_LC2(int, SCT_set_source, \
 AROS_LCA(SCT *, (___sct), A0), \
 AROS_LCA(sct_source_t, (___source), D0), \
     struct Library *, AMISSL_BASE_NAME, 4547, Amissl)

#define SCT_print(___sct, ___out, ___indent, ___logs) \
      AROS_LC4(void, SCT_print, \
 AROS_LCA(const SCT *, (___sct), A0), \
 AROS_LCA(BIO *, (___out), A1), \
 AROS_LCA(int, (___indent), D0), \
 AROS_LCA(const CTLOG_STORE *, (___logs), A2), \
     struct Library *, AMISSL_BASE_NAME, 4548, Amissl)

#define SCT_LIST_print(___sct_list, ___out, ___indent, ___separator, ___logs) \
      AROS_LC5(void, SCT_LIST_print, \
 AROS_LCA(const STACK_OF(SCT) *, (___sct_list), A0), \
 AROS_LCA(BIO *, (___out), A1), \
 AROS_LCA(int, (___indent), D0), \
 AROS_LCA(const char *, (___separator), A2), \
 AROS_LCA(const CTLOG_STORE *, (___logs), A3), \
     struct Library *, AMISSL_BASE_NAME, 4549, Amissl)

#define SCT_get_validation_status(___sct) \
      AROS_LC1(sct_validation_status_t, SCT_get_validation_status, \
 AROS_LCA(const SCT *, (___sct), A0), \
     struct Library *, AMISSL_BASE_NAME, 4550, Amissl)

#define SCT_validate(___sct, ___ctx) \
      AROS_LC2(int, SCT_validate, \
 AROS_LCA(SCT *, (___sct), A0), \
 AROS_LCA(const CT_POLICY_EVAL_CTX *, (___ctx), A1), \
     struct Library *, AMISSL_BASE_NAME, 4551, Amissl)

#define SCT_LIST_validate(___scts, ___ctx) \
      AROS_LC2(int, SCT_LIST_validate, \
 AROS_LCA(const STACK_OF(SCT) *, (___scts), A0), \
 AROS_LCA(CT_POLICY_EVAL_CTX *, (___ctx), A1), \
     struct Library *, AMISSL_BASE_NAME, 4552, Amissl)

#define i2o_SCT_LIST(___a, ___pp) \
      AROS_LC2(int, i2o_SCT_LIST, \
 AROS_LCA(const STACK_OF(SCT) *, (___a), A0), \
 AROS_LCA(unsigned char **, (___pp), A1), \
     struct Library *, AMISSL_BASE_NAME, 4553, Amissl)

#define o2i_SCT_LIST(___a, ___pp, ___len) \
      AROS_LC3(STACK_OF(SCT) *, o2i_SCT_LIST, \
 AROS_LCA(STACK_OF(SCT) **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___pp), A1), \
 AROS_LCA(size_t, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 4554, Amissl)

#define i2d_SCT_LIST(___a, ___pp) \
      AROS_LC2(int, i2d_SCT_LIST, \
 AROS_LCA(const STACK_OF(SCT) *, (___a), A0), \
 AROS_LCA(unsigned char **, (___pp), A1), \
     struct Library *, AMISSL_BASE_NAME, 4555, Amissl)

#define d2i_SCT_LIST(___a, ___pp, ___len) \
      AROS_LC3(STACK_OF(SCT) *, d2i_SCT_LIST, \
 AROS_LCA(STACK_OF(SCT) **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___pp), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 4556, Amissl)

#define i2o_SCT(___sct, ___out) \
      AROS_LC2(int, i2o_SCT, \
 AROS_LCA(const SCT *, (___sct), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 4557, Amissl)

#define o2i_SCT(___psct, ___in, ___len) \
      AROS_LC3(SCT *, o2i_SCT, \
 AROS_LCA(SCT **, (___psct), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(size_t, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 4558, Amissl)

#define CTLOG_new(___public_key, ___name) \
      AROS_LC2(CTLOG *, CTLOG_new, \
 AROS_LCA(EVP_PKEY *, (___public_key), A0), \
 AROS_LCA(const char *, (___name), A1), \
     struct Library *, AMISSL_BASE_NAME, 4559, Amissl)

#define CTLOG_new_from_base64(___ct_log, ___pkey_base64, ___name) \
      AROS_LC3(int, CTLOG_new_from_base64, \
 AROS_LCA(CTLOG **, (___ct_log), A0), \
 AROS_LCA(const char *, (___pkey_base64), A1), \
 AROS_LCA(const char *, (___name), A2), \
     struct Library *, AMISSL_BASE_NAME, 4560, Amissl)

#define CTLOG_free(___log) \
      AROS_LC1(void, CTLOG_free, \
 AROS_LCA(CTLOG *, (___log), A0), \
     struct Library *, AMISSL_BASE_NAME, 4561, Amissl)

#define CTLOG_get0_name(___log) \
      AROS_LC1(const char *, CTLOG_get0_name, \
 AROS_LCA(const CTLOG *, (___log), A0), \
     struct Library *, AMISSL_BASE_NAME, 4562, Amissl)

#define CTLOG_get0_log_id(___log, ___log_id, ___log_id_len) \
      AROS_LC3(void, CTLOG_get0_log_id, \
 AROS_LCA(const CTLOG *, (___log), A0), \
 AROS_LCA(const uint8_t **, (___log_id), A1), \
 AROS_LCA(size_t *, (___log_id_len), A2), \
     struct Library *, AMISSL_BASE_NAME, 4563, Amissl)

#define CTLOG_get0_public_key(___log) \
      AROS_LC1(EVP_PKEY *, CTLOG_get0_public_key, \
 AROS_LCA(const CTLOG *, (___log), A0), \
     struct Library *, AMISSL_BASE_NAME, 4564, Amissl)

#define CTLOG_STORE_new() \
      AROS_LC0(CTLOG_STORE *, CTLOG_STORE_new, \
     struct Library *, AMISSL_BASE_NAME, 4565, Amissl)

#define CTLOG_STORE_free(___store) \
      AROS_LC1(void, CTLOG_STORE_free, \
 AROS_LCA(CTLOG_STORE *, (___store), A0), \
     struct Library *, AMISSL_BASE_NAME, 4566, Amissl)

#define CTLOG_STORE_get0_log_by_id(___store, ___log_id, ___log_id_len) \
      AROS_LC3(const CTLOG *, CTLOG_STORE_get0_log_by_id, \
 AROS_LCA(const CTLOG_STORE *, (___store), A0), \
 AROS_LCA(const uint8_t *, (___log_id), A1), \
 AROS_LCA(size_t, (___log_id_len), D0), \
     struct Library *, AMISSL_BASE_NAME, 4567, Amissl)

#define CTLOG_STORE_load_file(___store, ___file) \
      AROS_LC2(int, CTLOG_STORE_load_file, \
 AROS_LCA(CTLOG_STORE *, (___store), A0), \
 AROS_LCA(const char *, (___file), A1), \
     struct Library *, AMISSL_BASE_NAME, 4568, Amissl)

#define CTLOG_STORE_load_default_file(___store) \
      AROS_LC1(int, CTLOG_STORE_load_default_file, \
 AROS_LCA(CTLOG_STORE *, (___store), A0), \
     struct Library *, AMISSL_BASE_NAME, 4569, Amissl)

#define ERR_load_CT_strings() \
      AROS_LC0(int, ERR_load_CT_strings, \
     struct Library *, AMISSL_BASE_NAME, 4570, Amissl)

#define DHparams_it() \
      AROS_LC0(const ASN1_ITEM *, DHparams_it, \
     struct Library *, AMISSL_BASE_NAME, 4571, Amissl)

#define DSA_SIG_get0(___sig, ___pr, ___ps) \
      AROS_LC3(void, DSA_SIG_get0, \
 AROS_LCA(const DSA_SIG *, (___sig), A0), \
 AROS_LCA(const BIGNUM **, (___pr), A1), \
 AROS_LCA(const BIGNUM **, (___ps), A2), \
     struct Library *, AMISSL_BASE_NAME, 4572, Amissl)

#define EC_GROUP_new_from_ecparameters(___params) \
      AROS_LC1(EC_GROUP *, EC_GROUP_new_from_ecparameters, \
 AROS_LCA(const ECPARAMETERS *, (___params), A0), \
     struct Library *, AMISSL_BASE_NAME, 4573, Amissl)

#define EC_GROUP_get_ecparameters(___group, ___params) \
      AROS_LC2(ECPARAMETERS *, EC_GROUP_get_ecparameters, \
 AROS_LCA(const EC_GROUP *, (___group), A0), \
 AROS_LCA(ECPARAMETERS *, (___params), A1), \
     struct Library *, AMISSL_BASE_NAME, 4574, Amissl)

#define EC_GROUP_new_from_ecpkparameters(___params) \
      AROS_LC1(EC_GROUP *, EC_GROUP_new_from_ecpkparameters, \
 AROS_LCA(const ECPKPARAMETERS *, (___params), A0), \
     struct Library *, AMISSL_BASE_NAME, 4575, Amissl)

#define EC_GROUP_get_ecpkparameters(___group, ___params) \
      AROS_LC2(ECPKPARAMETERS *, EC_GROUP_get_ecpkparameters, \
 AROS_LCA(const EC_GROUP *, (___group), A0), \
 AROS_LCA(ECPKPARAMETERS *, (___params), A1), \
     struct Library *, AMISSL_BASE_NAME, 4576, Amissl)

#define ECPKPARAMETERS_it() \
      AROS_LC0(const ASN1_ITEM *, ECPKPARAMETERS_it, \
     struct Library *, AMISSL_BASE_NAME, 4577, Amissl)

#define ECPARAMETERS_it() \
      AROS_LC0(const ASN1_ITEM *, ECPARAMETERS_it, \
     struct Library *, AMISSL_BASE_NAME, 4578, Amissl)

#define EC_KEY_can_sign(___eckey) \
      AROS_LC1(int, EC_KEY_can_sign, \
 AROS_LCA(const EC_KEY *, (___eckey), A0), \
     struct Library *, AMISSL_BASE_NAME, 4579, Amissl)

#define EVP_blake2b512() \
      AROS_LC0(const EVP_MD *, EVP_blake2b512, \
     struct Library *, AMISSL_BASE_NAME, 4580, Amissl)

#define EVP_blake2s256() \
      AROS_LC0(const EVP_MD *, EVP_blake2s256, \
     struct Library *, AMISSL_BASE_NAME, 4581, Amissl)

#define EVP_PKEY_CTX_str2ctrl(___ctx, ___cmd, ___str) \
      AROS_LC3(int, EVP_PKEY_CTX_str2ctrl, \
 AROS_LCA(EVP_PKEY_CTX *, (___ctx), A0), \
 AROS_LCA(int, (___cmd), D0), \
 AROS_LCA(const char *, (___str), A1), \
     struct Library *, AMISSL_BASE_NAME, 4582, Amissl)

#define EVP_PKEY_CTX_hex2ctrl(___ctx, ___cmd, ___hex) \
      AROS_LC3(int, EVP_PKEY_CTX_hex2ctrl, \
 AROS_LCA(EVP_PKEY_CTX *, (___ctx), A0), \
 AROS_LCA(int, (___cmd), D0), \
 AROS_LCA(const char *, (___hex), A1), \
     struct Library *, AMISSL_BASE_NAME, 4583, Amissl)

#define ERR_load_KDF_strings() \
      AROS_LC0(int, ERR_load_KDF_strings, \
     struct Library *, AMISSL_BASE_NAME, 4584, Amissl)

#define SRP_user_pwd_free(___user_pwd) \
      AROS_LC1(void, SRP_user_pwd_free, \
 AROS_LCA(SRP_user_pwd *, (___user_pwd), A0), \
     struct Library *, AMISSL_BASE_NAME, 4585, Amissl)

#define SRP_VBASE_get1_by_user(___vb, ___username) \
      AROS_LC2(SRP_user_pwd *, SRP_VBASE_get1_by_user, \
 AROS_LCA(SRP_VBASE *, (___vb), A0), \
 AROS_LCA(char *, (___username), A1), \
     struct Library *, AMISSL_BASE_NAME, 4586, Amissl)

#define SSL_CTX_has_client_custom_ext(___ctx, ___ext_type) \
      AROS_LC2(int, SSL_CTX_has_client_custom_ext, \
 AROS_LCA(const SSL_CTX *, (___ctx), A0), \
 AROS_LCA(unsigned int, (___ext_type), D0), \
     struct Library *, AMISSL_BASE_NAME, 4587, Amissl)

#define SSL_CIPHER_get_kx_nid(___c) \
      AROS_LC1(int, SSL_CIPHER_get_kx_nid, \
 AROS_LCA(const SSL_CIPHER *, (___c), A0), \
     struct Library *, AMISSL_BASE_NAME, 4588, Amissl)

#define SSL_CIPHER_get_auth_nid(___c) \
      AROS_LC1(int, SSL_CIPHER_get_auth_nid, \
 AROS_LCA(const SSL_CIPHER *, (___c), A0), \
     struct Library *, AMISSL_BASE_NAME, 4589, Amissl)

#define SSL_CIPHER_is_aead(___c) \
      AROS_LC1(int, SSL_CIPHER_is_aead, \
 AROS_LCA(const SSL_CIPHER *, (___c), A0), \
     struct Library *, AMISSL_BASE_NAME, 4590, Amissl)

#define SSL_has_pending(___s) \
      AROS_LC1(int, SSL_has_pending, \
 AROS_LCA(const SSL *, (___s), A0), \
     struct Library *, AMISSL_BASE_NAME, 4591, Amissl)

#define SSL_SESSION_up_ref(___ses) \
      AROS_LC1(int, SSL_SESSION_up_ref, \
 AROS_LCA(SSL_SESSION *, (___ses), A0), \
     struct Library *, AMISSL_BASE_NAME, 4592, Amissl)

#define SSL_CTX_get_default_passwd_cb(___ctx) \
      AROS_LC1(int (*)(char *, int, int, void *), SSL_CTX_get_default_passwd_cb, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 4593, Amissl)

#define SSL_CTX_get_default_passwd_cb_userdata(___ctx) \
      AROS_LC1(void *, SSL_CTX_get_default_passwd_cb_userdata, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 4594, Amissl)

#define SSL_get_default_passwd_cb(___ctx) \
      AROS_LC1(int (*)(char *, int, int, void *), SSL_get_default_passwd_cb, \
 AROS_LCA(SSL *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 4595, Amissl)

#define SSL_get_default_passwd_cb_userdata(___ctx) \
      AROS_LC1(void *, SSL_get_default_passwd_cb_userdata, \
 AROS_LCA(SSL *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 4596, Amissl)

#define SSL_get_all_async_fds(___s, ___fds, ___numfds) \
      AROS_LC3(int, SSL_get_all_async_fds, \
 AROS_LCA(SSL *, (___s), A0), \
 AROS_LCA(OSSL_ASYNC_FD *, (___fds), A1), \
 AROS_LCA(size_t *, (___numfds), A2), \
     struct Library *, AMISSL_BASE_NAME, 4597, Amissl)

#define SSL_get_changed_async_fds(___s, ___addfd, ___numaddfds, ___delfd, ___numdelfds) \
      AROS_LC5(int, SSL_get_changed_async_fds, \
 AROS_LCA(SSL *, (___s), A0), \
 AROS_LCA(OSSL_ASYNC_FD *, (___addfd), A1), \
 AROS_LCA(size_t *, (___numaddfds), A2), \
 AROS_LCA(OSSL_ASYNC_FD *, (___delfd), A3), \
 AROS_LCA(size_t *, (___numdelfds), D0), \
     struct Library *, AMISSL_BASE_NAME, 4598, Amissl)

#define SSL_CTX_set_default_read_buffer_len(___ctx, ___len) \
      AROS_LC2(void, SSL_CTX_set_default_read_buffer_len, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
 AROS_LCA(size_t, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 4599, Amissl)

#define SSL_set_default_read_buffer_len(___s, ___len) \
      AROS_LC2(void, SSL_set_default_read_buffer_len, \
 AROS_LCA(SSL *, (___s), A0), \
 AROS_LCA(size_t, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 4600, Amissl)

#define SSL_set_ct_validation_callback(___s, ___callback, ___arg) \
      AROS_LC3(int, SSL_set_ct_validation_callback, \
 AROS_LCA(SSL *, (___s), A0), \
 AROS_LCA(ssl_ct_validation_cb, (___callback), A1), \
 AROS_LCA(void *, (___arg), A2), \
     struct Library *, AMISSL_BASE_NAME, 4601, Amissl)

#define SSL_CTX_set_ct_validation_callback(___ctx, ___callback, ___arg) \
      AROS_LC3(int, SSL_CTX_set_ct_validation_callback, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
 AROS_LCA(ssl_ct_validation_cb, (___callback), A1), \
 AROS_LCA(void *, (___arg), A2), \
     struct Library *, AMISSL_BASE_NAME, 4602, Amissl)

#define SSL_ct_is_enabled(___s) \
      AROS_LC1(int, SSL_ct_is_enabled, \
 AROS_LCA(const SSL *, (___s), A0), \
     struct Library *, AMISSL_BASE_NAME, 4603, Amissl)

#define SSL_CTX_ct_is_enabled(___ctx) \
      AROS_LC1(int, SSL_CTX_ct_is_enabled, \
 AROS_LCA(const SSL_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 4604, Amissl)

#define SSL_get0_peer_scts(___s) \
      AROS_LC1(const STACK_OF(SCT) *, SSL_get0_peer_scts, \
 AROS_LCA(SSL *, (___s), A0), \
     struct Library *, AMISSL_BASE_NAME, 4605, Amissl)

#define SSL_CTX_set_default_ctlog_list_file(___ctx) \
      AROS_LC1(int, SSL_CTX_set_default_ctlog_list_file, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 4606, Amissl)

#define SSL_CTX_set_ctlog_list_file(___ctx, ___path) \
      AROS_LC2(int, SSL_CTX_set_ctlog_list_file, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
 AROS_LCA(const char *, (___path), A1), \
     struct Library *, AMISSL_BASE_NAME, 4607, Amissl)

#define SSL_CTX_set0_ctlog_store(___ctx, ___logs) \
      AROS_LC2(void, SSL_CTX_set0_ctlog_store, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
 AROS_LCA(CTLOG_STORE *, (___logs), A1), \
     struct Library *, AMISSL_BASE_NAME, 4608, Amissl)

#define SSL_CTX_get0_ctlog_store(___ctx) \
      AROS_LC1(const CTLOG_STORE *, SSL_CTX_get0_ctlog_store, \
 AROS_LCA(const SSL_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 4609, Amissl)

#define X509_SIG_get0(___sig, ___palg, ___pdigest) \
      AROS_LC3(void, X509_SIG_get0, \
 AROS_LCA(const X509_SIG *, (___sig), A0), \
 AROS_LCA(const X509_ALGOR **, (___palg), A1), \
 AROS_LCA(const ASN1_OCTET_STRING **, (___pdigest), A2), \
     struct Library *, AMISSL_BASE_NAME, 4610, Amissl)

#define PKCS8_pkey_get0_attrs(___p8) \
      AROS_LC1(const STACK_OF(X509_ATTRIBUTE) *, PKCS8_pkey_get0_attrs, \
 AROS_LCA(const PKCS8_PRIV_KEY_INFO *, (___p8), A0), \
     struct Library *, AMISSL_BASE_NAME, 4611, Amissl)

#define PKCS8_pkey_add1_attr_by_NID(___p8, ___nid, ___type, ___bytes, ___len) \
      AROS_LC5(int, PKCS8_pkey_add1_attr_by_NID, \
 AROS_LCA(PKCS8_PRIV_KEY_INFO *, (___p8), A0), \
 AROS_LCA(int, (___nid), D0), \
 AROS_LCA(int, (___type), D1), \
 AROS_LCA(const unsigned char *, (___bytes), A1), \
 AROS_LCA(int, (___len), D2), \
     struct Library *, AMISSL_BASE_NAME, 4612, Amissl)

#define X509_STORE_up_ref(___xs) \
      AROS_LC1(int, X509_STORE_up_ref, \
 AROS_LCA(X509_STORE *, (___xs), A0), \
     struct Library *, AMISSL_BASE_NAME, 4613, Amissl)

#define SSL_enable_ct(___s, ___validation_mode) \
      AROS_LC2(int, SSL_enable_ct, \
 AROS_LCA(SSL *, (___s), A0), \
 AROS_LCA(int, (___validation_mode), D0), \
     struct Library *, AMISSL_BASE_NAME, 4614, Amissl)

#define SSL_CTX_enable_ct(___ctx, ___validation_mode) \
      AROS_LC2(int, SSL_CTX_enable_ct, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
 AROS_LCA(int, (___validation_mode), D0), \
     struct Library *, AMISSL_BASE_NAME, 4615, Amissl)

#define SSL_CTX_get_ciphers(___ctx) \
      AROS_LC1(STACK_OF(SSL_CIPHER) *, SSL_CTX_get_ciphers, \
 AROS_LCA(const SSL_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 4616, Amissl)

#define SSL_SESSION_get0_hostname(___s) \
      AROS_LC1(const char *, SSL_SESSION_get0_hostname, \
 AROS_LCA(const SSL_SESSION *, (___s), A0), \
     struct Library *, AMISSL_BASE_NAME, 4617, Amissl)

#define SCT_validation_status_string(___sct) \
      AROS_LC1(const char *, SCT_validation_status_string, \
 AROS_LCA(const SCT *, (___sct), A0), \
     struct Library *, AMISSL_BASE_NAME, 4618, Amissl)

#define BIO_meth_new(___type, ___name) \
      AROS_LC2(BIO_METHOD *, BIO_meth_new, \
 AROS_LCA(int, (___type), D0), \
 AROS_LCA(const char *, (___name), A0), \
     struct Library *, AMISSL_BASE_NAME, 4619, Amissl)

#define BIO_meth_get_puts(___biom) \
      AROS_LC1(int (*)(BIO *, const char *), BIO_meth_get_puts, \
 AROS_LCA(const BIO_METHOD *, (___biom), A0), \
     struct Library *, AMISSL_BASE_NAME, 4620, Amissl)

#define BIO_meth_get_ctrl(___biom) \
      AROS_LC1(long (*)(BIO *, int, long, void *), BIO_meth_get_ctrl, \
 AROS_LCA(const BIO_METHOD *, (___biom), A0), \
     struct Library *, AMISSL_BASE_NAME, 4621, Amissl)

#define BIO_meth_get_gets(___biom) \
      AROS_LC1(int (*)(BIO *, char *, int), BIO_meth_get_gets, \
 AROS_LCA(const BIO_METHOD *, (___biom), A0), \
     struct Library *, AMISSL_BASE_NAME, 4622, Amissl)

#define BIO_get_data(___a) \
      AROS_LC1(void *, BIO_get_data, \
 AROS_LCA(BIO *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 4623, Amissl)

#define BIO_set_init(___a, ___init) \
      AROS_LC2(void, BIO_set_init, \
 AROS_LCA(BIO *, (___a), A0), \
 AROS_LCA(int, (___init), D0), \
     struct Library *, AMISSL_BASE_NAME, 4624, Amissl)

#define BIO_meth_set_puts(___biom, ___func) \
      AROS_LC2(int, BIO_meth_set_puts, \
 AROS_LCA(BIO_METHOD *, (___biom), A0), \
 AROS_LCA(int (*)(BIO *,const char *), (___func), A1), \
     struct Library *, AMISSL_BASE_NAME, 4625, Amissl)

#define BIO_get_shutdown(___a) \
      AROS_LC1(int, BIO_get_shutdown, \
 AROS_LCA(BIO *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 4626, Amissl)

#define BIO_get_init(___a) \
      AROS_LC1(int, BIO_get_init, \
 AROS_LCA(BIO *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 4627, Amissl)

#define BIO_meth_set_ctrl(___biom, ___ctrl) \
      AROS_LC2(int, BIO_meth_set_ctrl, \
 AROS_LCA(BIO_METHOD *, (___biom), A0), \
 AROS_LCA(long (*)(BIO *,int,long,void *), (___ctrl), A1), \
     struct Library *, AMISSL_BASE_NAME, 4628, Amissl)

#define BIO_meth_set_read(___biom, ___read) \
      AROS_LC2(int, BIO_meth_set_read, \
 AROS_LCA(BIO_METHOD *, (___biom), A0), \
 AROS_LCA(int (*)(BIO *,char *,int), (___read), A1), \
     struct Library *, AMISSL_BASE_NAME, 4629, Amissl)

#define BIO_set_shutdown(___a, ___shut) \
      AROS_LC2(void, BIO_set_shutdown, \
 AROS_LCA(BIO *, (___a), A0), \
 AROS_LCA(int, (___shut), D0), \
     struct Library *, AMISSL_BASE_NAME, 4630, Amissl)

#define BIO_meth_set_create(___biom, ___create) \
      AROS_LC2(int, BIO_meth_set_create, \
 AROS_LCA(BIO_METHOD *, (___biom), A0), \
 AROS_LCA(int (*)(BIO *), (___create), A1), \
     struct Library *, AMISSL_BASE_NAME, 4631, Amissl)

#define BIO_meth_get_write(___biom) \
      AROS_LC1(int (*)(BIO *, const char *, int), BIO_meth_get_write, \
 AROS_LCA(const BIO_METHOD *, (___biom), A0), \
     struct Library *, AMISSL_BASE_NAME, 4632, Amissl)

#define BIO_meth_set_callback_ctrl(___biom, ___callback_ctrl) \
      AROS_LC2(int, BIO_meth_set_callback_ctrl, \
 AROS_LCA(BIO_METHOD *, (___biom), A0), \
 AROS_LCA(long (*)(BIO *,int,BIO_info_cb *), (___callback_ctrl), A1), \
     struct Library *, AMISSL_BASE_NAME, 4633, Amissl)

#define BIO_meth_get_create(___biom) \
      AROS_LC1(int (*)(BIO *), BIO_meth_get_create, \
 AROS_LCA(const BIO_METHOD *, (___biom), A0), \
     struct Library *, AMISSL_BASE_NAME, 4634, Amissl)

#define BIO_set_next(___b, ___next) \
      AROS_LC2(void, BIO_set_next, \
 AROS_LCA(BIO *, (___b), A0), \
 AROS_LCA(BIO *, (___next), A1), \
     struct Library *, AMISSL_BASE_NAME, 4635, Amissl)

#define BIO_set_data(___a, ___ptr) \
      AROS_LC2(void, BIO_set_data, \
 AROS_LCA(BIO *, (___a), A0), \
 AROS_LCA(void *, (___ptr), A1), \
     struct Library *, AMISSL_BASE_NAME, 4636, Amissl)

#define BIO_meth_set_write(___biom, ___write) \
      AROS_LC2(int, BIO_meth_set_write, \
 AROS_LCA(BIO_METHOD *, (___biom), A0), \
 AROS_LCA(int (*)(BIO *,const char *,int), (___write), A1), \
     struct Library *, AMISSL_BASE_NAME, 4637, Amissl)

#define BIO_meth_set_destroy(___biom, ___destroy) \
      AROS_LC2(int, BIO_meth_set_destroy, \
 AROS_LCA(BIO_METHOD *, (___biom), A0), \
 AROS_LCA(int (*)(BIO *), (___destroy), A1), \
     struct Library *, AMISSL_BASE_NAME, 4638, Amissl)

#define BIO_meth_set_gets(___biom, ___ossl_gets) \
      AROS_LC2(int, BIO_meth_set_gets, \
 AROS_LCA(BIO_METHOD *, (___biom), A0), \
 AROS_LCA(int (*)(BIO *,char *,int), (___ossl_gets), A1), \
     struct Library *, AMISSL_BASE_NAME, 4639, Amissl)

#define BIO_meth_get_callback_ctrl(___biom) \
      AROS_LC1(long (*)(BIO *, int, BIO_info_cb *), BIO_meth_get_callback_ctrl, \
 AROS_LCA(const BIO_METHOD *, (___biom), A0), \
     struct Library *, AMISSL_BASE_NAME, 4640, Amissl)

#define BIO_meth_get_destroy(___biom) \
      AROS_LC1(int (*)(BIO *), BIO_meth_get_destroy, \
 AROS_LCA(const BIO_METHOD *, (___biom), A0), \
     struct Library *, AMISSL_BASE_NAME, 4641, Amissl)

#define BIO_meth_get_read(___biom) \
      AROS_LC1(int (*)(BIO *, char *, int), BIO_meth_get_read, \
 AROS_LCA(const BIO_METHOD *, (___biom), A0), \
     struct Library *, AMISSL_BASE_NAME, 4642, Amissl)

#define BIO_set_retry_reason(___bio, ___reason) \
      AROS_LC2(void, BIO_set_retry_reason, \
 AROS_LCA(BIO *, (___bio), A0), \
 AROS_LCA(int, (___reason), D0), \
     struct Library *, AMISSL_BASE_NAME, 4643, Amissl)

#define BIO_meth_free(___biom) \
      AROS_LC1(void, BIO_meth_free, \
 AROS_LCA(BIO_METHOD *, (___biom), A0), \
     struct Library *, AMISSL_BASE_NAME, 4644, Amissl)

#define DSA_meth_set_bn_mod_exp(___dsam, ___bn_mod_exp) \
      AROS_LC2(int, DSA_meth_set_bn_mod_exp, \
 AROS_LCA(DSA_METHOD *, (___dsam), A0), \
 AROS_LCA(int (*)(DSA *,BIGNUM *,const BIGNUM *,const BIGNUM *,const BIGNUM *,BN_CTX *,BN_MONT_CTX *), (___bn_mod_exp), A1), \
     struct Library *, AMISSL_BASE_NAME, 4645, Amissl)

#define DSA_meth_set_init(___dsam, ___init) \
      AROS_LC2(int, DSA_meth_set_init, \
 AROS_LCA(DSA_METHOD *, (___dsam), A0), \
 AROS_LCA(int (*)(DSA *), (___init), A1), \
     struct Library *, AMISSL_BASE_NAME, 4646, Amissl)

#define DSA_meth_free(___dsam) \
      AROS_LC1(void, DSA_meth_free, \
 AROS_LCA(DSA_METHOD *, (___dsam), A0), \
     struct Library *, AMISSL_BASE_NAME, 4647, Amissl)

#define DSA_meth_set_mod_exp(___dsam, ___mod_exp) \
      AROS_LC2(int, DSA_meth_set_mod_exp, \
 AROS_LCA(DSA_METHOD *, (___dsam), A0), \
 AROS_LCA(int (*)(DSA *,BIGNUM *,const BIGNUM *,const BIGNUM *,const BIGNUM *,const BIGNUM *,const BIGNUM *,BN_CTX *,BN_MONT_CTX *), (___mod_exp), A1), \
     struct Library *, AMISSL_BASE_NAME, 4648, Amissl)

#define DSA_meth_set_sign(___dsam, ___sign) \
      AROS_LC2(int, DSA_meth_set_sign, \
 AROS_LCA(DSA_METHOD *, (___dsam), A0), \
 AROS_LCA(DSA_SIG * (*)(const unsigned char *,int,DSA *), (___sign), A1), \
     struct Library *, AMISSL_BASE_NAME, 4649, Amissl)

#define DSA_meth_get_finish(___dsam) \
      AROS_LC1(int (*)(DSA *), DSA_meth_get_finish, \
 AROS_LCA(const DSA_METHOD *, (___dsam), A0), \
     struct Library *, AMISSL_BASE_NAME, 4650, Amissl)

#define DSA_set_flags(___d, ___flags) \
      AROS_LC2(void, DSA_set_flags, \
 AROS_LCA(DSA *, (___d), A0), \
 AROS_LCA(int, (___flags), D0), \
     struct Library *, AMISSL_BASE_NAME, 4651, Amissl)

#define DSA_get0_pqg(___d, ___p, ___q, ___g) \
      AROS_LC4(void, DSA_get0_pqg, \
 AROS_LCA(const DSA *, (___d), A0), \
 AROS_LCA(const BIGNUM **, (___p), A1), \
 AROS_LCA(const BIGNUM **, (___q), A2), \
 AROS_LCA(const BIGNUM **, (___g), A3), \
     struct Library *, AMISSL_BASE_NAME, 4652, Amissl)

#define DSA_meth_get0_app_data(___dsam) \
      AROS_LC1(void *, DSA_meth_get0_app_data, \
 AROS_LCA(const DSA_METHOD *, (___dsam), A0), \
     struct Library *, AMISSL_BASE_NAME, 4653, Amissl)

#define DSA_meth_get_keygen(___dsam) \
      AROS_LC1(int (*)(DSA *), DSA_meth_get_keygen, \
 AROS_LCA(const DSA_METHOD *, (___dsam), A0), \
     struct Library *, AMISSL_BASE_NAME, 4654, Amissl)

#define DSA_clear_flags(___d, ___flags) \
      AROS_LC2(void, DSA_clear_flags, \
 AROS_LCA(DSA *, (___d), A0), \
 AROS_LCA(int, (___flags), D0), \
     struct Library *, AMISSL_BASE_NAME, 4655, Amissl)

#define DSA_meth_get0_name(___dsam) \
      AROS_LC1(const char *, DSA_meth_get0_name, \
 AROS_LCA(const DSA_METHOD *, (___dsam), A0), \
     struct Library *, AMISSL_BASE_NAME, 4656, Amissl)

#define DSA_meth_get_paramgen(___dsam) \
      AROS_LC1(int (*)(DSA *, int, const unsigned char *, int, int *, unsigned long *, BN_GENCB *), DSA_meth_get_paramgen, \
 AROS_LCA(const DSA_METHOD *, (___dsam), A0), \
     struct Library *, AMISSL_BASE_NAME, 4657, Amissl)

#define DSA_meth_get_sign(___dsam) \
      AROS_LC1(DSA_SIG * (*)(const unsigned char *, int, DSA *), DSA_meth_get_sign, \
 AROS_LCA(const DSA_METHOD *, (___dsam), A0), \
     struct Library *, AMISSL_BASE_NAME, 4658, Amissl)

#define DSA_meth_set_paramgen(___dsam, ___paramgen) \
      AROS_LC2(int, DSA_meth_set_paramgen, \
 AROS_LCA(DSA_METHOD *, (___dsam), A0), \
 AROS_LCA(int (*)(DSA *,int,const unsigned char *,int,int *,unsigned long *,BN_GENCB *), (___paramgen), A1), \
     struct Library *, AMISSL_BASE_NAME, 4659, Amissl)

#define DSA_test_flags(___d, ___flags) \
      AROS_LC2(int, DSA_test_flags, \
 AROS_LCA(const DSA *, (___d), A0), \
 AROS_LCA(int, (___flags), D0), \
     struct Library *, AMISSL_BASE_NAME, 4660, Amissl)

#define DSA_meth_set0_app_data(___dsam, ___app_data) \
      AROS_LC2(int, DSA_meth_set0_app_data, \
 AROS_LCA(DSA_METHOD *, (___dsam), A0), \
 AROS_LCA(void *, (___app_data), A1), \
     struct Library *, AMISSL_BASE_NAME, 4661, Amissl)

#define DSA_meth_set1_name(___dsam, ___name) \
      AROS_LC2(int, DSA_meth_set1_name, \
 AROS_LCA(DSA_METHOD *, (___dsam), A0), \
 AROS_LCA(const char *, (___name), A1), \
     struct Library *, AMISSL_BASE_NAME, 4662, Amissl)

#define DSA_get0_key(___d, ___pub_key, ___priv_key) \
      AROS_LC3(void, DSA_get0_key, \
 AROS_LCA(const DSA *, (___d), A0), \
 AROS_LCA(const BIGNUM **, (___pub_key), A1), \
 AROS_LCA(const BIGNUM **, (___priv_key), A2), \
     struct Library *, AMISSL_BASE_NAME, 4663, Amissl)

#define DSA_meth_get_mod_exp(___dsam) \
      AROS_LC1(int (*)(DSA *, BIGNUM *, const BIGNUM *, const BIGNUM *, const BIGNUM *, const BIGNUM *, const BIGNUM *, BN_CTX *, BN_MONT_CTX *), DSA_meth_get_mod_exp, \
 AROS_LCA(const DSA_METHOD *, (___dsam), A0), \
     struct Library *, AMISSL_BASE_NAME, 4664, Amissl)

#define DSA_set0_pqg(___d, ___p, ___q, ___g) \
      AROS_LC4(int, DSA_set0_pqg, \
 AROS_LCA(DSA *, (___d), A0), \
 AROS_LCA(BIGNUM *, (___p), A1), \
 AROS_LCA(BIGNUM *, (___q), A2), \
 AROS_LCA(BIGNUM *, (___g), A3), \
     struct Library *, AMISSL_BASE_NAME, 4665, Amissl)

#define DSA_meth_get_flags(___dsam) \
      AROS_LC1(int, DSA_meth_get_flags, \
 AROS_LCA(const DSA_METHOD *, (___dsam), A0), \
     struct Library *, AMISSL_BASE_NAME, 4666, Amissl)

#define DSA_meth_get_verify(___dsam) \
      AROS_LC1(int (*)(const unsigned char *, int, DSA_SIG *, DSA *), DSA_meth_get_verify, \
 AROS_LCA(const DSA_METHOD *, (___dsam), A0), \
     struct Library *, AMISSL_BASE_NAME, 4667, Amissl)

#define DSA_meth_set_verify(___dsam, ___verify) \
      AROS_LC2(int, DSA_meth_set_verify, \
 AROS_LCA(DSA_METHOD *, (___dsam), A0), \
 AROS_LCA(int (*)(const unsigned char *,int,DSA_SIG *,DSA *), (___verify), A1), \
     struct Library *, AMISSL_BASE_NAME, 4668, Amissl)

#define DSA_meth_set_finish(___dsam, ___finish) \
      AROS_LC2(int, DSA_meth_set_finish, \
 AROS_LCA(DSA_METHOD *, (___dsam), A0), \
 AROS_LCA(int (*)(DSA *), (___finish), A1), \
     struct Library *, AMISSL_BASE_NAME, 4669, Amissl)

#define DSA_meth_set_keygen(___dsam, ___keygen) \
      AROS_LC2(int, DSA_meth_set_keygen, \
 AROS_LCA(DSA_METHOD *, (___dsam), A0), \
 AROS_LCA(int (*)(DSA *), (___keygen), A1), \
     struct Library *, AMISSL_BASE_NAME, 4670, Amissl)

#define DSA_meth_dup(___dsam) \
      AROS_LC1(DSA_METHOD *, DSA_meth_dup, \
 AROS_LCA(const DSA_METHOD *, (___dsam), A0), \
     struct Library *, AMISSL_BASE_NAME, 4671, Amissl)

#define DSA_set0_key(___d, ___pub_key, ___priv_key) \
      AROS_LC3(int, DSA_set0_key, \
 AROS_LCA(DSA *, (___d), A0), \
 AROS_LCA(BIGNUM *, (___pub_key), A1), \
 AROS_LCA(BIGNUM *, (___priv_key), A2), \
     struct Library *, AMISSL_BASE_NAME, 4672, Amissl)

#define DSA_meth_get_init(___dsam) \
      AROS_LC1(int (*)(DSA *), DSA_meth_get_init, \
 AROS_LCA(const DSA_METHOD *, (___dsam), A0), \
     struct Library *, AMISSL_BASE_NAME, 4673, Amissl)

#define DSA_meth_set_sign_setup(___dsam, ___sign_setup) \
      AROS_LC2(int, DSA_meth_set_sign_setup, \
 AROS_LCA(DSA_METHOD *, (___dsam), A0), \
 AROS_LCA(int (*)(DSA *,BN_CTX *,BIGNUM **,BIGNUM **), (___sign_setup), A1), \
     struct Library *, AMISSL_BASE_NAME, 4674, Amissl)

#define DSA_meth_get_bn_mod_exp(___dsam) \
      AROS_LC1(int (*)(DSA *, BIGNUM *, const BIGNUM *, const BIGNUM *, const BIGNUM *, BN_CTX *, BN_MONT_CTX *), DSA_meth_get_bn_mod_exp, \
 AROS_LCA(const DSA_METHOD *, (___dsam), A0), \
     struct Library *, AMISSL_BASE_NAME, 4675, Amissl)

#define DSA_get_method(___d) \
      AROS_LC1(const DSA_METHOD *, DSA_get_method, \
 AROS_LCA(DSA *, (___d), A0), \
     struct Library *, AMISSL_BASE_NAME, 4676, Amissl)

#define DSA_meth_new(___name, ___flags) \
      AROS_LC2(DSA_METHOD *, DSA_meth_new, \
 AROS_LCA(const char *, (___name), A0), \
 AROS_LCA(int, (___flags), D0), \
     struct Library *, AMISSL_BASE_NAME, 4677, Amissl)

#define DSA_meth_set_flags(___dsam, ___flags) \
      AROS_LC2(int, DSA_meth_set_flags, \
 AROS_LCA(DSA_METHOD *, (___dsam), A0), \
 AROS_LCA(int, (___flags), D0), \
     struct Library *, AMISSL_BASE_NAME, 4678, Amissl)

#define DSA_meth_get_sign_setup(___dsam) \
      AROS_LC1(int (*)(DSA *, BN_CTX *, BIGNUM **, BIGNUM **), DSA_meth_get_sign_setup, \
 AROS_LCA(const DSA_METHOD *, (___dsam), A0), \
     struct Library *, AMISSL_BASE_NAME, 4679, Amissl)

#define DSA_get0_engine(___d) \
      AROS_LC1(ENGINE *, DSA_get0_engine, \
 AROS_LCA(DSA *, (___d), A0), \
     struct Library *, AMISSL_BASE_NAME, 4680, Amissl)

#define X509_VERIFY_PARAM_set_auth_level(___param, ___auth_level) \
      AROS_LC2(void, X509_VERIFY_PARAM_set_auth_level, \
 AROS_LCA(X509_VERIFY_PARAM *, (___param), A0), \
 AROS_LCA(int, (___auth_level), D0), \
     struct Library *, AMISSL_BASE_NAME, 4681, Amissl)

#define X509_VERIFY_PARAM_get_auth_level(___param) \
      AROS_LC1(int, X509_VERIFY_PARAM_get_auth_level, \
 AROS_LCA(const X509_VERIFY_PARAM *, (___param), A0), \
     struct Library *, AMISSL_BASE_NAME, 4682, Amissl)

#define X509_REQ_get0_pubkey(___req) \
      AROS_LC1(EVP_PKEY *, X509_REQ_get0_pubkey, \
 AROS_LCA(const X509_REQ *, (___req), A0), \
     struct Library *, AMISSL_BASE_NAME, 4683, Amissl)

#define RSA_set0_key(___r, ___n, ___e, ___d) \
      AROS_LC4(int, RSA_set0_key, \
 AROS_LCA(RSA *, (___r), A0), \
 AROS_LCA(BIGNUM *, (___n), A1), \
 AROS_LCA(BIGNUM *, (___e), A2), \
 AROS_LCA(BIGNUM *, (___d), A3), \
     struct Library *, AMISSL_BASE_NAME, 4684, Amissl)

#define RSA_meth_get_flags(___meth) \
      AROS_LC1(int, RSA_meth_get_flags, \
 AROS_LCA(const RSA_METHOD *, (___meth), A0), \
     struct Library *, AMISSL_BASE_NAME, 4685, Amissl)

#define RSA_meth_set_finish(___rsa, ___finish) \
      AROS_LC2(int, RSA_meth_set_finish, \
 AROS_LCA(RSA_METHOD *, (___rsa), A0), \
 AROS_LCA(int (*)(RSA *), (___finish), A1), \
     struct Library *, AMISSL_BASE_NAME, 4686, Amissl)

#define RSA_meth_get_priv_dec(___meth) \
      AROS_LC1(int (*)(int, const unsigned char *, unsigned char *, RSA *, int), RSA_meth_get_priv_dec, \
 AROS_LCA(const RSA_METHOD *, (___meth), A0), \
     struct Library *, AMISSL_BASE_NAME, 4687, Amissl)

#define RSA_meth_get_sign(___meth) \
      AROS_LC1(int (*)(int, const unsigned char *, unsigned int, unsigned char *, unsigned int *, const RSA *), RSA_meth_get_sign, \
 AROS_LCA(const RSA_METHOD *, (___meth), A0), \
     struct Library *, AMISSL_BASE_NAME, 4688, Amissl)

#define RSA_meth_get_bn_mod_exp(___meth) \
      AROS_LC1(int (*)(BIGNUM *, const BIGNUM *, const BIGNUM *, const BIGNUM *, BN_CTX *, BN_MONT_CTX *), RSA_meth_get_bn_mod_exp, \
 AROS_LCA(const RSA_METHOD *, (___meth), A0), \
     struct Library *, AMISSL_BASE_NAME, 4689, Amissl)

#define RSA_test_flags(___r, ___flags) \
      AROS_LC2(int, RSA_test_flags, \
 AROS_LCA(const RSA *, (___r), A0), \
 AROS_LCA(int, (___flags), D0), \
     struct Library *, AMISSL_BASE_NAME, 4690, Amissl)

#define RSA_meth_new(___name, ___flags) \
      AROS_LC2(RSA_METHOD *, RSA_meth_new, \
 AROS_LCA(const char *, (___name), A0), \
 AROS_LCA(int, (___flags), D0), \
     struct Library *, AMISSL_BASE_NAME, 4691, Amissl)

#define RSA_meth_get0_app_data(___meth) \
      AROS_LC1(void *, RSA_meth_get0_app_data, \
 AROS_LCA(const RSA_METHOD *, (___meth), A0), \
     struct Library *, AMISSL_BASE_NAME, 4692, Amissl)

#define RSA_meth_dup(___meth) \
      AROS_LC1(RSA_METHOD *, RSA_meth_dup, \
 AROS_LCA(const RSA_METHOD *, (___meth), A0), \
     struct Library *, AMISSL_BASE_NAME, 4693, Amissl)

#define RSA_meth_set1_name(___meth, ___name) \
      AROS_LC2(int, RSA_meth_set1_name, \
 AROS_LCA(RSA_METHOD *, (___meth), A0), \
 AROS_LCA(const char *, (___name), A1), \
     struct Library *, AMISSL_BASE_NAME, 4694, Amissl)

#define RSA_meth_set0_app_data(___meth, ___app_data) \
      AROS_LC2(int, RSA_meth_set0_app_data, \
 AROS_LCA(RSA_METHOD *, (___meth), A0), \
 AROS_LCA(void *, (___app_data), A1), \
     struct Library *, AMISSL_BASE_NAME, 4695, Amissl)

#define RSA_set_flags(___r, ___flags) \
      AROS_LC2(void, RSA_set_flags, \
 AROS_LCA(RSA *, (___r), A0), \
 AROS_LCA(int, (___flags), D0), \
     struct Library *, AMISSL_BASE_NAME, 4696, Amissl)

#define RSA_meth_set_sign(___rsa, ___sign) \
      AROS_LC2(int, RSA_meth_set_sign, \
 AROS_LCA(RSA_METHOD *, (___rsa), A0), \
 AROS_LCA(int (*)(int,const unsigned char *,unsigned int,unsigned char *,unsigned int *,const RSA *), (___sign), D0), \
     struct Library *, AMISSL_BASE_NAME, 4697, Amissl)

#define RSA_clear_flags(___r, ___flags) \
      AROS_LC2(void, RSA_clear_flags, \
 AROS_LCA(RSA *, (___r), A0), \
 AROS_LCA(int, (___flags), D0), \
     struct Library *, AMISSL_BASE_NAME, 4698, Amissl)

#define RSA_meth_get_keygen(___meth) \
      AROS_LC1(int (*)(RSA *, int, BIGNUM *, BN_GENCB *), RSA_meth_get_keygen, \
 AROS_LCA(const RSA_METHOD *, (___meth), A0), \
     struct Library *, AMISSL_BASE_NAME, 4699, Amissl)

#define RSA_meth_set_keygen(___rsa, ___keygen) \
      AROS_LC2(int, RSA_meth_set_keygen, \
 AROS_LCA(RSA_METHOD *, (___rsa), A0), \
 AROS_LCA(int (*)(RSA *,int,BIGNUM *,BN_GENCB *), (___keygen), A1), \
     struct Library *, AMISSL_BASE_NAME, 4700, Amissl)

#define RSA_meth_set_pub_dec(___rsa, ___pub_dec) \
      AROS_LC2(int, RSA_meth_set_pub_dec, \
 AROS_LCA(RSA_METHOD *, (___rsa), A0), \
 AROS_LCA(int (*)(int,const unsigned char *,unsigned char *,RSA *,int), (___pub_dec), A1), \
     struct Library *, AMISSL_BASE_NAME, 4701, Amissl)

#define RSA_meth_get_finish(___meth) \
      AROS_LC1(int (*)(RSA *rsa), RSA_meth_get_finish, \
 AROS_LCA(const RSA_METHOD *, (___meth), A0), \
     struct Library *, AMISSL_BASE_NAME, 4702, Amissl)

#define RSA_get0_key(___r, ___n, ___e, ___d) \
      AROS_LC4(void, RSA_get0_key, \
 AROS_LCA(const RSA *, (___r), A0), \
 AROS_LCA(const BIGNUM **, (___n), A1), \
 AROS_LCA(const BIGNUM **, (___e), A2), \
 AROS_LCA(const BIGNUM **, (___d), A3), \
     struct Library *, AMISSL_BASE_NAME, 4703, Amissl)

#define RSA_get0_engine(___r) \
      AROS_LC1(ENGINE *, RSA_get0_engine, \
 AROS_LCA(const RSA *, (___r), A0), \
     struct Library *, AMISSL_BASE_NAME, 4704, Amissl)

#define RSA_meth_set_priv_enc(___rsa, ___priv_enc) \
      AROS_LC2(int, RSA_meth_set_priv_enc, \
 AROS_LCA(RSA_METHOD *, (___rsa), A0), \
 AROS_LCA(int (*)(int,const unsigned char *,unsigned char *,RSA *,int), (___priv_enc), A1), \
     struct Library *, AMISSL_BASE_NAME, 4705, Amissl)

#define RSA_meth_set_verify(___rsa, ___verify) \
      AROS_LC2(int, RSA_meth_set_verify, \
 AROS_LCA(RSA_METHOD *, (___rsa), A0), \
 AROS_LCA(int (*)(int,const unsigned char *,unsigned int,const unsigned char *,unsigned int,const RSA *), (___verify), A1), \
     struct Library *, AMISSL_BASE_NAME, 4706, Amissl)

#define RSA_get0_factors(___r, ___p, ___q) \
      AROS_LC3(void, RSA_get0_factors, \
 AROS_LCA(const RSA *, (___r), A0), \
 AROS_LCA(const BIGNUM **, (___p), A1), \
 AROS_LCA(const BIGNUM **, (___q), A2), \
     struct Library *, AMISSL_BASE_NAME, 4707, Amissl)

#define RSA_meth_get0_name(___meth) \
      AROS_LC1(const char *, RSA_meth_get0_name, \
 AROS_LCA(const RSA_METHOD *, (___meth), A0), \
     struct Library *, AMISSL_BASE_NAME, 4708, Amissl)

#define RSA_meth_get_mod_exp(___meth) \
      AROS_LC1(int (*)(BIGNUM *, const BIGNUM *, RSA *, BN_CTX *), RSA_meth_get_mod_exp, \
 AROS_LCA(const RSA_METHOD *, (___meth), A0), \
     struct Library *, AMISSL_BASE_NAME, 4709, Amissl)

#define RSA_meth_set_flags(___meth, ___flags) \
      AROS_LC2(int, RSA_meth_set_flags, \
 AROS_LCA(RSA_METHOD *, (___meth), A0), \
 AROS_LCA(int, (___flags), D0), \
     struct Library *, AMISSL_BASE_NAME, 4710, Amissl)

#define RSA_meth_get_pub_dec(___meth) \
      AROS_LC1(int (*)(int, const unsigned char *, unsigned char *, RSA *, int), RSA_meth_get_pub_dec, \
 AROS_LCA(const RSA_METHOD *, (___meth), A0), \
     struct Library *, AMISSL_BASE_NAME, 4711, Amissl)

#define RSA_meth_set_bn_mod_exp(___rsa, ___bn_mod_exp) \
      AROS_LC2(int, RSA_meth_set_bn_mod_exp, \
 AROS_LCA(RSA_METHOD *, (___rsa), A0), \
 AROS_LCA(int (*)(BIGNUM *,const BIGNUM *,const BIGNUM *,const BIGNUM *,BN_CTX *,BN_MONT_CTX *), (___bn_mod_exp), A1), \
     struct Library *, AMISSL_BASE_NAME, 4712, Amissl)

#define RSA_meth_get_init(___meth) \
      AROS_LC1(int (*)(RSA *), RSA_meth_get_init, \
 AROS_LCA(const RSA_METHOD *, (___meth), A0), \
     struct Library *, AMISSL_BASE_NAME, 4713, Amissl)

#define RSA_meth_free(___meth) \
      AROS_LC1(void, RSA_meth_free, \
 AROS_LCA(RSA_METHOD *, (___meth), A0), \
     struct Library *, AMISSL_BASE_NAME, 4714, Amissl)

#define RSA_meth_get_pub_enc(___meth) \
      AROS_LC1(int (*)(int, const unsigned char *, unsigned char *, RSA *, int), RSA_meth_get_pub_enc, \
 AROS_LCA(const RSA_METHOD *, (___meth), A0), \
     struct Library *, AMISSL_BASE_NAME, 4715, Amissl)

#define RSA_meth_set_mod_exp(___rsa, ___mod_exp) \
      AROS_LC2(int, RSA_meth_set_mod_exp, \
 AROS_LCA(RSA_METHOD *, (___rsa), A0), \
 AROS_LCA(int (*)(BIGNUM *,const BIGNUM *,RSA *,BN_CTX *), (___mod_exp), A1), \
     struct Library *, AMISSL_BASE_NAME, 4716, Amissl)

#define RSA_set0_factors(___r, ___p, ___q) \
      AROS_LC3(int, RSA_set0_factors, \
 AROS_LCA(RSA *, (___r), A0), \
 AROS_LCA(BIGNUM *, (___p), A1), \
 AROS_LCA(BIGNUM *, (___q), A2), \
     struct Library *, AMISSL_BASE_NAME, 4717, Amissl)

#define RSA_meth_set_pub_enc(___rsa, ___pub_enc) \
      AROS_LC2(int, RSA_meth_set_pub_enc, \
 AROS_LCA(RSA_METHOD *, (___rsa), A0), \
 AROS_LCA(int (*)(int,const unsigned char *,unsigned char *,RSA *,int), (___pub_enc), A1), \
     struct Library *, AMISSL_BASE_NAME, 4718, Amissl)

#define RSA_meth_set_priv_dec(___rsa, ___priv_dec) \
      AROS_LC2(int, RSA_meth_set_priv_dec, \
 AROS_LCA(RSA_METHOD *, (___rsa), A0), \
 AROS_LCA(int (*)(int,const unsigned char *,unsigned char *,RSA *,int), (___priv_dec), A1), \
     struct Library *, AMISSL_BASE_NAME, 4719, Amissl)

#define RSA_meth_get_verify(___meth) \
      AROS_LC1(int (*)(int, const unsigned char *, unsigned int, const unsigned char *, unsigned int, const RSA *), RSA_meth_get_verify, \
 AROS_LCA(const RSA_METHOD *, (___meth), A0), \
     struct Library *, AMISSL_BASE_NAME, 4720, Amissl)

#define RSA_meth_set_init(___rsa, ___init) \
      AROS_LC2(int, RSA_meth_set_init, \
 AROS_LCA(RSA_METHOD *, (___rsa), A0), \
 AROS_LCA(int (*)(RSA *), (___init), A1), \
     struct Library *, AMISSL_BASE_NAME, 4721, Amissl)

#define RSA_meth_get_priv_enc(___meth) \
      AROS_LC1(int (*)(int, const unsigned char *, unsigned char *, RSA *, int), RSA_meth_get_priv_enc, \
 AROS_LCA(const RSA_METHOD *, (___meth), A0), \
     struct Library *, AMISSL_BASE_NAME, 4722, Amissl)

#define RSA_set0_crt_params(___r, ___dmp1, ___dmq1, ___iqmp) \
      AROS_LC4(int, RSA_set0_crt_params, \
 AROS_LCA(RSA *, (___r), A0), \
 AROS_LCA(BIGNUM *, (___dmp1), A1), \
 AROS_LCA(BIGNUM *, (___dmq1), A2), \
 AROS_LCA(BIGNUM *, (___iqmp), A3), \
     struct Library *, AMISSL_BASE_NAME, 4723, Amissl)

#define RSA_get0_crt_params(___r, ___dmp1, ___dmq1, ___iqmp) \
      AROS_LC4(void, RSA_get0_crt_params, \
 AROS_LCA(const RSA *, (___r), A0), \
 AROS_LCA(const BIGNUM **, (___dmp1), A1), \
 AROS_LCA(const BIGNUM **, (___dmq1), A2), \
 AROS_LCA(const BIGNUM **, (___iqmp), A3), \
     struct Library *, AMISSL_BASE_NAME, 4724, Amissl)

#define DH_set0_pqg(___dh, ___p, ___q, ___g) \
      AROS_LC4(int, DH_set0_pqg, \
 AROS_LCA(DH *, (___dh), A0), \
 AROS_LCA(BIGNUM *, (___p), A1), \
 AROS_LCA(BIGNUM *, (___q), A2), \
 AROS_LCA(BIGNUM *, (___g), A3), \
     struct Library *, AMISSL_BASE_NAME, 4725, Amissl)

#define DH_clear_flags(___dh, ___flags) \
      AROS_LC2(void, DH_clear_flags, \
 AROS_LCA(DH *, (___dh), A0), \
 AROS_LCA(int, (___flags), D0), \
     struct Library *, AMISSL_BASE_NAME, 4726, Amissl)

#define DH_get0_key(___dh, ___pub_key, ___priv_key) \
      AROS_LC3(void, DH_get0_key, \
 AROS_LCA(const DH *, (___dh), A0), \
 AROS_LCA(const BIGNUM **, (___pub_key), A1), \
 AROS_LCA(const BIGNUM **, (___priv_key), A2), \
     struct Library *, AMISSL_BASE_NAME, 4727, Amissl)

#define DH_get0_engine(___d) \
      AROS_LC1(ENGINE *, DH_get0_engine, \
 AROS_LCA(DH *, (___d), A0), \
     struct Library *, AMISSL_BASE_NAME, 4728, Amissl)

#define DH_set0_key(___dh, ___pub_key, ___priv_key) \
      AROS_LC3(int, DH_set0_key, \
 AROS_LCA(DH *, (___dh), A0), \
 AROS_LCA(BIGNUM *, (___pub_key), A1), \
 AROS_LCA(BIGNUM *, (___priv_key), A2), \
     struct Library *, AMISSL_BASE_NAME, 4729, Amissl)

#define DH_set_length(___dh, ___length) \
      AROS_LC2(int, DH_set_length, \
 AROS_LCA(DH *, (___dh), A0), \
 AROS_LCA(long, (___length), D0), \
     struct Library *, AMISSL_BASE_NAME, 4730, Amissl)

#define DH_test_flags(___dh, ___flags) \
      AROS_LC2(int, DH_test_flags, \
 AROS_LCA(const DH *, (___dh), A0), \
 AROS_LCA(int, (___flags), D0), \
     struct Library *, AMISSL_BASE_NAME, 4731, Amissl)

#define DH_get_length(___dh) \
      AROS_LC1(long, DH_get_length, \
 AROS_LCA(const DH *, (___dh), A0), \
     struct Library *, AMISSL_BASE_NAME, 4732, Amissl)

#define DH_get0_pqg(___dh, ___p, ___q, ___g) \
      AROS_LC4(void, DH_get0_pqg, \
 AROS_LCA(const DH *, (___dh), A0), \
 AROS_LCA(const BIGNUM **, (___p), A1), \
 AROS_LCA(const BIGNUM **, (___q), A2), \
 AROS_LCA(const BIGNUM **, (___g), A3), \
     struct Library *, AMISSL_BASE_NAME, 4733, Amissl)

#define DH_meth_get_compute_key(___dhm) \
      AROS_LC1(int (*)(unsigned char *, const BIGNUM *, DH *), DH_meth_get_compute_key, \
 AROS_LCA(const DH_METHOD *, (___dhm), A0), \
     struct Library *, AMISSL_BASE_NAME, 4734, Amissl)

#define DH_meth_set1_name(___dhm, ___name) \
      AROS_LC2(int, DH_meth_set1_name, \
 AROS_LCA(DH_METHOD *, (___dhm), A0), \
 AROS_LCA(const char *, (___name), A1), \
     struct Library *, AMISSL_BASE_NAME, 4735, Amissl)

#define DH_meth_set_init(___dhm, ___init) \
      AROS_LC2(int, DH_meth_set_init, \
 AROS_LCA(DH_METHOD *, (___dhm), A0), \
 AROS_LCA(int (*)(DH *), (___init), A1), \
     struct Library *, AMISSL_BASE_NAME, 4736, Amissl)

#define DH_meth_get_finish(___dhm) \
      AROS_LC1(int (*)(DH *), DH_meth_get_finish, \
 AROS_LCA(const DH_METHOD *, (___dhm), A0), \
     struct Library *, AMISSL_BASE_NAME, 4737, Amissl)

#define DH_meth_get0_name(___dhm) \
      AROS_LC1(const char *, DH_meth_get0_name, \
 AROS_LCA(const DH_METHOD *, (___dhm), A0), \
     struct Library *, AMISSL_BASE_NAME, 4738, Amissl)

#define DH_meth_set_generate_params(___dhm, ___generate_params) \
      AROS_LC2(int, DH_meth_set_generate_params, \
 AROS_LCA(DH_METHOD *, (___dhm), A0), \
 AROS_LCA(int (*)(DH *,int,int,BN_GENCB *), (___generate_params), A1), \
     struct Library *, AMISSL_BASE_NAME, 4739, Amissl)

#define DH_meth_set_compute_key(___dhm, ___compute_key) \
      AROS_LC2(int, DH_meth_set_compute_key, \
 AROS_LCA(DH_METHOD *, (___dhm), A0), \
 AROS_LCA(int (*)(unsigned char *,const BIGNUM *,DH *), (___compute_key), A1), \
     struct Library *, AMISSL_BASE_NAME, 4740, Amissl)

#define DH_meth_set_flags(___dhm, ___flags) \
      AROS_LC2(int, DH_meth_set_flags, \
 AROS_LCA(DH_METHOD *, (___dhm), A0), \
 AROS_LCA(int, (___flags), D0), \
     struct Library *, AMISSL_BASE_NAME, 4741, Amissl)

#define DH_meth_get_generate_params(___dhm) \
      AROS_LC1(int (*)(DH *, int, int, BN_GENCB *), DH_meth_get_generate_params, \
 AROS_LCA(const DH_METHOD *, (___dhm), A0), \
     struct Library *, AMISSL_BASE_NAME, 4742, Amissl)

#define DH_meth_get_flags(___dhm) \
      AROS_LC1(int, DH_meth_get_flags, \
 AROS_LCA(const DH_METHOD *, (___dhm), A0), \
     struct Library *, AMISSL_BASE_NAME, 4743, Amissl)

#define DH_meth_set_finish(___dhm, ___finish) \
      AROS_LC2(int, DH_meth_set_finish, \
 AROS_LCA(DH_METHOD *, (___dhm), A0), \
 AROS_LCA(int (*)(DH *), (___finish), A1), \
     struct Library *, AMISSL_BASE_NAME, 4744, Amissl)

#define DH_meth_get0_app_data(___dhm) \
      AROS_LC1(void *, DH_meth_get0_app_data, \
 AROS_LCA(const DH_METHOD *, (___dhm), A0), \
     struct Library *, AMISSL_BASE_NAME, 4745, Amissl)

#define DH_meth_set0_app_data(___dhm, ___app_data) \
      AROS_LC2(int, DH_meth_set0_app_data, \
 AROS_LCA(DH_METHOD *, (___dhm), A0), \
 AROS_LCA(void *, (___app_data), A1), \
     struct Library *, AMISSL_BASE_NAME, 4746, Amissl)

#define DH_meth_get_init(___dhm) \
      AROS_LC1(int (*)(DH *), DH_meth_get_init, \
 AROS_LCA(const DH_METHOD *, (___dhm), A0), \
     struct Library *, AMISSL_BASE_NAME, 4747, Amissl)

#define DH_meth_get_bn_mod_exp(___dhm) \
      AROS_LC1(int (*)(const DH *, BIGNUM *, const BIGNUM *, const BIGNUM *, const BIGNUM *, BN_CTX *, BN_MONT_CTX *), DH_meth_get_bn_mod_exp, \
 AROS_LCA(const DH_METHOD *, (___dhm), A0), \
     struct Library *, AMISSL_BASE_NAME, 4748, Amissl)

#define DH_meth_new(___name, ___flags) \
      AROS_LC2(DH_METHOD *, DH_meth_new, \
 AROS_LCA(const char *, (___name), A0), \
 AROS_LCA(int, (___flags), D0), \
     struct Library *, AMISSL_BASE_NAME, 4749, Amissl)

#define DH_meth_dup(___dhm) \
      AROS_LC1(DH_METHOD *, DH_meth_dup, \
 AROS_LCA(const DH_METHOD *, (___dhm), A0), \
     struct Library *, AMISSL_BASE_NAME, 4750, Amissl)

#define DH_meth_set_bn_mod_exp(___dhm, ___bn_mod_exp) \
      AROS_LC2(int, DH_meth_set_bn_mod_exp, \
 AROS_LCA(DH_METHOD *, (___dhm), A0), \
 AROS_LCA(int (*)(const DH *,BIGNUM *,const BIGNUM *,const BIGNUM *,const BIGNUM *,BN_CTX *,BN_MONT_CTX *), (___bn_mod_exp), A1), \
     struct Library *, AMISSL_BASE_NAME, 4751, Amissl)

#define DH_meth_set_generate_key(___dhm, ___generate_key) \
      AROS_LC2(int, DH_meth_set_generate_key, \
 AROS_LCA(DH_METHOD *, (___dhm), A0), \
 AROS_LCA(int (*)(DH *), (___generate_key), A1), \
     struct Library *, AMISSL_BASE_NAME, 4752, Amissl)

#define DH_meth_free(___dhm) \
      AROS_LC1(void, DH_meth_free, \
 AROS_LCA(DH_METHOD *, (___dhm), A0), \
     struct Library *, AMISSL_BASE_NAME, 4753, Amissl)

#define DH_meth_get_generate_key(___dhm) \
      AROS_LC1(int (*)(DH *), DH_meth_get_generate_key, \
 AROS_LCA(const DH_METHOD *, (___dhm), A0), \
     struct Library *, AMISSL_BASE_NAME, 4754, Amissl)

#define DH_set_flags(___dh, ___flags) \
      AROS_LC2(void, DH_set_flags, \
 AROS_LCA(DH *, (___dh), A0), \
 AROS_LCA(int, (___flags), D0), \
     struct Library *, AMISSL_BASE_NAME, 4755, Amissl)

#define X509_STORE_CTX_get_obj_by_subject(___vs, ___type, ___name) \
      AROS_LC3(X509_OBJECT *, X509_STORE_CTX_get_obj_by_subject, \
 AROS_LCA(X509_STORE_CTX *, (___vs), A0), \
 AROS_LCA(X509_LOOKUP_TYPE, (___type), D0), \
 AROS_LCA(const X509_NAME *, (___name), A1), \
     struct Library *, AMISSL_BASE_NAME, 4756, Amissl)

#define X509_OBJECT_free(___a) \
      AROS_LC1(void, X509_OBJECT_free, \
 AROS_LCA(X509_OBJECT *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 4757, Amissl)

#define X509_OBJECT_get0_X509(___a) \
      AROS_LC1(X509 *, X509_OBJECT_get0_X509, \
 AROS_LCA(const X509_OBJECT *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 4758, Amissl)

#define X509_STORE_CTX_get0_untrusted(___ctx) \
      AROS_LC1(STACK_OF(X509) *, X509_STORE_CTX_get0_untrusted, \
 AROS_LCA(const X509_STORE_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 4759, Amissl)

#define X509_STORE_CTX_get0_cert(___ctx) \
      AROS_LC1(X509 *, X509_STORE_CTX_get0_cert, \
 AROS_LCA(const X509_STORE_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 4760, Amissl)

#define X509_STORE_CTX_set_verify(___ctx, ___verify) \
      AROS_LC2(void, X509_STORE_CTX_set_verify, \
 AROS_LCA(X509_STORE_CTX *, (___ctx), A0), \
 AROS_LCA(X509_STORE_CTX_verify_fn, (___verify), A1), \
     struct Library *, AMISSL_BASE_NAME, 4761, Amissl)

#define X509_STORE_CTX_get_verify(___ctx) \
      AROS_LC1(X509_STORE_CTX_verify_fn, X509_STORE_CTX_get_verify, \
 AROS_LCA(const X509_STORE_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 4762, Amissl)

#define X509_STORE_CTX_get_verify_cb(___ctx) \
      AROS_LC1(X509_STORE_CTX_verify_cb, X509_STORE_CTX_get_verify_cb, \
 AROS_LCA(const X509_STORE_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 4763, Amissl)

#define X509_STORE_CTX_set0_verified_chain(___ctx, ___sk) \
      AROS_LC2(void, X509_STORE_CTX_set0_verified_chain, \
 AROS_LCA(X509_STORE_CTX *, (___ctx), A0), \
 AROS_LCA(STACK_OF(X509) *, (___sk), A1), \
     struct Library *, AMISSL_BASE_NAME, 4764, Amissl)

#define X509_STORE_CTX_set0_untrusted(___ctx, ___sk) \
      AROS_LC2(void, X509_STORE_CTX_set0_untrusted, \
 AROS_LCA(X509_STORE_CTX *, (___ctx), A0), \
 AROS_LCA(STACK_OF(X509) *, (___sk), A1), \
     struct Library *, AMISSL_BASE_NAME, 4765, Amissl)

#define OPENSSL_hexchar2int(___c) \
      AROS_LC1(int, OPENSSL_hexchar2int, \
 AROS_LCA(unsigned char, (___c), D0), \
     struct Library *, AMISSL_BASE_NAME, 4766, Amissl)

#define DSA_SIG_set0(___sig, ___r, ___s) \
      AROS_LC3(int, DSA_SIG_set0, \
 AROS_LCA(DSA_SIG *, (___sig), A0), \
 AROS_LCA(BIGNUM *, (___r), A1), \
 AROS_LCA(BIGNUM *, (___s), A2), \
     struct Library *, AMISSL_BASE_NAME, 4772, Amissl)

#define DSA_bits(___d) \
      AROS_LC1(int, DSA_bits, \
 AROS_LCA(const DSA *, (___d), A0), \
     struct Library *, AMISSL_BASE_NAME, 4773, Amissl)

#define ECDSA_SIG_set0(___sig, ___r, ___s) \
      AROS_LC3(int, ECDSA_SIG_set0, \
 AROS_LCA(ECDSA_SIG *, (___sig), A0), \
 AROS_LCA(BIGNUM *, (___r), A1), \
 AROS_LCA(BIGNUM *, (___s), A2), \
     struct Library *, AMISSL_BASE_NAME, 4774, Amissl)

#define EVP_ENCODE_CTX_copy(___dctx, ___sctx) \
      AROS_LC2(int, EVP_ENCODE_CTX_copy, \
 AROS_LCA(EVP_ENCODE_CTX *, (___dctx), A0), \
 AROS_LCA(const EVP_ENCODE_CTX *, (___sctx), A1), \
     struct Library *, AMISSL_BASE_NAME, 4775, Amissl)

#define EVP_PKEY_get0_hmac(___pkey, ___len) \
      AROS_LC2(const unsigned char *, EVP_PKEY_get0_hmac, \
 AROS_LCA(const EVP_PKEY *, (___pkey), A0), \
 AROS_LCA(size_t *, (___len), A2), \
     struct Library *, AMISSL_BASE_NAME, 4776, Amissl)

#define HMAC_CTX_get_md(___ctx) \
      AROS_LC1(const EVP_MD *, HMAC_CTX_get_md, \
 AROS_LCA(const HMAC_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 4777, Amissl)

#define OCSP_resp_get0_certs(___bs) \
      AROS_LC1(const STACK_OF(X509) *, OCSP_resp_get0_certs, \
 AROS_LCA(const OCSP_BASICRESP *, (___bs), A0), \
     struct Library *, AMISSL_BASE_NAME, 4778, Amissl)

#define OCSP_resp_get0_id(___bs, ___pid, ___pname) \
      AROS_LC3(int, OCSP_resp_get0_id, \
 AROS_LCA(const OCSP_BASICRESP *, (___bs), A0), \
 AROS_LCA(const ASN1_OCTET_STRING **, (___pid), A1), \
 AROS_LCA(const X509_NAME **, (___pname), A2), \
     struct Library *, AMISSL_BASE_NAME, 4779, Amissl)

#define PEM_write_bio_PrivateKey_traditional(___bp, ___x, ___enc, ___kstr, ___klen, ___cb, ___u) \
      AROS_LC7(int, PEM_write_bio_PrivateKey_traditional, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(const EVP_PKEY *, (___x), A1), \
 AROS_LCA(const EVP_CIPHER *, (___enc), A2), \
 AROS_LCA(const unsigned char *, (___kstr), A3), \
 AROS_LCA(int, (___klen), D0), \
 AROS_LCA(pem_password_cb *, (___cb), D1), \
 AROS_LCA(void *, (___u), D2), \
     struct Library *, AMISSL_BASE_NAME, 4780, Amissl)

#define SSL_SESSION_get_protocol_version(___s) \
      AROS_LC1(int, SSL_SESSION_get_protocol_version, \
 AROS_LCA(const SSL_SESSION *, (___s), A0), \
     struct Library *, AMISSL_BASE_NAME, 4781, Amissl)

#define SSL_is_dtls(___s) \
      AROS_LC1(int, SSL_is_dtls, \
 AROS_LCA(const SSL *, (___s), A0), \
     struct Library *, AMISSL_BASE_NAME, 4782, Amissl)

#define SSL_CTX_dane_set_flags(___ctx, ___flags) \
      AROS_LC2(unsigned long, SSL_CTX_dane_set_flags, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
 AROS_LCA(unsigned long, (___flags), D0), \
     struct Library *, AMISSL_BASE_NAME, 4783, Amissl)

#define SSL_CTX_dane_clear_flags(___ctx, ___flags) \
      AROS_LC2(unsigned long, SSL_CTX_dane_clear_flags, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
 AROS_LCA(unsigned long, (___flags), D0), \
     struct Library *, AMISSL_BASE_NAME, 4784, Amissl)

#define SSL_dane_set_flags(___ssl, ___flags) \
      AROS_LC2(unsigned long, SSL_dane_set_flags, \
 AROS_LCA(SSL *, (___ssl), A0), \
 AROS_LCA(unsigned long, (___flags), D0), \
     struct Library *, AMISSL_BASE_NAME, 4785, Amissl)

#define SSL_dane_clear_flags(___ssl, ___flags) \
      AROS_LC2(unsigned long, SSL_dane_clear_flags, \
 AROS_LCA(SSL *, (___ssl), A0), \
 AROS_LCA(unsigned long, (___flags), D0), \
     struct Library *, AMISSL_BASE_NAME, 4786, Amissl)

#define SSL_client_version(___s) \
      AROS_LC1(int, SSL_client_version, \
 AROS_LCA(const SSL *, (___s), A0), \
     struct Library *, AMISSL_BASE_NAME, 4787, Amissl)

#define X509_get_pathlen(___x) \
      AROS_LC1(long, X509_get_pathlen, \
 AROS_LCA(X509 *, (___x), A0), \
     struct Library *, AMISSL_BASE_NAME, 4788, Amissl)

#define X509_OBJECT_get_type(___a) \
      AROS_LC1(X509_LOOKUP_TYPE, X509_OBJECT_get_type, \
 AROS_LCA(const X509_OBJECT *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 4789, Amissl)

#define X509_OBJECT_get0_X509_CRL(___a) \
      AROS_LC1(X509_CRL *, X509_OBJECT_get0_X509_CRL, \
 AROS_LCA(const X509_OBJECT *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 4790, Amissl)

#define X509_STORE_lock(___xs) \
      AROS_LC1(int, X509_STORE_lock, \
 AROS_LCA(X509_STORE *, (___xs), A0), \
     struct Library *, AMISSL_BASE_NAME, 4791, Amissl)

#define X509_STORE_unlock(___xs) \
      AROS_LC1(int, X509_STORE_unlock, \
 AROS_LCA(X509_STORE *, (___xs), A0), \
     struct Library *, AMISSL_BASE_NAME, 4792, Amissl)

#define X509_STORE_get0_objects(___xs) \
      AROS_LC1(STACK_OF(X509_OBJECT) *, X509_STORE_get0_objects, \
 AROS_LCA(const X509_STORE *, (___xs), A0), \
     struct Library *, AMISSL_BASE_NAME, 4793, Amissl)

#define X509_STORE_get0_param(___xs) \
      AROS_LC1(X509_VERIFY_PARAM *, X509_STORE_get0_param, \
 AROS_LCA(const X509_STORE *, (___xs), A0), \
     struct Library *, AMISSL_BASE_NAME, 4794, Amissl)

#define X509_STORE_set_verify(___xs, ___verify) \
      AROS_LC2(void, X509_STORE_set_verify, \
 AROS_LCA(X509_STORE *, (___xs), A0), \
 AROS_LCA(X509_STORE_CTX_verify_fn, (___verify), A1), \
     struct Library *, AMISSL_BASE_NAME, 4795, Amissl)

#define X509_STORE_get_verify(___xs) \
      AROS_LC1(X509_STORE_CTX_verify_fn, X509_STORE_get_verify, \
 AROS_LCA(const X509_STORE *, (___xs), A0), \
     struct Library *, AMISSL_BASE_NAME, 4796, Amissl)

#define X509_STORE_get_verify_cb(___xs) \
      AROS_LC1(X509_STORE_CTX_verify_cb, X509_STORE_get_verify_cb, \
 AROS_LCA(const X509_STORE *, (___xs), A0), \
     struct Library *, AMISSL_BASE_NAME, 4797, Amissl)

#define X509_STORE_set_get_issuer(___xs, ___get_issuer) \
      AROS_LC2(void, X509_STORE_set_get_issuer, \
 AROS_LCA(X509_STORE *, (___xs), A0), \
 AROS_LCA(X509_STORE_CTX_get_issuer_fn, (___get_issuer), A1), \
     struct Library *, AMISSL_BASE_NAME, 4798, Amissl)

#define X509_STORE_get_get_issuer(___xs) \
      AROS_LC1(X509_STORE_CTX_get_issuer_fn, X509_STORE_get_get_issuer, \
 AROS_LCA(const X509_STORE *, (___xs), A0), \
     struct Library *, AMISSL_BASE_NAME, 4799, Amissl)

#define X509_STORE_set_check_issued(___xs, ___check_issued) \
      AROS_LC2(void, X509_STORE_set_check_issued, \
 AROS_LCA(X509_STORE *, (___xs), A0), \
 AROS_LCA(X509_STORE_CTX_check_issued_fn, (___check_issued), A1), \
     struct Library *, AMISSL_BASE_NAME, 4800, Amissl)

#define X509_STORE_get_check_issued(___xs) \
      AROS_LC1(X509_STORE_CTX_check_issued_fn, X509_STORE_get_check_issued, \
 AROS_LCA(const X509_STORE *, (___xs), A0), \
     struct Library *, AMISSL_BASE_NAME, 4801, Amissl)

#define X509_STORE_set_check_revocation(___xs, ___check_revocation) \
      AROS_LC2(void, X509_STORE_set_check_revocation, \
 AROS_LCA(X509_STORE *, (___xs), A0), \
 AROS_LCA(X509_STORE_CTX_check_revocation_fn, (___check_revocation), A1), \
     struct Library *, AMISSL_BASE_NAME, 4802, Amissl)

#define X509_STORE_get_check_revocation(___xs) \
      AROS_LC1(X509_STORE_CTX_check_revocation_fn, X509_STORE_get_check_revocation, \
 AROS_LCA(const X509_STORE *, (___xs), A0), \
     struct Library *, AMISSL_BASE_NAME, 4803, Amissl)

#define X509_STORE_set_get_crl(___xs, ___get_crl) \
      AROS_LC2(void, X509_STORE_set_get_crl, \
 AROS_LCA(X509_STORE *, (___xs), A0), \
 AROS_LCA(X509_STORE_CTX_get_crl_fn, (___get_crl), A1), \
     struct Library *, AMISSL_BASE_NAME, 4804, Amissl)

#define X509_STORE_get_get_crl(___xs) \
      AROS_LC1(X509_STORE_CTX_get_crl_fn, X509_STORE_get_get_crl, \
 AROS_LCA(const X509_STORE *, (___xs), A0), \
     struct Library *, AMISSL_BASE_NAME, 4805, Amissl)

#define X509_STORE_set_check_crl(___xs, ___check_crl) \
      AROS_LC2(void, X509_STORE_set_check_crl, \
 AROS_LCA(X509_STORE *, (___xs), A0), \
 AROS_LCA(X509_STORE_CTX_check_crl_fn, (___check_crl), A1), \
     struct Library *, AMISSL_BASE_NAME, 4806, Amissl)

#define X509_STORE_get_check_crl(___xs) \
      AROS_LC1(X509_STORE_CTX_check_crl_fn, X509_STORE_get_check_crl, \
 AROS_LCA(const X509_STORE *, (___xs), A0), \
     struct Library *, AMISSL_BASE_NAME, 4807, Amissl)

#define X509_STORE_set_cert_crl(___xs, ___cert_crl) \
      AROS_LC2(void, X509_STORE_set_cert_crl, \
 AROS_LCA(X509_STORE *, (___xs), A0), \
 AROS_LCA(X509_STORE_CTX_cert_crl_fn, (___cert_crl), A1), \
     struct Library *, AMISSL_BASE_NAME, 4808, Amissl)

#define X509_STORE_get_cert_crl(___xs) \
      AROS_LC1(X509_STORE_CTX_cert_crl_fn, X509_STORE_get_cert_crl, \
 AROS_LCA(const X509_STORE *, (___xs), A0), \
     struct Library *, AMISSL_BASE_NAME, 4809, Amissl)

#define X509_STORE_set_check_policy(___xs, ___check_policy) \
      AROS_LC2(void, X509_STORE_set_check_policy, \
 AROS_LCA(X509_STORE *, (___xs), A0), \
 AROS_LCA(X509_STORE_CTX_check_policy_fn, (___check_policy), A1), \
     struct Library *, AMISSL_BASE_NAME, 4810, Amissl)

#define X509_STORE_get_check_policy(___xs) \
      AROS_LC1(X509_STORE_CTX_check_policy_fn, X509_STORE_get_check_policy, \
 AROS_LCA(const X509_STORE *, (___xs), A0), \
     struct Library *, AMISSL_BASE_NAME, 4811, Amissl)

#define X509_STORE_set_lookup_certs(___xs, ___lookup_certs) \
      AROS_LC2(void, X509_STORE_set_lookup_certs, \
 AROS_LCA(X509_STORE *, (___xs), A0), \
 AROS_LCA(X509_STORE_CTX_lookup_certs_fn, (___lookup_certs), A1), \
     struct Library *, AMISSL_BASE_NAME, 4812, Amissl)

#define X509_STORE_get_lookup_certs(___xs) \
      AROS_LC1(X509_STORE_CTX_lookup_certs_fn, X509_STORE_get_lookup_certs, \
 AROS_LCA(const X509_STORE *, (___xs), A0), \
     struct Library *, AMISSL_BASE_NAME, 4813, Amissl)

#define X509_STORE_set_lookup_crls(___xs, ___lookup_crls) \
      AROS_LC2(void, X509_STORE_set_lookup_crls, \
 AROS_LCA(X509_STORE *, (___xs), A0), \
 AROS_LCA(X509_STORE_CTX_lookup_crls_fn, (___lookup_crls), A1), \
     struct Library *, AMISSL_BASE_NAME, 4814, Amissl)

#define X509_STORE_get_lookup_crls(___xs) \
      AROS_LC1(X509_STORE_CTX_lookup_crls_fn, X509_STORE_get_lookup_crls, \
 AROS_LCA(const X509_STORE *, (___xs), A0), \
     struct Library *, AMISSL_BASE_NAME, 4815, Amissl)

#define X509_STORE_set_cleanup(___xs, ___cleanup) \
      AROS_LC2(void, X509_STORE_set_cleanup, \
 AROS_LCA(X509_STORE *, (___xs), A0), \
 AROS_LCA(X509_STORE_CTX_cleanup_fn, (___cleanup), A1), \
     struct Library *, AMISSL_BASE_NAME, 4816, Amissl)

#define X509_STORE_get_cleanup(___xs) \
      AROS_LC1(X509_STORE_CTX_cleanup_fn, X509_STORE_get_cleanup, \
 AROS_LCA(const X509_STORE *, (___xs), A0), \
     struct Library *, AMISSL_BASE_NAME, 4817, Amissl)

#define X509_STORE_set_ex_data(___xs, ___idx, ___data) \
      AROS_LC3(int, X509_STORE_set_ex_data, \
 AROS_LCA(X509_STORE *, (___xs), A0), \
 AROS_LCA(int, (___idx), D0), \
 AROS_LCA(void *, (___data), A1), \
     struct Library *, AMISSL_BASE_NAME, 4818, Amissl)

#define X509_STORE_get_ex_data(___xs, ___idx) \
      AROS_LC2(void *, X509_STORE_get_ex_data, \
 AROS_LCA(const X509_STORE *, (___xs), A0), \
 AROS_LCA(int, (___idx), D0), \
     struct Library *, AMISSL_BASE_NAME, 4819, Amissl)

#define X509_STORE_CTX_get_get_issuer(___ctx) \
      AROS_LC1(X509_STORE_CTX_get_issuer_fn, X509_STORE_CTX_get_get_issuer, \
 AROS_LCA(const X509_STORE_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 4820, Amissl)

#define X509_STORE_CTX_get_check_issued(___ctx) \
      AROS_LC1(X509_STORE_CTX_check_issued_fn, X509_STORE_CTX_get_check_issued, \
 AROS_LCA(const X509_STORE_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 4821, Amissl)

#define X509_STORE_CTX_get_check_revocation(___ctx) \
      AROS_LC1(X509_STORE_CTX_check_revocation_fn, X509_STORE_CTX_get_check_revocation, \
 AROS_LCA(const X509_STORE_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 4822, Amissl)

#define X509_STORE_CTX_get_get_crl(___ctx) \
      AROS_LC1(X509_STORE_CTX_get_crl_fn, X509_STORE_CTX_get_get_crl, \
 AROS_LCA(const X509_STORE_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 4823, Amissl)

#define X509_STORE_CTX_get_check_crl(___ctx) \
      AROS_LC1(X509_STORE_CTX_check_crl_fn, X509_STORE_CTX_get_check_crl, \
 AROS_LCA(const X509_STORE_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 4824, Amissl)

#define X509_STORE_CTX_get_cert_crl(___ctx) \
      AROS_LC1(X509_STORE_CTX_cert_crl_fn, X509_STORE_CTX_get_cert_crl, \
 AROS_LCA(const X509_STORE_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 4825, Amissl)

#define X509_STORE_CTX_get_check_policy(___ctx) \
      AROS_LC1(X509_STORE_CTX_check_policy_fn, X509_STORE_CTX_get_check_policy, \
 AROS_LCA(const X509_STORE_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 4826, Amissl)

#define X509_STORE_CTX_get_lookup_certs(___ctx) \
      AROS_LC1(X509_STORE_CTX_lookup_certs_fn, X509_STORE_CTX_get_lookup_certs, \
 AROS_LCA(const X509_STORE_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 4827, Amissl)

#define X509_STORE_CTX_get_lookup_crls(___ctx) \
      AROS_LC1(X509_STORE_CTX_lookup_crls_fn, X509_STORE_CTX_get_lookup_crls, \
 AROS_LCA(const X509_STORE_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 4828, Amissl)

#define X509_STORE_CTX_get_cleanup(___ctx) \
      AROS_LC1(X509_STORE_CTX_cleanup_fn, X509_STORE_CTX_get_cleanup, \
 AROS_LCA(const X509_STORE_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 4829, Amissl)

#define X509_STORE_CTX_set_error_depth(___ctx, ___depth) \
      AROS_LC2(void, X509_STORE_CTX_set_error_depth, \
 AROS_LCA(X509_STORE_CTX *, (___ctx), A0), \
 AROS_LCA(int, (___depth), D0), \
     struct Library *, AMISSL_BASE_NAME, 4830, Amissl)

#define X509_STORE_CTX_set_current_cert(___ctx, ___x) \
      AROS_LC2(void, X509_STORE_CTX_set_current_cert, \
 AROS_LCA(X509_STORE_CTX *, (___ctx), A0), \
 AROS_LCA(X509 *, (___x), A1), \
     struct Library *, AMISSL_BASE_NAME, 4831, Amissl)

#define NAME_CONSTRAINTS_check_CN(___x, ___nc) \
      AROS_LC2(int, NAME_CONSTRAINTS_check_CN, \
 AROS_LCA(X509 *, (___x), A0), \
 AROS_LCA(NAME_CONSTRAINTS *, (___nc), A1), \
     struct Library *, AMISSL_BASE_NAME, 4832, Amissl)

#define X509_set_proxy_flag(___x) \
      AROS_LC1(void, X509_set_proxy_flag, \
 AROS_LCA(X509 *, (___x), A0), \
     struct Library *, AMISSL_BASE_NAME, 4833, Amissl)

#define X509_set_proxy_pathlen(___x, ___l) \
      AROS_LC2(void, X509_set_proxy_pathlen, \
 AROS_LCA(X509 *, (___x), A0), \
 AROS_LCA(long, (___l), D0), \
     struct Library *, AMISSL_BASE_NAME, 4834, Amissl)

#define X509_get_proxy_pathlen(___x) \
      AROS_LC1(long, X509_get_proxy_pathlen, \
 AROS_LCA(X509 *, (___x), A0), \
     struct Library *, AMISSL_BASE_NAME, 4835, Amissl)

#define ASIdentifierChoice_new() \
      AROS_LC0(ASIdentifierChoice *, ASIdentifierChoice_new, \
     struct Library *, AMISSL_BASE_NAME, 4836, Amissl)

#define ASIdentifierChoice_free(___a) \
      AROS_LC1(void, ASIdentifierChoice_free, \
 AROS_LCA(ASIdentifierChoice *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 4837, Amissl)

#define d2i_ASIdentifierChoice(___a, ___in, ___len) \
      AROS_LC3(ASIdentifierChoice *, d2i_ASIdentifierChoice, \
 AROS_LCA(ASIdentifierChoice **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 4838, Amissl)

#define i2d_ASIdentifierChoice(___a, ___out) \
      AROS_LC2(int, i2d_ASIdentifierChoice, \
 AROS_LCA(const ASIdentifierChoice *, (___a), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 4839, Amissl)

#define ASIdentifierChoice_it() \
      AROS_LC0(const ASN1_ITEM *, ASIdentifierChoice_it, \
     struct Library *, AMISSL_BASE_NAME, 4840, Amissl)

#define ASIdentifiers_new() \
      AROS_LC0(ASIdentifiers *, ASIdentifiers_new, \
     struct Library *, AMISSL_BASE_NAME, 4841, Amissl)

#define ASIdentifiers_free(___a) \
      AROS_LC1(void, ASIdentifiers_free, \
 AROS_LCA(ASIdentifiers *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 4842, Amissl)

#define d2i_ASIdentifiers(___a, ___in, ___len) \
      AROS_LC3(ASIdentifiers *, d2i_ASIdentifiers, \
 AROS_LCA(ASIdentifiers **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 4843, Amissl)

#define i2d_ASIdentifiers(___a, ___out) \
      AROS_LC2(int, i2d_ASIdentifiers, \
 AROS_LCA(const ASIdentifiers *, (___a), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 4844, Amissl)

#define ASIdentifiers_it() \
      AROS_LC0(const ASN1_ITEM *, ASIdentifiers_it, \
     struct Library *, AMISSL_BASE_NAME, 4845, Amissl)

#define ASIdOrRange_new() \
      AROS_LC0(ASIdOrRange *, ASIdOrRange_new, \
     struct Library *, AMISSL_BASE_NAME, 4846, Amissl)

#define ASIdOrRange_free(___a) \
      AROS_LC1(void, ASIdOrRange_free, \
 AROS_LCA(ASIdOrRange *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 4847, Amissl)

#define d2i_ASIdOrRange(___a, ___in, ___len) \
      AROS_LC3(ASIdOrRange *, d2i_ASIdOrRange, \
 AROS_LCA(ASIdOrRange **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 4848, Amissl)

#define i2d_ASIdOrRange(___a, ___out) \
      AROS_LC2(int, i2d_ASIdOrRange, \
 AROS_LCA(const ASIdOrRange *, (___a), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 4849, Amissl)

#define ASIdOrRange_it() \
      AROS_LC0(const ASN1_ITEM *, ASIdOrRange_it, \
     struct Library *, AMISSL_BASE_NAME, 4850, Amissl)

#define ASRange_new() \
      AROS_LC0(ASRange *, ASRange_new, \
     struct Library *, AMISSL_BASE_NAME, 4851, Amissl)

#define ASRange_free(___a) \
      AROS_LC1(void, ASRange_free, \
 AROS_LCA(ASRange *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 4852, Amissl)

#define d2i_ASRange(___a, ___in, ___len) \
      AROS_LC3(ASRange *, d2i_ASRange, \
 AROS_LCA(ASRange **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 4853, Amissl)

#define i2d_ASRange(___a, ___out) \
      AROS_LC2(int, i2d_ASRange, \
 AROS_LCA(const ASRange *, (___a), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 4854, Amissl)

#define ASRange_it() \
      AROS_LC0(const ASN1_ITEM *, ASRange_it, \
     struct Library *, AMISSL_BASE_NAME, 4855, Amissl)

#define IPAddressChoice_new() \
      AROS_LC0(IPAddressChoice *, IPAddressChoice_new, \
     struct Library *, AMISSL_BASE_NAME, 4856, Amissl)

#define IPAddressChoice_free(___a) \
      AROS_LC1(void, IPAddressChoice_free, \
 AROS_LCA(IPAddressChoice *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 4857, Amissl)

#define d2i_IPAddressChoice(___a, ___in, ___len) \
      AROS_LC3(IPAddressChoice *, d2i_IPAddressChoice, \
 AROS_LCA(IPAddressChoice **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 4858, Amissl)

#define i2d_IPAddressChoice(___a, ___out) \
      AROS_LC2(int, i2d_IPAddressChoice, \
 AROS_LCA(const IPAddressChoice *, (___a), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 4859, Amissl)

#define IPAddressChoice_it() \
      AROS_LC0(const ASN1_ITEM *, IPAddressChoice_it, \
     struct Library *, AMISSL_BASE_NAME, 4860, Amissl)

#define IPAddressFamily_new() \
      AROS_LC0(IPAddressFamily *, IPAddressFamily_new, \
     struct Library *, AMISSL_BASE_NAME, 4861, Amissl)

#define IPAddressFamily_free(___a) \
      AROS_LC1(void, IPAddressFamily_free, \
 AROS_LCA(IPAddressFamily *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 4862, Amissl)

#define d2i_IPAddressFamily(___a, ___in, ___len) \
      AROS_LC3(IPAddressFamily *, d2i_IPAddressFamily, \
 AROS_LCA(IPAddressFamily **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 4863, Amissl)

#define i2d_IPAddressFamily(___a, ___out) \
      AROS_LC2(int, i2d_IPAddressFamily, \
 AROS_LCA(const IPAddressFamily *, (___a), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 4864, Amissl)

#define IPAddressFamily_it() \
      AROS_LC0(const ASN1_ITEM *, IPAddressFamily_it, \
     struct Library *, AMISSL_BASE_NAME, 4865, Amissl)

#define IPAddressOrRange_new() \
      AROS_LC0(IPAddressOrRange *, IPAddressOrRange_new, \
     struct Library *, AMISSL_BASE_NAME, 4866, Amissl)

#define IPAddressOrRange_free(___a) \
      AROS_LC1(void, IPAddressOrRange_free, \
 AROS_LCA(IPAddressOrRange *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 4867, Amissl)

#define d2i_IPAddressOrRange(___a, ___in, ___len) \
      AROS_LC3(IPAddressOrRange *, d2i_IPAddressOrRange, \
 AROS_LCA(IPAddressOrRange **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 4868, Amissl)

#define i2d_IPAddressOrRange(___a, ___out) \
      AROS_LC2(int, i2d_IPAddressOrRange, \
 AROS_LCA(const IPAddressOrRange *, (___a), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 4869, Amissl)

#define IPAddressOrRange_it() \
      AROS_LC0(const ASN1_ITEM *, IPAddressOrRange_it, \
     struct Library *, AMISSL_BASE_NAME, 4870, Amissl)

#define ASN1_STRING_get0_data(___x) \
      AROS_LC1(const unsigned char *, ASN1_STRING_get0_data, \
 AROS_LCA(const ASN1_STRING *, (___x), A0), \
     struct Library *, AMISSL_BASE_NAME, 4871, Amissl)

#define X509_get0_notBefore(___x) \
      AROS_LC1(const ASN1_TIME *, X509_get0_notBefore, \
 AROS_LCA(const X509 *, (___x), A0), \
     struct Library *, AMISSL_BASE_NAME, 4872, Amissl)

#define X509_get0_notAfter(___x) \
      AROS_LC1(const ASN1_TIME *, X509_get0_notAfter, \
 AROS_LCA(const X509 *, (___x), A0), \
     struct Library *, AMISSL_BASE_NAME, 4873, Amissl)

#define X509_CRL_get0_lastUpdate(___crl) \
      AROS_LC1(const ASN1_TIME *, X509_CRL_get0_lastUpdate, \
 AROS_LCA(const X509_CRL *, (___crl), A0), \
     struct Library *, AMISSL_BASE_NAME, 4874, Amissl)

#define X509_CRL_get0_nextUpdate(___crl) \
      AROS_LC1(const ASN1_TIME *, X509_CRL_get0_nextUpdate, \
 AROS_LCA(const X509_CRL *, (___crl), A0), \
     struct Library *, AMISSL_BASE_NAME, 4875, Amissl)

#define OPENSSL_uni2utf8(___uni, ___unilen) \
      AROS_LC2(char *, OPENSSL_uni2utf8, \
 AROS_LCA(const unsigned char *, (___uni), A0), \
 AROS_LCA(int, (___unilen), D0), \
     struct Library *, AMISSL_BASE_NAME, 4876, Amissl)

#define CT_POLICY_EVAL_CTX_set_shared_CTLOG_STORE(___ctx, ___log_store) \
      AROS_LC2(void, CT_POLICY_EVAL_CTX_set_shared_CTLOG_STORE, \
 AROS_LCA(CT_POLICY_EVAL_CTX *, (___ctx), A0), \
 AROS_LCA(CTLOG_STORE *, (___log_store), A1), \
     struct Library *, AMISSL_BASE_NAME, 4877, Amissl)

#define CT_POLICY_EVAL_CTX_set1_cert(___ctx, ___cert) \
      AROS_LC2(int, CT_POLICY_EVAL_CTX_set1_cert, \
 AROS_LCA(CT_POLICY_EVAL_CTX *, (___ctx), A0), \
 AROS_LCA(X509 *, (___cert), A1), \
     struct Library *, AMISSL_BASE_NAME, 4878, Amissl)

#define CT_POLICY_EVAL_CTX_set1_issuer(___ctx, ___issuer) \
      AROS_LC2(int, CT_POLICY_EVAL_CTX_set1_issuer, \
 AROS_LCA(CT_POLICY_EVAL_CTX *, (___ctx), A0), \
 AROS_LCA(X509 *, (___issuer), A1), \
     struct Library *, AMISSL_BASE_NAME, 4879, Amissl)

#define ECPARAMETERS_new() \
      AROS_LC0(ECPARAMETERS *, ECPARAMETERS_new, \
     struct Library *, AMISSL_BASE_NAME, 4880, Amissl)

#define ECPARAMETERS_free(___a) \
      AROS_LC1(void, ECPARAMETERS_free, \
 AROS_LCA(ECPARAMETERS *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 4881, Amissl)

#define BIO_get_new_index() \
      AROS_LC0(int, BIO_get_new_index, \
     struct Library *, AMISSL_BASE_NAME, 4882, Amissl)

#define EVP_PKEY_set1_encoded_public_key(___pkey, ___pub, ___publen) \
      AROS_LC3(int, EVP_PKEY_set1_encoded_public_key, \
 AROS_LCA(EVP_PKEY *, (___pkey), A0), \
 AROS_LCA(const unsigned char *, (___pub), A1), \
 AROS_LCA(size_t, (___publen), D0), \
     struct Library *, AMISSL_BASE_NAME, 4883, Amissl)

#define EVP_PKEY_get1_encoded_public_key(___pkey, ___ppub) \
      AROS_LC2(size_t, EVP_PKEY_get1_encoded_public_key, \
 AROS_LCA(EVP_PKEY *, (___pkey), A0), \
 AROS_LCA(unsigned char **, (___ppub), A1), \
     struct Library *, AMISSL_BASE_NAME, 4884, Amissl)

#define OCSP_RESPID_set_by_name(___respid, ___cert) \
      AROS_LC2(int, OCSP_RESPID_set_by_name, \
 AROS_LCA(OCSP_RESPID *, (___respid), A0), \
 AROS_LCA(X509 *, (___cert), A1), \
     struct Library *, AMISSL_BASE_NAME, 4885, Amissl)

#define OCSP_RESPID_set_by_key(___respid, ___cert) \
      AROS_LC2(int, OCSP_RESPID_set_by_key, \
 AROS_LCA(OCSP_RESPID *, (___respid), A0), \
 AROS_LCA(X509 *, (___cert), A1), \
     struct Library *, AMISSL_BASE_NAME, 4886, Amissl)

#define OCSP_RESPID_match(___respid, ___cert) \
      AROS_LC2(int, OCSP_RESPID_match, \
 AROS_LCA(OCSP_RESPID *, (___respid), A0), \
 AROS_LCA(X509 *, (___cert), A1), \
     struct Library *, AMISSL_BASE_NAME, 4887, Amissl)

#define PKCS12_add_friendlyname_utf8(___bag, ___name, ___namelen) \
      AROS_LC3(int, PKCS12_add_friendlyname_utf8, \
 AROS_LCA(PKCS12_SAFEBAG *, (___bag), A0), \
 AROS_LCA(const char *, (___name), A1), \
 AROS_LCA(int, (___namelen), D0), \
     struct Library *, AMISSL_BASE_NAME, 4888, Amissl)

#define PKCS12_key_gen_utf8(___pass, ___passlen, ___salt, ___saltlen, ___id, ___iter, ___n, ___out, ___md_type) \
      AROS_LC9(int, PKCS12_key_gen_utf8, \
 AROS_LCA(const char *, (___pass), A0), \
 AROS_LCA(int, (___passlen), D0), \
 AROS_LCA(unsigned char *, (___salt), A1), \
 AROS_LCA(int, (___saltlen), D1), \
 AROS_LCA(int, (___id), D2), \
 AROS_LCA(int, (___iter), D3), \
 AROS_LCA(int, (___n), D4), \
 AROS_LCA(unsigned char *, (___out), A2), \
 AROS_LCA(const EVP_MD *, (___md_type), A3), \
     struct Library *, AMISSL_BASE_NAME, 4889, Amissl)

#define OPENSSL_utf82uni(___asc, ___asclen, ___uni, ___unilen) \
      AROS_LC4(unsigned char *, OPENSSL_utf82uni, \
 AROS_LCA(const char *, (___asc), A0), \
 AROS_LCA(int, (___asclen), D0), \
 AROS_LCA(unsigned char **, (___uni), A1), \
 AROS_LCA(int *, (___unilen), A2), \
     struct Library *, AMISSL_BASE_NAME, 4890, Amissl)

#define SSL_SESSION_get0_cipher(___s) \
      AROS_LC1(const SSL_CIPHER *, SSL_SESSION_get0_cipher, \
 AROS_LCA(const SSL_SESSION *, (___s), A0), \
     struct Library *, AMISSL_BASE_NAME, 4891, Amissl)

#define SSL_SESSION_set1_id(___s, ___sid, ___sid_len) \
      AROS_LC3(int, SSL_SESSION_set1_id, \
 AROS_LCA(SSL_SESSION *, (___s), A0), \
 AROS_LCA(const unsigned char *, (___sid), A1), \
 AROS_LCA(unsigned int, (___sid_len), D0), \
     struct Library *, AMISSL_BASE_NAME, 4892, Amissl)

#define SSL_SESSION_get0_id_context(___s, ___len) \
      AROS_LC2(const unsigned char *, SSL_SESSION_get0_id_context, \
 AROS_LCA(const SSL_SESSION *, (___s), A0), \
 AROS_LCA(unsigned int *, (___len), A1), \
     struct Library *, AMISSL_BASE_NAME, 4893, Amissl)

#define TS_STATUS_INFO_get0_text(___a) \
      AROS_LC1(const STACK_OF(ASN1_UTF8STRING) *, TS_STATUS_INFO_get0_text, \
 AROS_LCA(const TS_STATUS_INFO *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 4894, Amissl)

#define X509_SIG_getm(___sig, ___palg, ___pdigest) \
      AROS_LC3(void, X509_SIG_getm, \
 AROS_LCA(X509_SIG *, (___sig), A0), \
 AROS_LCA(X509_ALGOR **, (___palg), A1), \
 AROS_LCA(ASN1_OCTET_STRING **, (___pdigest), A2), \
     struct Library *, AMISSL_BASE_NAME, 4895, Amissl)

#define X509_get0_serialNumber(___x) \
      AROS_LC1(const ASN1_INTEGER *, X509_get0_serialNumber, \
 AROS_LCA(const X509 *, (___x), A0), \
     struct Library *, AMISSL_BASE_NAME, 4896, Amissl)

#define CT_POLICY_EVAL_CTX_get_time(___ctx) \
      AROS_LC1(uint64_t, CT_POLICY_EVAL_CTX_get_time, \
 AROS_LCA(const CT_POLICY_EVAL_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 4897, Amissl)

#define CT_POLICY_EVAL_CTX_set_time(___ctx, ___time_in_ms) \
      AROS_LC2(void, CT_POLICY_EVAL_CTX_set_time, \
 AROS_LCA(CT_POLICY_EVAL_CTX *, (___ctx), A0), \
 AROS_LCA(uint64_t, (___time_in_ms), D0), \
     struct Library *, AMISSL_BASE_NAME, 4898, Amissl)

#define DH_check_params(___dh, ___ret) \
      AROS_LC2(int, DH_check_params, \
 AROS_LCA(const DH *, (___dh), A0), \
 AROS_LCA(int *, (___ret), A1), \
     struct Library *, AMISSL_BASE_NAME, 4899, Amissl)

#define SSL_COMP_get0_name(___comp) \
      AROS_LC1(const char *, SSL_COMP_get0_name, \
 AROS_LCA(const SSL_COMP *, (___comp), A0), \
     struct Library *, AMISSL_BASE_NAME, 4900, Amissl)

#define SSL_COMP_get_id(___comp) \
      AROS_LC1(int, SSL_COMP_get_id, \
 AROS_LCA(const SSL_COMP *, (___comp), A0), \
     struct Library *, AMISSL_BASE_NAME, 4901, Amissl)

#define X509_VERIFY_PARAM_get_time(___param) \
      AROS_LC1(time_t, X509_VERIFY_PARAM_get_time, \
 AROS_LCA(const X509_VERIFY_PARAM *, (___param), A0), \
     struct Library *, AMISSL_BASE_NAME, 4902, Amissl)

#define X509_VERIFY_PARAM_set_inh_flags(___param, ___flags) \
      AROS_LC2(int, X509_VERIFY_PARAM_set_inh_flags, \
 AROS_LCA(X509_VERIFY_PARAM *, (___param), A0), \
 AROS_LCA(uint32_t, (___flags), D0), \
     struct Library *, AMISSL_BASE_NAME, 4903, Amissl)

#define X509_VERIFY_PARAM_get_inh_flags(___param) \
      AROS_LC1(uint32_t, X509_VERIFY_PARAM_get_inh_flags, \
 AROS_LCA(const X509_VERIFY_PARAM *, (___param), A0), \
     struct Library *, AMISSL_BASE_NAME, 4904, Amissl)

#define CRYPTO_secure_clear_free(___ptr, ___num, ___file, ___line) \
      AROS_LC4(void, CRYPTO_secure_clear_free, \
 AROS_LCA(void *, (___ptr), A0), \
 AROS_LCA(size_t, (___num), D0), \
 AROS_LCA(const char *, (___file), A1), \
 AROS_LCA(int, (___line), D1), \
     struct Library *, AMISSL_BASE_NAME, 4905, Amissl)

#define EVP_PKEY_set1_engine(___pkey, ___e) \
      AROS_LC2(int, EVP_PKEY_set1_engine, \
 AROS_LCA(EVP_PKEY *, (___pkey), A0), \
 AROS_LCA(ENGINE *, (___e), A1), \
     struct Library *, AMISSL_BASE_NAME, 4906, Amissl)

#define SSL_get_client_ciphers(___s) \
      AROS_LC1(STACK_OF(SSL_CIPHER) *, SSL_get_client_ciphers, \
 AROS_LCA(const SSL *, (___s), A0), \
     struct Library *, AMISSL_BASE_NAME, 4907, Amissl)

#define SSL_CIPHER_standard_name(___c) \
      AROS_LC1(const char *, SSL_CIPHER_standard_name, \
 AROS_LCA(const SSL_CIPHER *, (___c), A0), \
     struct Library *, AMISSL_BASE_NAME, 4908, Amissl)

#define SSL_get0_verified_chain(___s) \
      AROS_LC1(STACK_OF(X509) *, SSL_get0_verified_chain, \
 AROS_LCA(const SSL *, (___s), A0), \
     struct Library *, AMISSL_BASE_NAME, 4909, Amissl)

#define SSL_COMP_set0_compression_methods(___meths) \
      AROS_LC1(STACK_OF(SSL_COMP) *, SSL_COMP_set0_compression_methods, \
 AROS_LCA(STACK_OF(SSL_COMP) *, (___meths), A0), \
     struct Library *, AMISSL_BASE_NAME, 4910, Amissl)

#define SSL_CTX_set1_cert_store(___a, ___b) \
      AROS_LC2(void, SSL_CTX_set1_cert_store, \
 AROS_LCA(SSL_CTX *, (___a), A0), \
 AROS_LCA(X509_STORE *, (___b), A1), \
     struct Library *, AMISSL_BASE_NAME, 4912, Amissl)

#define DTLS_get_data_mtu(___s) \
      AROS_LC1(size_t, DTLS_get_data_mtu, \
 AROS_LCA(const SSL *, (___s), A0), \
     struct Library *, AMISSL_BASE_NAME, 4913, Amissl)

#define SSL_read_ex(___ssl, ___buf, ___num, ___readbytes) \
      AROS_LC4(int, SSL_read_ex, \
 AROS_LCA(SSL *, (___ssl), A0), \
 AROS_LCA(void *, (___buf), A1), \
 AROS_LCA(size_t, (___num), D0), \
 AROS_LCA(size_t *, (___readbytes), A2), \
     struct Library *, AMISSL_BASE_NAME, 4914, Amissl)

#define SSL_peek_ex(___ssl, ___buf, ___num, ___readbytes) \
      AROS_LC4(int, SSL_peek_ex, \
 AROS_LCA(SSL *, (___ssl), A0), \
 AROS_LCA(void *, (___buf), A1), \
 AROS_LCA(size_t, (___num), D0), \
 AROS_LCA(size_t *, (___readbytes), A2), \
     struct Library *, AMISSL_BASE_NAME, 4915, Amissl)

#define SSL_write_ex(___s, ___buf, ___num, ___written) \
      AROS_LC4(int, SSL_write_ex, \
 AROS_LCA(SSL *, (___s), A0), \
 AROS_LCA(const void *, (___buf), A1), \
 AROS_LCA(size_t, (___num), D0), \
 AROS_LCA(size_t *, (___written), A2), \
     struct Library *, AMISSL_BASE_NAME, 4916, Amissl)

#define SSL_CTX_set_keylog_callback(___ctx, ___cb) \
      AROS_LC2(void, SSL_CTX_set_keylog_callback, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
 AROS_LCA(SSL_CTX_keylog_cb_func, (___cb), A1), \
     struct Library *, AMISSL_BASE_NAME, 4917, Amissl)

#define SSL_CTX_get_keylog_callback(___ctx) \
      AROS_LC1(SSL_CTX_keylog_cb_func, SSL_CTX_get_keylog_callback, \
 AROS_LCA(const SSL_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 4918, Amissl)

#define SSL_get_peer_signature_type_nid(___s, ___pnid) \
      AROS_LC2(int, SSL_get_peer_signature_type_nid, \
 AROS_LCA(const SSL *, (___s), A0), \
 AROS_LCA(int *, (___pnid), A1), \
     struct Library *, AMISSL_BASE_NAME, 4919, Amissl)

#define SSL_key_update(___s, ___updatetype) \
      AROS_LC2(int, SSL_key_update, \
 AROS_LCA(SSL *, (___s), A0), \
 AROS_LCA(int, (___updatetype), D0), \
     struct Library *, AMISSL_BASE_NAME, 4920, Amissl)

#define SSL_get_key_update_type(___s) \
      AROS_LC1(int, SSL_get_key_update_type, \
 AROS_LCA(const SSL *, (___s), A0), \
     struct Library *, AMISSL_BASE_NAME, 4921, Amissl)

#define SSL_bytes_to_cipher_list(___s, ___bytes, ___len, ___isv2format, ___sk, ___scsvs) \
      AROS_LC6(int, SSL_bytes_to_cipher_list, \
 AROS_LCA(SSL *, (___s), A0), \
 AROS_LCA(const unsigned char *, (___bytes), A1), \
 AROS_LCA(size_t, (___len), D0), \
 AROS_LCA(int, (___isv2format), D1), \
 AROS_LCA(STACK_OF(SSL_CIPHER) **, (___sk), A2), \
 AROS_LCA(STACK_OF(SSL_CIPHER) **, (___scsvs), A3), \
     struct Library *, AMISSL_BASE_NAME, 4922, Amissl)

#define SSL_client_hello_get0_compression_methods(___s, ___out) \
      AROS_LC2(size_t, SSL_client_hello_get0_compression_methods, \
 AROS_LCA(SSL *, (___s), A0), \
 AROS_LCA(const unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 4923, Amissl)

#define SSL_client_hello_get0_ciphers(___s, ___out) \
      AROS_LC2(size_t, SSL_client_hello_get0_ciphers, \
 AROS_LCA(SSL *, (___s), A0), \
 AROS_LCA(const unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 4924, Amissl)

#define SSL_client_hello_get0_ext(___s, ___type, ___out, ___outlen) \
      AROS_LC4(int, SSL_client_hello_get0_ext, \
 AROS_LCA(SSL *, (___s), A0), \
 AROS_LCA(unsigned int, (___type), D0), \
 AROS_LCA(const unsigned char **, (___out), A1), \
 AROS_LCA(size_t *, (___outlen), A2), \
     struct Library *, AMISSL_BASE_NAME, 4925, Amissl)

#define SSL_client_hello_get0_session_id(___s, ___out) \
      AROS_LC2(size_t, SSL_client_hello_get0_session_id, \
 AROS_LCA(SSL *, (___s), A0), \
 AROS_LCA(const unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 4926, Amissl)

#define SSL_client_hello_get0_random(___s, ___out) \
      AROS_LC2(size_t, SSL_client_hello_get0_random, \
 AROS_LCA(SSL *, (___s), A0), \
 AROS_LCA(const unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 4927, Amissl)

#define SSL_CTX_set_client_hello_cb(___c, ___cb, ___arg) \
      AROS_LC3(void, SSL_CTX_set_client_hello_cb, \
 AROS_LCA(SSL_CTX *, (___c), A0), \
 AROS_LCA(SSL_client_hello_cb_fn, (___cb), A1), \
 AROS_LCA(void *, (___arg), A2), \
     struct Library *, AMISSL_BASE_NAME, 4928, Amissl)

#define SSL_client_hello_get0_legacy_version(___s) \
      AROS_LC1(unsigned int, SSL_client_hello_get0_legacy_version, \
 AROS_LCA(SSL *, (___s), A0), \
     struct Library *, AMISSL_BASE_NAME, 4929, Amissl)

#define SSL_client_hello_isv2(___s) \
      AROS_LC1(int, SSL_client_hello_isv2, \
 AROS_LCA(SSL *, (___s), A0), \
     struct Library *, AMISSL_BASE_NAME, 4930, Amissl)

#define SSL_set_max_early_data(___s, ___max_early_data) \
      AROS_LC2(int, SSL_set_max_early_data, \
 AROS_LCA(SSL *, (___s), A0), \
 AROS_LCA(uint32_t, (___max_early_data), D0), \
     struct Library *, AMISSL_BASE_NAME, 4931, Amissl)

#define SSL_CTX_set_max_early_data(___ctx, ___max_early_data) \
      AROS_LC2(int, SSL_CTX_set_max_early_data, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
 AROS_LCA(uint32_t, (___max_early_data), D0), \
     struct Library *, AMISSL_BASE_NAME, 4932, Amissl)

#define SSL_get_max_early_data(___s) \
      AROS_LC1(uint32_t, SSL_get_max_early_data, \
 AROS_LCA(const SSL *, (___s), A0), \
     struct Library *, AMISSL_BASE_NAME, 4933, Amissl)

#define SSL_CTX_get_max_early_data(___ctx) \
      AROS_LC1(uint32_t, SSL_CTX_get_max_early_data, \
 AROS_LCA(const SSL_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 4934, Amissl)

#define SSL_write_early_data(___s, ___buf, ___num, ___written) \
      AROS_LC4(int, SSL_write_early_data, \
 AROS_LCA(SSL *, (___s), A0), \
 AROS_LCA(const void *, (___buf), A1), \
 AROS_LCA(size_t, (___num), D0), \
 AROS_LCA(size_t *, (___written), A2), \
     struct Library *, AMISSL_BASE_NAME, 4935, Amissl)

#define SSL_read_early_data(___s, ___buf, ___num, ___readbytes) \
      AROS_LC4(int, SSL_read_early_data, \
 AROS_LCA(SSL *, (___s), A0), \
 AROS_LCA(void *, (___buf), A1), \
 AROS_LCA(size_t, (___num), D0), \
 AROS_LCA(size_t *, (___readbytes), A2), \
     struct Library *, AMISSL_BASE_NAME, 4936, Amissl)

#define SSL_get_early_data_status(___s) \
      AROS_LC1(int, SSL_get_early_data_status, \
 AROS_LCA(const SSL *, (___s), A0), \
     struct Library *, AMISSL_BASE_NAME, 4937, Amissl)

#define SSL_SESSION_get_max_early_data(___s) \
      AROS_LC1(uint32_t, SSL_SESSION_get_max_early_data, \
 AROS_LCA(const SSL_SESSION *, (___s), A0), \
     struct Library *, AMISSL_BASE_NAME, 4938, Amissl)

#define SSL_add1_to_CA_list(___ssl, ___x) \
      AROS_LC2(int, SSL_add1_to_CA_list, \
 AROS_LCA(SSL *, (___ssl), A0), \
 AROS_LCA(const X509 *, (___x), A1), \
     struct Library *, AMISSL_BASE_NAME, 4939, Amissl)

#define SSL_set0_CA_list(___s, ___name_list) \
      AROS_LC2(void, SSL_set0_CA_list, \
 AROS_LCA(SSL *, (___s), A0), \
 AROS_LCA(STACK_OF(X509_NAME) *, (___name_list), A1), \
     struct Library *, AMISSL_BASE_NAME, 4940, Amissl)

#define SSL_CTX_set0_CA_list(___ctx, ___name_list) \
      AROS_LC2(void, SSL_CTX_set0_CA_list, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
 AROS_LCA(STACK_OF(X509_NAME) *, (___name_list), A1), \
     struct Library *, AMISSL_BASE_NAME, 4941, Amissl)

#define SSL_get0_CA_list(___s) \
      AROS_LC1(const STACK_OF(X509_NAME) *, SSL_get0_CA_list, \
 AROS_LCA(const SSL *, (___s), A0), \
     struct Library *, AMISSL_BASE_NAME, 4942, Amissl)

#define SSL_get0_peer_CA_list(___s) \
      AROS_LC1(const STACK_OF(X509_NAME) *, SSL_get0_peer_CA_list, \
 AROS_LCA(const SSL *, (___s), A0), \
     struct Library *, AMISSL_BASE_NAME, 4943, Amissl)

#define SSL_CTX_add1_to_CA_list(___ctx, ___x) \
      AROS_LC2(int, SSL_CTX_add1_to_CA_list, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
 AROS_LCA(const X509 *, (___x), A1), \
     struct Library *, AMISSL_BASE_NAME, 4944, Amissl)

#define SSL_CTX_get0_CA_list(___ctx) \
      AROS_LC1(const STACK_OF(X509_NAME) *, SSL_CTX_get0_CA_list, \
 AROS_LCA(const SSL_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 4945, Amissl)

#define SSL_CTX_add_custom_ext(___ctx, ___ext_type, ___context, ___add_cb, ___free_cb, ___add_arg, ___parse_cb, ___parse_arg) \
      AROS_LC8(int, SSL_CTX_add_custom_ext, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
 AROS_LCA(unsigned int, (___ext_type), D0), \
 AROS_LCA(unsigned int, (___context), D1), \
 AROS_LCA(SSL_custom_ext_add_cb_ex, (___add_cb), A1), \
 AROS_LCA(SSL_custom_ext_free_cb_ex, (___free_cb), A2), \
 AROS_LCA(void *, (___add_arg), A3), \
 AROS_LCA(SSL_custom_ext_parse_cb_ex, (___parse_cb), D2), \
 AROS_LCA(void *, (___parse_arg), D3), \
     struct Library *, AMISSL_BASE_NAME, 4946, Amissl)

#define SSL_SESSION_is_resumable(___s) \
      AROS_LC1(int, SSL_SESSION_is_resumable, \
 AROS_LCA(const SSL_SESSION *, (___s), A0), \
     struct Library *, AMISSL_BASE_NAME, 4947, Amissl)

#define SSL_CTX_set_record_padding_callback(___ctx, ___cb) \
      AROS_LC2(void, SSL_CTX_set_record_padding_callback, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
 AROS_LCA(size_t (*)(SSL *ssl,int type,size_t len,void *arg), (___cb), A1), \
     struct Library *, AMISSL_BASE_NAME, 4948, Amissl)

#define SSL_set_record_padding_callback(___ssl, ___cb) \
      AROS_LC2(int, SSL_set_record_padding_callback, \
 AROS_LCA(SSL *, (___ssl), A0), \
 AROS_LCA(size_t (*)(SSL *ssl,int type,size_t len,void *arg), (___cb), A1), \
     struct Library *, AMISSL_BASE_NAME, 4949, Amissl)

#define SSL_CTX_set_block_padding(___ctx, ___block_size) \
      AROS_LC2(int, SSL_CTX_set_block_padding, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
 AROS_LCA(size_t, (___block_size), D0), \
     struct Library *, AMISSL_BASE_NAME, 4950, Amissl)

#define SSL_CTX_get_record_padding_callback_arg(___ctx) \
      AROS_LC1(void *, SSL_CTX_get_record_padding_callback_arg, \
 AROS_LCA(const SSL_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 4951, Amissl)

#define SSL_get_record_padding_callback_arg(___ssl) \
      AROS_LC1(void *, SSL_get_record_padding_callback_arg, \
 AROS_LCA(const SSL *, (___ssl), A0), \
     struct Library *, AMISSL_BASE_NAME, 4952, Amissl)

#define SSL_set_block_padding(___ssl, ___block_size) \
      AROS_LC2(int, SSL_set_block_padding, \
 AROS_LCA(SSL *, (___ssl), A0), \
 AROS_LCA(size_t, (___block_size), D0), \
     struct Library *, AMISSL_BASE_NAME, 4953, Amissl)

#define SSL_set_record_padding_callback_arg(___ssl, ___arg) \
      AROS_LC2(void, SSL_set_record_padding_callback_arg, \
 AROS_LCA(SSL *, (___ssl), A0), \
 AROS_LCA(void *, (___arg), A1), \
     struct Library *, AMISSL_BASE_NAME, 4954, Amissl)

#define SSL_CTX_set_record_padding_callback_arg(___ctx, ___arg) \
      AROS_LC2(void, SSL_CTX_set_record_padding_callback_arg, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
 AROS_LCA(void *, (___arg), A1), \
     struct Library *, AMISSL_BASE_NAME, 4955, Amissl)

#define SSL_CTX_use_serverinfo_ex(___ctx, ___version, ___serverinfo, ___serverinfo_length) \
      AROS_LC4(int, SSL_CTX_use_serverinfo_ex, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
 AROS_LCA(unsigned int, (___version), D0), \
 AROS_LCA(const unsigned char *, (___serverinfo), A1), \
 AROS_LCA(size_t, (___serverinfo_length), D1), \
     struct Library *, AMISSL_BASE_NAME, 4956, Amissl)

#define SSL_client_hello_get1_extensions_present(___s, ___out, ___outlen) \
      AROS_LC3(int, SSL_client_hello_get1_extensions_present, \
 AROS_LCA(SSL *, (___s), A0), \
 AROS_LCA(int **, (___out), A1), \
 AROS_LCA(size_t *, (___outlen), A2), \
     struct Library *, AMISSL_BASE_NAME, 4957, Amissl)

#define SSL_set_psk_find_session_callback(___s, ___cb) \
      AROS_LC2(void, SSL_set_psk_find_session_callback, \
 AROS_LCA(SSL *, (___s), A0), \
 AROS_LCA(SSL_psk_find_session_cb_func, (___cb), A1), \
     struct Library *, AMISSL_BASE_NAME, 4958, Amissl)

#define SSL_set_psk_use_session_callback(___s, ___cb) \
      AROS_LC2(void, SSL_set_psk_use_session_callback, \
 AROS_LCA(SSL *, (___s), A0), \
 AROS_LCA(SSL_psk_use_session_cb_func, (___cb), A1), \
     struct Library *, AMISSL_BASE_NAME, 4959, Amissl)

#define SSL_CTX_set_psk_use_session_callback(___ctx, ___cb) \
      AROS_LC2(void, SSL_CTX_set_psk_use_session_callback, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
 AROS_LCA(SSL_psk_use_session_cb_func, (___cb), A1), \
     struct Library *, AMISSL_BASE_NAME, 4960, Amissl)

#define SSL_CTX_set_psk_find_session_callback(___ctx, ___cb) \
      AROS_LC2(void, SSL_CTX_set_psk_find_session_callback, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
 AROS_LCA(SSL_psk_find_session_cb_func, (___cb), A1), \
     struct Library *, AMISSL_BASE_NAME, 4961, Amissl)

#define SSL_CIPHER_get_handshake_digest(___c) \
      AROS_LC1(const EVP_MD *, SSL_CIPHER_get_handshake_digest, \
 AROS_LCA(const SSL_CIPHER *, (___c), A0), \
     struct Library *, AMISSL_BASE_NAME, 4962, Amissl)

#define SSL_SESSION_set1_master_key(___sess, ___in, ___len) \
      AROS_LC3(int, SSL_SESSION_set1_master_key, \
 AROS_LCA(SSL_SESSION *, (___sess), A0), \
 AROS_LCA(const unsigned char *, (___in), A1), \
 AROS_LCA(size_t, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 4963, Amissl)

#define SSL_SESSION_set_cipher(___s, ___cipher) \
      AROS_LC2(int, SSL_SESSION_set_cipher, \
 AROS_LCA(SSL_SESSION *, (___s), A0), \
 AROS_LCA(const SSL_CIPHER *, (___cipher), A1), \
     struct Library *, AMISSL_BASE_NAME, 4964, Amissl)

#define SSL_SESSION_set_protocol_version(___s, ___version) \
      AROS_LC2(int, SSL_SESSION_set_protocol_version, \
 AROS_LCA(SSL_SESSION *, (___s), A0), \
 AROS_LCA(int, (___version), D0), \
     struct Library *, AMISSL_BASE_NAME, 4965, Amissl)

#define OPENSSL_cipher_name(___rfc_name) \
      AROS_LC1(const char *, OPENSSL_cipher_name, \
 AROS_LCA(const char *, (___rfc_name), A0), \
     struct Library *, AMISSL_BASE_NAME, 4966, Amissl)

#define SSL_alloc_buffers(___ssl) \
      AROS_LC1(int, SSL_alloc_buffers, \
 AROS_LCA(SSL *, (___ssl), A0), \
     struct Library *, AMISSL_BASE_NAME, 4967, Amissl)

#define SSL_free_buffers(___ssl) \
      AROS_LC1(int, SSL_free_buffers, \
 AROS_LCA(SSL *, (___ssl), A0), \
     struct Library *, AMISSL_BASE_NAME, 4968, Amissl)

#define SSL_SESSION_dup(___src) \
      AROS_LC1(SSL_SESSION *, SSL_SESSION_dup, \
 AROS_LCA(const SSL_SESSION *, (___src), A0), \
     struct Library *, AMISSL_BASE_NAME, 4969, Amissl)

#define SSL_get_pending_cipher(___s) \
      AROS_LC1(const SSL_CIPHER *, SSL_get_pending_cipher, \
 AROS_LCA(const SSL *, (___s), A0), \
     struct Library *, AMISSL_BASE_NAME, 4970, Amissl)

#define SSL_CIPHER_get_protocol_id(___c) \
      AROS_LC1(uint16_t, SSL_CIPHER_get_protocol_id, \
 AROS_LCA(const SSL_CIPHER *, (___c), A0), \
     struct Library *, AMISSL_BASE_NAME, 4971, Amissl)

#define SSL_SESSION_set_max_early_data(___s, ___max_early_data) \
      AROS_LC2(int, SSL_SESSION_set_max_early_data, \
 AROS_LCA(SSL_SESSION *, (___s), A0), \
 AROS_LCA(uint32_t, (___max_early_data), D0), \
     struct Library *, AMISSL_BASE_NAME, 4972, Amissl)

#define SSL_SESSION_set1_alpn_selected(___s, ___alpn, ___len) \
      AROS_LC3(int, SSL_SESSION_set1_alpn_selected, \
 AROS_LCA(SSL_SESSION *, (___s), A0), \
 AROS_LCA(const unsigned char *, (___alpn), A1), \
 AROS_LCA(size_t, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 4973, Amissl)

#define SSL_SESSION_set1_hostname(___s, ___hostname) \
      AROS_LC2(int, SSL_SESSION_set1_hostname, \
 AROS_LCA(SSL_SESSION *, (___s), A0), \
 AROS_LCA(const char *, (___hostname), A1), \
     struct Library *, AMISSL_BASE_NAME, 4974, Amissl)

#define SSL_SESSION_get0_alpn_selected(___s, ___alpn, ___len) \
      AROS_LC3(void, SSL_SESSION_get0_alpn_selected, \
 AROS_LCA(const SSL_SESSION *, (___s), A0), \
 AROS_LCA(const unsigned char **, (___alpn), A1), \
 AROS_LCA(size_t *, (___len), A2), \
     struct Library *, AMISSL_BASE_NAME, 4975, Amissl)

#define DTLS_set_timer_cb(___s, ___cb) \
      AROS_LC2(void, DTLS_set_timer_cb, \
 AROS_LCA(SSL *, (___s), A0), \
 AROS_LCA(DTLS_timer_cb, (___cb), A1), \
     struct Library *, AMISSL_BASE_NAME, 4976, Amissl)

#define SSL_CTX_set_tlsext_max_fragment_length(___ctx, ___mode) \
      AROS_LC2(int, SSL_CTX_set_tlsext_max_fragment_length, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
 AROS_LCA(uint8_t, (___mode), D0), \
     struct Library *, AMISSL_BASE_NAME, 4977, Amissl)

#define SSL_set_tlsext_max_fragment_length(___ssl, ___mode) \
      AROS_LC2(int, SSL_set_tlsext_max_fragment_length, \
 AROS_LCA(SSL *, (___ssl), A0), \
 AROS_LCA(uint8_t, (___mode), D0), \
     struct Library *, AMISSL_BASE_NAME, 4978, Amissl)

#define SSL_SESSION_get_max_fragment_length(___sess) \
      AROS_LC1(uint8_t, SSL_SESSION_get_max_fragment_length, \
 AROS_LCA(const SSL_SESSION *, (___sess), A0), \
     struct Library *, AMISSL_BASE_NAME, 4979, Amissl)

#define SSL_stateless(___s) \
      AROS_LC1(int, SSL_stateless, \
 AROS_LCA(SSL *, (___s), A0), \
     struct Library *, AMISSL_BASE_NAME, 4980, Amissl)

#define SSL_verify_client_post_handshake(___s) \
      AROS_LC1(int, SSL_verify_client_post_handshake, \
 AROS_LCA(SSL *, (___s), A0), \
     struct Library *, AMISSL_BASE_NAME, 4981, Amissl)

#define SSL_set_post_handshake_auth(___s, ___val) \
      AROS_LC2(void, SSL_set_post_handshake_auth, \
 AROS_LCA(SSL *, (___s), A0), \
 AROS_LCA(int, (___val), D0), \
     struct Library *, AMISSL_BASE_NAME, 4982, Amissl)

#define SSL_export_keying_material_early(___s, ___out, ___olen, ___label, ___llen, ___context, ___contextlen) \
      AROS_LC7(int, SSL_export_keying_material_early, \
 AROS_LCA(SSL *, (___s), A0), \
 AROS_LCA(unsigned char *, (___out), A1), \
 AROS_LCA(size_t, (___olen), D0), \
 AROS_LCA(const char *, (___label), A2), \
 AROS_LCA(size_t, (___llen), D1), \
 AROS_LCA(const unsigned char *, (___context), A3), \
 AROS_LCA(size_t, (___contextlen), D2), \
     struct Library *, AMISSL_BASE_NAME, 4983, Amissl)

#define SSL_CTX_use_cert_and_key(___ctx, ___x509, ___privatekey, ___chain, ___override) \
      AROS_LC5(int, SSL_CTX_use_cert_and_key, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
 AROS_LCA(X509 *, (___x509), A1), \
 AROS_LCA(EVP_PKEY *, (___privatekey), A2), \
 AROS_LCA(STACK_OF(X509) *, (___chain), A3), \
 AROS_LCA(int, (___override), D0), \
     struct Library *, AMISSL_BASE_NAME, 4984, Amissl)

#define SSL_use_cert_and_key(___ssl, ___x509, ___privatekey, ___chain, ___override) \
      AROS_LC5(int, SSL_use_cert_and_key, \
 AROS_LCA(SSL *, (___ssl), A0), \
 AROS_LCA(X509 *, (___x509), A1), \
 AROS_LCA(EVP_PKEY *, (___privatekey), A2), \
 AROS_LCA(STACK_OF(X509) *, (___chain), A3), \
 AROS_LCA(int, (___override), D0), \
     struct Library *, AMISSL_BASE_NAME, 4985, Amissl)

#define SSL_SESSION_get0_ticket_appdata(___ss, ___data, ___len) \
      AROS_LC3(int, SSL_SESSION_get0_ticket_appdata, \
 AROS_LCA(SSL_SESSION *, (___ss), A0), \
 AROS_LCA(void **, (___data), A1), \
 AROS_LCA(size_t *, (___len), A2), \
     struct Library *, AMISSL_BASE_NAME, 4986, Amissl)

#define SSL_SESSION_set1_ticket_appdata(___ss, ___data, ___len) \
      AROS_LC3(int, SSL_SESSION_set1_ticket_appdata, \
 AROS_LCA(SSL_SESSION *, (___ss), A0), \
 AROS_LCA(const void *, (___data), A1), \
 AROS_LCA(size_t, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 4987, Amissl)

#define SSL_CTX_set_session_ticket_cb(___ctx, ___gen_cb, ___dec_cb, ___arg) \
      AROS_LC4(int, SSL_CTX_set_session_ticket_cb, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
 AROS_LCA(SSL_CTX_generate_session_ticket_fn, (___gen_cb), A1), \
 AROS_LCA(SSL_CTX_decrypt_session_ticket_fn, (___dec_cb), A2), \
 AROS_LCA(void *, (___arg), A3), \
     struct Library *, AMISSL_BASE_NAME, 4988, Amissl)

#define SSL_CTX_set_stateless_cookie_generate_cb(___ctx, ___gen_stateless_cookie_cb) \
      AROS_LC2(void, SSL_CTX_set_stateless_cookie_generate_cb, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
 AROS_LCA(int (*)(SSL *ssl,unsigned char *cookie,size_t *cookie_len), (___gen_stateless_cookie_cb), A1), \
     struct Library *, AMISSL_BASE_NAME, 4989, Amissl)

#define SSL_CTX_set_stateless_cookie_verify_cb(___ctx, ___verify_stateless_cookie_cb) \
      AROS_LC2(void, SSL_CTX_set_stateless_cookie_verify_cb, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
 AROS_LCA(int (*)(SSL *ssl,const unsigned char *cookie,size_t cookie_len), (___verify_stateless_cookie_cb), A1), \
     struct Library *, AMISSL_BASE_NAME, 4990, Amissl)

#define SSL_CTX_set_ciphersuites(___ctx, ___str) \
      AROS_LC2(int, SSL_CTX_set_ciphersuites, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
 AROS_LCA(const char *, (___str), A1), \
     struct Library *, AMISSL_BASE_NAME, 4991, Amissl)

#define SSL_set_ciphersuites(___s, ___str) \
      AROS_LC2(int, SSL_set_ciphersuites, \
 AROS_LCA(SSL *, (___s), A0), \
 AROS_LCA(const char *, (___str), A1), \
     struct Library *, AMISSL_BASE_NAME, 4992, Amissl)

#define SSL_set_num_tickets(___s, ___num_tickets) \
      AROS_LC2(int, SSL_set_num_tickets, \
 AROS_LCA(SSL *, (___s), A0), \
 AROS_LCA(size_t, (___num_tickets), D0), \
     struct Library *, AMISSL_BASE_NAME, 4993, Amissl)

#define SSL_CTX_get_num_tickets(___ctx) \
      AROS_LC1(size_t, SSL_CTX_get_num_tickets, \
 AROS_LCA(const SSL_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 4994, Amissl)

#define SSL_get_num_tickets(___s) \
      AROS_LC1(size_t, SSL_get_num_tickets, \
 AROS_LCA(const SSL *, (___s), A0), \
     struct Library *, AMISSL_BASE_NAME, 4995, Amissl)

#define SSL_CTX_set_num_tickets(___ctx, ___num_tickets) \
      AROS_LC2(int, SSL_CTX_set_num_tickets, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
 AROS_LCA(size_t, (___num_tickets), D0), \
     struct Library *, AMISSL_BASE_NAME, 4996, Amissl)

#define SSL_CTX_set_allow_early_data_cb(___ctx, ___cb, ___arg) \
      AROS_LC3(void, SSL_CTX_set_allow_early_data_cb, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
 AROS_LCA(SSL_allow_early_data_cb_fn, (___cb), A1), \
 AROS_LCA(void *, (___arg), A2), \
     struct Library *, AMISSL_BASE_NAME, 4997, Amissl)

#define SSL_set_allow_early_data_cb(___s, ___cb, ___arg) \
      AROS_LC3(void, SSL_set_allow_early_data_cb, \
 AROS_LCA(SSL *, (___s), A0), \
 AROS_LCA(SSL_allow_early_data_cb_fn, (___cb), A1), \
 AROS_LCA(void *, (___arg), A2), \
     struct Library *, AMISSL_BASE_NAME, 4998, Amissl)

#define SSL_set_recv_max_early_data(___s, ___recv_max_early_data) \
      AROS_LC2(int, SSL_set_recv_max_early_data, \
 AROS_LCA(SSL *, (___s), A0), \
 AROS_LCA(uint32_t, (___recv_max_early_data), D0), \
     struct Library *, AMISSL_BASE_NAME, 4999, Amissl)

#define SSL_get_recv_max_early_data(___s) \
      AROS_LC1(uint32_t, SSL_get_recv_max_early_data, \
 AROS_LCA(const SSL *, (___s), A0), \
     struct Library *, AMISSL_BASE_NAME, 5000, Amissl)

#define SSL_CTX_get_recv_max_early_data(___ctx) \
      AROS_LC1(uint32_t, SSL_CTX_get_recv_max_early_data, \
 AROS_LCA(const SSL_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 5001, Amissl)

#define SSL_CTX_set_recv_max_early_data(___ctx, ___recv_max_early_data) \
      AROS_LC2(int, SSL_CTX_set_recv_max_early_data, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
 AROS_LCA(uint32_t, (___recv_max_early_data), D0), \
     struct Library *, AMISSL_BASE_NAME, 5002, Amissl)

#define SSL_CTX_set_post_handshake_auth(___ctx, ___val) \
      AROS_LC2(void, SSL_CTX_set_post_handshake_auth, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
 AROS_LCA(int, (___val), D0), \
     struct Library *, AMISSL_BASE_NAME, 5003, Amissl)

#define SSL_get_signature_type_nid(___s, ___pnid) \
      AROS_LC2(int, SSL_get_signature_type_nid, \
 AROS_LCA(const SSL *, (___s), A0), \
 AROS_LCA(int *, (___pnid), A1), \
     struct Library *, AMISSL_BASE_NAME, 5004, Amissl)

#define IPAddressRange_free(___a) \
      AROS_LC1(void, IPAddressRange_free, \
 AROS_LCA(IPAddressRange *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 5005, Amissl)

#define TLS_FEATURE_new() \
      AROS_LC0(TLS_FEATURE *, TLS_FEATURE_new, \
     struct Library *, AMISSL_BASE_NAME, 5006, Amissl)

#define BIO_f_linebuffer() \
      AROS_LC0(const BIO_METHOD *, BIO_f_linebuffer, \
     struct Library *, AMISSL_BASE_NAME, 5008, Amissl)

#define IPAddressRange_new() \
      AROS_LC0(IPAddressRange *, IPAddressRange_new, \
     struct Library *, AMISSL_BASE_NAME, 5010, Amissl)

#define IPAddressRange_it() \
      AROS_LC0(const ASN1_ITEM *, IPAddressRange_it, \
     struct Library *, AMISSL_BASE_NAME, 5011, Amissl)

#define d2i_IPAddressRange(___a, ___in, ___len) \
      AROS_LC3(IPAddressRange *, d2i_IPAddressRange, \
 AROS_LCA(IPAddressRange **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 5013, Amissl)

#define TLS_FEATURE_free(___a) \
      AROS_LC1(void, TLS_FEATURE_free, \
 AROS_LCA(TLS_FEATURE *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 5016, Amissl)

#define i2d_RSA_OAEP_PARAMS(___a, ___out) \
      AROS_LC2(int, i2d_RSA_OAEP_PARAMS, \
 AROS_LCA(const RSA_OAEP_PARAMS *, (___a), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 5017, Amissl)

#define i2d_IPAddressRange(___a, ___out) \
      AROS_LC2(int, i2d_IPAddressRange, \
 AROS_LCA(const IPAddressRange *, (___a), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 5019, Amissl)

#define X509_OBJECT_new() \
      AROS_LC0(X509_OBJECT *, X509_OBJECT_new, \
     struct Library *, AMISSL_BASE_NAME, 5020, Amissl)

#define PKCS12_get_attr(___bag, ___attr_nid) \
      AROS_LC2(ASN1_TYPE *, PKCS12_get_attr, \
 AROS_LCA(const PKCS12_SAFEBAG *, (___bag), A0), \
 AROS_LCA(int, (___attr_nid), D0), \
     struct Library *, AMISSL_BASE_NAME, 5021, Amissl)

#define ECPKPARAMETERS_free(___a) \
      AROS_LC1(void, ECPKPARAMETERS_free, \
 AROS_LCA(ECPKPARAMETERS *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 5022, Amissl)

#define ECPKPARAMETERS_new() \
      AROS_LC0(ECPKPARAMETERS *, ECPKPARAMETERS_new, \
     struct Library *, AMISSL_BASE_NAME, 5023, Amissl)

#define ASN1_ITEM_lookup(___name) \
      AROS_LC1(const ASN1_ITEM *, ASN1_ITEM_lookup, \
 AROS_LCA(const char *, (___name), A0), \
     struct Library *, AMISSL_BASE_NAME, 5024, Amissl)

#define ASN1_ITEM_get(___i) \
      AROS_LC1(const ASN1_ITEM *, ASN1_ITEM_get, \
 AROS_LCA(size_t, (___i), D0), \
     struct Library *, AMISSL_BASE_NAME, 5025, Amissl)

#define BIO_read_ex(___b, ___data, ___dlen, ___readbytes) \
      AROS_LC4(int, BIO_read_ex, \
 AROS_LCA(BIO *, (___b), A0), \
 AROS_LCA(void *, (___data), A1), \
 AROS_LCA(size_t, (___dlen), D0), \
 AROS_LCA(size_t *, (___readbytes), A2), \
     struct Library *, AMISSL_BASE_NAME, 5026, Amissl)

#define BIO_set_callback_ex(___b, ___callback) \
      AROS_LC2(void, BIO_set_callback_ex, \
 AROS_LCA(BIO *, (___b), A0), \
 AROS_LCA(BIO_callback_fn_ex, (___callback), A1), \
     struct Library *, AMISSL_BASE_NAME, 5027, Amissl)

#define BIO_get_callback_ex(___b) \
      AROS_LC1(BIO_callback_fn_ex, BIO_get_callback_ex, \
 AROS_LCA(const BIO *, (___b), A0), \
     struct Library *, AMISSL_BASE_NAME, 5028, Amissl)

#define BIO_meth_set_read_ex(___biom, ___bread) \
      AROS_LC2(int, BIO_meth_set_read_ex, \
 AROS_LCA(BIO_METHOD *, (___biom), A0), \
 AROS_LCA(int (*)(BIO *,char *,size_t,size_t *), (___bread), A1), \
     struct Library *, AMISSL_BASE_NAME, 5029, Amissl)

#define BIO_meth_get_read_ex(___biom) \
      AROS_LC1(int (*)(BIO *, char *, size_t, size_t *), BIO_meth_get_read_ex, \
 AROS_LCA(const BIO_METHOD *, (___biom), A0), \
     struct Library *, AMISSL_BASE_NAME, 5030, Amissl)

#define BIO_write_ex(___b, ___data, ___dlen, ___written) \
      AROS_LC4(int, BIO_write_ex, \
 AROS_LCA(BIO *, (___b), A0), \
 AROS_LCA(const void *, (___data), A1), \
 AROS_LCA(size_t, (___dlen), D0), \
 AROS_LCA(size_t *, (___written), A2), \
     struct Library *, AMISSL_BASE_NAME, 5031, Amissl)

#define BIO_meth_get_write_ex(___biom) \
      AROS_LC1(int (*)(BIO *, const char *, size_t, size_t *), BIO_meth_get_write_ex, \
 AROS_LCA(const BIO_METHOD *, (___biom), A0), \
     struct Library *, AMISSL_BASE_NAME, 5032, Amissl)

#define BIO_meth_set_write_ex(___biom, ___bwrite) \
      AROS_LC2(int, BIO_meth_set_write_ex, \
 AROS_LCA(BIO_METHOD *, (___biom), A0), \
 AROS_LCA(int (*)(BIO *,const char *,size_t,size_t *), (___bwrite), A1), \
     struct Library *, AMISSL_BASE_NAME, 5033, Amissl)

#define EVP_PKEY_CTX_md(___ctx, ___optype, ___cmd, ___md) \
      AROS_LC4(int, EVP_PKEY_CTX_md, \
 AROS_LCA(EVP_PKEY_CTX *, (___ctx), A0), \
 AROS_LCA(int, (___optype), D0), \
 AROS_LCA(int, (___cmd), D1), \
 AROS_LCA(const char *, (___md), A1), \
     struct Library *, AMISSL_BASE_NAME, 5034, Amissl)

#define RSA_pkey_ctx_ctrl(___ctx, ___optype, ___cmd, ___p1, ___p2) \
      AROS_LC5(int, RSA_pkey_ctx_ctrl, \
 AROS_LCA(EVP_PKEY_CTX *, (___ctx), A0), \
 AROS_LCA(int, (___optype), D0), \
 AROS_LCA(int, (___cmd), D1), \
 AROS_LCA(int, (___p1), D2), \
 AROS_LCA(void *, (___p2), A1), \
     struct Library *, AMISSL_BASE_NAME, 5035, Amissl)

#define UI_method_set_ex_data(___method, ___idx, ___data) \
      AROS_LC3(int, UI_method_set_ex_data, \
 AROS_LCA(UI_METHOD *, (___method), A0), \
 AROS_LCA(int, (___idx), D0), \
 AROS_LCA(void *, (___data), A1), \
     struct Library *, AMISSL_BASE_NAME, 5036, Amissl)

#define UI_method_get_ex_data(___method, ___idx) \
      AROS_LC2(const void *, UI_method_get_ex_data, \
 AROS_LCA(const UI_METHOD *, (___method), A0), \
 AROS_LCA(int, (___idx), D0), \
     struct Library *, AMISSL_BASE_NAME, 5037, Amissl)

#define UI_UTIL_wrap_read_pem_callback(___cb, ___rwflag) \
      AROS_LC2(UI_METHOD *, UI_UTIL_wrap_read_pem_callback, \
 AROS_LCA(pem_password_cb *, (___cb), A0), \
 AROS_LCA(int, (___rwflag), D0), \
     struct Library *, AMISSL_BASE_NAME, 5038, Amissl)

#define EVP_PKEY_get0_poly1305(___pkey, ___len) \
      AROS_LC2(const unsigned char *, EVP_PKEY_get0_poly1305, \
 AROS_LCA(const EVP_PKEY *, (___pkey), A0), \
 AROS_LCA(size_t *, (___len), A1), \
     struct Library *, AMISSL_BASE_NAME, 5039, Amissl)

#define EVP_PKEY_get0_siphash(___pkey, ___len) \
      AROS_LC2(const unsigned char *, EVP_PKEY_get0_siphash, \
 AROS_LCA(const EVP_PKEY *, (___pkey), A0), \
 AROS_LCA(size_t *, (___len), A1), \
     struct Library *, AMISSL_BASE_NAME, 5040, Amissl)

#define EVP_aria_256_ofb() \
      AROS_LC0(const EVP_CIPHER *, EVP_aria_256_ofb, \
     struct Library *, AMISSL_BASE_NAME, 5041, Amissl)

#define EVP_aria_256_cfb128() \
      AROS_LC0(const EVP_CIPHER *, EVP_aria_256_cfb128, \
     struct Library *, AMISSL_BASE_NAME, 5042, Amissl)

#define EVP_aria_128_cfb1() \
      AROS_LC0(const EVP_CIPHER *, EVP_aria_128_cfb1, \
     struct Library *, AMISSL_BASE_NAME, 5043, Amissl)

#define EVP_aria_128_ecb() \
      AROS_LC0(const EVP_CIPHER *, EVP_aria_128_ecb, \
     struct Library *, AMISSL_BASE_NAME, 5044, Amissl)

#define EVP_aria_128_cfb128() \
      AROS_LC0(const EVP_CIPHER *, EVP_aria_128_cfb128, \
     struct Library *, AMISSL_BASE_NAME, 5045, Amissl)

#define EVP_aria_192_ecb() \
      AROS_LC0(const EVP_CIPHER *, EVP_aria_192_ecb, \
     struct Library *, AMISSL_BASE_NAME, 5046, Amissl)

#define EVP_aria_128_cbc() \
      AROS_LC0(const EVP_CIPHER *, EVP_aria_128_cbc, \
     struct Library *, AMISSL_BASE_NAME, 5047, Amissl)

#define EVP_aria_192_ofb() \
      AROS_LC0(const EVP_CIPHER *, EVP_aria_192_ofb, \
     struct Library *, AMISSL_BASE_NAME, 5048, Amissl)

#define EVP_aria_192_cbc() \
      AROS_LC0(const EVP_CIPHER *, EVP_aria_192_cbc, \
     struct Library *, AMISSL_BASE_NAME, 5049, Amissl)

#define EVP_aria_192_cfb1() \
      AROS_LC0(const EVP_CIPHER *, EVP_aria_192_cfb1, \
     struct Library *, AMISSL_BASE_NAME, 5050, Amissl)

#define EVP_aria_128_cfb8() \
      AROS_LC0(const EVP_CIPHER *, EVP_aria_128_cfb8, \
     struct Library *, AMISSL_BASE_NAME, 5051, Amissl)

#define EVP_aria_256_cfb1() \
      AROS_LC0(const EVP_CIPHER *, EVP_aria_256_cfb1, \
     struct Library *, AMISSL_BASE_NAME, 5052, Amissl)

#define EVP_aria_192_cfb8() \
      AROS_LC0(const EVP_CIPHER *, EVP_aria_192_cfb8, \
     struct Library *, AMISSL_BASE_NAME, 5053, Amissl)

#define EVP_aria_256_cfb8() \
      AROS_LC0(const EVP_CIPHER *, EVP_aria_256_cfb8, \
     struct Library *, AMISSL_BASE_NAME, 5054, Amissl)

#define EVP_aria_256_cbc() \
      AROS_LC0(const EVP_CIPHER *, EVP_aria_256_cbc, \
     struct Library *, AMISSL_BASE_NAME, 5055, Amissl)

#define EVP_aria_128_ofb() \
      AROS_LC0(const EVP_CIPHER *, EVP_aria_128_ofb, \
     struct Library *, AMISSL_BASE_NAME, 5056, Amissl)

#define EVP_aria_192_cfb128() \
      AROS_LC0(const EVP_CIPHER *, EVP_aria_192_cfb128, \
     struct Library *, AMISSL_BASE_NAME, 5057, Amissl)

#define EVP_aria_256_ecb() \
      AROS_LC0(const EVP_CIPHER *, EVP_aria_256_ecb, \
     struct Library *, AMISSL_BASE_NAME, 5058, Amissl)

#define EVP_aria_256_ctr() \
      AROS_LC0(const EVP_CIPHER *, EVP_aria_256_ctr, \
     struct Library *, AMISSL_BASE_NAME, 5059, Amissl)

#define EVP_aria_128_ctr() \
      AROS_LC0(const EVP_CIPHER *, EVP_aria_128_ctr, \
     struct Library *, AMISSL_BASE_NAME, 5060, Amissl)

#define EVP_aria_192_ctr() \
      AROS_LC0(const EVP_CIPHER *, EVP_aria_192_ctr, \
     struct Library *, AMISSL_BASE_NAME, 5061, Amissl)

#define UI_null() \
      AROS_LC0(const UI_METHOD *, UI_null, \
     struct Library *, AMISSL_BASE_NAME, 5062, Amissl)

#define EC_KEY_get0_engine(___eckey) \
      AROS_LC1(ENGINE *, EC_KEY_get0_engine, \
 AROS_LCA(const EC_KEY *, (___eckey), A0), \
     struct Library *, AMISSL_BASE_NAME, 5063, Amissl)

#define INT32_it() \
      AROS_LC0(const ASN1_ITEM *, INT32_it, \
     struct Library *, AMISSL_BASE_NAME, 5064, Amissl)

#define UINT64_it() \
      AROS_LC0(const ASN1_ITEM *, UINT64_it, \
     struct Library *, AMISSL_BASE_NAME, 5065, Amissl)

#define ZINT32_it() \
      AROS_LC0(const ASN1_ITEM *, ZINT32_it, \
     struct Library *, AMISSL_BASE_NAME, 5066, Amissl)

#define ZUINT64_it() \
      AROS_LC0(const ASN1_ITEM *, ZUINT64_it, \
     struct Library *, AMISSL_BASE_NAME, 5067, Amissl)

#define INT64_it() \
      AROS_LC0(const ASN1_ITEM *, INT64_it, \
     struct Library *, AMISSL_BASE_NAME, 5068, Amissl)

#define ZUINT32_it() \
      AROS_LC0(const ASN1_ITEM *, ZUINT32_it, \
     struct Library *, AMISSL_BASE_NAME, 5069, Amissl)

#define UINT32_it() \
      AROS_LC0(const ASN1_ITEM *, UINT32_it, \
     struct Library *, AMISSL_BASE_NAME, 5070, Amissl)

#define ZINT64_it() \
      AROS_LC0(const ASN1_ITEM *, ZINT64_it, \
     struct Library *, AMISSL_BASE_NAME, 5071, Amissl)

#define BIO_lookup_ex(___host, ___service, ___lookup_type, ___family, ___socktype, ___protocol, ___res) \
      AROS_LC7(int, BIO_lookup_ex, \
 AROS_LCA(const char *, (___host), A0), \
 AROS_LCA(const char *, (___service), A1), \
 AROS_LCA(int, (___lookup_type), D0), \
 AROS_LCA(int, (___family), D1), \
 AROS_LCA(int, (___socktype), D2), \
 AROS_LCA(int, (___protocol), D3), \
 AROS_LCA(BIO_ADDRINFO **, (___res), A2), \
     struct Library *, AMISSL_BASE_NAME, 5072, Amissl)

#define X509_CRL_print_ex(___out, ___x, ___nmflag) \
      AROS_LC3(int, X509_CRL_print_ex, \
 AROS_LCA(BIO *, (___out), A0), \
 AROS_LCA(X509_CRL *, (___x), A1), \
 AROS_LCA(unsigned long, (___nmflag), D0), \
     struct Library *, AMISSL_BASE_NAME, 5073, Amissl)

#define X509_SIG_INFO_get(___siginf, ___mdnid, ___pknid, ___secbits, ___flags) \
      AROS_LC5(int, X509_SIG_INFO_get, \
 AROS_LCA(const X509_SIG_INFO *, (___siginf), A0), \
 AROS_LCA(int *, (___mdnid), A1), \
 AROS_LCA(int *, (___pknid), A2), \
 AROS_LCA(int *, (___secbits), A3), \
 AROS_LCA(uint32_t *, (___flags), D0), \
     struct Library *, AMISSL_BASE_NAME, 5074, Amissl)

#define X509_get_signature_info(___x, ___mdnid, ___pknid, ___secbits, ___flags) \
      AROS_LC5(int, X509_get_signature_info, \
 AROS_LCA(X509 *, (___x), A0), \
 AROS_LCA(int *, (___mdnid), A1), \
 AROS_LCA(int *, (___pknid), A2), \
 AROS_LCA(int *, (___secbits), A3), \
 AROS_LCA(uint32_t *, (___flags), D0), \
     struct Library *, AMISSL_BASE_NAME, 5075, Amissl)

#define X509_SIG_INFO_set(___siginf, ___mdnid, ___pknid, ___secbits, ___flags) \
      AROS_LC5(void, X509_SIG_INFO_set, \
 AROS_LCA(X509_SIG_INFO *, (___siginf), A0), \
 AROS_LCA(int, (___mdnid), D0), \
 AROS_LCA(int, (___pknid), D1), \
 AROS_LCA(int, (___secbits), D2), \
 AROS_LCA(uint32_t, (___flags), D3), \
     struct Library *, AMISSL_BASE_NAME, 5076, Amissl)

#define ESS_CERT_ID_V2_free(___a) \
      AROS_LC1(void, ESS_CERT_ID_V2_free, \
 AROS_LCA(ESS_CERT_ID_V2 *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 5077, Amissl)

#define ESS_SIGNING_CERT_V2_new() \
      AROS_LC0(ESS_SIGNING_CERT_V2 *, ESS_SIGNING_CERT_V2_new, \
     struct Library *, AMISSL_BASE_NAME, 5078, Amissl)

#define d2i_ESS_SIGNING_CERT_V2(___a, ___pp, ___length) \
      AROS_LC3(ESS_SIGNING_CERT_V2 *, d2i_ESS_SIGNING_CERT_V2, \
 AROS_LCA(ESS_SIGNING_CERT_V2 **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___pp), A1), \
 AROS_LCA(long, (___length), D0), \
     struct Library *, AMISSL_BASE_NAME, 5079, Amissl)

#define i2d_ESS_CERT_ID_V2(___a, ___pp) \
      AROS_LC2(int, i2d_ESS_CERT_ID_V2, \
 AROS_LCA(const ESS_CERT_ID_V2 *, (___a), A0), \
 AROS_LCA(unsigned char **, (___pp), A1), \
     struct Library *, AMISSL_BASE_NAME, 5080, Amissl)

#define ESS_CERT_ID_V2_dup(___a) \
      AROS_LC1(ESS_CERT_ID_V2 *, ESS_CERT_ID_V2_dup, \
 AROS_LCA(const ESS_CERT_ID_V2 *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 5081, Amissl)

#define TS_RESP_CTX_set_ess_cert_id_digest(___ctx, ___md) \
      AROS_LC2(int, TS_RESP_CTX_set_ess_cert_id_digest, \
 AROS_LCA(TS_RESP_CTX *, (___ctx), A0), \
 AROS_LCA(const EVP_MD *, (___md), A1), \
     struct Library *, AMISSL_BASE_NAME, 5082, Amissl)

#define d2i_ESS_CERT_ID_V2(___a, ___pp, ___length) \
      AROS_LC3(ESS_CERT_ID_V2 *, d2i_ESS_CERT_ID_V2, \
 AROS_LCA(ESS_CERT_ID_V2 **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___pp), A1), \
 AROS_LCA(long, (___length), D0), \
     struct Library *, AMISSL_BASE_NAME, 5083, Amissl)

#define i2d_ESS_SIGNING_CERT_V2(___a, ___pp) \
      AROS_LC2(int, i2d_ESS_SIGNING_CERT_V2, \
 AROS_LCA(const ESS_SIGNING_CERT_V2 *, (___a), A0), \
 AROS_LCA(unsigned char **, (___pp), A1), \
     struct Library *, AMISSL_BASE_NAME, 5084, Amissl)

#define TS_CONF_set_ess_cert_id_digest(___conf, ___section, ___ctx) \
      AROS_LC3(int, TS_CONF_set_ess_cert_id_digest, \
 AROS_LCA(CONF *, (___conf), A0), \
 AROS_LCA(const char *, (___section), A1), \
 AROS_LCA(TS_RESP_CTX *, (___ctx), A2), \
     struct Library *, AMISSL_BASE_NAME, 5085, Amissl)

#define ESS_SIGNING_CERT_V2_free(___a) \
      AROS_LC1(void, ESS_SIGNING_CERT_V2_free, \
 AROS_LCA(ESS_SIGNING_CERT_V2 *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 5086, Amissl)

#define ESS_SIGNING_CERT_V2_dup(___a) \
      AROS_LC1(ESS_SIGNING_CERT_V2 *, ESS_SIGNING_CERT_V2_dup, \
 AROS_LCA(const ESS_SIGNING_CERT_V2 *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 5087, Amissl)

#define ESS_CERT_ID_V2_new() \
      AROS_LC0(ESS_CERT_ID_V2 *, ESS_CERT_ID_V2_new, \
     struct Library *, AMISSL_BASE_NAME, 5088, Amissl)

#define PEM_read_bio_ex(___bp, ___name, ___header, ___data, ___len, ___flags) \
      AROS_LC6(int, PEM_read_bio_ex, \
 AROS_LCA(BIO *, (___bp), A0), \
 AROS_LCA(char **, (___name), A1), \
 AROS_LCA(char **, (___header), A2), \
 AROS_LCA(unsigned char **, (___data), A3), \
 AROS_LCA(long *, (___len), D0), \
 AROS_LCA(unsigned int, (___flags), D1), \
     struct Library *, AMISSL_BASE_NAME, 5089, Amissl)

#define PEM_bytes_read_bio_secmem(___pdata, ___plen, ___pnm, ___name, ___bp, ___cb, ___u) \
      AROS_LC7(int, PEM_bytes_read_bio_secmem, \
 AROS_LCA(unsigned char **, (___pdata), A0), \
 AROS_LCA(long *, (___plen), A1), \
 AROS_LCA(char **, (___pnm), A2), \
 AROS_LCA(const char *, (___name), A3), \
 AROS_LCA(BIO *, (___bp), D0), \
 AROS_LCA(pem_password_cb *, (___cb), D1), \
 AROS_LCA(void *, (___u), D2), \
     struct Library *, AMISSL_BASE_NAME, 5090, Amissl)

#define EVP_DigestSign(___ctx, ___sigret, ___siglen, ___tbs, ___tbslen) \
      AROS_LC5(int, EVP_DigestSign, \
 AROS_LCA(EVP_MD_CTX *, (___ctx), A0), \
 AROS_LCA(unsigned char *, (___sigret), A1), \
 AROS_LCA(size_t *, (___siglen), A2), \
 AROS_LCA(const unsigned char *, (___tbs), A3), \
 AROS_LCA(size_t, (___tbslen), D0), \
     struct Library *, AMISSL_BASE_NAME, 5091, Amissl)

#define EVP_DigestVerify(___ctx, ___sigret, ___siglen, ___tbs, ___tbslen) \
      AROS_LC5(int, EVP_DigestVerify, \
 AROS_LCA(EVP_MD_CTX *, (___ctx), A0), \
 AROS_LCA(const unsigned char *, (___sigret), A1), \
 AROS_LCA(size_t, (___siglen), D0), \
 AROS_LCA(const unsigned char *, (___tbs), A2), \
 AROS_LCA(size_t, (___tbslen), D1), \
     struct Library *, AMISSL_BASE_NAME, 5092, Amissl)

#define UI_method_get_data_duplicator(___method) \
      AROS_LC1(void *(*)(UI *, void *), UI_method_get_data_duplicator, \
 AROS_LCA(const UI_METHOD *, (___method), A0), \
     struct Library *, AMISSL_BASE_NAME, 5093, Amissl)

#define UI_method_set_data_duplicator(___method, ___duplicator, ___destructor) \
      AROS_LC3(int, UI_method_set_data_duplicator, \
 AROS_LCA(UI_METHOD *, (___method), A0), \
 AROS_LCA(void *(*)(UI *ui,void *ui_data), (___duplicator), A1), \
 AROS_LCA(void (*)(UI *ui,void *ui_data), (___destructor), A2), \
     struct Library *, AMISSL_BASE_NAME, 5094, Amissl)

#define UI_dup_user_data(___ui, ___user_data) \
      AROS_LC2(int, UI_dup_user_data, \
 AROS_LCA(UI *, (___ui), A0), \
 AROS_LCA(void *, (___user_data), A1), \
     struct Library *, AMISSL_BASE_NAME, 5095, Amissl)

#define UI_method_get_data_destructor(___method) \
      AROS_LC1(void (*)(UI *, void *), UI_method_get_data_destructor, \
 AROS_LCA(const UI_METHOD *, (___method), A0), \
     struct Library *, AMISSL_BASE_NAME, 5096, Amissl)

#define ERR_load_strings_const(___str) \
      AROS_LC1(int, ERR_load_strings_const, \
 AROS_LCA(const ERR_STRING_DATA *, (___str), A0), \
     struct Library *, AMISSL_BASE_NAME, 5097, Amissl)

#define ASN1_TIME_to_tm(___s, ___tm) \
      AROS_LC2(int, ASN1_TIME_to_tm, \
 AROS_LCA(const ASN1_TIME *, (___s), A0), \
 AROS_LCA(struct tm *, (___tm), A1), \
     struct Library *, AMISSL_BASE_NAME, 5098, Amissl)

#define ASN1_TIME_set_string_X509(___s, ___str) \
      AROS_LC2(int, ASN1_TIME_set_string_X509, \
 AROS_LCA(ASN1_TIME *, (___s), A0), \
 AROS_LCA(const char *, (___str), A1), \
     struct Library *, AMISSL_BASE_NAME, 5099, Amissl)

#define OCSP_resp_get1_id(___bs, ___pid, ___pname) \
      AROS_LC3(int, OCSP_resp_get1_id, \
 AROS_LCA(const OCSP_BASICRESP *, (___bs), A0), \
 AROS_LCA(ASN1_OCTET_STRING **, (___pid), A1), \
 AROS_LCA(X509_NAME **, (___pname), A2), \
     struct Library *, AMISSL_BASE_NAME, 5100, Amissl)

#define OSSL_STORE_register_loader(___loader) \
      AROS_LC1(int, OSSL_STORE_register_loader, \
 AROS_LCA(OSSL_STORE_LOADER *, (___loader), A0), \
     struct Library *, AMISSL_BASE_NAME, 5101, Amissl)

#define OSSL_STORE_LOADER_set_error(___loader, ___error_function) \
      AROS_LC2(int, OSSL_STORE_LOADER_set_error, \
 AROS_LCA(OSSL_STORE_LOADER *, (___loader), A0), \
 AROS_LCA(OSSL_STORE_error_fn, (___error_function), A1), \
     struct Library *, AMISSL_BASE_NAME, 5102, Amissl)

#define OSSL_STORE_INFO_get0_PKEY(___info) \
      AROS_LC1(EVP_PKEY *, OSSL_STORE_INFO_get0_PKEY, \
 AROS_LCA(const OSSL_STORE_INFO *, (___info), A0), \
     struct Library *, AMISSL_BASE_NAME, 5103, Amissl)

#define OSSL_STORE_INFO_get_type(___info) \
      AROS_LC1(int, OSSL_STORE_INFO_get_type, \
 AROS_LCA(const OSSL_STORE_INFO *, (___info), A0), \
     struct Library *, AMISSL_BASE_NAME, 5104, Amissl)

#define ERR_load_OSSL_STORE_strings() \
      AROS_LC0(int, ERR_load_OSSL_STORE_strings, \
     struct Library *, AMISSL_BASE_NAME, 5105, Amissl)

#define OSSL_STORE_LOADER_free(___loader) \
      AROS_LC1(void, OSSL_STORE_LOADER_free, \
 AROS_LCA(OSSL_STORE_LOADER *, (___loader), A0), \
     struct Library *, AMISSL_BASE_NAME, 5106, Amissl)

#define OSSL_STORE_INFO_get1_PKEY(___info) \
      AROS_LC1(EVP_PKEY *, OSSL_STORE_INFO_get1_PKEY, \
 AROS_LCA(const OSSL_STORE_INFO *, (___info), A0), \
     struct Library *, AMISSL_BASE_NAME, 5107, Amissl)

#define OSSL_STORE_INFO_free(___info) \
      AROS_LC1(void, OSSL_STORE_INFO_free, \
 AROS_LCA(OSSL_STORE_INFO *, (___info), A0), \
     struct Library *, AMISSL_BASE_NAME, 5108, Amissl)

#define OSSL_STORE_LOADER_set_eof(___loader, ___eof_function) \
      AROS_LC2(int, OSSL_STORE_LOADER_set_eof, \
 AROS_LCA(OSSL_STORE_LOADER *, (___loader), A0), \
 AROS_LCA(OSSL_STORE_eof_fn, (___eof_function), A1), \
     struct Library *, AMISSL_BASE_NAME, 5109, Amissl)

#define OSSL_STORE_LOADER_new(___e, ___scheme) \
      AROS_LC2(OSSL_STORE_LOADER *, OSSL_STORE_LOADER_new, \
 AROS_LCA(ENGINE *, (___e), A0), \
 AROS_LCA(const char *, (___scheme), A1), \
     struct Library *, AMISSL_BASE_NAME, 5110, Amissl)

#define OSSL_STORE_INFO_get0_CERT(___info) \
      AROS_LC1(X509 *, OSSL_STORE_INFO_get0_CERT, \
 AROS_LCA(const OSSL_STORE_INFO *, (___info), A0), \
     struct Library *, AMISSL_BASE_NAME, 5111, Amissl)

#define OSSL_STORE_LOADER_set_close(___loader, ___close_function) \
      AROS_LC2(int, OSSL_STORE_LOADER_set_close, \
 AROS_LCA(OSSL_STORE_LOADER *, (___loader), A0), \
 AROS_LCA(OSSL_STORE_close_fn, (___close_function), A1), \
     struct Library *, AMISSL_BASE_NAME, 5112, Amissl)

#define OSSL_STORE_INFO_new_PARAMS(___params) \
      AROS_LC1(OSSL_STORE_INFO *, OSSL_STORE_INFO_new_PARAMS, \
 AROS_LCA(EVP_PKEY *, (___params), A0), \
     struct Library *, AMISSL_BASE_NAME, 5113, Amissl)

#define OSSL_STORE_INFO_new_PKEY(___pkey) \
      AROS_LC1(OSSL_STORE_INFO *, OSSL_STORE_INFO_new_PKEY, \
 AROS_LCA(EVP_PKEY *, (___pkey), A0), \
     struct Library *, AMISSL_BASE_NAME, 5114, Amissl)

#define OSSL_STORE_INFO_get1_PARAMS(___info) \
      AROS_LC1(EVP_PKEY *, OSSL_STORE_INFO_get1_PARAMS, \
 AROS_LCA(const OSSL_STORE_INFO *, (___info), A0), \
     struct Library *, AMISSL_BASE_NAME, 5115, Amissl)

#define OSSL_STORE_INFO_get1_CRL(___info) \
      AROS_LC1(X509_CRL *, OSSL_STORE_INFO_get1_CRL, \
 AROS_LCA(const OSSL_STORE_INFO *, (___info), A0), \
     struct Library *, AMISSL_BASE_NAME, 5116, Amissl)

#define OSSL_STORE_error(___ctx) \
      AROS_LC1(int, OSSL_STORE_error, \
 AROS_LCA(OSSL_STORE_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 5117, Amissl)

#define OSSL_STORE_INFO_get1_CERT(___info) \
      AROS_LC1(X509 *, OSSL_STORE_INFO_get1_CERT, \
 AROS_LCA(const OSSL_STORE_INFO *, (___info), A0), \
     struct Library *, AMISSL_BASE_NAME, 5118, Amissl)

#define OSSL_STORE_INFO_get0_PARAMS(___info) \
      AROS_LC1(EVP_PKEY *, OSSL_STORE_INFO_get0_PARAMS, \
 AROS_LCA(const OSSL_STORE_INFO *, (___info), A0), \
     struct Library *, AMISSL_BASE_NAME, 5119, Amissl)

#define OSSL_STORE_INFO_type_string(___type) \
      AROS_LC1(const char *, OSSL_STORE_INFO_type_string, \
 AROS_LCA(int, (___type), D0), \
     struct Library *, AMISSL_BASE_NAME, 5120, Amissl)

#define OSSL_STORE_INFO_get1_NAME(___info) \
      AROS_LC1(char *, OSSL_STORE_INFO_get1_NAME, \
 AROS_LCA(const OSSL_STORE_INFO *, (___info), A0), \
     struct Library *, AMISSL_BASE_NAME, 5121, Amissl)

#define OSSL_STORE_LOADER_set_load(___loader, ___load_function) \
      AROS_LC2(int, OSSL_STORE_LOADER_set_load, \
 AROS_LCA(OSSL_STORE_LOADER *, (___loader), A0), \
 AROS_LCA(OSSL_STORE_load_fn, (___load_function), A1), \
     struct Library *, AMISSL_BASE_NAME, 5122, Amissl)

#define OSSL_STORE_LOADER_get0_scheme(___loader) \
      AROS_LC1(const char *, OSSL_STORE_LOADER_get0_scheme, \
 AROS_LCA(const OSSL_STORE_LOADER *, (___loader), A0), \
     struct Library *, AMISSL_BASE_NAME, 5123, Amissl)

#define OSSL_STORE_open(___uri, ___ui_method, ___ui_data, ___post_process, ___post_process_data) \
      AROS_LC5(OSSL_STORE_CTX *, OSSL_STORE_open, \
 AROS_LCA(const char *, (___uri), A0), \
 AROS_LCA(const UI_METHOD *, (___ui_method), A1), \
 AROS_LCA(void *, (___ui_data), A2), \
 AROS_LCA(OSSL_STORE_post_process_info_fn, (___post_process), A3), \
 AROS_LCA(void *, (___post_process_data), D0), \
     struct Library *, AMISSL_BASE_NAME, 5124, Amissl)

#define OSSL_STORE_close(___ctx) \
      AROS_LC1(int, OSSL_STORE_close, \
 AROS_LCA(OSSL_STORE_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 5125, Amissl)

#define OSSL_STORE_INFO_new_CERT(___x509) \
      AROS_LC1(OSSL_STORE_INFO *, OSSL_STORE_INFO_new_CERT, \
 AROS_LCA(X509 *, (___x509), A0), \
     struct Library *, AMISSL_BASE_NAME, 5126, Amissl)

#define OSSL_STORE_INFO_get0_CRL(___info) \
      AROS_LC1(X509_CRL *, OSSL_STORE_INFO_get0_CRL, \
 AROS_LCA(const OSSL_STORE_INFO *, (___info), A0), \
     struct Library *, AMISSL_BASE_NAME, 5127, Amissl)

#define OSSL_STORE_load(___ctx) \
      AROS_LC1(OSSL_STORE_INFO *, OSSL_STORE_load, \
 AROS_LCA(OSSL_STORE_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 5128, Amissl)

#define OSSL_STORE_INFO_get0_NAME(___info) \
      AROS_LC1(const char *, OSSL_STORE_INFO_get0_NAME, \
 AROS_LCA(const OSSL_STORE_INFO *, (___info), A0), \
     struct Library *, AMISSL_BASE_NAME, 5129, Amissl)

#define OSSL_STORE_unregister_loader(___scheme) \
      AROS_LC1(OSSL_STORE_LOADER *, OSSL_STORE_unregister_loader, \
 AROS_LCA(const char *, (___scheme), A0), \
     struct Library *, AMISSL_BASE_NAME, 5130, Amissl)

#define OSSL_STORE_INFO_new_CRL(___crl) \
      AROS_LC1(OSSL_STORE_INFO *, OSSL_STORE_INFO_new_CRL, \
 AROS_LCA(X509_CRL *, (___crl), A0), \
     struct Library *, AMISSL_BASE_NAME, 5131, Amissl)

#define OSSL_STORE_INFO_new_NAME(___name) \
      AROS_LC1(OSSL_STORE_INFO *, OSSL_STORE_INFO_new_NAME, \
 AROS_LCA(char *, (___name), A0), \
     struct Library *, AMISSL_BASE_NAME, 5132, Amissl)

#define OSSL_STORE_eof(___ctx) \
      AROS_LC1(int, OSSL_STORE_eof, \
 AROS_LCA(OSSL_STORE_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 5133, Amissl)

#define OSSL_STORE_LOADER_set_open(___loader, ___open_function) \
      AROS_LC2(int, OSSL_STORE_LOADER_set_open, \
 AROS_LCA(OSSL_STORE_LOADER *, (___loader), A0), \
 AROS_LCA(OSSL_STORE_open_fn, (___open_function), A1), \
     struct Library *, AMISSL_BASE_NAME, 5134, Amissl)

#define OSSL_STORE_LOADER_set_ctrl(___loader, ___ctrl_function) \
      AROS_LC2(int, OSSL_STORE_LOADER_set_ctrl, \
 AROS_LCA(OSSL_STORE_LOADER *, (___loader), A0), \
 AROS_LCA(OSSL_STORE_ctrl_fn, (___ctrl_function), A1), \
     struct Library *, AMISSL_BASE_NAME, 5135, Amissl)

#define OSSL_STORE_vctrl(___ctx, ___cmd, ___args) \
      AROS_LC3(int, OSSL_STORE_vctrl, \
 AROS_LCA(OSSL_STORE_CTX *, (___ctx), A0), \
 AROS_LCA(int, (___cmd), D0), \
 AROS_LCA(va_list, (___args), A1), \
     struct Library *, AMISSL_BASE_NAME, 5136, Amissl)

#ifndef NO_INLINE_VARARGS
#define OSSL_STORE_ctrl(___ctx, ___cmd, ___dummy, ...) \
    ({_sfdc_vararg _message[] = { ___dummy, __VA_ARGS__ }; OSSL_STORE_vctrl((___ctx), (___cmd), (va_list) _message); })
#endif /* !NO_INLINE_VARARGS */

#define OSSL_STORE_INFO_get0_NAME_description(___info) \
      AROS_LC1(const char *, OSSL_STORE_INFO_get0_NAME_description, \
 AROS_LCA(const OSSL_STORE_INFO *, (___info), A0), \
     struct Library *, AMISSL_BASE_NAME, 5137, Amissl)

#define OSSL_STORE_INFO_set0_NAME_description(___info, ___desc) \
      AROS_LC2(int, OSSL_STORE_INFO_set0_NAME_description, \
 AROS_LCA(OSSL_STORE_INFO *, (___info), A0), \
 AROS_LCA(char *, (___desc), A1), \
     struct Library *, AMISSL_BASE_NAME, 5138, Amissl)

#define OSSL_STORE_INFO_get1_NAME_description(___info) \
      AROS_LC1(char *, OSSL_STORE_INFO_get1_NAME_description, \
 AROS_LCA(const OSSL_STORE_INFO *, (___info), A0), \
     struct Library *, AMISSL_BASE_NAME, 5139, Amissl)

#define OSSL_STORE_do_all_loaders(___do_function, ___do_arg) \
      AROS_LC2(int, OSSL_STORE_do_all_loaders, \
 AROS_LCA(void (*)(const OSSL_STORE_LOADER *loader,void *do_arg), (___do_function), A0), \
 AROS_LCA(void *, (___do_arg), A1), \
     struct Library *, AMISSL_BASE_NAME, 5140, Amissl)

#define OSSL_STORE_LOADER_get0_engine(___loader) \
      AROS_LC1(const ENGINE *, OSSL_STORE_LOADER_get0_engine, \
 AROS_LCA(const OSSL_STORE_LOADER *, (___loader), A0), \
     struct Library *, AMISSL_BASE_NAME, 5141, Amissl)

#define EVP_sha3_224() \
      AROS_LC0(const EVP_MD *, EVP_sha3_224, \
     struct Library *, AMISSL_BASE_NAME, 5153, Amissl)

#define EVP_sha3_256() \
      AROS_LC0(const EVP_MD *, EVP_sha3_256, \
     struct Library *, AMISSL_BASE_NAME, 5154, Amissl)

#define EVP_sha3_384() \
      AROS_LC0(const EVP_MD *, EVP_sha3_384, \
     struct Library *, AMISSL_BASE_NAME, 5155, Amissl)

#define EVP_sha3_512() \
      AROS_LC0(const EVP_MD *, EVP_sha3_512, \
     struct Library *, AMISSL_BASE_NAME, 5156, Amissl)

#define EVP_shake128() \
      AROS_LC0(const EVP_MD *, EVP_shake128, \
     struct Library *, AMISSL_BASE_NAME, 5157, Amissl)

#define EVP_shake256() \
      AROS_LC0(const EVP_MD *, EVP_shake256, \
     struct Library *, AMISSL_BASE_NAME, 5158, Amissl)

#define SCRYPT_PARAMS_new() \
      AROS_LC0(SCRYPT_PARAMS *, SCRYPT_PARAMS_new, \
     struct Library *, AMISSL_BASE_NAME, 5159, Amissl)

#define SCRYPT_PARAMS_free(___a) \
      AROS_LC1(void, SCRYPT_PARAMS_free, \
 AROS_LCA(SCRYPT_PARAMS *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 5160, Amissl)

#define i2d_SCRYPT_PARAMS(___a, ___out) \
      AROS_LC2(int, i2d_SCRYPT_PARAMS, \
 AROS_LCA(const SCRYPT_PARAMS *, (___a), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 5161, Amissl)

#define d2i_SCRYPT_PARAMS(___a, ___in, ___len) \
      AROS_LC3(SCRYPT_PARAMS *, d2i_SCRYPT_PARAMS, \
 AROS_LCA(SCRYPT_PARAMS **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 5162, Amissl)

#define SCRYPT_PARAMS_it() \
      AROS_LC0(const ASN1_ITEM *, SCRYPT_PARAMS_it, \
     struct Library *, AMISSL_BASE_NAME, 5163, Amissl)

#define EVP_PKEY_meth_get0(___idx) \
      AROS_LC1(const EVP_PKEY_METHOD *, EVP_PKEY_meth_get0, \
 AROS_LCA(size_t, (___idx), D0), \
     struct Library *, AMISSL_BASE_NAME, 5164, Amissl)

#define EVP_PKEY_meth_get_count() \
      AROS_LC0(size_t, EVP_PKEY_meth_get_count, \
     struct Library *, AMISSL_BASE_NAME, 5165, Amissl)

#define RAND_priv_bytes(___buf, ___num) \
      AROS_LC2(int, RAND_priv_bytes, \
 AROS_LCA(unsigned char *, (___buf), A0), \
 AROS_LCA(int, (___num), D0), \
     struct Library *, AMISSL_BASE_NAME, 5167, Amissl)

#define BN_priv_rand(___rnd, ___bits, ___top, ___bottom) \
      AROS_LC4(int, BN_priv_rand, \
 AROS_LCA(BIGNUM *, (___rnd), A0), \
 AROS_LCA(int, (___bits), D0), \
 AROS_LCA(int, (___top), D1), \
 AROS_LCA(int, (___bottom), D2), \
     struct Library *, AMISSL_BASE_NAME, 5168, Amissl)

#define BN_priv_rand_range(___rnd, ___range) \
      AROS_LC2(int, BN_priv_rand_range, \
 AROS_LCA(BIGNUM *, (___rnd), A0), \
 AROS_LCA(const BIGNUM *, (___range), A1), \
     struct Library *, AMISSL_BASE_NAME, 5169, Amissl)

#define ASN1_TIME_normalize(___s) \
      AROS_LC1(int, ASN1_TIME_normalize, \
 AROS_LCA(ASN1_TIME *, (___s), A0), \
     struct Library *, AMISSL_BASE_NAME, 5170, Amissl)

#define ASN1_TIME_cmp_time_t(___s, ___t) \
      AROS_LC2(int, ASN1_TIME_cmp_time_t, \
 AROS_LCA(const ASN1_TIME *, (___s), A0), \
 AROS_LCA(time_t, (___t), D0), \
     struct Library *, AMISSL_BASE_NAME, 5171, Amissl)

#define ASN1_TIME_compare(___a, ___b) \
      AROS_LC2(int, ASN1_TIME_compare, \
 AROS_LCA(const ASN1_TIME *, (___a), A0), \
 AROS_LCA(const ASN1_TIME *, (___b), A1), \
     struct Library *, AMISSL_BASE_NAME, 5172, Amissl)

#define EVP_PKEY_CTX_ctrl_uint64(___ctx, ___keytype, ___optype, ___cmd, ___value) \
      AROS_LC5(int, EVP_PKEY_CTX_ctrl_uint64, \
 AROS_LCA(EVP_PKEY_CTX *, (___ctx), A0), \
 AROS_LCA(int, (___keytype), D0), \
 AROS_LCA(int, (___optype), D1), \
 AROS_LCA(int, (___cmd), D4), \
 AROS_LCA(uint64_t, (___value), D2), \
     struct Library *, AMISSL_BASE_NAME, 5173, Amissl)

#define EVP_DigestFinalXOF(___ctx, ___md, ___len) \
      AROS_LC3(int, EVP_DigestFinalXOF, \
 AROS_LCA(EVP_MD_CTX *, (___ctx), A0), \
 AROS_LCA(unsigned char *, (___md), A1), \
 AROS_LCA(size_t, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 5174, Amissl)

#define ERR_clear_last_mark() \
      AROS_LC0(int, ERR_clear_last_mark, \
     struct Library *, AMISSL_BASE_NAME, 5175, Amissl)

#define EVP_aria_192_ccm() \
      AROS_LC0(const EVP_CIPHER *, EVP_aria_192_ccm, \
     struct Library *, AMISSL_BASE_NAME, 5177, Amissl)

#define EVP_aria_256_gcm() \
      AROS_LC0(const EVP_CIPHER *, EVP_aria_256_gcm, \
     struct Library *, AMISSL_BASE_NAME, 5178, Amissl)

#define EVP_aria_256_ccm() \
      AROS_LC0(const EVP_CIPHER *, EVP_aria_256_ccm, \
     struct Library *, AMISSL_BASE_NAME, 5179, Amissl)

#define EVP_aria_128_gcm() \
      AROS_LC0(const EVP_CIPHER *, EVP_aria_128_gcm, \
     struct Library *, AMISSL_BASE_NAME, 5180, Amissl)

#define EVP_aria_128_ccm() \
      AROS_LC0(const EVP_CIPHER *, EVP_aria_128_ccm, \
     struct Library *, AMISSL_BASE_NAME, 5181, Amissl)

#define EVP_aria_192_gcm() \
      AROS_LC0(const EVP_CIPHER *, EVP_aria_192_gcm, \
     struct Library *, AMISSL_BASE_NAME, 5182, Amissl)

#define UI_get_result_length(___ui, ___i) \
      AROS_LC2(int, UI_get_result_length, \
 AROS_LCA(UI *, (___ui), A0), \
 AROS_LCA(int, (___i), D0), \
     struct Library *, AMISSL_BASE_NAME, 5183, Amissl)

#define UI_set_result_ex(___ui, ___uis, ___result, ___len) \
      AROS_LC4(int, UI_set_result_ex, \
 AROS_LCA(UI *, (___ui), A0), \
 AROS_LCA(UI_STRING *, (___uis), A1), \
 AROS_LCA(const char *, (___result), A2), \
 AROS_LCA(int, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 5184, Amissl)

#define UI_get_result_string_length(___uis) \
      AROS_LC1(int, UI_get_result_string_length, \
 AROS_LCA(UI_STRING *, (___uis), A0), \
     struct Library *, AMISSL_BASE_NAME, 5185, Amissl)

#define EVP_PKEY_check(___ctx) \
      AROS_LC1(int, EVP_PKEY_check, \
 AROS_LCA(EVP_PKEY_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 5186, Amissl)

#define EVP_PKEY_meth_set_check(___pmeth, ___check) \
      AROS_LC2(void, EVP_PKEY_meth_set_check, \
 AROS_LCA(EVP_PKEY_METHOD *, (___pmeth), A0), \
 AROS_LCA(int (*)(EVP_PKEY *pkey), (___check), A1), \
     struct Library *, AMISSL_BASE_NAME, 5187, Amissl)

#define EVP_PKEY_meth_get_check(___pmeth, ___pcheck) \
      AROS_LC2(void, EVP_PKEY_meth_get_check, \
 AROS_LCA(const EVP_PKEY_METHOD *, (___pmeth), A0), \
 AROS_LCA(int (**)(EVP_PKEY *pkey), (___pcheck), A1), \
     struct Library *, AMISSL_BASE_NAME, 5188, Amissl)

#define EVP_PKEY_meth_remove(___pmeth) \
      AROS_LC1(int, EVP_PKEY_meth_remove, \
 AROS_LCA(const EVP_PKEY_METHOD *, (___pmeth), A0), \
     struct Library *, AMISSL_BASE_NAME, 5189, Amissl)

#define OPENSSL_sk_reserve(___st, ___n) \
      AROS_LC2(int, OPENSSL_sk_reserve, \
 AROS_LCA(OPENSSL_STACK *, (___st), A0), \
 AROS_LCA(int, (___n), D0), \
     struct Library *, AMISSL_BASE_NAME, 5190, Amissl)

#define DH_new_by_nid(___nid) \
      AROS_LC1(DH *, DH_new_by_nid, \
 AROS_LCA(int, (___nid), D0), \
     struct Library *, AMISSL_BASE_NAME, 5191, Amissl)

#define DH_get_nid(___dh) \
      AROS_LC1(int, DH_get_nid, \
 AROS_LCA(const DH *, (___dh), A0), \
     struct Library *, AMISSL_BASE_NAME, 5192, Amissl)

#define OPENSSL_sk_new_reserve(___c, ___n) \
      AROS_LC2(OPENSSL_STACK *, OPENSSL_sk_new_reserve, \
 AROS_LCA(OPENSSL_sk_compfunc, (___c), A0), \
 AROS_LCA(int, (___n), D0), \
     struct Library *, AMISSL_BASE_NAME, 5193, Amissl)

#define EVP_PKEY_asn1_set_check(___ameth, ___pkey_check) \
      AROS_LC2(void, EVP_PKEY_asn1_set_check, \
 AROS_LCA(EVP_PKEY_ASN1_METHOD *, (___ameth), A0), \
 AROS_LCA(int (*)(const EVP_PKEY *pk), (___pkey_check), A1), \
     struct Library *, AMISSL_BASE_NAME, 5194, Amissl)

#define EVP_PKEY_asn1_set_siginf(___ameth, ___siginf_set) \
      AROS_LC2(void, EVP_PKEY_asn1_set_siginf, \
 AROS_LCA(EVP_PKEY_ASN1_METHOD *, (___ameth), A0), \
 AROS_LCA(int (*)(X509_SIG_INFO *siginf,const X509_ALGOR *alg,const ASN1_STRING *sig), (___siginf_set), A1), \
     struct Library *, AMISSL_BASE_NAME, 5195, Amissl)

#define EVP_sm4_ctr() \
      AROS_LC0(const EVP_CIPHER *, EVP_sm4_ctr, \
     struct Library *, AMISSL_BASE_NAME, 5196, Amissl)

#define EVP_sm4_cbc() \
      AROS_LC0(const EVP_CIPHER *, EVP_sm4_cbc, \
     struct Library *, AMISSL_BASE_NAME, 5197, Amissl)

#define EVP_sm4_ofb() \
      AROS_LC0(const EVP_CIPHER *, EVP_sm4_ofb, \
     struct Library *, AMISSL_BASE_NAME, 5198, Amissl)

#define EVP_sm4_ecb() \
      AROS_LC0(const EVP_CIPHER *, EVP_sm4_ecb, \
     struct Library *, AMISSL_BASE_NAME, 5199, Amissl)

#define EVP_sm4_cfb128() \
      AROS_LC0(const EVP_CIPHER *, EVP_sm4_cfb128, \
     struct Library *, AMISSL_BASE_NAME, 5200, Amissl)

#define EVP_sm3() \
      AROS_LC0(const EVP_MD *, EVP_sm3, \
     struct Library *, AMISSL_BASE_NAME, 5201, Amissl)

#define RSA_get0_multi_prime_factors(___r, ___primes) \
      AROS_LC2(int, RSA_get0_multi_prime_factors, \
 AROS_LCA(const RSA *, (___r), A0), \
 AROS_LCA(const BIGNUM **, (___primes), A1), \
     struct Library *, AMISSL_BASE_NAME, 5202, Amissl)

#define EVP_PKEY_public_check(___ctx) \
      AROS_LC1(int, EVP_PKEY_public_check, \
 AROS_LCA(EVP_PKEY_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 5203, Amissl)

#define EVP_PKEY_param_check(___ctx) \
      AROS_LC1(int, EVP_PKEY_param_check, \
 AROS_LCA(EVP_PKEY_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 5204, Amissl)

#define EVP_PKEY_meth_set_public_check(___pmeth, ___check) \
      AROS_LC2(void, EVP_PKEY_meth_set_public_check, \
 AROS_LCA(EVP_PKEY_METHOD *, (___pmeth), A0), \
 AROS_LCA(int (*)(EVP_PKEY *pkey), (___check), A1), \
     struct Library *, AMISSL_BASE_NAME, 5205, Amissl)

#define EVP_PKEY_meth_set_param_check(___pmeth, ___check) \
      AROS_LC2(void, EVP_PKEY_meth_set_param_check, \
 AROS_LCA(EVP_PKEY_METHOD *, (___pmeth), A0), \
 AROS_LCA(int (*)(EVP_PKEY *pkey), (___check), A1), \
     struct Library *, AMISSL_BASE_NAME, 5206, Amissl)

#define EVP_PKEY_meth_get_public_check(___pmeth, ___pcheck) \
      AROS_LC2(void, EVP_PKEY_meth_get_public_check, \
 AROS_LCA(const EVP_PKEY_METHOD *, (___pmeth), A0), \
 AROS_LCA(int (**)(EVP_PKEY *pkey), (___pcheck), A1), \
     struct Library *, AMISSL_BASE_NAME, 5207, Amissl)

#define EVP_PKEY_meth_get_param_check(___pmeth, ___pcheck) \
      AROS_LC2(void, EVP_PKEY_meth_get_param_check, \
 AROS_LCA(const EVP_PKEY_METHOD *, (___pmeth), A0), \
 AROS_LCA(int (**)(EVP_PKEY *pkey), (___pcheck), A1), \
     struct Library *, AMISSL_BASE_NAME, 5208, Amissl)

#define EVP_PKEY_asn1_set_public_check(___ameth, ___pkey_pub_check) \
      AROS_LC2(void, EVP_PKEY_asn1_set_public_check, \
 AROS_LCA(EVP_PKEY_ASN1_METHOD *, (___ameth), A0), \
 AROS_LCA(int (*)(const EVP_PKEY *pk), (___pkey_pub_check), A1), \
     struct Library *, AMISSL_BASE_NAME, 5209, Amissl)

#define EVP_PKEY_asn1_set_param_check(___ameth, ___pkey_param_check) \
      AROS_LC2(void, EVP_PKEY_asn1_set_param_check, \
 AROS_LCA(EVP_PKEY_ASN1_METHOD *, (___ameth), A0), \
 AROS_LCA(int (*)(const EVP_PKEY *pk), (___pkey_param_check), A1), \
     struct Library *, AMISSL_BASE_NAME, 5210, Amissl)

#define DH_check_ex(___dh) \
      AROS_LC1(int, DH_check_ex, \
 AROS_LCA(const DH *, (___dh), A0), \
     struct Library *, AMISSL_BASE_NAME, 5211, Amissl)

#define DH_check_pub_key_ex(___dh, ___pub_key) \
      AROS_LC2(int, DH_check_pub_key_ex, \
 AROS_LCA(const DH *, (___dh), A0), \
 AROS_LCA(const BIGNUM *, (___pub_key), A1), \
     struct Library *, AMISSL_BASE_NAME, 5212, Amissl)

#define DH_check_params_ex(___dh) \
      AROS_LC1(int, DH_check_params_ex, \
 AROS_LCA(const DH *, (___dh), A0), \
     struct Library *, AMISSL_BASE_NAME, 5213, Amissl)

#define RSA_generate_multi_prime_key(___rsa, ___bits, ___primes, ___e, ___cb) \
      AROS_LC5(int, RSA_generate_multi_prime_key, \
 AROS_LCA(RSA *, (___rsa), A0), \
 AROS_LCA(int, (___bits), D0), \
 AROS_LCA(int, (___primes), D1), \
 AROS_LCA(BIGNUM *, (___e), A1), \
 AROS_LCA(BN_GENCB *, (___cb), A2), \
     struct Library *, AMISSL_BASE_NAME, 5214, Amissl)

#define RSA_get_multi_prime_extra_count(___r) \
      AROS_LC1(int, RSA_get_multi_prime_extra_count, \
 AROS_LCA(const RSA *, (___r), A0), \
     struct Library *, AMISSL_BASE_NAME, 5215, Amissl)

#define OCSP_resp_get0_signer(___bs, ___signer, ___extra_certs) \
      AROS_LC3(int, OCSP_resp_get0_signer, \
 AROS_LCA(OCSP_BASICRESP *, (___bs), A0), \
 AROS_LCA(X509 **, (___signer), A1), \
 AROS_LCA(STACK_OF(X509) *, (___extra_certs), A2), \
     struct Library *, AMISSL_BASE_NAME, 5216, Amissl)

#define RSA_get0_multi_prime_crt_params(___r, ___exps, ___coeffs) \
      AROS_LC3(int, RSA_get0_multi_prime_crt_params, \
 AROS_LCA(const RSA *, (___r), A0), \
 AROS_LCA(const BIGNUM **, (___exps), A1), \
 AROS_LCA(const BIGNUM **, (___coeffs), A2), \
     struct Library *, AMISSL_BASE_NAME, 5217, Amissl)

#define RSA_set0_multi_prime_params(___r, ___primes, ___exps, ___coeffs, ___pnum) \
      AROS_LC5(int, RSA_set0_multi_prime_params, \
 AROS_LCA(RSA *, (___r), A0), \
 AROS_LCA(BIGNUM **, (___primes), A1), \
 AROS_LCA(BIGNUM **, (___exps), A2), \
 AROS_LCA(BIGNUM **, (___coeffs), A3), \
 AROS_LCA(int, (___pnum), D0), \
     struct Library *, AMISSL_BASE_NAME, 5218, Amissl)

#define RSA_get_version(___r) \
      AROS_LC1(int, RSA_get_version, \
 AROS_LCA(RSA *, (___r), A0), \
     struct Library *, AMISSL_BASE_NAME, 5219, Amissl)

#define RSA_meth_get_multi_prime_keygen(___meth) \
      AROS_LC1(int (*)(RSA *rsa, int bits, int primes, BIGNUM *e, BN_GENCB *cb), RSA_meth_get_multi_prime_keygen, \
 AROS_LCA(const RSA_METHOD *, (___meth), A0), \
     struct Library *, AMISSL_BASE_NAME, 5220, Amissl)

#define RSA_meth_set_multi_prime_keygen(___meth, ___keygen) \
      AROS_LC2(int, RSA_meth_set_multi_prime_keygen, \
 AROS_LCA(RSA_METHOD *, (___meth), A0), \
 AROS_LCA(int (*)(RSA *rsa,int bits,int primes,BIGNUM *e,BN_GENCB *cb), (___keygen), A1), \
     struct Library *, AMISSL_BASE_NAME, 5221, Amissl)

#define PROFESSION_INFO_get0_addProfessionInfo(___pi) \
      AROS_LC1(const ASN1_OCTET_STRING *, PROFESSION_INFO_get0_addProfessionInfo, \
 AROS_LCA(const PROFESSION_INFO *, (___pi), A0), \
     struct Library *, AMISSL_BASE_NAME, 5224, Amissl)

#define ADMISSION_SYNTAX_free(___a) \
      AROS_LC1(void, ADMISSION_SYNTAX_free, \
 AROS_LCA(ADMISSION_SYNTAX *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 5225, Amissl)

#define d2i_ADMISSION_SYNTAX(___a, ___in, ___len) \
      AROS_LC3(ADMISSION_SYNTAX *, d2i_ADMISSION_SYNTAX, \
 AROS_LCA(ADMISSION_SYNTAX **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 5226, Amissl)

#define NAMING_AUTHORITY_set0_authorityId(___n, ___namingAuthorityId) \
      AROS_LC2(void, NAMING_AUTHORITY_set0_authorityId, \
 AROS_LCA(NAMING_AUTHORITY *, (___n), A0), \
 AROS_LCA(ASN1_OBJECT*, (___namingAuthorityId), A1), \
     struct Library *, AMISSL_BASE_NAME, 5227, Amissl)

#define NAMING_AUTHORITY_set0_authorityURL(___n, ___namingAuthorityUrl) \
      AROS_LC2(void, NAMING_AUTHORITY_set0_authorityURL, \
 AROS_LCA(NAMING_AUTHORITY *, (___n), A0), \
 AROS_LCA(ASN1_IA5STRING*, (___namingAuthorityUrl), A1), \
     struct Library *, AMISSL_BASE_NAME, 5228, Amissl)

#define d2i_PROFESSION_INFO(___a, ___in, ___len) \
      AROS_LC3(PROFESSION_INFO *, d2i_PROFESSION_INFO, \
 AROS_LCA(PROFESSION_INFO **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 5229, Amissl)

#define NAMING_AUTHORITY_it() \
      AROS_LC0(const ASN1_ITEM *, NAMING_AUTHORITY_it, \
     struct Library *, AMISSL_BASE_NAME, 5230, Amissl)

#define ADMISSION_SYNTAX_get0_contentsOfAdmissions(___as) \
      AROS_LC1(const STACK_OF(ADMISSIONS) *, ADMISSION_SYNTAX_get0_contentsOfAdmissions, \
 AROS_LCA(const ADMISSION_SYNTAX *, (___as), A0), \
     struct Library *, AMISSL_BASE_NAME, 5231, Amissl)

#define PROFESSION_INFO_set0_professionItems(___pi, ___as) \
      AROS_LC2(void, PROFESSION_INFO_set0_professionItems, \
 AROS_LCA(PROFESSION_INFO *, (___pi), A0), \
 AROS_LCA(STACK_OF(ASN1_STRING) *, (___as), A1), \
     struct Library *, AMISSL_BASE_NAME, 5232, Amissl)

#define NAMING_AUTHORITY_new() \
      AROS_LC0(NAMING_AUTHORITY *, NAMING_AUTHORITY_new, \
     struct Library *, AMISSL_BASE_NAME, 5233, Amissl)

#define NAMING_AUTHORITY_get0_authorityURL(___n) \
      AROS_LC1(const ASN1_IA5STRING *, NAMING_AUTHORITY_get0_authorityURL, \
 AROS_LCA(const NAMING_AUTHORITY *, (___n), A0), \
     struct Library *, AMISSL_BASE_NAME, 5234, Amissl)

#define ADMISSION_SYNTAX_get0_admissionAuthority(___as) \
      AROS_LC1(const GENERAL_NAME *, ADMISSION_SYNTAX_get0_admissionAuthority, \
 AROS_LCA(const ADMISSION_SYNTAX *, (___as), A0), \
     struct Library *, AMISSL_BASE_NAME, 5235, Amissl)

#define PROFESSION_INFO_new() \
      AROS_LC0(PROFESSION_INFO *, PROFESSION_INFO_new, \
     struct Library *, AMISSL_BASE_NAME, 5236, Amissl)

#define ADMISSIONS_new() \
      AROS_LC0(ADMISSIONS *, ADMISSIONS_new, \
     struct Library *, AMISSL_BASE_NAME, 5237, Amissl)

#define ADMISSION_SYNTAX_set0_admissionAuthority(___as, ___aa) \
      AROS_LC2(void, ADMISSION_SYNTAX_set0_admissionAuthority, \
 AROS_LCA(ADMISSION_SYNTAX *, (___as), A0), \
 AROS_LCA(GENERAL_NAME *, (___aa), A1), \
     struct Library *, AMISSL_BASE_NAME, 5238, Amissl)

#define PROFESSION_INFO_get0_professionOIDs(___pi) \
      AROS_LC1(const STACK_OF(ASN1_OBJECT) *, PROFESSION_INFO_get0_professionOIDs, \
 AROS_LCA(const PROFESSION_INFO *, (___pi), A0), \
     struct Library *, AMISSL_BASE_NAME, 5239, Amissl)

#define PROFESSION_INFO_it() \
      AROS_LC0(const ASN1_ITEM *, PROFESSION_INFO_it, \
     struct Library *, AMISSL_BASE_NAME, 5240, Amissl)

#define i2d_PROFESSION_INFO(___a, ___out) \
      AROS_LC2(int, i2d_PROFESSION_INFO, \
 AROS_LCA(const PROFESSION_INFO *, (___a), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 5241, Amissl)

#define ADMISSIONS_set0_professionInfos(___a, ___pi) \
      AROS_LC2(void, ADMISSIONS_set0_professionInfos, \
 AROS_LCA(ADMISSIONS *, (___a), A0), \
 AROS_LCA(PROFESSION_INFOS *, (___pi), A1), \
     struct Library *, AMISSL_BASE_NAME, 5242, Amissl)

#define PROFESSION_INFO_get0_namingAuthority(___pi) \
      AROS_LC1(const NAMING_AUTHORITY *, PROFESSION_INFO_get0_namingAuthority, \
 AROS_LCA(const PROFESSION_INFO *, (___pi), A0), \
     struct Library *, AMISSL_BASE_NAME, 5243, Amissl)

#define PROFESSION_INFO_free(___a) \
      AROS_LC1(void, PROFESSION_INFO_free, \
 AROS_LCA(PROFESSION_INFO *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 5244, Amissl)

#define PROFESSION_INFO_set0_addProfessionInfo(___pi, ___aos) \
      AROS_LC2(void, PROFESSION_INFO_set0_addProfessionInfo, \
 AROS_LCA(PROFESSION_INFO *, (___pi), A0), \
 AROS_LCA(ASN1_OCTET_STRING *, (___aos), A1), \
     struct Library *, AMISSL_BASE_NAME, 5245, Amissl)

#define PROFESSION_INFO_set0_registrationNumber(___pi, ___rn) \
      AROS_LC2(void, PROFESSION_INFO_set0_registrationNumber, \
 AROS_LCA(PROFESSION_INFO *, (___pi), A0), \
 AROS_LCA(ASN1_PRINTABLESTRING *, (___rn), A1), \
     struct Library *, AMISSL_BASE_NAME, 5246, Amissl)

#define ADMISSION_SYNTAX_set0_contentsOfAdmissions(___as, ___a) \
      AROS_LC2(void, ADMISSION_SYNTAX_set0_contentsOfAdmissions, \
 AROS_LCA(ADMISSION_SYNTAX *, (___as), A0), \
 AROS_LCA(STACK_OF(ADMISSIONS) *, (___a), A1), \
     struct Library *, AMISSL_BASE_NAME, 5247, Amissl)

#define NAMING_AUTHORITY_get0_authorityId(___n) \
      AROS_LC1(const ASN1_OBJECT *, NAMING_AUTHORITY_get0_authorityId, \
 AROS_LCA(const NAMING_AUTHORITY *, (___n), A0), \
     struct Library *, AMISSL_BASE_NAME, 5248, Amissl)

#define ADMISSION_SYNTAX_it() \
      AROS_LC0(const ASN1_ITEM *, ADMISSION_SYNTAX_it, \
     struct Library *, AMISSL_BASE_NAME, 5249, Amissl)

#define i2d_ADMISSION_SYNTAX(___a, ___out) \
      AROS_LC2(int, i2d_ADMISSION_SYNTAX, \
 AROS_LCA(const ADMISSION_SYNTAX *, (___a), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 5250, Amissl)

#define NAMING_AUTHORITY_get0_authorityText(___n) \
      AROS_LC1(const ASN1_STRING *, NAMING_AUTHORITY_get0_authorityText, \
 AROS_LCA(const NAMING_AUTHORITY *, (___n), A0), \
     struct Library *, AMISSL_BASE_NAME, 5251, Amissl)

#define PROFESSION_INFO_set0_namingAuthority(___pi, ___na) \
      AROS_LC2(void, PROFESSION_INFO_set0_namingAuthority, \
 AROS_LCA(PROFESSION_INFO *, (___pi), A0), \
 AROS_LCA(NAMING_AUTHORITY *, (___na), A1), \
     struct Library *, AMISSL_BASE_NAME, 5252, Amissl)

#define i2d_NAMING_AUTHORITY(___a, ___out) \
      AROS_LC2(int, i2d_NAMING_AUTHORITY, \
 AROS_LCA(const NAMING_AUTHORITY *, (___a), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 5253, Amissl)

#define NAMING_AUTHORITY_free(___a) \
      AROS_LC1(void, NAMING_AUTHORITY_free, \
 AROS_LCA(NAMING_AUTHORITY *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 5254, Amissl)

#define ADMISSIONS_set0_admissionAuthority(___a, ___aa) \
      AROS_LC2(void, ADMISSIONS_set0_admissionAuthority, \
 AROS_LCA(ADMISSIONS *, (___a), A0), \
 AROS_LCA(GENERAL_NAME *, (___aa), A1), \
     struct Library *, AMISSL_BASE_NAME, 5255, Amissl)

#define ADMISSIONS_free(___a) \
      AROS_LC1(void, ADMISSIONS_free, \
 AROS_LCA(ADMISSIONS *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 5256, Amissl)

#define PROFESSION_INFO_get0_registrationNumber(___pi) \
      AROS_LC1(const ASN1_PRINTABLESTRING *, PROFESSION_INFO_get0_registrationNumber, \
 AROS_LCA(const PROFESSION_INFO *, (___pi), A0), \
     struct Library *, AMISSL_BASE_NAME, 5257, Amissl)

#define d2i_ADMISSIONS(___a, ___in, ___len) \
      AROS_LC3(ADMISSIONS *, d2i_ADMISSIONS, \
 AROS_LCA(ADMISSIONS **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 5258, Amissl)

#define i2d_ADMISSIONS(___a, ___out) \
      AROS_LC2(int, i2d_ADMISSIONS, \
 AROS_LCA(const ADMISSIONS *, (___a), A0), \
 AROS_LCA(unsigned char **, (___out), A1), \
     struct Library *, AMISSL_BASE_NAME, 5259, Amissl)

#define PROFESSION_INFO_get0_professionItems(___pi) \
      AROS_LC1(const STACK_OF(ASN1_STRING) *, PROFESSION_INFO_get0_professionItems, \
 AROS_LCA(const PROFESSION_INFO *, (___pi), A0), \
     struct Library *, AMISSL_BASE_NAME, 5260, Amissl)

#define ADMISSIONS_get0_admissionAuthority(___a) \
      AROS_LC1(const GENERAL_NAME *, ADMISSIONS_get0_admissionAuthority, \
 AROS_LCA(const ADMISSIONS *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 5261, Amissl)

#define PROFESSION_INFO_set0_professionOIDs(___pi, ___po) \
      AROS_LC2(void, PROFESSION_INFO_set0_professionOIDs, \
 AROS_LCA(PROFESSION_INFO *, (___pi), A0), \
 AROS_LCA(STACK_OF(ASN1_OBJECT) *, (___po), A1), \
     struct Library *, AMISSL_BASE_NAME, 5262, Amissl)

#define d2i_NAMING_AUTHORITY(___a, ___in, ___len) \
      AROS_LC3(NAMING_AUTHORITY *, d2i_NAMING_AUTHORITY, \
 AROS_LCA(NAMING_AUTHORITY **, (___a), A0), \
 AROS_LCA(const unsigned char **, (___in), A1), \
 AROS_LCA(long, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 5263, Amissl)

#define ADMISSIONS_it() \
      AROS_LC0(const ASN1_ITEM *, ADMISSIONS_it, \
     struct Library *, AMISSL_BASE_NAME, 5264, Amissl)

#define ADMISSIONS_get0_namingAuthority(___a) \
      AROS_LC1(const NAMING_AUTHORITY *, ADMISSIONS_get0_namingAuthority, \
 AROS_LCA(const ADMISSIONS *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 5265, Amissl)

#define NAMING_AUTHORITY_set0_authorityText(___n, ___namingAuthorityText) \
      AROS_LC2(void, NAMING_AUTHORITY_set0_authorityText, \
 AROS_LCA(NAMING_AUTHORITY *, (___n), A0), \
 AROS_LCA(ASN1_STRING*, (___namingAuthorityText), A1), \
     struct Library *, AMISSL_BASE_NAME, 5266, Amissl)

#define ADMISSIONS_set0_namingAuthority(___a, ___na) \
      AROS_LC2(void, ADMISSIONS_set0_namingAuthority, \
 AROS_LCA(ADMISSIONS *, (___a), A0), \
 AROS_LCA(NAMING_AUTHORITY *, (___na), A1), \
     struct Library *, AMISSL_BASE_NAME, 5267, Amissl)

#define ADMISSIONS_get0_professionInfos(___a) \
      AROS_LC1(const PROFESSION_INFOS *, ADMISSIONS_get0_professionInfos, \
 AROS_LCA(const ADMISSIONS *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 5268, Amissl)

#define ADMISSION_SYNTAX_new() \
      AROS_LC0(ADMISSION_SYNTAX *, ADMISSION_SYNTAX_new, \
     struct Library *, AMISSL_BASE_NAME, 5269, Amissl)

#define EVP_sha512_256() \
      AROS_LC0(const EVP_MD *, EVP_sha512_256, \
     struct Library *, AMISSL_BASE_NAME, 5270, Amissl)

#define EVP_sha512_224() \
      AROS_LC0(const EVP_MD *, EVP_sha512_224, \
     struct Library *, AMISSL_BASE_NAME, 5271, Amissl)

#define OCSP_basic_sign_ctx(___brsp, ___signer, ___ctx, ___certs, ___flags) \
      AROS_LC5(int, OCSP_basic_sign_ctx, \
 AROS_LCA(OCSP_BASICRESP *, (___brsp), A0), \
 AROS_LCA(X509 *, (___signer), A1), \
 AROS_LCA(EVP_MD_CTX *, (___ctx), A2), \
 AROS_LCA(STACK_OF(X509) *, (___certs), A3), \
 AROS_LCA(unsigned long, (___flags), D0), \
     struct Library *, AMISSL_BASE_NAME, 5272, Amissl)

#define OSSL_STORE_SEARCH_by_alias(___alias) \
      AROS_LC1(OSSL_STORE_SEARCH *, OSSL_STORE_SEARCH_by_alias, \
 AROS_LCA(const char *, (___alias), A0), \
     struct Library *, AMISSL_BASE_NAME, 5275, Amissl)

#define BIO_bind(___sock, ___addr, ___options) \
      AROS_LC3(int, BIO_bind, \
 AROS_LCA(int, (___sock), D0), \
 AROS_LCA(const BIO_ADDR *, (___addr), A0), \
 AROS_LCA(int, (___options), D1), \
     struct Library *, AMISSL_BASE_NAME, 5276, Amissl)

#define OSSL_STORE_LOADER_set_expect(___loader, ___expect_function) \
      AROS_LC2(int, OSSL_STORE_LOADER_set_expect, \
 AROS_LCA(OSSL_STORE_LOADER *, (___loader), A0), \
 AROS_LCA(OSSL_STORE_expect_fn, (___expect_function), A1), \
     struct Library *, AMISSL_BASE_NAME, 5277, Amissl)

#define OSSL_STORE_expect(___ctx, ___expected_type) \
      AROS_LC2(int, OSSL_STORE_expect, \
 AROS_LCA(OSSL_STORE_CTX *, (___ctx), A0), \
 AROS_LCA(int, (___expected_type), D0), \
     struct Library *, AMISSL_BASE_NAME, 5278, Amissl)

#define OSSL_STORE_SEARCH_by_key_fingerprint(___digest, ___bytes, ___len) \
      AROS_LC3(OSSL_STORE_SEARCH *, OSSL_STORE_SEARCH_by_key_fingerprint, \
 AROS_LCA(const EVP_MD *, (___digest), A0), \
 AROS_LCA(const unsigned char *, (___bytes), A1), \
 AROS_LCA(size_t, (___len), D0), \
     struct Library *, AMISSL_BASE_NAME, 5279, Amissl)

#define OSSL_STORE_SEARCH_get0_serial(___criterion) \
      AROS_LC1(const ASN1_INTEGER *, OSSL_STORE_SEARCH_get0_serial, \
 AROS_LCA(const OSSL_STORE_SEARCH *, (___criterion), A0), \
     struct Library *, AMISSL_BASE_NAME, 5280, Amissl)

#define OSSL_STORE_SEARCH_by_name(___name) \
      AROS_LC1(OSSL_STORE_SEARCH *, OSSL_STORE_SEARCH_by_name, \
 AROS_LCA(X509_NAME *, (___name), A0), \
     struct Library *, AMISSL_BASE_NAME, 5281, Amissl)

#define OSSL_STORE_supports_search(___ctx, ___search_type) \
      AROS_LC2(int, OSSL_STORE_supports_search, \
 AROS_LCA(OSSL_STORE_CTX *, (___ctx), A0), \
 AROS_LCA(int, (___search_type), D0), \
     struct Library *, AMISSL_BASE_NAME, 5282, Amissl)

#define OSSL_STORE_find(___ctx, ___search) \
      AROS_LC2(int, OSSL_STORE_find, \
 AROS_LCA(OSSL_STORE_CTX *, (___ctx), A0), \
 AROS_LCA(const OSSL_STORE_SEARCH *, (___search), A1), \
     struct Library *, AMISSL_BASE_NAME, 5283, Amissl)

#define OSSL_STORE_SEARCH_get_type(___criterion) \
      AROS_LC1(int, OSSL_STORE_SEARCH_get_type, \
 AROS_LCA(const OSSL_STORE_SEARCH *, (___criterion), A0), \
     struct Library *, AMISSL_BASE_NAME, 5284, Amissl)

#define OSSL_STORE_SEARCH_get0_bytes(___criterion, ___length) \
      AROS_LC2(const unsigned char *, OSSL_STORE_SEARCH_get0_bytes, \
 AROS_LCA(const OSSL_STORE_SEARCH *, (___criterion), A0), \
 AROS_LCA(size_t *, (___length), A1), \
     struct Library *, AMISSL_BASE_NAME, 5285, Amissl)

#define OSSL_STORE_SEARCH_get0_string(___criterion) \
      AROS_LC1(const char *, OSSL_STORE_SEARCH_get0_string, \
 AROS_LCA(const OSSL_STORE_SEARCH *, (___criterion), A0), \
     struct Library *, AMISSL_BASE_NAME, 5286, Amissl)

#define OSSL_STORE_SEARCH_by_issuer_serial(___name, ___serial) \
      AROS_LC2(OSSL_STORE_SEARCH *, OSSL_STORE_SEARCH_by_issuer_serial, \
 AROS_LCA(X509_NAME *, (___name), A0), \
 AROS_LCA(const ASN1_INTEGER *, (___serial), A1), \
     struct Library *, AMISSL_BASE_NAME, 5287, Amissl)

#define OSSL_STORE_SEARCH_get0_name(___criterion) \
      AROS_LC1(X509_NAME *, OSSL_STORE_SEARCH_get0_name, \
 AROS_LCA(const OSSL_STORE_SEARCH *, (___criterion), A0), \
     struct Library *, AMISSL_BASE_NAME, 5288, Amissl)

#define X509_get0_authority_key_id(___x) \
      AROS_LC1(const ASN1_OCTET_STRING *, X509_get0_authority_key_id, \
 AROS_LCA(X509 *, (___x), A0), \
     struct Library *, AMISSL_BASE_NAME, 5289, Amissl)

#define OSSL_STORE_LOADER_set_find(___loader, ___find_function) \
      AROS_LC2(int, OSSL_STORE_LOADER_set_find, \
 AROS_LCA(OSSL_STORE_LOADER *, (___loader), A0), \
 AROS_LCA(OSSL_STORE_find_fn, (___find_function), A1), \
     struct Library *, AMISSL_BASE_NAME, 5290, Amissl)

#define OSSL_STORE_SEARCH_free(___search) \
      AROS_LC1(void, OSSL_STORE_SEARCH_free, \
 AROS_LCA(OSSL_STORE_SEARCH *, (___search), A0), \
     struct Library *, AMISSL_BASE_NAME, 5291, Amissl)

#define OSSL_STORE_SEARCH_get0_digest(___criterion) \
      AROS_LC1(const EVP_MD *, OSSL_STORE_SEARCH_get0_digest, \
 AROS_LCA(const OSSL_STORE_SEARCH *, (___criterion), A0), \
     struct Library *, AMISSL_BASE_NAME, 5292, Amissl)

#define EVP_PKEY_new_raw_private_key(___type, ___e, ___priv, ___len) \
      AROS_LC4(EVP_PKEY *, EVP_PKEY_new_raw_private_key, \
 AROS_LCA(int, (___type), D0), \
 AROS_LCA(ENGINE *, (___e), A0), \
 AROS_LCA(const unsigned char *, (___priv), A1), \
 AROS_LCA(size_t, (___len), D1), \
     struct Library *, AMISSL_BASE_NAME, 5294, Amissl)

#define EVP_PKEY_new_raw_public_key(___type, ___e, ___pub, ___len) \
      AROS_LC4(EVP_PKEY *, EVP_PKEY_new_raw_public_key, \
 AROS_LCA(int, (___type), D0), \
 AROS_LCA(ENGINE *, (___e), A0), \
 AROS_LCA(const unsigned char *, (___pub), A1), \
 AROS_LCA(size_t, (___len), D1), \
     struct Library *, AMISSL_BASE_NAME, 5295, Amissl)

#define EVP_PKEY_new_CMAC_key(___e, ___priv, ___len, ___cipher) \
      AROS_LC4(EVP_PKEY *, EVP_PKEY_new_CMAC_key, \
 AROS_LCA(ENGINE *, (___e), A0), \
 AROS_LCA(const unsigned char *, (___priv), A1), \
 AROS_LCA(size_t, (___len), D0), \
 AROS_LCA(const EVP_CIPHER *, (___cipher), A2), \
     struct Library *, AMISSL_BASE_NAME, 5296, Amissl)

#define EVP_PKEY_asn1_set_set_priv_key(___ameth, ___set_priv_key) \
      AROS_LC2(void, EVP_PKEY_asn1_set_set_priv_key, \
 AROS_LCA(EVP_PKEY_ASN1_METHOD *, (___ameth), A0), \
 AROS_LCA(int (*)(EVP_PKEY *pk,const unsigned char *priv,size_t len), (___set_priv_key), A1), \
     struct Library *, AMISSL_BASE_NAME, 5297, Amissl)

#define EVP_PKEY_asn1_set_set_pub_key(___ameth, ___set_pub_key) \
      AROS_LC2(void, EVP_PKEY_asn1_set_set_pub_key, \
 AROS_LCA(EVP_PKEY_ASN1_METHOD *, (___ameth), A0), \
 AROS_LCA(int (*)(EVP_PKEY *pk,const unsigned char *pub,size_t len), (___set_pub_key), A1), \
     struct Library *, AMISSL_BASE_NAME, 5298, Amissl)

#define X509_VERIFY_PARAM_get_hostflags(___param) \
      AROS_LC1(unsigned int, X509_VERIFY_PARAM_get_hostflags, \
 AROS_LCA(const X509_VERIFY_PARAM *, (___param), A0), \
     struct Library *, AMISSL_BASE_NAME, 5300, Amissl)

#define DH_get0_p(___dh) \
      AROS_LC1(const BIGNUM *, DH_get0_p, \
 AROS_LCA(const DH *, (___dh), A0), \
     struct Library *, AMISSL_BASE_NAME, 5301, Amissl)

#define DH_get0_q(___dh) \
      AROS_LC1(const BIGNUM *, DH_get0_q, \
 AROS_LCA(const DH *, (___dh), A0), \
     struct Library *, AMISSL_BASE_NAME, 5302, Amissl)

#define DH_get0_g(___dh) \
      AROS_LC1(const BIGNUM *, DH_get0_g, \
 AROS_LCA(const DH *, (___dh), A0), \
     struct Library *, AMISSL_BASE_NAME, 5303, Amissl)

#define DH_get0_priv_key(___dh) \
      AROS_LC1(const BIGNUM *, DH_get0_priv_key, \
 AROS_LCA(const DH *, (___dh), A0), \
     struct Library *, AMISSL_BASE_NAME, 5304, Amissl)

#define DH_get0_pub_key(___dh) \
      AROS_LC1(const BIGNUM *, DH_get0_pub_key, \
 AROS_LCA(const DH *, (___dh), A0), \
     struct Library *, AMISSL_BASE_NAME, 5305, Amissl)

#define DSA_get0_priv_key(___d) \
      AROS_LC1(const BIGNUM *, DSA_get0_priv_key, \
 AROS_LCA(const DSA *, (___d), A0), \
     struct Library *, AMISSL_BASE_NAME, 5306, Amissl)

#define DSA_get0_pub_key(___d) \
      AROS_LC1(const BIGNUM *, DSA_get0_pub_key, \
 AROS_LCA(const DSA *, (___d), A0), \
     struct Library *, AMISSL_BASE_NAME, 5307, Amissl)

#define DSA_get0_q(___d) \
      AROS_LC1(const BIGNUM *, DSA_get0_q, \
 AROS_LCA(const DSA *, (___d), A0), \
     struct Library *, AMISSL_BASE_NAME, 5308, Amissl)

#define DSA_get0_p(___d) \
      AROS_LC1(const BIGNUM *, DSA_get0_p, \
 AROS_LCA(const DSA *, (___d), A0), \
     struct Library *, AMISSL_BASE_NAME, 5309, Amissl)

#define DSA_get0_g(___d) \
      AROS_LC1(const BIGNUM *, DSA_get0_g, \
 AROS_LCA(const DSA *, (___d), A0), \
     struct Library *, AMISSL_BASE_NAME, 5310, Amissl)

#define RSA_get0_dmp1(___r) \
      AROS_LC1(const BIGNUM *, RSA_get0_dmp1, \
 AROS_LCA(const RSA *, (___r), A0), \
     struct Library *, AMISSL_BASE_NAME, 5311, Amissl)

#define RSA_get0_d(___d) \
      AROS_LC1(const BIGNUM *, RSA_get0_d, \
 AROS_LCA(const RSA *, (___d), A0), \
     struct Library *, AMISSL_BASE_NAME, 5312, Amissl)

#define RSA_get0_n(___d) \
      AROS_LC1(const BIGNUM *, RSA_get0_n, \
 AROS_LCA(const RSA *, (___d), A0), \
     struct Library *, AMISSL_BASE_NAME, 5313, Amissl)

#define RSA_get0_dmq1(___r) \
      AROS_LC1(const BIGNUM *, RSA_get0_dmq1, \
 AROS_LCA(const RSA *, (___r), A0), \
     struct Library *, AMISSL_BASE_NAME, 5314, Amissl)

#define RSA_get0_e(___d) \
      AROS_LC1(const BIGNUM *, RSA_get0_e, \
 AROS_LCA(const RSA *, (___d), A0), \
     struct Library *, AMISSL_BASE_NAME, 5315, Amissl)

#define RSA_get0_q(___d) \
      AROS_LC1(const BIGNUM *, RSA_get0_q, \
 AROS_LCA(const RSA *, (___d), A0), \
     struct Library *, AMISSL_BASE_NAME, 5316, Amissl)

#define RSA_get0_p(___d) \
      AROS_LC1(const BIGNUM *, RSA_get0_p, \
 AROS_LCA(const RSA *, (___d), A0), \
     struct Library *, AMISSL_BASE_NAME, 5317, Amissl)

#define RSA_get0_iqmp(___r) \
      AROS_LC1(const BIGNUM *, RSA_get0_iqmp, \
 AROS_LCA(const RSA *, (___r), A0), \
     struct Library *, AMISSL_BASE_NAME, 5318, Amissl)

#define ECDSA_SIG_get0_r(___sig) \
      AROS_LC1(const BIGNUM *, ECDSA_SIG_get0_r, \
 AROS_LCA(const ECDSA_SIG *, (___sig), A0), \
     struct Library *, AMISSL_BASE_NAME, 5319, Amissl)

#define ECDSA_SIG_get0_s(___sig) \
      AROS_LC1(const BIGNUM *, ECDSA_SIG_get0_s, \
 AROS_LCA(const ECDSA_SIG *, (___sig), A0), \
     struct Library *, AMISSL_BASE_NAME, 5320, Amissl)

#define X509_LOOKUP_meth_get_get_by_fingerprint(___method) \
      AROS_LC1(X509_LOOKUP_get_by_fingerprint_fn, X509_LOOKUP_meth_get_get_by_fingerprint, \
 AROS_LCA(const X509_LOOKUP_METHOD *, (___method), A0), \
     struct Library *, AMISSL_BASE_NAME, 5321, Amissl)

#define X509_LOOKUP_meth_new(___name) \
      AROS_LC1(X509_LOOKUP_METHOD *, X509_LOOKUP_meth_new, \
 AROS_LCA(const char *, (___name), A0), \
     struct Library *, AMISSL_BASE_NAME, 5322, Amissl)

#define X509_LOOKUP_meth_get_init(___method) \
      AROS_LC1(int (*)(X509_LOOKUP *ctx), X509_LOOKUP_meth_get_init, \
 AROS_LCA(const X509_LOOKUP_METHOD*, (___method), A0), \
     struct Library *, AMISSL_BASE_NAME, 5323, Amissl)

#define X509_LOOKUP_meth_get_get_by_alias(___method) \
      AROS_LC1(X509_LOOKUP_get_by_alias_fn, X509_LOOKUP_meth_get_get_by_alias, \
 AROS_LCA(const X509_LOOKUP_METHOD *, (___method), A0), \
     struct Library *, AMISSL_BASE_NAME, 5324, Amissl)

#define X509_LOOKUP_meth_set_new_item(___method, ___new_item) \
      AROS_LC2(int, X509_LOOKUP_meth_set_new_item, \
 AROS_LCA(X509_LOOKUP_METHOD *, (___method), A0), \
 AROS_LCA(int (*)(X509_LOOKUP *ctx), (___new_item), A1), \
     struct Library *, AMISSL_BASE_NAME, 5325, Amissl)

#define X509_LOOKUP_meth_set_shutdown(___method, _____shutdown) \
      AROS_LC2(int, X509_LOOKUP_meth_set_shutdown, \
 AROS_LCA(X509_LOOKUP_METHOD *, (___method), A0), \
 AROS_LCA(int (*)(X509_LOOKUP *ctx), (_____shutdown), A1), \
     struct Library *, AMISSL_BASE_NAME, 5326, Amissl)

#define X509_LOOKUP_meth_get_new_item(___method) \
      AROS_LC1(int (*)(X509_LOOKUP *ctx), X509_LOOKUP_meth_get_new_item, \
 AROS_LCA(const X509_LOOKUP_METHOD*, (___method), A0), \
     struct Library *, AMISSL_BASE_NAME, 5327, Amissl)

#define X509_LOOKUP_meth_set_ctrl(___method, ___ctrl_fn) \
      AROS_LC2(int, X509_LOOKUP_meth_set_ctrl, \
 AROS_LCA(X509_LOOKUP_METHOD *, (___method), A0), \
 AROS_LCA(X509_LOOKUP_ctrl_fn, (___ctrl_fn), A1), \
     struct Library *, AMISSL_BASE_NAME, 5328, Amissl)

#define X509_LOOKUP_meth_set_get_by_issuer_serial(___method, ___fn) \
      AROS_LC2(int, X509_LOOKUP_meth_set_get_by_issuer_serial, \
 AROS_LCA(X509_LOOKUP_METHOD *, (___method), A0), \
 AROS_LCA(X509_LOOKUP_get_by_issuer_serial_fn, (___fn), A1), \
     struct Library *, AMISSL_BASE_NAME, 5329, Amissl)

#define X509_LOOKUP_get_store(___ctx) \
      AROS_LC1(X509_STORE *, X509_LOOKUP_get_store, \
 AROS_LCA(const X509_LOOKUP *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 5330, Amissl)

#define X509_LOOKUP_meth_get_ctrl(___method) \
      AROS_LC1(X509_LOOKUP_ctrl_fn, X509_LOOKUP_meth_get_ctrl, \
 AROS_LCA(const X509_LOOKUP_METHOD *, (___method), A0), \
     struct Library *, AMISSL_BASE_NAME, 5331, Amissl)

#define X509_LOOKUP_meth_set_get_by_alias(___method, ___fn) \
      AROS_LC2(int, X509_LOOKUP_meth_set_get_by_alias, \
 AROS_LCA(X509_LOOKUP_METHOD *, (___method), A0), \
 AROS_LCA(X509_LOOKUP_get_by_alias_fn, (___fn), A1), \
     struct Library *, AMISSL_BASE_NAME, 5332, Amissl)

#define X509_LOOKUP_meth_get_get_by_subject(___method) \
      AROS_LC1(X509_LOOKUP_get_by_subject_fn, X509_LOOKUP_meth_get_get_by_subject, \
 AROS_LCA(const X509_LOOKUP_METHOD *, (___method), A0), \
     struct Library *, AMISSL_BASE_NAME, 5333, Amissl)

#define X509_LOOKUP_meth_get_free(___method) \
      AROS_LC1(void (*)(X509_LOOKUP *ctx), X509_LOOKUP_meth_get_free, \
 AROS_LCA(const X509_LOOKUP_METHOD*, (___method), A0), \
     struct Library *, AMISSL_BASE_NAME, 5334, Amissl)

#define X509_LOOKUP_meth_set_get_by_subject(___method, ___fn) \
      AROS_LC2(int, X509_LOOKUP_meth_set_get_by_subject, \
 AROS_LCA(X509_LOOKUP_METHOD *, (___method), A0), \
 AROS_LCA(X509_LOOKUP_get_by_subject_fn, (___fn), A1), \
     struct Library *, AMISSL_BASE_NAME, 5335, Amissl)

#define X509_LOOKUP_meth_set_free(___method, ___free_fn) \
      AROS_LC2(int, X509_LOOKUP_meth_set_free, \
 AROS_LCA(X509_LOOKUP_METHOD *, (___method), A0), \
 AROS_LCA(void (*)(X509_LOOKUP *ctx), (___free_fn), A1), \
     struct Library *, AMISSL_BASE_NAME, 5336, Amissl)

#define X509_LOOKUP_meth_get_shutdown(___method) \
      AROS_LC1(int (*)(X509_LOOKUP *ctx), X509_LOOKUP_meth_get_shutdown, \
 AROS_LCA(const X509_LOOKUP_METHOD*, (___method), A0), \
     struct Library *, AMISSL_BASE_NAME, 5337, Amissl)

#define X509_LOOKUP_set_method_data(___ctx, ___data) \
      AROS_LC2(int, X509_LOOKUP_set_method_data, \
 AROS_LCA(X509_LOOKUP *, (___ctx), A0), \
 AROS_LCA(void *, (___data), A1), \
     struct Library *, AMISSL_BASE_NAME, 5338, Amissl)

#define X509_LOOKUP_get_method_data(___ctx) \
      AROS_LC1(void *, X509_LOOKUP_get_method_data, \
 AROS_LCA(const X509_LOOKUP *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 5339, Amissl)

#define X509_LOOKUP_meth_set_get_by_fingerprint(___method, ___fn) \
      AROS_LC2(int, X509_LOOKUP_meth_set_get_by_fingerprint, \
 AROS_LCA(X509_LOOKUP_METHOD *, (___method), A0), \
 AROS_LCA(X509_LOOKUP_get_by_fingerprint_fn, (___fn), A1), \
     struct Library *, AMISSL_BASE_NAME, 5340, Amissl)

#define X509_LOOKUP_meth_free(___method) \
      AROS_LC1(void, X509_LOOKUP_meth_free, \
 AROS_LCA(X509_LOOKUP_METHOD *, (___method), A0), \
     struct Library *, AMISSL_BASE_NAME, 5341, Amissl)

#define X509_OBJECT_set1_X509(___a, ___obj) \
      AROS_LC2(int, X509_OBJECT_set1_X509, \
 AROS_LCA(X509_OBJECT *, (___a), A0), \
 AROS_LCA(X509 *, (___obj), A1), \
     struct Library *, AMISSL_BASE_NAME, 5342, Amissl)

#define X509_LOOKUP_meth_get_get_by_issuer_serial(___method) \
      AROS_LC1(X509_LOOKUP_get_by_issuer_serial_fn, X509_LOOKUP_meth_get_get_by_issuer_serial, \
 AROS_LCA(const X509_LOOKUP_METHOD *, (___method), A0), \
     struct Library *, AMISSL_BASE_NAME, 5343, Amissl)

#define X509_LOOKUP_meth_set_init(___method, ___init) \
      AROS_LC2(int, X509_LOOKUP_meth_set_init, \
 AROS_LCA(X509_LOOKUP_METHOD *, (___method), A0), \
 AROS_LCA(int (*)(X509_LOOKUP *ctx), (___init), A1), \
     struct Library *, AMISSL_BASE_NAME, 5344, Amissl)

#define X509_OBJECT_set1_X509_CRL(___a, ___obj) \
      AROS_LC2(int, X509_OBJECT_set1_X509_CRL, \
 AROS_LCA(X509_OBJECT *, (___a), A0), \
 AROS_LCA(X509_CRL *, (___obj), A1), \
     struct Library *, AMISSL_BASE_NAME, 5345, Amissl)

#define EVP_PKEY_get_raw_public_key(___pkey, ___pub, ___len) \
      AROS_LC3(int, EVP_PKEY_get_raw_public_key, \
 AROS_LCA(const EVP_PKEY *, (___pkey), A0), \
 AROS_LCA(unsigned char *, (___pub), A1), \
 AROS_LCA(size_t *, (___len), A2), \
     struct Library *, AMISSL_BASE_NAME, 5346, Amissl)

#define EVP_PKEY_get_raw_private_key(___pkey, ___priv, ___len) \
      AROS_LC3(int, EVP_PKEY_get_raw_private_key, \
 AROS_LCA(const EVP_PKEY *, (___pkey), A0), \
 AROS_LCA(unsigned char *, (___priv), A1), \
 AROS_LCA(size_t *, (___len), A2), \
     struct Library *, AMISSL_BASE_NAME, 5347, Amissl)

#define EVP_PKEY_asn1_set_get_priv_key(___ameth, ___get_priv_key) \
      AROS_LC2(void, EVP_PKEY_asn1_set_get_priv_key, \
 AROS_LCA(EVP_PKEY_ASN1_METHOD *, (___ameth), A0), \
 AROS_LCA(int (*)(const EVP_PKEY *pk,unsigned char *priv,size_t *len), (___get_priv_key), A1), \
     struct Library *, AMISSL_BASE_NAME, 5348, Amissl)

#define EVP_PKEY_asn1_set_get_pub_key(___ameth, ___get_pub_key) \
      AROS_LC2(void, EVP_PKEY_asn1_set_get_pub_key, \
 AROS_LCA(EVP_PKEY_ASN1_METHOD *, (___ameth), A0), \
 AROS_LCA(int (*)(const EVP_PKEY *pk,unsigned char *pub,size_t *len), (___get_pub_key), A1), \
     struct Library *, AMISSL_BASE_NAME, 5349, Amissl)

#define RAND_keep_random_devices_open(___keep) \
      AROS_LC1(void, RAND_keep_random_devices_open, \
 AROS_LCA(int, (___keep), D0), \
     struct Library *, AMISSL_BASE_NAME, 5351, Amissl)

#define EC_POINT_set_compressed_coordinates(___group, ___p, ___x, ___y_bit, ___ctx) \
      AROS_LC5(int, EC_POINT_set_compressed_coordinates, \
 AROS_LCA(const EC_GROUP *, (___group), A0), \
 AROS_LCA(EC_POINT *, (___p), A1), \
 AROS_LCA(const BIGNUM *, (___x), A2), \
 AROS_LCA(int, (___y_bit), D0), \
 AROS_LCA(BN_CTX *, (___ctx), A3), \
     struct Library *, AMISSL_BASE_NAME, 5352, Amissl)

#define EC_POINT_set_affine_coordinates(___group, ___p, ___x, ___y, ___ctx) \
      AROS_LC5(int, EC_POINT_set_affine_coordinates, \
 AROS_LCA(const EC_GROUP *, (___group), A0), \
 AROS_LCA(EC_POINT *, (___p), A1), \
 AROS_LCA(const BIGNUM *, (___x), A2), \
 AROS_LCA(const BIGNUM *, (___y), A3), \
 AROS_LCA(BN_CTX *, (___ctx), D0), \
     struct Library *, AMISSL_BASE_NAME, 5353, Amissl)

#define EC_POINT_get_affine_coordinates(___group, ___p, ___x, ___y, ___ctx) \
      AROS_LC5(int, EC_POINT_get_affine_coordinates, \
 AROS_LCA(const EC_GROUP *, (___group), A0), \
 AROS_LCA(const EC_POINT *, (___p), A1), \
 AROS_LCA(BIGNUM *, (___x), A2), \
 AROS_LCA(BIGNUM *, (___y), A3), \
 AROS_LCA(BN_CTX *, (___ctx), D0), \
     struct Library *, AMISSL_BASE_NAME, 5354, Amissl)

#define EC_GROUP_set_curve(___group, ___p, ___a, ___b, ___ctx) \
      AROS_LC5(int, EC_GROUP_set_curve, \
 AROS_LCA(EC_GROUP *, (___group), A0), \
 AROS_LCA(const BIGNUM *, (___p), A1), \
 AROS_LCA(const BIGNUM *, (___a), A2), \
 AROS_LCA(const BIGNUM *, (___b), A3), \
 AROS_LCA(BN_CTX *, (___ctx), D0), \
     struct Library *, AMISSL_BASE_NAME, 5355, Amissl)

#define EC_GROUP_get_curve(___group, ___p, ___a, ___b, ___ctx) \
      AROS_LC5(int, EC_GROUP_get_curve, \
 AROS_LCA(const EC_GROUP *, (___group), A0), \
 AROS_LCA(BIGNUM *, (___p), A1), \
 AROS_LCA(BIGNUM *, (___a), A2), \
 AROS_LCA(BIGNUM *, (___b), A3), \
 AROS_LCA(BN_CTX *, (___ctx), D0), \
     struct Library *, AMISSL_BASE_NAME, 5356, Amissl)

#define OCSP_resp_get0_tbs_sigalg(___bs) \
      AROS_LC1(const X509_ALGOR *, OCSP_resp_get0_tbs_sigalg, \
 AROS_LCA(const OCSP_BASICRESP *, (___bs), A0), \
     struct Library *, AMISSL_BASE_NAME, 5357, Amissl)

#define OCSP_resp_get0_respdata(___bs) \
      AROS_LC1(const OCSP_RESPDATA *, OCSP_resp_get0_respdata, \
 AROS_LCA(const OCSP_BASICRESP *, (___bs), A0), \
     struct Library *, AMISSL_BASE_NAME, 5358, Amissl)

#define EVP_MD_CTX_set_pkey_ctx(___ctx, ___pctx) \
      AROS_LC2(void, EVP_MD_CTX_set_pkey_ctx, \
 AROS_LCA(EVP_MD_CTX *, (___ctx), A0), \
 AROS_LCA(EVP_PKEY_CTX *, (___pctx), A1), \
     struct Library *, AMISSL_BASE_NAME, 5359, Amissl)

#define EVP_PKEY_meth_set_digest_custom(___pmeth, ___digest_custom) \
      AROS_LC2(void, EVP_PKEY_meth_set_digest_custom, \
 AROS_LCA(EVP_PKEY_METHOD *, (___pmeth), A0), \
 AROS_LCA(int (*)(EVP_PKEY_CTX *ctx,EVP_MD_CTX *mctx), (___digest_custom), A1), \
     struct Library *, AMISSL_BASE_NAME, 5360, Amissl)

#define EVP_PKEY_meth_get_digest_custom(___pmeth, ___pdigest_custom) \
      AROS_LC2(void, EVP_PKEY_meth_get_digest_custom, \
 AROS_LCA(const EVP_PKEY_METHOD *, (___pmeth), A0), \
 AROS_LCA(int (**)(EVP_PKEY_CTX *ctx,EVP_MD_CTX *mctx), (___pdigest_custom), A1), \
     struct Library *, AMISSL_BASE_NAME, 5361, Amissl)

#define OPENSSL_DIR_read(___ctx, ___directory) \
      AROS_LC2(const char *, OPENSSL_DIR_read, \
 AROS_LCA(OPENSSL_DIR_CTX **, (___ctx), A0), \
 AROS_LCA(const char *, (___directory), A1), \
     struct Library *, AMISSL_BASE_NAME, 5362, Amissl)

#define OPENSSL_DIR_end(___ctx) \
      AROS_LC1(int, OPENSSL_DIR_end, \
 AROS_LCA(OPENSSL_DIR_CTX **, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 5363, Amissl)

#define EVP_PKEY_get0_engine(___pkey) \
      AROS_LC1(ENGINE *, EVP_PKEY_get0_engine, \
 AROS_LCA(const EVP_PKEY *, (___pkey), A0), \
     struct Library *, AMISSL_BASE_NAME, 5366, Amissl)

#define X509_get0_authority_serial(___x) \
      AROS_LC1(const ASN1_INTEGER *, X509_get0_authority_serial, \
 AROS_LCA(X509 *, (___x), A0), \
     struct Library *, AMISSL_BASE_NAME, 5367, Amissl)

#define X509_get0_authority_issuer(___x) \
      AROS_LC1(const GENERAL_NAMES *, X509_get0_authority_issuer, \
 AROS_LCA(X509 *, (___x), A0), \
     struct Library *, AMISSL_BASE_NAME, 5368, Amissl)

#define EVP_PKEY_meth_set_digestsign(___pmeth, ___digestsign) \
      AROS_LC2(void, EVP_PKEY_meth_set_digestsign, \
 AROS_LCA(EVP_PKEY_METHOD *, (___pmeth), A0), \
 AROS_LCA(int (*)(EVP_MD_CTX *ctx,unsigned char *sig,size_t *siglen,const unsigned char *tbs,size_t tbslen), (___digestsign), A1), \
     struct Library *, AMISSL_BASE_NAME, 5369, Amissl)

#define EVP_PKEY_meth_set_digestverify(___pmeth, ___digestverify) \
      AROS_LC2(void, EVP_PKEY_meth_set_digestverify, \
 AROS_LCA(EVP_PKEY_METHOD *, (___pmeth), A0), \
 AROS_LCA(int (*)(EVP_MD_CTX *ctx,const unsigned char *sig,size_t siglen,const unsigned char *tbs,size_t tbslen), (___digestverify), A1), \
     struct Library *, AMISSL_BASE_NAME, 5370, Amissl)

#define EVP_PKEY_meth_get_digestverify(___pmeth, ___digestverify) \
      AROS_LC2(void, EVP_PKEY_meth_get_digestverify, \
 AROS_LCA(const EVP_PKEY_METHOD *, (___pmeth), A0), \
 AROS_LCA(int (**)(EVP_MD_CTX *ctx,const unsigned char *sig,size_t siglen,const unsigned char *tbs,size_t tbslen), (___digestverify), A1), \
     struct Library *, AMISSL_BASE_NAME, 5371, Amissl)

#define EVP_PKEY_meth_get_digestsign(___pmeth, ___digestsign) \
      AROS_LC2(void, EVP_PKEY_meth_get_digestsign, \
 AROS_LCA(const EVP_PKEY_METHOD *, (___pmeth), A0), \
 AROS_LCA(int (**)(EVP_MD_CTX *ctx,unsigned char *sig,size_t *siglen,const unsigned char *tbs,size_t tbslen), (___digestsign), A1), \
     struct Library *, AMISSL_BASE_NAME, 5372, Amissl)

#define RSA_get0_pss_params(___r) \
      AROS_LC1(const RSA_PSS_PARAMS *, RSA_get0_pss_params, \
 AROS_LCA(const RSA *, (___r), A0), \
     struct Library *, AMISSL_BASE_NAME, 5373, Amissl)

#define X509_ALGOR_copy(___dest, ___src) \
      AROS_LC2(int, X509_ALGOR_copy, \
 AROS_LCA(X509_ALGOR *, (___dest), A0), \
 AROS_LCA(const X509_ALGOR *, (___src), A1), \
     struct Library *, AMISSL_BASE_NAME, 5374, Amissl)

#define X509_REQ_set0_signature(___req, ___psig) \
      AROS_LC2(void, X509_REQ_set0_signature, \
 AROS_LCA(X509_REQ *, (___req), A0), \
 AROS_LCA(ASN1_BIT_STRING *, (___psig), A1), \
     struct Library *, AMISSL_BASE_NAME, 5375, Amissl)

#define X509_REQ_set1_signature_algo(___req, ___palg) \
      AROS_LC2(int, X509_REQ_set1_signature_algo, \
 AROS_LCA(X509_REQ *, (___req), A0), \
 AROS_LCA(X509_ALGOR *, (___palg), A1), \
     struct Library *, AMISSL_BASE_NAME, 5376, Amissl)

#define EC_KEY_decoded_from_explicit_params(___key) \
      AROS_LC1(int, EC_KEY_decoded_from_explicit_params, \
 AROS_LCA(const EC_KEY *, (___key), A0), \
     struct Library *, AMISSL_BASE_NAME, 5377, Amissl)

#define RSA_X931_derive_ex_amiga_1(___rsa, ___p1, ___p2, ___q1, ___q2, ___Xp1, ___moreargs) \
      AROS_LC7(int, RSA_X931_derive_ex_amiga_1, \
 AROS_LCA(RSA *, (___rsa), A0), \
 AROS_LCA(BIGNUM *, (___p1), A1), \
 AROS_LCA(BIGNUM *, (___p2), A2), \
 AROS_LCA(BIGNUM *, (___q1), D0), \
 AROS_LCA(BIGNUM *, (___q2), D1), \
 AROS_LCA(const BIGNUM *, (___Xp1), D2), \
 AROS_LCA(void *, (___moreargs), A3), \
     struct Library *, AMISSL_BASE_NAME, 5378, Amissl)

#define RSA_X931_derive_ex_amiga_2(___Xp2, ___Xp, ___Xq1, ___Xq2, ___Xq, ___e, ___cb) \
      AROS_LC7(void *, RSA_X931_derive_ex_amiga_2, \
 AROS_LCA(const BIGNUM *, (___Xp2), A0), \
 AROS_LCA(const BIGNUM *, (___Xp), A1), \
 AROS_LCA(const BIGNUM *, (___Xq1), A2), \
 AROS_LCA(const BIGNUM *, (___Xq2), D0), \
 AROS_LCA(const BIGNUM *, (___Xq), D1), \
 AROS_LCA(const BIGNUM *, (___e), D2), \
 AROS_LCA(BN_GENCB *, (___cb), A3), \
     struct Library *, AMISSL_BASE_NAME, 5379, Amissl)

#define SSL_CTX_set_async_callback(___ctx, ___callback) \
      AROS_LC2(int, SSL_CTX_set_async_callback, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
 AROS_LCA(SSL_async_callback_fn, (___callback), A1), \
     struct Library *, AMISSL_BASE_NAME, 5381, Amissl)

#define SSL_CTX_set_async_callback_arg(___ctx, ___arg) \
      AROS_LC2(int, SSL_CTX_set_async_callback_arg, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
 AROS_LCA(void *, (___arg), A1), \
     struct Library *, AMISSL_BASE_NAME, 5382, Amissl)

#define SSL_set_async_callback(___s, ___callback) \
      AROS_LC2(int, SSL_set_async_callback, \
 AROS_LCA(SSL *, (___s), A0), \
 AROS_LCA(SSL_async_callback_fn, (___callback), A1), \
     struct Library *, AMISSL_BASE_NAME, 5383, Amissl)

#define SSL_set_async_callback_arg(___s, ___arg) \
      AROS_LC2(int, SSL_set_async_callback_arg, \
 AROS_LCA(SSL *, (___s), A0), \
 AROS_LCA(void *, (___arg), A1), \
     struct Library *, AMISSL_BASE_NAME, 5384, Amissl)

#define SSL_get_async_status(___s, ___status) \
      AROS_LC2(int, SSL_get_async_status, \
 AROS_LCA(SSL *, (___s), A0), \
 AROS_LCA(int *, (___status), A1), \
     struct Library *, AMISSL_BASE_NAME, 5385, Amissl)

#define SSL_sendfile(___s, ___fd, ___offset, ___size, ___flags) \
      AROS_LC5(int, SSL_sendfile, \
 AROS_LCA(SSL *, (___s), A0), \
 AROS_LCA(int, (___fd), D0), \
 AROS_LCA(off_t, (___offset), D1), \
 AROS_LCA(size_t, (___size), D2), \
 AROS_LCA(int, (___flags), D3), \
     struct Library *, AMISSL_BASE_NAME, 5386, Amissl)

#define OSSL_default_cipher_list() \
      AROS_LC0(const char *, OSSL_default_cipher_list, \
     struct Library *, AMISSL_BASE_NAME, 5387, Amissl)

#define OSSL_default_ciphersuites() \
      AROS_LC0(const char *, OSSL_default_ciphersuites, \
     struct Library *, AMISSL_BASE_NAME, 5388, Amissl)

#define SSL_add_store_cert_subjects_to_stack(___stackCAs, ___uri) \
      AROS_LC2(int, SSL_add_store_cert_subjects_to_stack, \
 AROS_LCA(STACK_OF(X509_NAME) *, (___stackCAs), A0), \
 AROS_LCA(const char *, (___uri), A1), \
     struct Library *, AMISSL_BASE_NAME, 5389, Amissl)

#define SSL_CTX_set_default_verify_store(___ctx) \
      AROS_LC1(int, SSL_CTX_set_default_verify_store, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 5390, Amissl)

#define SSL_CTX_load_verify_file(___ctx, ___CAfile) \
      AROS_LC2(int, SSL_CTX_load_verify_file, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
 AROS_LCA(const char *, (___CAfile), A1), \
     struct Library *, AMISSL_BASE_NAME, 5391, Amissl)

#define SSL_CTX_load_verify_dir(___ctx, ___CApath) \
      AROS_LC2(int, SSL_CTX_load_verify_dir, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
 AROS_LCA(const char *, (___CApath), A1), \
     struct Library *, AMISSL_BASE_NAME, 5392, Amissl)

#define SSL_CTX_load_verify_store(___ctx, ___CAstore) \
      AROS_LC2(int, SSL_CTX_load_verify_store, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
 AROS_LCA(const char *, (___CAstore), A1), \
     struct Library *, AMISSL_BASE_NAME, 5393, Amissl)

#define SSL_CTX_set_tlsext_ticket_key_evp_cb(___ctx, ___fp) \
      AROS_LC2(int, SSL_CTX_set_tlsext_ticket_key_evp_cb, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
 AROS_LCA(int (*)(SSL *,unsigned char *,unsigned char *,EVP_CIPHER_CTX *,EVP_MAC_CTX *,int), (___fp), A1), \
     struct Library *, AMISSL_BASE_NAME, 5394, Amissl)

#define SSL_CTX_new_ex(___libctx, ___propq, ___meth) \
      AROS_LC3(SSL_CTX *, SSL_CTX_new_ex, \
 AROS_LCA(OSSL_LIB_CTX *, (___libctx), A0), \
 AROS_LCA(const char *, (___propq), A1), \
 AROS_LCA(const SSL_METHOD *, (___meth), A2), \
     struct Library *, AMISSL_BASE_NAME, 5395, Amissl)

#define SSL_new_session_ticket(___s) \
      AROS_LC1(int, SSL_new_session_ticket, \
 AROS_LCA(SSL *, (___s), A0), \
     struct Library *, AMISSL_BASE_NAME, 5396, Amissl)

#define SSL_get0_peer_certificate(___s) \
      AROS_LC1(X509 *, SSL_get0_peer_certificate, \
 AROS_LCA(const SSL *, (___s), A0), \
     struct Library *, AMISSL_BASE_NAME, 5397, Amissl)

#define SSL_load_client_CA_file_ex(___file, ___libctx, ___propq) \
      AROS_LC3(STACK_OF(X509_NAME) *, SSL_load_client_CA_file_ex, \
 AROS_LCA(const char *, (___file), A0), \
 AROS_LCA(OSSL_LIB_CTX *, (___libctx), A1), \
 AROS_LCA(const char *, (___propq), A2), \
     struct Library *, AMISSL_BASE_NAME, 5398, Amissl)

#define SSL_set0_tmp_dh_pkey(___s, ___dhpkey) \
      AROS_LC2(int, SSL_set0_tmp_dh_pkey, \
 AROS_LCA(SSL *, (___s), A0), \
 AROS_LCA(EVP_PKEY *, (___dhpkey), A1), \
     struct Library *, AMISSL_BASE_NAME, 5399, Amissl)

#define SSL_CTX_set0_tmp_dh_pkey(___ctx, ___dhpkey) \
      AROS_LC2(int, SSL_CTX_set0_tmp_dh_pkey, \
 AROS_LCA(SSL_CTX *, (___ctx), A0), \
 AROS_LCA(EVP_PKEY *, (___dhpkey), A1), \
     struct Library *, AMISSL_BASE_NAME, 5400, Amissl)

#define SSL_group_to_name(___s, ___id) \
      AROS_LC2(const char *, SSL_group_to_name, \
 AROS_LCA(SSL *, (___s), A0), \
 AROS_LCA(int, (___id), D0), \
     struct Library *, AMISSL_BASE_NAME, 5401, Amissl)

#define X509_CRL_load_http(___url, ___bio, ___rbio, ___timeout) \
      AROS_LC4(X509_CRL *, X509_CRL_load_http, \
 AROS_LCA(const char *, (___url), A0), \
 AROS_LCA(BIO *, (___bio), A1), \
 AROS_LCA(BIO *, (___rbio), A2), \
 AROS_LCA(int, (___timeout), D0), \
     struct Library *, AMISSL_BASE_NAME, 5402, Amissl)

#define OSSL_HTTP_parse_url(___url, ___pssl, ___puser, ___phost, ___pport, ___pport_num, ___ppath, ___pquery, ___pfrag) \
      AROS_LC9(int, OSSL_HTTP_parse_url, \
 AROS_LCA(const char *, (___url), A0), \
 AROS_LCA(int *, (___pssl), A1), \
 AROS_LCA(char **, (___puser), A2), \
 AROS_LCA(char **, (___phost), A3), \
 AROS_LCA(char **, (___pport), D0), \
 AROS_LCA(int *, (___pport_num), D1), \
 AROS_LCA(char **, (___ppath), D2), \
 AROS_LCA(char **, (___pquery), D3), \
 AROS_LCA(char **, (___pfrag), D4), \
     struct Library *, AMISSL_BASE_NAME, 5403, Amissl)

#define OSSL_HTTP_REQ_CTX_exchange(___rctx) \
      AROS_LC1(BIO *, OSSL_HTTP_REQ_CTX_exchange, \
 AROS_LCA(OSSL_HTTP_REQ_CTX *, (___rctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 5404, Amissl)

#define OSSL_HTTP_REQ_CTX_new(___wbio, ___rbio, ___buf_size) \
      AROS_LC3(OSSL_HTTP_REQ_CTX *, OSSL_HTTP_REQ_CTX_new, \
 AROS_LCA(BIO *, (___wbio), A0), \
 AROS_LCA(BIO *, (___rbio), A1), \
 AROS_LCA(int, (___buf_size), D0), \
     struct Library *, AMISSL_BASE_NAME, 5405, Amissl)

#define X509_load_http(___url, ___bio, ___rbio, ___timeout) \
      AROS_LC4(X509 *, X509_load_http, \
 AROS_LCA(const char *, (___url), A0), \
 AROS_LCA(BIO *, (___bio), A1), \
 AROS_LCA(BIO *, (___rbio), A2), \
 AROS_LCA(int, (___timeout), D0), \
     struct Library *, AMISSL_BASE_NAME, 5406, Amissl)

#define X509_NAME_hash_ex(___x, ___libctx, ___propq, ___ok) \
      AROS_LC4(unsigned long, X509_NAME_hash_ex, \
 AROS_LCA(const X509_NAME *, (___x), A0), \
 AROS_LCA(OSSL_LIB_CTX *, (___libctx), A1), \
 AROS_LCA(const char *, (___propq), A2), \
 AROS_LCA(int *, (___ok), A3), \
     struct Library *, AMISSL_BASE_NAME, 5407, Amissl)

#define OSSL_HTTP_REQ_CTX_set_request_line(___rctx, ___method_POST, ___server, ___port, ___path) \
      AROS_LC5(int, OSSL_HTTP_REQ_CTX_set_request_line, \
 AROS_LCA(OSSL_HTTP_REQ_CTX *, (___rctx), A0), \
 AROS_LCA(int, (___method_POST), D0), \
 AROS_LCA(const char *, (___server), A1), \
 AROS_LCA(const char *, (___port), A2), \
 AROS_LCA(const char *, (___path), A3), \
     struct Library *, AMISSL_BASE_NAME, 5408, Amissl)

#define OSSL_HTTP_REQ_CTX_set1_req(___rctx, ___content_type, ___it, ___req) \
      AROS_LC4(int, OSSL_HTTP_REQ_CTX_set1_req, \
 AROS_LCA(OSSL_HTTP_REQ_CTX *, (___rctx), A0), \
 AROS_LCA(const char *, (___content_type), A1), \
 AROS_LCA(const ASN1_ITEM *, (___it), A2), \
 AROS_LCA(const ASN1_VALUE *, (___req), A3), \
     struct Library *, AMISSL_BASE_NAME, 5409, Amissl)

#define EVP_MAC_CTX_new(___mac) \
      AROS_LC1(EVP_MAC_CTX *, EVP_MAC_CTX_new, \
 AROS_LCA(EVP_MAC *, (___mac), A0), \
     struct Library *, AMISSL_BASE_NAME, 5410, Amissl)

#define EVP_MAC_CTX_free(___ctx) \
      AROS_LC1(void, EVP_MAC_CTX_free, \
 AROS_LCA(EVP_MAC_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 5411, Amissl)

#define EVP_MAC_CTX_dup(___src) \
      AROS_LC1(EVP_MAC_CTX *, EVP_MAC_CTX_dup, \
 AROS_LCA(const EVP_MAC_CTX *, (___src), A0), \
     struct Library *, AMISSL_BASE_NAME, 5412, Amissl)

#define EVP_MAC_CTX_get0_mac(___ctx) \
      AROS_LC1(EVP_MAC *, EVP_MAC_CTX_get0_mac, \
 AROS_LCA(EVP_MAC_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 5413, Amissl)

#define EVP_MAC_CTX_get_mac_size(___ctx) \
      AROS_LC1(size_t, EVP_MAC_CTX_get_mac_size, \
 AROS_LCA(EVP_MAC_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 5414, Amissl)

#define EVP_Q_mac(___libctx, ___name, ___propq, ___subalg, ___params, ___key, ___keylen, ___data, ___datalen, ___out, ___outsize, ___outlen) \
      AROS_LC12(unsigned char *, EVP_Q_mac, \
 AROS_LCA(OSSL_LIB_CTX *, (___libctx), A0), \
 AROS_LCA(const char *, (___name), A1), \
 AROS_LCA(const char *, (___propq), A2), \
 AROS_LCA(const char *, (___subalg), A3), \
 AROS_LCA(const OSSL_PARAM *, (___params), D0), \
 AROS_LCA(const void *, (___key), D1), \
 AROS_LCA(size_t, (___keylen), D2), \
 AROS_LCA(const unsigned char *, (___data), D3), \
 AROS_LCA(size_t, (___datalen), D4), \
 AROS_LCA(unsigned char *, (___out), D5), \
 AROS_LCA(size_t, (___outsize), D6), \
 AROS_LCA(size_t *, (___outlen), D7), \
     struct Library *, AMISSL_BASE_NAME, 5415, Amissl)

#define EVP_MAC_init(___ctx, ___key, ___keylen, ___params) \
      AROS_LC4(int, EVP_MAC_init, \
 AROS_LCA(EVP_MAC_CTX *, (___ctx), A0), \
 AROS_LCA(const unsigned char *, (___key), A1), \
 AROS_LCA(size_t, (___keylen), D0), \
 AROS_LCA(const OSSL_PARAM *, (___params), A2), \
     struct Library *, AMISSL_BASE_NAME, 5416, Amissl)

#define EVP_MAC_update(___ctx, ___data, ___datalen) \
      AROS_LC3(int, EVP_MAC_update, \
 AROS_LCA(EVP_MAC_CTX *, (___ctx), A0), \
 AROS_LCA(const unsigned char *, (___data), A1), \
 AROS_LCA(size_t, (___datalen), D0), \
     struct Library *, AMISSL_BASE_NAME, 5417, Amissl)

#define EVP_MAC_final(___ctx, ___out, ___outl, ___outsize) \
      AROS_LC4(int, EVP_MAC_final, \
 AROS_LCA(EVP_MAC_CTX *, (___ctx), A0), \
 AROS_LCA(unsigned char *, (___out), A1), \
 AROS_LCA(size_t *, (___outl), A2), \
 AROS_LCA(size_t, (___outsize), D0), \
     struct Library *, AMISSL_BASE_NAME, 5418, Amissl)

#define EVP_MAC_finalXOF(___ctx, ___out, ___outsize) \
      AROS_LC3(int, EVP_MAC_finalXOF, \
 AROS_LCA(EVP_MAC_CTX *, (___ctx), A0), \
 AROS_LCA(unsigned char *, (___out), A1), \
 AROS_LCA(size_t, (___outsize), D0), \
     struct Library *, AMISSL_BASE_NAME, 5419, Amissl)

#define OSSL_EC_curve_nid2name(___nid) \
      AROS_LC1(const char *, OSSL_EC_curve_nid2name, \
 AROS_LCA(int, (___nid), D0), \
     struct Library *, AMISSL_BASE_NAME, 5420, Amissl)

#define EVP_PKEY_digestsign_supports_digest(___pkey, ___libctx, ___name, ___propq) \
      AROS_LC4(int, EVP_PKEY_digestsign_supports_digest, \
 AROS_LCA(EVP_PKEY *, (___pkey), A0), \
 AROS_LCA(OSSL_LIB_CTX *, (___libctx), A1), \
 AROS_LCA(const char *, (___name), A2), \
 AROS_LCA(const char *, (___propq), A3), \
     struct Library *, AMISSL_BASE_NAME, 5421, Amissl)

#define SRP_VBASE_add0_user(___vb, ___user_pwd) \
      AROS_LC2(int, SRP_VBASE_add0_user, \
 AROS_LCA(SRP_VBASE *, (___vb), A0), \
 AROS_LCA(SRP_user_pwd *, (___user_pwd), A1), \
     struct Library *, AMISSL_BASE_NAME, 5422, Amissl)

#define SRP_user_pwd_new() \
      AROS_LC0(SRP_user_pwd *, SRP_user_pwd_new, \
     struct Library *, AMISSL_BASE_NAME, 5423, Amissl)

#define SRP_user_pwd_set_gN(___user_pwd, ___g, ___N) \
      AROS_LC3(void, SRP_user_pwd_set_gN, \
 AROS_LCA(SRP_user_pwd *, (___user_pwd), A0), \
 AROS_LCA(const BIGNUM *, (___g), A1), \
 AROS_LCA(const BIGNUM *, (___N), A2), \
     struct Library *, AMISSL_BASE_NAME, 5424, Amissl)

#define SRP_user_pwd_set1_ids(___user_pwd, ___id, ___info) \
      AROS_LC3(int, SRP_user_pwd_set1_ids, \
 AROS_LCA(SRP_user_pwd *, (___user_pwd), A0), \
 AROS_LCA(const char *, (___id), A1), \
 AROS_LCA(const char *, (___info), A2), \
     struct Library *, AMISSL_BASE_NAME, 5425, Amissl)

#define SRP_user_pwd_set0_sv(___user_pwd, ___s, ___v) \
      AROS_LC3(int, SRP_user_pwd_set0_sv, \
 AROS_LCA(SRP_user_pwd *, (___user_pwd), A0), \
 AROS_LCA(BIGNUM *, (___s), A1), \
 AROS_LCA(BIGNUM *, (___v), A2), \
     struct Library *, AMISSL_BASE_NAME, 5426, Amissl)

#define OPENSSL_version_major() \
      AROS_LC0(unsigned int, OPENSSL_version_major, \
     struct Library *, AMISSL_BASE_NAME, 5427, Amissl)

#define OPENSSL_version_minor() \
      AROS_LC0(unsigned int, OPENSSL_version_minor, \
     struct Library *, AMISSL_BASE_NAME, 5428, Amissl)

#define OPENSSL_version_patch() \
      AROS_LC0(unsigned int, OPENSSL_version_patch, \
     struct Library *, AMISSL_BASE_NAME, 5429, Amissl)

#define OPENSSL_version_pre_release() \
      AROS_LC0(const char *, OPENSSL_version_pre_release, \
     struct Library *, AMISSL_BASE_NAME, 5430, Amissl)

#define OPENSSL_version_build_metadata() \
      AROS_LC0(const char *, OPENSSL_version_build_metadata, \
     struct Library *, AMISSL_BASE_NAME, 5431, Amissl)

#define ASYNC_WAIT_CTX_get_callback(___ctx, ___callback, ___callback_arg) \
      AROS_LC3(int, ASYNC_WAIT_CTX_get_callback, \
 AROS_LCA(ASYNC_WAIT_CTX *, (___ctx), A0), \
 AROS_LCA(ASYNC_callback_fn *, (___callback), A1), \
 AROS_LCA(void **, (___callback_arg), A2), \
     struct Library *, AMISSL_BASE_NAME, 5432, Amissl)

#define ASYNC_WAIT_CTX_set_callback(___ctx, ___callback, ___callback_arg) \
      AROS_LC3(int, ASYNC_WAIT_CTX_set_callback, \
 AROS_LCA(ASYNC_WAIT_CTX *, (___ctx), A0), \
 AROS_LCA(ASYNC_callback_fn, (___callback), A1), \
 AROS_LCA(void *, (___callback_arg), A2), \
     struct Library *, AMISSL_BASE_NAME, 5433, Amissl)

#define ASYNC_WAIT_CTX_set_status(___ctx, ___status) \
      AROS_LC2(int, ASYNC_WAIT_CTX_set_status, \
 AROS_LCA(ASYNC_WAIT_CTX *, (___ctx), A0), \
 AROS_LCA(int, (___status), D0), \
     struct Library *, AMISSL_BASE_NAME, 5434, Amissl)

#define ASYNC_WAIT_CTX_get_status(___ctx) \
      AROS_LC1(int, ASYNC_WAIT_CTX_get_status, \
 AROS_LCA(ASYNC_WAIT_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 5435, Amissl)

#define EVP_KDF_CTX_free(___ctx) \
      AROS_LC1(void, EVP_KDF_CTX_free, \
 AROS_LCA(EVP_KDF_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 5436, Amissl)

#define EVP_KDF_CTX_reset(___ctx) \
      AROS_LC1(void, EVP_KDF_CTX_reset, \
 AROS_LCA(EVP_KDF_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 5437, Amissl)

#define EVP_KDF_CTX_get_kdf_size(___ctx) \
      AROS_LC1(size_t, EVP_KDF_CTX_get_kdf_size, \
 AROS_LCA(EVP_KDF_CTX *, (___ctx), A0), \
     struct Library *, AMISSL_BASE_NAME, 5438, Amissl)

#define EVP_KDF_derive(___ctx, ___key, ___keylen, ___params) \
      AROS_LC4(int, EVP_KDF_derive, \
 AROS_LCA(EVP_KDF_CTX *, (___ctx), A0), \
 AROS_LCA(unsigned char *, (___key), A1), \
 AROS_LCA(size_t, (___keylen), D0), \
 AROS_LCA(const OSSL_PARAM *, (___params), A2), \
     struct Library *, AMISSL_BASE_NAME, 5439, Amissl)

#define EVP_KDF_get0_name(___kdf) \
      AROS_LC1(const char *, EVP_KDF_get0_name, \
 AROS_LCA(const EVP_KDF *, (___kdf), A0), \
     struct Library *, AMISSL_BASE_NAME, 5440, Amissl)

#define EC_GROUP_get0_field(___group) \
      AROS_LC1(const BIGNUM *, EC_GROUP_get0_field, \
 AROS_LCA(const EC_GROUP *, (___group), A0), \
     struct Library *, AMISSL_BASE_NAME, 5441, Amissl)

#define CRYPTO_alloc_ex_data(___class_index, ___obj, ___ad, ___idx) \
      AROS_LC4(int, CRYPTO_alloc_ex_data, \
 AROS_LCA(int, (___class_index), D0), \
 AROS_LCA(void *, (___obj), A0), \
 AROS_LCA(CRYPTO_EX_DATA *, (___ad), A1), \
 AROS_LCA(int, (___idx), D1), \
     struct Library *, AMISSL_BASE_NAME, 5442, Amissl)

#define OSSL_LIB_CTX_new() \
      AROS_LC0(OSSL_LIB_CTX *, OSSL_LIB_CTX_new, \
     struct Library *, AMISSL_BASE_NAME, 5443, Amissl)

#define OSSL_LIB_CTX_free(___a) \
      AROS_LC1(void, OSSL_LIB_CTX_free, \
 AROS_LCA(OSSL_LIB_CTX *, (___a), A0), \
     struct Library *, AMISSL_BASE_NAME, 5444, Amissl)

#define OPENSSL_LH_flush(___lh) \
      AROS_LC1(void, OPENSSL_LH_flush, \
 AROS_LCA(OPENSSL_LHASH *, (___lh), A0), \
     struct Library *, AMISSL_BASE_NAME, 5445, Amissl)

#define BN_native2bn(___s, ___len, ___ret) \
      AROS_LC3(BIGNUM *, BN_native2bn, \
 AROS_LCA(const unsigned char *, (___s), A0), \
 AROS_LCA(int, (___len), D0), \
 AROS_LCA(BIGNUM *, (___ret), A1), \
     struct Library *, AMISSL_BASE_NAME, 5446, Amissl)

#define BN_bn2nativepad(___a, ___to, ___tolen) \
      AROS_LC3(int, BN_bn2nativepad, \
 AROS_LCA(const BIGNUM *, (___a), A0), \
 AROS_LCA(unsigned char *, (___to), A1), \
 AROS_LCA(int, (___tolen), D0), \
     struct Library *, AMISSL_BASE_NAME, 5447, Amissl)

#define OSSL_trace_get_category_num(___name) \
      AROS_LC1(int, OSSL_trace_get_category_num, \
 AROS_LCA(const char *, (___name), A0), \
     struct Library *, AMISSL_BASE_NAME, 5448, Amissl)

#define OSSL_trace_get_category_name(___num) \
      AROS_LC1(const char *, OSSL_trace_get_category_name, \
 AROS_LCA(int, (___num), D0), \
     struct Library *, AMISSL_BASE_NAME, 5449, Amissl)

#define OSSL_trace_set_channel(___category, ___channel) \
      AROS_LC2(int, OSSL_trace_set_channel, \
 AROS_LCA(int, (___category), D0), \
 AROS_LCA(BIO*, (___channel), A0), \
     struct Library *, AMISSL_BASE_NAME, 5450, Amissl)

#define OSSL_trace_set_prefix(___category, ___prefix) \
      AROS_LC2(int, OSSL_trace_set_prefix, \
 AROS_LCA(int, (___category), D0), \
 AROS_LCA(const char *, (___prefix), A0), \
     struct Library *, AMISSL_BASE_NAME, 5451, Amissl)

#define OSSL_trace_set_suffix(___category, ___suffix) \
      AROS_LC2(int, OSSL_trace_set_suffix, \
 AROS_LCA(int, (___category), D0), \
 AROS_LCA(const char *, (___suffix), A0), \
     struct Library *, AMISSL_BASE_NAME, 5452, Amissl)

#define OSSL_trace_set_callback(___category, ___callback, ___data) \
      AROS_LC3(int, OSSL_trace_set_callback, \
 AROS_LCA(int, (___category), D0), \
 AROS_LCA(OSSL_trace_cb, (___callback), A0), \
 AROS_LCA(void *, (___data), A1), \
     struct Library *, AMISSL_BASE_NAME, 5453, Amissl)

#endif /* !_INLINE_AMISSL_H */
