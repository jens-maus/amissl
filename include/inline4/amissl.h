#ifndef INLINE4_AMISSL_H
#define INLINE4_AMISSL_H

/*
** This file was auto generated by idltool 53.35.
**
** It provides compatibility to OS3 style library
** calls by substituting functions.
**
** Do not edit manually.
*/ 

#ifndef EXEC_TYPES_H
#include <exec/types.h>
#endif
#ifndef EXEC_EXEC_H
#include <exec/exec.h>
#endif
#ifndef EXEC_INTERFACES_H
#include <exec/interfaces.h>
#endif

#ifndef DOS_DOS_H
#include <dos/dos.h>
#endif
#ifndef AMISSL_AMISSL_H
#include <amissl/amissl.h>
#endif
#include <interfaces/amissl.h>

/* Inline macros for Interface "main" */
#define InternalInitAmiSSL(amisslinit) IAmiSSL->InternalInitAmiSSL((amisslinit))
#define InitAmiSSLA(tagList) IAmiSSL->InitAmiSSLA((tagList))
#if (defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L) || (__GNUC__ >= 3)
#define InitAmiSSL(...) IAmiSSL->InitAmiSSL(__VA_ARGS__)
#elif (__GNUC__ == 2 && __GNUC_MINOR__ >= 95)
#define InitAmiSSL(...) IAmiSSL->InitAmiSSL(vargs)
#endif
#define CleanupAmiSSLA(tagList) IAmiSSL->CleanupAmiSSLA((tagList))
#if (defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L) || (__GNUC__ >= 3)
#define CleanupAmiSSL(...) IAmiSSL->CleanupAmiSSL(__VA_ARGS__)
#elif (__GNUC__ == 2 && __GNUC_MINOR__ >= 95)
#define CleanupAmiSSL(...) IAmiSSL->CleanupAmiSSL(vargs)
#endif
#define ASN1_TYPE_new() IAmiSSL->ASN1_TYPE_new()
#define ASN1_TYPE_free(a) IAmiSSL->ASN1_TYPE_free((a))
#define d2i_ASN1_TYPE(a, in, len) IAmiSSL->d2i_ASN1_TYPE((a), (in), (len))
#define i2d_ASN1_TYPE(a, out) IAmiSSL->i2d_ASN1_TYPE((a), (out))
#define ASN1_ANY_it() IAmiSSL->ASN1_ANY_it()
#define ASN1_TYPE_get(a) IAmiSSL->ASN1_TYPE_get((a))
#define ASN1_TYPE_set(a, type, value) IAmiSSL->ASN1_TYPE_set((a), (type), (value))
#define ASN1_OBJECT_new() IAmiSSL->ASN1_OBJECT_new()
#define ASN1_OBJECT_free(a) IAmiSSL->ASN1_OBJECT_free((a))
#define i2d_ASN1_OBJECT(a, pp) IAmiSSL->i2d_ASN1_OBJECT((a), (pp))
#define d2i_ASN1_OBJECT(a, pp, length) IAmiSSL->d2i_ASN1_OBJECT((a), (pp), (length))
#define ASN1_OBJECT_it() IAmiSSL->ASN1_OBJECT_it()
#define ASN1_STRING_new() IAmiSSL->ASN1_STRING_new()
#define ASN1_STRING_free(a) IAmiSSL->ASN1_STRING_free((a))
#define ASN1_STRING_dup(a) IAmiSSL->ASN1_STRING_dup((a))
#define ASN1_STRING_type_new(type) IAmiSSL->ASN1_STRING_type_new((type))
#define ASN1_STRING_cmp(a, b) IAmiSSL->ASN1_STRING_cmp((a), (b))
#define ASN1_STRING_set(str, data, len) IAmiSSL->ASN1_STRING_set((str), (data), (len))
#define ASN1_STRING_length(x) IAmiSSL->ASN1_STRING_length((x))
#define ASN1_STRING_length_set(x, n) IAmiSSL->ASN1_STRING_length_set((x), (n))
#define ASN1_STRING_type(x) IAmiSSL->ASN1_STRING_type((x))
#define ASN1_STRING_data(x) IAmiSSL->ASN1_STRING_data((x))
#define ASN1_BIT_STRING_new() IAmiSSL->ASN1_BIT_STRING_new()
#define ASN1_BIT_STRING_free(x) IAmiSSL->ASN1_BIT_STRING_free((x))
#define d2i_ASN1_BIT_STRING(a, in, len) IAmiSSL->d2i_ASN1_BIT_STRING((a), (in), (len))
#define i2d_ASN1_BIT_STRING(a, out) IAmiSSL->i2d_ASN1_BIT_STRING((a), (out))
#define ASN1_BIT_STRING_it() IAmiSSL->ASN1_BIT_STRING_it()
#define ASN1_BIT_STRING_set(a, d, length) IAmiSSL->ASN1_BIT_STRING_set((a), (d), (length))
#define ASN1_BIT_STRING_set_bit(a, n, value) IAmiSSL->ASN1_BIT_STRING_set_bit((a), (n), (value))
#define ASN1_BIT_STRING_get_bit(a, n) IAmiSSL->ASN1_BIT_STRING_get_bit((a), (n))
#define ASN1_BIT_STRING_name_print(out, bs, tbl, indent) IAmiSSL->ASN1_BIT_STRING_name_print((out), (bs), (tbl), (indent))
#define ASN1_BIT_STRING_num_asc(name, tbl) IAmiSSL->ASN1_BIT_STRING_num_asc((name), (tbl))
#define ASN1_BIT_STRING_set_asc(bs, name, value, tbl) IAmiSSL->ASN1_BIT_STRING_set_asc((bs), (name), (value), (tbl))
#define ASN1_INTEGER_new() IAmiSSL->ASN1_INTEGER_new()
#define ASN1_INTEGER_free(x) IAmiSSL->ASN1_INTEGER_free((x))
#define d2i_ASN1_INTEGER(a, in, len) IAmiSSL->d2i_ASN1_INTEGER((a), (in), (len))
#define i2d_ASN1_INTEGER(a, out) IAmiSSL->i2d_ASN1_INTEGER((a), (out))
#define ASN1_INTEGER_it() IAmiSSL->ASN1_INTEGER_it()
#define d2i_ASN1_UINTEGER(a, pp, length) IAmiSSL->d2i_ASN1_UINTEGER((a), (pp), (length))
#define ASN1_INTEGER_dup(x) IAmiSSL->ASN1_INTEGER_dup((x))
#define ASN1_INTEGER_cmp(x, y) IAmiSSL->ASN1_INTEGER_cmp((x), (y))
#define ASN1_ENUMERATED_new() IAmiSSL->ASN1_ENUMERATED_new()
#define ASN1_ENUMERATED_free(x) IAmiSSL->ASN1_ENUMERATED_free((x))
#define d2i_ASN1_ENUMERATED(a, in, len) IAmiSSL->d2i_ASN1_ENUMERATED((a), (in), (len))
#define i2d_ASN1_ENUMERATED(a, out) IAmiSSL->i2d_ASN1_ENUMERATED((a), (out))
#define ASN1_ENUMERATED_it() IAmiSSL->ASN1_ENUMERATED_it()
#define ASN1_UTCTIME_check(a) IAmiSSL->ASN1_UTCTIME_check((a))
#define ASN1_UTCTIME_set(s, t) IAmiSSL->ASN1_UTCTIME_set((s), (t))
#define ASN1_UTCTIME_set_string(s, str) IAmiSSL->ASN1_UTCTIME_set_string((s), (str))
#define ASN1_UTCTIME_cmp_time_t(s, t) IAmiSSL->ASN1_UTCTIME_cmp_time_t((s), (t))
#define ASN1_GENERALIZEDTIME_check(a) IAmiSSL->ASN1_GENERALIZEDTIME_check((a))
#define ASN1_GENERALIZEDTIME_set(s, t) IAmiSSL->ASN1_GENERALIZEDTIME_set((s), (t))
#define ASN1_GENERALIZEDTIME_set_string(s, str) IAmiSSL->ASN1_GENERALIZEDTIME_set_string((s), (str))
#define ASN1_OCTET_STRING_new() IAmiSSL->ASN1_OCTET_STRING_new()
#define ASN1_OCTET_STRING_free(x) IAmiSSL->ASN1_OCTET_STRING_free((x))
#define d2i_ASN1_OCTET_STRING(a, in, len) IAmiSSL->d2i_ASN1_OCTET_STRING((a), (in), (len))
#define i2d_ASN1_OCTET_STRING(a, out) IAmiSSL->i2d_ASN1_OCTET_STRING((a), (out))
#define ASN1_OCTET_STRING_it() IAmiSSL->ASN1_OCTET_STRING_it()
#define ASN1_OCTET_STRING_dup(a) IAmiSSL->ASN1_OCTET_STRING_dup((a))
#define ASN1_OCTET_STRING_cmp(a, b) IAmiSSL->ASN1_OCTET_STRING_cmp((a), (b))
#define ASN1_OCTET_STRING_set(str, data, len) IAmiSSL->ASN1_OCTET_STRING_set((str), (data), (len))
#define ASN1_VISIBLESTRING_new() IAmiSSL->ASN1_VISIBLESTRING_new()
#define ASN1_VISIBLESTRING_free(a) IAmiSSL->ASN1_VISIBLESTRING_free((a))
#define d2i_ASN1_VISIBLESTRING(a, in, len) IAmiSSL->d2i_ASN1_VISIBLESTRING((a), (in), (len))
#define i2d_ASN1_VISIBLESTRING(a, out) IAmiSSL->i2d_ASN1_VISIBLESTRING((a), (out))
#define ASN1_VISIBLESTRING_it() IAmiSSL->ASN1_VISIBLESTRING_it()
#define ASN1_UNIVERSALSTRING_new() IAmiSSL->ASN1_UNIVERSALSTRING_new()
#define ASN1_UNIVERSALSTRING_free(a) IAmiSSL->ASN1_UNIVERSALSTRING_free((a))
#define d2i_ASN1_UNIVERSALSTRING(a, in, len) IAmiSSL->d2i_ASN1_UNIVERSALSTRING((a), (in), (len))
#define i2d_ASN1_UNIVERSALSTRING(a, out) IAmiSSL->i2d_ASN1_UNIVERSALSTRING((a), (out))
#define ASN1_UNIVERSALSTRING_it() IAmiSSL->ASN1_UNIVERSALSTRING_it()
#define ASN1_UTF8STRING_new() IAmiSSL->ASN1_UTF8STRING_new()
#define ASN1_UTF8STRING_free(x) IAmiSSL->ASN1_UTF8STRING_free((x))
#define d2i_ASN1_UTF8STRING(a, in, len) IAmiSSL->d2i_ASN1_UTF8STRING((a), (in), (len))
#define i2d_ASN1_UTF8STRING(a, out) IAmiSSL->i2d_ASN1_UTF8STRING((a), (out))
#define ASN1_UTF8STRING_it() IAmiSSL->ASN1_UTF8STRING_it()
#define ASN1_NULL_new() IAmiSSL->ASN1_NULL_new()
#define ASN1_NULL_free(a) IAmiSSL->ASN1_NULL_free((a))
#define d2i_ASN1_NULL(a, in, len) IAmiSSL->d2i_ASN1_NULL((a), (in), (len))
#define i2d_ASN1_NULL(a, out) IAmiSSL->i2d_ASN1_NULL((a), (out))
#define ASN1_NULL_it() IAmiSSL->ASN1_NULL_it()
#define ASN1_BMPSTRING_new() IAmiSSL->ASN1_BMPSTRING_new()
#define ASN1_BMPSTRING_free(a) IAmiSSL->ASN1_BMPSTRING_free((a))
#define d2i_ASN1_BMPSTRING(a, in, len) IAmiSSL->d2i_ASN1_BMPSTRING((a), (in), (len))
#define i2d_ASN1_BMPSTRING(a, out) IAmiSSL->i2d_ASN1_BMPSTRING((a), (out))
#define ASN1_BMPSTRING_it() IAmiSSL->ASN1_BMPSTRING_it()
#define UTF8_getc(str, len, val) IAmiSSL->UTF8_getc((str), (len), (val))
#define UTF8_putc(str, len, value) IAmiSSL->UTF8_putc((str), (len), (value))
#define ASN1_PRINTABLE_new() IAmiSSL->ASN1_PRINTABLE_new()
#define ASN1_PRINTABLE_free(a) IAmiSSL->ASN1_PRINTABLE_free((a))
#define d2i_ASN1_PRINTABLE(a, in, len) IAmiSSL->d2i_ASN1_PRINTABLE((a), (in), (len))
#define i2d_ASN1_PRINTABLE(a, out) IAmiSSL->i2d_ASN1_PRINTABLE((a), (out))
#define ASN1_PRINTABLE_it() IAmiSSL->ASN1_PRINTABLE_it()
#define DIRECTORYSTRING_new() IAmiSSL->DIRECTORYSTRING_new()
#define DIRECTORYSTRING_free(a) IAmiSSL->DIRECTORYSTRING_free((a))
#define d2i_DIRECTORYSTRING(a, in, len) IAmiSSL->d2i_DIRECTORYSTRING((a), (in), (len))
#define i2d_DIRECTORYSTRING(a, out) IAmiSSL->i2d_DIRECTORYSTRING((a), (out))
#define DIRECTORYSTRING_it() IAmiSSL->DIRECTORYSTRING_it()
#define DISPLAYTEXT_new() IAmiSSL->DISPLAYTEXT_new()
#define DISPLAYTEXT_free(a) IAmiSSL->DISPLAYTEXT_free((a))
#define d2i_DISPLAYTEXT(a, in, len) IAmiSSL->d2i_DISPLAYTEXT((a), (in), (len))
#define i2d_DISPLAYTEXT(a, out) IAmiSSL->i2d_DISPLAYTEXT((a), (out))
#define DISPLAYTEXT_it() IAmiSSL->DISPLAYTEXT_it()
#define ASN1_PRINTABLESTRING_new() IAmiSSL->ASN1_PRINTABLESTRING_new()
#define ASN1_PRINTABLESTRING_free(a) IAmiSSL->ASN1_PRINTABLESTRING_free((a))
#define d2i_ASN1_PRINTABLESTRING(a, in, len) IAmiSSL->d2i_ASN1_PRINTABLESTRING((a), (in), (len))
#define i2d_ASN1_PRINTABLESTRING(a, out) IAmiSSL->i2d_ASN1_PRINTABLESTRING((a), (out))
#define ASN1_PRINTABLESTRING_it() IAmiSSL->ASN1_PRINTABLESTRING_it()
#define ASN1_T61STRING_new() IAmiSSL->ASN1_T61STRING_new()
#define ASN1_T61STRING_free(a) IAmiSSL->ASN1_T61STRING_free((a))
#define d2i_ASN1_T61STRING(a, in, len) IAmiSSL->d2i_ASN1_T61STRING((a), (in), (len))
#define i2d_ASN1_T61STRING(a, out) IAmiSSL->i2d_ASN1_T61STRING((a), (out))
#define ASN1_T61STRING_it() IAmiSSL->ASN1_T61STRING_it()
#define ASN1_IA5STRING_new() IAmiSSL->ASN1_IA5STRING_new()
#define ASN1_IA5STRING_free(a) IAmiSSL->ASN1_IA5STRING_free((a))
#define d2i_ASN1_IA5STRING(a, in, len) IAmiSSL->d2i_ASN1_IA5STRING((a), (in), (len))
#define i2d_ASN1_IA5STRING(a, out) IAmiSSL->i2d_ASN1_IA5STRING((a), (out))
#define ASN1_IA5STRING_it() IAmiSSL->ASN1_IA5STRING_it()
#define ASN1_GENERALSTRING_new() IAmiSSL->ASN1_GENERALSTRING_new()
#define ASN1_GENERALSTRING_free(a) IAmiSSL->ASN1_GENERALSTRING_free((a))
#define d2i_ASN1_GENERALSTRING(a, in, len) IAmiSSL->d2i_ASN1_GENERALSTRING((a), (in), (len))
#define i2d_ASN1_GENERALSTRING(a, out) IAmiSSL->i2d_ASN1_GENERALSTRING((a), (out))
#define ASN1_GENERALSTRING_it() IAmiSSL->ASN1_GENERALSTRING_it()
#define ASN1_UTCTIME_new() IAmiSSL->ASN1_UTCTIME_new()
#define ASN1_UTCTIME_free(a) IAmiSSL->ASN1_UTCTIME_free((a))
#define d2i_ASN1_UTCTIME(a, in, len) IAmiSSL->d2i_ASN1_UTCTIME((a), (in), (len))
#define i2d_ASN1_UTCTIME(a, out) IAmiSSL->i2d_ASN1_UTCTIME((a), (out))
#define ASN1_UTCTIME_it() IAmiSSL->ASN1_UTCTIME_it()
#define ASN1_GENERALIZEDTIME_new() IAmiSSL->ASN1_GENERALIZEDTIME_new()
#define ASN1_GENERALIZEDTIME_free(x) IAmiSSL->ASN1_GENERALIZEDTIME_free((x))
#define d2i_ASN1_GENERALIZEDTIME(a, in, len) IAmiSSL->d2i_ASN1_GENERALIZEDTIME((a), (in), (len))
#define i2d_ASN1_GENERALIZEDTIME(a, out) IAmiSSL->i2d_ASN1_GENERALIZEDTIME((a), (out))
#define ASN1_GENERALIZEDTIME_it() IAmiSSL->ASN1_GENERALIZEDTIME_it()
#define ASN1_TIME_new() IAmiSSL->ASN1_TIME_new()
#define ASN1_TIME_free(a) IAmiSSL->ASN1_TIME_free((a))
#define d2i_ASN1_TIME(a, in, len) IAmiSSL->d2i_ASN1_TIME((a), (in), (len))
#define i2d_ASN1_TIME(a, out) IAmiSSL->i2d_ASN1_TIME((a), (out))
#define ASN1_TIME_it() IAmiSSL->ASN1_TIME_it()
#define ASN1_TIME_set(s, t) IAmiSSL->ASN1_TIME_set((s), (t))
#define ASN1_TIME_check(t) IAmiSSL->ASN1_TIME_check((t))
#define ASN1_TIME_to_generalizedtime(t, out) IAmiSSL->ASN1_TIME_to_generalizedtime((t), (out))
#define i2a_ASN1_INTEGER(bp, a) IAmiSSL->i2a_ASN1_INTEGER((bp), (a))
#define a2i_ASN1_INTEGER(bp, bs, buf, size) IAmiSSL->a2i_ASN1_INTEGER((bp), (bs), (buf), (size))
#define i2a_ASN1_ENUMERATED(bp, a) IAmiSSL->i2a_ASN1_ENUMERATED((bp), (a))
#define a2i_ASN1_ENUMERATED(bp, bs, buf, size) IAmiSSL->a2i_ASN1_ENUMERATED((bp), (bs), (buf), (size))
#define i2a_ASN1_OBJECT(bp, a) IAmiSSL->i2a_ASN1_OBJECT((bp), (a))
#define a2i_ASN1_STRING(bp, bs, buf, size) IAmiSSL->a2i_ASN1_STRING((bp), (bs), (buf), (size))
#define i2a_ASN1_STRING(bp, a, type) IAmiSSL->i2a_ASN1_STRING((bp), (a), (type))
#define i2t_ASN1_OBJECT(buf, buf_len, a) IAmiSSL->i2t_ASN1_OBJECT((buf), (buf_len), (a))
#define a2d_ASN1_OBJECT(out, olen, buf, num) IAmiSSL->a2d_ASN1_OBJECT((out), (olen), (buf), (num))
#define ASN1_OBJECT_create(nid, data, len, sn, ln) IAmiSSL->ASN1_OBJECT_create((nid), (data), (len), (sn), (ln))
#define ASN1_INTEGER_set(a, v) IAmiSSL->ASN1_INTEGER_set((a), (v))
#define ASN1_INTEGER_get(a) IAmiSSL->ASN1_INTEGER_get((a))
#define BN_to_ASN1_INTEGER(bn, ai) IAmiSSL->BN_to_ASN1_INTEGER((bn), (ai))
#define ASN1_INTEGER_to_BN(ai, bn) IAmiSSL->ASN1_INTEGER_to_BN((ai), (bn))
#define ASN1_ENUMERATED_set(a, v) IAmiSSL->ASN1_ENUMERATED_set((a), (v))
#define ASN1_ENUMERATED_get(a) IAmiSSL->ASN1_ENUMERATED_get((a))
#define BN_to_ASN1_ENUMERATED(bn, ai) IAmiSSL->BN_to_ASN1_ENUMERATED((bn), (ai))
#define ASN1_ENUMERATED_to_BN(ai, bn) IAmiSSL->ASN1_ENUMERATED_to_BN((ai), (bn))
#define ASN1_PRINTABLE_type(s, max) IAmiSSL->ASN1_PRINTABLE_type((s), (max))
#define ASN1_tag2bit(tag) IAmiSSL->ASN1_tag2bit((tag))
#define ASN1_get_object(pp, plength, ptag, pclass, omax) IAmiSSL->ASN1_get_object((pp), (plength), (ptag), (pclass), (omax))
#define ASN1_check_infinite_end(p, len) IAmiSSL->ASN1_check_infinite_end((p), (len))
#define ASN1_put_object(pp, constructed, length, tag, xclass) IAmiSSL->ASN1_put_object((pp), (constructed), (length), (tag), (xclass))
#define ASN1_object_size(constructed, length, tag) IAmiSSL->ASN1_object_size((constructed), (length), (tag))
#define ASN1_dup(i2d, d2i, x) IAmiSSL->ASN1_dup((i2d), (d2i), (x))
#define ASN1_item_dup(it, x) IAmiSSL->ASN1_item_dup((it), (x))
#define ASN1_STRING_to_UTF8(out, in) IAmiSSL->ASN1_STRING_to_UTF8((out), (in))
#define ASN1_d2i_bio(xnew, d2i, in, x) IAmiSSL->ASN1_d2i_bio((xnew), (d2i), (in), (x))
#define ASN1_item_d2i_bio(it, in, x) IAmiSSL->ASN1_item_d2i_bio((it), (in), (x))
#define ASN1_i2d_bio(i2d, out, x) IAmiSSL->ASN1_i2d_bio((i2d), (out), (x))
#define ASN1_item_i2d_bio(it, out, x) IAmiSSL->ASN1_item_i2d_bio((it), (out), (x))
#define ASN1_UTCTIME_print(fp, a) IAmiSSL->ASN1_UTCTIME_print((fp), (a))
#define ASN1_GENERALIZEDTIME_print(fp, a) IAmiSSL->ASN1_GENERALIZEDTIME_print((fp), (a))
#define ASN1_TIME_print(fp, a) IAmiSSL->ASN1_TIME_print((fp), (a))
#define ASN1_STRING_print(bp, v) IAmiSSL->ASN1_STRING_print((bp), (v))
#define ASN1_STRING_print_ex(out, str, flags) IAmiSSL->ASN1_STRING_print_ex((out), (str), (flags))
#define ASN1_parse(bp, pp, len, indent) IAmiSSL->ASN1_parse((bp), (pp), (len), (indent))
#define ASN1_parse_dump(bp, pp, len, indent, dump) IAmiSSL->ASN1_parse_dump((bp), (pp), (len), (indent), (dump))
#define ASN1_tag2str(tag) IAmiSSL->ASN1_tag2str((tag))
#define ASN1_UNIVERSALSTRING_to_string(s) IAmiSSL->ASN1_UNIVERSALSTRING_to_string((s))
#define ASN1_TYPE_set_octetstring(a, data, len) IAmiSSL->ASN1_TYPE_set_octetstring((a), (data), (len))
#define ASN1_TYPE_get_octetstring(a, data, max_len) IAmiSSL->ASN1_TYPE_get_octetstring((a), (data), (max_len))
#define ASN1_TYPE_set_int_octetstring(a, num, data, len) IAmiSSL->ASN1_TYPE_set_int_octetstring((a), (num), (data), (len))
#define ASN1_TYPE_get_int_octetstring(a, num, data, max_len) IAmiSSL->ASN1_TYPE_get_int_octetstring((a), (num), (data), (max_len))
#define ASN1_item_unpack(oct, it) IAmiSSL->ASN1_item_unpack((oct), (it))
#define ASN1_item_pack(obj, it, oct) IAmiSSL->ASN1_item_pack((obj), (it), (oct))
#define ASN1_STRING_set_default_mask(mask) IAmiSSL->ASN1_STRING_set_default_mask((mask))
#define ASN1_STRING_set_default_mask_asc(p) IAmiSSL->ASN1_STRING_set_default_mask_asc((p))
#define ASN1_STRING_get_default_mask() IAmiSSL->ASN1_STRING_get_default_mask()
#define ASN1_mbstring_copy(out, in, len, inform, mask) IAmiSSL->ASN1_mbstring_copy((out), (in), (len), (inform), (mask))
#define ASN1_mbstring_ncopy(out, in, len, inform, mask, minsize, maxsize) IAmiSSL->ASN1_mbstring_ncopy((out), (in), (len), (inform), (mask), (minsize), (maxsize))
#define ASN1_STRING_set_by_NID(out, in, inlen, inform, nid) IAmiSSL->ASN1_STRING_set_by_NID((out), (in), (inlen), (inform), (nid))
#define ASN1_STRING_TABLE_get(nid) IAmiSSL->ASN1_STRING_TABLE_get((nid))
#define ASN1_STRING_TABLE_add(a, b, c, d, e) IAmiSSL->ASN1_STRING_TABLE_add((a), (b), (c), (d), (e))
#define ASN1_STRING_TABLE_cleanup() IAmiSSL->ASN1_STRING_TABLE_cleanup()
#define ASN1_item_new(it) IAmiSSL->ASN1_item_new((it))
#define ASN1_item_free(val, it) IAmiSSL->ASN1_item_free((val), (it))
#define ASN1_item_d2i(val, in, len, it) IAmiSSL->ASN1_item_d2i((val), (in), (len), (it))
#define ASN1_item_i2d(val, out, it) IAmiSSL->ASN1_item_i2d((val), (out), (it))
#define ASN1_add_oid_module() IAmiSSL->ASN1_add_oid_module()
#define ERR_load_ASN1_strings() IAmiSSL->ERR_load_ASN1_strings()
#define ASN1_BOOLEAN_it() IAmiSSL->ASN1_BOOLEAN_it()
#define ASN1_TBOOLEAN_it() IAmiSSL->ASN1_TBOOLEAN_it()
#define ASN1_FBOOLEAN_it() IAmiSSL->ASN1_FBOOLEAN_it()
#define ASN1_SEQUENCE_it() IAmiSSL->ASN1_SEQUENCE_it()
#define CBIGNUM_it() IAmiSSL->CBIGNUM_it()
#define BIGNUM_it() IAmiSSL->BIGNUM_it()
#define LONG_it() IAmiSSL->LONG_it()
#define ZLONG_it() IAmiSSL->ZLONG_it()
#define ASN1_item_ex_new(pval, it) IAmiSSL->ASN1_item_ex_new((pval), (it))
#define ASN1_item_ex_free(pval, it) IAmiSSL->ASN1_item_ex_free((pval), (it))
#define ASN1_item_ex_d2i(pval, in, len, it, tag, aclass, opt, ctx) IAmiSSL->ASN1_item_ex_d2i((pval), (in), (len), (it), (tag), (aclass), (opt), (ctx))
#define ASN1_item_ex_i2d(pval, out, it, tag, aclass) IAmiSSL->ASN1_item_ex_i2d((pval), (out), (it), (tag), (aclass))
#define BIO_ctrl_pending(b) IAmiSSL->BIO_ctrl_pending((b))
#define BIO_ctrl_wpending(b) IAmiSSL->BIO_ctrl_wpending((b))
#define BIO_ctrl_get_write_guarantee(b) IAmiSSL->BIO_ctrl_get_write_guarantee((b))
#define BIO_ctrl_get_read_request(b) IAmiSSL->BIO_ctrl_get_read_request((b))
#define BIO_ctrl_reset_read_request(b) IAmiSSL->BIO_ctrl_reset_read_request((b))
#define BIO_set_ex_data(bio, idx, data) IAmiSSL->BIO_set_ex_data((bio), (idx), (data))
#define BIO_get_ex_data(bio, idx) IAmiSSL->BIO_get_ex_data((bio), (idx))
#define OBSOLETE_BIO_get_ex_new_index(argl, argp, new_func, dup_func, free_func) IAmiSSL->OBSOLETE_BIO_get_ex_new_index((argl), (argp), (new_func), (dup_func), (free_func))
#define BIO_number_read(bio) IAmiSSL->BIO_number_read((bio))
#define BIO_number_written(bio) IAmiSSL->BIO_number_written((bio))
#define BIO_s_file() IAmiSSL->BIO_s_file()
#define BIO_new_file(filename, mode) IAmiSSL->BIO_new_file((filename), (mode))
#define BIO_new_fp_amiga(stream, close_flag) IAmiSSL->BIO_new_fp_amiga((stream), (close_flag))
#define BIO_new(type) IAmiSSL->BIO_new((type))
#define BIO_free(a) IAmiSSL->BIO_free((a))
#define BIO_vfree(a) IAmiSSL->BIO_vfree((a))
#define BIO_read(b, data, dlen) IAmiSSL->BIO_read((b), (data), (dlen))
#define BIO_gets(bp, buf, size) IAmiSSL->BIO_gets((bp), (buf), (size))
#define BIO_write(b, data, dlen) IAmiSSL->BIO_write((b), (data), (dlen))
#define BIO_puts(bp, buf) IAmiSSL->BIO_puts((bp), (buf))
#define BIO_indent(b, indent, max) IAmiSSL->BIO_indent((b), (indent), (max))
#define BIO_ctrl(bp, cmd, larg, parg) IAmiSSL->BIO_ctrl((bp), (cmd), (larg), (parg))
#define BIO_callback_ctrl(b, cmd, fp) IAmiSSL->BIO_callback_ctrl((b), (cmd), (fp))
#define BIO_ptr_ctrl(bp, cmd, larg) IAmiSSL->BIO_ptr_ctrl((bp), (cmd), (larg))
#define BIO_int_ctrl(bp, cmd, larg, iarg) IAmiSSL->BIO_int_ctrl((bp), (cmd), (larg), (iarg))
#define BIO_push(b, append) IAmiSSL->BIO_push((b), (append))
#define BIO_pop(b) IAmiSSL->BIO_pop((b))
#define BIO_free_all(a) IAmiSSL->BIO_free_all((a))
#define BIO_find_type(b, bio_type) IAmiSSL->BIO_find_type((b), (bio_type))
#define BIO_next(b) IAmiSSL->BIO_next((b))
#define BIO_get_retry_BIO(bio, reason) IAmiSSL->BIO_get_retry_BIO((bio), (reason))
#define BIO_get_retry_reason(bio) IAmiSSL->BIO_get_retry_reason((bio))
#define BIO_dup_chain(in) IAmiSSL->BIO_dup_chain((in))
#define BIO_nread0(bio, buf) IAmiSSL->BIO_nread0((bio), (buf))
#define BIO_nread(bio, buf, num) IAmiSSL->BIO_nread((bio), (buf), (num))
#define BIO_nwrite0(bio, buf) IAmiSSL->BIO_nwrite0((bio), (buf))
#define BIO_nwrite(bio, buf, num) IAmiSSL->BIO_nwrite((bio), (buf), (num))
#define BIO_debug_callback(bio, cmd, argp, argi, argl, ret) IAmiSSL->BIO_debug_callback((bio), (cmd), (argp), (argi), (argl), (ret))
#define BIO_s_mem() IAmiSSL->BIO_s_mem()
#define BIO_new_mem_buf(buf, len) IAmiSSL->BIO_new_mem_buf((buf), (len))
#define BIO_s_socket() IAmiSSL->BIO_s_socket()
#define BIO_s_connect() IAmiSSL->BIO_s_connect()
#define BIO_s_accept() IAmiSSL->BIO_s_accept()
#define BIO_s_fd() IAmiSSL->BIO_s_fd()
#define BIO_s_log() IAmiSSL->BIO_s_log()
#define BIO_s_bio() IAmiSSL->BIO_s_bio()
#define BIO_s_null() IAmiSSL->BIO_s_null()
#define BIO_f_null() IAmiSSL->BIO_f_null()
#define BIO_f_buffer() IAmiSSL->BIO_f_buffer()
#define BIO_f_nbio_test() IAmiSSL->BIO_f_nbio_test()
#define BIO_sock_should_retry(i) IAmiSSL->BIO_sock_should_retry((i))
#define BIO_sock_non_fatal_error(error) IAmiSSL->BIO_sock_non_fatal_error((error))
#define BIO_fd_should_retry(i) IAmiSSL->BIO_fd_should_retry((i))
#define BIO_fd_non_fatal_error(error) IAmiSSL->BIO_fd_non_fatal_error((error))
#define BIO_dump(b, bytes, len) IAmiSSL->BIO_dump((b), (bytes), (len))
#define BIO_dump_indent(b, bytes, len, indent) IAmiSSL->BIO_dump_indent((b), (bytes), (len), (indent))
#define BIO_gethostbyname(name) IAmiSSL->BIO_gethostbyname((name))
#define BIO_sock_error(sock) IAmiSSL->BIO_sock_error((sock))
#define BIO_socket_ioctl(fd, type, arg) IAmiSSL->BIO_socket_ioctl((fd), (type), (arg))
#define BIO_socket_nbio(fd, mode) IAmiSSL->BIO_socket_nbio((fd), (mode))
#define BIO_get_port(str, port_ptr) IAmiSSL->BIO_get_port((str), (port_ptr))
#define BIO_get_host_ip(str, ip) IAmiSSL->BIO_get_host_ip((str), (ip))
#define BIO_get_accept_socket(host_port, mode) IAmiSSL->BIO_get_accept_socket((host_port), (mode))
#define BIO_accept(sock, ip_port) IAmiSSL->BIO_accept((sock), (ip_port))
#define BIO_sock_init() IAmiSSL->BIO_sock_init()
#define BIO_set_tcp_ndelay(sock, turn_on) IAmiSSL->BIO_set_tcp_ndelay((sock), (turn_on))
#define BIO_new_socket(sock, close_flag) IAmiSSL->BIO_new_socket((sock), (close_flag))
#define BIO_new_fd(fd, close_flag) IAmiSSL->BIO_new_fd((fd), (close_flag))
#define BIO_new_connect(host_port) IAmiSSL->BIO_new_connect((host_port))
#define BIO_new_accept(host_port) IAmiSSL->BIO_new_accept((host_port))
#define BIO_new_bio_pair(bio1, writebuf1, bio2, writebuf2) IAmiSSL->BIO_new_bio_pair((bio1), (writebuf1), (bio2), (writebuf2))
#define BIO_copy_next_retry(b) IAmiSSL->BIO_copy_next_retry((b))
#define BIO_vprintf(bio, format, args) IAmiSSL->BIO_vprintf((bio), (format), (args))
#if (defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L) || (__GNUC__ >= 3)
#define BIO_printf(bio, ...) IAmiSSL->BIO_printf((bio), __VA_ARGS__)
#elif (__GNUC__ == 2 && __GNUC_MINOR__ >= 95)
#define BIO_printf(bio, vargs...) IAmiSSL->BIO_printf(bio, vargs)
#endif
#define BIO_vsnprintf(buf, n, format, args) IAmiSSL->BIO_vsnprintf((buf), (n), (format), (args))
#if (defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L) || (__GNUC__ >= 3)
#define BIO_snprintf(buf, n, ...) IAmiSSL->BIO_snprintf((buf), (n), __VA_ARGS__)
#elif (__GNUC__ == 2 && __GNUC_MINOR__ >= 95)
#define BIO_snprintf(buf, n, vargs...) IAmiSSL->BIO_snprintf(buf, n, vargs)
#endif
#define ERR_load_BIO_strings() IAmiSSL->ERR_load_BIO_strings()
#define BN_value_one() IAmiSSL->BN_value_one()
#define BN_options() IAmiSSL->BN_options()
#define BN_CTX_new() IAmiSSL->BN_CTX_new()
#define BN_CTX_free(c) IAmiSSL->BN_CTX_free((c))
#define BN_CTX_start(ctx) IAmiSSL->BN_CTX_start((ctx))
#define BN_CTX_get(ctx) IAmiSSL->BN_CTX_get((ctx))
#define BN_CTX_end(ctx) IAmiSSL->BN_CTX_end((ctx))
#define BN_rand(rnd, bits, top, bottom) IAmiSSL->BN_rand((rnd), (bits), (top), (bottom))
#define BN_pseudo_rand(rnd, bits, top, bottom) IAmiSSL->BN_pseudo_rand((rnd), (bits), (top), (bottom))
#define BN_rand_range(rnd, range) IAmiSSL->BN_rand_range((rnd), (range))
#define BN_pseudo_rand_range(rnd, range) IAmiSSL->BN_pseudo_rand_range((rnd), (range))
#define BN_num_bits(a) IAmiSSL->BN_num_bits((a))
#define BN_num_bits_word(a) IAmiSSL->BN_num_bits_word((a))
#define BN_new() IAmiSSL->BN_new()
#define BN_clear_free(a) IAmiSSL->BN_clear_free((a))
#define BN_copy(a, b) IAmiSSL->BN_copy((a), (b))
#define BN_swap(a, b) IAmiSSL->BN_swap((a), (b))
#define BN_bin2bn(s, len, ret) IAmiSSL->BN_bin2bn((s), (len), (ret))
#define BN_bn2bin(a, to) IAmiSSL->BN_bn2bin((a), (to))
#define BN_mpi2bn(s, len, ret) IAmiSSL->BN_mpi2bn((s), (len), (ret))
#define BN_bn2mpi(a, to) IAmiSSL->BN_bn2mpi((a), (to))
#define BN_sub(r, a, b) IAmiSSL->BN_sub((r), (a), (b))
#define BN_usub(r, a, b) IAmiSSL->BN_usub((r), (a), (b))
#define BN_uadd(r, a, b) IAmiSSL->BN_uadd((r), (a), (b))
#define BN_add(r, a, b) IAmiSSL->BN_add((r), (a), (b))
#define BN_mul(r, a, b, ctx) IAmiSSL->BN_mul((r), (a), (b), (ctx))
#define BN_sqr(r, a, ctx) IAmiSSL->BN_sqr((r), (a), (ctx))
#define BN_div(dv, rem, m, d, ctx) IAmiSSL->BN_div((dv), (rem), (m), (d), (ctx))
#define BN_nnmod(r, m, d, ctx) IAmiSSL->BN_nnmod((r), (m), (d), (ctx))
#define BN_mod_add(r, a, b, m, ctx) IAmiSSL->BN_mod_add((r), (a), (b), (m), (ctx))
#define BN_mod_add_quick(r, a, b, m) IAmiSSL->BN_mod_add_quick((r), (a), (b), (m))
#define BN_mod_sub(r, a, b, m, ctx) IAmiSSL->BN_mod_sub((r), (a), (b), (m), (ctx))
#define BN_mod_sub_quick(r, a, b, m) IAmiSSL->BN_mod_sub_quick((r), (a), (b), (m))
#define BN_mod_mul(r, a, b, m, ctx) IAmiSSL->BN_mod_mul((r), (a), (b), (m), (ctx))
#define BN_mod_sqr(r, a, m, ctx) IAmiSSL->BN_mod_sqr((r), (a), (m), (ctx))
#define BN_mod_lshift1(r, a, m, ctx) IAmiSSL->BN_mod_lshift1((r), (a), (m), (ctx))
#define BN_mod_lshift1_quick(r, a, m) IAmiSSL->BN_mod_lshift1_quick((r), (a), (m))
#define BN_mod_lshift(r, a, n, m, ctx) IAmiSSL->BN_mod_lshift((r), (a), (n), (m), (ctx))
#define BN_mod_lshift_quick(r, a, n, m) IAmiSSL->BN_mod_lshift_quick((r), (a), (n), (m))
#define BN_mod_word(a, w) IAmiSSL->BN_mod_word((a), (w))
#define BN_div_word(a, w) IAmiSSL->BN_div_word((a), (w))
#define BN_mul_word(a, w) IAmiSSL->BN_mul_word((a), (w))
#define BN_add_word(a, w) IAmiSSL->BN_add_word((a), (w))
#define BN_sub_word(a, w) IAmiSSL->BN_sub_word((a), (w))
#define BN_set_word(a, w) IAmiSSL->BN_set_word((a), (w))
#define BN_get_word(a) IAmiSSL->BN_get_word((a))
#define BN_cmp(a, b) IAmiSSL->BN_cmp((a), (b))
#define BN_free(a) IAmiSSL->BN_free((a))
#define BN_is_bit_set(a, n) IAmiSSL->BN_is_bit_set((a), (n))
#define BN_lshift(r, a, n) IAmiSSL->BN_lshift((r), (a), (n))
#define BN_lshift1(r, a) IAmiSSL->BN_lshift1((r), (a))
#define BN_exp(r, a, p, ctx) IAmiSSL->BN_exp((r), (a), (p), (ctx))
#define BN_mod_exp(r, a, p, m, ctx) IAmiSSL->BN_mod_exp((r), (a), (p), (m), (ctx))
#define BN_mod_exp_mont(r, a, p, m, ctx, m_ctx) IAmiSSL->BN_mod_exp_mont((r), (a), (p), (m), (ctx), (m_ctx))
#define BN_mod_exp_mont_word(r, a, p, m, ctx, m_ctx) IAmiSSL->BN_mod_exp_mont_word((r), (a), (p), (m), (ctx), (m_ctx))
#define BN_mod_exp2_mont(r, a1, p1, a2, p2, m, ctx, m_ctx) IAmiSSL->BN_mod_exp2_mont((r), (a1), (p1), (a2), (p2), (m), (ctx), (m_ctx))
#define BN_mod_exp_simple(r, a, p, m, ctx) IAmiSSL->BN_mod_exp_simple((r), (a), (p), (m), (ctx))
#define BN_mask_bits(a, n) IAmiSSL->BN_mask_bits((a), (n))
#define BN_print(fp, a) IAmiSSL->BN_print((fp), (a))
#define BN_reciprocal(r, m, len, ctx) IAmiSSL->BN_reciprocal((r), (m), (len), (ctx))
#define BN_rshift(r, a, n) IAmiSSL->BN_rshift((r), (a), (n))
#define BN_rshift1(r, a) IAmiSSL->BN_rshift1((r), (a))
#define BN_clear(a) IAmiSSL->BN_clear((a))
#define BN_dup(a) IAmiSSL->BN_dup((a))
#define BN_ucmp(a, b) IAmiSSL->BN_ucmp((a), (b))
#define BN_set_bit(a, n) IAmiSSL->BN_set_bit((a), (n))
#define BN_clear_bit(a, n) IAmiSSL->BN_clear_bit((a), (n))
#define BN_bn2hex(a) IAmiSSL->BN_bn2hex((a))
#define BN_bn2dec(a) IAmiSSL->BN_bn2dec((a))
#define BN_hex2bn(a, str) IAmiSSL->BN_hex2bn((a), (str))
#define BN_dec2bn(a, str) IAmiSSL->BN_dec2bn((a), (str))
#define BN_gcd(r, a, b, ctx) IAmiSSL->BN_gcd((r), (a), (b), (ctx))
#define BN_kronecker(a, b, ctx) IAmiSSL->BN_kronecker((a), (b), (ctx))
#define BN_mod_inverse(ret, a, n, ctx) IAmiSSL->BN_mod_inverse((ret), (a), (n), (ctx))
#define BN_mod_sqrt(ret, a, n, ctx) IAmiSSL->BN_mod_sqrt((ret), (a), (n), (ctx))
#define BN_generate_prime(ret, bits, safe, add, rem, callback, cb_arg) IAmiSSL->BN_generate_prime((ret), (bits), (safe), (add), (rem), (callback), (cb_arg))
#define BN_is_prime(p, nchecks, callback, ctx, cb_arg) IAmiSSL->BN_is_prime((p), (nchecks), (callback), (ctx), (cb_arg))
#define BN_is_prime_fasttest(p, nchecks, callback, ctx, cb_arg, do_trial_division) IAmiSSL->BN_is_prime_fasttest((p), (nchecks), (callback), (ctx), (cb_arg), (do_trial_division))
#define BN_MONT_CTX_new() IAmiSSL->BN_MONT_CTX_new()
#define BN_mod_mul_montgomery(r, a, b, mont, ctx) IAmiSSL->BN_mod_mul_montgomery((r), (a), (b), (mont), (ctx))
#define BN_from_montgomery(r, a, mont, ctx) IAmiSSL->BN_from_montgomery((r), (a), (mont), (ctx))
#define BN_MONT_CTX_free(mont) IAmiSSL->BN_MONT_CTX_free((mont))
#define BN_MONT_CTX_set(mont, mod, ctx) IAmiSSL->BN_MONT_CTX_set((mont), (mod), (ctx))
#define BN_MONT_CTX_copy(to, from) IAmiSSL->BN_MONT_CTX_copy((to), (from))
#define BN_BLINDING_new(A, Ai, mod) IAmiSSL->BN_BLINDING_new((A), (Ai), (mod))
#define BN_BLINDING_free(b) IAmiSSL->BN_BLINDING_free((b))
#define BN_BLINDING_update(b, ctx) IAmiSSL->BN_BLINDING_update((b), (ctx))
#define BN_BLINDING_convert(n, r, ctx) IAmiSSL->BN_BLINDING_convert((n), (r), (ctx))
#define BN_BLINDING_invert(n, b, ctx) IAmiSSL->BN_BLINDING_invert((n), (b), (ctx))
#define BN_set_params(mul, high, low, mont) IAmiSSL->BN_set_params((mul), (high), (low), (mont))
#define BN_get_params(which) IAmiSSL->BN_get_params((which))
#define BN_RECP_CTX_new() IAmiSSL->BN_RECP_CTX_new()
#define BN_RECP_CTX_free(recp) IAmiSSL->BN_RECP_CTX_free((recp))
#define BN_RECP_CTX_set(recp, rdiv, ctx) IAmiSSL->BN_RECP_CTX_set((recp), (rdiv), (ctx))
#define BN_mod_mul_reciprocal(r, x, y, recp, ctx) IAmiSSL->BN_mod_mul_reciprocal((r), (x), (y), (recp), (ctx))
#define BN_mod_exp_recp(r, a, p, m, ctx) IAmiSSL->BN_mod_exp_recp((r), (a), (p), (m), (ctx))
#define BN_div_recp(dv, rem, m, recp, ctx) IAmiSSL->BN_div_recp((dv), (rem), (m), (recp), (ctx))
#define BN_bntest_rand(rnd, bits, top, bottom) IAmiSSL->BN_bntest_rand((rnd), (bits), (top), (bottom))
#define ERR_load_BN_strings() IAmiSSL->ERR_load_BN_strings()
#define BUF_MEM_new() IAmiSSL->BUF_MEM_new()
#define BUF_MEM_free(a) IAmiSSL->BUF_MEM_free((a))
#define BUF_MEM_grow(str, len) IAmiSSL->BUF_MEM_grow((str), (len))
#define BUF_MEM_grow_clean(str, len) IAmiSSL->BUF_MEM_grow_clean((str), (len))
#define OBSOLETE_BUF_strdup(str) IAmiSSL->OBSOLETE_BUF_strdup((str))
#define OBSOLETE_BUF_strlcpy(dst, src, siz) IAmiSSL->OBSOLETE_BUF_strlcpy((dst), (src), (siz))
#define OBSOLETE_BUF_strlcat(dst, src, siz) IAmiSSL->OBSOLETE_BUF_strlcat((dst), (src), (siz))
#define ERR_load_BUF_strings() IAmiSSL->ERR_load_BUF_strings()
#define COMP_CTX_new(meth) IAmiSSL->COMP_CTX_new((meth))
#define COMP_CTX_free(ctx) IAmiSSL->COMP_CTX_free((ctx))
#define COMP_compress_block(ctx, out, olen, in, ilen) IAmiSSL->COMP_compress_block((ctx), (out), (olen), (in), (ilen))
#define COMP_expand_block(ctx, out, olen, in, ilen) IAmiSSL->COMP_expand_block((ctx), (out), (olen), (in), (ilen))
#define COMP_zlib() IAmiSSL->COMP_zlib()
#define ERR_load_COMP_strings() IAmiSSL->ERR_load_COMP_strings()
#define CONF_set_default_method(meth) IAmiSSL->CONF_set_default_method((meth))
#define CONF_set_nconf(conf, hash) IAmiSSL->CONF_set_nconf((conf), (hash))
#define CONF_load(conf, file, eline) IAmiSSL->CONF_load((conf), (file), (eline))
#define CONF_load_bio(conf, bp, eline) IAmiSSL->CONF_load_bio((conf), (bp), (eline))
#define CONF_get_section(conf, section) IAmiSSL->CONF_get_section((conf), (section))
#define CONF_get_string(conf, group, name) IAmiSSL->CONF_get_string((conf), (group), (name))
#define CONF_get_number(conf, group, name) IAmiSSL->CONF_get_number((conf), (group), (name))
#define CONF_free(conf) IAmiSSL->CONF_free((conf))
#define CONF_dump_bio(conf, out) IAmiSSL->CONF_dump_bio((conf), (out))
#define OPENSSL_config(config_name) IAmiSSL->OPENSSL_config((config_name))
#define OBSOLETE_OPENSSL_no_config() IAmiSSL->OBSOLETE_OPENSSL_no_config()
#define NCONF_new(meth) IAmiSSL->NCONF_new((meth))
#define NCONF_default() IAmiSSL->NCONF_default()
#define NCONF_WIN32() IAmiSSL->NCONF_WIN32()
#define NCONF_free(conf) IAmiSSL->NCONF_free((conf))
#define NCONF_free_data(conf) IAmiSSL->NCONF_free_data((conf))
#define NCONF_load(conf, file, eline) IAmiSSL->NCONF_load((conf), (file), (eline))
#define NCONF_load_bio(conf, bp, eline) IAmiSSL->NCONF_load_bio((conf), (bp), (eline))
#define NCONF_get_section(conf, section) IAmiSSL->NCONF_get_section((conf), (section))
#define NCONF_get_string(conf, group, name) IAmiSSL->NCONF_get_string((conf), (group), (name))
#define NCONF_get_number_e(conf, group, name, result) IAmiSSL->NCONF_get_number_e((conf), (group), (name), (result))
#define NCONF_dump_bio(conf, out) IAmiSSL->NCONF_dump_bio((conf), (out))
#define CONF_modules_load(cnf, appname, flags) IAmiSSL->CONF_modules_load((cnf), (appname), (flags))
#define CONF_modules_load_file(filename, appname, flags) IAmiSSL->CONF_modules_load_file((filename), (appname), (flags))
#define CONF_modules_unload(all) IAmiSSL->CONF_modules_unload((all))
#define CONF_modules_finish() IAmiSSL->CONF_modules_finish()
#define CONF_module_add(name, ifunc, ffunc) IAmiSSL->CONF_module_add((name), (ifunc), (ffunc))
#define CONF_imodule_get_name(md) IAmiSSL->CONF_imodule_get_name((md))
#define CONF_imodule_get_value(md) IAmiSSL->CONF_imodule_get_value((md))
#define CONF_imodule_get_usr_data(md) IAmiSSL->CONF_imodule_get_usr_data((md))
#define CONF_imodule_set_usr_data(md, usr_data) IAmiSSL->CONF_imodule_set_usr_data((md), (usr_data))
#define CONF_imodule_get_module(md) IAmiSSL->CONF_imodule_get_module((md))
#define CONF_imodule_get_flags(md) IAmiSSL->CONF_imodule_get_flags((md))
#define CONF_imodule_set_flags(md, flags) IAmiSSL->CONF_imodule_set_flags((md), (flags))
#define CONF_module_get_usr_data(pmod) IAmiSSL->CONF_module_get_usr_data((pmod))
#define CONF_module_set_usr_data(pmod, usr_data) IAmiSSL->CONF_module_set_usr_data((pmod), (usr_data))
#define CONF_get1_default_config_file() IAmiSSL->CONF_get1_default_config_file()
#define CONF_parse_list(list, sep, nospc, list_cb, arg) IAmiSSL->CONF_parse_list((list), (sep), (nospc), (list_cb), (arg))
#define OPENSSL_load_builtin_modules() IAmiSSL->OPENSSL_load_builtin_modules()
#define ERR_load_CONF_strings() IAmiSSL->ERR_load_CONF_strings()
#define OBSOLETE_SSLeay_version(type) IAmiSSL->OBSOLETE_SSLeay_version((type))
#define OBSOLETE_SSLeay() IAmiSSL->OBSOLETE_SSLeay()
#define OPENSSL_issetugid() IAmiSSL->OPENSSL_issetugid()
#define CRYPTO_get_ex_new_index(class_index, argl, argp, new_func, dup_func, free_func) IAmiSSL->CRYPTO_get_ex_new_index((class_index), (argl), (argp), (new_func), (dup_func), (free_func))
#define CRYPTO_new_ex_data(class_index, obj, ad) IAmiSSL->CRYPTO_new_ex_data((class_index), (obj), (ad))
#define CRYPTO_dup_ex_data(class_index, to, from) IAmiSSL->CRYPTO_dup_ex_data((class_index), (to), (from))
#define CRYPTO_free_ex_data(class_index, obj, ad) IAmiSSL->CRYPTO_free_ex_data((class_index), (obj), (ad))
#define CRYPTO_set_ex_data(ad, idx, val) IAmiSSL->CRYPTO_set_ex_data((ad), (idx), (val))
#define CRYPTO_get_ex_data(ad, idx) IAmiSSL->CRYPTO_get_ex_data((ad), (idx))
#define CRYPTO_set_mem_functions(malloc_fn, realloc_fn, free_fn) IAmiSSL->CRYPTO_set_mem_functions((malloc_fn), (realloc_fn), (free_fn))
#define CRYPTO_get_mem_functions(malloc_fn, realloc_fn, free_fn) IAmiSSL->CRYPTO_get_mem_functions((malloc_fn), (realloc_fn), (free_fn))
#define CRYPTO_malloc(num, file, line) IAmiSSL->CRYPTO_malloc((num), (file), (line))
#define CRYPTO_free(str, file, line) IAmiSSL->CRYPTO_free((str), (file), (line))
#define CRYPTO_realloc(addr, num, file, line) IAmiSSL->CRYPTO_realloc((addr), (num), (file), (line))
#define OPENSSL_cleanse(ptr, len) IAmiSSL->OPENSSL_cleanse((ptr), (len))
#define ERR_load_CRYPTO_strings() IAmiSSL->ERR_load_CRYPTO_strings()
#define EC_GFp_simple_method() IAmiSSL->EC_GFp_simple_method()
#define EC_GFp_mont_method() IAmiSSL->EC_GFp_mont_method()
#define EC_GROUP_new(a) IAmiSSL->EC_GROUP_new((a))
#define EC_GROUP_free(a) IAmiSSL->EC_GROUP_free((a))
#define EC_GROUP_clear_free(a) IAmiSSL->EC_GROUP_clear_free((a))
#define EC_GROUP_copy(a, b) IAmiSSL->EC_GROUP_copy((a), (b))
#define EC_GROUP_method_of(a) IAmiSSL->EC_GROUP_method_of((a))
#define EC_GROUP_set_curve_GFp(a1, p, a, b, a2) IAmiSSL->EC_GROUP_set_curve_GFp((a1), (p), (a), (b), (a2))
#define EC_GROUP_get_curve_GFp(a1, p, a, b, a2) IAmiSSL->EC_GROUP_get_curve_GFp((a1), (p), (a), (b), (a2))
#define EC_GROUP_new_curve_GFp(p, a, b, a1) IAmiSSL->EC_GROUP_new_curve_GFp((p), (a), (b), (a1))
#define EC_GROUP_set_generator(a1, generator, order, cofactor) IAmiSSL->EC_GROUP_set_generator((a1), (generator), (order), (cofactor))
#define EC_GROUP_get0_generator(a1) IAmiSSL->EC_GROUP_get0_generator((a1))
#define EC_GROUP_get_order(a1, order, a2) IAmiSSL->EC_GROUP_get_order((a1), (order), (a2))
#define EC_GROUP_get_cofactor(a1, cofactor, a2) IAmiSSL->EC_GROUP_get_cofactor((a1), (cofactor), (a2))
#define EC_POINT_new(a) IAmiSSL->EC_POINT_new((a))
#define EC_POINT_free(a) IAmiSSL->EC_POINT_free((a))
#define EC_POINT_clear_free(a) IAmiSSL->EC_POINT_clear_free((a))
#define EC_POINT_copy(a, b) IAmiSSL->EC_POINT_copy((a), (b))
#define EC_POINT_method_of(a) IAmiSSL->EC_POINT_method_of((a))
#define EC_POINT_set_to_infinity(a, b) IAmiSSL->EC_POINT_set_to_infinity((a), (b))
#define EC_POINT_set_Jprojective_coordinates_GFp(a1, a2, x, y, z, a3) IAmiSSL->EC_POINT_set_Jprojective_coordinates_GFp((a1), (a2), (x), (y), (z), (a3))
#define EC_POINT_get_Jprojective_coordinates_GFp(a1, a2, x, y, z, a3) IAmiSSL->EC_POINT_get_Jprojective_coordinates_GFp((a1), (a2), (x), (y), (z), (a3))
#define EC_POINT_set_affine_coordinates_GFp(a1, a2, x, y, a3) IAmiSSL->EC_POINT_set_affine_coordinates_GFp((a1), (a2), (x), (y), (a3))
#define EC_POINT_get_affine_coordinates_GFp(a1, a2, x, y, a3) IAmiSSL->EC_POINT_get_affine_coordinates_GFp((a1), (a2), (x), (y), (a3))
#define EC_POINT_set_compressed_coordinates_GFp(a1, a2, x, y_bit, a3) IAmiSSL->EC_POINT_set_compressed_coordinates_GFp((a1), (a2), (x), (y_bit), (a3))
#define EC_POINT_point2oct(a1, a2, form, buf, len, a3) IAmiSSL->EC_POINT_point2oct((a1), (a2), (form), (buf), (len), (a3))
#define EC_POINT_oct2point(a1, a2, buf, len, a3) IAmiSSL->EC_POINT_oct2point((a1), (a2), (buf), (len), (a3))
#define EC_POINT_add(a1, r, a, b, a2) IAmiSSL->EC_POINT_add((a1), (r), (a), (b), (a2))
#define EC_POINT_dbl(a1, r, a, a2) IAmiSSL->EC_POINT_dbl((a1), (r), (a), (a2))
#define EC_POINT_invert(a1, a2, a3) IAmiSSL->EC_POINT_invert((a1), (a2), (a3))
#define EC_POINT_is_at_infinity(a, b) IAmiSSL->EC_POINT_is_at_infinity((a), (b))
#define EC_POINT_is_on_curve(a, b, c) IAmiSSL->EC_POINT_is_on_curve((a), (b), (c))
#define EC_POINT_cmp(a1, a, b, a2) IAmiSSL->EC_POINT_cmp((a1), (a), (b), (a2))
#define EC_POINT_make_affine(a, b, c) IAmiSSL->EC_POINT_make_affine((a), (b), (c))
#define EC_POINTs_make_affine(a1, num, a2, a3) IAmiSSL->EC_POINTs_make_affine((a1), (num), (a2), (a3))
#define EC_POINTs_mul(a1, r, a2, num, a3, a4, a5) IAmiSSL->EC_POINTs_mul((a1), (r), (a2), (num), (a3), (a4), (a5))
#define EC_POINT_mul(a1, r, a2, a3, a4, a5) IAmiSSL->EC_POINT_mul((a1), (r), (a2), (a3), (a4), (a5))
#define EC_GROUP_precompute_mult(a, b) IAmiSSL->EC_GROUP_precompute_mult((a), (b))
#define ERR_load_EC_strings() IAmiSSL->ERR_load_EC_strings()
#define OBSOLETE_ERR_put_error(lib, func, reason, file, line) IAmiSSL->OBSOLETE_ERR_put_error((lib), (func), (reason), (file), (line))
#define ERR_set_error_data(data, flags) IAmiSSL->ERR_set_error_data((data), (flags))
#define ERR_get_error() IAmiSSL->ERR_get_error()
#define ERR_get_error_line(file, line) IAmiSSL->ERR_get_error_line((file), (line))
#define ERR_get_error_line_data(file, line, data, flags) IAmiSSL->ERR_get_error_line_data((file), (line), (data), (flags))
#define ERR_peek_error() IAmiSSL->ERR_peek_error()
#define ERR_peek_error_line(file, line) IAmiSSL->ERR_peek_error_line((file), (line))
#define ERR_peek_error_line_data(file, line, data, flags) IAmiSSL->ERR_peek_error_line_data((file), (line), (data), (flags))
#define ERR_peek_last_error() IAmiSSL->ERR_peek_last_error()
#define ERR_peek_last_error_line(file, line) IAmiSSL->ERR_peek_last_error_line((file), (line))
#define ERR_peek_last_error_line_data(file, line, data, flags) IAmiSSL->ERR_peek_last_error_line_data((file), (line), (data), (flags))
#define ERR_clear_error() IAmiSSL->ERR_clear_error()
#define ERR_error_string(e, buf) IAmiSSL->ERR_error_string((e), (buf))
#define ERR_error_string_n(e, buf, len) IAmiSSL->ERR_error_string_n((e), (buf), (len))
#define ERR_lib_error_string(e) IAmiSSL->ERR_lib_error_string((e))
#define ERR_func_error_string(e) IAmiSSL->ERR_func_error_string((e))
#define ERR_reason_error_string(e) IAmiSSL->ERR_reason_error_string((e))
#define ERR_print_errors_cb(cb, u) IAmiSSL->ERR_print_errors_cb((cb), (u))
#define ERR_print_errors(bp) IAmiSSL->ERR_print_errors((bp))
#define ERR_add_error_vdata(num, args) IAmiSSL->ERR_add_error_vdata((num), (args))
#if (defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L) || (__GNUC__ >= 3)
#define ERR_add_error_data(...) IAmiSSL->ERR_add_error_data(__VA_ARGS__)
#elif (__GNUC__ == 2 && __GNUC_MINOR__ >= 95)
#define ERR_add_error_data(vargs...) IAmiSSL->ERR_add_error_data(vargs)
#endif
#define ERR_load_strings(lib, str) IAmiSSL->ERR_load_strings((lib), (str))
#define ERR_unload_strings(lib, str) IAmiSSL->ERR_unload_strings((lib), (str))
#define ERR_load_ERR_strings() IAmiSSL->ERR_load_ERR_strings()
#define OBSOLETE_ERR_load_crypto_strings() IAmiSSL->OBSOLETE_ERR_load_crypto_strings()
#define ERR_get_state() IAmiSSL->ERR_get_state()
#define ERR_get_next_error_library() IAmiSSL->ERR_get_next_error_library()
#define OBSOLETE_EVP_MD_CTX_init(ctx) IAmiSSL->OBSOLETE_EVP_MD_CTX_init((ctx))
#define OBSOLETE_EVP_MD_CTX_create() IAmiSSL->OBSOLETE_EVP_MD_CTX_create()
#define OBSOLETE_EVP_MD_CTX_destroy(ctx) IAmiSSL->OBSOLETE_EVP_MD_CTX_destroy((ctx))
#define EVP_MD_CTX_copy_ex(out, in) IAmiSSL->EVP_MD_CTX_copy_ex((out), (in))
#define EVP_DigestInit_ex(ctx, type, impl) IAmiSSL->EVP_DigestInit_ex((ctx), (type), (impl))
#define EVP_DigestUpdate(ctx, d, cnt) IAmiSSL->EVP_DigestUpdate((ctx), (d), (cnt))
#define EVP_DigestFinal_ex(ctx, md, s) IAmiSSL->EVP_DigestFinal_ex((ctx), (md), (s))
#define EVP_Digest(data, count, md, size, type, impl) IAmiSSL->EVP_Digest((data), (count), (md), (size), (type), (impl))
#define EVP_MD_CTX_copy(out, in) IAmiSSL->EVP_MD_CTX_copy((out), (in))
#define EVP_DigestInit(ctx, type) IAmiSSL->EVP_DigestInit((ctx), (type))
#define EVP_DigestFinal(ctx, md, s) IAmiSSL->EVP_DigestFinal((ctx), (md), (s))
#define EVP_read_pw_string(buf, length, prompt, verify) IAmiSSL->EVP_read_pw_string((buf), (length), (prompt), (verify))
#define EVP_set_pw_prompt(prompt) IAmiSSL->EVP_set_pw_prompt((prompt))
#define EVP_get_pw_prompt() IAmiSSL->EVP_get_pw_prompt()
#define EVP_BytesToKey(type, md, salt, data, datal, count, key, iv) IAmiSSL->EVP_BytesToKey((type), (md), (salt), (data), (datal), (count), (key), (iv))
#define EVP_EncryptInit(ctx, cipher, key, iv) IAmiSSL->EVP_EncryptInit((ctx), (cipher), (key), (iv))
#define EVP_EncryptInit_ex(ctx, cipher, impl, key, iv) IAmiSSL->EVP_EncryptInit_ex((ctx), (cipher), (impl), (key), (iv))
#define EVP_EncryptUpdate(ctx, out, outl, in, inl) IAmiSSL->EVP_EncryptUpdate((ctx), (out), (outl), (in), (inl))
#define EVP_EncryptFinal_ex(ctx, out, outl) IAmiSSL->EVP_EncryptFinal_ex((ctx), (out), (outl))
#define EVP_EncryptFinal(ctx, out, outl) IAmiSSL->EVP_EncryptFinal((ctx), (out), (outl))
#define EVP_DecryptInit(ctx, cipher, key, iv) IAmiSSL->EVP_DecryptInit((ctx), (cipher), (key), (iv))
#define EVP_DecryptInit_ex(ctx, cipher, impl, key, iv) IAmiSSL->EVP_DecryptInit_ex((ctx), (cipher), (impl), (key), (iv))
#define EVP_DecryptUpdate(ctx, out, outl, in, inl) IAmiSSL->EVP_DecryptUpdate((ctx), (out), (outl), (in), (inl))
#define EVP_DecryptFinal(ctx, outm, outl) IAmiSSL->EVP_DecryptFinal((ctx), (outm), (outl))
#define EVP_DecryptFinal_ex(ctx, outm, outl) IAmiSSL->EVP_DecryptFinal_ex((ctx), (outm), (outl))
#define EVP_CipherInit(ctx, cipher, key, iv, enc) IAmiSSL->EVP_CipherInit((ctx), (cipher), (key), (iv), (enc))
#define EVP_CipherInit_ex(ctx, cipher, impl, key, iv, enc) IAmiSSL->EVP_CipherInit_ex((ctx), (cipher), (impl), (key), (iv), (enc))
#define EVP_CipherUpdate(ctx, out, outl, in, inl) IAmiSSL->EVP_CipherUpdate((ctx), (out), (outl), (in), (inl))
#define EVP_CipherFinal(ctx, outm, outl) IAmiSSL->EVP_CipherFinal((ctx), (outm), (outl))
#define EVP_CipherFinal_ex(ctx, outm, outl) IAmiSSL->EVP_CipherFinal_ex((ctx), (outm), (outl))
#define EVP_SignFinal(ctx, md, s, pkey) IAmiSSL->EVP_SignFinal((ctx), (md), (s), (pkey))
#define EVP_VerifyFinal(ctx, sigbuf, siglen, pkey) IAmiSSL->EVP_VerifyFinal((ctx), (sigbuf), (siglen), (pkey))
#define EVP_OpenInit(ctx, type, ek, ekl, iv, priv) IAmiSSL->EVP_OpenInit((ctx), (type), (ek), (ekl), (iv), (priv))
#define EVP_OpenFinal(ctx, out, outl) IAmiSSL->EVP_OpenFinal((ctx), (out), (outl))
#define EVP_SealInit(ctx, type, ek, ekl, iv, pubk, npubk) IAmiSSL->EVP_SealInit((ctx), (type), (ek), (ekl), (iv), (pubk), (npubk))
#define EVP_SealFinal(ctx, out, outl) IAmiSSL->EVP_SealFinal((ctx), (out), (outl))
#define EVP_EncodeInit(ctx) IAmiSSL->EVP_EncodeInit((ctx))
#define EVP_EncodeUpdate(ctx, out, outl, in, inl) IAmiSSL->EVP_EncodeUpdate((ctx), (out), (outl), (in), (inl))
#define EVP_EncodeFinal(ctx, out, outl) IAmiSSL->EVP_EncodeFinal((ctx), (out), (outl))
#define EVP_EncodeBlock(t, f, n) IAmiSSL->EVP_EncodeBlock((t), (f), (n))
#define EVP_DecodeInit(ctx) IAmiSSL->EVP_DecodeInit((ctx))
#define EVP_DecodeUpdate(ctx, out, outl, in, inl) IAmiSSL->EVP_DecodeUpdate((ctx), (out), (outl), (in), (inl))
#define EVP_DecodeFinal(ctx, out, outl) IAmiSSL->EVP_DecodeFinal((ctx), (out), (outl))
#define EVP_DecodeBlock(t, f, n) IAmiSSL->EVP_DecodeBlock((t), (f), (n))
#define OBSOLETE_EVP_CIPHER_CTX_init(a) IAmiSSL->OBSOLETE_EVP_CIPHER_CTX_init((a))
#define OBSOLETE_EVP_CIPHER_CTX_cleanup(a) IAmiSSL->OBSOLETE_EVP_CIPHER_CTX_cleanup((a))
#define EVP_CIPHER_CTX_set_key_length(x, keylen) IAmiSSL->EVP_CIPHER_CTX_set_key_length((x), (keylen))
#define EVP_CIPHER_CTX_set_padding(c, pad) IAmiSSL->EVP_CIPHER_CTX_set_padding((c), (pad))
#define EVP_CIPHER_CTX_ctrl(ctx, type, arg, ptr) IAmiSSL->EVP_CIPHER_CTX_ctrl((ctx), (type), (arg), (ptr))
#define BIO_f_md() IAmiSSL->BIO_f_md()
#define BIO_f_base64() IAmiSSL->BIO_f_base64()
#define BIO_f_cipher() IAmiSSL->BIO_f_cipher()
#define BIO_f_reliable() IAmiSSL->BIO_f_reliable()
#define BIO_set_cipher(b, c, k, i, enc) IAmiSSL->BIO_set_cipher((b), (c), (k), (i), (enc))
#define EVP_md_null() IAmiSSL->EVP_md_null()
#define EVP_md2() IAmiSSL->EVP_md2()
#define EVP_md4() IAmiSSL->EVP_md4()
#define EVP_md5() IAmiSSL->EVP_md5()
#define EVP_sha1() IAmiSSL->EVP_sha1()
#define EVP_mdc2() IAmiSSL->EVP_mdc2()
#define EVP_ripemd160() IAmiSSL->EVP_ripemd160()
#define EVP_enc_null() IAmiSSL->EVP_enc_null()
#define EVP_des_ecb() IAmiSSL->EVP_des_ecb()
#define EVP_des_ede() IAmiSSL->EVP_des_ede()
#define EVP_des_ede3() IAmiSSL->EVP_des_ede3()
#define EVP_des_ede_ecb() IAmiSSL->EVP_des_ede_ecb()
#define EVP_des_ede3_ecb() IAmiSSL->EVP_des_ede3_ecb()
#define EVP_des_cfb64() IAmiSSL->EVP_des_cfb64()
#define EVP_des_cfb1() IAmiSSL->EVP_des_cfb1()
#define EVP_des_cfb8() IAmiSSL->EVP_des_cfb8()
#define EVP_des_ede_cfb64() IAmiSSL->EVP_des_ede_cfb64()
#define EVP_des_ede3_cfb64() IAmiSSL->EVP_des_ede3_cfb64()
#define EVP_des_ede3_cfb1() IAmiSSL->EVP_des_ede3_cfb1()
#define EVP_des_ede3_cfb8() IAmiSSL->EVP_des_ede3_cfb8()
#define EVP_des_ofb() IAmiSSL->EVP_des_ofb()
#define EVP_des_ede_ofb() IAmiSSL->EVP_des_ede_ofb()
#define EVP_des_ede3_ofb() IAmiSSL->EVP_des_ede3_ofb()
#define EVP_des_cbc() IAmiSSL->EVP_des_cbc()
#define EVP_des_ede_cbc() IAmiSSL->EVP_des_ede_cbc()
#define EVP_des_ede3_cbc() IAmiSSL->EVP_des_ede3_cbc()
#define EVP_desx_cbc() IAmiSSL->EVP_desx_cbc()
#define EVP_rc4() IAmiSSL->EVP_rc4()
#define EVP_rc4_40() IAmiSSL->EVP_rc4_40()
#define EVP_idea_ecb() IAmiSSL->EVP_idea_ecb()
#define EVP_idea_cfb64() IAmiSSL->EVP_idea_cfb64()
#define EVP_idea_ofb() IAmiSSL->EVP_idea_ofb()
#define EVP_idea_cbc() IAmiSSL->EVP_idea_cbc()
#define EVP_rc2_ecb() IAmiSSL->EVP_rc2_ecb()
#define EVP_rc2_cbc() IAmiSSL->EVP_rc2_cbc()
#define EVP_rc2_40_cbc() IAmiSSL->EVP_rc2_40_cbc()
#define EVP_rc2_64_cbc() IAmiSSL->EVP_rc2_64_cbc()
#define EVP_rc2_cfb64() IAmiSSL->EVP_rc2_cfb64()
#define EVP_rc2_ofb() IAmiSSL->EVP_rc2_ofb()
#define EVP_bf_ecb() IAmiSSL->EVP_bf_ecb()
#define EVP_bf_cbc() IAmiSSL->EVP_bf_cbc()
#define EVP_bf_cfb64() IAmiSSL->EVP_bf_cfb64()
#define EVP_bf_ofb() IAmiSSL->EVP_bf_ofb()
#define EVP_cast5_ecb() IAmiSSL->EVP_cast5_ecb()
#define EVP_cast5_cbc() IAmiSSL->EVP_cast5_cbc()
#define EVP_cast5_cfb64() IAmiSSL->EVP_cast5_cfb64()
#define EVP_cast5_ofb() IAmiSSL->EVP_cast5_ofb()
#define EVP_rc5_32_12_16_cbc() IAmiSSL->EVP_rc5_32_12_16_cbc()
#define EVP_rc5_32_12_16_ecb() IAmiSSL->EVP_rc5_32_12_16_ecb()
#define EVP_rc5_32_12_16_cfb64() IAmiSSL->EVP_rc5_32_12_16_cfb64()
#define EVP_rc5_32_12_16_ofb() IAmiSSL->EVP_rc5_32_12_16_ofb()
#define EVP_aes_128_ecb() IAmiSSL->EVP_aes_128_ecb()
#define EVP_aes_128_cbc() IAmiSSL->EVP_aes_128_cbc()
#define EVP_aes_128_cfb1() IAmiSSL->EVP_aes_128_cfb1()
#define EVP_aes_128_cfb8() IAmiSSL->EVP_aes_128_cfb8()
#define EVP_aes_128_cfb128() IAmiSSL->EVP_aes_128_cfb128()
#define EVP_aes_128_ofb() IAmiSSL->EVP_aes_128_ofb()
#define EVP_aes_192_ecb() IAmiSSL->EVP_aes_192_ecb()
#define EVP_aes_192_cbc() IAmiSSL->EVP_aes_192_cbc()
#define EVP_aes_192_cfb1() IAmiSSL->EVP_aes_192_cfb1()
#define EVP_aes_192_cfb8() IAmiSSL->EVP_aes_192_cfb8()
#define EVP_aes_192_cfb128() IAmiSSL->EVP_aes_192_cfb128()
#define EVP_aes_192_ofb() IAmiSSL->EVP_aes_192_ofb()
#define EVP_aes_256_ecb() IAmiSSL->EVP_aes_256_ecb()
#define EVP_aes_256_cbc() IAmiSSL->EVP_aes_256_cbc()
#define EVP_aes_256_cfb1() IAmiSSL->EVP_aes_256_cfb1()
#define EVP_aes_256_cfb8() IAmiSSL->EVP_aes_256_cfb8()
#define EVP_aes_256_cfb128() IAmiSSL->EVP_aes_256_cfb128()
#define EVP_aes_256_ofb() IAmiSSL->EVP_aes_256_ofb()
#define OBSOLETE_OPENSSL_add_all_algorithms_noconf() IAmiSSL->OBSOLETE_OPENSSL_add_all_algorithms_noconf()
#define OBSOLETE_OPENSSL_add_all_algorithms_conf() IAmiSSL->OBSOLETE_OPENSSL_add_all_algorithms_conf()
#define OBSOLETE_OpenSSL_add_all_ciphers() IAmiSSL->OBSOLETE_OpenSSL_add_all_ciphers()
#define OBSOLETE_OpenSSL_add_all_digests() IAmiSSL->OBSOLETE_OpenSSL_add_all_digests()
#define EVP_add_cipher(cipher) IAmiSSL->EVP_add_cipher((cipher))
#define EVP_add_digest(digest) IAmiSSL->EVP_add_digest((digest))
#define EVP_get_cipherbyname(name) IAmiSSL->EVP_get_cipherbyname((name))
#define EVP_get_digestbyname(name) IAmiSSL->EVP_get_digestbyname((name))
#define EVP_PKEY_decrypt(ctx, out, outlen, in, inlen) IAmiSSL->EVP_PKEY_decrypt((ctx), (out), (outlen), (in), (inlen))
#define EVP_PKEY_encrypt(ctx, out, outlen, in, inlen) IAmiSSL->EVP_PKEY_encrypt((ctx), (out), (outlen), (in), (inlen))
#define EVP_PKEY_type(type) IAmiSSL->EVP_PKEY_type((type))
#define EVP_PKEY_get_bits(pkey) IAmiSSL->EVP_PKEY_get_bits((pkey))
#define EVP_PKEY_get_size(pkey) IAmiSSL->EVP_PKEY_get_size((pkey))
#define EVP_PKEY_assign(pkey, type, key) IAmiSSL->EVP_PKEY_assign((pkey), (type), (key))
#define EVP_PKEY_set1_RSA(pkey, key) IAmiSSL->EVP_PKEY_set1_RSA((pkey), (key))
#define EVP_PKEY_get1_RSA(pkey) IAmiSSL->EVP_PKEY_get1_RSA((pkey))
#define EVP_PKEY_set1_DSA(pkey, key) IAmiSSL->EVP_PKEY_set1_DSA((pkey), (key))
#define EVP_PKEY_get1_DSA(pkey) IAmiSSL->EVP_PKEY_get1_DSA((pkey))
#define EVP_PKEY_set1_DH(pkey, key) IAmiSSL->EVP_PKEY_set1_DH((pkey), (key))
#define EVP_PKEY_get1_DH(pkey) IAmiSSL->EVP_PKEY_get1_DH((pkey))
#define EVP_PKEY_new() IAmiSSL->EVP_PKEY_new()
#define EVP_PKEY_free(pkey) IAmiSSL->EVP_PKEY_free((pkey))
#define d2i_PublicKey(type, a, pp, length) IAmiSSL->d2i_PublicKey((type), (a), (pp), (length))
#define i2d_PublicKey(a, pp) IAmiSSL->i2d_PublicKey((a), (pp))
#define d2i_PrivateKey(type, a, pp, length) IAmiSSL->d2i_PrivateKey((type), (a), (pp), (length))
#define d2i_AutoPrivateKey(a, pp, length) IAmiSSL->d2i_AutoPrivateKey((a), (pp), (length))
#define i2d_PrivateKey(a, pp) IAmiSSL->i2d_PrivateKey((a), (pp))
#define EVP_PKEY_copy_parameters(to, from) IAmiSSL->EVP_PKEY_copy_parameters((to), (from))
#define EVP_PKEY_missing_parameters(pkey) IAmiSSL->EVP_PKEY_missing_parameters((pkey))
#define EVP_PKEY_save_parameters(pkey, mode) IAmiSSL->EVP_PKEY_save_parameters((pkey), (mode))
#define EVP_PKEY_cmp_parameters(a, b) IAmiSSL->EVP_PKEY_cmp_parameters((a), (b))
#define EVP_CIPHER_get_type(ctx) IAmiSSL->EVP_CIPHER_get_type((ctx))
#define EVP_CIPHER_param_to_asn1(c, type) IAmiSSL->EVP_CIPHER_param_to_asn1((c), (type))
#define EVP_CIPHER_asn1_to_param(c, type) IAmiSSL->EVP_CIPHER_asn1_to_param((c), (type))
#define EVP_CIPHER_set_asn1_iv(c, type) IAmiSSL->EVP_CIPHER_set_asn1_iv((c), (type))
#define EVP_CIPHER_get_asn1_iv(c, type) IAmiSSL->EVP_CIPHER_get_asn1_iv((c), (type))
#define PKCS5_PBE_keyivgen(ctx, pass, passlen, param, cipher, md, en_de) IAmiSSL->PKCS5_PBE_keyivgen((ctx), (pass), (passlen), (param), (cipher), (md), (en_de))
#define PKCS5_PBKDF2_HMAC_SHA1(pass, passlen, salt, saltlen, iter, keylen, out) IAmiSSL->PKCS5_PBKDF2_HMAC_SHA1((pass), (passlen), (salt), (saltlen), (iter), (keylen), (out))
#define PKCS5_v2_PBE_keyivgen(ctx, pass, passlen, param, cipher, md, en_de) IAmiSSL->PKCS5_v2_PBE_keyivgen((ctx), (pass), (passlen), (param), (cipher), (md), (en_de))
#define PKCS5_PBE_add() IAmiSSL->PKCS5_PBE_add()
#define EVP_PBE_CipherInit(pbe_obj, pass, passlen, param, ctx, en_de) IAmiSSL->EVP_PBE_CipherInit((pbe_obj), (pass), (passlen), (param), (ctx), (en_de))
#define EVP_PBE_alg_add(nid, cipher, md, keygen) IAmiSSL->EVP_PBE_alg_add((nid), (cipher), (md), (keygen))
#define EVP_PBE_cleanup() IAmiSSL->EVP_PBE_cleanup()
#define ERR_load_EVP_strings() IAmiSSL->ERR_load_EVP_strings()
#define HMAC_Init(ctx, key, len, md) IAmiSSL->HMAC_Init((ctx), (key), (len), (md))
#define HMAC_Init_ex(ctx, key, len, md, impl) IAmiSSL->HMAC_Init_ex((ctx), (key), (len), (md), (impl))
#define HMAC_Update(ctx, data, len) IAmiSSL->HMAC_Update((ctx), (data), (len))
#define HMAC_Final(ctx, md, len) IAmiSSL->HMAC_Final((ctx), (md), (len))
#define HMAC(evp_md, key, key_len, data, data_len, md, md_len) IAmiSSL->HMAC((evp_md), (key), (key_len), (data), (data_len), (md), (md_len))
#define OPENSSL_LH_new(h, c) IAmiSSL->OPENSSL_LH_new((h), (c))
#define OPENSSL_LH_free(lh) IAmiSSL->OPENSSL_LH_free((lh))
#define OPENSSL_LH_insert(lh, data) IAmiSSL->OPENSSL_LH_insert((lh), (data))
#define OPENSSL_LH_delete(lh, data) IAmiSSL->OPENSSL_LH_delete((lh), (data))
#define OPENSSL_LH_retrieve(lh, data) IAmiSSL->OPENSSL_LH_retrieve((lh), (data))
#define OPENSSL_LH_doall(lh, func) IAmiSSL->OPENSSL_LH_doall((lh), (func))
#define OPENSSL_LH_doall_arg(lh, func, arg) IAmiSSL->OPENSSL_LH_doall_arg((lh), (func), (arg))
#define OPENSSL_LH_strhash(c) IAmiSSL->OPENSSL_LH_strhash((c))
#define OPENSSL_LH_num_items(lh) IAmiSSL->OPENSSL_LH_num_items((lh))
#define OPENSSL_LH_stats_bio(lh, out) IAmiSSL->OPENSSL_LH_stats_bio((lh), (out))
#define OPENSSL_LH_node_stats_bio(lh, out) IAmiSSL->OPENSSL_LH_node_stats_bio((lh), (out))
#define OPENSSL_LH_node_usage_stats_bio(lh, out) IAmiSSL->OPENSSL_LH_node_usage_stats_bio((lh), (out))
#define OBJ_NAME_init() IAmiSSL->OBJ_NAME_init()
#define OBJ_NAME_new_index(hash_func, cmp_func, free_func) IAmiSSL->OBJ_NAME_new_index((hash_func), (cmp_func), (free_func))
#define OBJ_NAME_get(name, type) IAmiSSL->OBJ_NAME_get((name), (type))
#define OBJ_NAME_add(name, type, data) IAmiSSL->OBJ_NAME_add((name), (type), (data))
#define OBJ_NAME_remove(name, type) IAmiSSL->OBJ_NAME_remove((name), (type))
#define OBJ_NAME_cleanup(type) IAmiSSL->OBJ_NAME_cleanup((type))
#define OBJ_NAME_do_all(type, fn, arg) IAmiSSL->OBJ_NAME_do_all((type), (fn), (arg))
#define OBJ_NAME_do_all_sorted(type, fn, arg) IAmiSSL->OBJ_NAME_do_all_sorted((type), (fn), (arg))
#define OBJ_dup(o) IAmiSSL->OBJ_dup((o))
#define OBJ_nid2obj(n) IAmiSSL->OBJ_nid2obj((n))
#define OBJ_nid2ln(n) IAmiSSL->OBJ_nid2ln((n))
#define OBJ_nid2sn(n) IAmiSSL->OBJ_nid2sn((n))
#define OBJ_obj2nid(o) IAmiSSL->OBJ_obj2nid((o))
#define OBJ_txt2obj(s, no_name) IAmiSSL->OBJ_txt2obj((s), (no_name))
#define OBJ_obj2txt(buf, buf_len, a, no_name) IAmiSSL->OBJ_obj2txt((buf), (buf_len), (a), (no_name))
#define OBJ_txt2nid(s) IAmiSSL->OBJ_txt2nid((s))
#define OBJ_ln2nid(s) IAmiSSL->OBJ_ln2nid((s))
#define OBJ_sn2nid(s) IAmiSSL->OBJ_sn2nid((s))
#define OBJ_cmp(a, b) IAmiSSL->OBJ_cmp((a), (b))
#define OBJ_new_nid(num) IAmiSSL->OBJ_new_nid((num))
#define OBJ_add_object(obj) IAmiSSL->OBJ_add_object((obj))
#define OBJ_create(oid, sn, ln) IAmiSSL->OBJ_create((oid), (sn), (ln))
#define OBJ_create_objects(in) IAmiSSL->OBJ_create_objects((in))
#define ERR_load_OBJ_strings() IAmiSSL->ERR_load_OBJ_strings()
#define OCSP_sendreq_bio(b, path, req) IAmiSSL->OCSP_sendreq_bio((b), (path), (req))
#define OCSP_cert_to_id(dgst, subject, issuer) IAmiSSL->OCSP_cert_to_id((dgst), (subject), (issuer))
#define OCSP_cert_id_new(dgst, issuerName, issuerKey, serialNumber) IAmiSSL->OCSP_cert_id_new((dgst), (issuerName), (issuerKey), (serialNumber))
#define OCSP_request_add0_id(req, cid) IAmiSSL->OCSP_request_add0_id((req), (cid))
#define OCSP_request_add1_nonce(req, val, len) IAmiSSL->OCSP_request_add1_nonce((req), (val), (len))
#define OCSP_basic_add1_nonce(resp, val, len) IAmiSSL->OCSP_basic_add1_nonce((resp), (val), (len))
#define OCSP_check_nonce(req, bs) IAmiSSL->OCSP_check_nonce((req), (bs))
#define OCSP_copy_nonce(resp, req) IAmiSSL->OCSP_copy_nonce((resp), (req))
#define OCSP_request_set1_name(req, nm) IAmiSSL->OCSP_request_set1_name((req), (nm))
#define OCSP_request_add1_cert(req, cert) IAmiSSL->OCSP_request_add1_cert((req), (cert))
#define OCSP_request_sign(req, signer, key, dgst, certs, flags) IAmiSSL->OCSP_request_sign((req), (signer), (key), (dgst), (certs), (flags))
#define OCSP_response_status(resp) IAmiSSL->OCSP_response_status((resp))
#define OCSP_response_get1_basic(resp) IAmiSSL->OCSP_response_get1_basic((resp))
#define OCSP_resp_count(bs) IAmiSSL->OCSP_resp_count((bs))
#define OCSP_resp_get0(bs, idx) IAmiSSL->OCSP_resp_get0((bs), (idx))
#define OCSP_resp_find(bs, id, last) IAmiSSL->OCSP_resp_find((bs), (id), (last))
#define OCSP_single_get0_status(single, reason, revtime, thisupd, nextupd) IAmiSSL->OCSP_single_get0_status((single), (reason), (revtime), (thisupd), (nextupd))
#define OCSP_resp_find_status(bs, id, status, reason, revtime, thisupd, nextupd) IAmiSSL->OCSP_resp_find_status((bs), (id), (status), (reason), (revtime), (thisupd), (nextupd))
#define OCSP_check_validity(thisupd, nextupd, sec, maxsec) IAmiSSL->OCSP_check_validity((thisupd), (nextupd), (sec), (maxsec))
#define OCSP_request_verify(req, certs, store, flags) IAmiSSL->OCSP_request_verify((req), (certs), (store), (flags))
#define OBSOLETE_OCSP_parse_url(url, phost, pport, ppath, pssl) IAmiSSL->OBSOLETE_OCSP_parse_url((url), (phost), (pport), (ppath), (pssl))
#define OCSP_id_issuer_cmp(a, b) IAmiSSL->OCSP_id_issuer_cmp((a), (b))
#define OCSP_id_cmp(a, b) IAmiSSL->OCSP_id_cmp((a), (b))
#define OCSP_request_onereq_count(req) IAmiSSL->OCSP_request_onereq_count((req))
#define OCSP_request_onereq_get0(req, i) IAmiSSL->OCSP_request_onereq_get0((req), (i))
#define OCSP_onereq_get0_id(one) IAmiSSL->OCSP_onereq_get0_id((one))
#define OCSP_id_get0_info(piNameHash, pmd, pikeyHash, pserial, cid) IAmiSSL->OCSP_id_get0_info((piNameHash), (pmd), (pikeyHash), (pserial), (cid))
#define OCSP_request_is_signed(req) IAmiSSL->OCSP_request_is_signed((req))
#define OCSP_response_create(status, bs) IAmiSSL->OCSP_response_create((status), (bs))
#define OCSP_basic_add1_status(rsp, cid, status, reason, revtime, thisupd, nextupd) IAmiSSL->OCSP_basic_add1_status((rsp), (cid), (status), (reason), (revtime), (thisupd), (nextupd))
#define OCSP_basic_add1_cert(resp, cert) IAmiSSL->OCSP_basic_add1_cert((resp), (cert))
#define OCSP_basic_sign(brsp, signer, key, dgst, certs, flags) IAmiSSL->OCSP_basic_sign((brsp), (signer), (key), (dgst), (certs), (flags))
#define OCSP_crlID_new(url, n, tim) IAmiSSL->OCSP_crlID_new((url), (n), (tim))
#define OCSP_accept_responses_new(oids) IAmiSSL->OCSP_accept_responses_new((oids))
#define OCSP_archive_cutoff_new(tim) IAmiSSL->OCSP_archive_cutoff_new((tim))
#define OCSP_url_svcloc_new(issuer, urls) IAmiSSL->OCSP_url_svcloc_new((issuer), (urls))
#define OCSP_REQUEST_get_ext_count(x) IAmiSSL->OCSP_REQUEST_get_ext_count((x))
#define OCSP_REQUEST_get_ext_by_NID(x, nid, lastpos) IAmiSSL->OCSP_REQUEST_get_ext_by_NID((x), (nid), (lastpos))
#define OCSP_REQUEST_get_ext_by_OBJ(x, obj, lastpos) IAmiSSL->OCSP_REQUEST_get_ext_by_OBJ((x), (obj), (lastpos))
#define OCSP_REQUEST_get_ext_by_critical(x, crit, lastpos) IAmiSSL->OCSP_REQUEST_get_ext_by_critical((x), (crit), (lastpos))
#define OCSP_REQUEST_get_ext(x, loc) IAmiSSL->OCSP_REQUEST_get_ext((x), (loc))
#define OCSP_REQUEST_delete_ext(x, loc) IAmiSSL->OCSP_REQUEST_delete_ext((x), (loc))
#define OCSP_REQUEST_get1_ext_d2i(x, nid, crit, idx) IAmiSSL->OCSP_REQUEST_get1_ext_d2i((x), (nid), (crit), (idx))
#define OCSP_REQUEST_add1_ext_i2d(x, nid, value, crit, flags) IAmiSSL->OCSP_REQUEST_add1_ext_i2d((x), (nid), (value), (crit), (flags))
#define OCSP_REQUEST_add_ext(x, ex, loc) IAmiSSL->OCSP_REQUEST_add_ext((x), (ex), (loc))
#define OCSP_ONEREQ_get_ext_count(x) IAmiSSL->OCSP_ONEREQ_get_ext_count((x))
#define OCSP_ONEREQ_get_ext_by_NID(x, nid, lastpos) IAmiSSL->OCSP_ONEREQ_get_ext_by_NID((x), (nid), (lastpos))
#define OCSP_ONEREQ_get_ext_by_OBJ(x, obj, lastpos) IAmiSSL->OCSP_ONEREQ_get_ext_by_OBJ((x), (obj), (lastpos))
#define OCSP_ONEREQ_get_ext_by_critical(x, crit, lastpos) IAmiSSL->OCSP_ONEREQ_get_ext_by_critical((x), (crit), (lastpos))
#define OCSP_ONEREQ_get_ext(x, loc) IAmiSSL->OCSP_ONEREQ_get_ext((x), (loc))
#define OCSP_ONEREQ_delete_ext(x, loc) IAmiSSL->OCSP_ONEREQ_delete_ext((x), (loc))
#define OCSP_ONEREQ_get1_ext_d2i(x, nid, crit, idx) IAmiSSL->OCSP_ONEREQ_get1_ext_d2i((x), (nid), (crit), (idx))
#define OCSP_ONEREQ_add1_ext_i2d(x, nid, value, crit, flags) IAmiSSL->OCSP_ONEREQ_add1_ext_i2d((x), (nid), (value), (crit), (flags))
#define OCSP_ONEREQ_add_ext(x, ex, loc) IAmiSSL->OCSP_ONEREQ_add_ext((x), (ex), (loc))
#define OCSP_BASICRESP_get_ext_count(x) IAmiSSL->OCSP_BASICRESP_get_ext_count((x))
#define OCSP_BASICRESP_get_ext_by_NID(x, nid, lastpos) IAmiSSL->OCSP_BASICRESP_get_ext_by_NID((x), (nid), (lastpos))
#define OCSP_BASICRESP_get_ext_by_OBJ(x, obj, lastpos) IAmiSSL->OCSP_BASICRESP_get_ext_by_OBJ((x), (obj), (lastpos))
#define OCSP_BASICRESP_get_ext_by_critical(x, crit, lastpos) IAmiSSL->OCSP_BASICRESP_get_ext_by_critical((x), (crit), (lastpos))
#define OCSP_BASICRESP_get_ext(x, loc) IAmiSSL->OCSP_BASICRESP_get_ext((x), (loc))
#define OCSP_BASICRESP_delete_ext(x, loc) IAmiSSL->OCSP_BASICRESP_delete_ext((x), (loc))
#define OCSP_BASICRESP_get1_ext_d2i(x, nid, crit, idx) IAmiSSL->OCSP_BASICRESP_get1_ext_d2i((x), (nid), (crit), (idx))
#define OCSP_BASICRESP_add1_ext_i2d(x, nid, value, crit, flags) IAmiSSL->OCSP_BASICRESP_add1_ext_i2d((x), (nid), (value), (crit), (flags))
#define OCSP_BASICRESP_add_ext(x, ex, loc) IAmiSSL->OCSP_BASICRESP_add_ext((x), (ex), (loc))
#define OCSP_SINGLERESP_get_ext_count(x) IAmiSSL->OCSP_SINGLERESP_get_ext_count((x))
#define OCSP_SINGLERESP_get_ext_by_NID(x, nid, lastpos) IAmiSSL->OCSP_SINGLERESP_get_ext_by_NID((x), (nid), (lastpos))
#define OCSP_SINGLERESP_get_ext_by_OBJ(x, obj, lastpos) IAmiSSL->OCSP_SINGLERESP_get_ext_by_OBJ((x), (obj), (lastpos))
#define OCSP_SINGLERESP_get_ext_by_critical(x, crit, lastpos) IAmiSSL->OCSP_SINGLERESP_get_ext_by_critical((x), (crit), (lastpos))
#define OCSP_SINGLERESP_get_ext(x, loc) IAmiSSL->OCSP_SINGLERESP_get_ext((x), (loc))
#define OCSP_SINGLERESP_delete_ext(x, loc) IAmiSSL->OCSP_SINGLERESP_delete_ext((x), (loc))
#define OCSP_SINGLERESP_get1_ext_d2i(x, nid, crit, idx) IAmiSSL->OCSP_SINGLERESP_get1_ext_d2i((x), (nid), (crit), (idx))
#define OCSP_SINGLERESP_add1_ext_i2d(x, nid, value, crit, flags) IAmiSSL->OCSP_SINGLERESP_add1_ext_i2d((x), (nid), (value), (crit), (flags))
#define OCSP_SINGLERESP_add_ext(x, ex, loc) IAmiSSL->OCSP_SINGLERESP_add_ext((x), (ex), (loc))
#define OCSP_SINGLERESP_new() IAmiSSL->OCSP_SINGLERESP_new()
#define OCSP_SINGLERESP_free(a) IAmiSSL->OCSP_SINGLERESP_free((a))
#define d2i_OCSP_SINGLERESP(a, in, len) IAmiSSL->d2i_OCSP_SINGLERESP((a), (in), (len))
#define i2d_OCSP_SINGLERESP(a, out) IAmiSSL->i2d_OCSP_SINGLERESP((a), (out))
#define OCSP_SINGLERESP_it() IAmiSSL->OCSP_SINGLERESP_it()
#define OCSP_CERTSTATUS_new() IAmiSSL->OCSP_CERTSTATUS_new()
#define OCSP_CERTSTATUS_free(a) IAmiSSL->OCSP_CERTSTATUS_free((a))
#define d2i_OCSP_CERTSTATUS(a, in, len) IAmiSSL->d2i_OCSP_CERTSTATUS((a), (in), (len))
#define i2d_OCSP_CERTSTATUS(a, out) IAmiSSL->i2d_OCSP_CERTSTATUS((a), (out))
#define OCSP_CERTSTATUS_it() IAmiSSL->OCSP_CERTSTATUS_it()
#define OCSP_REVOKEDINFO_new() IAmiSSL->OCSP_REVOKEDINFO_new()
#define OCSP_REVOKEDINFO_free(a) IAmiSSL->OCSP_REVOKEDINFO_free((a))
#define d2i_OCSP_REVOKEDINFO(a, in, len) IAmiSSL->d2i_OCSP_REVOKEDINFO((a), (in), (len))
#define i2d_OCSP_REVOKEDINFO(a, out) IAmiSSL->i2d_OCSP_REVOKEDINFO((a), (out))
#define OCSP_REVOKEDINFO_it() IAmiSSL->OCSP_REVOKEDINFO_it()
#define OCSP_BASICRESP_new() IAmiSSL->OCSP_BASICRESP_new()
#define OCSP_BASICRESP_free(a) IAmiSSL->OCSP_BASICRESP_free((a))
#define d2i_OCSP_BASICRESP(a, in, len) IAmiSSL->d2i_OCSP_BASICRESP((a), (in), (len))
#define i2d_OCSP_BASICRESP(a, out) IAmiSSL->i2d_OCSP_BASICRESP((a), (out))
#define OCSP_BASICRESP_it() IAmiSSL->OCSP_BASICRESP_it()
#define OCSP_RESPDATA_new() IAmiSSL->OCSP_RESPDATA_new()
#define OCSP_RESPDATA_free(a) IAmiSSL->OCSP_RESPDATA_free((a))
#define d2i_OCSP_RESPDATA(a, in, len) IAmiSSL->d2i_OCSP_RESPDATA((a), (in), (len))
#define i2d_OCSP_RESPDATA(a, out) IAmiSSL->i2d_OCSP_RESPDATA((a), (out))
#define OCSP_RESPDATA_it() IAmiSSL->OCSP_RESPDATA_it()
#define OCSP_RESPID_new() IAmiSSL->OCSP_RESPID_new()
#define OCSP_RESPID_free(a) IAmiSSL->OCSP_RESPID_free((a))
#define d2i_OCSP_RESPID(a, in, len) IAmiSSL->d2i_OCSP_RESPID((a), (in), (len))
#define i2d_OCSP_RESPID(a, out) IAmiSSL->i2d_OCSP_RESPID((a), (out))
#define OCSP_RESPID_it() IAmiSSL->OCSP_RESPID_it()
#define OCSP_RESPONSE_new() IAmiSSL->OCSP_RESPONSE_new()
#define OCSP_RESPONSE_free(a) IAmiSSL->OCSP_RESPONSE_free((a))
#define d2i_OCSP_RESPONSE(a, in, len) IAmiSSL->d2i_OCSP_RESPONSE((a), (in), (len))
#define i2d_OCSP_RESPONSE(a, out) IAmiSSL->i2d_OCSP_RESPONSE((a), (out))
#define OCSP_RESPONSE_it() IAmiSSL->OCSP_RESPONSE_it()
#define OCSP_RESPBYTES_new() IAmiSSL->OCSP_RESPBYTES_new()
#define OCSP_RESPBYTES_free(a) IAmiSSL->OCSP_RESPBYTES_free((a))
#define d2i_OCSP_RESPBYTES(a, in, len) IAmiSSL->d2i_OCSP_RESPBYTES((a), (in), (len))
#define i2d_OCSP_RESPBYTES(a, out) IAmiSSL->i2d_OCSP_RESPBYTES((a), (out))
#define OCSP_RESPBYTES_it() IAmiSSL->OCSP_RESPBYTES_it()
#define OCSP_ONEREQ_new() IAmiSSL->OCSP_ONEREQ_new()
#define OCSP_ONEREQ_free(a) IAmiSSL->OCSP_ONEREQ_free((a))
#define d2i_OCSP_ONEREQ(a, in, len) IAmiSSL->d2i_OCSP_ONEREQ((a), (in), (len))
#define i2d_OCSP_ONEREQ(a, out) IAmiSSL->i2d_OCSP_ONEREQ((a), (out))
#define OCSP_ONEREQ_it() IAmiSSL->OCSP_ONEREQ_it()
#define OCSP_CERTID_new() IAmiSSL->OCSP_CERTID_new()
#define OCSP_CERTID_free(a) IAmiSSL->OCSP_CERTID_free((a))
#define d2i_OCSP_CERTID(a, in, len) IAmiSSL->d2i_OCSP_CERTID((a), (in), (len))
#define i2d_OCSP_CERTID(a, out) IAmiSSL->i2d_OCSP_CERTID((a), (out))
#define OCSP_CERTID_it() IAmiSSL->OCSP_CERTID_it()
#define OCSP_REQUEST_new() IAmiSSL->OCSP_REQUEST_new()
#define OCSP_REQUEST_free(a) IAmiSSL->OCSP_REQUEST_free((a))
#define d2i_OCSP_REQUEST(a, in, len) IAmiSSL->d2i_OCSP_REQUEST((a), (in), (len))
#define i2d_OCSP_REQUEST(a, out) IAmiSSL->i2d_OCSP_REQUEST((a), (out))
#define OCSP_REQUEST_it() IAmiSSL->OCSP_REQUEST_it()
#define OCSP_SIGNATURE_new() IAmiSSL->OCSP_SIGNATURE_new()
#define OCSP_SIGNATURE_free(a) IAmiSSL->OCSP_SIGNATURE_free((a))
#define d2i_OCSP_SIGNATURE(a, in, len) IAmiSSL->d2i_OCSP_SIGNATURE((a), (in), (len))
#define i2d_OCSP_SIGNATURE(a, out) IAmiSSL->i2d_OCSP_SIGNATURE((a), (out))
#define OCSP_SIGNATURE_it() IAmiSSL->OCSP_SIGNATURE_it()
#define OCSP_REQINFO_new() IAmiSSL->OCSP_REQINFO_new()
#define OCSP_REQINFO_free(a) IAmiSSL->OCSP_REQINFO_free((a))
#define d2i_OCSP_REQINFO(a, in, len) IAmiSSL->d2i_OCSP_REQINFO((a), (in), (len))
#define i2d_OCSP_REQINFO(a, out) IAmiSSL->i2d_OCSP_REQINFO((a), (out))
#define OCSP_REQINFO_it() IAmiSSL->OCSP_REQINFO_it()
#define OCSP_CRLID_new() IAmiSSL->OCSP_CRLID_new()
#define OCSP_CRLID_free(a) IAmiSSL->OCSP_CRLID_free((a))
#define d2i_OCSP_CRLID(a, in, len) IAmiSSL->d2i_OCSP_CRLID((a), (in), (len))
#define i2d_OCSP_CRLID(a, out) IAmiSSL->i2d_OCSP_CRLID((a), (out))
#define OCSP_CRLID_it() IAmiSSL->OCSP_CRLID_it()
#define OCSP_SERVICELOC_new() IAmiSSL->OCSP_SERVICELOC_new()
#define OCSP_SERVICELOC_free(a) IAmiSSL->OCSP_SERVICELOC_free((a))
#define d2i_OCSP_SERVICELOC(a, in, len) IAmiSSL->d2i_OCSP_SERVICELOC((a), (in), (len))
#define i2d_OCSP_SERVICELOC(a, out) IAmiSSL->i2d_OCSP_SERVICELOC((a), (out))
#define OCSP_SERVICELOC_it() IAmiSSL->OCSP_SERVICELOC_it()
#define OCSP_response_status_str(s) IAmiSSL->OCSP_response_status_str((s))
#define OCSP_cert_status_str(s) IAmiSSL->OCSP_cert_status_str((s))
#define OCSP_crl_reason_str(s) IAmiSSL->OCSP_crl_reason_str((s))
#define OCSP_REQUEST_print(bp, a, flags) IAmiSSL->OCSP_REQUEST_print((bp), (a), (flags))
#define OCSP_RESPONSE_print(bp, o, flags) IAmiSSL->OCSP_RESPONSE_print((bp), (o), (flags))
#define OCSP_basic_verify(bs, certs, st, flags) IAmiSSL->OCSP_basic_verify((bs), (certs), (st), (flags))
#define ERR_load_OCSP_strings() IAmiSSL->ERR_load_OCSP_strings()
#define PEM_get_EVP_CIPHER_INFO(header, cipher) IAmiSSL->PEM_get_EVP_CIPHER_INFO((header), (cipher))
#define PEM_do_header(cipher, data, len, callback, u) IAmiSSL->PEM_do_header((cipher), (data), (len), (callback), (u))
#define PEM_read_bio(bp, name, header, data, len) IAmiSSL->PEM_read_bio((bp), (name), (header), (data), (len))
#define PEM_write_bio(bp, name, hdr, data, len) IAmiSSL->PEM_write_bio((bp), (name), (hdr), (data), (len))
#define PEM_bytes_read_bio(pdata, plen, pnm, name, bp, cb, u) IAmiSSL->PEM_bytes_read_bio((pdata), (plen), (pnm), (name), (bp), (cb), (u))
#define PEM_ASN1_read_bio(d2i, name, bp, x, cb, u) IAmiSSL->PEM_ASN1_read_bio((d2i), (name), (bp), (x), (cb), (u))
#define PEM_ASN1_write_bio(i2d, name, bp, x, enc, kstr, klen, cb, u) IAmiSSL->PEM_ASN1_write_bio((i2d), (name), (bp), (x), (enc), (kstr), (klen), (cb), (u))
#define PEM_X509_INFO_read_bio(bp, sk, cb, u) IAmiSSL->PEM_X509_INFO_read_bio((bp), (sk), (cb), (u))
#define PEM_X509_INFO_write_bio(bp, xi, enc, kstr, klen, cd, u) IAmiSSL->PEM_X509_INFO_write_bio((bp), (xi), (enc), (kstr), (klen), (cd), (u))
#define PEM_SignInit(ctx, type) IAmiSSL->PEM_SignInit((ctx), (type))
#define PEM_SignUpdate(ctx, d, cnt) IAmiSSL->PEM_SignUpdate((ctx), (d), (cnt))
#define PEM_SignFinal(ctx, sigret, siglen, pkey) IAmiSSL->PEM_SignFinal((ctx), (sigret), (siglen), (pkey))
#define PEM_def_callback(buf, num, w, key) IAmiSSL->PEM_def_callback((buf), (num), (w), (key))
#define PEM_proc_type(buf, type) IAmiSSL->PEM_proc_type((buf), (type))
#define PEM_dek_info(buf, type, len, str) IAmiSSL->PEM_dek_info((buf), (type), (len), (str))
#define PEM_read_bio_X509(bp, x, cb, u) IAmiSSL->PEM_read_bio_X509((bp), (x), (cb), (u))
#define PEM_write_bio_X509(bp, x) IAmiSSL->PEM_write_bio_X509((bp), (x))
#define PEM_read_bio_X509_AUX(bp, x, cb, u) IAmiSSL->PEM_read_bio_X509_AUX((bp), (x), (cb), (u))
#define PEM_write_bio_X509_AUX(bp, x) IAmiSSL->PEM_write_bio_X509_AUX((bp), (x))
#define PEM_read_bio_X509_REQ(bp, x, cb, u) IAmiSSL->PEM_read_bio_X509_REQ((bp), (x), (cb), (u))
#define PEM_write_bio_X509_REQ(bp, x) IAmiSSL->PEM_write_bio_X509_REQ((bp), (x))
#define PEM_write_bio_X509_REQ_NEW(bp, x) IAmiSSL->PEM_write_bio_X509_REQ_NEW((bp), (x))
#define PEM_read_bio_X509_CRL(bp, x, cb, u) IAmiSSL->PEM_read_bio_X509_CRL((bp), (x), (cb), (u))
#define PEM_write_bio_X509_CRL(bp, x) IAmiSSL->PEM_write_bio_X509_CRL((bp), (x))
#define PEM_read_bio_PKCS7(bp, x, cb, u) IAmiSSL->PEM_read_bio_PKCS7((bp), (x), (cb), (u))
#define PEM_write_bio_PKCS7(bp, x) IAmiSSL->PEM_write_bio_PKCS7((bp), (x))
#define PEM_read_bio_NETSCAPE_CERT_SEQUENCE(bp, x, cb, u) IAmiSSL->PEM_read_bio_NETSCAPE_CERT_SEQUENCE((bp), (x), (cb), (u))
#define PEM_write_bio_NETSCAPE_CERT_SEQUENCE(bp, x) IAmiSSL->PEM_write_bio_NETSCAPE_CERT_SEQUENCE((bp), (x))
#define PEM_read_bio_PKCS8(bp, x, cb, u) IAmiSSL->PEM_read_bio_PKCS8((bp), (x), (cb), (u))
#define PEM_write_bio_PKCS8(bp, x) IAmiSSL->PEM_write_bio_PKCS8((bp), (x))
#define PEM_read_bio_PKCS8_PRIV_KEY_INFO(bp, x, cb, u) IAmiSSL->PEM_read_bio_PKCS8_PRIV_KEY_INFO((bp), (x), (cb), (u))
#define PEM_write_bio_PKCS8_PRIV_KEY_INFO(bp, x) IAmiSSL->PEM_write_bio_PKCS8_PRIV_KEY_INFO((bp), (x))
#define PEM_read_bio_RSAPrivateKey(bp, x, cb, u) IAmiSSL->PEM_read_bio_RSAPrivateKey((bp), (x), (cb), (u))
#define PEM_write_bio_RSAPrivateKey(bp, x, enc, kstr, klen, cb, u) IAmiSSL->PEM_write_bio_RSAPrivateKey((bp), (x), (enc), (kstr), (klen), (cb), (u))
#define PEM_read_bio_RSAPublicKey(bp, x, cb, u) IAmiSSL->PEM_read_bio_RSAPublicKey((bp), (x), (cb), (u))
#define PEM_write_bio_RSAPublicKey(bp, x) IAmiSSL->PEM_write_bio_RSAPublicKey((bp), (x))
#define PEM_read_bio_RSA_PUBKEY(bp, x, cb, u) IAmiSSL->PEM_read_bio_RSA_PUBKEY((bp), (x), (cb), (u))
#define PEM_write_bio_RSA_PUBKEY(bp, x) IAmiSSL->PEM_write_bio_RSA_PUBKEY((bp), (x))
#define PEM_read_bio_DSAPrivateKey(bp, x, cb, u) IAmiSSL->PEM_read_bio_DSAPrivateKey((bp), (x), (cb), (u))
#define PEM_write_bio_DSAPrivateKey(bp, x, enc, kstr, klen, cb, u) IAmiSSL->PEM_write_bio_DSAPrivateKey((bp), (x), (enc), (kstr), (klen), (cb), (u))
#define PEM_read_bio_DSA_PUBKEY(bp, x, cb, u) IAmiSSL->PEM_read_bio_DSA_PUBKEY((bp), (x), (cb), (u))
#define PEM_write_bio_DSA_PUBKEY(bp, x) IAmiSSL->PEM_write_bio_DSA_PUBKEY((bp), (x))
#define PEM_read_bio_DSAparams(bp, x, cb, u) IAmiSSL->PEM_read_bio_DSAparams((bp), (x), (cb), (u))
#define PEM_write_bio_DSAparams(bp, x) IAmiSSL->PEM_write_bio_DSAparams((bp), (x))
#define PEM_read_bio_DHparams(bp, x, cb, u) IAmiSSL->PEM_read_bio_DHparams((bp), (x), (cb), (u))
#define PEM_write_bio_DHparams(bp, x) IAmiSSL->PEM_write_bio_DHparams((bp), (x))
#define PEM_read_bio_PrivateKey(bp, x, cb, u) IAmiSSL->PEM_read_bio_PrivateKey((bp), (x), (cb), (u))
#define PEM_write_bio_PrivateKey(bp, x, enc, kstr, klen, cb, u) IAmiSSL->PEM_write_bio_PrivateKey((bp), (x), (enc), (kstr), (klen), (cb), (u))
#define PEM_read_bio_PUBKEY(bp, x, cb, u) IAmiSSL->PEM_read_bio_PUBKEY((bp), (x), (cb), (u))
#define PEM_write_bio_PUBKEY(bp, x) IAmiSSL->PEM_write_bio_PUBKEY((bp), (x))
#define PEM_write_bio_PKCS8PrivateKey_nid(bp, x, nid, kstr, klen, cb, u) IAmiSSL->PEM_write_bio_PKCS8PrivateKey_nid((bp), (x), (nid), (kstr), (klen), (cb), (u))
#define PEM_write_bio_PKCS8PrivateKey(bp, x, enc, kstr, klen, cb, u) IAmiSSL->PEM_write_bio_PKCS8PrivateKey((bp), (x), (enc), (kstr), (klen), (cb), (u))
#define i2d_PKCS8PrivateKey_bio(bp, x, enc, kstr, klen, cb, u) IAmiSSL->i2d_PKCS8PrivateKey_bio((bp), (x), (enc), (kstr), (klen), (cb), (u))
#define i2d_PKCS8PrivateKey_nid_bio(bp, x, nid, kstr, klen, cb, u) IAmiSSL->i2d_PKCS8PrivateKey_nid_bio((bp), (x), (nid), (kstr), (klen), (cb), (u))
#define d2i_PKCS8PrivateKey_bio(bp, x, cb, u) IAmiSSL->d2i_PKCS8PrivateKey_bio((bp), (x), (cb), (u))
#define ERR_load_PEM_strings() IAmiSSL->ERR_load_PEM_strings()
#define OBSOLETE_PKCS12_x5092certbag(x509) IAmiSSL->OBSOLETE_PKCS12_x5092certbag((x509))
#define OBSOLETE_PKCS12_x509crl2certbag(crl) IAmiSSL->OBSOLETE_PKCS12_x509crl2certbag((crl))
#define OBSOLETE_PKCS12_certbag2x509(bag) IAmiSSL->OBSOLETE_PKCS12_certbag2x509((bag))
#define PKCS12_item_pack_safebag(obj, it, nid1, nid2) IAmiSSL->PKCS12_item_pack_safebag((obj), (it), (nid1), (nid2))
#define OBSOLETE_PKCS12_MAKE_KEYBAG(p8) IAmiSSL->OBSOLETE_PKCS12_MAKE_KEYBAG((p8))
#define PKCS8_decrypt(p8, pass, passlen) IAmiSSL->PKCS8_decrypt((p8), (pass), (passlen))
#define PKCS12_decrypt_skey(bag, pass, passlen) IAmiSSL->PKCS12_decrypt_skey((bag), (pass), (passlen))
#define PKCS8_encrypt(pbe_nid, cipher, pass, passlen, salt, saltlen, iter, p8) IAmiSSL->PKCS8_encrypt((pbe_nid), (cipher), (pass), (passlen), (salt), (saltlen), (iter), (p8))
#define OBSOLETE_PKCS12_MAKE_SHKEYBAG(pbe_nid, pass, passlen, salt, saltlen, iter, p8) IAmiSSL->OBSOLETE_PKCS12_MAKE_SHKEYBAG((pbe_nid), (pass), (passlen), (salt), (saltlen), (iter), (p8))
#define PKCS12_pack_p7data(sk) IAmiSSL->PKCS12_pack_p7data((sk))
#define PKCS12_unpack_p7data(p7) IAmiSSL->PKCS12_unpack_p7data((p7))
#define PKCS12_pack_p7encdata(pbe_nid, pass, passlen, salt, saltlen, iter, bags) IAmiSSL->PKCS12_pack_p7encdata((pbe_nid), (pass), (passlen), (salt), (saltlen), (iter), (bags))
#define PKCS12_unpack_p7encdata(p7, pass, passlen) IAmiSSL->PKCS12_unpack_p7encdata((p7), (pass), (passlen))
#define PKCS12_pack_authsafes(p12, safes) IAmiSSL->PKCS12_pack_authsafes((p12), (safes))
#define PKCS12_unpack_authsafes(p12) IAmiSSL->PKCS12_unpack_authsafes((p12))
#define PKCS12_add_localkeyid(bag, name, namelen) IAmiSSL->PKCS12_add_localkeyid((bag), (name), (namelen))
#define PKCS12_add_friendlyname_asc(bag, name, namelen) IAmiSSL->PKCS12_add_friendlyname_asc((bag), (name), (namelen))
#define PKCS12_add_CSPName_asc(bag, name, namelen) IAmiSSL->PKCS12_add_CSPName_asc((bag), (name), (namelen))
#define PKCS12_add_friendlyname_uni(bag, name, namelen) IAmiSSL->PKCS12_add_friendlyname_uni((bag), (name), (namelen))
#define PKCS8_add_keyusage(p8, usage) IAmiSSL->PKCS8_add_keyusage((p8), (usage))
#define PKCS12_get_attr_gen(attrs, attr_nid) IAmiSSL->PKCS12_get_attr_gen((attrs), (attr_nid))
#define PKCS12_get_friendlyname(bag) IAmiSSL->PKCS12_get_friendlyname((bag))
#define PKCS12_pbe_crypt(algor, pass, passlen, in, inlen, data, datalen, en_de) IAmiSSL->PKCS12_pbe_crypt((algor), (pass), (passlen), (in), (inlen), (data), (datalen), (en_de))
#define PKCS12_item_decrypt_d2i(algor, it, pass, passlen, oct, zbuf) IAmiSSL->PKCS12_item_decrypt_d2i((algor), (it), (pass), (passlen), (oct), (zbuf))
#define PKCS12_item_i2d_encrypt(algor, it, pass, passlen, obj, zbuf) IAmiSSL->PKCS12_item_i2d_encrypt((algor), (it), (pass), (passlen), (obj), (zbuf))
#define PKCS12_init(mode) IAmiSSL->PKCS12_init((mode))
#define PKCS12_key_gen_asc(pass, passlen, salt, saltlen, id, iter, n, out, md_type) IAmiSSL->PKCS12_key_gen_asc((pass), (passlen), (salt), (saltlen), (id), (iter), (n), (out), (md_type))
#define PKCS12_key_gen_uni(pass, passlen, salt, saltlen, id, iter, n, out, md_type) IAmiSSL->PKCS12_key_gen_uni((pass), (passlen), (salt), (saltlen), (id), (iter), (n), (out), (md_type))
#define PKCS12_PBE_keyivgen(ctx, pass, passlen, param, cipher, md_type, en_de) IAmiSSL->PKCS12_PBE_keyivgen((ctx), (pass), (passlen), (param), (cipher), (md_type), (en_de))
#define PKCS12_gen_mac(p12, pass, passlen, mac, maclen) IAmiSSL->PKCS12_gen_mac((p12), (pass), (passlen), (mac), (maclen))
#define PKCS12_verify_mac(p12, pass, passlen) IAmiSSL->PKCS12_verify_mac((p12), (pass), (passlen))
#define PKCS12_set_mac(p12, pass, passlen, salt, saltlen, iter, md_type) IAmiSSL->PKCS12_set_mac((p12), (pass), (passlen), (salt), (saltlen), (iter), (md_type))
#define PKCS12_setup_mac(p12, iter, salt, saltlen, md_type) IAmiSSL->PKCS12_setup_mac((p12), (iter), (salt), (saltlen), (md_type))
#define OPENSSL_asc2uni(asc, asclen, uni, unilen) IAmiSSL->OPENSSL_asc2uni((asc), (asclen), (uni), (unilen))
#define OPENSSL_uni2asc(uni, unilen) IAmiSSL->OPENSSL_uni2asc((uni), (unilen))
#define PKCS12_new() IAmiSSL->PKCS12_new()
#define PKCS12_free(a) IAmiSSL->PKCS12_free((a))
#define d2i_PKCS12(a, in, len) IAmiSSL->d2i_PKCS12((a), (in), (len))
#define i2d_PKCS12(a, out) IAmiSSL->i2d_PKCS12((a), (out))
#define PKCS12_it() IAmiSSL->PKCS12_it()
#define PKCS12_MAC_DATA_new() IAmiSSL->PKCS12_MAC_DATA_new()
#define PKCS12_MAC_DATA_free(a) IAmiSSL->PKCS12_MAC_DATA_free((a))
#define d2i_PKCS12_MAC_DATA(a, in, len) IAmiSSL->d2i_PKCS12_MAC_DATA((a), (in), (len))
#define i2d_PKCS12_MAC_DATA(a, out) IAmiSSL->i2d_PKCS12_MAC_DATA((a), (out))
#define PKCS12_MAC_DATA_it() IAmiSSL->PKCS12_MAC_DATA_it()
#define PKCS12_SAFEBAG_new() IAmiSSL->PKCS12_SAFEBAG_new()
#define PKCS12_SAFEBAG_free(a) IAmiSSL->PKCS12_SAFEBAG_free((a))
#define d2i_PKCS12_SAFEBAG(a, in, len) IAmiSSL->d2i_PKCS12_SAFEBAG((a), (in), (len))
#define i2d_PKCS12_SAFEBAG(a, out) IAmiSSL->i2d_PKCS12_SAFEBAG((a), (out))
#define PKCS12_SAFEBAG_it() IAmiSSL->PKCS12_SAFEBAG_it()
#define PKCS12_BAGS_new() IAmiSSL->PKCS12_BAGS_new()
#define PKCS12_BAGS_free(a) IAmiSSL->PKCS12_BAGS_free((a))
#define d2i_PKCS12_BAGS(a, in, len) IAmiSSL->d2i_PKCS12_BAGS((a), (in), (len))
#define i2d_PKCS12_BAGS(a, out) IAmiSSL->i2d_PKCS12_BAGS((a), (out))
#define PKCS12_BAGS_it() IAmiSSL->PKCS12_BAGS_it()
#define PKCS12_SAFEBAGS_it() IAmiSSL->PKCS12_SAFEBAGS_it()
#define PKCS12_AUTHSAFES_it() IAmiSSL->PKCS12_AUTHSAFES_it()
#define PKCS12_PBE_add() IAmiSSL->PKCS12_PBE_add()
#define PKCS12_parse(p12, pass, pkey, cert, ca) IAmiSSL->PKCS12_parse((p12), (pass), (pkey), (cert), (ca))
#define PKCS12_create(pass, name, pkey, cert, ca, nid_key, nid_cert, iter, mac_iter, keytype) IAmiSSL->PKCS12_create((pass), (name), (pkey), (cert), (ca), (nid_key), (nid_cert), (iter), (mac_iter), (keytype))
#define i2d_PKCS12_bio(bp, p12) IAmiSSL->i2d_PKCS12_bio((bp), (p12))
#define d2i_PKCS12_bio(bp, p12) IAmiSSL->d2i_PKCS12_bio((bp), (p12))
#define PKCS12_newpass(p12, oldpass, newpass) IAmiSSL->PKCS12_newpass((p12), (oldpass), (newpass))
#define ERR_load_PKCS12_strings() IAmiSSL->ERR_load_PKCS12_strings()
#define PKCS7_ISSUER_AND_SERIAL_digest(data, type, md, len) IAmiSSL->PKCS7_ISSUER_AND_SERIAL_digest((data), (type), (md), (len))
#define PKCS7_dup(p7) IAmiSSL->PKCS7_dup((p7))
#define d2i_PKCS7_bio(bp, p7) IAmiSSL->d2i_PKCS7_bio((bp), (p7))
#define i2d_PKCS7_bio(bp, p7) IAmiSSL->i2d_PKCS7_bio((bp), (p7))
#define PKCS7_ISSUER_AND_SERIAL_new() IAmiSSL->PKCS7_ISSUER_AND_SERIAL_new()
#define PKCS7_ISSUER_AND_SERIAL_free(a) IAmiSSL->PKCS7_ISSUER_AND_SERIAL_free((a))
#define d2i_PKCS7_ISSUER_AND_SERIAL(a, in, len) IAmiSSL->d2i_PKCS7_ISSUER_AND_SERIAL((a), (in), (len))
#define i2d_PKCS7_ISSUER_AND_SERIAL(a, out) IAmiSSL->i2d_PKCS7_ISSUER_AND_SERIAL((a), (out))
#define PKCS7_ISSUER_AND_SERIAL_it() IAmiSSL->PKCS7_ISSUER_AND_SERIAL_it()
#define PKCS7_SIGNER_INFO_new() IAmiSSL->PKCS7_SIGNER_INFO_new()
#define PKCS7_SIGNER_INFO_free(a) IAmiSSL->PKCS7_SIGNER_INFO_free((a))
#define d2i_PKCS7_SIGNER_INFO(a, in, len) IAmiSSL->d2i_PKCS7_SIGNER_INFO((a), (in), (len))
#define i2d_PKCS7_SIGNER_INFO(a, out) IAmiSSL->i2d_PKCS7_SIGNER_INFO((a), (out))
#define PKCS7_SIGNER_INFO_it() IAmiSSL->PKCS7_SIGNER_INFO_it()
#define PKCS7_RECIP_INFO_new() IAmiSSL->PKCS7_RECIP_INFO_new()
#define PKCS7_RECIP_INFO_free(a) IAmiSSL->PKCS7_RECIP_INFO_free((a))
#define d2i_PKCS7_RECIP_INFO(a, in, len) IAmiSSL->d2i_PKCS7_RECIP_INFO((a), (in), (len))
#define i2d_PKCS7_RECIP_INFO(a, out) IAmiSSL->i2d_PKCS7_RECIP_INFO((a), (out))
#define PKCS7_RECIP_INFO_it() IAmiSSL->PKCS7_RECIP_INFO_it()
#define PKCS7_SIGNED_new() IAmiSSL->PKCS7_SIGNED_new()
#define PKCS7_SIGNED_free(a) IAmiSSL->PKCS7_SIGNED_free((a))
#define d2i_PKCS7_SIGNED(a, in, len) IAmiSSL->d2i_PKCS7_SIGNED((a), (in), (len))
#define i2d_PKCS7_SIGNED(a, out) IAmiSSL->i2d_PKCS7_SIGNED((a), (out))
#define PKCS7_SIGNED_it() IAmiSSL->PKCS7_SIGNED_it()
#define PKCS7_ENC_CONTENT_new() IAmiSSL->PKCS7_ENC_CONTENT_new()
#define PKCS7_ENC_CONTENT_free(a) IAmiSSL->PKCS7_ENC_CONTENT_free((a))
#define d2i_PKCS7_ENC_CONTENT(a, in, len) IAmiSSL->d2i_PKCS7_ENC_CONTENT((a), (in), (len))
#define i2d_PKCS7_ENC_CONTENT(a, out) IAmiSSL->i2d_PKCS7_ENC_CONTENT((a), (out))
#define PKCS7_ENC_CONTENT_it() IAmiSSL->PKCS7_ENC_CONTENT_it()
#define PKCS7_ENVELOPE_new() IAmiSSL->PKCS7_ENVELOPE_new()
#define PKCS7_ENVELOPE_free(a) IAmiSSL->PKCS7_ENVELOPE_free((a))
#define d2i_PKCS7_ENVELOPE(a, in, len) IAmiSSL->d2i_PKCS7_ENVELOPE((a), (in), (len))
#define i2d_PKCS7_ENVELOPE(a, out) IAmiSSL->i2d_PKCS7_ENVELOPE((a), (out))
#define PKCS7_ENVELOPE_it() IAmiSSL->PKCS7_ENVELOPE_it()
#define PKCS7_SIGN_ENVELOPE_new() IAmiSSL->PKCS7_SIGN_ENVELOPE_new()
#define PKCS7_SIGN_ENVELOPE_free(a) IAmiSSL->PKCS7_SIGN_ENVELOPE_free((a))
#define d2i_PKCS7_SIGN_ENVELOPE(a, in, len) IAmiSSL->d2i_PKCS7_SIGN_ENVELOPE((a), (in), (len))
#define i2d_PKCS7_SIGN_ENVELOPE(a, out) IAmiSSL->i2d_PKCS7_SIGN_ENVELOPE((a), (out))
#define PKCS7_SIGN_ENVELOPE_it() IAmiSSL->PKCS7_SIGN_ENVELOPE_it()
#define PKCS7_DIGEST_new() IAmiSSL->PKCS7_DIGEST_new()
#define PKCS7_DIGEST_free(a) IAmiSSL->PKCS7_DIGEST_free((a))
#define d2i_PKCS7_DIGEST(a, in, len) IAmiSSL->d2i_PKCS7_DIGEST((a), (in), (len))
#define i2d_PKCS7_DIGEST(a, out) IAmiSSL->i2d_PKCS7_DIGEST((a), (out))
#define PKCS7_DIGEST_it() IAmiSSL->PKCS7_DIGEST_it()
#define PKCS7_ENCRYPT_new() IAmiSSL->PKCS7_ENCRYPT_new()
#define PKCS7_ENCRYPT_free(a) IAmiSSL->PKCS7_ENCRYPT_free((a))
#define d2i_PKCS7_ENCRYPT(a, in, len) IAmiSSL->d2i_PKCS7_ENCRYPT((a), (in), (len))
#define i2d_PKCS7_ENCRYPT(a, out) IAmiSSL->i2d_PKCS7_ENCRYPT((a), (out))
#define PKCS7_ENCRYPT_it() IAmiSSL->PKCS7_ENCRYPT_it()
#define PKCS7_new() IAmiSSL->PKCS7_new()
#define PKCS7_free(a) IAmiSSL->PKCS7_free((a))
#define d2i_PKCS7(a, in, len) IAmiSSL->d2i_PKCS7((a), (in), (len))
#define i2d_PKCS7(a, out) IAmiSSL->i2d_PKCS7((a), (out))
#define PKCS7_it() IAmiSSL->PKCS7_it()
#define PKCS7_ATTR_SIGN_it() IAmiSSL->PKCS7_ATTR_SIGN_it()
#define PKCS7_ATTR_VERIFY_it() IAmiSSL->PKCS7_ATTR_VERIFY_it()
#define PKCS7_ctrl(p7, cmd, larg, parg) IAmiSSL->PKCS7_ctrl((p7), (cmd), (larg), (parg))
#define PKCS7_set_type(p7, type) IAmiSSL->PKCS7_set_type((p7), (type))
#define PKCS7_set_content(p7, p7_data) IAmiSSL->PKCS7_set_content((p7), (p7_data))
#define PKCS7_SIGNER_INFO_set(p7i, x509, pkey, dgst) IAmiSSL->PKCS7_SIGNER_INFO_set((p7i), (x509), (pkey), (dgst))
#define PKCS7_add_signer(p7, p7i) IAmiSSL->PKCS7_add_signer((p7), (p7i))
#define PKCS7_add_certificate(p7, cert) IAmiSSL->PKCS7_add_certificate((p7), (cert))
#define PKCS7_add_crl(p7, crl) IAmiSSL->PKCS7_add_crl((p7), (crl))
#define PKCS7_content_new(p7, nid) IAmiSSL->PKCS7_content_new((p7), (nid))
#define PKCS7_dataVerify(cert_store, ctx, bio, p7, si) IAmiSSL->PKCS7_dataVerify((cert_store), (ctx), (bio), (p7), (si))
#define PKCS7_signatureVerify(bio, p7, si, signer) IAmiSSL->PKCS7_signatureVerify((bio), (p7), (si), (signer))
#define PKCS7_dataInit(p7, bio) IAmiSSL->PKCS7_dataInit((p7), (bio))
#define PKCS7_dataFinal(p7, bio) IAmiSSL->PKCS7_dataFinal((p7), (bio))
#define PKCS7_dataDecode(p7, pkey, in_bio, pcert) IAmiSSL->PKCS7_dataDecode((p7), (pkey), (in_bio), (pcert))
#define PKCS7_add_signature(p7, x509, pkey, dgst) IAmiSSL->PKCS7_add_signature((p7), (x509), (pkey), (dgst))
#define PKCS7_cert_from_signer_info(p7, si) IAmiSSL->PKCS7_cert_from_signer_info((p7), (si))
#define PKCS7_get_signer_info(p7) IAmiSSL->PKCS7_get_signer_info((p7))
#define PKCS7_add_recipient(p7, x509) IAmiSSL->PKCS7_add_recipient((p7), (x509))
#define PKCS7_add_recipient_info(p7, ri) IAmiSSL->PKCS7_add_recipient_info((p7), (ri))
#define PKCS7_RECIP_INFO_set(p7i, x509) IAmiSSL->PKCS7_RECIP_INFO_set((p7i), (x509))
#define PKCS7_set_cipher(p7, cipher) IAmiSSL->PKCS7_set_cipher((p7), (cipher))
#define PKCS7_get_issuer_and_serial(p7, idx) IAmiSSL->PKCS7_get_issuer_and_serial((p7), (idx))
#define PKCS7_digest_from_attributes(sk) IAmiSSL->PKCS7_digest_from_attributes((sk))
#define PKCS7_add_signed_attribute(p7si, nid, type, data) IAmiSSL->PKCS7_add_signed_attribute((p7si), (nid), (type), (data))
#define PKCS7_add_attribute(p7si, nid, atrtype, value) IAmiSSL->PKCS7_add_attribute((p7si), (nid), (atrtype), (value))
#define PKCS7_get_attribute(si, nid) IAmiSSL->PKCS7_get_attribute((si), (nid))
#define PKCS7_get_signed_attribute(si, nid) IAmiSSL->PKCS7_get_signed_attribute((si), (nid))
#define PKCS7_set_signed_attributes(p7si, sk) IAmiSSL->PKCS7_set_signed_attributes((p7si), (sk))
#define PKCS7_set_attributes(p7si, sk) IAmiSSL->PKCS7_set_attributes((p7si), (sk))
#define PKCS7_sign(signcert, pkey, certs, data, flags) IAmiSSL->PKCS7_sign((signcert), (pkey), (certs), (data), (flags))
#define PKCS7_verify(p7, certs, store, indata, out, flags) IAmiSSL->PKCS7_verify((p7), (certs), (store), (indata), (out), (flags))
#define PKCS7_get0_signers(p7, certs, flags) IAmiSSL->PKCS7_get0_signers((p7), (certs), (flags))
#define PKCS7_encrypt(certs, in, cipher, flags) IAmiSSL->PKCS7_encrypt((certs), (in), (cipher), (flags))
#define PKCS7_decrypt(p7, pkey, cert, data, flags) IAmiSSL->PKCS7_decrypt((p7), (pkey), (cert), (data), (flags))
#define PKCS7_add_attrib_smimecap(si, cap) IAmiSSL->PKCS7_add_attrib_smimecap((si), (cap))
#define PKCS7_get_smimecap(si) IAmiSSL->PKCS7_get_smimecap((si))
#define PKCS7_simple_smimecap(sk, nid, arg) IAmiSSL->PKCS7_simple_smimecap((sk), (nid), (arg))
#define SMIME_write_PKCS7(bio, p7, data, flags) IAmiSSL->SMIME_write_PKCS7((bio), (p7), (data), (flags))
#define SMIME_read_PKCS7(bio, bcont) IAmiSSL->SMIME_read_PKCS7((bio), (bcont))
#define SMIME_crlf_copy(in, out, flags) IAmiSSL->SMIME_crlf_copy((in), (out), (flags))
#define SMIME_text(in, out) IAmiSSL->SMIME_text((in), (out))
#define ERR_load_PKCS7_strings() IAmiSSL->ERR_load_PKCS7_strings()
#define RAND_set_rand_method(meth) IAmiSSL->RAND_set_rand_method((meth))
#define RAND_get_rand_method() IAmiSSL->RAND_get_rand_method()
#define RAND_bytes(buf, num) IAmiSSL->RAND_bytes((buf), (num))
#define RAND_pseudo_bytes(buf, num) IAmiSSL->RAND_pseudo_bytes((buf), (num))
#define RAND_seed(buf, num) IAmiSSL->RAND_seed((buf), (num))
#define RAND_add(buf, num, randomness) IAmiSSL->RAND_add((buf), (num), (randomness))
#define RAND_load_file(file, max_bytes) IAmiSSL->RAND_load_file((file), (max_bytes))
#define RAND_write_file(file) IAmiSSL->RAND_write_file((file))
#define RAND_file_name(file, num) IAmiSSL->RAND_file_name((file), (num))
#define RAND_status() IAmiSSL->RAND_status()
#define RAND_poll() IAmiSSL->RAND_poll()
#define ERR_load_RAND_strings() IAmiSSL->ERR_load_RAND_strings()
#define SSL_CTX_set_msg_callback(ctx, cb) IAmiSSL->SSL_CTX_set_msg_callback((ctx), (cb))
#define SSL_set_msg_callback(ssl, cb) IAmiSSL->SSL_set_msg_callback((ssl), (cb))
#define SSL_CTX_sessions(ctx) IAmiSSL->SSL_CTX_sessions((ctx))
#define SSL_get_finished(s, buf, count) IAmiSSL->SSL_get_finished((s), (buf), (count))
#define SSL_get_peer_finished(s, buf, count) IAmiSSL->SSL_get_peer_finished((s), (buf), (count))
#define BIO_f_ssl() IAmiSSL->BIO_f_ssl()
#define BIO_new_ssl(ctx, client) IAmiSSL->BIO_new_ssl((ctx), (client))
#define BIO_new_ssl_connect(ctx) IAmiSSL->BIO_new_ssl_connect((ctx))
#define BIO_new_buffer_ssl_connect(ctx) IAmiSSL->BIO_new_buffer_ssl_connect((ctx))
#define BIO_ssl_copy_session_id(to, from) IAmiSSL->BIO_ssl_copy_session_id((to), (from))
#define BIO_ssl_shutdown(ssl_bio) IAmiSSL->BIO_ssl_shutdown((ssl_bio))
#define SSL_CTX_set_cipher_list(a, str) IAmiSSL->SSL_CTX_set_cipher_list((a), (str))
#define SSL_CTX_new(meth) IAmiSSL->SSL_CTX_new((meth))
#define SSL_CTX_free(a) IAmiSSL->SSL_CTX_free((a))
#define SSL_CTX_set_timeout(ctx, t) IAmiSSL->SSL_CTX_set_timeout((ctx), (t))
#define SSL_CTX_get_timeout(ctx) IAmiSSL->SSL_CTX_get_timeout((ctx))
#define SSL_CTX_get_cert_store(a) IAmiSSL->SSL_CTX_get_cert_store((a))
#define SSL_CTX_set_cert_store(a, b) IAmiSSL->SSL_CTX_set_cert_store((a), (b))
#define SSL_want(s) IAmiSSL->SSL_want((s))
#define SSL_clear(s) IAmiSSL->SSL_clear((s))
#define SSL_CTX_flush_sessions(ctx, tm) IAmiSSL->SSL_CTX_flush_sessions((ctx), (tm))
#define SSL_get_current_cipher(s) IAmiSSL->SSL_get_current_cipher((s))
#define SSL_CIPHER_get_bits(c, alg_bits) IAmiSSL->SSL_CIPHER_get_bits((c), (alg_bits))
#define SSL_CIPHER_get_version(c) IAmiSSL->SSL_CIPHER_get_version((c))
#define SSL_CIPHER_get_name(c) IAmiSSL->SSL_CIPHER_get_name((c))
#define SSL_CIPHER_get_mac(cipher) IAmiSSL->SSL_CIPHER_get_mac((cipher))
#define SSL_CIPHER_get_encryption(cipher) IAmiSSL->SSL_CIPHER_get_encryption((cipher))
#define SSL_CIPHER_get_authentication(cipher) IAmiSSL->SSL_CIPHER_get_authentication((cipher))
#define SSL_CIPHER_get_key_exchange(cipher) IAmiSSL->SSL_CIPHER_get_key_exchange((cipher))
#define SSL_get_fd(s) IAmiSSL->SSL_get_fd((s))
#define SSL_get_rfd(s) IAmiSSL->SSL_get_rfd((s))
#define SSL_get_wfd(s) IAmiSSL->SSL_get_wfd((s))
#define SSL_get_cipher_list(s, n) IAmiSSL->SSL_get_cipher_list((s), (n))
#define SSL_get_shared_ciphers(s, buf, size) IAmiSSL->SSL_get_shared_ciphers((s), (buf), (size))
#define SSL_get_read_ahead(s) IAmiSSL->SSL_get_read_ahead((s))
#define SSL_pending(s) IAmiSSL->SSL_pending((s))
#define SSL_set_fd(s, fd) IAmiSSL->SSL_set_fd((s), (fd))
#define SSL_set_rfd(s, fd) IAmiSSL->SSL_set_rfd((s), (fd))
#define SSL_set_wfd(s, fd) IAmiSSL->SSL_set_wfd((s), (fd))
#define SSL_set_bio(s, rbio, wbio) IAmiSSL->SSL_set_bio((s), (rbio), (wbio))
#define SSL_get_rbio(s) IAmiSSL->SSL_get_rbio((s))
#define SSL_get_wbio(s) IAmiSSL->SSL_get_wbio((s))
#define SSL_set_cipher_list(s, str) IAmiSSL->SSL_set_cipher_list((s), (str))
#define SSL_set_read_ahead(s, yes) IAmiSSL->SSL_set_read_ahead((s), (yes))
#define SSL_get_verify_mode(s) IAmiSSL->SSL_get_verify_mode((s))
#define SSL_get_verify_depth(s) IAmiSSL->SSL_get_verify_depth((s))
#define SSL_get_verify_callback(s) IAmiSSL->SSL_get_verify_callback((s))
#define SSL_set_verify(s, mode, callback) IAmiSSL->SSL_set_verify((s), (mode), (callback))
#define SSL_set_verify_depth(s, depth) IAmiSSL->SSL_set_verify_depth((s), (depth))
#define SSL_use_RSAPrivateKey(ssl, rsa) IAmiSSL->SSL_use_RSAPrivateKey((ssl), (rsa))
#define SSL_use_RSAPrivateKey_ASN1(ssl, d, len) IAmiSSL->SSL_use_RSAPrivateKey_ASN1((ssl), (d), (len))
#define SSL_use_PrivateKey(ssl, pkey) IAmiSSL->SSL_use_PrivateKey((ssl), (pkey))
#define SSL_use_PrivateKey_ASN1(pk, ssl, d, len) IAmiSSL->SSL_use_PrivateKey_ASN1((pk), (ssl), (d), (len))
#define SSL_use_certificate(ssl, x) IAmiSSL->SSL_use_certificate((ssl), (x))
#define SSL_use_certificate_ASN1(ssl, d, len) IAmiSSL->SSL_use_certificate_ASN1((ssl), (d), (len))
#define SSL_use_RSAPrivateKey_file(ssl, file, type) IAmiSSL->SSL_use_RSAPrivateKey_file((ssl), (file), (type))
#define SSL_use_PrivateKey_file(ssl, file, type) IAmiSSL->SSL_use_PrivateKey_file((ssl), (file), (type))
#define SSL_use_certificate_file(ssl, file, type) IAmiSSL->SSL_use_certificate_file((ssl), (file), (type))
#define SSL_CTX_use_RSAPrivateKey_file(ctx, file, type) IAmiSSL->SSL_CTX_use_RSAPrivateKey_file((ctx), (file), (type))
#define SSL_CTX_use_PrivateKey_file(ctx, file, type) IAmiSSL->SSL_CTX_use_PrivateKey_file((ctx), (file), (type))
#define SSL_CTX_use_certificate_file(ctx, file, type) IAmiSSL->SSL_CTX_use_certificate_file((ctx), (file), (type))
#define SSL_CTX_use_certificate_chain_file(ctx, file) IAmiSSL->SSL_CTX_use_certificate_chain_file((ctx), (file))
#define SSL_load_client_CA_file(file) IAmiSSL->SSL_load_client_CA_file((file))
#define SSL_add_file_cert_subjects_to_stack(stackCAs, file) IAmiSSL->SSL_add_file_cert_subjects_to_stack((stackCAs), (file))
#define SSL_add_dir_cert_subjects_to_stack(stackCAs, dir) IAmiSSL->SSL_add_dir_cert_subjects_to_stack((stackCAs), (dir))
#define OBSOLETE_SSL_load_error_strings() IAmiSSL->OBSOLETE_SSL_load_error_strings()
#define SSL_state_string(s) IAmiSSL->SSL_state_string((s))
#define SSL_rstate_string(s) IAmiSSL->SSL_rstate_string((s))
#define SSL_state_string_long(s) IAmiSSL->SSL_state_string_long((s))
#define SSL_rstate_string_long(s) IAmiSSL->SSL_rstate_string_long((s))
#define SSL_SESSION_get_time(s) IAmiSSL->SSL_SESSION_get_time((s))
#define SSL_SESSION_set_time(s, t) IAmiSSL->SSL_SESSION_set_time((s), (t))
#define SSL_SESSION_get_timeout(s) IAmiSSL->SSL_SESSION_get_timeout((s))
#define SSL_SESSION_set_timeout(s, t) IAmiSSL->SSL_SESSION_set_timeout((s), (t))
#define SSL_copy_session_id(to, from) IAmiSSL->SSL_copy_session_id((to), (from))
#define SSL_SESSION_new() IAmiSSL->SSL_SESSION_new()
#define SSL_SESSION_print(fp, ses) IAmiSSL->SSL_SESSION_print((fp), (ses))
#define SSL_SESSION_free(ses) IAmiSSL->SSL_SESSION_free((ses))
#define i2d_SSL_SESSION(in, pp) IAmiSSL->i2d_SSL_SESSION((in), (pp))
#define SSL_set_session(to, session) IAmiSSL->SSL_set_session((to), (session))
#define SSL_CTX_add_session(ctx, session) IAmiSSL->SSL_CTX_add_session((ctx), (session))
#define SSL_CTX_remove_session(ctx, session) IAmiSSL->SSL_CTX_remove_session((ctx), (session))
#define SSL_CTX_set_generate_session_id(ctx, cb) IAmiSSL->SSL_CTX_set_generate_session_id((ctx), (cb))
#define SSL_set_generate_session_id(s, cb) IAmiSSL->SSL_set_generate_session_id((s), (cb))
#define SSL_has_matching_session_id(s, id, id_len) IAmiSSL->SSL_has_matching_session_id((s), (id), (id_len))
#define d2i_SSL_SESSION(a, pp, length) IAmiSSL->d2i_SSL_SESSION((a), (pp), (length))
#define SSL_get1_peer_certificate(s) IAmiSSL->SSL_get1_peer_certificate((s))
#define SSL_get_peer_cert_chain(s) IAmiSSL->SSL_get_peer_cert_chain((s))
#define SSL_CTX_get_verify_mode(ctx) IAmiSSL->SSL_CTX_get_verify_mode((ctx))
#define SSL_CTX_get_verify_depth(ctx) IAmiSSL->SSL_CTX_get_verify_depth((ctx))
#define SSL_CTX_get_verify_callback(ctx) IAmiSSL->SSL_CTX_get_verify_callback((ctx))
#define SSL_CTX_set_verify(ctx, mode, callback) IAmiSSL->SSL_CTX_set_verify((ctx), (mode), (callback))
#define SSL_CTX_set_verify_depth(ctx, depth) IAmiSSL->SSL_CTX_set_verify_depth((ctx), (depth))
#define SSL_CTX_set_cert_verify_callback(ctx, cb, arg) IAmiSSL->SSL_CTX_set_cert_verify_callback((ctx), (cb), (arg))
#define SSL_CTX_use_RSAPrivateKey(ctx, rsa) IAmiSSL->SSL_CTX_use_RSAPrivateKey((ctx), (rsa))
#define SSL_CTX_use_RSAPrivateKey_ASN1(ctx, d, len) IAmiSSL->SSL_CTX_use_RSAPrivateKey_ASN1((ctx), (d), (len))
#define SSL_CTX_use_PrivateKey(ctx, pkey) IAmiSSL->SSL_CTX_use_PrivateKey((ctx), (pkey))
#define SSL_CTX_use_PrivateKey_ASN1(pk, ctx, d, len) IAmiSSL->SSL_CTX_use_PrivateKey_ASN1((pk), (ctx), (d), (len))
#define SSL_CTX_use_certificate(ctx, x) IAmiSSL->SSL_CTX_use_certificate((ctx), (x))
#define SSL_CTX_use_certificate_ASN1(ctx, len, d) IAmiSSL->SSL_CTX_use_certificate_ASN1((ctx), (len), (d))
#define SSL_CTX_set_default_passwd_cb(ctx, cb) IAmiSSL->SSL_CTX_set_default_passwd_cb((ctx), (cb))
#define SSL_CTX_set_default_passwd_cb_userdata(ctx, u) IAmiSSL->SSL_CTX_set_default_passwd_cb_userdata((ctx), (u))
#define SSL_CTX_check_private_key(ctx) IAmiSSL->SSL_CTX_check_private_key((ctx))
#define SSL_check_private_key(ctx) IAmiSSL->SSL_check_private_key((ctx))
#define SSL_CTX_set_session_id_context(ctx, sid_ctx, sid_ctx_len) IAmiSSL->SSL_CTX_set_session_id_context((ctx), (sid_ctx), (sid_ctx_len))
#define SSL_new(ctx) IAmiSSL->SSL_new((ctx))
#define SSL_set_session_id_context(ssl, sid_ctx, sid_ctx_len) IAmiSSL->SSL_set_session_id_context((ssl), (sid_ctx), (sid_ctx_len))
#define SSL_CTX_set_purpose(ctx, purpose) IAmiSSL->SSL_CTX_set_purpose((ctx), (purpose))
#define SSL_set_purpose(ssl, purpose) IAmiSSL->SSL_set_purpose((ssl), (purpose))
#define SSL_CTX_set_trust(ctx, trust) IAmiSSL->SSL_CTX_set_trust((ctx), (trust))
#define SSL_set_trust(ssl, trust) IAmiSSL->SSL_set_trust((ssl), (trust))
#define SSL_free(ssl) IAmiSSL->SSL_free((ssl))
#define SSL_accept(ssl) IAmiSSL->SSL_accept((ssl))
#define SSL_connect(ssl) IAmiSSL->SSL_connect((ssl))
#define SSL_read(ssl, buf, num) IAmiSSL->SSL_read((ssl), (buf), (num))
#define SSL_peek(ssl, buf, num) IAmiSSL->SSL_peek((ssl), (buf), (num))
#define SSL_write(ssl, buf, num) IAmiSSL->SSL_write((ssl), (buf), (num))
#define SSL_ctrl(ssl, cmd, larg, parg) IAmiSSL->SSL_ctrl((ssl), (cmd), (larg), (parg))
#define SSL_callback_ctrl(a, a1, b) IAmiSSL->SSL_callback_ctrl((a), (a1), (b))
#define SSL_CTX_ctrl(ctx, cmd, larg, parg) IAmiSSL->SSL_CTX_ctrl((ctx), (cmd), (larg), (parg))
#define SSL_CTX_callback_ctrl(a1, a2, a3) IAmiSSL->SSL_CTX_callback_ctrl((a1), (a2), (a3))
#define SSL_get_error(s, ret_code) IAmiSSL->SSL_get_error((s), (ret_code))
#define SSL_get_version(s) IAmiSSL->SSL_get_version((s))
#define SSL_CTX_set_ssl_version(ctx, meth) IAmiSSL->SSL_CTX_set_ssl_version((ctx), (meth))
#define TLSv1_method() IAmiSSL->TLSv1_method()
#define TLSv1_server_method() IAmiSSL->TLSv1_server_method()
#define TLSv1_client_method() IAmiSSL->TLSv1_client_method()
#define SSL_get_ciphers(s) IAmiSSL->SSL_get_ciphers((s))
#define SSL_do_handshake(s) IAmiSSL->SSL_do_handshake((s))
#define SSL_renegotiate(s) IAmiSSL->SSL_renegotiate((s))
#define SSL_renegotiate_pending(s) IAmiSSL->SSL_renegotiate_pending((s))
#define SSL_shutdown(s) IAmiSSL->SSL_shutdown((s))
#define SSL_get_ssl_method(s) IAmiSSL->SSL_get_ssl_method((s))
#define SSL_set_ssl_method(s, method) IAmiSSL->SSL_set_ssl_method((s), (method))
#define SSL_alert_type_string_long(value) IAmiSSL->SSL_alert_type_string_long((value))
#define SSL_alert_type_string(value) IAmiSSL->SSL_alert_type_string((value))
#define SSL_alert_desc_string_long(value) IAmiSSL->SSL_alert_desc_string_long((value))
#define SSL_alert_desc_string(value) IAmiSSL->SSL_alert_desc_string((value))
#define SSL_set_client_CA_list(s, name_list) IAmiSSL->SSL_set_client_CA_list((s), (name_list))
#define SSL_CTX_set_client_CA_list(ctx, name_list) IAmiSSL->SSL_CTX_set_client_CA_list((ctx), (name_list))
#define SSL_get_client_CA_list(s) IAmiSSL->SSL_get_client_CA_list((s))
#define SSL_CTX_get_client_CA_list(s) IAmiSSL->SSL_CTX_get_client_CA_list((s))
#define SSL_add_client_CA(ssl, x) IAmiSSL->SSL_add_client_CA((ssl), (x))
#define SSL_CTX_add_client_CA(ctx, x) IAmiSSL->SSL_CTX_add_client_CA((ctx), (x))
#define SSL_set_connect_state(s) IAmiSSL->SSL_set_connect_state((s))
#define SSL_set_accept_state(s) IAmiSSL->SSL_set_accept_state((s))
#define SSL_get_default_timeout(s) IAmiSSL->SSL_get_default_timeout((s))
#define OBSOLETE_SSL_library_init() IAmiSSL->OBSOLETE_SSL_library_init()
#define SSL_CIPHER_description(a1, buf, size) IAmiSSL->SSL_CIPHER_description((a1), (buf), (size))
#define SSL_dup_CA_list(sk) IAmiSSL->SSL_dup_CA_list((sk))
#define SSL_dup(ssl) IAmiSSL->SSL_dup((ssl))
#define SSL_get_certificate(ssl) IAmiSSL->SSL_get_certificate((ssl))
#define SSL_get_privatekey(ssl) IAmiSSL->SSL_get_privatekey((ssl))
#define SSL_CTX_set_quiet_shutdown(ctx, mode) IAmiSSL->SSL_CTX_set_quiet_shutdown((ctx), (mode))
#define SSL_CTX_get_quiet_shutdown(ctx) IAmiSSL->SSL_CTX_get_quiet_shutdown((ctx))
#define SSL_set_quiet_shutdown(ssl, mode) IAmiSSL->SSL_set_quiet_shutdown((ssl), (mode))
#define SSL_get_quiet_shutdown(ssl) IAmiSSL->SSL_get_quiet_shutdown((ssl))
#define SSL_set_shutdown(ssl, mode) IAmiSSL->SSL_set_shutdown((ssl), (mode))
#define SSL_get_shutdown(ssl) IAmiSSL->SSL_get_shutdown((ssl))
#define SSL_version(ssl) IAmiSSL->SSL_version((ssl))
#define SSL_CTX_set_default_verify_paths(ctx) IAmiSSL->SSL_CTX_set_default_verify_paths((ctx))
#define SSL_CTX_load_verify_locations(ctx, CAfile, CApath) IAmiSSL->SSL_CTX_load_verify_locations((ctx), (CAfile), (CApath))
#define SSL_get_session(ssl) IAmiSSL->SSL_get_session((ssl))
#define SSL_get1_session(ssl) IAmiSSL->SSL_get1_session((ssl))
#define SSL_get_SSL_CTX(ssl) IAmiSSL->SSL_get_SSL_CTX((ssl))
#define SSL_set_info_callback(ssl, cb) IAmiSSL->SSL_set_info_callback((ssl), (cb))
#define SSL_get_info_callback(ssl) IAmiSSL->SSL_get_info_callback((ssl))
#define SSL_set_verify_result(ssl, v) IAmiSSL->SSL_set_verify_result((ssl), (v))
#define SSL_get_verify_result(ssl) IAmiSSL->SSL_get_verify_result((ssl))
#define SSL_set_ex_data(ssl, idx, data) IAmiSSL->SSL_set_ex_data((ssl), (idx), (data))
#define SSL_get_ex_data(ssl, idx) IAmiSSL->SSL_get_ex_data((ssl), (idx))
#define OBSOLETE_SSL_get_ex_new_index(argl, argp, new_func, dup_func, free_func) IAmiSSL->OBSOLETE_SSL_get_ex_new_index((argl), (argp), (new_func), (dup_func), (free_func))
#define SSL_SESSION_set_ex_data(ss, idx, data) IAmiSSL->SSL_SESSION_set_ex_data((ss), (idx), (data))
#define SSL_SESSION_get_ex_data(ss, idx) IAmiSSL->SSL_SESSION_get_ex_data((ss), (idx))
#define OBSOLETE_SSL_SESSION_get_ex_new_index(argl, argp, new_func, dup_func, free_func) IAmiSSL->OBSOLETE_SSL_SESSION_get_ex_new_index((argl), (argp), (new_func), (dup_func), (free_func))
#define SSL_CTX_set_ex_data(ssl, idx, data) IAmiSSL->SSL_CTX_set_ex_data((ssl), (idx), (data))
#define SSL_CTX_get_ex_data(ssl, idx) IAmiSSL->SSL_CTX_get_ex_data((ssl), (idx))
#define OBSOLETE_SSL_CTX_get_ex_new_index(argl, argp, new_func, dup_func, free_func) IAmiSSL->OBSOLETE_SSL_CTX_get_ex_new_index((argl), (argp), (new_func), (dup_func), (free_func))
#define SSL_get_ex_data_X509_STORE_CTX_idx() IAmiSSL->SSL_get_ex_data_X509_STORE_CTX_idx()
#define SSL_CTX_set_tmp_dh_callback(ctx, dh) IAmiSSL->SSL_CTX_set_tmp_dh_callback((ctx), (dh))
#define SSL_set_tmp_dh_callback(ssl, dh) IAmiSSL->SSL_set_tmp_dh_callback((ssl), (dh))
#define SSL_COMP_add_compression_method(id, cm) IAmiSSL->SSL_COMP_add_compression_method((id), (cm))
#define ERR_load_SSL_strings() IAmiSSL->ERR_load_SSL_strings()
#define OPENSSL_sk_num(a) IAmiSSL->OPENSSL_sk_num((a))
#define OPENSSL_sk_value(a, b) IAmiSSL->OPENSSL_sk_value((a), (b))
#define OPENSSL_sk_set(a, b, c) IAmiSSL->OPENSSL_sk_set((a), (b), (c))
#define OPENSSL_sk_new(cmp) IAmiSSL->OPENSSL_sk_new((cmp))
#define OPENSSL_sk_new_null() IAmiSSL->OPENSSL_sk_new_null()
#define OPENSSL_sk_free(a) IAmiSSL->OPENSSL_sk_free((a))
#define OPENSSL_sk_pop_free(st, func) IAmiSSL->OPENSSL_sk_pop_free((st), (func))
#define OPENSSL_sk_insert(sk, data, where) IAmiSSL->OPENSSL_sk_insert((sk), (data), (where))
#define OPENSSL_sk_delete(st, loc) IAmiSSL->OPENSSL_sk_delete((st), (loc))
#define OPENSSL_sk_delete_ptr(st, p) IAmiSSL->OPENSSL_sk_delete_ptr((st), (p))
#define OPENSSL_sk_find(st, data) IAmiSSL->OPENSSL_sk_find((st), (data))
#define OPENSSL_sk_push(st, data) IAmiSSL->OPENSSL_sk_push((st), (data))
#define OPENSSL_sk_unshift(st, data) IAmiSSL->OPENSSL_sk_unshift((st), (data))
#define OPENSSL_sk_shift(st) IAmiSSL->OPENSSL_sk_shift((st))
#define OPENSSL_sk_pop(st) IAmiSSL->OPENSSL_sk_pop((st))
#define OPENSSL_sk_zero(st) IAmiSSL->OPENSSL_sk_zero((st))
#define OPENSSL_sk_set_cmp_func(sk, c) IAmiSSL->OPENSSL_sk_set_cmp_func((sk), (c))
#define OPENSSL_sk_dup(st) IAmiSSL->OPENSSL_sk_dup((st))
#define OPENSSL_sk_sort(st) IAmiSSL->OPENSSL_sk_sort((st))
#define OPENSSL_sk_is_sorted(st) IAmiSSL->OPENSSL_sk_is_sorted((st))
#define TXT_DB_read(in, num) IAmiSSL->TXT_DB_read((in), (num))
#define TXT_DB_write(out, db) IAmiSSL->TXT_DB_write((out), (db))
#define TXT_DB_create_index(db, field, qual, hash, cmp) IAmiSSL->TXT_DB_create_index((db), (field), (qual), (hash), (cmp))
#define TXT_DB_free(db) IAmiSSL->TXT_DB_free((db))
#define TXT_DB_get_by_index(db, idx, value) IAmiSSL->TXT_DB_get_by_index((db), (idx), (value))
#define TXT_DB_insert(db, value) IAmiSSL->TXT_DB_insert((db), (value))
#define UI_new() IAmiSSL->UI_new()
#define UI_new_method(method) IAmiSSL->UI_new_method((method))
#define UI_free(ui) IAmiSSL->UI_free((ui))
#define UI_add_input_string(ui, prompt, flags, result_buf, minsize, maxsize) IAmiSSL->UI_add_input_string((ui), (prompt), (flags), (result_buf), (minsize), (maxsize))
#define UI_dup_input_string(ui, prompt, flags, result_buf, minsize, maxsize) IAmiSSL->UI_dup_input_string((ui), (prompt), (flags), (result_buf), (minsize), (maxsize))
#define UI_add_verify_string(ui, prompt, flags, result_buf, minsize, maxsize, test_buf) IAmiSSL->UI_add_verify_string((ui), (prompt), (flags), (result_buf), (minsize), (maxsize), (test_buf))
#define UI_dup_verify_string(ui, prompt, flags, result_buf, minsize, maxsize, test_buf) IAmiSSL->UI_dup_verify_string((ui), (prompt), (flags), (result_buf), (minsize), (maxsize), (test_buf))
#define UI_add_input_boolean(ui, prompt, action_desc, ok_chars, cancel_chars, flags, result_buf) IAmiSSL->UI_add_input_boolean((ui), (prompt), (action_desc), (ok_chars), (cancel_chars), (flags), (result_buf))
#define UI_dup_input_boolean(ui, prompt, action_desc, ok_chars, cancel_chars, flags, result_buf) IAmiSSL->UI_dup_input_boolean((ui), (prompt), (action_desc), (ok_chars), (cancel_chars), (flags), (result_buf))
#define UI_add_info_string(ui, text) IAmiSSL->UI_add_info_string((ui), (text))
#define UI_dup_info_string(ui, text) IAmiSSL->UI_dup_info_string((ui), (text))
#define UI_add_error_string(ui, text) IAmiSSL->UI_add_error_string((ui), (text))
#define UI_dup_error_string(ui, text) IAmiSSL->UI_dup_error_string((ui), (text))
#define UI_construct_prompt(ui_method, object_desc, object_name) IAmiSSL->UI_construct_prompt((ui_method), (object_desc), (object_name))
#define UI_add_user_data(ui, user_data) IAmiSSL->UI_add_user_data((ui), (user_data))
#define UI_get0_user_data(ui) IAmiSSL->UI_get0_user_data((ui))
#define UI_get0_result(ui, i) IAmiSSL->UI_get0_result((ui), (i))
#define UI_process(ui) IAmiSSL->UI_process((ui))
#define UI_ctrl(ui, cmd, i, p, f) IAmiSSL->UI_ctrl((ui), (cmd), (i), (p), (f))
#define OBSOLETE_UI_get_ex_new_index(argl, argp, new_func, dup_func, free_func) IAmiSSL->OBSOLETE_UI_get_ex_new_index((argl), (argp), (new_func), (dup_func), (free_func))
#define UI_set_ex_data(r, idx, arg) IAmiSSL->UI_set_ex_data((r), (idx), (arg))
#define UI_get_ex_data(r, idx) IAmiSSL->UI_get_ex_data((r), (idx))
#define UI_set_default_method(meth) IAmiSSL->UI_set_default_method((meth))
#define UI_get_default_method() IAmiSSL->UI_get_default_method()
#define UI_get_method(ui) IAmiSSL->UI_get_method((ui))
#define UI_set_method(ui, meth) IAmiSSL->UI_set_method((ui), (meth))
#define UI_OpenSSL() IAmiSSL->UI_OpenSSL()
#define UI_create_method(name) IAmiSSL->UI_create_method((name))
#define UI_destroy_method(ui_method) IAmiSSL->UI_destroy_method((ui_method))
#define UI_method_set_opener(method, opener) IAmiSSL->UI_method_set_opener((method), (opener))
#define UI_method_set_writer(method, writer) IAmiSSL->UI_method_set_writer((method), (writer))
#define UI_method_set_flusher(method, flusher) IAmiSSL->UI_method_set_flusher((method), (flusher))
#define UI_method_set_reader(method, reader) IAmiSSL->UI_method_set_reader((method), (reader))
#define UI_method_set_closer(method, closer) IAmiSSL->UI_method_set_closer((method), (closer))
#define UI_method_get_opener(method) IAmiSSL->UI_method_get_opener((method))
#define UI_method_get_writer(method) IAmiSSL->UI_method_get_writer((method))
#define UI_method_get_flusher(method) IAmiSSL->UI_method_get_flusher((method))
#define UI_method_get_reader(method) IAmiSSL->UI_method_get_reader((method))
#define UI_method_get_closer(method) IAmiSSL->UI_method_get_closer((method))
#define UI_get_string_type(uis) IAmiSSL->UI_get_string_type((uis))
#define UI_get_input_flags(uis) IAmiSSL->UI_get_input_flags((uis))
#define UI_get0_output_string(uis) IAmiSSL->UI_get0_output_string((uis))
#define UI_get0_action_string(uis) IAmiSSL->UI_get0_action_string((uis))
#define UI_get0_result_string(uis) IAmiSSL->UI_get0_result_string((uis))
#define UI_get0_test_string(uis) IAmiSSL->UI_get0_test_string((uis))
#define UI_get_result_minsize(uis) IAmiSSL->UI_get_result_minsize((uis))
#define UI_get_result_maxsize(uis) IAmiSSL->UI_get_result_maxsize((uis))
#define UI_set_result(ui, uis, result) IAmiSSL->UI_set_result((ui), (uis), (result))
#define UI_UTIL_read_pw_string(buf, length, prompt, verify) IAmiSSL->UI_UTIL_read_pw_string((buf), (length), (prompt), (verify))
#define UI_UTIL_read_pw(buf, buff, size, prompt, verify) IAmiSSL->UI_UTIL_read_pw((buf), (buff), (size), (prompt), (verify))
#define ERR_load_UI_strings() IAmiSSL->ERR_load_UI_strings()
#define X509_verify_cert_error_string(n) IAmiSSL->X509_verify_cert_error_string((n))
#define X509_verify(a, r) IAmiSSL->X509_verify((a), (r))
#define X509_REQ_verify(a, r) IAmiSSL->X509_REQ_verify((a), (r))
#define X509_CRL_verify(a, r) IAmiSSL->X509_CRL_verify((a), (r))
#define NETSCAPE_SPKI_verify(a, r) IAmiSSL->NETSCAPE_SPKI_verify((a), (r))
#define NETSCAPE_SPKI_b64_decode(str, len) IAmiSSL->NETSCAPE_SPKI_b64_decode((str), (len))
#define NETSCAPE_SPKI_b64_encode(x) IAmiSSL->NETSCAPE_SPKI_b64_encode((x))
#define NETSCAPE_SPKI_get_pubkey(x) IAmiSSL->NETSCAPE_SPKI_get_pubkey((x))
#define NETSCAPE_SPKI_set_pubkey(x, pkey) IAmiSSL->NETSCAPE_SPKI_set_pubkey((x), (pkey))
#define NETSCAPE_SPKI_print(out, spki) IAmiSSL->NETSCAPE_SPKI_print((out), (spki))
#define X509_signature_print(bp, alg, sig) IAmiSSL->X509_signature_print((bp), (alg), (sig))
#define X509_sign(x, pkey, md) IAmiSSL->X509_sign((x), (pkey), (md))
#define X509_REQ_sign(x, pkey, md) IAmiSSL->X509_REQ_sign((x), (pkey), (md))
#define X509_CRL_sign(x, pkey, md) IAmiSSL->X509_CRL_sign((x), (pkey), (md))
#define NETSCAPE_SPKI_sign(x, pkey, md) IAmiSSL->NETSCAPE_SPKI_sign((x), (pkey), (md))
#define X509_pubkey_digest(data, type, md, len) IAmiSSL->X509_pubkey_digest((data), (type), (md), (len))
#define X509_digest(data, type, md, len) IAmiSSL->X509_digest((data), (type), (md), (len))
#define X509_CRL_digest(data, type, md, len) IAmiSSL->X509_CRL_digest((data), (type), (md), (len))
#define X509_REQ_digest(data, type, md, len) IAmiSSL->X509_REQ_digest((data), (type), (md), (len))
#define X509_NAME_digest(data, type, md, len) IAmiSSL->X509_NAME_digest((data), (type), (md), (len))
#define d2i_X509_bio(bp, x509) IAmiSSL->d2i_X509_bio((bp), (x509))
#define i2d_X509_bio(bp, x509) IAmiSSL->i2d_X509_bio((bp), (x509))
#define d2i_X509_CRL_bio(bp, crl) IAmiSSL->d2i_X509_CRL_bio((bp), (crl))
#define i2d_X509_CRL_bio(bp, crl) IAmiSSL->i2d_X509_CRL_bio((bp), (crl))
#define d2i_X509_REQ_bio(bp, req) IAmiSSL->d2i_X509_REQ_bio((bp), (req))
#define i2d_X509_REQ_bio(bp, req) IAmiSSL->i2d_X509_REQ_bio((bp), (req))
#define d2i_RSAPrivateKey_bio(bp, rsa) IAmiSSL->d2i_RSAPrivateKey_bio((bp), (rsa))
#define i2d_RSAPrivateKey_bio(bp, rsa) IAmiSSL->i2d_RSAPrivateKey_bio((bp), (rsa))
#define d2i_RSAPublicKey_bio(bp, rsa) IAmiSSL->d2i_RSAPublicKey_bio((bp), (rsa))
#define i2d_RSAPublicKey_bio(bp, rsa) IAmiSSL->i2d_RSAPublicKey_bio((bp), (rsa))
#define d2i_RSA_PUBKEY_bio(bp, rsa) IAmiSSL->d2i_RSA_PUBKEY_bio((bp), (rsa))
#define i2d_RSA_PUBKEY_bio(bp, rsa) IAmiSSL->i2d_RSA_PUBKEY_bio((bp), (rsa))
#define d2i_DSA_PUBKEY_bio(bp, dsa) IAmiSSL->d2i_DSA_PUBKEY_bio((bp), (dsa))
#define i2d_DSA_PUBKEY_bio(bp, dsa) IAmiSSL->i2d_DSA_PUBKEY_bio((bp), (dsa))
#define d2i_DSAPrivateKey_bio(bp, dsa) IAmiSSL->d2i_DSAPrivateKey_bio((bp), (dsa))
#define i2d_DSAPrivateKey_bio(bp, dsa) IAmiSSL->i2d_DSAPrivateKey_bio((bp), (dsa))
#define d2i_PKCS8_bio(bp, p8) IAmiSSL->d2i_PKCS8_bio((bp), (p8))
#define i2d_PKCS8_bio(bp, p8) IAmiSSL->i2d_PKCS8_bio((bp), (p8))
#define d2i_PKCS8_PRIV_KEY_INFO_bio(bp, p8inf) IAmiSSL->d2i_PKCS8_PRIV_KEY_INFO_bio((bp), (p8inf))
#define i2d_PKCS8_PRIV_KEY_INFO_bio(bp, p8inf) IAmiSSL->i2d_PKCS8_PRIV_KEY_INFO_bio((bp), (p8inf))
#define i2d_PKCS8PrivateKeyInfo_bio(bp, key) IAmiSSL->i2d_PKCS8PrivateKeyInfo_bio((bp), (key))
#define i2d_PrivateKey_bio(bp, pkey) IAmiSSL->i2d_PrivateKey_bio((bp), (pkey))
#define d2i_PrivateKey_bio(bp, a) IAmiSSL->d2i_PrivateKey_bio((bp), (a))
#define i2d_PUBKEY_bio(bp, pkey) IAmiSSL->i2d_PUBKEY_bio((bp), (pkey))
#define d2i_PUBKEY_bio(bp, a) IAmiSSL->d2i_PUBKEY_bio((bp), (a))
#define X509_dup(x509) IAmiSSL->X509_dup((x509))
#define X509_ATTRIBUTE_dup(xa) IAmiSSL->X509_ATTRIBUTE_dup((xa))
#define X509_EXTENSION_dup(ex) IAmiSSL->X509_EXTENSION_dup((ex))
#define X509_CRL_dup(crl) IAmiSSL->X509_CRL_dup((crl))
#define X509_REQ_dup(req) IAmiSSL->X509_REQ_dup((req))
#define X509_ALGOR_dup(xn) IAmiSSL->X509_ALGOR_dup((xn))
#define X509_NAME_dup(xn) IAmiSSL->X509_NAME_dup((xn))
#define X509_NAME_ENTRY_dup(ne) IAmiSSL->X509_NAME_ENTRY_dup((ne))
#define X509_cmp_time(s, t) IAmiSSL->X509_cmp_time((s), (t))
#define X509_cmp_current_time(s) IAmiSSL->X509_cmp_current_time((s))
#define X509_time_adj(s, adj, t) IAmiSSL->X509_time_adj((s), (adj), (t))
#define X509_gmtime_adj(s, adj) IAmiSSL->X509_gmtime_adj((s), (adj))
#define X509_get_default_cert_area() IAmiSSL->X509_get_default_cert_area()
#define X509_get_default_cert_dir() IAmiSSL->X509_get_default_cert_dir()
#define X509_get_default_cert_file() IAmiSSL->X509_get_default_cert_file()
#define X509_get_default_cert_dir_env() IAmiSSL->X509_get_default_cert_dir_env()
#define X509_get_default_cert_file_env() IAmiSSL->X509_get_default_cert_file_env()
#define X509_get_default_private_dir() IAmiSSL->X509_get_default_private_dir()
#define X509_to_X509_REQ(x, pkey, md) IAmiSSL->X509_to_X509_REQ((x), (pkey), (md))
#define X509_REQ_to_X509(r, days, pkey) IAmiSSL->X509_REQ_to_X509((r), (days), (pkey))
#define X509_ALGOR_new() IAmiSSL->X509_ALGOR_new()
#define X509_ALGOR_free(a) IAmiSSL->X509_ALGOR_free((a))
#define d2i_X509_ALGOR(a, in, len) IAmiSSL->d2i_X509_ALGOR((a), (in), (len))
#define i2d_X509_ALGOR(a, out) IAmiSSL->i2d_X509_ALGOR((a), (out))
#define X509_ALGOR_it() IAmiSSL->X509_ALGOR_it()
#define X509_VAL_new() IAmiSSL->X509_VAL_new()
#define X509_VAL_free(a) IAmiSSL->X509_VAL_free((a))
#define d2i_X509_VAL(a, in, len) IAmiSSL->d2i_X509_VAL((a), (in), (len))
#define i2d_X509_VAL(a, out) IAmiSSL->i2d_X509_VAL((a), (out))
#define X509_VAL_it() IAmiSSL->X509_VAL_it()
#define X509_PUBKEY_new() IAmiSSL->X509_PUBKEY_new()
#define X509_PUBKEY_free(a) IAmiSSL->X509_PUBKEY_free((a))
#define d2i_X509_PUBKEY(a, in, len) IAmiSSL->d2i_X509_PUBKEY((a), (in), (len))
#define i2d_X509_PUBKEY(a, out) IAmiSSL->i2d_X509_PUBKEY((a), (out))
#define X509_PUBKEY_it() IAmiSSL->X509_PUBKEY_it()
#define X509_PUBKEY_set(x, pkey) IAmiSSL->X509_PUBKEY_set((x), (pkey))
#define X509_PUBKEY_get(key) IAmiSSL->X509_PUBKEY_get((key))
#define X509_get_pubkey_parameters(pkey, chain) IAmiSSL->X509_get_pubkey_parameters((pkey), (chain))
#define i2d_PUBKEY(a, pp) IAmiSSL->i2d_PUBKEY((a), (pp))
#define d2i_PUBKEY(a, pp, length) IAmiSSL->d2i_PUBKEY((a), (pp), (length))
#define i2d_RSA_PUBKEY(a, pp) IAmiSSL->i2d_RSA_PUBKEY((a), (pp))
#define d2i_RSA_PUBKEY(a, pp, length) IAmiSSL->d2i_RSA_PUBKEY((a), (pp), (length))
#define i2d_DSA_PUBKEY(a, pp) IAmiSSL->i2d_DSA_PUBKEY((a), (pp))
#define d2i_DSA_PUBKEY(a, pp, length) IAmiSSL->d2i_DSA_PUBKEY((a), (pp), (length))
#define X509_SIG_new() IAmiSSL->X509_SIG_new()
#define X509_SIG_free(a) IAmiSSL->X509_SIG_free((a))
#define d2i_X509_SIG(a, in, len) IAmiSSL->d2i_X509_SIG((a), (in), (len))
#define i2d_X509_SIG(a, out) IAmiSSL->i2d_X509_SIG((a), (out))
#define X509_SIG_it() IAmiSSL->X509_SIG_it()
#define X509_REQ_INFO_new() IAmiSSL->X509_REQ_INFO_new()
#define X509_REQ_INFO_free(a) IAmiSSL->X509_REQ_INFO_free((a))
#define d2i_X509_REQ_INFO(a, in, len) IAmiSSL->d2i_X509_REQ_INFO((a), (in), (len))
#define i2d_X509_REQ_INFO(a, out) IAmiSSL->i2d_X509_REQ_INFO((a), (out))
#define X509_REQ_INFO_it() IAmiSSL->X509_REQ_INFO_it()
#define X509_REQ_new() IAmiSSL->X509_REQ_new()
#define X509_REQ_free(a) IAmiSSL->X509_REQ_free((a))
#define d2i_X509_REQ(a, in, len) IAmiSSL->d2i_X509_REQ((a), (in), (len))
#define i2d_X509_REQ(a, out) IAmiSSL->i2d_X509_REQ((a), (out))
#define X509_REQ_it() IAmiSSL->X509_REQ_it()
#define X509_ATTRIBUTE_new() IAmiSSL->X509_ATTRIBUTE_new()
#define X509_ATTRIBUTE_free(a) IAmiSSL->X509_ATTRIBUTE_free((a))
#define d2i_X509_ATTRIBUTE(a, in, len) IAmiSSL->d2i_X509_ATTRIBUTE((a), (in), (len))
#define i2d_X509_ATTRIBUTE(a, out) IAmiSSL->i2d_X509_ATTRIBUTE((a), (out))
#define X509_ATTRIBUTE_it() IAmiSSL->X509_ATTRIBUTE_it()
#define X509_ATTRIBUTE_create(nid, atrtype, value) IAmiSSL->X509_ATTRIBUTE_create((nid), (atrtype), (value))
#define X509_EXTENSION_new() IAmiSSL->X509_EXTENSION_new()
#define X509_EXTENSION_free(a) IAmiSSL->X509_EXTENSION_free((a))
#define d2i_X509_EXTENSION(a, in, len) IAmiSSL->d2i_X509_EXTENSION((a), (in), (len))
#define i2d_X509_EXTENSION(a, out) IAmiSSL->i2d_X509_EXTENSION((a), (out))
#define X509_EXTENSION_it() IAmiSSL->X509_EXTENSION_it()
#define X509_NAME_ENTRY_new() IAmiSSL->X509_NAME_ENTRY_new()
#define X509_NAME_ENTRY_free(a) IAmiSSL->X509_NAME_ENTRY_free((a))
#define d2i_X509_NAME_ENTRY(a, in, len) IAmiSSL->d2i_X509_NAME_ENTRY((a), (in), (len))
#define i2d_X509_NAME_ENTRY(a, out) IAmiSSL->i2d_X509_NAME_ENTRY((a), (out))
#define X509_NAME_ENTRY_it() IAmiSSL->X509_NAME_ENTRY_it()
#define X509_NAME_new() IAmiSSL->X509_NAME_new()
#define X509_NAME_free(a) IAmiSSL->X509_NAME_free((a))
#define d2i_X509_NAME(a, in, len) IAmiSSL->d2i_X509_NAME((a), (in), (len))
#define i2d_X509_NAME(a, out) IAmiSSL->i2d_X509_NAME((a), (out))
#define X509_NAME_it() IAmiSSL->X509_NAME_it()
#define X509_NAME_set(xn, name) IAmiSSL->X509_NAME_set((xn), (name))
#define X509_CINF_new() IAmiSSL->X509_CINF_new()
#define X509_CINF_free(a) IAmiSSL->X509_CINF_free((a))
#define d2i_X509_CINF(a, in, len) IAmiSSL->d2i_X509_CINF((a), (in), (len))
#define i2d_X509_CINF(a, out) IAmiSSL->i2d_X509_CINF((a), (out))
#define X509_CINF_it() IAmiSSL->X509_CINF_it()
#define X509_new() IAmiSSL->X509_new()
#define X509_free(a) IAmiSSL->X509_free((a))
#define d2i_X509(a, in, len) IAmiSSL->d2i_X509((a), (in), (len))
#define i2d_X509(a, out) IAmiSSL->i2d_X509((a), (out))
#define X509_it() IAmiSSL->X509_it()
#define X509_CERT_AUX_new() IAmiSSL->X509_CERT_AUX_new()
#define X509_CERT_AUX_free(a) IAmiSSL->X509_CERT_AUX_free((a))
#define d2i_X509_CERT_AUX(a, in, len) IAmiSSL->d2i_X509_CERT_AUX((a), (in), (len))
#define i2d_X509_CERT_AUX(a, out) IAmiSSL->i2d_X509_CERT_AUX((a), (out))
#define X509_CERT_AUX_it() IAmiSSL->X509_CERT_AUX_it()
#define OBSOLETE_X509_get_ex_new_index(argl, argp, new_func, dup_func, free_func) IAmiSSL->OBSOLETE_X509_get_ex_new_index((argl), (argp), (new_func), (dup_func), (free_func))
#define X509_set_ex_data(r, idx, arg) IAmiSSL->X509_set_ex_data((r), (idx), (arg))
#define X509_get_ex_data(r, idx) IAmiSSL->X509_get_ex_data((r), (idx))
#define i2d_X509_AUX(a, pp) IAmiSSL->i2d_X509_AUX((a), (pp))
#define d2i_X509_AUX(a, pp, length) IAmiSSL->d2i_X509_AUX((a), (pp), (length))
#define X509_alias_set1(x, name, len) IAmiSSL->X509_alias_set1((x), (name), (len))
#define X509_keyid_set1(x, id, len) IAmiSSL->X509_keyid_set1((x), (id), (len))
#define X509_alias_get0(x, len) IAmiSSL->X509_alias_get0((x), (len))
#define X509_TRUST_set_default(trust) IAmiSSL->X509_TRUST_set_default((trust))
#define X509_TRUST_set(t, trust) IAmiSSL->X509_TRUST_set((t), (trust))
#define X509_add1_trust_object(x, obj) IAmiSSL->X509_add1_trust_object((x), (obj))
#define X509_add1_reject_object(x, obj) IAmiSSL->X509_add1_reject_object((x), (obj))
#define X509_trust_clear(x) IAmiSSL->X509_trust_clear((x))
#define X509_reject_clear(x) IAmiSSL->X509_reject_clear((x))
#define X509_REVOKED_new() IAmiSSL->X509_REVOKED_new()
#define X509_REVOKED_free(a) IAmiSSL->X509_REVOKED_free((a))
#define d2i_X509_REVOKED(a, in, len) IAmiSSL->d2i_X509_REVOKED((a), (in), (len))
#define i2d_X509_REVOKED(a, out) IAmiSSL->i2d_X509_REVOKED((a), (out))
#define X509_REVOKED_it() IAmiSSL->X509_REVOKED_it()
#define X509_CRL_INFO_new() IAmiSSL->X509_CRL_INFO_new()
#define X509_CRL_INFO_free(a) IAmiSSL->X509_CRL_INFO_free((a))
#define d2i_X509_CRL_INFO(a, in, len) IAmiSSL->d2i_X509_CRL_INFO((a), (in), (len))
#define i2d_X509_CRL_INFO(a, out) IAmiSSL->i2d_X509_CRL_INFO((a), (out))
#define X509_CRL_INFO_it() IAmiSSL->X509_CRL_INFO_it()
#define X509_CRL_new() IAmiSSL->X509_CRL_new()
#define X509_CRL_free(a) IAmiSSL->X509_CRL_free((a))
#define d2i_X509_CRL(a, in, len) IAmiSSL->d2i_X509_CRL((a), (in), (len))
#define i2d_X509_CRL(a, out) IAmiSSL->i2d_X509_CRL((a), (out))
#define X509_CRL_it() IAmiSSL->X509_CRL_it()
#define X509_CRL_add0_revoked(crl, rev) IAmiSSL->X509_CRL_add0_revoked((crl), (rev))
#define X509_PKEY_new() IAmiSSL->X509_PKEY_new()
#define X509_PKEY_free(a) IAmiSSL->X509_PKEY_free((a))
#define NETSCAPE_SPKI_new() IAmiSSL->NETSCAPE_SPKI_new()
#define NETSCAPE_SPKI_free(a) IAmiSSL->NETSCAPE_SPKI_free((a))
#define d2i_NETSCAPE_SPKI(a, in, len) IAmiSSL->d2i_NETSCAPE_SPKI((a), (in), (len))
#define i2d_NETSCAPE_SPKI(a, out) IAmiSSL->i2d_NETSCAPE_SPKI((a), (out))
#define NETSCAPE_SPKI_it() IAmiSSL->NETSCAPE_SPKI_it()
#define NETSCAPE_SPKAC_new() IAmiSSL->NETSCAPE_SPKAC_new()
#define NETSCAPE_SPKAC_free(a) IAmiSSL->NETSCAPE_SPKAC_free((a))
#define d2i_NETSCAPE_SPKAC(a, in, len) IAmiSSL->d2i_NETSCAPE_SPKAC((a), (in), (len))
#define i2d_NETSCAPE_SPKAC(a, out) IAmiSSL->i2d_NETSCAPE_SPKAC((a), (out))
#define NETSCAPE_SPKAC_it() IAmiSSL->NETSCAPE_SPKAC_it()
#define NETSCAPE_CERT_SEQUENCE_new() IAmiSSL->NETSCAPE_CERT_SEQUENCE_new()
#define NETSCAPE_CERT_SEQUENCE_free(a) IAmiSSL->NETSCAPE_CERT_SEQUENCE_free((a))
#define d2i_NETSCAPE_CERT_SEQUENCE(a, in, len) IAmiSSL->d2i_NETSCAPE_CERT_SEQUENCE((a), (in), (len))
#define i2d_NETSCAPE_CERT_SEQUENCE(a, out) IAmiSSL->i2d_NETSCAPE_CERT_SEQUENCE((a), (out))
#define NETSCAPE_CERT_SEQUENCE_it() IAmiSSL->NETSCAPE_CERT_SEQUENCE_it()
#define X509_INFO_new() IAmiSSL->X509_INFO_new()
#define X509_INFO_free(a) IAmiSSL->X509_INFO_free((a))
#define X509_NAME_oneline(a, buf, size) IAmiSSL->X509_NAME_oneline((a), (buf), (size))
#define ASN1_verify(i2d, algor1, signature, data, pkey) IAmiSSL->ASN1_verify((i2d), (algor1), (signature), (data), (pkey))
#define ASN1_digest(i2d, type, data, md, len) IAmiSSL->ASN1_digest((i2d), (type), (data), (md), (len))
#define ASN1_sign(i2d, algor1, algor2, signature, data, pkey, type) IAmiSSL->ASN1_sign((i2d), (algor1), (algor2), (signature), (data), (pkey), (type))
#define ASN1_item_digest(it, type, data, md, len) IAmiSSL->ASN1_item_digest((it), (type), (data), (md), (len))
#define ASN1_item_verify(it, alg, signature, data, pkey) IAmiSSL->ASN1_item_verify((it), (alg), (signature), (data), (pkey))
#define ASN1_item_sign(it, algor1, algor2, signature, data, pkey, type) IAmiSSL->ASN1_item_sign((it), (algor1), (algor2), (signature), (data), (pkey), (type))
#define X509_set_version(x, version) IAmiSSL->X509_set_version((x), (version))
#define X509_set_serialNumber(x, serial) IAmiSSL->X509_set_serialNumber((x), (serial))
#define X509_get_serialNumber(x) IAmiSSL->X509_get_serialNumber((x))
#define X509_set_issuer_name(x, name) IAmiSSL->X509_set_issuer_name((x), (name))
#define X509_get_issuer_name(a) IAmiSSL->X509_get_issuer_name((a))
#define X509_set_subject_name(x, name) IAmiSSL->X509_set_subject_name((x), (name))
#define X509_get_subject_name(a) IAmiSSL->X509_get_subject_name((a))
#define X509_set1_notBefore(x, tm) IAmiSSL->X509_set1_notBefore((x), (tm))
#define X509_set1_notAfter(x, tm) IAmiSSL->X509_set1_notAfter((x), (tm))
#define X509_set_pubkey(x, pkey) IAmiSSL->X509_set_pubkey((x), (pkey))
#define X509_get_pubkey(x) IAmiSSL->X509_get_pubkey((x))
#define X509_get0_pubkey_bitstr(x) IAmiSSL->X509_get0_pubkey_bitstr((x))
#define X509_certificate_type(x, pubkey) IAmiSSL->X509_certificate_type((x), (pubkey))
#define X509_REQ_set_version(x, version) IAmiSSL->X509_REQ_set_version((x), (version))
#define X509_REQ_set_subject_name(req, name) IAmiSSL->X509_REQ_set_subject_name((req), (name))
#define X509_REQ_set_pubkey(x, pkey) IAmiSSL->X509_REQ_set_pubkey((x), (pkey))
#define X509_REQ_get_pubkey(req) IAmiSSL->X509_REQ_get_pubkey((req))
#define X509_REQ_extension_nid(nid) IAmiSSL->X509_REQ_extension_nid((nid))
#define X509_REQ_get_extension_nids() IAmiSSL->X509_REQ_get_extension_nids()
#define X509_REQ_set_extension_nids(nids) IAmiSSL->X509_REQ_set_extension_nids((nids))
#define X509_REQ_get_extensions(req) IAmiSSL->X509_REQ_get_extensions((req))
#define X509_REQ_add_extensions_nid(req, exts, nid) IAmiSSL->X509_REQ_add_extensions_nid((req), (exts), (nid))
#define X509_REQ_add_extensions(req, exts) IAmiSSL->X509_REQ_add_extensions((req), (exts))
#define X509_REQ_get_attr_count(req) IAmiSSL->X509_REQ_get_attr_count((req))
#define X509_REQ_get_attr_by_NID(req, nid, lastpos) IAmiSSL->X509_REQ_get_attr_by_NID((req), (nid), (lastpos))
#define X509_REQ_get_attr_by_OBJ(req, obj, lastpos) IAmiSSL->X509_REQ_get_attr_by_OBJ((req), (obj), (lastpos))
#define X509_REQ_get_attr(req, loc) IAmiSSL->X509_REQ_get_attr((req), (loc))
#define X509_REQ_delete_attr(req, loc) IAmiSSL->X509_REQ_delete_attr((req), (loc))
#define X509_REQ_add1_attr(req, attr) IAmiSSL->X509_REQ_add1_attr((req), (attr))
#define X509_REQ_add1_attr_by_OBJ(req, obj, type, bytes, len) IAmiSSL->X509_REQ_add1_attr_by_OBJ((req), (obj), (type), (bytes), (len))
#define X509_REQ_add1_attr_by_NID(req, nid, type, bytes, len) IAmiSSL->X509_REQ_add1_attr_by_NID((req), (nid), (type), (bytes), (len))
#define X509_REQ_add1_attr_by_txt(req, attrname, type, bytes, len) IAmiSSL->X509_REQ_add1_attr_by_txt((req), (attrname), (type), (bytes), (len))
#define X509_CRL_set_version(x, version) IAmiSSL->X509_CRL_set_version((x), (version))
#define X509_CRL_set_issuer_name(x, name) IAmiSSL->X509_CRL_set_issuer_name((x), (name))
#define X509_CRL_set1_lastUpdate(x, tm) IAmiSSL->X509_CRL_set1_lastUpdate((x), (tm))
#define X509_CRL_set1_nextUpdate(x, tm) IAmiSSL->X509_CRL_set1_nextUpdate((x), (tm))
#define X509_CRL_sort(crl) IAmiSSL->X509_CRL_sort((crl))
#define X509_REVOKED_set_serialNumber(x, serial) IAmiSSL->X509_REVOKED_set_serialNumber((x), (serial))
#define X509_REVOKED_set_revocationDate(r, tm) IAmiSSL->X509_REVOKED_set_revocationDate((r), (tm))
#define X509_check_private_key(cert, pkey) IAmiSSL->X509_check_private_key((cert), (pkey))
#define X509_issuer_and_serial_cmp(a, b) IAmiSSL->X509_issuer_and_serial_cmp((a), (b))
#define X509_issuer_and_serial_hash(a) IAmiSSL->X509_issuer_and_serial_hash((a))
#define X509_issuer_name_cmp(a, b) IAmiSSL->X509_issuer_name_cmp((a), (b))
#define X509_issuer_name_hash(a) IAmiSSL->X509_issuer_name_hash((a))
#define X509_subject_name_cmp(a, b) IAmiSSL->X509_subject_name_cmp((a), (b))
#define X509_subject_name_hash(x) IAmiSSL->X509_subject_name_hash((x))
#define X509_cmp(a, b) IAmiSSL->X509_cmp((a), (b))
#define X509_NAME_cmp(a, b) IAmiSSL->X509_NAME_cmp((a), (b))
#define OBSOLETE_X509_NAME_hash(x) IAmiSSL->OBSOLETE_X509_NAME_hash((x))
#define X509_CRL_cmp(a, b) IAmiSSL->X509_CRL_cmp((a), (b))
#define X509_NAME_print(bp, name, obase) IAmiSSL->X509_NAME_print((bp), (name), (obase))
#define X509_NAME_print_ex(out, nm, indent, flags) IAmiSSL->X509_NAME_print_ex((out), (nm), (indent), (flags))
#define X509_print_ex(bp, x, nmflag, cflag) IAmiSSL->X509_print_ex((bp), (x), (nmflag), (cflag))
#define X509_print(bp, x) IAmiSSL->X509_print((bp), (x))
#define X509_ocspid_print(bp, x) IAmiSSL->X509_ocspid_print((bp), (x))
#define X509_CRL_print(bp, x) IAmiSSL->X509_CRL_print((bp), (x))
#define X509_REQ_print_ex(bp, x, nmflag, cflag) IAmiSSL->X509_REQ_print_ex((bp), (x), (nmflag), (cflag))
#define X509_REQ_print(bp, req) IAmiSSL->X509_REQ_print((bp), (req))
#define X509_NAME_entry_count(name) IAmiSSL->X509_NAME_entry_count((name))
#define X509_NAME_get_text_by_NID(name, nid, buf, len) IAmiSSL->X509_NAME_get_text_by_NID((name), (nid), (buf), (len))
#define X509_NAME_get_text_by_OBJ(name, obj, buf, len) IAmiSSL->X509_NAME_get_text_by_OBJ((name), (obj), (buf), (len))
#define X509_NAME_get_index_by_NID(name, nid, lastpos) IAmiSSL->X509_NAME_get_index_by_NID((name), (nid), (lastpos))
#define X509_NAME_get_index_by_OBJ(name, obj, lastpos) IAmiSSL->X509_NAME_get_index_by_OBJ((name), (obj), (lastpos))
#define X509_NAME_get_entry(name, loc) IAmiSSL->X509_NAME_get_entry((name), (loc))
#define X509_NAME_delete_entry(name, loc) IAmiSSL->X509_NAME_delete_entry((name), (loc))
#define X509_NAME_add_entry(name, ne, loc, set) IAmiSSL->X509_NAME_add_entry((name), (ne), (loc), (set))
#define X509_NAME_add_entry_by_OBJ(name, obj, type, bytes, len, loc, set) IAmiSSL->X509_NAME_add_entry_by_OBJ((name), (obj), (type), (bytes), (len), (loc), (set))
#define X509_NAME_add_entry_by_NID(name, nid, type, bytes, len, loc, set) IAmiSSL->X509_NAME_add_entry_by_NID((name), (nid), (type), (bytes), (len), (loc), (set))
#define X509_NAME_ENTRY_create_by_txt(ne, field, type, bytes, len) IAmiSSL->X509_NAME_ENTRY_create_by_txt((ne), (field), (type), (bytes), (len))
#define X509_NAME_ENTRY_create_by_NID(ne, nid, type, bytes, len) IAmiSSL->X509_NAME_ENTRY_create_by_NID((ne), (nid), (type), (bytes), (len))
#define X509_NAME_add_entry_by_txt(name, field, type, bytes, len, loc, set) IAmiSSL->X509_NAME_add_entry_by_txt((name), (field), (type), (bytes), (len), (loc), (set))
#define X509_NAME_ENTRY_create_by_OBJ(ne, obj, type, bytes, len) IAmiSSL->X509_NAME_ENTRY_create_by_OBJ((ne), (obj), (type), (bytes), (len))
#define X509_NAME_ENTRY_set_object(ne, obj) IAmiSSL->X509_NAME_ENTRY_set_object((ne), (obj))
#define X509_NAME_ENTRY_set_data(ne, type, bytes, len) IAmiSSL->X509_NAME_ENTRY_set_data((ne), (type), (bytes), (len))
#define X509_NAME_ENTRY_get_object(ne) IAmiSSL->X509_NAME_ENTRY_get_object((ne))
#define X509_NAME_ENTRY_get_data(ne) IAmiSSL->X509_NAME_ENTRY_get_data((ne))
#define X509v3_get_ext_count(x) IAmiSSL->X509v3_get_ext_count((x))
#define X509v3_get_ext_by_NID(x, nid, lastpos) IAmiSSL->X509v3_get_ext_by_NID((x), (nid), (lastpos))
#define X509v3_get_ext_by_OBJ(x, obj, lastpos) IAmiSSL->X509v3_get_ext_by_OBJ((x), (obj), (lastpos))
#define X509v3_get_ext_by_critical(x, crit, lastpos) IAmiSSL->X509v3_get_ext_by_critical((x), (crit), (lastpos))
#define X509v3_get_ext(x, loc) IAmiSSL->X509v3_get_ext((x), (loc))
#define X509v3_delete_ext(x, loc) IAmiSSL->X509v3_delete_ext((x), (loc))
#define X509v3_add_ext(x, ex, loc) IAmiSSL->X509v3_add_ext((x), (ex), (loc))
#define X509_get_ext_count(x) IAmiSSL->X509_get_ext_count((x))
#define X509_get_ext_by_NID(x, nid, lastpos) IAmiSSL->X509_get_ext_by_NID((x), (nid), (lastpos))
#define X509_get_ext_by_OBJ(x, obj, lastpos) IAmiSSL->X509_get_ext_by_OBJ((x), (obj), (lastpos))
#define X509_get_ext_by_critical(x, crit, lastpos) IAmiSSL->X509_get_ext_by_critical((x), (crit), (lastpos))
#define X509_get_ext(x, loc) IAmiSSL->X509_get_ext((x), (loc))
#define X509_delete_ext(x, loc) IAmiSSL->X509_delete_ext((x), (loc))
#define X509_add_ext(x, ex, loc) IAmiSSL->X509_add_ext((x), (ex), (loc))
#define X509_get_ext_d2i(x, nid, crit, idx) IAmiSSL->X509_get_ext_d2i((x), (nid), (crit), (idx))
#define X509_add1_ext_i2d(x, nid, value, crit, flags) IAmiSSL->X509_add1_ext_i2d((x), (nid), (value), (crit), (flags))
#define X509_CRL_get_ext_count(x) IAmiSSL->X509_CRL_get_ext_count((x))
#define X509_CRL_get_ext_by_NID(x, nid, lastpos) IAmiSSL->X509_CRL_get_ext_by_NID((x), (nid), (lastpos))
#define X509_CRL_get_ext_by_OBJ(x, obj, lastpos) IAmiSSL->X509_CRL_get_ext_by_OBJ((x), (obj), (lastpos))
#define X509_CRL_get_ext_by_critical(x, crit, lastpos) IAmiSSL->X509_CRL_get_ext_by_critical((x), (crit), (lastpos))
#define X509_CRL_get_ext(x, loc) IAmiSSL->X509_CRL_get_ext((x), (loc))
#define X509_CRL_delete_ext(x, loc) IAmiSSL->X509_CRL_delete_ext((x), (loc))
#define X509_CRL_add_ext(x, ex, loc) IAmiSSL->X509_CRL_add_ext((x), (ex), (loc))
#define X509_CRL_get_ext_d2i(x, nid, crit, idx) IAmiSSL->X509_CRL_get_ext_d2i((x), (nid), (crit), (idx))
#define X509_CRL_add1_ext_i2d(x, nid, value, crit, flags) IAmiSSL->X509_CRL_add1_ext_i2d((x), (nid), (value), (crit), (flags))
#define X509_REVOKED_get_ext_count(x) IAmiSSL->X509_REVOKED_get_ext_count((x))
#define X509_REVOKED_get_ext_by_NID(x, nid, lastpos) IAmiSSL->X509_REVOKED_get_ext_by_NID((x), (nid), (lastpos))
#define X509_REVOKED_get_ext_by_OBJ(x, obj, lastpos) IAmiSSL->X509_REVOKED_get_ext_by_OBJ((x), (obj), (lastpos))
#define X509_REVOKED_get_ext_by_critical(x, crit, lastpos) IAmiSSL->X509_REVOKED_get_ext_by_critical((x), (crit), (lastpos))
#define X509_REVOKED_get_ext(x, loc) IAmiSSL->X509_REVOKED_get_ext((x), (loc))
#define X509_REVOKED_delete_ext(x, loc) IAmiSSL->X509_REVOKED_delete_ext((x), (loc))
#define X509_REVOKED_add_ext(x, ex, loc) IAmiSSL->X509_REVOKED_add_ext((x), (ex), (loc))
#define X509_REVOKED_get_ext_d2i(x, nid, crit, idx) IAmiSSL->X509_REVOKED_get_ext_d2i((x), (nid), (crit), (idx))
#define X509_REVOKED_add1_ext_i2d(x, nid, value, crit, flags) IAmiSSL->X509_REVOKED_add1_ext_i2d((x), (nid), (value), (crit), (flags))
#define X509_EXTENSION_create_by_NID(ex, nid, crit, data) IAmiSSL->X509_EXTENSION_create_by_NID((ex), (nid), (crit), (data))
#define X509_EXTENSION_create_by_OBJ(ex, obj, crit, data) IAmiSSL->X509_EXTENSION_create_by_OBJ((ex), (obj), (crit), (data))
#define X509_EXTENSION_set_object(ex, obj) IAmiSSL->X509_EXTENSION_set_object((ex), (obj))
#define X509_EXTENSION_set_critical(ex, crit) IAmiSSL->X509_EXTENSION_set_critical((ex), (crit))
#define X509_EXTENSION_set_data(ex, data) IAmiSSL->X509_EXTENSION_set_data((ex), (data))
#define X509_EXTENSION_get_object(ex) IAmiSSL->X509_EXTENSION_get_object((ex))
#define X509_EXTENSION_get_data(ne) IAmiSSL->X509_EXTENSION_get_data((ne))
#define X509_EXTENSION_get_critical(ex) IAmiSSL->X509_EXTENSION_get_critical((ex))
#define X509at_get_attr_count(x) IAmiSSL->X509at_get_attr_count((x))
#define X509at_get_attr_by_NID(x, nid, lastpos) IAmiSSL->X509at_get_attr_by_NID((x), (nid), (lastpos))
#define X509at_get_attr_by_OBJ(sk, obj, lastpos) IAmiSSL->X509at_get_attr_by_OBJ((sk), (obj), (lastpos))
#define X509at_get_attr(x, loc) IAmiSSL->X509at_get_attr((x), (loc))
#define X509at_delete_attr(x, loc) IAmiSSL->X509at_delete_attr((x), (loc))
#define X509at_add1_attr(x, attr) IAmiSSL->X509at_add1_attr((x), (attr))
#define X509at_add1_attr_by_OBJ(x, obj, type, bytes, len) IAmiSSL->X509at_add1_attr_by_OBJ((x), (obj), (type), (bytes), (len))
#define X509at_add1_attr_by_NID(x, nid, type, bytes, len) IAmiSSL->X509at_add1_attr_by_NID((x), (nid), (type), (bytes), (len))
#define X509at_add1_attr_by_txt(x, attrname, type, bytes, len) IAmiSSL->X509at_add1_attr_by_txt((x), (attrname), (type), (bytes), (len))
#define X509_ATTRIBUTE_create_by_NID(attr, nid, atrtype, data, len) IAmiSSL->X509_ATTRIBUTE_create_by_NID((attr), (nid), (atrtype), (data), (len))
#define X509_ATTRIBUTE_create_by_OBJ(attr, obj, atrtype, data, len) IAmiSSL->X509_ATTRIBUTE_create_by_OBJ((attr), (obj), (atrtype), (data), (len))
#define X509_ATTRIBUTE_create_by_txt(attr, atrname, type, bytes, len) IAmiSSL->X509_ATTRIBUTE_create_by_txt((attr), (atrname), (type), (bytes), (len))
#define X509_ATTRIBUTE_set1_object(attr, obj) IAmiSSL->X509_ATTRIBUTE_set1_object((attr), (obj))
#define X509_ATTRIBUTE_set1_data(attr, attrtype, data, len) IAmiSSL->X509_ATTRIBUTE_set1_data((attr), (attrtype), (data), (len))
#define X509_ATTRIBUTE_get0_data(attr, idx, atrtype, data) IAmiSSL->X509_ATTRIBUTE_get0_data((attr), (idx), (atrtype), (data))
#define X509_ATTRIBUTE_count(attr) IAmiSSL->X509_ATTRIBUTE_count((attr))
#define X509_ATTRIBUTE_get0_object(attr) IAmiSSL->X509_ATTRIBUTE_get0_object((attr))
#define X509_ATTRIBUTE_get0_type(attr, idx) IAmiSSL->X509_ATTRIBUTE_get0_type((attr), (idx))
#define X509_verify_cert(ctx) IAmiSSL->X509_verify_cert((ctx))
#define X509_find_by_issuer_and_serial(sk, name, serial) IAmiSSL->X509_find_by_issuer_and_serial((sk), (name), (serial))
#define X509_find_by_subject(sk, name) IAmiSSL->X509_find_by_subject((sk), (name))
#define PBEPARAM_new() IAmiSSL->PBEPARAM_new()
#define PBEPARAM_free(a) IAmiSSL->PBEPARAM_free((a))
#define d2i_PBEPARAM(a, in, len) IAmiSSL->d2i_PBEPARAM((a), (in), (len))
#define i2d_PBEPARAM(a, out) IAmiSSL->i2d_PBEPARAM((a), (out))
#define PBEPARAM_it() IAmiSSL->PBEPARAM_it()
#define PBE2PARAM_new() IAmiSSL->PBE2PARAM_new()
#define PBE2PARAM_free(a) IAmiSSL->PBE2PARAM_free((a))
#define d2i_PBE2PARAM(a, in, len) IAmiSSL->d2i_PBE2PARAM((a), (in), (len))
#define i2d_PBE2PARAM(a, out) IAmiSSL->i2d_PBE2PARAM((a), (out))
#define PBE2PARAM_it() IAmiSSL->PBE2PARAM_it()
#define PBKDF2PARAM_new() IAmiSSL->PBKDF2PARAM_new()
#define PBKDF2PARAM_free(a) IAmiSSL->PBKDF2PARAM_free((a))
#define d2i_PBKDF2PARAM(a, in, len) IAmiSSL->d2i_PBKDF2PARAM((a), (in), (len))
#define i2d_PBKDF2PARAM(a, out) IAmiSSL->i2d_PBKDF2PARAM((a), (out))
#define PBKDF2PARAM_it() IAmiSSL->PBKDF2PARAM_it()
#define PKCS5_pbe_set(alg, iter, salt, saltlen) IAmiSSL->PKCS5_pbe_set((alg), (iter), (salt), (saltlen))
#define PKCS5_pbe2_set(cipher, iter, salt, saltlen) IAmiSSL->PKCS5_pbe2_set((cipher), (iter), (salt), (saltlen))
#define PKCS8_PRIV_KEY_INFO_new() IAmiSSL->PKCS8_PRIV_KEY_INFO_new()
#define PKCS8_PRIV_KEY_INFO_free(a) IAmiSSL->PKCS8_PRIV_KEY_INFO_free((a))
#define d2i_PKCS8_PRIV_KEY_INFO(a, in, len) IAmiSSL->d2i_PKCS8_PRIV_KEY_INFO((a), (in), (len))
#define i2d_PKCS8_PRIV_KEY_INFO(a, out) IAmiSSL->i2d_PKCS8_PRIV_KEY_INFO((a), (out))
#define PKCS8_PRIV_KEY_INFO_it() IAmiSSL->PKCS8_PRIV_KEY_INFO_it()
#define EVP_PKCS82PKEY(p8) IAmiSSL->EVP_PKCS82PKEY((p8))
#define EVP_PKEY2PKCS8(pkey) IAmiSSL->EVP_PKEY2PKCS8((pkey))
#define X509_check_trust(x, id, flags) IAmiSSL->X509_check_trust((x), (id), (flags))
#define X509_TRUST_get_count() IAmiSSL->X509_TRUST_get_count()
#define X509_TRUST_get0(idx) IAmiSSL->X509_TRUST_get0((idx))
#define X509_TRUST_get_by_id(id) IAmiSSL->X509_TRUST_get_by_id((id))
#define X509_TRUST_add(id, flags, ck, name, arg1, arg2) IAmiSSL->X509_TRUST_add((id), (flags), (ck), (name), (arg1), (arg2))
#define X509_TRUST_cleanup() IAmiSSL->X509_TRUST_cleanup()
#define X509_TRUST_get_flags(xp) IAmiSSL->X509_TRUST_get_flags((xp))
#define X509_TRUST_get0_name(xp) IAmiSSL->X509_TRUST_get0_name((xp))
#define X509_TRUST_get_trust(xp) IAmiSSL->X509_TRUST_get_trust((xp))
#define ERR_load_X509_strings() IAmiSSL->ERR_load_X509_strings()
#define X509_OBJECT_idx_by_subject(h, type, name) IAmiSSL->X509_OBJECT_idx_by_subject((h), (type), (name))
#define X509_OBJECT_retrieve_by_subject(h, type, name) IAmiSSL->X509_OBJECT_retrieve_by_subject((h), (type), (name))
#define X509_OBJECT_retrieve_match(h, x) IAmiSSL->X509_OBJECT_retrieve_match((h), (x))
#define X509_OBJECT_up_ref_count(a) IAmiSSL->X509_OBJECT_up_ref_count((a))
#define X509_STORE_new() IAmiSSL->X509_STORE_new()
#define X509_STORE_free(xs) IAmiSSL->X509_STORE_free((xs))
#define X509_STORE_set_flags(xs, flags) IAmiSSL->X509_STORE_set_flags((xs), (flags))
#define X509_STORE_set_purpose(xs, purpose) IAmiSSL->X509_STORE_set_purpose((xs), (purpose))
#define X509_STORE_set_trust(xs, trust) IAmiSSL->X509_STORE_set_trust((xs), (trust))
#define X509_STORE_CTX_new() IAmiSSL->X509_STORE_CTX_new()
#define X509_STORE_CTX_get1_issuer(issuer, ctx, x) IAmiSSL->X509_STORE_CTX_get1_issuer((issuer), (ctx), (x))
#define X509_STORE_CTX_free(ctx) IAmiSSL->X509_STORE_CTX_free((ctx))
#define X509_STORE_CTX_init(ctx, trust_store, target, untrusted) IAmiSSL->X509_STORE_CTX_init((ctx), (trust_store), (target), (untrusted))
#define X509_STORE_CTX_set0_trusted_stack(ctx, sk) IAmiSSL->X509_STORE_CTX_set0_trusted_stack((ctx), (sk))
#define X509_STORE_CTX_cleanup(ctx) IAmiSSL->X509_STORE_CTX_cleanup((ctx))
#define X509_STORE_add_lookup(xs, m) IAmiSSL->X509_STORE_add_lookup((xs), (m))
#define X509_LOOKUP_hash_dir() IAmiSSL->X509_LOOKUP_hash_dir()
#define X509_LOOKUP_file() IAmiSSL->X509_LOOKUP_file()
#define X509_STORE_add_cert(xs, x) IAmiSSL->X509_STORE_add_cert((xs), (x))
#define X509_STORE_add_crl(xs, x) IAmiSSL->X509_STORE_add_crl((xs), (x))
#define X509_STORE_CTX_get_by_subject(vs, type, name, ret) IAmiSSL->X509_STORE_CTX_get_by_subject((vs), (type), (name), (ret))
#define X509_LOOKUP_ctrl(ctx, cmd, argc, argl, ret) IAmiSSL->X509_LOOKUP_ctrl((ctx), (cmd), (argc), (argl), (ret))
#define X509_load_cert_file(ctx, file, type) IAmiSSL->X509_load_cert_file((ctx), (file), (type))
#define X509_load_crl_file(ctx, file, type) IAmiSSL->X509_load_crl_file((ctx), (file), (type))
#define X509_load_cert_crl_file(ctx, file, type) IAmiSSL->X509_load_cert_crl_file((ctx), (file), (type))
#define X509_LOOKUP_new(method) IAmiSSL->X509_LOOKUP_new((method))
#define X509_LOOKUP_free(ctx) IAmiSSL->X509_LOOKUP_free((ctx))
#define X509_LOOKUP_init(ctx) IAmiSSL->X509_LOOKUP_init((ctx))
#define X509_LOOKUP_by_subject(ctx, type, name, ret) IAmiSSL->X509_LOOKUP_by_subject((ctx), (type), (name), (ret))
#define X509_LOOKUP_by_issuer_serial(ctx, type, name, serial, ret) IAmiSSL->X509_LOOKUP_by_issuer_serial((ctx), (type), (name), (serial), (ret))
#define X509_LOOKUP_by_fingerprint(ctx, type, bytes, len, ret) IAmiSSL->X509_LOOKUP_by_fingerprint((ctx), (type), (bytes), (len), (ret))
#define X509_LOOKUP_by_alias(ctx, type, str, len, ret) IAmiSSL->X509_LOOKUP_by_alias((ctx), (type), (str), (len), (ret))
#define X509_LOOKUP_shutdown(ctx) IAmiSSL->X509_LOOKUP_shutdown((ctx))
#define X509_STORE_load_locations(xs, file, dir) IAmiSSL->X509_STORE_load_locations((xs), (file), (dir))
#define X509_STORE_set_default_paths(xs) IAmiSSL->X509_STORE_set_default_paths((xs))
#define OBSOLETE_X509_STORE_CTX_get_ex_new_index(argl, argp, new_func, dup_func, free_func) IAmiSSL->OBSOLETE_X509_STORE_CTX_get_ex_new_index((argl), (argp), (new_func), (dup_func), (free_func))
#define X509_STORE_CTX_set_ex_data(ctx, idx, data) IAmiSSL->X509_STORE_CTX_set_ex_data((ctx), (idx), (data))
#define X509_STORE_CTX_get_ex_data(ctx, idx) IAmiSSL->X509_STORE_CTX_get_ex_data((ctx), (idx))
#define X509_STORE_CTX_get_error(ctx) IAmiSSL->X509_STORE_CTX_get_error((ctx))
#define X509_STORE_CTX_set_error(ctx, s) IAmiSSL->X509_STORE_CTX_set_error((ctx), (s))
#define X509_STORE_CTX_get_error_depth(ctx) IAmiSSL->X509_STORE_CTX_get_error_depth((ctx))
#define X509_STORE_CTX_get_current_cert(ctx) IAmiSSL->X509_STORE_CTX_get_current_cert((ctx))
#define X509_STORE_CTX_get0_chain(ctx) IAmiSSL->X509_STORE_CTX_get0_chain((ctx))
#define X509_STORE_CTX_get1_chain(ctx) IAmiSSL->X509_STORE_CTX_get1_chain((ctx))
#define X509_STORE_CTX_set_cert(c, x) IAmiSSL->X509_STORE_CTX_set_cert((c), (x))
#define X509_STORE_CTX_set_purpose(ctx, purpose) IAmiSSL->X509_STORE_CTX_set_purpose((ctx), (purpose))
#define X509_STORE_CTX_set_trust(ctx, trust) IAmiSSL->X509_STORE_CTX_set_trust((ctx), (trust))
#define X509_STORE_CTX_purpose_inherit(ctx, def_purpose, purpose, trust) IAmiSSL->X509_STORE_CTX_purpose_inherit((ctx), (def_purpose), (purpose), (trust))
#define X509_STORE_CTX_set_flags(ctx, flags) IAmiSSL->X509_STORE_CTX_set_flags((ctx), (flags))
#define X509_STORE_CTX_set_time(ctx, flags, t) IAmiSSL->X509_STORE_CTX_set_time((ctx), (flags), (t))
#define X509_STORE_CTX_set_verify_cb(ctx, verify_cb) IAmiSSL->X509_STORE_CTX_set_verify_cb((ctx), (verify_cb))
#define BASIC_CONSTRAINTS_new() IAmiSSL->BASIC_CONSTRAINTS_new()
#define BASIC_CONSTRAINTS_free(a) IAmiSSL->BASIC_CONSTRAINTS_free((a))
#define d2i_BASIC_CONSTRAINTS(a, in, len) IAmiSSL->d2i_BASIC_CONSTRAINTS((a), (in), (len))
#define i2d_BASIC_CONSTRAINTS(a, out) IAmiSSL->i2d_BASIC_CONSTRAINTS((a), (out))
#define BASIC_CONSTRAINTS_it() IAmiSSL->BASIC_CONSTRAINTS_it()
#define SXNET_new() IAmiSSL->SXNET_new()
#define SXNET_free(a) IAmiSSL->SXNET_free((a))
#define d2i_SXNET(a, in, len) IAmiSSL->d2i_SXNET((a), (in), (len))
#define i2d_SXNET(a, out) IAmiSSL->i2d_SXNET((a), (out))
#define SXNET_it() IAmiSSL->SXNET_it()
#define SXNETID_new() IAmiSSL->SXNETID_new()
#define SXNETID_free(a) IAmiSSL->SXNETID_free((a))
#define d2i_SXNETID(a, in, len) IAmiSSL->d2i_SXNETID((a), (in), (len))
#define i2d_SXNETID(a, out) IAmiSSL->i2d_SXNETID((a), (out))
#define SXNETID_it() IAmiSSL->SXNETID_it()
#define SXNET_add_id_asc(psx, zone, user, userlen) IAmiSSL->SXNET_add_id_asc((psx), (zone), (user), (userlen))
#define SXNET_add_id_ulong(psx, lzone, user, userlen) IAmiSSL->SXNET_add_id_ulong((psx), (lzone), (user), (userlen))
#define SXNET_add_id_INTEGER(psx, izone, user, userlen) IAmiSSL->SXNET_add_id_INTEGER((psx), (izone), (user), (userlen))
#define SXNET_get_id_asc(sx, zone) IAmiSSL->SXNET_get_id_asc((sx), (zone))
#define SXNET_get_id_ulong(sx, lzone) IAmiSSL->SXNET_get_id_ulong((sx), (lzone))
#define SXNET_get_id_INTEGER(sx, zone) IAmiSSL->SXNET_get_id_INTEGER((sx), (zone))
#define AUTHORITY_KEYID_new() IAmiSSL->AUTHORITY_KEYID_new()
#define AUTHORITY_KEYID_free(a) IAmiSSL->AUTHORITY_KEYID_free((a))
#define d2i_AUTHORITY_KEYID(a, in, len) IAmiSSL->d2i_AUTHORITY_KEYID((a), (in), (len))
#define i2d_AUTHORITY_KEYID(a, out) IAmiSSL->i2d_AUTHORITY_KEYID((a), (out))
#define AUTHORITY_KEYID_it() IAmiSSL->AUTHORITY_KEYID_it()
#define PKEY_USAGE_PERIOD_new() IAmiSSL->PKEY_USAGE_PERIOD_new()
#define PKEY_USAGE_PERIOD_free(a) IAmiSSL->PKEY_USAGE_PERIOD_free((a))
#define d2i_PKEY_USAGE_PERIOD(a, in, len) IAmiSSL->d2i_PKEY_USAGE_PERIOD((a), (in), (len))
#define i2d_PKEY_USAGE_PERIOD(a, out) IAmiSSL->i2d_PKEY_USAGE_PERIOD((a), (out))
#define PKEY_USAGE_PERIOD_it() IAmiSSL->PKEY_USAGE_PERIOD_it()
#define GENERAL_NAME_new() IAmiSSL->GENERAL_NAME_new()
#define GENERAL_NAME_free(a) IAmiSSL->GENERAL_NAME_free((a))
#define d2i_GENERAL_NAME(a, in, len) IAmiSSL->d2i_GENERAL_NAME((a), (in), (len))
#define i2d_GENERAL_NAME(a, out) IAmiSSL->i2d_GENERAL_NAME((a), (out))
#define GENERAL_NAME_it() IAmiSSL->GENERAL_NAME_it()
#define i2v_GENERAL_NAME(method, gen, ret) IAmiSSL->i2v_GENERAL_NAME((method), (gen), (ret))
#define GENERAL_NAME_print(out, gen) IAmiSSL->GENERAL_NAME_print((out), (gen))
#define GENERAL_NAMES_new() IAmiSSL->GENERAL_NAMES_new()
#define GENERAL_NAMES_free(a) IAmiSSL->GENERAL_NAMES_free((a))
#define d2i_GENERAL_NAMES(a, in, len) IAmiSSL->d2i_GENERAL_NAMES((a), (in), (len))
#define i2d_GENERAL_NAMES(a, out) IAmiSSL->i2d_GENERAL_NAMES((a), (out))
#define GENERAL_NAMES_it() IAmiSSL->GENERAL_NAMES_it()
#define i2v_GENERAL_NAMES(method, gen, extlist) IAmiSSL->i2v_GENERAL_NAMES((method), (gen), (extlist))
#define v2i_GENERAL_NAMES(method, ctx, nval) IAmiSSL->v2i_GENERAL_NAMES((method), (ctx), (nval))
#define OTHERNAME_new() IAmiSSL->OTHERNAME_new()
#define OTHERNAME_free(a) IAmiSSL->OTHERNAME_free((a))
#define d2i_OTHERNAME(a, in, len) IAmiSSL->d2i_OTHERNAME((a), (in), (len))
#define i2d_OTHERNAME(a, out) IAmiSSL->i2d_OTHERNAME((a), (out))
#define OTHERNAME_it() IAmiSSL->OTHERNAME_it()
#define EDIPARTYNAME_new() IAmiSSL->EDIPARTYNAME_new()
#define EDIPARTYNAME_free(a) IAmiSSL->EDIPARTYNAME_free((a))
#define d2i_EDIPARTYNAME(a, in, len) IAmiSSL->d2i_EDIPARTYNAME((a), (in), (len))
#define i2d_EDIPARTYNAME(a, out) IAmiSSL->i2d_EDIPARTYNAME((a), (out))
#define EDIPARTYNAME_it() IAmiSSL->EDIPARTYNAME_it()
#define i2s_ASN1_OCTET_STRING(method, ia5) IAmiSSL->i2s_ASN1_OCTET_STRING((method), (ia5))
#define s2i_ASN1_OCTET_STRING(method, ctx, str) IAmiSSL->s2i_ASN1_OCTET_STRING((method), (ctx), (str))
#define EXTENDED_KEY_USAGE_new() IAmiSSL->EXTENDED_KEY_USAGE_new()
#define EXTENDED_KEY_USAGE_free(a) IAmiSSL->EXTENDED_KEY_USAGE_free((a))
#define d2i_EXTENDED_KEY_USAGE(a, in, len) IAmiSSL->d2i_EXTENDED_KEY_USAGE((a), (in), (len))
#define i2d_EXTENDED_KEY_USAGE(a, out) IAmiSSL->i2d_EXTENDED_KEY_USAGE((a), (out))
#define EXTENDED_KEY_USAGE_it() IAmiSSL->EXTENDED_KEY_USAGE_it()
#define i2a_ACCESS_DESCRIPTION(bp, a) IAmiSSL->i2a_ACCESS_DESCRIPTION((bp), (a))
#define CERTIFICATEPOLICIES_new() IAmiSSL->CERTIFICATEPOLICIES_new()
#define CERTIFICATEPOLICIES_free(a) IAmiSSL->CERTIFICATEPOLICIES_free((a))
#define d2i_CERTIFICATEPOLICIES(a, in, len) IAmiSSL->d2i_CERTIFICATEPOLICIES((a), (in), (len))
#define i2d_CERTIFICATEPOLICIES(a, out) IAmiSSL->i2d_CERTIFICATEPOLICIES((a), (out))
#define CERTIFICATEPOLICIES_it() IAmiSSL->CERTIFICATEPOLICIES_it()
#define POLICYINFO_new() IAmiSSL->POLICYINFO_new()
#define POLICYINFO_free(a) IAmiSSL->POLICYINFO_free((a))
#define d2i_POLICYINFO(a, in, len) IAmiSSL->d2i_POLICYINFO((a), (in), (len))
#define i2d_POLICYINFO(a, out) IAmiSSL->i2d_POLICYINFO((a), (out))
#define POLICYINFO_it() IAmiSSL->POLICYINFO_it()
#define POLICYQUALINFO_new() IAmiSSL->POLICYQUALINFO_new()
#define POLICYQUALINFO_free(a) IAmiSSL->POLICYQUALINFO_free((a))
#define d2i_POLICYQUALINFO(a, in, len) IAmiSSL->d2i_POLICYQUALINFO((a), (in), (len))
#define i2d_POLICYQUALINFO(a, out) IAmiSSL->i2d_POLICYQUALINFO((a), (out))
#define POLICYQUALINFO_it() IAmiSSL->POLICYQUALINFO_it()
#define USERNOTICE_new() IAmiSSL->USERNOTICE_new()
#define USERNOTICE_free(a) IAmiSSL->USERNOTICE_free((a))
#define d2i_USERNOTICE(a, in, len) IAmiSSL->d2i_USERNOTICE((a), (in), (len))
#define i2d_USERNOTICE(a, out) IAmiSSL->i2d_USERNOTICE((a), (out))
#define USERNOTICE_it() IAmiSSL->USERNOTICE_it()
#define NOTICEREF_new() IAmiSSL->NOTICEREF_new()
#define NOTICEREF_free(a) IAmiSSL->NOTICEREF_free((a))
#define d2i_NOTICEREF(a, in, len) IAmiSSL->d2i_NOTICEREF((a), (in), (len))
#define i2d_NOTICEREF(a, out) IAmiSSL->i2d_NOTICEREF((a), (out))
#define NOTICEREF_it() IAmiSSL->NOTICEREF_it()
#define CRL_DIST_POINTS_new() IAmiSSL->CRL_DIST_POINTS_new()
#define CRL_DIST_POINTS_free(a) IAmiSSL->CRL_DIST_POINTS_free((a))
#define d2i_CRL_DIST_POINTS(a, in, len) IAmiSSL->d2i_CRL_DIST_POINTS((a), (in), (len))
#define i2d_CRL_DIST_POINTS(a, out) IAmiSSL->i2d_CRL_DIST_POINTS((a), (out))
#define CRL_DIST_POINTS_it() IAmiSSL->CRL_DIST_POINTS_it()
#define DIST_POINT_new() IAmiSSL->DIST_POINT_new()
#define DIST_POINT_free(a) IAmiSSL->DIST_POINT_free((a))
#define d2i_DIST_POINT(a, in, len) IAmiSSL->d2i_DIST_POINT((a), (in), (len))
#define i2d_DIST_POINT(a, out) IAmiSSL->i2d_DIST_POINT((a), (out))
#define DIST_POINT_it() IAmiSSL->DIST_POINT_it()
#define DIST_POINT_NAME_new() IAmiSSL->DIST_POINT_NAME_new()
#define DIST_POINT_NAME_free(a) IAmiSSL->DIST_POINT_NAME_free((a))
#define d2i_DIST_POINT_NAME(a, in, len) IAmiSSL->d2i_DIST_POINT_NAME((a), (in), (len))
#define i2d_DIST_POINT_NAME(a, out) IAmiSSL->i2d_DIST_POINT_NAME((a), (out))
#define DIST_POINT_NAME_it() IAmiSSL->DIST_POINT_NAME_it()
#define ACCESS_DESCRIPTION_new() IAmiSSL->ACCESS_DESCRIPTION_new()
#define ACCESS_DESCRIPTION_free(a) IAmiSSL->ACCESS_DESCRIPTION_free((a))
#define d2i_ACCESS_DESCRIPTION(a, in, len) IAmiSSL->d2i_ACCESS_DESCRIPTION((a), (in), (len))
#define i2d_ACCESS_DESCRIPTION(a, out) IAmiSSL->i2d_ACCESS_DESCRIPTION((a), (out))
#define ACCESS_DESCRIPTION_it() IAmiSSL->ACCESS_DESCRIPTION_it()
#define AUTHORITY_INFO_ACCESS_new() IAmiSSL->AUTHORITY_INFO_ACCESS_new()
#define AUTHORITY_INFO_ACCESS_free(a) IAmiSSL->AUTHORITY_INFO_ACCESS_free((a))
#define d2i_AUTHORITY_INFO_ACCESS(a, in, len) IAmiSSL->d2i_AUTHORITY_INFO_ACCESS((a), (in), (len))
#define i2d_AUTHORITY_INFO_ACCESS(a, out) IAmiSSL->i2d_AUTHORITY_INFO_ACCESS((a), (out))
#define AUTHORITY_INFO_ACCESS_it() IAmiSSL->AUTHORITY_INFO_ACCESS_it()
#define v2i_GENERAL_NAME(method, ctx, cnf) IAmiSSL->v2i_GENERAL_NAME((method), (ctx), (cnf))
#define X509V3_conf_free(val) IAmiSSL->X509V3_conf_free((val))
#define X509V3_EXT_nconf_nid(conf, ctx, ext_nid, value) IAmiSSL->X509V3_EXT_nconf_nid((conf), (ctx), (ext_nid), (value))
#define X509V3_EXT_nconf(conf, ctx, name, value) IAmiSSL->X509V3_EXT_nconf((conf), (ctx), (name), (value))
#define X509V3_EXT_add_nconf_sk(conf, ctx, section, sk) IAmiSSL->X509V3_EXT_add_nconf_sk((conf), (ctx), (section), (sk))
#define X509V3_EXT_add_nconf(conf, ctx, section, cert) IAmiSSL->X509V3_EXT_add_nconf((conf), (ctx), (section), (cert))
#define X509V3_EXT_REQ_add_nconf(conf, ctx, section, req) IAmiSSL->X509V3_EXT_REQ_add_nconf((conf), (ctx), (section), (req))
#define X509V3_EXT_CRL_add_nconf(conf, ctx, section, crl) IAmiSSL->X509V3_EXT_CRL_add_nconf((conf), (ctx), (section), (crl))
#define X509V3_EXT_conf_nid(conf, ctx, ext_nid, value) IAmiSSL->X509V3_EXT_conf_nid((conf), (ctx), (ext_nid), (value))
#define X509V3_EXT_conf(conf, ctx, name, value) IAmiSSL->X509V3_EXT_conf((conf), (ctx), (name), (value))
#define X509V3_EXT_add_conf(conf, ctx, section, cert) IAmiSSL->X509V3_EXT_add_conf((conf), (ctx), (section), (cert))
#define X509V3_EXT_REQ_add_conf(conf, ctx, section, req) IAmiSSL->X509V3_EXT_REQ_add_conf((conf), (ctx), (section), (req))
#define X509V3_EXT_CRL_add_conf(conf, ctx, section, crl) IAmiSSL->X509V3_EXT_CRL_add_conf((conf), (ctx), (section), (crl))
#define X509V3_add_value_bool_nf(name, asn1_bool, extlist) IAmiSSL->X509V3_add_value_bool_nf((name), (asn1_bool), (extlist))
#define X509V3_get_value_bool(value, asn1_bool) IAmiSSL->X509V3_get_value_bool((value), (asn1_bool))
#define X509V3_get_value_int(value, aint) IAmiSSL->X509V3_get_value_int((value), (aint))
#define X509V3_set_nconf(ctx, conf) IAmiSSL->X509V3_set_nconf((ctx), (conf))
#define X509V3_set_conf_lhash(ctx, lhash) IAmiSSL->X509V3_set_conf_lhash((ctx), (lhash))
#define X509V3_get_string(ctx, name, section) IAmiSSL->X509V3_get_string((ctx), (name), (section))
#define X509V3_get_section(ctx, section) IAmiSSL->X509V3_get_section((ctx), (section))
#define X509V3_string_free(ctx, str) IAmiSSL->X509V3_string_free((ctx), (str))
#define X509V3_section_free(ctx, section) IAmiSSL->X509V3_section_free((ctx), (section))
#define X509V3_set_ctx(ctx, issuer, subject, req, crl, flags) IAmiSSL->X509V3_set_ctx((ctx), (issuer), (subject), (req), (crl), (flags))
#define X509V3_add_value(name, value, extlist) IAmiSSL->X509V3_add_value((name), (value), (extlist))
#define X509V3_add_value_uchar(name, value, extlist) IAmiSSL->X509V3_add_value_uchar((name), (value), (extlist))
#define X509V3_add_value_bool(name, asn1_bool, extlist) IAmiSSL->X509V3_add_value_bool((name), (asn1_bool), (extlist))
#define X509V3_add_value_int(name, aint, extlist) IAmiSSL->X509V3_add_value_int((name), (aint), (extlist))
#define i2s_ASN1_INTEGER(meth, aint) IAmiSSL->i2s_ASN1_INTEGER((meth), (aint))
#define s2i_ASN1_INTEGER(meth, value) IAmiSSL->s2i_ASN1_INTEGER((meth), (value))
#define i2s_ASN1_ENUMERATED(meth, aint) IAmiSSL->i2s_ASN1_ENUMERATED((meth), (aint))
#define i2s_ASN1_ENUMERATED_TABLE(meth, aint) IAmiSSL->i2s_ASN1_ENUMERATED_TABLE((meth), (aint))
#define X509V3_EXT_add(ext) IAmiSSL->X509V3_EXT_add((ext))
#define X509V3_EXT_add_list(extlist) IAmiSSL->X509V3_EXT_add_list((extlist))
#define X509V3_EXT_add_alias(nid_to, nid_from) IAmiSSL->X509V3_EXT_add_alias((nid_to), (nid_from))
#define X509V3_EXT_cleanup() IAmiSSL->X509V3_EXT_cleanup()
#define X509V3_EXT_get(ext) IAmiSSL->X509V3_EXT_get((ext))
#define X509V3_EXT_get_nid(nid) IAmiSSL->X509V3_EXT_get_nid((nid))
#define X509V3_add_standard_extensions() IAmiSSL->X509V3_add_standard_extensions()
#define X509V3_parse_list(line) IAmiSSL->X509V3_parse_list((line))
#define X509V3_EXT_d2i(ext) IAmiSSL->X509V3_EXT_d2i((ext))
#define X509V3_get_d2i(x, nid, crit, idx) IAmiSSL->X509V3_get_d2i((x), (nid), (crit), (idx))
#define X509V3_EXT_i2d(ext_nid, crit, ext_struc) IAmiSSL->X509V3_EXT_i2d((ext_nid), (crit), (ext_struc))
#define X509V3_add1_i2d(x, nid, value, crit, flags) IAmiSSL->X509V3_add1_i2d((x), (nid), (value), (crit), (flags))
#define OPENSSL_buf2hexstr(buffer, len) IAmiSSL->OPENSSL_buf2hexstr((buffer), (len))
#define OPENSSL_hexstr2buf(str, len) IAmiSSL->OPENSSL_hexstr2buf((str), (len))
#define X509V3_EXT_val_prn(out, val, indent, ml) IAmiSSL->X509V3_EXT_val_prn((out), (val), (indent), (ml))
#define X509V3_EXT_print(out, ext, flag, indent) IAmiSSL->X509V3_EXT_print((out), (ext), (flag), (indent))
#define X509V3_extensions_print(out, title, exts, flag, indent) IAmiSSL->X509V3_extensions_print((out), (title), (exts), (flag), (indent))
#define X509_check_purpose(x, id, ca) IAmiSSL->X509_check_purpose((x), (id), (ca))
#define X509_supported_extension(ex) IAmiSSL->X509_supported_extension((ex))
#define X509_PURPOSE_set(p, purpose) IAmiSSL->X509_PURPOSE_set((p), (purpose))
#define X509_check_issued(issuer, subject) IAmiSSL->X509_check_issued((issuer), (subject))
#define X509_PURPOSE_get_count() IAmiSSL->X509_PURPOSE_get_count()
#define X509_PURPOSE_get0(idx) IAmiSSL->X509_PURPOSE_get0((idx))
#define X509_PURPOSE_get_by_sname(sname) IAmiSSL->X509_PURPOSE_get_by_sname((sname))
#define X509_PURPOSE_get_by_id(id) IAmiSSL->X509_PURPOSE_get_by_id((id))
#define X509_PURPOSE_add(id, trust, flags, ck, name, sname, arg) IAmiSSL->X509_PURPOSE_add((id), (trust), (flags), (ck), (name), (sname), (arg))
#define X509_PURPOSE_get0_name(xp) IAmiSSL->X509_PURPOSE_get0_name((xp))
#define X509_PURPOSE_get0_sname(xp) IAmiSSL->X509_PURPOSE_get0_sname((xp))
#define X509_PURPOSE_get_trust(xp) IAmiSSL->X509_PURPOSE_get_trust((xp))
#define X509_PURPOSE_cleanup() IAmiSSL->X509_PURPOSE_cleanup()
#define X509_PURPOSE_get_id(a) IAmiSSL->X509_PURPOSE_get_id((a))
#define X509_get1_email(x) IAmiSSL->X509_get1_email((x))
#define X509_REQ_get1_email(x) IAmiSSL->X509_REQ_get1_email((x))
#define X509_email_free(sk) IAmiSSL->X509_email_free((sk))
#define ERR_load_X509V3_strings() IAmiSSL->ERR_load_X509V3_strings()
#define AES_options() IAmiSSL->AES_options()
#define AES_set_encrypt_key(userKey, bits, key) IAmiSSL->AES_set_encrypt_key((userKey), (bits), (key))
#define AES_set_decrypt_key(userKey, bits, key) IAmiSSL->AES_set_decrypt_key((userKey), (bits), (key))
#define AES_encrypt(in, out, key) IAmiSSL->AES_encrypt((in), (out), (key))
#define AES_decrypt(in, out, key) IAmiSSL->AES_decrypt((in), (out), (key))
#define AES_ecb_encrypt(in, out, key, enc) IAmiSSL->AES_ecb_encrypt((in), (out), (key), (enc))
#define AES_cbc_encrypt(in, out, length, key, ivec, enc) IAmiSSL->AES_cbc_encrypt((in), (out), (length), (key), (ivec), (enc))
#define AES_cfb128_encrypt(in, out, length, key, ivec, num, enc) IAmiSSL->AES_cfb128_encrypt((in), (out), (length), (key), (ivec), (num), (enc))
#define AES_cfb1_encrypt(in, out, length, key, ivec, num, enc) IAmiSSL->AES_cfb1_encrypt((in), (out), (length), (key), (ivec), (num), (enc))
#define AES_cfb8_encrypt(in, out, length, key, ivec, num, enc) IAmiSSL->AES_cfb8_encrypt((in), (out), (length), (key), (ivec), (num), (enc))
#define AES_ofb128_encrypt(in, out, length, key, ivec, num) IAmiSSL->AES_ofb128_encrypt((in), (out), (length), (key), (ivec), (num))
#define BF_set_key(key, len, data) IAmiSSL->BF_set_key((key), (len), (data))
#define BF_encrypt(data, key) IAmiSSL->BF_encrypt((data), (key))
#define BF_decrypt(data, key) IAmiSSL->BF_decrypt((data), (key))
#define BF_ecb_encrypt(in, out, key, enc) IAmiSSL->BF_ecb_encrypt((in), (out), (key), (enc))
#define BF_cbc_encrypt(in, out, length, schedule, ivec, enc) IAmiSSL->BF_cbc_encrypt((in), (out), (length), (schedule), (ivec), (enc))
#define BF_cfb64_encrypt(in, out, length, schedule, ivec, num, enc) IAmiSSL->BF_cfb64_encrypt((in), (out), (length), (schedule), (ivec), (num), (enc))
#define BF_ofb64_encrypt(in, out, length, schedule, ivec, num) IAmiSSL->BF_ofb64_encrypt((in), (out), (length), (schedule), (ivec), (num))
#define BF_options() IAmiSSL->BF_options()
#define CAST_set_key(key, len, data) IAmiSSL->CAST_set_key((key), (len), (data))
#define CAST_ecb_encrypt(in, out, key, enc) IAmiSSL->CAST_ecb_encrypt((in), (out), (key), (enc))
#define CAST_encrypt(data, key) IAmiSSL->CAST_encrypt((data), (key))
#define CAST_decrypt(data, key) IAmiSSL->CAST_decrypt((data), (key))
#define CAST_cbc_encrypt(in, out, length, ks, iv, enc) IAmiSSL->CAST_cbc_encrypt((in), (out), (length), (ks), (iv), (enc))
#define CAST_cfb64_encrypt(in, out, length, schedule, ivec, num, enc) IAmiSSL->CAST_cfb64_encrypt((in), (out), (length), (schedule), (ivec), (num), (enc))
#define CAST_ofb64_encrypt(in, out, length, schedule, ivec, num) IAmiSSL->CAST_ofb64_encrypt((in), (out), (length), (schedule), (ivec), (num))
#define DES_options() IAmiSSL->DES_options()
#define DES_ecb3_encrypt(input, output, ks1, ks2, ks3, enc) IAmiSSL->DES_ecb3_encrypt((input), (output), (ks1), (ks2), (ks3), (enc))
#define DES_cbc_cksum(input, output, length, schedule, ivec) IAmiSSL->DES_cbc_cksum((input), (output), (length), (schedule), (ivec))
#define DES_cbc_encrypt(input, output, length, schedule, ivec, enc) IAmiSSL->DES_cbc_encrypt((input), (output), (length), (schedule), (ivec), (enc))
#define DES_ncbc_encrypt(input, output, length, schedule, ivec, enc) IAmiSSL->DES_ncbc_encrypt((input), (output), (length), (schedule), (ivec), (enc))
#define DES_xcbc_encrypt(input, output, length, schedule, ivec, inw, outw, enc) IAmiSSL->DES_xcbc_encrypt((input), (output), (length), (schedule), (ivec), (inw), (outw), (enc))
#define DES_cfb_encrypt(in, out, numbits, length, schedule, ivec, enc) IAmiSSL->DES_cfb_encrypt((in), (out), (numbits), (length), (schedule), (ivec), (enc))
#define DES_ecb_encrypt(input, output, ks, enc) IAmiSSL->DES_ecb_encrypt((input), (output), (ks), (enc))
#define DES_encrypt1(data, ks, enc) IAmiSSL->DES_encrypt1((data), (ks), (enc))
#define DES_encrypt2(data, ks, enc) IAmiSSL->DES_encrypt2((data), (ks), (enc))
#define DES_encrypt3(data, ks1, ks2, ks3) IAmiSSL->DES_encrypt3((data), (ks1), (ks2), (ks3))
#define DES_decrypt3(data, ks1, ks2, ks3) IAmiSSL->DES_decrypt3((data), (ks1), (ks2), (ks3))
#define DES_ede3_cbc_encrypt(input, output, length, ks1, ks2, ks3, ivec, enc) IAmiSSL->DES_ede3_cbc_encrypt((input), (output), (length), (ks1), (ks2), (ks3), (ivec), (enc))
#define DES_ede3_cfb64_encrypt(in, out, length, ks1, ks2, ks3, ivec, num, enc) IAmiSSL->DES_ede3_cfb64_encrypt((in), (out), (length), (ks1), (ks2), (ks3), (ivec), (num), (enc))
#define DES_ede3_cfb_encrypt(in, out, numbits, length, ks1, ks2, ks3, ivec, enc) IAmiSSL->DES_ede3_cfb_encrypt((in), (out), (numbits), (length), (ks1), (ks2), (ks3), (ivec), (enc))
#define DES_ede3_ofb64_encrypt(in, out, length, ks1, ks2, ks3, ivec, num) IAmiSSL->DES_ede3_ofb64_encrypt((in), (out), (length), (ks1), (ks2), (ks3), (ivec), (num))
#define DES_fcrypt(buf, salt, ret) IAmiSSL->DES_fcrypt((buf), (salt), (ret))
#define DES_crypt(buf, salt) IAmiSSL->DES_crypt((buf), (salt))
#define DES_ofb_encrypt(in, out, numbits, length, schedule, ivec) IAmiSSL->DES_ofb_encrypt((in), (out), (numbits), (length), (schedule), (ivec))
#define DES_pcbc_encrypt(input, output, length, schedule, ivec, enc) IAmiSSL->DES_pcbc_encrypt((input), (output), (length), (schedule), (ivec), (enc))
#define DES_quad_cksum(input, output, length, out_count, seed) IAmiSSL->DES_quad_cksum((input), (output), (length), (out_count), (seed))
#define DES_random_key(ret) IAmiSSL->DES_random_key((ret))
#define DES_set_odd_parity(key) IAmiSSL->DES_set_odd_parity((key))
#define DES_check_key_parity(key) IAmiSSL->DES_check_key_parity((key))
#define DES_is_weak_key(key) IAmiSSL->DES_is_weak_key((key))
#define DES_set_key(key, schedule) IAmiSSL->DES_set_key((key), (schedule))
#define DES_key_sched(key, schedule) IAmiSSL->DES_key_sched((key), (schedule))
#define DES_set_key_checked(key, schedule) IAmiSSL->DES_set_key_checked((key), (schedule))
#define DES_set_key_unchecked(key, schedule) IAmiSSL->DES_set_key_unchecked((key), (schedule))
#define DES_string_to_key(str, key) IAmiSSL->DES_string_to_key((str), (key))
#define DES_string_to_2keys(str, key1, key2) IAmiSSL->DES_string_to_2keys((str), (key1), (key2))
#define DES_cfb64_encrypt(in, out, length, schedule, ivec, num, enc) IAmiSSL->DES_cfb64_encrypt((in), (out), (length), (schedule), (ivec), (num), (enc))
#define DES_ofb64_encrypt(in, out, length, schedule, ivec, num) IAmiSSL->DES_ofb64_encrypt((in), (out), (length), (schedule), (ivec), (num))
#define DH_OpenSSL() IAmiSSL->DH_OpenSSL()
#define DH_set_default_method(meth) IAmiSSL->DH_set_default_method((meth))
#define DH_get_default_method() IAmiSSL->DH_get_default_method()
#define DH_set_method(dh, meth) IAmiSSL->DH_set_method((dh), (meth))
#define DH_new_method(engine) IAmiSSL->DH_new_method((engine))
#define DH_new() IAmiSSL->DH_new()
#define DH_free(dh) IAmiSSL->DH_free((dh))
#define DH_up_ref(dh) IAmiSSL->DH_up_ref((dh))
#define DH_size(dh) IAmiSSL->DH_size((dh))
#define OBSOLETE_DH_get_ex_new_index(argl, argp, new_func, dup_func, free_func) IAmiSSL->OBSOLETE_DH_get_ex_new_index((argl), (argp), (new_func), (dup_func), (free_func))
#define DH_set_ex_data(d, idx, arg) IAmiSSL->DH_set_ex_data((d), (idx), (arg))
#define DH_get_ex_data(d, idx) IAmiSSL->DH_get_ex_data((d), (idx))
#define DH_generate_parameters(prime_len, generator, callback, cb_arg) IAmiSSL->DH_generate_parameters((prime_len), (generator), (callback), (cb_arg))
#define DH_check(dh, codes) IAmiSSL->DH_check((dh), (codes))
#define DH_generate_key(dh) IAmiSSL->DH_generate_key((dh))
#define DH_compute_key(key, pub_key, dh) IAmiSSL->DH_compute_key((key), (pub_key), (dh))
#define d2i_DHparams(a, pp, length) IAmiSSL->d2i_DHparams((a), (pp), (length))
#define i2d_DHparams(a, pp) IAmiSSL->i2d_DHparams((a), (pp))
#define DHparams_print(bp, x) IAmiSSL->DHparams_print((bp), (x))
#define ERR_load_DH_strings() IAmiSSL->ERR_load_DH_strings()
#define DSA_SIG_new() IAmiSSL->DSA_SIG_new()
#define DSA_SIG_free(a) IAmiSSL->DSA_SIG_free((a))
#define i2d_DSA_SIG(a, pp) IAmiSSL->i2d_DSA_SIG((a), (pp))
#define d2i_DSA_SIG(v, pp, length) IAmiSSL->d2i_DSA_SIG((v), (pp), (length))
#define DSA_do_sign(dgst, dlen, dsa) IAmiSSL->DSA_do_sign((dgst), (dlen), (dsa))
#define DSA_do_verify(dgst, dgst_len, sig, dsa) IAmiSSL->DSA_do_verify((dgst), (dgst_len), (sig), (dsa))
#define DSA_OpenSSL() IAmiSSL->DSA_OpenSSL()
#define DSA_set_default_method(a) IAmiSSL->DSA_set_default_method((a))
#define DSA_get_default_method() IAmiSSL->DSA_get_default_method()
#define DSA_set_method(dsa, a) IAmiSSL->DSA_set_method((dsa), (a))
#define DSA_new() IAmiSSL->DSA_new()
#define DSA_new_method(engine) IAmiSSL->DSA_new_method((engine))
#define DSA_free(r) IAmiSSL->DSA_free((r))
#define DSA_up_ref(r) IAmiSSL->DSA_up_ref((r))
#define DSA_size(a) IAmiSSL->DSA_size((a))
#define DSA_sign_setup(dsa, ctx_in, kinvp, rp) IAmiSSL->DSA_sign_setup((dsa), (ctx_in), (kinvp), (rp))
#define DSA_sign(type, dgst, dlen, sig, siglen, dsa) IAmiSSL->DSA_sign((type), (dgst), (dlen), (sig), (siglen), (dsa))
#define DSA_verify(type, dgst, dgst_len, sigbuf, siglen, dsa) IAmiSSL->DSA_verify((type), (dgst), (dgst_len), (sigbuf), (siglen), (dsa))
#define OBSOLETE_DSA_get_ex_new_index(argl, argp, new_func, dup_func, free_func) IAmiSSL->OBSOLETE_DSA_get_ex_new_index((argl), (argp), (new_func), (dup_func), (free_func))
#define DSA_set_ex_data(d, idx, arg) IAmiSSL->DSA_set_ex_data((d), (idx), (arg))
#define DSA_get_ex_data(d, idx) IAmiSSL->DSA_get_ex_data((d), (idx))
#define d2i_DSAPublicKey(a, pp, length) IAmiSSL->d2i_DSAPublicKey((a), (pp), (length))
#define d2i_DSAPrivateKey(a, pp, length) IAmiSSL->d2i_DSAPrivateKey((a), (pp), (length))
#define d2i_DSAparams(a, pp, length) IAmiSSL->d2i_DSAparams((a), (pp), (length))
#define DSA_generate_parameters(bits, seed, seed_len, counter_ret, h_ret, callback, cb_arg) IAmiSSL->DSA_generate_parameters((bits), (seed), (seed_len), (counter_ret), (h_ret), (callback), (cb_arg))
#define DSA_generate_key(a) IAmiSSL->DSA_generate_key((a))
#define i2d_DSAPublicKey(a, pp) IAmiSSL->i2d_DSAPublicKey((a), (pp))
#define i2d_DSAPrivateKey(a, pp) IAmiSSL->i2d_DSAPrivateKey((a), (pp))
#define i2d_DSAparams(a, pp) IAmiSSL->i2d_DSAparams((a), (pp))
#define DSAparams_print(bp, x) IAmiSSL->DSAparams_print((bp), (x))
#define DSA_print(bp, x, off) IAmiSSL->DSA_print((bp), (x), (off))
#define DSA_dup_DH(r) IAmiSSL->DSA_dup_DH((r))
#define ERR_load_DSA_strings() IAmiSSL->ERR_load_DSA_strings()
#define IDEA_options() IAmiSSL->IDEA_options()
#define IDEA_ecb_encrypt(in, out, ks) IAmiSSL->IDEA_ecb_encrypt((in), (out), (ks))
#define IDEA_set_encrypt_key(key, ks) IAmiSSL->IDEA_set_encrypt_key((key), (ks))
#define IDEA_set_decrypt_key(ek, dk) IAmiSSL->IDEA_set_decrypt_key((ek), (dk))
#define IDEA_cbc_encrypt(in, out, length, ks, iv, enc) IAmiSSL->IDEA_cbc_encrypt((in), (out), (length), (ks), (iv), (enc))
#define IDEA_cfb64_encrypt(in, out, length, ks, iv, num, enc) IAmiSSL->IDEA_cfb64_encrypt((in), (out), (length), (ks), (iv), (num), (enc))
#define IDEA_ofb64_encrypt(in, out, length, ks, iv, num) IAmiSSL->IDEA_ofb64_encrypt((in), (out), (length), (ks), (iv), (num))
#define IDEA_encrypt(in, ks) IAmiSSL->IDEA_encrypt((in), (ks))
#define MD2_options() IAmiSSL->MD2_options()
#define MD2_Init(c) IAmiSSL->MD2_Init((c))
#define MD2_Update(c, data, len) IAmiSSL->MD2_Update((c), (data), (len))
#define MD2_Final(md, c) IAmiSSL->MD2_Final((md), (c))
#define MD2(d, n, md) IAmiSSL->MD2((d), (n), (md))
#define MD4_Init(c) IAmiSSL->MD4_Init((c))
#define MD4_Update(c, data, len) IAmiSSL->MD4_Update((c), (data), (len))
#define MD4_Final(md, c) IAmiSSL->MD4_Final((md), (c))
#define MD4(d, n, md) IAmiSSL->MD4((d), (n), (md))
#define MD4_Transform(c, b) IAmiSSL->MD4_Transform((c), (b))
#define MD5_Init(c) IAmiSSL->MD5_Init((c))
#define MD5_Update(c, data, len) IAmiSSL->MD5_Update((c), (data), (len))
#define MD5_Final(md, c) IAmiSSL->MD5_Final((md), (c))
#define MD5(d, n, md) IAmiSSL->MD5((d), (n), (md))
#define MD5_Transform(c, b) IAmiSSL->MD5_Transform((c), (b))
#define MDC2_Init(c) IAmiSSL->MDC2_Init((c))
#define MDC2_Update(c, data, len) IAmiSSL->MDC2_Update((c), (data), (len))
#define MDC2_Final(md, c) IAmiSSL->MDC2_Final((md), (c))
#define MDC2(d, n, md) IAmiSSL->MDC2((d), (n), (md))
#define RC2_set_key(key, len, data, bits) IAmiSSL->RC2_set_key((key), (len), (data), (bits))
#define RC2_ecb_encrypt(in, out, key, enc) IAmiSSL->RC2_ecb_encrypt((in), (out), (key), (enc))
#define RC2_encrypt(data, key) IAmiSSL->RC2_encrypt((data), (key))
#define RC2_decrypt(data, key) IAmiSSL->RC2_decrypt((data), (key))
#define RC2_cbc_encrypt(in, out, length, ks, iv, enc) IAmiSSL->RC2_cbc_encrypt((in), (out), (length), (ks), (iv), (enc))
#define RC2_cfb64_encrypt(in, out, length, schedule, ivec, num, enc) IAmiSSL->RC2_cfb64_encrypt((in), (out), (length), (schedule), (ivec), (num), (enc))
#define RC2_ofb64_encrypt(in, out, length, schedule, ivec, num) IAmiSSL->RC2_ofb64_encrypt((in), (out), (length), (schedule), (ivec), (num))
#define RC4_options() IAmiSSL->RC4_options()
#define RC4_set_key(key, len, data) IAmiSSL->RC4_set_key((key), (len), (data))
#define RC4(key, len, indata, outdata) IAmiSSL->RC4((key), (len), (indata), (outdata))
#define RC5_32_set_key(key, len, data, rounds) IAmiSSL->RC5_32_set_key((key), (len), (data), (rounds))
#define RC5_32_ecb_encrypt(in, out, key, enc) IAmiSSL->RC5_32_ecb_encrypt((in), (out), (key), (enc))
#define RC5_32_encrypt(data, key) IAmiSSL->RC5_32_encrypt((data), (key))
#define RC5_32_decrypt(data, key) IAmiSSL->RC5_32_decrypt((data), (key))
#define RC5_32_cbc_encrypt(in, out, length, ks, iv, enc) IAmiSSL->RC5_32_cbc_encrypt((in), (out), (length), (ks), (iv), (enc))
#define RC5_32_cfb64_encrypt(in, out, length, schedule, ivec, num, enc) IAmiSSL->RC5_32_cfb64_encrypt((in), (out), (length), (schedule), (ivec), (num), (enc))
#define RC5_32_ofb64_encrypt(in, out, length, schedule, ivec, num) IAmiSSL->RC5_32_ofb64_encrypt((in), (out), (length), (schedule), (ivec), (num))
#define RIPEMD160_Init(c) IAmiSSL->RIPEMD160_Init((c))
#define RIPEMD160_Update(c, data, len) IAmiSSL->RIPEMD160_Update((c), (data), (len))
#define RIPEMD160_Final(md, c) IAmiSSL->RIPEMD160_Final((md), (c))
#define RIPEMD160(d, n, md) IAmiSSL->RIPEMD160((d), (n), (md))
#define RIPEMD160_Transform(c, b) IAmiSSL->RIPEMD160_Transform((c), (b))
#define RSA_new() IAmiSSL->RSA_new()
#define RSA_new_method(engine) IAmiSSL->RSA_new_method((engine))
#define RSA_size(a) IAmiSSL->RSA_size((a))
#define RSA_generate_key(bits, e, callback, cb_arg) IAmiSSL->RSA_generate_key((bits), (e), (callback), (cb_arg))
#define RSA_check_key(a) IAmiSSL->RSA_check_key((a))
#define RSA_public_encrypt(flen, from, to, rsa, padding) IAmiSSL->RSA_public_encrypt((flen), (from), (to), (rsa), (padding))
#define RSA_private_encrypt(flen, from, to, rsa, padding) IAmiSSL->RSA_private_encrypt((flen), (from), (to), (rsa), (padding))
#define RSA_public_decrypt(flen, from, to, rsa, padding) IAmiSSL->RSA_public_decrypt((flen), (from), (to), (rsa), (padding))
#define RSA_private_decrypt(flen, from, to, rsa, padding) IAmiSSL->RSA_private_decrypt((flen), (from), (to), (rsa), (padding))
#define RSA_free(r) IAmiSSL->RSA_free((r))
#define RSA_up_ref(r) IAmiSSL->RSA_up_ref((r))
#define RSA_flags(r) IAmiSSL->RSA_flags((r))
#define RSA_set_default_method(meth) IAmiSSL->RSA_set_default_method((meth))
#define RSA_get_default_method() IAmiSSL->RSA_get_default_method()
#define RSA_get_method(rsa) IAmiSSL->RSA_get_method((rsa))
#define RSA_set_method(rsa, meth) IAmiSSL->RSA_set_method((rsa), (meth))
#define RSA_null_method() IAmiSSL->RSA_null_method()
#define d2i_RSAPublicKey(a, in, len) IAmiSSL->d2i_RSAPublicKey((a), (in), (len))
#define i2d_RSAPublicKey(a, out) IAmiSSL->i2d_RSAPublicKey((a), (out))
#define RSAPublicKey_it() IAmiSSL->RSAPublicKey_it()
#define d2i_RSAPrivateKey(a, in, len) IAmiSSL->d2i_RSAPrivateKey((a), (in), (len))
#define i2d_RSAPrivateKey(a, out) IAmiSSL->i2d_RSAPrivateKey((a), (out))
#define RSAPrivateKey_it() IAmiSSL->RSAPrivateKey_it()
#define RSA_print(bp, r, offset) IAmiSSL->RSA_print((bp), (r), (offset))
#define RSA_sign(type, m, m_length, sigret, siglen, rsa) IAmiSSL->RSA_sign((type), (m), (m_length), (sigret), (siglen), (rsa))
#define RSA_verify(type, m, m_length, sigbuf, siglen, rsa) IAmiSSL->RSA_verify((type), (m), (m_length), (sigbuf), (siglen), (rsa))
#define RSA_sign_ASN1_OCTET_STRING(type, m, m_length, sigret, siglen, rsa) IAmiSSL->RSA_sign_ASN1_OCTET_STRING((type), (m), (m_length), (sigret), (siglen), (rsa))
#define RSA_verify_ASN1_OCTET_STRING(type, m, m_length, sigbuf, siglen, rsa) IAmiSSL->RSA_verify_ASN1_OCTET_STRING((type), (m), (m_length), (sigbuf), (siglen), (rsa))
#define RSA_blinding_on(rsa, ctx) IAmiSSL->RSA_blinding_on((rsa), (ctx))
#define RSA_blinding_off(rsa) IAmiSSL->RSA_blinding_off((rsa))
#define RSA_padding_add_PKCS1_type_1(to, tlen, f, fl) IAmiSSL->RSA_padding_add_PKCS1_type_1((to), (tlen), (f), (fl))
#define RSA_padding_check_PKCS1_type_1(to, tlen, f, fl, rsa_len) IAmiSSL->RSA_padding_check_PKCS1_type_1((to), (tlen), (f), (fl), (rsa_len))
#define RSA_padding_add_PKCS1_type_2(to, tlen, f, fl) IAmiSSL->RSA_padding_add_PKCS1_type_2((to), (tlen), (f), (fl))
#define RSA_padding_check_PKCS1_type_2(to, tlen, f, fl, rsa_len) IAmiSSL->RSA_padding_check_PKCS1_type_2((to), (tlen), (f), (fl), (rsa_len))
#define RSA_padding_add_PKCS1_OAEP(to, tlen, f, fl, p, pl) IAmiSSL->RSA_padding_add_PKCS1_OAEP((to), (tlen), (f), (fl), (p), (pl))
#define RSA_padding_check_PKCS1_OAEP(to, tlen, f, fl, rsa_len, p, pl) IAmiSSL->RSA_padding_check_PKCS1_OAEP((to), (tlen), (f), (fl), (rsa_len), (p), (pl))
#define RSA_padding_add_none(to, tlen, f, fl) IAmiSSL->RSA_padding_add_none((to), (tlen), (f), (fl))
#define RSA_padding_check_none(to, tlen, f, fl, rsa_len) IAmiSSL->RSA_padding_check_none((to), (tlen), (f), (fl), (rsa_len))
#define OBSOLETE_RSA_get_ex_new_index(argl, argp, new_func, dup_func, free_func) IAmiSSL->OBSOLETE_RSA_get_ex_new_index((argl), (argp), (new_func), (dup_func), (free_func))
#define RSA_set_ex_data(r, idx, arg) IAmiSSL->RSA_set_ex_data((r), (idx), (arg))
#define RSA_get_ex_data(r, idx) IAmiSSL->RSA_get_ex_data((r), (idx))
#define RSAPublicKey_dup(rsa) IAmiSSL->RSAPublicKey_dup((rsa))
#define RSAPrivateKey_dup(rsa) IAmiSSL->RSAPrivateKey_dup((rsa))
#define ERR_load_RSA_strings() IAmiSSL->ERR_load_RSA_strings()
#define SHA1_Init(c) IAmiSSL->SHA1_Init((c))
#define SHA1_Update(c, data, len) IAmiSSL->SHA1_Update((c), (data), (len))
#define SHA1_Final(md, c) IAmiSSL->SHA1_Final((md), (c))
#define SHA1(d, n, md) IAmiSSL->SHA1((d), (n), (md))
#define SHA1_Transform(c, data) IAmiSSL->SHA1_Transform((c), (data))
#define UI_read_string_lib(ui, uis) IAmiSSL->UI_read_string_lib((ui), (uis))
#define UI_write_string_lib(ui, uis) IAmiSSL->UI_write_string_lib((ui), (uis))
#define HMAC_CTX_set_flags(ctx, flags) IAmiSSL->HMAC_CTX_set_flags((ctx), (flags))
#define X509_check_ca(x) IAmiSSL->X509_check_ca((x))
#define PROXY_POLICY_new() IAmiSSL->PROXY_POLICY_new()
#define PROXY_POLICY_free(a) IAmiSSL->PROXY_POLICY_free((a))
#define d2i_PROXY_POLICY(a, in, len) IAmiSSL->d2i_PROXY_POLICY((a), (in), (len))
#define i2d_PROXY_POLICY(a, out) IAmiSSL->i2d_PROXY_POLICY((a), (out))
#define PROXY_POLICY_it() IAmiSSL->PROXY_POLICY_it()
#define PROXY_CERT_INFO_EXTENSION_new() IAmiSSL->PROXY_CERT_INFO_EXTENSION_new()
#define PROXY_CERT_INFO_EXTENSION_free(a) IAmiSSL->PROXY_CERT_INFO_EXTENSION_free((a))
#define d2i_PROXY_CERT_INFO_EXTENSION(a, in, len) IAmiSSL->d2i_PROXY_CERT_INFO_EXTENSION((a), (in), (len))
#define i2d_PROXY_CERT_INFO_EXTENSION(a, out) IAmiSSL->i2d_PROXY_CERT_INFO_EXTENSION((a), (out))
#define PROXY_CERT_INFO_EXTENSION_it() IAmiSSL->PROXY_CERT_INFO_EXTENSION_it()
#define BN_mod_exp_mont_consttime(rr, a, p, m, ctx, in_mont) IAmiSSL->BN_mod_exp_mont_consttime((rr), (a), (p), (m), (ctx), (in_mont))
#define BN_MONT_CTX_set_locked(pmont, lock, mod, ctx) IAmiSSL->BN_MONT_CTX_set_locked((pmont), (lock), (mod), (ctx))
#define PKCS1_MGF1(mask, len, seed, seedlen, dgst) IAmiSSL->PKCS1_MGF1((mask), (len), (seed), (seedlen), (dgst))
#define RSA_padding_add_X931(to, tlen, from, flen) IAmiSSL->RSA_padding_add_X931((to), (tlen), (from), (flen))
#define RSA_padding_check_X931(to, tlen, from, flen, num) IAmiSSL->RSA_padding_check_X931((to), (tlen), (from), (flen), (num))
#define RSA_X931_hash_id(nid) IAmiSSL->RSA_X931_hash_id((nid))
#define RSA_verify_PKCS1_PSS(rsa, mHash, Hash, EM, sLen) IAmiSSL->RSA_verify_PKCS1_PSS((rsa), (mHash), (Hash), (EM), (sLen))
#define RSA_padding_add_PKCS1_PSS(rsa, EM, mHash, Hash, sLen) IAmiSSL->RSA_padding_add_PKCS1_PSS((rsa), (EM), (mHash), (Hash), (sLen))
#define EVP_sha224() IAmiSSL->EVP_sha224()
#define EVP_sha256() IAmiSSL->EVP_sha256()
#define EVP_sha384() IAmiSSL->EVP_sha384()
#define EVP_sha512() IAmiSSL->EVP_sha512()
#define BN_GF2m_add(r, a, b) IAmiSSL->BN_GF2m_add((r), (a), (b))
#define BN_GF2m_arr2poly(p, a) IAmiSSL->BN_GF2m_arr2poly((p), (a))
#define BN_GF2m_mod(r, a, p) IAmiSSL->BN_GF2m_mod((r), (a), (p))
#define BN_GF2m_mod_mul(r, a, b, p, ctx) IAmiSSL->BN_GF2m_mod_mul((r), (a), (b), (p), (ctx))
#define BN_GF2m_mod_sqr(r, a, p, ctx) IAmiSSL->BN_GF2m_mod_sqr((r), (a), (p), (ctx))
#define BN_GF2m_mod_inv(r, b, p, ctx) IAmiSSL->BN_GF2m_mod_inv((r), (b), (p), (ctx))
#define BN_GF2m_mod_div(r, a, b, p, ctx) IAmiSSL->BN_GF2m_mod_div((r), (a), (b), (p), (ctx))
#define BN_GF2m_mod_exp(r, a, b, p, ctx) IAmiSSL->BN_GF2m_mod_exp((r), (a), (b), (p), (ctx))
#define BN_GF2m_mod_sqrt(r, a, p, ctx) IAmiSSL->BN_GF2m_mod_sqrt((r), (a), (p), (ctx))
#define BN_GF2m_mod_solve_quad(r, a, p, ctx) IAmiSSL->BN_GF2m_mod_solve_quad((r), (a), (p), (ctx))
#define BN_generate_prime_ex(ret, bits, safe, add, rem, cb) IAmiSSL->BN_generate_prime_ex((ret), (bits), (safe), (add), (rem), (cb))
#define BN_is_prime_ex(p, nchecks, ctx, cb) IAmiSSL->BN_is_prime_ex((p), (nchecks), (ctx), (cb))
#define BN_set_negative(b, n) IAmiSSL->BN_set_negative((b), (n))
#define EC_GROUP_get_degree(group) IAmiSSL->EC_GROUP_get_degree((group))
#define EC_GF2m_simple_method() IAmiSSL->EC_GF2m_simple_method()
#define EC_GROUP_set_curve_GF2m(group, p, a, b, ctx) IAmiSSL->EC_GROUP_set_curve_GF2m((group), (p), (a), (b), (ctx))
#define EC_GROUP_get_curve_GF2m(group, p, a, b, ctx) IAmiSSL->EC_GROUP_get_curve_GF2m((group), (p), (a), (b), (ctx))
#define EC_POINT_set_affine_coordinates_GF2m(group, point, x, y, ctx) IAmiSSL->EC_POINT_set_affine_coordinates_GF2m((group), (point), (x), (y), (ctx))
#define EC_POINT_get_affine_coordinates_GF2m(group, point, x, y, ctx) IAmiSSL->EC_POINT_get_affine_coordinates_GF2m((group), (point), (x), (y), (ctx))
#define EC_get_builtin_curves(r, nitems) IAmiSSL->EC_get_builtin_curves((r), (nitems))
#define EC_GROUP_new_by_curve_name(nid) IAmiSSL->EC_GROUP_new_by_curve_name((nid))
#define EC_GROUP_check(group, ctx) IAmiSSL->EC_GROUP_check((group), (ctx))
#define DSA_generate_parameters_ex(dsa, bits, seed, seed_len, counter_ret, h_ret, cb) IAmiSSL->DSA_generate_parameters_ex((dsa), (bits), (seed), (seed_len), (counter_ret), (h_ret), (cb))
#define EC_KEY_new_by_curve_name(nid) IAmiSSL->EC_KEY_new_by_curve_name((nid))
#define EC_KEY_generate_key(key) IAmiSSL->EC_KEY_generate_key((key))
#define EC_KEY_free(key) IAmiSSL->EC_KEY_free((key))
#define ECDSA_SIG_free(a) IAmiSSL->ECDSA_SIG_free((a))
#define ECDSA_do_sign(dgst, dlen, eckey) IAmiSSL->ECDSA_do_sign((dgst), (dlen), (eckey))
#define ECDSA_do_verify(dgst, dgst_len, sig, eckey) IAmiSSL->ECDSA_do_verify((dgst), (dgst_len), (sig), (eckey))
#define EC_KEY_new() IAmiSSL->EC_KEY_new()
#define EC_KEY_set_group(eckey, group) IAmiSSL->EC_KEY_set_group((eckey), (group))
#define EC_KEY_get0_group(key) IAmiSSL->EC_KEY_get0_group((key))
#define EC_KEY_check_key(eckey) IAmiSSL->EC_KEY_check_key((eckey))
#define ECDSA_size(eckey) IAmiSSL->ECDSA_size((eckey))
#define ECDSA_sign(type, dgst, dgstlen, sig, siglen, eckey) IAmiSSL->ECDSA_sign((type), (dgst), (dgstlen), (sig), (siglen), (eckey))
#define ECDSA_verify(type, dgst, dgstlen, sig, siglen, eckey) IAmiSSL->ECDSA_verify((type), (dgst), (dgstlen), (sig), (siglen), (eckey))
#define d2i_ECDSA_SIG(v, pp, len) IAmiSSL->d2i_ECDSA_SIG((v), (pp), (len))
#define i2d_ECDSA_SIG(a, pp) IAmiSSL->i2d_ECDSA_SIG((a), (pp))
#define DH_generate_parameters_ex(ret, prime_len, generator, cb) IAmiSSL->DH_generate_parameters_ex((ret), (prime_len), (generator), (cb))
#define EC_METHOD_get_field_type(meth) IAmiSSL->EC_METHOD_get_field_type((meth))
#define EC_KEY_get0_public_key(eckey) IAmiSSL->EC_KEY_get0_public_key((eckey))
#define ECDH_compute_key(out, outlen, pub_key, eckey, KDF) IAmiSSL->ECDH_compute_key((out), (outlen), (pub_key), (eckey), (KDF))
#define EC_KEY_get0_private_key(eckey) IAmiSSL->EC_KEY_get0_private_key((eckey))
#define ENGINE_get_first() IAmiSSL->ENGINE_get_first()
#define ENGINE_get_id(e) IAmiSSL->ENGINE_get_id((e))
#define ENGINE_get_name(e) IAmiSSL->ENGINE_get_name((e))
#define ENGINE_get_next(e) IAmiSSL->ENGINE_get_next((e))
#define ENGINE_free(e) IAmiSSL->ENGINE_free((e))
#define ENGINE_new() IAmiSSL->ENGINE_new()
#define ENGINE_set_id(e, id) IAmiSSL->ENGINE_set_id((e), (id))
#define ENGINE_set_name(e, name) IAmiSSL->ENGINE_set_name((e), (name))
#define ENGINE_add(e) IAmiSSL->ENGINE_add((e))
#define ENGINE_remove(e) IAmiSSL->ENGINE_remove((e))
#define ENGINE_load_builtin_engines() IAmiSSL->ENGINE_load_builtin_engines()
#define ENGINE_register_all_ciphers() IAmiSSL->ENGINE_register_all_ciphers()
#define EVP_CIPHER_get_nid(cipher) IAmiSSL->EVP_CIPHER_get_nid((cipher))
#define EVP_MD_get_type(md) IAmiSSL->EVP_MD_get_type((md))
#define ENGINE_register_all_digests() IAmiSSL->ENGINE_register_all_digests()
#define BIO_test_flags(b, flags) IAmiSSL->BIO_test_flags((b), (flags))
#define SSL_COMP_get_compression_methods() IAmiSSL->SSL_COMP_get_compression_methods()
#define RSA_generate_key_ex(rsa, bits, e, cb) IAmiSSL->RSA_generate_key_ex((rsa), (bits), (e), (cb))
#define X509_VERIFY_PARAM_free(param) IAmiSSL->X509_VERIFY_PARAM_free((param))
#define X509_STORE_set1_param(xs, pm) IAmiSSL->X509_STORE_set1_param((xs), (pm))
#define ASN1_generate_nconf(str, nconf) IAmiSSL->ASN1_generate_nconf((str), (nconf))
#define PEM_read_bio_ECPKParameters(bp, x, cb, u) IAmiSSL->PEM_read_bio_ECPKParameters((bp), (x), (cb), (u))
#define EC_KEY_dup(ec_key) IAmiSSL->EC_KEY_dup((ec_key))
#define BIO_set_callback(b, callback) IAmiSSL->BIO_set_callback((b), (callback))
#define BIO_set_callback_arg(b, arg) IAmiSSL->BIO_set_callback_arg((b), (arg))
#define EVP_MD_CTX_set_flags(ctx, flags) IAmiSSL->EVP_MD_CTX_set_flags((ctx), (flags))
#define BIO_set_flags(b, flags) IAmiSSL->BIO_set_flags((b), (flags))
#define EVP_CIPHER_CTX_set_flags(ctx, flags) IAmiSSL->EVP_CIPHER_CTX_set_flags((ctx), (flags))
#define EVP_CIPHER_get_iv_length(cipher) IAmiSSL->EVP_CIPHER_get_iv_length((cipher))
#define X509_REQ_check_private_key(req, pkey) IAmiSSL->X509_REQ_check_private_key((req), (pkey))
#define PEM_read_bio_EC_PUBKEY(bp, x, cb, u) IAmiSSL->PEM_read_bio_EC_PUBKEY((bp), (x), (cb), (u))
#define PEM_read_bio_ECPrivateKey(bp, x, cb, u) IAmiSSL->PEM_read_bio_ECPrivateKey((bp), (x), (cb), (u))
#define PEM_write_bio_EC_PUBKEY(bp, x) IAmiSSL->PEM_write_bio_EC_PUBKEY((bp), (x))
#define d2i_EC_PUBKEY_bio(bp, eckey) IAmiSSL->d2i_EC_PUBKEY_bio((bp), (eckey))
#define EC_KEY_set_asn1_flag(key, flag) IAmiSSL->EC_KEY_set_asn1_flag((key), (flag))
#define EC_KEY_set_conv_form(key, cform) IAmiSSL->EC_KEY_set_conv_form((key), (cform))
#define EC_KEY_print(bp, x, off) IAmiSSL->EC_KEY_print((bp), (x), (off))
#define d2i_ECPrivateKey_bio(bp, eckey) IAmiSSL->d2i_ECPrivateKey_bio((bp), (eckey))
#define i2d_EC_PUBKEY_bio(bp, eckey) IAmiSSL->i2d_EC_PUBKEY_bio((bp), (eckey))
#define PEM_write_bio_ECPrivateKey(bp, x, enc, kstr, klen, cb, u) IAmiSSL->PEM_write_bio_ECPrivateKey((bp), (x), (enc), (kstr), (klen), (cb), (u))
#define PEM_write_bio_ECPKParameters(bp, x) IAmiSSL->PEM_write_bio_ECPKParameters((bp), (x))
#define i2d_ECPrivateKey_bio(bp, eckey) IAmiSSL->i2d_ECPrivateKey_bio((bp), (eckey))
#define i2d_ECPKParameters(a, out) IAmiSSL->i2d_ECPKParameters((a), (out))
#define EC_GROUP_set_asn1_flag(group, flag) IAmiSSL->EC_GROUP_set_asn1_flag((group), (flag))
#define EC_GROUP_set_point_conversion_form(group, form) IAmiSSL->EC_GROUP_set_point_conversion_form((group), (form))
#define EC_GROUP_get_point_conversion_form(group) IAmiSSL->EC_GROUP_get_point_conversion_form((group))
#define ECPKParameters_print(bp, x, off) IAmiSSL->ECPKParameters_print((bp), (x), (off))
#define EC_GROUP_set_seed(group, p, len) IAmiSSL->EC_GROUP_set_seed((group), (p), (len))
#define d2i_ECPKParameters(a, in, len) IAmiSSL->d2i_ECPKParameters((a), (in), (len))
#define EC_POINT_point2bn(group, point, form, ret, ctx) IAmiSSL->EC_POINT_point2bn((group), (point), (form), (ret), (ctx))
#define X509_get1_ocsp(x) IAmiSSL->X509_get1_ocsp((x))
#define SSL_get_servername(s, type) IAmiSSL->SSL_get_servername((s), (type))
#define SSL_set_SSL_CTX(ssl, ctx) IAmiSSL->SSL_set_SSL_CTX((ssl), (ctx))
#define SSL_CTX_set_cookie_generate_cb(ctx, app_gen_cookie_cb) IAmiSSL->SSL_CTX_set_cookie_generate_cb((ctx), (app_gen_cookie_cb))
#define SSL_CTX_set_cookie_verify_cb(ctx, app_verify_cookie_cb) IAmiSSL->SSL_CTX_set_cookie_verify_cb((ctx), (app_verify_cookie_cb))
#define SSL_CTX_set_info_callback(ctx, cb) IAmiSSL->SSL_CTX_set_info_callback((ctx), (cb))
#define BIO_new_dgram(fd, close_flag) IAmiSSL->BIO_new_dgram((fd), (close_flag))
#define SSL_get_servername_type(s) IAmiSSL->SSL_get_servername_type((s))
#define SSL_get_current_compression(s) IAmiSSL->SSL_get_current_compression((s))
#define SSL_get_current_expansion(s) IAmiSSL->SSL_get_current_expansion((s))
#define SSL_COMP_get_name(comp) IAmiSSL->SSL_COMP_get_name((comp))
#define ENGINE_by_id(id) IAmiSSL->ENGINE_by_id((id))
#define SSL_CTX_set_client_cert_engine(ctx, e) IAmiSSL->SSL_CTX_set_client_cert_engine((ctx), (e))
#define SHA256(d, n, md) IAmiSSL->SHA256((d), (n), (md))
#define SHA512(d, n, md) IAmiSSL->SHA512((d), (n), (md))
#define AES_ige_encrypt(in, out, length, key, ivec, enc) IAmiSSL->AES_ige_encrypt((in), (out), (length), (key), (ivec), (enc))
#define EC_KEY_precompute_mult(key, ctx) IAmiSSL->EC_KEY_precompute_mult((key), (ctx))
#define ENGINE_load_private_key(e, key_id, ui_method, callback_data) IAmiSSL->ENGINE_load_private_key((e), (key_id), (ui_method), (callback_data))
#define ENGINE_load_public_key(e, key_id, ui_method, callback_data) IAmiSSL->ENGINE_load_public_key((e), (key_id), (ui_method), (callback_data))
#define ENGINE_ctrl_cmd(e, cmd_name, i, p, f, cmd_optional) IAmiSSL->ENGINE_ctrl_cmd((e), (cmd_name), (i), (p), (f), (cmd_optional))
#define ENGINE_set_default(e, flags) IAmiSSL->ENGINE_set_default((e), (flags))
#define ENGINE_ctrl(e, cmd, i, p, f) IAmiSSL->ENGINE_ctrl((e), (cmd), (i), (p), (f))
#define ENGINE_register_all_complete() IAmiSSL->ENGINE_register_all_complete()
#define ENGINE_ctrl_cmd_string(e, cmd_name, arg, cmd_optional) IAmiSSL->ENGINE_ctrl_cmd_string((e), (cmd_name), (arg), (cmd_optional))
#define X509_VERIFY_PARAM_add0_policy(param, policy) IAmiSSL->X509_VERIFY_PARAM_add0_policy((param), (policy))
#define X509_VERIFY_PARAM_set_purpose(param, purpose) IAmiSSL->X509_VERIFY_PARAM_set_purpose((param), (purpose))
#define X509_VERIFY_PARAM_set_flags(param, flags) IAmiSSL->X509_VERIFY_PARAM_set_flags((param), (flags))
#define X509_VERIFY_PARAM_new() IAmiSSL->X509_VERIFY_PARAM_new()
#define X509_POLICY_NODE_print(out, node, indent) IAmiSSL->X509_POLICY_NODE_print((out), (node), (indent))
#define X509_STORE_CTX_get0_policy_tree(ctx) IAmiSSL->X509_STORE_CTX_get0_policy_tree((ctx))
#define X509_STORE_CTX_get_explicit_policy(ctx) IAmiSSL->X509_STORE_CTX_get_explicit_policy((ctx))
#define X509_policy_tree_get0_policies(tree) IAmiSSL->X509_policy_tree_get0_policies((tree))
#define X509_policy_tree_get0_user_policies(tree) IAmiSSL->X509_policy_tree_get0_user_policies((tree))
#define BIO_get_callback_arg(b) IAmiSSL->BIO_get_callback_arg((b))
#define EVP_PKEY_add1_attr_by_NID(key, nid, type, bytes, len) IAmiSSL->EVP_PKEY_add1_attr_by_NID((key), (nid), (type), (bytes), (len))
#define ENGINE_get_RSA(e) IAmiSSL->ENGINE_get_RSA((e))
#define ENGINE_get_DSA(e) IAmiSSL->ENGINE_get_DSA((e))
#define ENGINE_get_DH(e) IAmiSSL->ENGINE_get_DH((e))
#define ENGINE_get_RAND(e) IAmiSSL->ENGINE_get_RAND((e))
#define ENGINE_get_ciphers(e) IAmiSSL->ENGINE_get_ciphers((e))
#define ENGINE_get_digests(e) IAmiSSL->ENGINE_get_digests((e))
#define ENGINE_init(e) IAmiSSL->ENGINE_init((e))
#define ENGINE_finish(e) IAmiSSL->ENGINE_finish((e))
#define OCSP_sendreq_new(io, path, req, maxline) IAmiSSL->OCSP_sendreq_new((io), (path), (req), (maxline))
#define OBSOLETE_OCSP_sendreq_nbio(presp, rctx) IAmiSSL->OBSOLETE_OCSP_sendreq_nbio((presp), (rctx))
#define OSSL_HTTP_REQ_CTX_free(rctx) IAmiSSL->OSSL_HTTP_REQ_CTX_free((rctx))
#define SSL_CTX_use_psk_identity_hint(ctx, identity_hint) IAmiSSL->SSL_CTX_use_psk_identity_hint((ctx), (identity_hint))
#define SSL_CTX_set_psk_client_callback(ctx, cb) IAmiSSL->SSL_CTX_set_psk_client_callback((ctx), (cb))
#define SSL_get_psk_identity_hint(s) IAmiSSL->SSL_get_psk_identity_hint((s))
#define SSL_set_psk_server_callback(ssl, cb) IAmiSSL->SSL_set_psk_server_callback((ssl), (cb))
#define SSL_use_psk_identity_hint(s, identity_hint) IAmiSSL->SSL_use_psk_identity_hint((s), (identity_hint))
#define SSL_set_psk_client_callback(ssl, cb) IAmiSSL->SSL_set_psk_client_callback((ssl), (cb))
#define SSL_CTX_set_psk_server_callback(ctx, cb) IAmiSSL->SSL_CTX_set_psk_server_callback((ctx), (cb))
#define SSL_get_psk_identity(s) IAmiSSL->SSL_get_psk_identity((s))
#define SSL_set_session_ticket_ext(s, ext_data, ext_len) IAmiSSL->SSL_set_session_ticket_ext((s), (ext_data), (ext_len))
#define SSL_set_session_secret_cb(s, tls_session_secret_cb, arg) IAmiSSL->SSL_set_session_secret_cb((s), (tls_session_secret_cb), (arg))
#define SSL_set_session_ticket_ext_cb(s, cb, arg) IAmiSSL->SSL_set_session_ticket_ext_cb((s), (cb), (arg))
#define SSL_set1_param(ssl, vpm) IAmiSSL->SSL_set1_param((ssl), (vpm))
#define SSL_CTX_set1_param(ctx, vpm) IAmiSSL->SSL_CTX_set1_param((ctx), (vpm))
#define SSL_renegotiate_abbreviated(s) IAmiSSL->SSL_renegotiate_abbreviated((s))
#define SSL_CTX_set_srp_client_pwd_callback(ctx, cb) IAmiSSL->SSL_CTX_set_srp_client_pwd_callback((ctx), (cb))
#define SSL_get_srp_g(s) IAmiSSL->SSL_get_srp_g((s))
#define SSL_CTX_set_srp_username_callback(ctx, cb) IAmiSSL->SSL_CTX_set_srp_username_callback((ctx), (cb))
#define SSL_get_srp_userinfo(s) IAmiSSL->SSL_get_srp_userinfo((s))
#define SSL_set_srp_server_param(s, N, g, sa, v, info) IAmiSSL->SSL_set_srp_server_param((s), (N), (g), (sa), (v), (info))
#define SSL_set_srp_server_param_pw(s, user, pass, grp) IAmiSSL->SSL_set_srp_server_param_pw((s), (user), (pass), (grp))
#define SSL_get_srp_N(s) IAmiSSL->SSL_get_srp_N((s))
#define SSL_get_srp_username(s) IAmiSSL->SSL_get_srp_username((s))
#define SSL_CTX_set_srp_password(ctx, password) IAmiSSL->SSL_CTX_set_srp_password((ctx), (password))
#define SSL_CTX_set_srp_strength(ctx, strength) IAmiSSL->SSL_CTX_set_srp_strength((ctx), (strength))
#define SSL_CTX_set_srp_verify_param_callback(ctx, cb) IAmiSSL->SSL_CTX_set_srp_verify_param_callback((ctx), (cb))
#define SSL_CTX_set_srp_cb_arg(ctx, arg) IAmiSSL->SSL_CTX_set_srp_cb_arg((ctx), (arg))
#define SSL_CTX_set_srp_username(ctx, name) IAmiSSL->SSL_CTX_set_srp_username((ctx), (name))
#define SSL_CTX_SRP_CTX_init(ctx) IAmiSSL->SSL_CTX_SRP_CTX_init((ctx))
#define SRP_Calc_A_param(s) IAmiSSL->SRP_Calc_A_param((s))
#define SSL_CTX_SRP_CTX_free(ctx) IAmiSSL->SSL_CTX_SRP_CTX_free((ctx))
#define SSL_srp_server_param_with_username(s, ad) IAmiSSL->SSL_srp_server_param_with_username((s), (ad))
#define SSL_SRP_CTX_free(ctx) IAmiSSL->SSL_SRP_CTX_free((ctx))
#define SSL_set_debug(s, debug) IAmiSSL->SSL_set_debug((s), (debug))
#define SSL_SESSION_get0_peer(s) IAmiSSL->SSL_SESSION_get0_peer((s))
#define SSL_SESSION_set1_id_context(s, sid_ctx, sid_ctx_len) IAmiSSL->SSL_SESSION_set1_id_context((s), (sid_ctx), (sid_ctx_len))
#define OBSOLETE_SSL_cache_hit(s) IAmiSSL->OBSOLETE_SSL_cache_hit((s))
#define SSL_CIPHER_get_id(c) IAmiSSL->SSL_CIPHER_get_id((c))
#define SSL_export_keying_material(s, out, olen, label, llen, context, contextlen, use_context) IAmiSSL->SSL_export_keying_material((s), (out), (olen), (label), (llen), (context), (contextlen), (use_context))
#define SSL_set_tlsext_use_srtp(ssl, profiles) IAmiSSL->SSL_set_tlsext_use_srtp((ssl), (profiles))
#define SSL_CTX_set_next_protos_advertised_cb(s, cb, arg) IAmiSSL->SSL_CTX_set_next_protos_advertised_cb((s), (cb), (arg))
#define SSL_get0_next_proto_negotiated(s, data, len) IAmiSSL->SSL_get0_next_proto_negotiated((s), (data), (len))
#define SSL_get_selected_srtp_profile(s) IAmiSSL->SSL_get_selected_srtp_profile((s))
#define SSL_CTX_set_tlsext_use_srtp(ctx, profiles) IAmiSSL->SSL_CTX_set_tlsext_use_srtp((ctx), (profiles))
#define SSL_select_next_proto(out, outlen, in, inlen, client, client_len) IAmiSSL->SSL_select_next_proto((out), (outlen), (in), (inlen), (client), (client_len))
#define SSL_get_srtp_profiles(s) IAmiSSL->SSL_get_srtp_profiles((s))
#define SSL_CTX_set_next_proto_select_cb(s, cb, arg) IAmiSSL->SSL_CTX_set_next_proto_select_cb((s), (cb), (arg))
#define SSL_SESSION_get_compress_id(s) IAmiSSL->SSL_SESSION_get_compress_id((s))
#define SSL_SRP_CTX_init(s) IAmiSSL->SSL_SRP_CTX_init((s))
#define ERR_load_ENGINE_strings() IAmiSSL->ERR_load_ENGINE_strings()
#define ENGINE_set_DSA(e, dsa_meth) IAmiSSL->ENGINE_set_DSA((e), (dsa_meth))
#define ENGINE_get_finish_function(e) IAmiSSL->ENGINE_get_finish_function((e))
#define ENGINE_get_default_RSA() IAmiSSL->ENGINE_get_default_RSA()
#define ENGINE_set_DH(e, dh_meth) IAmiSSL->ENGINE_set_DH((e), (dh_meth))
#define ENGINE_get_init_function(e) IAmiSSL->ENGINE_get_init_function((e))
#define ENGINE_set_init_function(e, init_f) IAmiSSL->ENGINE_set_init_function((e), (init_f))
#define ENGINE_set_default_DSA(e) IAmiSSL->ENGINE_set_default_DSA((e))
#define ENGINE_get_last() IAmiSSL->ENGINE_get_last()
#define ENGINE_get_prev(e) IAmiSSL->ENGINE_get_prev((e))
#define ENGINE_get_default_DH() IAmiSSL->ENGINE_get_default_DH()
#define ENGINE_set_finish_function(e, finish_f) IAmiSSL->ENGINE_set_finish_function((e), (finish_f))
#define ENGINE_set_RSA(e, rsa_meth) IAmiSSL->ENGINE_set_RSA((e), (rsa_meth))
#define ENGINE_set_default_RAND(e) IAmiSSL->ENGINE_set_default_RAND((e))
#define ENGINE_get_default_DSA() IAmiSSL->ENGINE_get_default_DSA()
#define ENGINE_set_default_RSA(e) IAmiSSL->ENGINE_set_default_RSA((e))
#define ENGINE_get_default_RAND() IAmiSSL->ENGINE_get_default_RAND()
#define ENGINE_set_RAND(e, rand_meth) IAmiSSL->ENGINE_set_RAND((e), (rand_meth))
#define ENGINE_set_default_DH(e) IAmiSSL->ENGINE_set_default_DH((e))
#define ENGINE_get_ctrl_function(e) IAmiSSL->ENGINE_get_ctrl_function((e))
#define ENGINE_set_ctrl_function(e, ctrl_f) IAmiSSL->ENGINE_set_ctrl_function((e), (ctrl_f))
#define ENGINE_unregister_ciphers(e) IAmiSSL->ENGINE_unregister_ciphers((e))
#define ENGINE_unregister_RSA(e) IAmiSSL->ENGINE_unregister_RSA((e))
#define ENGINE_register_all_RAND() IAmiSSL->ENGINE_register_all_RAND()
#define OBSOLETE_ENGINE_load_dynamic() IAmiSSL->OBSOLETE_ENGINE_load_dynamic()
#define ENGINE_get_digest_engine(nid) IAmiSSL->ENGINE_get_digest_engine((nid))
#define ENGINE_register_DH(e) IAmiSSL->ENGINE_register_DH((e))
#define ENGINE_register_RAND(e) IAmiSSL->ENGINE_register_RAND((e))
#define OBSOLETE_ENGINE_load_cryptodev() IAmiSSL->OBSOLETE_ENGINE_load_cryptodev()
#define ENGINE_register_ciphers(e) IAmiSSL->ENGINE_register_ciphers((e))
#define OBSOLETE_ENGINE_load_openssl() IAmiSSL->OBSOLETE_ENGINE_load_openssl()
#define ENGINE_get_cmd_defns(e) IAmiSSL->ENGINE_get_cmd_defns((e))
#define ENGINE_set_load_privkey_function(e, loadpriv_f) IAmiSSL->ENGINE_set_load_privkey_function((e), (loadpriv_f))
#define ENGINE_set_default_digests(e) IAmiSSL->ENGINE_set_default_digests((e))
#define ENGINE_register_RSA(e) IAmiSSL->ENGINE_register_RSA((e))
#define ENGINE_unregister_DSA(e) IAmiSSL->ENGINE_unregister_DSA((e))
#define ENGINE_set_ciphers(e, f) IAmiSSL->ENGINE_set_ciphers((e), (f))
#define RAND_set_rand_engine(engine) IAmiSSL->RAND_set_rand_engine((engine))
#define ENGINE_get_digest(e, nid) IAmiSSL->ENGINE_get_digest((e), (nid))
#define ENGINE_get_cipher(e, nid) IAmiSSL->ENGINE_get_cipher((e), (nid))
#define ENGINE_cmd_is_executable(e, cmd) IAmiSSL->ENGINE_cmd_is_executable((e), (cmd))
#define ENGINE_register_DSA(e) IAmiSSL->ENGINE_register_DSA((e))
#define ENGINE_set_load_pubkey_function(e, loadpub_f) IAmiSSL->ENGINE_set_load_pubkey_function((e), (loadpub_f))
#define ENGINE_get_load_pubkey_function(e) IAmiSSL->ENGINE_get_load_pubkey_function((e))
#define ENGINE_register_all_RSA() IAmiSSL->ENGINE_register_all_RSA()
#define ENGINE_unregister_digests(e) IAmiSSL->ENGINE_unregister_digests((e))
#define OBSOLETE_ENGINE_get_ex_new_index(argl, argp, new_func, dep_func, free_func) IAmiSSL->OBSOLETE_ENGINE_get_ex_new_index((argl), (argp), (new_func), (dep_func), (free_func))
#define ENGINE_get_ex_data(e, idx) IAmiSSL->ENGINE_get_ex_data((e), (idx))
#define ENGINE_set_cmd_defns(e, defns) IAmiSSL->ENGINE_set_cmd_defns((e), (defns))
#define ENGINE_register_digests(e) IAmiSSL->ENGINE_register_digests((e))
#define ENGINE_register_all_DH() IAmiSSL->ENGINE_register_all_DH()
#define ENGINE_get_flags(e) IAmiSSL->ENGINE_get_flags((e))
#define ENGINE_unregister_DH(e) IAmiSSL->ENGINE_unregister_DH((e))
#define ENGINE_register_all_DSA() IAmiSSL->ENGINE_register_all_DSA()
#define ENGINE_set_digests(e, f) IAmiSSL->ENGINE_set_digests((e), (f))
#define ENGINE_register_complete(e) IAmiSSL->ENGINE_register_complete((e))
#define ENGINE_set_ex_data(e, idx, arg) IAmiSSL->ENGINE_set_ex_data((e), (idx), (arg))
#define ENGINE_set_destroy_function(e, destroy_f) IAmiSSL->ENGINE_set_destroy_function((e), (destroy_f))
#define ENGINE_get_cipher_engine(nid) IAmiSSL->ENGINE_get_cipher_engine((nid))
#define ENGINE_set_default_ciphers(e) IAmiSSL->ENGINE_set_default_ciphers((e))
#define ENGINE_unregister_RAND(e) IAmiSSL->ENGINE_unregister_RAND((e))
#define ENGINE_set_table_flags(flags) IAmiSSL->ENGINE_set_table_flags((flags))
#define ENGINE_get_destroy_function(e) IAmiSSL->ENGINE_get_destroy_function((e))
#define ENGINE_get_table_flags() IAmiSSL->ENGINE_get_table_flags()
#define ENGINE_set_flags(e, flags) IAmiSSL->ENGINE_set_flags((e), (flags))
#define ENGINE_get_load_privkey_function(e) IAmiSSL->ENGINE_get_load_privkey_function((e))
#define ENGINE_set_default_string(e, def_list) IAmiSSL->ENGINE_set_default_string((e), (def_list))
#define ENGINE_add_conf_module() IAmiSSL->ENGINE_add_conf_module()
#define ENGINE_up_ref(e) IAmiSSL->ENGINE_up_ref((e))
#define EC_GROUP_get_trinomial_basis(eg, k) IAmiSSL->EC_GROUP_get_trinomial_basis((eg), (k))
#define SHA512_Update(c, data, len) IAmiSSL->SHA512_Update((c), (data), (len))
#define i2d_ECPrivateKey(key, out) IAmiSSL->i2d_ECPrivateKey((key), (out))
#define BN_GF2m_mod_exp_arr(r, a, b, p, ctx) IAmiSSL->BN_GF2m_mod_exp_arr((r), (a), (b), (p), (ctx))
#define BN_GF2m_mod_mul_arr(r, a, b, p, ctx) IAmiSSL->BN_GF2m_mod_mul_arr((r), (a), (b), (p), (ctx))
#define o2i_ECPublicKey(key, in, len) IAmiSSL->o2i_ECPublicKey((key), (in), (len))
#define EC_KEY_copy(dst, src) IAmiSSL->EC_KEY_copy((dst), (src))
#define EC_GROUP_check_discriminant(group, ctx) IAmiSSL->EC_GROUP_check_discriminant((group), (ctx))
#define i2o_ECPublicKey(key, out) IAmiSSL->i2o_ECPublicKey((key), (out))
#define EC_GROUP_new_curve_GF2m(p, a, b, ctx) IAmiSSL->EC_GROUP_new_curve_GF2m((p), (a), (b), (ctx))
#define EVP_PKEY_get1_EC_KEY(pkey) IAmiSSL->EVP_PKEY_get1_EC_KEY((pkey))
#define EC_KEY_get_conv_form(key) IAmiSSL->EC_KEY_get_conv_form((key))
#define ENGINE_get_static_state() IAmiSSL->ENGINE_get_static_state()
#define ECDSA_SIG_new() IAmiSSL->ECDSA_SIG_new()
#define EC_POINT_bn2point(g, b, p, ctx) IAmiSSL->EC_POINT_bn2point((g), (b), (p), (ctx))
#define ECDSA_sign_ex(type, dgst, dgstlen, sig, siglen, kinv, rp, eckey) IAmiSSL->ECDSA_sign_ex((type), (dgst), (dgstlen), (sig), (siglen), (kinv), (rp), (eckey))
#define EC_GROUP_get_pentanomial_basis(ecgroup, k1, k2, k3) IAmiSSL->EC_GROUP_get_pentanomial_basis((ecgroup), (k1), (k2), (k3))
#define ECDSA_sign_setup(eckey, ctx, kinv, rp) IAmiSSL->ECDSA_sign_setup((eckey), (ctx), (kinv), (rp))
#define BN_GF2m_mod_solve_quad_arr(r, a, p, ctx) IAmiSSL->BN_GF2m_mod_solve_quad_arr((r), (a), (p), (ctx))
#define EC_KEY_up_ref(key) IAmiSSL->EC_KEY_up_ref((key))
#define d2i_EC_PUBKEY(a, pp, length) IAmiSSL->d2i_EC_PUBKEY((a), (pp), (length))
#define EC_GROUP_have_precompute_mult(group) IAmiSSL->EC_GROUP_have_precompute_mult((group))
#define BN_GF2m_mod_arr(r, a, p) IAmiSSL->BN_GF2m_mod_arr((r), (a), (p))
#define EC_POINT_dup(src, group) IAmiSSL->EC_POINT_dup((src), (group))
#define EVP_PKEY_set1_EC_KEY(pkey, key) IAmiSSL->EVP_PKEY_set1_EC_KEY((pkey), (key))
#define BN_GF2m_mod_sqrt_arr(r, a, p, ctx) IAmiSSL->BN_GF2m_mod_sqrt_arr((r), (a), (p), (ctx))
#define EC_KEY_set_private_key(key, prv) IAmiSSL->EC_KEY_set_private_key((key), (prv))
#define BN_GF2m_poly2arr(a, p, max) IAmiSSL->BN_GF2m_poly2arr((a), (p), (max))
#define i2d_ECParameters(key, out) IAmiSSL->i2d_ECParameters((key), (out))
#define SHA256_Init(c) IAmiSSL->SHA256_Init((c))
#define SHA224(d, n, md) IAmiSSL->SHA224((d), (n), (md))
#define EC_GROUP_get_seed_len(ecgroup) IAmiSSL->EC_GROUP_get_seed_len((ecgroup))
#define i2d_EC_PUBKEY(a, pp) IAmiSSL->i2d_EC_PUBKEY((a), (pp))
#define EC_GFp_nist_method() IAmiSSL->EC_GFp_nist_method()
#define OBSOLETE_ENGINE_load_padlock() IAmiSSL->OBSOLETE_ENGINE_load_padlock()
#define EC_GROUP_set_curve_name(group, nid) IAmiSSL->EC_GROUP_set_curve_name((group), (nid))
#define BN_GF2m_mod_sqr_arr(r, a, p, ctx) IAmiSSL->BN_GF2m_mod_sqr_arr((r), (a), (p), (ctx))
#define BIO_s_datagram() IAmiSSL->BIO_s_datagram()
#define SHA384_Update(c, data, len) IAmiSSL->SHA384_Update((c), (data), (len))
#define SHA224_Final(md, c) IAmiSSL->SHA224_Final((md), (c))
#define SHA224_Update(c, data, len) IAmiSSL->SHA224_Update((c), (data), (len))
#define d2i_ECPrivateKey(key, in, len) IAmiSSL->d2i_ECPrivateKey((key), (in), (len))
#define SHA512_Final(md, c) IAmiSSL->SHA512_Final((md), (c))
#define EC_GROUP_get_asn1_flag(group) IAmiSSL->EC_GROUP_get_asn1_flag((group))
#define EC_GROUP_get0_seed(x) IAmiSSL->EC_GROUP_get0_seed((x))
#define BN_GF2m_mod_div_arr(r, a, b, p, ctx) IAmiSSL->BN_GF2m_mod_div_arr((r), (a), (b), (p), (ctx))
#define EC_KEY_get_enc_flags(key) IAmiSSL->EC_KEY_get_enc_flags((key))
#define EC_POINT_set_compressed_coordinates_GF2m(group, p, x, y_bit, ctx) IAmiSSL->EC_POINT_set_compressed_coordinates_GF2m((group), (p), (x), (y_bit), (ctx))
#define EC_GROUP_cmp(a, b, ctx) IAmiSSL->EC_GROUP_cmp((a), (b), (ctx))
#define SHA224_Init(c) IAmiSSL->SHA224_Init((c))
#define SHA512_Init(c) IAmiSSL->SHA512_Init((c))
#define EC_GROUP_get_basis_type(group) IAmiSSL->EC_GROUP_get_basis_type((group))
#define EC_GROUP_dup(src) IAmiSSL->EC_GROUP_dup((src))
#define SHA256_Transform(c, data) IAmiSSL->SHA256_Transform((c), (data))
#define EC_KEY_set_enc_flags(eckey, flags) IAmiSSL->EC_KEY_set_enc_flags((eckey), (flags))
#define EC_POINT_point2hex(group, point, form, ctx) IAmiSSL->EC_POINT_point2hex((group), (point), (form), (ctx))
#define ECDSA_do_sign_ex(dgst, dgstlen, kinv, rp, eckey) IAmiSSL->ECDSA_do_sign_ex((dgst), (dgstlen), (kinv), (rp), (eckey))
#define SHA512_Transform(c, data) IAmiSSL->SHA512_Transform((c), (data))
#define EC_KEY_set_public_key(key, pub) IAmiSSL->EC_KEY_set_public_key((key), (pub))
#define EC_GROUP_get_curve_name(group) IAmiSSL->EC_GROUP_get_curve_name((group))
#define SHA256_Final(md, c) IAmiSSL->SHA256_Final((md), (c))
#define d2i_ECParameters(key, in, len) IAmiSSL->d2i_ECParameters((key), (in), (len))
#define SHA384_Init(c) IAmiSSL->SHA384_Init((c))
#define SHA384_Final(md, c) IAmiSSL->SHA384_Final((md), (c))
#define SHA384(d, n, md) IAmiSSL->SHA384((d), (n), (md))
#define EC_POINT_hex2point(group, c, p, ctx) IAmiSSL->EC_POINT_hex2point((group), (c), (p), (ctx))
#define SHA256_Update(c, data, len) IAmiSSL->SHA256_Update((c), (data), (len))
#define BN_GF2m_mod_inv_arr(r, b, p, ctx) IAmiSSL->BN_GF2m_mod_inv_arr((r), (b), (p), (ctx))
#define DH_check_pub_key(dh, pub_key, codes) IAmiSSL->DH_check_pub_key((dh), (pub_key), (codes))
#define Camellia_cbc_encrypt(in, out, length, key, ivec, enc) IAmiSSL->Camellia_cbc_encrypt((in), (out), (length), (key), (ivec), (enc))
#define Camellia_cfb128_encrypt(in, out, length, key, ivec, num, enc) IAmiSSL->Camellia_cfb128_encrypt((in), (out), (length), (key), (ivec), (num), (enc))
#define Camellia_cfb1_encrypt(in, out, length, key, ivec, num, enc) IAmiSSL->Camellia_cfb1_encrypt((in), (out), (length), (key), (ivec), (num), (enc))
#define Camellia_cfb8_encrypt(in, out, length, key, ivec, num, enc) IAmiSSL->Camellia_cfb8_encrypt((in), (out), (length), (key), (ivec), (num), (enc))
#define Camellia_ctr128_encrypt(in, out, length, key, ivec, ecount_buf, num) IAmiSSL->Camellia_ctr128_encrypt((in), (out), (length), (key), (ivec), (ecount_buf), (num))
#define Camellia_decrypt(in, out, key) IAmiSSL->Camellia_decrypt((in), (out), (key))
#define Camellia_ecb_encrypt(in, out, key, enc) IAmiSSL->Camellia_ecb_encrypt((in), (out), (key), (enc))
#define Camellia_encrypt(in, out, key) IAmiSSL->Camellia_encrypt((in), (out), (key))
#define Camellia_ofb128_encrypt(in, out, length, key, ivec, num) IAmiSSL->Camellia_ofb128_encrypt((in), (out), (length), (key), (ivec), (num))
#define Camellia_set_key(userKey, bits, key) IAmiSSL->Camellia_set_key((userKey), (bits), (key))
#define EVP_camellia_128_cbc() IAmiSSL->EVP_camellia_128_cbc()
#define EVP_camellia_128_cfb128() IAmiSSL->EVP_camellia_128_cfb128()
#define EVP_camellia_128_cfb1() IAmiSSL->EVP_camellia_128_cfb1()
#define EVP_camellia_128_cfb8() IAmiSSL->EVP_camellia_128_cfb8()
#define EVP_camellia_128_ecb() IAmiSSL->EVP_camellia_128_ecb()
#define EVP_camellia_128_ofb() IAmiSSL->EVP_camellia_128_ofb()
#define EVP_camellia_192_cbc() IAmiSSL->EVP_camellia_192_cbc()
#define EVP_camellia_192_cfb128() IAmiSSL->EVP_camellia_192_cfb128()
#define EVP_camellia_192_cfb1() IAmiSSL->EVP_camellia_192_cfb1()
#define EVP_camellia_192_cfb8() IAmiSSL->EVP_camellia_192_cfb8()
#define EVP_camellia_192_ecb() IAmiSSL->EVP_camellia_192_ecb()
#define EVP_camellia_192_ofb() IAmiSSL->EVP_camellia_192_ofb()
#define EVP_camellia_256_cbc() IAmiSSL->EVP_camellia_256_cbc()
#define EVP_camellia_256_cfb128() IAmiSSL->EVP_camellia_256_cfb128()
#define EVP_camellia_256_cfb1() IAmiSSL->EVP_camellia_256_cfb1()
#define EVP_camellia_256_cfb8() IAmiSSL->EVP_camellia_256_cfb8()
#define EVP_camellia_256_ecb() IAmiSSL->EVP_camellia_256_ecb()
#define EVP_camellia_256_ofb() IAmiSSL->EVP_camellia_256_ofb()
#define AES_bi_ige_encrypt(in, out, length, key, key2, ivec, enc) IAmiSSL->AES_bi_ige_encrypt((in), (out), (length), (key), (key2), (ivec), (enc))
#define SEED_decrypt(s, d, ks) IAmiSSL->SEED_decrypt((s), (d), (ks))
#define SEED_encrypt(s, d, ks) IAmiSSL->SEED_encrypt((s), (d), (ks))
#define SEED_cbc_encrypt(in, out, len, ks, ivec, enc) IAmiSSL->SEED_cbc_encrypt((in), (out), (len), (ks), (ivec), (enc))
#define EVP_seed_ofb() IAmiSSL->EVP_seed_ofb()
#define SEED_cfb128_encrypt(in, out, len, ks, ivec, num, enc) IAmiSSL->SEED_cfb128_encrypt((in), (out), (len), (ks), (ivec), (num), (enc))
#define SEED_ofb128_encrypt(in, out, len, ks, ivec, num) IAmiSSL->SEED_ofb128_encrypt((in), (out), (len), (ks), (ivec), (num))
#define EVP_seed_cbc() IAmiSSL->EVP_seed_cbc()
#define SEED_ecb_encrypt(in, out, ks, enc) IAmiSSL->SEED_ecb_encrypt((in), (out), (ks), (enc))
#define EVP_seed_ecb() IAmiSSL->EVP_seed_ecb()
#define SEED_set_key(rawkey, ks) IAmiSSL->SEED_set_key((rawkey), (ks))
#define EVP_seed_cfb128() IAmiSSL->EVP_seed_cfb128()
#define AES_unwrap_key(key, iv, out, in, inlen) IAmiSSL->AES_unwrap_key((key), (iv), (out), (in), (inlen))
#define AES_wrap_key(key, iv, out, in, inlen) IAmiSSL->AES_wrap_key((key), (iv), (out), (in), (inlen))
#define CMS_ReceiptRequest_free(rr) IAmiSSL->CMS_ReceiptRequest_free((rr))
#define CMS_add0_CertificateChoices(cms) IAmiSSL->CMS_add0_CertificateChoices((cms))
#define CMS_unsigned_add1_attr_by_OBJ(si, obj, type, bytes, len) IAmiSSL->CMS_unsigned_add1_attr_by_OBJ((si), (obj), (type), (bytes), (len))
#define ERR_load_CMS_strings() IAmiSSL->ERR_load_CMS_strings()
#define CMS_sign_receipt(si, signcert, pkey, certs, flags) IAmiSSL->CMS_sign_receipt((si), (signcert), (pkey), (certs), (flags))
#define i2d_CMS_ContentInfo(a, out) IAmiSSL->i2d_CMS_ContentInfo((a), (out))
#define CMS_signed_delete_attr(si, loc) IAmiSSL->CMS_signed_delete_attr((si), (loc))
#define d2i_CMS_bio(bp, cms) IAmiSSL->d2i_CMS_bio((bp), (cms))
#define CMS_unsigned_get_attr_by_NID(si, nid, lastpos) IAmiSSL->CMS_unsigned_get_attr_by_NID((si), (nid), (lastpos))
#define CMS_verify(cms, certs, store, dcont, out, flags) IAmiSSL->CMS_verify((cms), (certs), (store), (dcont), (out), (flags))
#define SMIME_read_CMS(bio, biocont) IAmiSSL->SMIME_read_CMS((bio), (biocont))
#define CMS_decrypt_set1_key(cms, key, keylen, id, idlen) IAmiSSL->CMS_decrypt_set1_key((cms), (key), (keylen), (id), (idlen))
#define CMS_SignerInfo_get0_algs(si, pk, signer, pdig, psig) IAmiSSL->CMS_SignerInfo_get0_algs((si), (pk), (signer), (pdig), (psig))
#define CMS_add1_cert(cms, cert) IAmiSSL->CMS_add1_cert((cms), (cert))
#define CMS_set_detached(cms, detached) IAmiSSL->CMS_set_detached((cms), (detached))
#define CMS_encrypt(certs, in, cipher, flags) IAmiSSL->CMS_encrypt((certs), (in), (cipher), (flags))
#define CMS_EnvelopedData_create(cipher) IAmiSSL->CMS_EnvelopedData_create((cipher))
#define CMS_uncompress(cms, dcont, out, flags) IAmiSSL->CMS_uncompress((cms), (dcont), (out), (flags))
#define CMS_add0_crl(cms, crl) IAmiSSL->CMS_add0_crl((cms), (crl))
#define CMS_SignerInfo_verify_content(si, chain) IAmiSSL->CMS_SignerInfo_verify_content((si), (chain))
#define CMS_unsigned_get0_data_by_OBJ(si, oid, lastpos, type) IAmiSSL->CMS_unsigned_get0_data_by_OBJ((si), (oid), (lastpos), (type))
#define PEM_write_bio_CMS(out, cms) IAmiSSL->PEM_write_bio_CMS((out), (cms))
#define CMS_unsigned_get_attr(si, loc) IAmiSSL->CMS_unsigned_get_attr((si), (loc))
#define CMS_RecipientInfo_ktri_cert_cmp(ri, cert) IAmiSSL->CMS_RecipientInfo_ktri_cert_cmp((ri), (cert))
#define CMS_RecipientInfo_ktri_get0_algs(ri, pk, recip, palg) IAmiSSL->CMS_RecipientInfo_ktri_get0_algs((ri), (pk), (recip), (palg))
#define CMS_ContentInfo_free(cms) IAmiSSL->CMS_ContentInfo_free((cms))
#define CMS_final(cms, data, dcont, flags) IAmiSSL->CMS_final((cms), (data), (dcont), (flags))
#define CMS_add_simple_smimecap(algs, algnid, keysize) IAmiSSL->CMS_add_simple_smimecap((algs), (algnid), (keysize))
#define CMS_SignerInfo_verify(si) IAmiSSL->CMS_SignerInfo_verify((si))
#define CMS_data(cms, out, flags) IAmiSSL->CMS_data((cms), (out), (flags))
#define d2i_CMS_ReceiptRequest(a, in, len) IAmiSSL->d2i_CMS_ReceiptRequest((a), (in), (len))
#define CMS_compress(in, comp_nid, flags) IAmiSSL->CMS_compress((in), (comp_nid), (flags))
#define CMS_digest_create(in, md, flags) IAmiSSL->CMS_digest_create((in), (md), (flags))
#define CMS_SignerInfo_cert_cmp(si, cert) IAmiSSL->CMS_SignerInfo_cert_cmp((si), (cert))
#define CMS_SignerInfo_sign(si) IAmiSSL->CMS_SignerInfo_sign((si))
#define CMS_data_create(in, flags) IAmiSSL->CMS_data_create((in), (flags))
#define i2d_CMS_bio(bp, cms) IAmiSSL->i2d_CMS_bio((bp), (cms))
#define CMS_EncryptedData_set1_key(cms, ciph, key, keylen) IAmiSSL->CMS_EncryptedData_set1_key((cms), (ciph), (key), (keylen))
#define CMS_decrypt(cms, pkey, cert, dcont, out, flags) IAmiSSL->CMS_decrypt((cms), (pkey), (cert), (dcont), (out), (flags))
#define CMS_unsigned_delete_attr(si, loc) IAmiSSL->CMS_unsigned_delete_attr((si), (loc))
#define CMS_unsigned_get_attr_count(si) IAmiSSL->CMS_unsigned_get_attr_count((si))
#define CMS_add_smimecap(si, algs) IAmiSSL->CMS_add_smimecap((si), (algs))
#define CMS_signed_get_attr_by_OBJ(si, obj, lastpos) IAmiSSL->CMS_signed_get_attr_by_OBJ((si), (obj), (lastpos))
#define d2i_CMS_ContentInfo(a, in, len) IAmiSSL->d2i_CMS_ContentInfo((a), (in), (len))
#define CMS_add_standard_smimecap(smcap) IAmiSSL->CMS_add_standard_smimecap((smcap))
#define CMS_ContentInfo_new() IAmiSSL->CMS_ContentInfo_new()
#define CMS_RecipientInfo_type(ri) IAmiSSL->CMS_RecipientInfo_type((ri))
#define CMS_get0_type(cms) IAmiSSL->CMS_get0_type((cms))
#define CMS_is_detached(cms) IAmiSSL->CMS_is_detached((cms))
#define CMS_sign(signcert, pkey, certs, data, flags) IAmiSSL->CMS_sign((signcert), (pkey), (certs), (data), (flags))
#define CMS_signed_add1_attr(si, attr) IAmiSSL->CMS_signed_add1_attr((si), (attr))
#define CMS_unsigned_get_attr_by_OBJ(si, obj, lastpos) IAmiSSL->CMS_unsigned_get_attr_by_OBJ((si), (obj), (lastpos))
#define SMIME_write_CMS(bio, cms, data, flags) IAmiSSL->SMIME_write_CMS((bio), (cms), (data), (flags))
#define CMS_EncryptedData_decrypt(cms, key, keylen, dcont, out, flags) IAmiSSL->CMS_EncryptedData_decrypt((cms), (key), (keylen), (dcont), (out), (flags))
#define CMS_get0_RecipientInfos(cms) IAmiSSL->CMS_get0_RecipientInfos((cms))
#define CMS_add0_RevocationInfoChoice(cms) IAmiSSL->CMS_add0_RevocationInfoChoice((cms))
#define CMS_decrypt_set1_pkey(cms, pk, cert) IAmiSSL->CMS_decrypt_set1_pkey((cms), (pk), (cert))
#define CMS_SignerInfo_set1_signer_cert(si, signer) IAmiSSL->CMS_SignerInfo_set1_signer_cert((si), (signer))
#define CMS_get0_signers(cms) IAmiSSL->CMS_get0_signers((cms))
#define CMS_ReceiptRequest_get0_values(rr, pcid, pallorfirst, plist, prto) IAmiSSL->CMS_ReceiptRequest_get0_values((rr), (pcid), (pallorfirst), (plist), (prto))
#define CMS_signed_get0_data_by_OBJ(si, oid, lastpos, type) IAmiSSL->CMS_signed_get0_data_by_OBJ((si), (oid), (lastpos), (type))
#define CMS_get0_SignerInfos(cms) IAmiSSL->CMS_get0_SignerInfos((cms))
#define CMS_add0_cert(cms, cert) IAmiSSL->CMS_add0_cert((cms), (cert))
#define CMS_EncryptedData_encrypt(in, cipher, key, keylen, flags) IAmiSSL->CMS_EncryptedData_encrypt((in), (cipher), (key), (keylen), (flags))
#define CMS_digest_verify(cms, dcont, out, flags) IAmiSSL->CMS_digest_verify((cms), (dcont), (out), (flags))
#define CMS_set1_signers_certs(cms, certs, flags) IAmiSSL->CMS_set1_signers_certs((cms), (certs), (flags))
#define CMS_signed_get_attr(si, loc) IAmiSSL->CMS_signed_get_attr((si), (loc))
#define CMS_RecipientInfo_set0_key(ri, key, keylen) IAmiSSL->CMS_RecipientInfo_set0_key((ri), (key), (keylen))
#define CMS_SignedData_init(cms) IAmiSSL->CMS_SignedData_init((cms))
#define CMS_RecipientInfo_kekri_get0_id(ri, palg, pid, pdate, potherid, pothertype) IAmiSSL->CMS_RecipientInfo_kekri_get0_id((ri), (palg), (pid), (pdate), (potherid), (pothertype))
#define CMS_verify_receipt(rcms, ocms, certs, store, flags) IAmiSSL->CMS_verify_receipt((rcms), (ocms), (certs), (store), (flags))
#define PEM_read_bio_CMS(bp, x, cb, u) IAmiSSL->PEM_read_bio_CMS((bp), (x), (cb), (u))
#define CMS_get1_crls(cms) IAmiSSL->CMS_get1_crls((cms))
#define CMS_add0_recipient_key(cms, nid, key, keylen, id, idlen, date, otherTypeId, otherType) IAmiSSL->CMS_add0_recipient_key((cms), (nid), (key), (keylen), (id), (idlen), (date), (otherTypeId), (otherType))
#define CMS_ReceiptRequest_new() IAmiSSL->CMS_ReceiptRequest_new()
#define CMS_get0_content(cms) IAmiSSL->CMS_get0_content((cms))
#define CMS_get1_ReceiptRequest(si, prr) IAmiSSL->CMS_get1_ReceiptRequest((si), (prr))
#define CMS_signed_add1_attr_by_OBJ(si, obj, type, bytes, len) IAmiSSL->CMS_signed_add1_attr_by_OBJ((si), (obj), (type), (bytes), (len))
#define CMS_RecipientInfo_kekri_id_cmp(ri, id, idlen) IAmiSSL->CMS_RecipientInfo_kekri_id_cmp((ri), (id), (idlen))
#define CMS_add1_ReceiptRequest(si, rr) IAmiSSL->CMS_add1_ReceiptRequest((si), (rr))
#define CMS_SignerInfo_get0_signer_id(si, keyid, issuer, sno) IAmiSSL->CMS_SignerInfo_get0_signer_id((si), (keyid), (issuer), (sno))
#define CMS_unsigned_add1_attr_by_NID(si, nid, type, bytes, len) IAmiSSL->CMS_unsigned_add1_attr_by_NID((si), (nid), (type), (bytes), (len))
#define CMS_unsigned_add1_attr(si, attr) IAmiSSL->CMS_unsigned_add1_attr((si), (attr))
#define CMS_signed_get_attr_by_NID(si, nid, lastpos) IAmiSSL->CMS_signed_get_attr_by_NID((si), (nid), (lastpos))
#define CMS_get1_certs(cms) IAmiSSL->CMS_get1_certs((cms))
#define CMS_signed_add1_attr_by_NID(si, nid, type, bytes, len) IAmiSSL->CMS_signed_add1_attr_by_NID((si), (nid), (type), (bytes), (len))
#define CMS_unsigned_add1_attr_by_txt(si, attrname, type, bytes, len) IAmiSSL->CMS_unsigned_add1_attr_by_txt((si), (attrname), (type), (bytes), (len))
#define CMS_dataFinal(cms, bio) IAmiSSL->CMS_dataFinal((cms), (bio))
#define CMS_RecipientInfo_ktri_get0_signer_id(ri, keyid, issuer, sno) IAmiSSL->CMS_RecipientInfo_ktri_get0_signer_id((ri), (keyid), (issuer), (sno))
#define i2d_CMS_ReceiptRequest(a, out) IAmiSSL->i2d_CMS_ReceiptRequest((a), (out))
#define CMS_add1_recipient_cert(cms, recip, flags) IAmiSSL->CMS_add1_recipient_cert((cms), (recip), (flags))
#define CMS_dataInit(cms, icont) IAmiSSL->CMS_dataInit((cms), (icont))
#define CMS_signed_add1_attr_by_txt(si, attrname, type, bytes, len) IAmiSSL->CMS_signed_add1_attr_by_txt((si), (attrname), (type), (bytes), (len))
#define CMS_RecipientInfo_decrypt(cms, ri) IAmiSSL->CMS_RecipientInfo_decrypt((cms), (ri))
#define CMS_signed_get_attr_count(si) IAmiSSL->CMS_signed_get_attr_count((si))
#define CMS_get0_eContentType(cms) IAmiSSL->CMS_get0_eContentType((cms))
#define CMS_set1_eContentType(cms, oid) IAmiSSL->CMS_set1_eContentType((cms), (oid))
#define CMS_ReceiptRequest_create0(id, idlen, allorfirst, receiptList, receiptsTo) IAmiSSL->CMS_ReceiptRequest_create0((id), (idlen), (allorfirst), (receiptList), (receiptsTo))
#define CMS_add1_signer(cms, signer, pk, md, flags) IAmiSSL->CMS_add1_signer((cms), (signer), (pk), (md), (flags))
#define CMS_RecipientInfo_set0_pkey(ri, pkey) IAmiSSL->CMS_RecipientInfo_set0_pkey((ri), (pkey))
#define ENGINE_set_load_ssl_client_cert_function(e, loadssl_f) IAmiSSL->ENGINE_set_load_ssl_client_cert_function((e), (loadssl_f))
#define ENGINE_get_ssl_client_cert_function(e) IAmiSSL->ENGINE_get_ssl_client_cert_function((e))
#define ENGINE_load_ssl_client_cert(e, s, ca_dn, pcert, ppkey, pother, ui_method, callback_data) IAmiSSL->ENGINE_load_ssl_client_cert((e), (s), (ca_dn), (pcert), (ppkey), (pother), (ui_method), (callback_data))
#define OBSOLETE_ENGINE_load_capi() IAmiSSL->OBSOLETE_ENGINE_load_capi()
#define ENGINE_register_pkey_meths(e) IAmiSSL->ENGINE_register_pkey_meths((e))
#define ENGINE_get_pkey_asn1_meth_engine(nid) IAmiSSL->ENGINE_get_pkey_asn1_meth_engine((nid))
#define WHIRLPOOL_Init(c) IAmiSSL->WHIRLPOOL_Init((c))
#define WHIRLPOOL(inp, bytes, md) IAmiSSL->WHIRLPOOL((inp), (bytes), (md))
#define ENGINE_get_pkey_asn1_meth(e, nid) IAmiSSL->ENGINE_get_pkey_asn1_meth((e), (nid))
#define ENGINE_get_pkey_meth(e, nid) IAmiSSL->ENGINE_get_pkey_meth((e), (nid))
#define BIO_new_CMS(out, cms) IAmiSSL->BIO_new_CMS((out), (cms))
#define ENGINE_set_default_pkey_asn1_meths(e) IAmiSSL->ENGINE_set_default_pkey_asn1_meths((e))
#define WHIRLPOOL_BitUpdate(ctx, inp, bits) IAmiSSL->WHIRLPOOL_BitUpdate((ctx), (inp), (bits))
#define i2d_CMS_bio_stream(out, cms, in, flags) IAmiSSL->i2d_CMS_bio_stream((out), (cms), (in), (flags))
#define CMS_stream(boundary, cms) IAmiSSL->CMS_stream((boundary), (cms))
#define ENGINE_pkey_asn1_find_str(pe, str, len) IAmiSSL->ENGINE_pkey_asn1_find_str((pe), (str), (len))
#define ENGINE_get_pkey_meths(e) IAmiSSL->ENGINE_get_pkey_meths((e))
#define ENGINE_register_pkey_asn1_meths(e) IAmiSSL->ENGINE_register_pkey_asn1_meths((e))
#define ENGINE_set_default_pkey_meths(e) IAmiSSL->ENGINE_set_default_pkey_meths((e))
#define HMAC_CTX_copy(dctx, sctx) IAmiSSL->HMAC_CTX_copy((dctx), (sctx))
#define ENGINE_get_pkey_asn1_meths(e) IAmiSSL->ENGINE_get_pkey_asn1_meths((e))
#define EVP_whirlpool() IAmiSSL->EVP_whirlpool()
#define ENGINE_register_all_pkey_meths() IAmiSSL->ENGINE_register_all_pkey_meths()
#define WHIRLPOOL_Final(md, c) IAmiSSL->WHIRLPOOL_Final((md), (c))
#define ENGINE_get_pkey_asn1_meth_str(e, str, len) IAmiSSL->ENGINE_get_pkey_asn1_meth_str((e), (str), (len))
#define ENGINE_register_all_pkey_asn1_meths() IAmiSSL->ENGINE_register_all_pkey_asn1_meths()
#define CMS_ContentInfo_print_ctx(out, x, indent, pctx) IAmiSSL->CMS_ContentInfo_print_ctx((out), (x), (indent), (pctx))
#define CMS_add1_crl(cms, crl) IAmiSSL->CMS_add1_crl((cms), (crl))
#define ENGINE_set_pkey_asn1_meths(e, f) IAmiSSL->ENGINE_set_pkey_asn1_meths((e), (f))
#define ENGINE_get_pkey_meth_engine(nid) IAmiSSL->ENGINE_get_pkey_meth_engine((nid))
#define WHIRLPOOL_Update(c, inp, bytes) IAmiSSL->WHIRLPOOL_Update((c), (inp), (bytes))
#define PEM_write_bio_CMS_stream(out, cms, in, flags) IAmiSSL->PEM_write_bio_CMS_stream((out), (cms), (in), (flags))
#define ENGINE_unregister_pkey_meths(e) IAmiSSL->ENGINE_unregister_pkey_meths((e))
#define ENGINE_unregister_pkey_asn1_meths(e) IAmiSSL->ENGINE_unregister_pkey_asn1_meths((e))
#define ENGINE_set_pkey_meths(e, f) IAmiSSL->ENGINE_set_pkey_meths((e), (f))
#define DSAparams_dup(x) IAmiSSL->DSAparams_dup((x))
#define DHparams_dup(d) IAmiSSL->DHparams_dup((d))
#define X509_issuer_name_hash_old(a) IAmiSSL->X509_issuer_name_hash_old((a))
#define X509_subject_name_hash_old(x) IAmiSSL->X509_subject_name_hash_old((x))
#define SRP_VBASE_get_by_user(vb, username) IAmiSSL->SRP_VBASE_get_by_user((vb), (username))
#define SRP_Calc_server_key(A, v, u, b, N) IAmiSSL->SRP_Calc_server_key((A), (v), (u), (b), (N))
#define SRP_create_verifier(user, pass, salt, verifier, N, g) IAmiSSL->SRP_create_verifier((user), (pass), (salt), (verifier), (N), (g))
#define SRP_create_verifier_BN(user, pass, salt, verifier, N, g) IAmiSSL->SRP_create_verifier_BN((user), (pass), (salt), (verifier), (N), (g))
#define SRP_Calc_u(A, B, N) IAmiSSL->SRP_Calc_u((A), (B), (N))
#define SRP_VBASE_free(vb) IAmiSSL->SRP_VBASE_free((vb))
#define SRP_Calc_client_key(N, B, g, x, a, u) IAmiSSL->SRP_Calc_client_key((N), (B), (g), (x), (a), (u))
#define SRP_get_default_gN(id) IAmiSSL->SRP_get_default_gN((id))
#define SRP_Calc_x(s, user, pass) IAmiSSL->SRP_Calc_x((s), (user), (pass))
#define SRP_Calc_B(b, N, g, v) IAmiSSL->SRP_Calc_B((b), (N), (g), (v))
#define SRP_VBASE_new(seed_key) IAmiSSL->SRP_VBASE_new((seed_key))
#define SRP_check_known_gN_param(g, N) IAmiSSL->SRP_check_known_gN_param((g), (N))
#define SRP_Calc_A(a, N, g) IAmiSSL->SRP_Calc_A((a), (N), (g))
#define SRP_Verify_A_mod_N(A, N) IAmiSSL->SRP_Verify_A_mod_N((A), (N))
#define SRP_VBASE_init(vb, verifier_file) IAmiSSL->SRP_VBASE_init((vb), (verifier_file))
#define SRP_Verify_B_mod_N(B, N) IAmiSSL->SRP_Verify_B_mod_N((B), (N))
#define EC_KEY_set_public_key_affine_coordinates(key, x, y) IAmiSSL->EC_KEY_set_public_key_affine_coordinates((key), (x), (y))
#define EVP_aes_192_ctr() IAmiSSL->EVP_aes_192_ctr()
#define EVP_aes_128_ctr() IAmiSSL->EVP_aes_128_ctr()
#define EVP_aes_256_ctr() IAmiSSL->EVP_aes_256_ctr()
#define EC_KEY_get_flags(key) IAmiSSL->EC_KEY_get_flags((key))
#define EVP_aes_128_xts() IAmiSSL->EVP_aes_128_xts()
#define EVP_aes_256_xts() IAmiSSL->EVP_aes_256_xts()
#define EVP_aes_128_gcm() IAmiSSL->EVP_aes_128_gcm()
#define EC_KEY_clear_flags(key, flags) IAmiSSL->EC_KEY_clear_flags((key), (flags))
#define EC_KEY_set_flags(key, flags) IAmiSSL->EC_KEY_set_flags((key), (flags))
#define EVP_aes_256_ccm() IAmiSSL->EVP_aes_256_ccm()
#define EVP_aes_128_ccm() IAmiSSL->EVP_aes_128_ccm()
#define EVP_aes_192_gcm() IAmiSSL->EVP_aes_192_gcm()
#define EVP_aes_256_gcm() IAmiSSL->EVP_aes_256_gcm()
#define EVP_aes_192_ccm() IAmiSSL->EVP_aes_192_ccm()
#define EVP_rc4_hmac_md5() IAmiSSL->EVP_rc4_hmac_md5()
#define EVP_aes_128_cbc_hmac_sha1() IAmiSSL->EVP_aes_128_cbc_hmac_sha1()
#define OBSOLETE_ENGINE_load_rdrand() IAmiSSL->OBSOLETE_ENGINE_load_rdrand()
#define EVP_aes_256_cbc_hmac_sha1() IAmiSSL->EVP_aes_256_cbc_hmac_sha1()
#define CMS_add0_recipient_password(cms, iter, wrap_nid, pbe_nid, pass, passlen, kekciph) IAmiSSL->CMS_add0_recipient_password((cms), (iter), (wrap_nid), (pbe_nid), (pass), (passlen), (kekciph))
#define CMS_decrypt_set1_password(cms, pass, passlen) IAmiSSL->CMS_decrypt_set1_password((cms), (pass), (passlen))
#define CMS_RecipientInfo_set0_password(ri, pass, passlen) IAmiSSL->CMS_RecipientInfo_set0_password((ri), (pass), (passlen))
#define X509_REQ_sign_ctx(x, ctx) IAmiSSL->X509_REQ_sign_ctx((x), (ctx))
#define X509_CRL_sign_ctx(x, ctx) IAmiSSL->X509_CRL_sign_ctx((x), (ctx))
#define X509_signature_dump(bp, sig, indent) IAmiSSL->X509_signature_dump((bp), (sig), (indent))
#define X509_sign_ctx(x, ctx) IAmiSSL->X509_sign_ctx((x), (ctx))
#define ASN1_item_sign_ctx(it, algor1, algor2, signature, data, ctx) IAmiSSL->ASN1_item_sign_ctx((it), (algor1), (algor2), (signature), (data), (ctx))
#define X509_STORE_CTX_set0_crls(ctx, sk) IAmiSSL->X509_STORE_CTX_set0_crls((ctx), (sk))
#define SSL_SESSION_get_id(s, len) IAmiSSL->SSL_SESSION_get_id((s), (len))
#define SSL_CTX_sess_set_new_cb(ctx, new_session_cb) IAmiSSL->SSL_CTX_sess_set_new_cb((ctx), (new_session_cb))
#define SSL_CTX_sess_get_get_cb(ctx) IAmiSSL->SSL_CTX_sess_get_get_cb((ctx))
#define SSL_CTX_sess_set_get_cb(ctx, get_session_cb) IAmiSSL->SSL_CTX_sess_set_get_cb((ctx), (get_session_cb))
#define SSL_CTX_get_info_callback(ctx) IAmiSSL->SSL_CTX_get_info_callback((ctx))
#define SSL_CTX_set_client_cert_cb(ctx, client_cert_cb) IAmiSSL->SSL_CTX_set_client_cert_cb((ctx), (client_cert_cb))
#define SSL_CTX_sess_set_remove_cb(ctx, remove_session_cb) IAmiSSL->SSL_CTX_sess_set_remove_cb((ctx), (remove_session_cb))
#define SSL_CTX_sess_get_new_cb(ctx) IAmiSSL->SSL_CTX_sess_get_new_cb((ctx))
#define SSL_CTX_get_client_cert_cb(ctx) IAmiSSL->SSL_CTX_get_client_cert_cb((ctx))
#define SSL_CTX_sess_get_remove_cb(ctx) IAmiSSL->SSL_CTX_sess_get_remove_cb((ctx))
#define PEM_write_bio_SSL_SESSION(bp, x) IAmiSSL->PEM_write_bio_SSL_SESSION((bp), (x))
#define PEM_read_bio_SSL_SESSION(bp, x, cb, u) IAmiSSL->PEM_read_bio_SSL_SESSION((bp), (x), (cb), (u))
#define BN_X931_generate_Xpq(Xp, Xq, nbits, ctx) IAmiSSL->BN_X931_generate_Xpq((Xp), (Xq), (nbits), (ctx))
#define BN_get0_nist_prime_384() IAmiSSL->BN_get0_nist_prime_384()
#define ERR_set_mark() IAmiSSL->ERR_set_mark()
#define BN_BLINDING_invert_ex(n, r, b, ctx) IAmiSSL->BN_BLINDING_invert_ex((n), (r), (b), (ctx))
#define NAME_CONSTRAINTS_free(ncons) IAmiSSL->NAME_CONSTRAINTS_free((ncons))
#define X509_STORE_CTX_set0_param(ctx, param) IAmiSSL->X509_STORE_CTX_set0_param((ctx), (param))
#define POLICY_CONSTRAINTS_free(pcons) IAmiSSL->POLICY_CONSTRAINTS_free((pcons))
#define BN_nist_mod_192(r, a, p, ctx) IAmiSSL->BN_nist_mod_192((r), (a), (p), (ctx))
#define GENERAL_SUBTREE_free(sub) IAmiSSL->GENERAL_SUBTREE_free((sub))
#define PKCS12_add_safe(psafes, bags, safe_nid, iter, pass) IAmiSSL->PKCS12_add_safe((psafes), (bags), (safe_nid), (iter), (pass))
#define BN_get0_nist_prime_192() IAmiSSL->BN_get0_nist_prime_192()
#define X509_keyid_get0(x, len) IAmiSSL->X509_keyid_get0((x), (len))
#define X509_policy_node_get0_parent(node) IAmiSSL->X509_policy_node_get0_parent((node))
#define a2i_IPADDRESS(ipasc) IAmiSSL->a2i_IPADDRESS((ipasc))
#define X509_STORE_CTX_set_depth(ctx, depth) IAmiSSL->X509_STORE_CTX_set_depth((ctx), (depth))
#define X509_VERIFY_PARAM_inherit(to, from) IAmiSSL->X509_VERIFY_PARAM_inherit((to), (from))
#define X509_VERIFY_PARAM_set_depth(param, depth) IAmiSSL->X509_VERIFY_PARAM_set_depth((param), (depth))
#define EVP_PKEY_add1_attr_by_txt(key, attrname, type, bytes, len) IAmiSSL->EVP_PKEY_add1_attr_by_txt((key), (attrname), (type), (bytes), (len))
#define BN_BLINDING_set_flags(b, l) IAmiSSL->BN_BLINDING_set_flags((b), (l))
#define X509_VERIFY_PARAM_set1_policies(param, policies) IAmiSSL->X509_VERIFY_PARAM_set1_policies((param), (policies))
#define X509_VERIFY_PARAM_set1_name(param, name) IAmiSSL->X509_VERIFY_PARAM_set1_name((param), (name))
#define POLICY_MAPPING_free(pmap) IAmiSSL->POLICY_MAPPING_free((pmap))
#define EVP_PKEY_cmp(a, b) IAmiSSL->EVP_PKEY_cmp((a), (b))
#define X509_policy_level_node_count(level) IAmiSSL->X509_policy_level_node_count((level))
#define EVP_PKEY_get_attr(key, loc) IAmiSSL->EVP_PKEY_get_attr((key), (loc))
#define GENERAL_SUBTREE_new() IAmiSSL->GENERAL_SUBTREE_new()
#define X509_policy_node_get0_qualifiers(node) IAmiSSL->X509_policy_node_get0_qualifiers((node))
#define X509_policy_node_get0_policy(node) IAmiSSL->X509_policy_node_get0_policy((node))
#define PKCS12_add_safes(safes, p7_nid) IAmiSSL->PKCS12_add_safes((safes), (p7_nid))
#define BN_BLINDING_convert_ex(n, r, b, ctx) IAmiSSL->BN_BLINDING_convert_ex((n), (r), (b), (ctx))
#define X509_policy_tree_free(tree) IAmiSSL->X509_policy_tree_free((tree))
#define BN_get0_nist_prime_224() IAmiSSL->BN_get0_nist_prime_224()
#define BN_GENCB_call(cb, a, b) IAmiSSL->BN_GENCB_call((cb), (a), (b))
#define NAME_CONSTRAINTS_new() IAmiSSL->NAME_CONSTRAINTS_new()
#define ECParameters_print(bp, key) IAmiSSL->ECParameters_print((bp), (key))
#define OBSOLETE_BUF_memdup(data, siz) IAmiSSL->OBSOLETE_BUF_memdup((data), (siz))
#define X509_VERIFY_PARAM_set_trust(param, trust) IAmiSSL->X509_VERIFY_PARAM_set_trust((param), (trust))
#define EVP_PKEY_get_attr_count(key) IAmiSSL->EVP_PKEY_get_attr_count((key))
#define X509_STORE_CTX_get0_param(ctx) IAmiSSL->X509_STORE_CTX_get0_param((ctx))
#define X509_STORE_set_depth(store, depth) IAmiSSL->X509_STORE_set_depth((store), (depth))
#define OBSOLETE_BUF_strndup(str, siz) IAmiSSL->OBSOLETE_BUF_strndup((str), (siz))
#define ASN1_put_eoc(pp) IAmiSSL->ASN1_put_eoc((pp))
#define X509_VERIFY_PARAM_table_cleanup() IAmiSSL->X509_VERIFY_PARAM_table_cleanup()
#define RSA_setup_blinding(rsa, ctx) IAmiSSL->RSA_setup_blinding((rsa), (ctx))
#define OPENSSL_sk_find_ex(st, data) IAmiSSL->OPENSSL_sk_find_ex((st), (data))
#define POLICY_CONSTRAINTS_new() IAmiSSL->POLICY_CONSTRAINTS_new()
#define X509_VERIFY_PARAM_get_depth(param) IAmiSSL->X509_VERIFY_PARAM_get_depth((param))
#define ASN1_item_ndef_i2d(val, out, it) IAmiSSL->ASN1_item_ndef_i2d((val), (out), (it))
#define ERR_pop_to_mark() IAmiSSL->ERR_pop_to_mark()
#define X509_policy_level_get0_node(level, i) IAmiSSL->X509_policy_level_get0_node((level), (i))
#define i2d_PKCS7_NDEF(a, out) IAmiSSL->i2d_PKCS7_NDEF((a), (out))
#define ASN1_generate_v3(str, cnf) IAmiSSL->ASN1_generate_v3((str), (cnf))
#define X509_policy_tree_level_count(tree) IAmiSSL->X509_policy_tree_level_count((tree))
#define BN_nist_mod_224(r, a, p, ctx) IAmiSSL->BN_nist_mod_224((r), (a), (p), (ctx))
#define BIO_dgram_non_fatal_error(error) IAmiSSL->BIO_dgram_non_fatal_error((error))
#define v2i_ASN1_BIT_STRING(method, ctx, nval) IAmiSSL->v2i_ASN1_BIT_STRING((method), (ctx), (nval))
#define X509_STORE_CTX_set_default(ctx, name) IAmiSSL->X509_STORE_CTX_set_default((ctx), (name))
#define X509_VERIFY_PARAM_set1(to, from) IAmiSSL->X509_VERIFY_PARAM_set1((to), (from))
#define v2i_GENERAL_NAME_ex(out, method, ctx, cnf, is_nc) IAmiSSL->v2i_GENERAL_NAME_ex((out), (method), (ctx), (cnf), (is_nc))
#define BN_nist_mod_521(r, a, p, ctx) IAmiSSL->BN_nist_mod_521((r), (a), (p), (ctx))
#define X509_policy_tree_get0_level(tree, i) IAmiSSL->X509_policy_tree_get0_level((tree), (i))
#define ASN1_const_check_infinite_end(p, len) IAmiSSL->ASN1_const_check_infinite_end((p), (len))
#define EVP_PKEY_delete_attr(key, loc) IAmiSSL->EVP_PKEY_delete_attr((key), (loc))
#define BN_get0_nist_prime_256() IAmiSSL->BN_get0_nist_prime_256()
#define i2v_ASN1_BIT_STRING(method, bits, extlist) IAmiSSL->i2v_ASN1_BIT_STRING((method), (bits), (extlist))
#define BN_nist_mod_384(r, a, p, ctx) IAmiSSL->BN_nist_mod_384((r), (a), (p), (ctx))
#define EVP_PKEY_get_attr_by_OBJ(key, obj, lastpos) IAmiSSL->EVP_PKEY_get_attr_by_OBJ((key), (obj), (lastpos))
#define X509_VERIFY_PARAM_lookup(name) IAmiSSL->X509_VERIFY_PARAM_lookup((name))
#define X509V3_NAME_from_section(nm, dn_sk, chtype) IAmiSSL->X509V3_NAME_from_section((nm), (dn_sk), (chtype))
#define EVP_PKEY_add1_attr(key, attr) IAmiSSL->EVP_PKEY_add1_attr((key), (attr))
#define BIO_dump_indent_cb(cb, u, s, len, indent) IAmiSSL->BIO_dump_indent_cb((cb), (u), (s), (len), (indent))
#define BN_nist_mod_256(r, a, p, ctx) IAmiSSL->BN_nist_mod_256((r), (a), (p), (ctx))
#define X509_VERIFY_PARAM_add0_table(param) IAmiSSL->X509_VERIFY_PARAM_add0_table((param))
#define BN_BLINDING_create_param(b, e, m, ctx, bn_mod_exp, m_ctx) IAmiSSL->BN_BLINDING_create_param((b), (e), (m), (ctx), (bn_mod_exp), (m_ctx))
#define BN_get0_nist_prime_521() IAmiSSL->BN_get0_nist_prime_521()
#define BN_is_prime_fasttest_ex(p, nchecks, ctx, do_trial_devision, cb) IAmiSSL->BN_is_prime_fasttest_ex((p), (nchecks), (ctx), (do_trial_devision), (cb))
#define X509_policy_check(ptree, pexplicit_policy, certs, policy_oids, flags) IAmiSSL->X509_policy_check((ptree), (pexplicit_policy), (certs), (policy_oids), (flags))
#define EVP_PKEY_get_attr_by_NID(key, nid, lastpos) IAmiSSL->EVP_PKEY_get_attr_by_NID((key), (nid), (lastpos))
#define BN_BLINDING_get_flags(b) IAmiSSL->BN_BLINDING_get_flags((b))
#define PKCS12_add_cert(pbags, cert) IAmiSSL->PKCS12_add_cert((pbags), (cert))
#define EVP_CIPHER_CTX_rand_key(ctx, key) IAmiSSL->EVP_CIPHER_CTX_rand_key((ctx), (key))
#define a2i_IPADDRESS_NC(ipasc) IAmiSSL->a2i_IPADDRESS_NC((ipasc))
#define PKCS7_set_digest(p7, md) IAmiSSL->PKCS7_set_digest((p7), (md))
#define POLICY_MAPPING_new() IAmiSSL->POLICY_MAPPING_new()
#define PKCS7_set0_type_other(p7, type, other) IAmiSSL->PKCS7_set0_type_other((p7), (type), (other))
#define EVP_PKEY_add1_attr_by_OBJ(key, obj, type, bytes, len) IAmiSSL->EVP_PKEY_add1_attr_by_OBJ((key), (obj), (type), (bytes), (len))
#define X509_VERIFY_PARAM_set_time(param, t) IAmiSSL->X509_VERIFY_PARAM_set_time((param), (t))
#define PKCS12_add_key(pbags, key, key_usage, iter, key_nid, pass) IAmiSSL->PKCS12_add_key((pbags), (key), (key_usage), (iter), (key_nid), (pass))
#define BIO_dump_cb(cb, u, s, len) IAmiSSL->BIO_dump_cb((cb), (u), (s), (len))
#define BN_get_rfc3526_prime_8192(bn) IAmiSSL->BN_get_rfc3526_prime_8192((bn))
#define X509_VERIFY_PARAM_clear_flags(param, flags) IAmiSSL->X509_VERIFY_PARAM_clear_flags((param), (flags))
#define BN_get_rfc2409_prime_1024(bn) IAmiSSL->BN_get_rfc2409_prime_1024((bn))
#define BN_get_rfc3526_prime_2048(bn) IAmiSSL->BN_get_rfc3526_prime_2048((bn))
#define BN_get_rfc3526_prime_6144(bn) IAmiSSL->BN_get_rfc3526_prime_6144((bn))
#define BN_get_rfc3526_prime_1536(bn) IAmiSSL->BN_get_rfc3526_prime_1536((bn))
#define BN_get_rfc3526_prime_3072(bn) IAmiSSL->BN_get_rfc3526_prime_3072((bn))
#define BN_get_rfc3526_prime_4096(bn) IAmiSSL->BN_get_rfc3526_prime_4096((bn))
#define BN_get_rfc2409_prime_768(bn) IAmiSSL->BN_get_rfc2409_prime_768((bn))
#define X509_VERIFY_PARAM_get_flags(param) IAmiSSL->X509_VERIFY_PARAM_get_flags((param))
#define EVP_CIPHER_CTX_new() IAmiSSL->EVP_CIPHER_CTX_new()
#define EVP_CIPHER_CTX_free(a) IAmiSSL->EVP_CIPHER_CTX_free((a))
#define EVP_CIPHER_get_block_size(cipher) IAmiSSL->EVP_CIPHER_get_block_size((cipher))
#define EVP_CIPHER_CTX_set_app_data(ctx, data) IAmiSSL->EVP_CIPHER_CTX_set_app_data((ctx), (data))
#define BIO_method_type(b) IAmiSSL->BIO_method_type((b))
#define EVP_CIPHER_CTX_get_nid(ctx) IAmiSSL->EVP_CIPHER_CTX_get_nid((ctx))
#define EVP_CIPHER_CTX_get_key_length(ctx) IAmiSSL->EVP_CIPHER_CTX_get_key_length((ctx))
#define EVP_MD_get_size(md) IAmiSSL->EVP_MD_get_size((md))
#define EVP_MD_CTX_test_flags(ctx, flags) IAmiSSL->EVP_MD_CTX_test_flags((ctx), (flags))
#define BIO_clear_flags(b, flags) IAmiSSL->BIO_clear_flags((b), (flags))
#define EVP_MD_get_pkey_type(md) IAmiSSL->EVP_MD_get_pkey_type((md))
#define EVP_MD_CTX_clear_flags(ctx, flags) IAmiSSL->EVP_MD_CTX_clear_flags((ctx), (flags))
#define EVP_CIPHER_get_flags(cipher) IAmiSSL->EVP_CIPHER_get_flags((cipher))
#define BIO_get_callback(b) IAmiSSL->BIO_get_callback((b))
#define EVP_CIPHER_get_key_length(cipher) IAmiSSL->EVP_CIPHER_get_key_length((cipher))
#define EVP_Cipher(c, out, in, inl) IAmiSSL->EVP_Cipher((c), (out), (in), (inl))
#define EVP_CIPHER_CTX_get_block_size(ctx) IAmiSSL->EVP_CIPHER_CTX_get_block_size((ctx))
#define EVP_CIPHER_CTX_cipher(ctx) IAmiSSL->EVP_CIPHER_CTX_cipher((ctx))
#define EVP_CIPHER_CTX_get_app_data(ctx) IAmiSSL->EVP_CIPHER_CTX_get_app_data((ctx))
#define EVP_MD_get_block_size(md) IAmiSSL->EVP_MD_get_block_size((md))
#define OBSOLETE_EVP_CIPHER_CTX_flags(ctx) IAmiSSL->OBSOLETE_EVP_CIPHER_CTX_flags((ctx))
#define EVP_MD_CTX_md(ctx) IAmiSSL->EVP_MD_CTX_md((ctx))
#define BIO_method_name(b) IAmiSSL->BIO_method_name((b))
#define EVP_CIPHER_CTX_get_iv_length(ctx) IAmiSSL->EVP_CIPHER_CTX_get_iv_length((ctx))
#define CRYPTO_memcmp(in_a, in_b, len) IAmiSSL->CRYPTO_memcmp((in_a), (in_b), (len))
#define BN_consttime_swap(swap, a, b, nwords) IAmiSSL->BN_consttime_swap((swap), (a), (b), (nwords))
#define i2d_X509_EXTENSIONS(a, out) IAmiSSL->i2d_X509_EXTENSIONS((a), (out))
#define d2i_X509_EXTENSIONS(a, in, len) IAmiSSL->d2i_X509_EXTENSIONS((a), (in), (len))
#define X509_ALGOR_get0(pobj, pptype, ppval, algor) IAmiSSL->X509_ALGOR_get0((pobj), (pptype), (ppval), (algor))
#define X509_ALGOR_set0(alg, aobj, ptype, pval) IAmiSSL->X509_ALGOR_set0((alg), (aobj), (ptype), (pval))
#define X509at_get0_data_by_OBJ(x, obj, lastpos, type) IAmiSSL->X509at_get0_data_by_OBJ((x), (obj), (lastpos), (type))
#define ASN1_TYPE_set1(a, type, value) IAmiSSL->ASN1_TYPE_set1((a), (type), (value))
#define ASN1_STRING_set0(str, data, len) IAmiSSL->ASN1_STRING_set0((str), (data), (len))
#define i2d_X509_ALGORS(a, out) IAmiSSL->i2d_X509_ALGORS((a), (out))
#define d2i_X509_ALGORS(a, in, len) IAmiSSL->d2i_X509_ALGORS((a), (in), (len))
#define SMIME_read_ASN1(bio, bcont, it) IAmiSSL->SMIME_read_ASN1((bio), (bcont), (it))
#define OPENSSL_isservice() IAmiSSL->OPENSSL_isservice()
#define EVP_CIPHER_CTX_clear_flags(ctx, flags) IAmiSSL->EVP_CIPHER_CTX_clear_flags((ctx), (flags))
#define BN_X931_generate_prime_ex(p, p1, p2, Xp1, Xp2, Xp, e, ctx, cb) IAmiSSL->BN_X931_generate_prime_ex((p), (p1), (p2), (Xp1), (Xp2), (Xp), (e), (ctx), (cb))
#define EVP_CIPHER_CTX_test_flags(ctx, flags) IAmiSSL->EVP_CIPHER_CTX_test_flags((ctx), (flags))
#define EVP_add_alg_module() IAmiSSL->EVP_add_alg_module()
#define BN_X931_derive_prime_ex(p, p1, p2, Xp, Xp1, Xp2, e, ctx, cb) IAmiSSL->BN_X931_derive_prime_ex((p), (p1), (p2), (Xp), (Xp1), (Xp2), (e), (ctx), (cb))
#define OPENSSL_init() IAmiSSL->OPENSSL_init()
#define CRYPTO_strdup(str, file, line) IAmiSSL->CRYPTO_strdup((str), (file), (line))
#define i2d_TS_ACCURACY(a, pp) IAmiSSL->i2d_TS_ACCURACY((a), (pp))
#define i2d_TS_MSG_IMPRINT(a, pp) IAmiSSL->i2d_TS_MSG_IMPRINT((a), (pp))
#define EVP_PKEY_print_public(out, pkey, indent, pctx) IAmiSSL->EVP_PKEY_print_public((out), (pkey), (indent), (pctx))
#define EVP_PKEY_CTX_new(pkey, e) IAmiSSL->EVP_PKEY_CTX_new((pkey), (e))
#define i2d_TS_TST_INFO(a, pp) IAmiSSL->i2d_TS_TST_INFO((a), (pp))
#define EVP_PKEY_asn1_find(pe, type) IAmiSSL->EVP_PKEY_asn1_find((pe), (type))
#define TS_CONF_load_cert(file) IAmiSSL->TS_CONF_load_cert((file))
#define TS_REQ_get_ext(a, loc) IAmiSSL->TS_REQ_get_ext((a), (loc))
#define EVP_PKEY_sign_init(ctx) IAmiSSL->EVP_PKEY_sign_init((ctx))
#define ASN1_item_print(out, ifld, indent, it, ctx) IAmiSSL->ASN1_item_print((out), (ifld), (indent), (it), (ctx))
#define TS_TST_INFO_set_nonce(a, nonce) IAmiSSL->TS_TST_INFO_set_nonce((a), (nonce))
#define TS_RESP_dup(a) IAmiSSL->TS_RESP_dup((a))
#define EVP_PKEY_asn1_add0(ameth) IAmiSSL->EVP_PKEY_asn1_add0((ameth))
#define PKCS7_add0_attrib_signing_time(si, t) IAmiSSL->PKCS7_add0_attrib_signing_time((si), (t))
#define BIO_asn1_get_prefix(b, pprefix, pprefix_free) IAmiSSL->BIO_asn1_get_prefix((b), (pprefix), (pprefix_free))
#define TS_TST_INFO_set_time(a, gtime) IAmiSSL->TS_TST_INFO_set_time((a), (gtime))
#define EVP_PKEY_meth_set_decrypt(pmeth, decrypt_init, decrypt) IAmiSSL->EVP_PKEY_meth_set_decrypt((pmeth), (decrypt_init), (decrypt))
#define EVP_PKEY_set_type_str(pkey, str, len) IAmiSSL->EVP_PKEY_set_type_str((pkey), (str), (len))
#define EVP_PKEY_CTX_get_keygen_info(ctx, idx) IAmiSSL->EVP_PKEY_CTX_get_keygen_info((ctx), (idx))
#define TS_REQ_set_policy_id(a, policy) IAmiSSL->TS_REQ_set_policy_id((a), (policy))
#define TS_RESP_set_status_info(a, info) IAmiSSL->TS_RESP_set_status_info((a), (info))
#define EVP_PKEY_keygen(ctx, ppkey) IAmiSSL->EVP_PKEY_keygen((ctx), (ppkey))
#define EVP_DigestSignInit(ctx, pctx, type, e, pkey) IAmiSSL->EVP_DigestSignInit((ctx), (pctx), (type), (e), (pkey))
#define TS_ACCURACY_set_millis(a, millis) IAmiSSL->TS_ACCURACY_set_millis((a), (millis))
#define TS_REQ_dup(a) IAmiSSL->TS_REQ_dup((a))
#define GENERAL_NAME_dup(a) IAmiSSL->GENERAL_NAME_dup((a))
#define X509_STORE_CTX_get1_crls(st, nm) IAmiSSL->X509_STORE_CTX_get1_crls((st), (nm))
#define EVP_PKEY_asn1_new(id, flags, pem_str, info) IAmiSSL->EVP_PKEY_asn1_new((id), (flags), (pem_str), (info))
#define BIO_new_NDEF(out, val, it) IAmiSSL->BIO_new_NDEF((out), (val), (it))
#define TS_MSG_IMPRINT_set_algo(a, alg) IAmiSSL->TS_MSG_IMPRINT_set_algo((a), (alg))
#define i2d_TS_TST_INFO_bio(fp, a) IAmiSSL->i2d_TS_TST_INFO_bio((fp), (a))
#define TS_TST_INFO_set_ordering(a, ordering) IAmiSSL->TS_TST_INFO_set_ordering((a), (ordering))
#define TS_TST_INFO_get_ext_by_OBJ(a, obj, lastpos) IAmiSSL->TS_TST_INFO_get_ext_by_OBJ((a), (obj), (lastpos))
#define TS_CONF_get_tsa_section(conf, section) IAmiSSL->TS_CONF_get_tsa_section((conf), (section))
#define SMIME_write_ASN1(bio, val, data, flags, ctype_nid, econt_nid, mdalgs, it) IAmiSSL->SMIME_write_ASN1((bio), (val), (data), (flags), (ctype_nid), (econt_nid), (mdalgs), (it))
#define TS_RESP_CTX_set_signer_key(ctx, key) IAmiSSL->TS_RESP_CTX_set_signer_key((ctx), (key))
#define EVP_PKEY_encrypt_old(enc_key, key, key_len, pub_key) IAmiSSL->EVP_PKEY_encrypt_old((enc_key), (key), (key_len), (pub_key))
#define EVP_PKEY_encrypt_init(ctx) IAmiSSL->EVP_PKEY_encrypt_init((ctx))
#define ASN1_PCTX_get_cert_flags(p) IAmiSSL->ASN1_PCTX_get_cert_flags((p))
#define i2d_ESS_SIGNING_CERT(a, pp) IAmiSSL->i2d_ESS_SIGNING_CERT((a), (pp))
#define TS_CONF_load_key(file, pass) IAmiSSL->TS_CONF_load_key((file), (pass))
#define i2d_ASN1_SEQUENCE_ANY(a, pp) IAmiSSL->i2d_ASN1_SEQUENCE_ANY((a), (pp))
#define d2i_TS_MSG_IMPRINT_bio(fp, a) IAmiSSL->d2i_TS_MSG_IMPRINT_bio((fp), (a))
#define EVP_PKEY_asn1_set_public(ameth, pub_decode, pub_encode, pub_cmp, pub_print, pkey_size, pkey_bits) IAmiSSL->EVP_PKEY_asn1_set_public((ameth), (pub_decode), (pub_encode), (pub_cmp), (pub_print), (pkey_size), (pkey_bits))
#define b2i_PublicKey_bio(in) IAmiSSL->b2i_PublicKey_bio((in))
#define BIO_asn1_set_prefix(b, prefix, prefix_free) IAmiSSL->BIO_asn1_set_prefix((b), (prefix), (prefix_free))
#define EVP_PKEY_new_mac_key(type, e, key, keylen) IAmiSSL->EVP_PKEY_new_mac_key((type), (e), (key), (keylen))
#define TS_REQ_ext_free(a) IAmiSSL->TS_REQ_ext_free((a))
#define EVP_PKEY_asn1_set_free(ameth, pkey_free) IAmiSSL->EVP_PKEY_asn1_set_free((ameth), (pkey_free))
#define EVP_PKEY_get0_asn1(pkey) IAmiSSL->EVP_PKEY_get0_asn1((pkey))
#define EVP_PKEY_verify_recover_init(ctx) IAmiSSL->EVP_PKEY_verify_recover_init((ctx))
#define EVP_PKEY_CTX_set_data(ctx, data) IAmiSSL->EVP_PKEY_CTX_set_data((ctx), (data))
#define EVP_PKEY_keygen_init(ctx) IAmiSSL->EVP_PKEY_keygen_init((ctx))
#define TS_RESP_CTX_set_status_info(ctx, status, text) IAmiSSL->TS_RESP_CTX_set_status_info((ctx), (status), (text))
#define TS_MSG_IMPRINT_get_algo(a) IAmiSSL->TS_MSG_IMPRINT_get_algo((a))
#define TS_REQ_print_bio(bio, a) IAmiSSL->TS_REQ_print_bio((bio), (a))
#define EVP_PKEY_CTX_ctrl_str(ctx, type, value) IAmiSSL->EVP_PKEY_CTX_ctrl_str((ctx), (type), (value))
#define EVP_PKEY_get_default_digest_nid(pkey, pnid) IAmiSSL->EVP_PKEY_get_default_digest_nid((pkey), (pnid))
#define PEM_write_bio_PKCS7_stream(out, p7, in, flags) IAmiSSL->PEM_write_bio_PKCS7_stream((out), (p7), (in), (flags))
#define TS_MSG_IMPRINT_print_bio(bio, msg) IAmiSSL->TS_MSG_IMPRINT_print_bio((bio), (msg))
#define BN_asc2bn(a, str) IAmiSSL->BN_asc2bn((a), (str))
#define TS_REQ_get_policy_id(a) IAmiSSL->TS_REQ_get_policy_id((a))
#define d2i_TS_ACCURACY(a, pp, length) IAmiSSL->d2i_TS_ACCURACY((a), (pp), (length))
#define DSO_global_lookup(name) IAmiSSL->DSO_global_lookup((name))
#define TS_CONF_set_tsa_name(conf, section, ctx) IAmiSSL->TS_CONF_set_tsa_name((conf), (section), (ctx))
#define i2d_ASN1_SET_ANY(a, pp) IAmiSSL->i2d_ASN1_SET_ANY((a), (pp))
#define ASN1_PCTX_get_flags(p) IAmiSSL->ASN1_PCTX_get_flags((p))
#define TS_TST_INFO_get_ext_by_NID(a, nid, lastpos) IAmiSSL->TS_TST_INFO_get_ext_by_NID((a), (nid), (lastpos))
#define TS_RESP_new() IAmiSSL->TS_RESP_new()
#define ESS_CERT_ID_dup(a) IAmiSSL->ESS_CERT_ID_dup((a))
#define TS_STATUS_INFO_dup(a) IAmiSSL->TS_STATUS_INFO_dup((a))
#define TS_REQ_delete_ext(a, loc) IAmiSSL->TS_REQ_delete_ext((a), (loc))
#define EVP_DigestVerifyFinal(ctx, sig, siglen) IAmiSSL->EVP_DigestVerifyFinal((ctx), (sig), (siglen))
#define EVP_PKEY_print_params(out, pkey, inden, pctx) IAmiSSL->EVP_PKEY_print_params((out), (pkey), (inden), (pctx))
#define TS_REQ_get_msg_imprint(a) IAmiSSL->TS_REQ_get_msg_imprint((a))
#define OBJ_find_sigid_by_algs(psignid, dig_nid, pkey_nid) IAmiSSL->OBJ_find_sigid_by_algs((psignid), (dig_nid), (pkey_nid))
#define TS_TST_INFO_get_serial(a) IAmiSSL->TS_TST_INFO_get_serial((a))
#define TS_REQ_get_nonce(a) IAmiSSL->TS_REQ_get_nonce((a))
#define X509_PUBKEY_set0_param(pub, aobj, ptype, pval, penc, penclen) IAmiSSL->X509_PUBKEY_set0_param((pub), (aobj), (ptype), (pval), (penc), (penclen))
#define EVP_PKEY_CTX_set0_keygen_info(ctx, dat, datlen) IAmiSSL->EVP_PKEY_CTX_set0_keygen_info((ctx), (dat), (datlen))
#define DIST_POINT_set_dpname(dpn, iname) IAmiSSL->DIST_POINT_set_dpname((dpn), (iname))
#define i2d_ISSUING_DIST_POINT(a, pp) IAmiSSL->i2d_ISSUING_DIST_POINT((a), (pp))
#define EVP_PKEY_CTX_get_data(ctx) IAmiSSL->EVP_PKEY_CTX_get_data((ctx))
#define TS_STATUS_INFO_print_bio(bio, a) IAmiSSL->TS_STATUS_INFO_print_bio((bio), (a))
#define EVP_PKEY_derive_init(ctx) IAmiSSL->EVP_PKEY_derive_init((ctx))
#define d2i_TS_TST_INFO(a, pp, length) IAmiSSL->d2i_TS_TST_INFO((a), (pp), (length))
#define EVP_PKEY_asn1_add_alias(to, from) IAmiSSL->EVP_PKEY_asn1_add_alias((to), (from))
#define d2i_TS_RESP_bio(fp, a) IAmiSSL->d2i_TS_RESP_bio((fp), (a))
#define OTHERNAME_cmp(a, b) IAmiSSL->OTHERNAME_cmp((a), (b))
#define GENERAL_NAME_set0_value(a, type, value) IAmiSSL->GENERAL_NAME_set0_value((a), (type), (value))
#define PKCS7_RECIP_INFO_get0_alg(ri, penc) IAmiSSL->PKCS7_RECIP_INFO_get0_alg((ri), (penc))
#define TS_RESP_CTX_new() IAmiSSL->TS_RESP_CTX_new()
#define TS_RESP_set_tst_info(a, p7, tst_info) IAmiSSL->TS_RESP_set_tst_info((a), (p7), (tst_info))
#define PKCS7_final(p7, data, flags) IAmiSSL->PKCS7_final((p7), (data), (flags))
#define EVP_PKEY_get_base_id(pkey) IAmiSSL->EVP_PKEY_get_base_id((pkey))
#define TS_RESP_CTX_set_signer_cert(ctx, signer) IAmiSSL->TS_RESP_CTX_set_signer_cert((ctx), (signer))
#define TS_REQ_set_msg_imprint(a, msg_imprint) IAmiSSL->TS_REQ_set_msg_imprint((a), (msg_imprint))
#define EVP_PKEY_CTX_ctrl(ctx, keytype, optype, cmd, p1, p2) IAmiSSL->EVP_PKEY_CTX_ctrl((ctx), (keytype), (optype), (cmd), (p1), (p2))
#define TS_CONF_set_digests(conf, section, ctx) IAmiSSL->TS_CONF_set_digests((conf), (section), (ctx))
#define d2i_TS_MSG_IMPRINT(a, pp, length) IAmiSSL->d2i_TS_MSG_IMPRINT((a), (pp), (length))
#define EVP_PKEY_meth_set_ctrl(pmeth, ctrl, ctrl_str) IAmiSSL->EVP_PKEY_meth_set_ctrl((pmeth), (ctrl), (ctrl_str))
#define TS_REQ_get_ext_by_NID(a, nid, lastpos) IAmiSSL->TS_REQ_get_ext_by_NID((a), (nid), (lastpos))
#define PKCS5_pbe_set0_algor(algor, alg, iter, salt, saltlen) IAmiSSL->PKCS5_pbe_set0_algor((algor), (alg), (iter), (salt), (saltlen))
#define TS_ACCURACY_new() IAmiSSL->TS_ACCURACY_new()
#define X509_CRL_METHOD_free(m) IAmiSSL->X509_CRL_METHOD_free((m))
#define ASN1_PCTX_get_nm_flags(p) IAmiSSL->ASN1_PCTX_get_nm_flags((p))
#define EVP_PKEY_meth_set_sign(pmeth, sign_init, sign) IAmiSSL->EVP_PKEY_meth_set_sign((pmeth), (sign_init), (sign))
#define EVP_PKEY_decrypt_init(ctx) IAmiSSL->EVP_PKEY_decrypt_init((ctx))
#define i2b_PVK_bio(out, pk, enclevel, cb, u) IAmiSSL->i2b_PVK_bio((out), (pk), (enclevel), (cb), (u))
#define EVP_PKEY_print_private(out, pkey, indent, pctx) IAmiSSL->EVP_PKEY_print_private((out), (pkey), (indent), (pctx))
#define GENERAL_NAME_get0_value(a, ptype) IAmiSSL->GENERAL_NAME_get0_value((a), (ptype))
#define b2i_PVK_bio(in, cb, u) IAmiSSL->b2i_PVK_bio((in), (cb), (u))
#define ASN1_UTCTIME_adj(s, t, offset_day, offset_sec) IAmiSSL->ASN1_UTCTIME_adj((s), (t), (offset_day), (offset_sec))
#define TS_TST_INFO_new() IAmiSSL->TS_TST_INFO_new()
#define EVP_MD_do_all_sorted(fn, arg) IAmiSSL->EVP_MD_do_all_sorted((fn), (arg))
#define TS_CONF_set_default_engine(name) IAmiSSL->TS_CONF_set_default_engine((name))
#define TS_ACCURACY_set_seconds(a, seconds) IAmiSSL->TS_ACCURACY_set_seconds((a), (seconds))
#define TS_TST_INFO_get_time(a) IAmiSSL->TS_TST_INFO_get_time((a))
#define PKCS8_pkey_get0(ppkalg, pk, ppklen, pa, p8) IAmiSSL->PKCS8_pkey_get0((ppkalg), (pk), (ppklen), (pa), (p8))
#define EVP_PKEY_asn1_get0(idx) IAmiSSL->EVP_PKEY_asn1_get0((idx))
#define OBJ_add_sigid(signid, dig_id, pkey_id) IAmiSSL->OBJ_add_sigid((signid), (dig_id), (pkey_id))
#define PKCS7_SIGNER_INFO_sign(si) IAmiSSL->PKCS7_SIGNER_INFO_sign((si))
#define EVP_PKEY_paramgen_init(ctx) IAmiSSL->EVP_PKEY_paramgen_init((ctx))
#define EVP_PKEY_sign(ctx, sig, siglen, tbs, tbslen) IAmiSSL->EVP_PKEY_sign((ctx), (sig), (siglen), (tbs), (tbslen))
#define OBJ_sigid_free() IAmiSSL->OBJ_sigid_free()
#define EVP_PKEY_meth_set_init(pmeth, init) IAmiSSL->EVP_PKEY_meth_set_init((pmeth), (init))
#define d2i_ESS_ISSUER_SERIAL(a, pp, length) IAmiSSL->d2i_ESS_ISSUER_SERIAL((a), (pp), (length))
#define ISSUING_DIST_POINT_new() IAmiSSL->ISSUING_DIST_POINT_new()
#define ASN1_TIME_adj(s, t, offset_day, offset_sec) IAmiSSL->ASN1_TIME_adj((s), (t), (offset_day), (offset_sec))
#define TS_OBJ_print_bio(bio, obj) IAmiSSL->TS_OBJ_print_bio((bio), (obj))
#define EVP_PKEY_meth_set_verify_recover(pmeth, verify_recover_init, verify_recover) IAmiSSL->EVP_PKEY_meth_set_verify_recover((pmeth), (verify_recover_init), (verify_recover))
#define TS_RESP_get_status_info(g) IAmiSSL->TS_RESP_get_status_info((g))
#define EVP_PKEY_CTX_set_cb(ctx, cb) IAmiSSL->EVP_PKEY_CTX_set_cb((ctx), (cb))
#define PKCS7_to_TS_TST_INFO(token) IAmiSSL->PKCS7_to_TS_TST_INFO((token))
#define ASN1_PCTX_get_oid_flags(p) IAmiSSL->ASN1_PCTX_get_oid_flags((p))
#define TS_TST_INFO_add_ext(a, ex, loc) IAmiSSL->TS_TST_INFO_add_ext((a), (ex), (loc))
#define EVP_PKEY_meth_set_derive(pmeth, derive_init, derive) IAmiSSL->EVP_PKEY_meth_set_derive((pmeth), (derive_init), (derive))
#define i2d_TS_MSG_IMPRINT_bio(fp, a) IAmiSSL->i2d_TS_MSG_IMPRINT_bio((fp), (a))
#define TS_RESP_CTX_set_accuracy(ctx, secs, millis, micros) IAmiSSL->TS_RESP_CTX_set_accuracy((ctx), (secs), (millis), (micros))
#define TS_REQ_set_nonce(a, nonce) IAmiSSL->TS_REQ_set_nonce((a), (nonce))
#define ESS_CERT_ID_new() IAmiSSL->ESS_CERT_ID_new()
#define TS_REQ_get_ext_count(a) IAmiSSL->TS_REQ_get_ext_count((a))
#define BUF_reverse(out, in, siz) IAmiSSL->BUF_reverse((out), (in), (siz))
#define TS_TST_INFO_print_bio(bio, a) IAmiSSL->TS_TST_INFO_print_bio((bio), (a))
#define d2i_ISSUING_DIST_POINT(a, pp, length) IAmiSSL->d2i_ISSUING_DIST_POINT((a), (pp), (length))
#define i2b_PrivateKey_bio(out, pk) IAmiSSL->i2b_PrivateKey_bio((out), (pk))
#define i2d_TS_RESP(a, pp) IAmiSSL->i2d_TS_RESP((a), (pp))
#define b2i_PublicKey(in, length) IAmiSSL->b2i_PublicKey((in), (length))
#define TS_VERIFY_CTX_cleanup(ctx) IAmiSSL->TS_VERIFY_CTX_cleanup((ctx))
#define TS_STATUS_INFO_free(a) IAmiSSL->TS_STATUS_INFO_free((a))
#define TS_RESP_verify_token(ctx, token) IAmiSSL->TS_RESP_verify_token((ctx), (token))
#define OBJ_bsearch_ex_(key, base, num, size, cmp, flags) IAmiSSL->OBJ_bsearch_ex_((key), (base), (num), (size), (cmp), (flags))
#define ASN1_bn_print(bp, number, num, ign, indent) IAmiSSL->ASN1_bn_print((bp), (number), (num), (ign), (indent))
#define EVP_PKEY_asn1_get_count() IAmiSSL->EVP_PKEY_asn1_get_count()
#define ASN1_PCTX_set_nm_flags(p, flags) IAmiSSL->ASN1_PCTX_set_nm_flags((p), (flags))
#define EVP_DigestVerifyInit(ctx, pctx, type, e, pkey) IAmiSSL->EVP_DigestVerifyInit((ctx), (pctx), (type), (e), (pkey))
#define TS_TST_INFO_get_policy_id(a) IAmiSSL->TS_TST_INFO_get_policy_id((a))
#define TS_REQ_get_cert_req(a) IAmiSSL->TS_REQ_get_cert_req((a))
#define X509_CRL_set_meth_data(crl, dat) IAmiSSL->X509_CRL_set_meth_data((crl), (dat))
#define PKCS8_pkey_set0(priv, aobj, version, ptype, pval, penc, penclen) IAmiSSL->PKCS8_pkey_set0((priv), (aobj), (version), (ptype), (pval), (penc), (penclen))
#define ASN1_STRING_copy(dst, str) IAmiSSL->ASN1_STRING_copy((dst), (str))
#define X509_CRL_match(a, b) IAmiSSL->X509_CRL_match((a), (b))
#define EVP_PKEY_asn1_set_private(ameth, priv_decode, priv_encode, priv_print) IAmiSSL->EVP_PKEY_asn1_set_private((ameth), (priv_decode), (priv_encode), (priv_print))
#define TS_TST_INFO_get_ext_d2i(a, nid, crit, idx) IAmiSSL->TS_TST_INFO_get_ext_d2i((a), (nid), (crit), (idx))
#define TS_RESP_CTX_add_policy(ctx, policy) IAmiSSL->TS_RESP_CTX_add_policy((ctx), (policy))
#define d2i_TS_RESP(a, pp, length) IAmiSSL->d2i_TS_RESP((a), (pp), (length))
#define TS_CONF_load_certs(file) IAmiSSL->TS_CONF_load_certs((file))
#define TS_TST_INFO_get_msg_imprint(a) IAmiSSL->TS_TST_INFO_get_msg_imprint((a))
#define ERR_load_TS_strings() IAmiSSL->ERR_load_TS_strings()
#define TS_TST_INFO_get_version(a) IAmiSSL->TS_TST_INFO_get_version((a))
#define EVP_PKEY_CTX_dup(ctx) IAmiSSL->EVP_PKEY_CTX_dup((ctx))
#define EVP_PKEY_meth_set_verify(pmeth, verify_init, verify) IAmiSSL->EVP_PKEY_meth_set_verify((pmeth), (verify_init), (verify))
#define i2b_PublicKey_bio(out, pk) IAmiSSL->i2b_PublicKey_bio((out), (pk))
#define TS_CONF_set_certs(conf, section, certs, ctx) IAmiSSL->TS_CONF_set_certs((conf), (section), (certs), (ctx))
#define EVP_PKEY_asn1_get0_info(ppkey_id, ppkey_base_id, ppkey_flags, pinfo, ppem_str, ameth) IAmiSSL->EVP_PKEY_asn1_get0_info((ppkey_id), (ppkey_base_id), (ppkey_flags), (pinfo), (ppem_str), (ameth))
#define TS_VERIFY_CTX_free(ctx) IAmiSSL->TS_VERIFY_CTX_free((ctx))
#define TS_REQ_get_ext_by_critical(a, crit, lastpos) IAmiSSL->TS_REQ_get_ext_by_critical((a), (crit), (lastpos))
#define TS_RESP_CTX_set_serial_cb(ctx, cb, data) IAmiSSL->TS_RESP_CTX_set_serial_cb((ctx), (cb), (data))
#define X509_CRL_get_meth_data(crl) IAmiSSL->X509_CRL_get_meth_data((crl))
#define TS_RESP_CTX_set_time_cb(ctx, cb, data) IAmiSSL->TS_RESP_CTX_set_time_cb((ctx), (cb), (data))
#define TS_MSG_IMPRINT_get_msg(a) IAmiSSL->TS_MSG_IMPRINT_get_msg((a))
#define TS_TST_INFO_ext_free(a) IAmiSSL->TS_TST_INFO_ext_free((a))
#define TS_REQ_get_version(a) IAmiSSL->TS_REQ_get_version((a))
#define TS_REQ_add_ext(a, ex, loc) IAmiSSL->TS_REQ_add_ext((a), (ex), (loc))
#define EVP_PKEY_CTX_set_app_data(ctx, data) IAmiSSL->EVP_PKEY_CTX_set_app_data((ctx), (data))
#define OBJ_bsearch_(key, base, num, size, cmp) IAmiSSL->OBJ_bsearch_((key), (base), (num), (size), (cmp))
#define EVP_PKEY_meth_set_verifyctx(pmeth, verifyctx_init, verifyctx) IAmiSSL->EVP_PKEY_meth_set_verifyctx((pmeth), (verifyctx_init), (verifyctx))
#define i2d_PKCS7_bio_stream(out, p7, in, flags) IAmiSSL->i2d_PKCS7_bio_stream((out), (p7), (in), (flags))
#define PKCS7_sign_add_signer(p7, signcert, pkey, md, flags) IAmiSSL->PKCS7_sign_add_signer((p7), (signcert), (pkey), (md), (flags))
#define d2i_TS_TST_INFO_bio(bp, a) IAmiSSL->d2i_TS_TST_INFO_bio((bp), (a))
#define TS_TST_INFO_get_ordering(a) IAmiSSL->TS_TST_INFO_get_ordering((a))
#define TS_RESP_print_bio(bio, a) IAmiSSL->TS_RESP_print_bio((bio), (a))
#define TS_TST_INFO_get_exts(a) IAmiSSL->TS_TST_INFO_get_exts((a))
#define PKCS5_pbe2_set_iv(cipher, iter, salt, saltlen, aiv, prf_nid) IAmiSSL->PKCS5_pbe2_set_iv((cipher), (iter), (salt), (saltlen), (aiv), (prf_nid))
#define b2i_PrivateKey(in, length) IAmiSSL->b2i_PrivateKey((in), (length))
#define EVP_PKEY_CTX_get_app_data(ctx) IAmiSSL->EVP_PKEY_CTX_get_app_data((ctx))
#define TS_REQ_set_cert_req(a, cert_req) IAmiSSL->TS_REQ_set_cert_req((a), (cert_req))
#define TS_CONF_set_serial(conf, section, cb, ctx) IAmiSSL->TS_CONF_set_serial((conf), (section), (cb), (ctx))
#define TS_TST_INFO_free(a) IAmiSSL->TS_TST_INFO_free((a))
#define TS_RESP_verify_response(ctx, response) IAmiSSL->TS_RESP_verify_response((ctx), (response))
#define i2d_ESS_ISSUER_SERIAL(a, pp) IAmiSSL->i2d_ESS_ISSUER_SERIAL((a), (pp))
#define TS_ACCURACY_get_seconds(a) IAmiSSL->TS_ACCURACY_get_seconds((a))
#define EVP_CIPHER_do_all(fn, arg) IAmiSSL->EVP_CIPHER_do_all((fn), (arg))
#define b2i_PrivateKey_bio(in) IAmiSSL->b2i_PrivateKey_bio((in))
#define OCSP_CERTID_dup(a) IAmiSSL->OCSP_CERTID_dup((a))
#define X509_PUBKEY_get0_param(ppkalg, pk, ppklen, pa, pub) IAmiSSL->X509_PUBKEY_get0_param((ppkalg), (pk), (ppklen), (pa), (pub))
#define TS_MSG_IMPRINT_dup(a) IAmiSSL->TS_MSG_IMPRINT_dup((a))
#define PKCS7_print_ctx(out, x, indent, pctx) IAmiSSL->PKCS7_print_ctx((out), (x), (indent), (pctx))
#define i2d_TS_REQ_bio(fp, a) IAmiSSL->i2d_TS_REQ_bio((fp), (a))
#define EVP_PKEY_asn1_set_param(ameth, param_decode, param_encode, param_missing, param_copy, param_cmp, param_print) IAmiSSL->EVP_PKEY_asn1_set_param((ameth), (param_decode), (param_encode), (param_missing), (param_copy), (param_cmp), (param_print))
#define EVP_PKEY_meth_set_encrypt(pmeth, encrypt_init, encryptfn) IAmiSSL->EVP_PKEY_meth_set_encrypt((pmeth), (encrypt_init), (encryptfn))
#define ASN1_PCTX_set_flags(p, flags) IAmiSSL->ASN1_PCTX_set_flags((p), (flags))
#define i2d_ESS_CERT_ID(a, pp) IAmiSSL->i2d_ESS_CERT_ID((a), (pp))
#define TS_VERIFY_CTX_new() IAmiSSL->TS_VERIFY_CTX_new()
#define TS_RESP_CTX_set_extension_cb(ctx, cb, data) IAmiSSL->TS_RESP_CTX_set_extension_cb((ctx), (cb), (data))
#define TS_RESP_CTX_set_status_info_cond(ctx, status, text) IAmiSSL->TS_RESP_CTX_set_status_info_cond((ctx), (status), (text))
#define EVP_PKEY_verify(ctx, sig, siglen, tbs, tbslen) IAmiSSL->EVP_PKEY_verify((ctx), (sig), (siglen), (tbs), (tbslen))
#define X509_CRL_METHOD_new(crl_init, crl_free, crl_lookup, crl_verify) IAmiSSL->X509_CRL_METHOD_new((crl_init), (crl_free), (crl_lookup), (crl_verify))
#define EVP_DigestSignFinal(ctx, sigret, siglen) IAmiSSL->EVP_DigestSignFinal((ctx), (sigret), (siglen))
#define TS_RESP_CTX_set_def_policy(ctx, def_policy) IAmiSSL->TS_RESP_CTX_set_def_policy((ctx), (def_policy))
#define TS_RESP_create_response(ctx, req_bio) IAmiSSL->TS_RESP_create_response((ctx), (req_bio))
#define PKCS7_SIGNER_INFO_get0_algs(si, pk, pdig, psig) IAmiSSL->PKCS7_SIGNER_INFO_get0_algs((si), (pk), (pdig), (psig))
#define TS_TST_INFO_get_nonce(a) IAmiSSL->TS_TST_INFO_get_nonce((a))
#define EVP_PKEY_decrypt_old(dec_key, enc_key, enc_key_len, private_key) IAmiSSL->EVP_PKEY_decrypt_old((dec_key), (enc_key), (enc_key_len), (private_key))
#define TS_TST_INFO_set_policy_id(a, policy_id) IAmiSSL->TS_TST_INFO_set_policy_id((a), (policy_id))
#define TS_CONF_set_ess_cert_id_chain(conf, section, ctx) IAmiSSL->TS_CONF_set_ess_cert_id_chain((conf), (section), (ctx))
#define EVP_PKEY_CTX_get0_pkey(ctx) IAmiSSL->EVP_PKEY_CTX_get0_pkey((ctx))
#define d2i_TS_REQ(a, pp, length) IAmiSSL->d2i_TS_REQ((a), (pp), (length))
#define EVP_PKEY_asn1_find_str(pe, str, len) IAmiSSL->EVP_PKEY_asn1_find_str((pe), (str), (len))
#define BIO_f_asn1() IAmiSSL->BIO_f_asn1()
#define ESS_SIGNING_CERT_new() IAmiSSL->ESS_SIGNING_CERT_new()
#define EVP_PBE_find(type, pbe_nid, pcnid, pmnid, pkeygen) IAmiSSL->EVP_PBE_find((type), (pbe_nid), (pcnid), (pmnid), (pkeygen))
#define X509_CRL_get0_by_cert(crl, ret, x) IAmiSSL->X509_CRL_get0_by_cert((crl), (ret), (x))
#define EVP_PKEY_derive(ctx, key, keylen) IAmiSSL->EVP_PKEY_derive((ctx), (key), (keylen))
#define i2d_TS_REQ(a, pp) IAmiSSL->i2d_TS_REQ((a), (pp))
#define TS_TST_INFO_delete_ext(a, loc) IAmiSSL->TS_TST_INFO_delete_ext((a), (loc))
#define ESS_ISSUER_SERIAL_free(a) IAmiSSL->ESS_ISSUER_SERIAL_free((a))
#define ASN1_PCTX_set_str_flags(p, flags) IAmiSSL->ASN1_PCTX_set_str_flags((p), (flags))
#define TS_CONF_set_signer_key(conf, section, key, pass, ctx) IAmiSSL->TS_CONF_set_signer_key((conf), (section), (key), (pass), (ctx))
#define TS_ACCURACY_get_millis(a) IAmiSSL->TS_ACCURACY_get_millis((a))
#define TS_RESP_get_token(a) IAmiSSL->TS_RESP_get_token((a))
#define TS_ACCURACY_dup(a) IAmiSSL->TS_ACCURACY_dup((a))
#define X509_CRL_set_default_method(meth) IAmiSSL->X509_CRL_set_default_method((meth))
#define TS_RESP_free(a) IAmiSSL->TS_RESP_free((a))
#define ISSUING_DIST_POINT_free(a) IAmiSSL->ISSUING_DIST_POINT_free((a))
#define ESS_ISSUER_SERIAL_new() IAmiSSL->ESS_ISSUER_SERIAL_new()
#define PKCS7_add1_attrib_digest(si, md, mdlen) IAmiSSL->PKCS7_add1_attrib_digest((si), (md), (mdlen))
#define TS_RESP_CTX_add_md(ctx, md) IAmiSSL->TS_RESP_CTX_add_md((ctx), (md))
#define TS_TST_INFO_dup(a) IAmiSSL->TS_TST_INFO_dup((a))
#define PEM_write_bio_Parameters(bp, x) IAmiSSL->PEM_write_bio_Parameters((bp), (x))
#define TS_TST_INFO_get_accuracy(a) IAmiSSL->TS_TST_INFO_get_accuracy((a))
#define X509_CRL_get0_by_serial(crl, ret, serial) IAmiSSL->X509_CRL_get0_by_serial((crl), (ret), (serial))
#define TS_TST_INFO_set_version(a, version) IAmiSSL->TS_TST_INFO_set_version((a), (version))
#define TS_RESP_CTX_get_tst_info(ctx) IAmiSSL->TS_RESP_CTX_get_tst_info((ctx))
#define TS_RESP_verify_signature(token, certs, store, signer_out) IAmiSSL->TS_RESP_verify_signature((token), (certs), (store), (signer_out))
#define TS_TST_INFO_get_tsa(a) IAmiSSL->TS_TST_INFO_get_tsa((a))
#define TS_STATUS_INFO_new() IAmiSSL->TS_STATUS_INFO_new()
#define EVP_PKEY_CTX_get_cb(ctx) IAmiSSL->EVP_PKEY_CTX_get_cb((ctx))
#define TS_REQ_get_ext_d2i(a, nid, crit, idx) IAmiSSL->TS_REQ_get_ext_d2i((a), (nid), (crit), (idx))
#define GENERAL_NAME_set0_othername(gen, oid, value) IAmiSSL->GENERAL_NAME_set0_othername((gen), (oid), (value))
#define TS_TST_INFO_get_ext_count(a) IAmiSSL->TS_TST_INFO_get_ext_count((a))
#define TS_RESP_CTX_get_request(ctx) IAmiSSL->TS_RESP_CTX_get_request((ctx))
#define EVP_PKEY_meth_set_signctx(pmeth, signctx_init, signctx) IAmiSSL->EVP_PKEY_meth_set_signctx((pmeth), (signctx_init), (signctx))
#define EVP_PKEY_asn1_copy(dst, src) IAmiSSL->EVP_PKEY_asn1_copy((dst), (src))
#define ASN1_TYPE_cmp(a, b) IAmiSSL->ASN1_TYPE_cmp((a), (b))
#define EVP_CIPHER_do_all_sorted(fn, arg) IAmiSSL->EVP_CIPHER_do_all_sorted((fn), (arg))
#define EVP_PKEY_CTX_free(ctx) IAmiSSL->EVP_PKEY_CTX_free((ctx))
#define X509_STORE_CTX_get1_certs(xs, nm) IAmiSSL->X509_STORE_CTX_get1_certs((xs), (nm))
#define EVP_PKEY_CTX_get_operation(ctx) IAmiSSL->EVP_PKEY_CTX_get_operation((ctx))
#define d2i_ESS_SIGNING_CERT(a, pp, length) IAmiSSL->d2i_ESS_SIGNING_CERT((a), (pp), (length))
#define TS_CONF_set_ordering(conf, section, ctx) IAmiSSL->TS_CONF_set_ordering((conf), (section), (ctx))
#define EVP_PBE_alg_add_type(pbe_type, pbe_nid, cipher_nid, md_nid, keygen) IAmiSSL->EVP_PBE_alg_add_type((pbe_type), (pbe_nid), (cipher_nid), (md_nid), (keygen))
#define TS_REQ_set_version(a, version) IAmiSSL->TS_REQ_set_version((a), (version))
#define EVP_PKEY_get0(pkey) IAmiSSL->EVP_PKEY_get0((pkey))
#define BIO_asn1_set_suffix(b, suffix, suffix_free) IAmiSSL->BIO_asn1_set_suffix((b), (suffix), (suffix_free))
#define i2d_TS_STATUS_INFO(a, pp) IAmiSSL->i2d_TS_STATUS_INFO((a), (pp))
#define EVP_MD_do_all(fn, arg) IAmiSSL->EVP_MD_do_all((fn), (arg))
#define TS_TST_INFO_set_accuracy(a, accuracy) IAmiSSL->TS_TST_INFO_set_accuracy((a), (accuracy))
#define PKCS7_add_attrib_content_type(si, coid) IAmiSSL->PKCS7_add_attrib_content_type((si), (coid))
#define EVP_PKEY_meth_add0(pmeth) IAmiSSL->EVP_PKEY_meth_add0((pmeth))
#define TS_TST_INFO_set_tsa(a, tsa) IAmiSSL->TS_TST_INFO_set_tsa((a), (tsa))
#define EVP_PKEY_meth_new(id, flags) IAmiSSL->EVP_PKEY_meth_new((id), (flags))
#define TS_CONF_set_accuracy(conf, section, ctx) IAmiSSL->TS_CONF_set_accuracy((conf), (section), (ctx))
#define ASN1_PCTX_set_oid_flags(p, flags) IAmiSSL->ASN1_PCTX_set_oid_flags((p), (flags))
#define ESS_SIGNING_CERT_dup(a) IAmiSSL->ESS_SIGNING_CERT_dup((a))
#define d2i_TS_REQ_bio(fp, a) IAmiSSL->d2i_TS_REQ_bio((fp), (a))
#define X509_time_adj_ex(s, offset_day, offset_sec, t) IAmiSSL->X509_time_adj_ex((s), (offset_day), (offset_sec), (t))
#define TS_RESP_CTX_add_flags(ctx, flags) IAmiSSL->TS_RESP_CTX_add_flags((ctx), (flags))
#define d2i_TS_STATUS_INFO(a, pp, length) IAmiSSL->d2i_TS_STATUS_INFO((a), (pp), (length))
#define TS_MSG_IMPRINT_set_msg(a, d, len) IAmiSSL->TS_MSG_IMPRINT_set_msg((a), (d), (len))
#define BIO_asn1_get_suffix(b, psuffix, psuffix_free) IAmiSSL->BIO_asn1_get_suffix((b), (psuffix), (psuffix_free))
#define TS_REQ_free(a) IAmiSSL->TS_REQ_free((a))
#define EVP_PKEY_meth_free(pmeth) IAmiSSL->EVP_PKEY_meth_free((pmeth))
#define TS_REQ_get_exts(a) IAmiSSL->TS_REQ_get_exts((a))
#define TS_RESP_CTX_set_clock_precision_digits(ctx, clock_precision_digits) IAmiSSL->TS_RESP_CTX_set_clock_precision_digits((ctx), (clock_precision_digits))
#define TS_RESP_CTX_add_failure_info(ctx, failure) IAmiSSL->TS_RESP_CTX_add_failure_info((ctx), (failure))
#define i2d_TS_RESP_bio(fp, a) IAmiSSL->i2d_TS_RESP_bio((fp), (a))
#define EVP_PKEY_CTX_get0_peerkey(ctx) IAmiSSL->EVP_PKEY_CTX_get0_peerkey((ctx))
#define TS_REQ_new() IAmiSSL->TS_REQ_new()
#define TS_MSG_IMPRINT_new() IAmiSSL->TS_MSG_IMPRINT_new()
#define EVP_PKEY_meth_find(type) IAmiSSL->EVP_PKEY_meth_find((type))
#define EVP_PKEY_get_id(pkey) IAmiSSL->EVP_PKEY_get_id((pkey))
#define TS_TST_INFO_set_serial(a, serial) IAmiSSL->TS_TST_INFO_set_serial((a), (serial))
#define a2i_GENERAL_NAME(out, method, ctx, gen_type, value, is_nc) IAmiSSL->a2i_GENERAL_NAME((out), (method), (ctx), (gen_type), (value), (is_nc))
#define TS_CONF_set_crypto_device(conf, section, device) IAmiSSL->TS_CONF_set_crypto_device((conf), (section), (device))
#define EVP_PKEY_verify_init(ctx) IAmiSSL->EVP_PKEY_verify_init((ctx))
#define TS_CONF_set_policies(conf, section, ctx) IAmiSSL->TS_CONF_set_policies((conf), (section), (ctx))
#define ASN1_PCTX_new() IAmiSSL->ASN1_PCTX_new()
#define ESS_CERT_ID_free(a) IAmiSSL->ESS_CERT_ID_free((a))
#define TS_MSG_IMPRINT_free(a) IAmiSSL->TS_MSG_IMPRINT_free((a))
#define TS_VERIFY_CTX_init(ctx) IAmiSSL->TS_VERIFY_CTX_init((ctx))
#define PKCS7_stream(boundary, p7) IAmiSSL->PKCS7_stream((boundary), (p7))
#define TS_RESP_CTX_set_certs(ctx, certs) IAmiSSL->TS_RESP_CTX_set_certs((ctx), (certs))
#define TS_CONF_set_def_policy(conf, section, policy, ctx) IAmiSSL->TS_CONF_set_def_policy((conf), (section), (policy), (ctx))
#define ASN1_GENERALIZEDTIME_adj(s, t, offset_day, offset_sec) IAmiSSL->ASN1_GENERALIZEDTIME_adj((s), (t), (offset_day), (offset_sec))
#define TS_ACCURACY_free(a) IAmiSSL->TS_ACCURACY_free((a))
#define TS_RESP_get_tst_info(a) IAmiSSL->TS_RESP_get_tst_info((a))
#define EVP_PKEY_derive_set_peer(ctx, peer) IAmiSSL->EVP_PKEY_derive_set_peer((ctx), (peer))
#define PEM_read_bio_Parameters(bp, x) IAmiSSL->PEM_read_bio_Parameters((bp), (x))
#define TS_CONF_set_clock_precision_digits(conf, section, ctx) IAmiSSL->TS_CONF_set_clock_precision_digits((conf), (section), (ctx))
#define ESS_ISSUER_SERIAL_dup(a) IAmiSSL->ESS_ISSUER_SERIAL_dup((a))
#define TS_ACCURACY_get_micros(a) IAmiSSL->TS_ACCURACY_get_micros((a))
#define ASN1_PCTX_get_str_flags(p) IAmiSSL->ASN1_PCTX_get_str_flags((p))
#define NAME_CONSTRAINTS_check(x, nc) IAmiSSL->NAME_CONSTRAINTS_check((x), (nc))
#define ASN1_BIT_STRING_check(a, flags, flags_len) IAmiSSL->ASN1_BIT_STRING_check((a), (flags), (flags_len))
#define X509_check_akid(issuer, akid) IAmiSSL->X509_check_akid((issuer), (akid))
#define ASN1_PCTX_free(p) IAmiSSL->ASN1_PCTX_free((p))
#define PEM_write_bio_ASN1_stream(out, val, in, flags, hdr, it) IAmiSSL->PEM_write_bio_ASN1_stream((out), (val), (in), (flags), (hdr), (it))
#define i2d_ASN1_bio_stream(out, val, in, flags, it) IAmiSSL->i2d_ASN1_bio_stream((out), (val), (in), (flags), (it))
#define TS_X509_ALGOR_print_bio(bio, alg) IAmiSSL->TS_X509_ALGOR_print_bio((bio), (alg))
#define EVP_PKEY_meth_set_cleanup(pmeth, cleanup) IAmiSSL->EVP_PKEY_meth_set_cleanup((pmeth), (cleanup))
#define EVP_PKEY_asn1_free(ameth) IAmiSSL->EVP_PKEY_asn1_free((ameth))
#define ESS_SIGNING_CERT_free(a) IAmiSSL->ESS_SIGNING_CERT_free((a))
#define TS_TST_INFO_set_msg_imprint(a, msg_imprint) IAmiSSL->TS_TST_INFO_set_msg_imprint((a), (msg_imprint))
#define GENERAL_NAME_cmp(a, b) IAmiSSL->GENERAL_NAME_cmp((a), (b))
#define d2i_ASN1_SET_ANY(a, pp, length) IAmiSSL->d2i_ASN1_SET_ANY((a), (pp), (length))
#define d2i_ASN1_SEQUENCE_ANY(a, pp, length) IAmiSSL->d2i_ASN1_SEQUENCE_ANY((a), (pp), (length))
#define GENERAL_NAME_get0_otherName(gen, poid, pvalue) IAmiSSL->GENERAL_NAME_get0_otherName((gen), (poid), (pvalue))
#define d2i_ESS_CERT_ID(a, pp, length) IAmiSSL->d2i_ESS_CERT_ID((a), (pp), (length))
#define OBJ_find_sigid_algs(signid, pdig_nid, ppkey_nid) IAmiSSL->OBJ_find_sigid_algs((signid), (pdig_nid), (ppkey_nid))
#define EVP_PKEY_meth_set_keygen(pmeth, keygen_init, keygen) IAmiSSL->EVP_PKEY_meth_set_keygen((pmeth), (keygen_init), (keygen))
#define PKCS5_PBKDF2_HMAC(pass, passlen, salt, saltlen, iter, digest, keylen, out) IAmiSSL->PKCS5_PBKDF2_HMAC((pass), (passlen), (salt), (saltlen), (iter), (digest), (keylen), (out))
#define EVP_PKEY_paramgen(ctx, ppkey) IAmiSSL->EVP_PKEY_paramgen((ctx), (ppkey))
#define EVP_PKEY_meth_set_paramgen(pmeth, paramgen_init, paramgen) IAmiSSL->EVP_PKEY_meth_set_paramgen((pmeth), (paramgen_init), (paramgen))
#define BIO_new_PKCS7(out, p7) IAmiSSL->BIO_new_PKCS7((out), (p7))
#define EVP_PKEY_verify_recover(ctx, rout, routlen, sig, siglen) IAmiSSL->EVP_PKEY_verify_recover((ctx), (rout), (routlen), (sig), (siglen))
#define TS_ext_print_bio(bio, extensions) IAmiSSL->TS_ext_print_bio((bio), (extensions))
#define TS_ASN1_INTEGER_print_bio(bio, num) IAmiSSL->TS_ASN1_INTEGER_print_bio((bio), (num))
#define EVP_PKEY_set_type(pkey, type) IAmiSSL->EVP_PKEY_set_type((pkey), (type))
#define TS_ACCURACY_set_micros(a, micros) IAmiSSL->TS_ACCURACY_set_micros((a), (micros))
#define TS_REQ_to_TS_VERIFY_CTX(req, ctx) IAmiSSL->TS_REQ_to_TS_VERIFY_CTX((req), (ctx))
#define EVP_PKEY_meth_set_copy(pmeth, copy) IAmiSSL->EVP_PKEY_meth_set_copy((pmeth), (copy))
#define ASN1_PCTX_set_cert_flags(p, flags) IAmiSSL->ASN1_PCTX_set_cert_flags((p), (flags))
#define TS_TST_INFO_get_ext(a, loc) IAmiSSL->TS_TST_INFO_get_ext((a), (loc))
#define EVP_PKEY_asn1_set_ctrl(ameth, pkey_ctrl) IAmiSSL->EVP_PKEY_asn1_set_ctrl((ameth), (pkey_ctrl))
#define TS_TST_INFO_get_ext_by_critical(a, crit, lastpos) IAmiSSL->TS_TST_INFO_get_ext_by_critical((a), (crit), (lastpos))
#define EVP_PKEY_CTX_new_id(id, e) IAmiSSL->EVP_PKEY_CTX_new_id((id), (e))
#define TS_REQ_get_ext_by_OBJ(a, obj, lastpos) IAmiSSL->TS_REQ_get_ext_by_OBJ((a), (obj), (lastpos))
#define TS_CONF_set_signer_cert(conf, section, cert, ctx) IAmiSSL->TS_CONF_set_signer_cert((conf), (section), (cert), (ctx))
#define X509_NAME_hash_old(x) IAmiSSL->X509_NAME_hash_old((x))
#define ASN1_TIME_set_string(s, str) IAmiSSL->ASN1_TIME_set_string((s), (str))
#define EVP_MD_get_flags(md) IAmiSSL->EVP_MD_get_flags((md))
#define TS_RESP_CTX_free(ctx) IAmiSSL->TS_RESP_CTX_free((ctx))
#define OSSL_HTTP_REQ_CTX_add1_header(rctx, name, value) IAmiSSL->OSSL_HTTP_REQ_CTX_add1_header((rctx), (name), (value))
#define OBSOLETE_OCSP_REQ_CTX_set1_req(rctx, req) IAmiSSL->OBSOLETE_OCSP_REQ_CTX_set1_req((rctx), (req))
#define X509_STORE_set_verify_cb(xs, verify_cb) IAmiSSL->X509_STORE_set_verify_cb((xs), (verify_cb))
#define X509_STORE_CTX_get0_current_crl(ctx) IAmiSSL->X509_STORE_CTX_get0_current_crl((ctx))
#define X509_STORE_CTX_get0_parent_ctx(ctx) IAmiSSL->X509_STORE_CTX_get0_parent_ctx((ctx))
#define X509_STORE_CTX_get0_current_issuer(ctx) IAmiSSL->X509_STORE_CTX_get0_current_issuer((ctx))
#define EVP_CIPHER_CTX_copy(out, in) IAmiSSL->EVP_CIPHER_CTX_copy((out), (in))
#define UI_method_get_prompt_constructor(method) IAmiSSL->UI_method_get_prompt_constructor((method))
#define UI_method_set_prompt_constructor(method, prompt_constructor) IAmiSSL->UI_method_set_prompt_constructor((method), (prompt_constructor))
#define EVP_read_pw_string_min(buf, minlen, maxlen, prompt, verify) IAmiSSL->EVP_read_pw_string_min((buf), (minlen), (maxlen), (prompt), (verify))
#define CRYPTO_cts128_encrypt(in, out, len, key, ivec, cbc) IAmiSSL->CRYPTO_cts128_encrypt((in), (out), (len), (key), (ivec), (cbc))
#define CRYPTO_cts128_decrypt_block(in, out, len, key, ivec, block) IAmiSSL->CRYPTO_cts128_decrypt_block((in), (out), (len), (key), (ivec), (block))
#define CRYPTO_cfb128_1_encrypt(in, out, bits, key, ivec, num, enc, block) IAmiSSL->CRYPTO_cfb128_1_encrypt((in), (out), (bits), (key), (ivec), (num), (enc), (block))
#define CRYPTO_cbc128_encrypt(in, out, len, key, ivec, block) IAmiSSL->CRYPTO_cbc128_encrypt((in), (out), (len), (key), (ivec), (block))
#define CRYPTO_ctr128_encrypt(in, out, len, key, ivec, ecount_buf, num, block) IAmiSSL->CRYPTO_ctr128_encrypt((in), (out), (len), (key), (ivec), (ecount_buf), (num), (block))
#define CRYPTO_ofb128_encrypt(in, out, len, key, ivec, num, block) IAmiSSL->CRYPTO_ofb128_encrypt((in), (out), (len), (key), (ivec), (num), (block))
#define CRYPTO_cts128_decrypt(in, out, len, key, ivec, cbc) IAmiSSL->CRYPTO_cts128_decrypt((in), (out), (len), (key), (ivec), (cbc))
#define CRYPTO_cts128_encrypt_block(in, out, len, key, ivec, block) IAmiSSL->CRYPTO_cts128_encrypt_block((in), (out), (len), (key), (ivec), (block))
#define CRYPTO_cbc128_decrypt(in, out, len, key, ivec, block) IAmiSSL->CRYPTO_cbc128_decrypt((in), (out), (len), (key), (ivec), (block))
#define CRYPTO_cfb128_encrypt(in, out, len, key, ivec, num, enc, block) IAmiSSL->CRYPTO_cfb128_encrypt((in), (out), (len), (key), (ivec), (num), (enc), (block))
#define CRYPTO_cfb128_8_encrypt(in, out, length, key, ivec, num, enc, block) IAmiSSL->CRYPTO_cfb128_8_encrypt((in), (out), (length), (key), (ivec), (num), (enc), (block))
#define OPENSSL_gmtime(timer, result) IAmiSSL->OPENSSL_gmtime((timer), (result))
#define OPENSSL_gmtime_adj(tm, offset_day, offset_sec) IAmiSSL->OPENSSL_gmtime_adj((tm), (offset_day), (offset_sec))
#define OPENSSL_gmtime_diff(pday, psec, from, to) IAmiSSL->OPENSSL_gmtime_diff((pday), (psec), (from), (to))
#define EVP_PKEY_meth_get0_info(ppkey_id, pflags, meth) IAmiSSL->EVP_PKEY_meth_get0_info((ppkey_id), (pflags), (meth))
#define EVP_PKEY_meth_copy(dst, src) IAmiSSL->EVP_PKEY_meth_copy((dst), (src))
#define RSA_padding_add_PKCS1_PSS_mgf1(rsa, EM, mHash, Hash, mgf1Hash, sLen) IAmiSSL->RSA_padding_add_PKCS1_PSS_mgf1((rsa), (EM), (mHash), (Hash), (mgf1Hash), (sLen))
#define RSA_verify_PKCS1_PSS_mgf1(rsa, mHash, Hash, mgf1Hash, EM, sLen) IAmiSSL->RSA_verify_PKCS1_PSS_mgf1((rsa), (mHash), (Hash), (mgf1Hash), (EM), (sLen))
#define X509_ALGOR_set_md(alg, md) IAmiSSL->X509_ALGOR_set_md((alg), (md))
#define CMAC_CTX_copy(out, in) IAmiSSL->CMAC_CTX_copy((out), (in))
#define CMAC_CTX_free(ctx) IAmiSSL->CMAC_CTX_free((ctx))
#define CMAC_CTX_get0_cipher_ctx(ctx) IAmiSSL->CMAC_CTX_get0_cipher_ctx((ctx))
#define CMAC_CTX_cleanup(ctx) IAmiSSL->CMAC_CTX_cleanup((ctx))
#define CMAC_Init(ctx, key, keylen, cipher, impl) IAmiSSL->CMAC_Init((ctx), (key), (keylen), (cipher), (impl))
#define CMAC_Update(ctx, data, dlen) IAmiSSL->CMAC_Update((ctx), (data), (dlen))
#define CMAC_resume(ctx) IAmiSSL->CMAC_resume((ctx))
#define CMAC_CTX_new() IAmiSSL->CMAC_CTX_new()
#define CMAC_Final(ctx, out, poutlen) IAmiSSL->CMAC_Final((ctx), (out), (poutlen))
#define CRYPTO_ctr128_encrypt_ctr32(in, out, len, key, ivec, ecount_buf, num, ctr) IAmiSSL->CRYPTO_ctr128_encrypt_ctr32((in), (out), (len), (key), (ivec), (ecount_buf), (num), (ctr))
#define CRYPTO_gcm128_release(ctx) IAmiSSL->CRYPTO_gcm128_release((ctx))
#define CRYPTO_ccm128_decrypt_ccm64(ctx, inp, out, len, stream) IAmiSSL->CRYPTO_ccm128_decrypt_ccm64((ctx), (inp), (out), (len), (stream))
#define CRYPTO_ccm128_encrypt(ctx, inp, out, len) IAmiSSL->CRYPTO_ccm128_encrypt((ctx), (inp), (out), (len))
#define CRYPTO_gcm128_encrypt(ctx, in, out, len) IAmiSSL->CRYPTO_gcm128_encrypt((ctx), (in), (out), (len))
#define CRYPTO_xts128_encrypt(ctx, iv, inp, out, len, enc) IAmiSSL->CRYPTO_xts128_encrypt((ctx), (iv), (inp), (out), (len), (enc))
#define CRYPTO_nistcts128_decrypt_block(in, out, len, key, ivec, block) IAmiSSL->CRYPTO_nistcts128_decrypt_block((in), (out), (len), (key), (ivec), (block))
#define CRYPTO_gcm128_setiv(ctx, iv, len) IAmiSSL->CRYPTO_gcm128_setiv((ctx), (iv), (len))
#define CRYPTO_nistcts128_encrypt(in, out, len, key, ivec, cbc) IAmiSSL->CRYPTO_nistcts128_encrypt((in), (out), (len), (key), (ivec), (cbc))
#define CRYPTO_gcm128_tag(ctx, tag, len) IAmiSSL->CRYPTO_gcm128_tag((ctx), (tag), (len))
#define CRYPTO_ccm128_encrypt_ccm64(ctx, inp, out, len, stream) IAmiSSL->CRYPTO_ccm128_encrypt_ccm64((ctx), (inp), (out), (len), (stream))
#define CRYPTO_ccm128_setiv(ctx, nonce, nlen, mlen) IAmiSSL->CRYPTO_ccm128_setiv((ctx), (nonce), (nlen), (mlen))
#define CRYPTO_nistcts128_encrypt_block(in, out, len, key, ivec, block) IAmiSSL->CRYPTO_nistcts128_encrypt_block((in), (out), (len), (key), (ivec), (block))
#define CRYPTO_gcm128_aad(ctx, aad, len) IAmiSSL->CRYPTO_gcm128_aad((ctx), (aad), (len))
#define CRYPTO_ccm128_init(ctx, M, L, key, block) IAmiSSL->CRYPTO_ccm128_init((ctx), (M), (L), (key), (block))
#define CRYPTO_nistcts128_decrypt(in, out, len, key, ivec, cbc) IAmiSSL->CRYPTO_nistcts128_decrypt((in), (out), (len), (key), (ivec), (cbc))
#define CRYPTO_gcm128_new(key, block) IAmiSSL->CRYPTO_gcm128_new((key), (block))
#define CRYPTO_ccm128_tag(ctx, tag, len) IAmiSSL->CRYPTO_ccm128_tag((ctx), (tag), (len))
#define CRYPTO_ccm128_decrypt(ctx, inp, out, len) IAmiSSL->CRYPTO_ccm128_decrypt((ctx), (inp), (out), (len))
#define CRYPTO_ccm128_aad(ctx, aad, alen) IAmiSSL->CRYPTO_ccm128_aad((ctx), (aad), (alen))
#define CRYPTO_gcm128_init(ctx, key, block) IAmiSSL->CRYPTO_gcm128_init((ctx), (key), (block))
#define CRYPTO_gcm128_decrypt(ctx, in, out, len) IAmiSSL->CRYPTO_gcm128_decrypt((ctx), (in), (out), (len))
#define CRYPTO_gcm128_decrypt_ctr32(ctx, in, out, len, stream) IAmiSSL->CRYPTO_gcm128_decrypt_ctr32((ctx), (in), (out), (len), (stream))
#define CRYPTO_gcm128_encrypt_ctr32(ctx, in, out, len, stream) IAmiSSL->CRYPTO_gcm128_encrypt_ctr32((ctx), (in), (out), (len), (stream))
#define CRYPTO_gcm128_finish(ctx, tag, len) IAmiSSL->CRYPTO_gcm128_finish((ctx), (tag), (len))
#define PKCS5_pbkdf2_set(iter, salt, saltlen, prf_nid, keylen) IAmiSSL->PKCS5_pbkdf2_set((iter), (salt), (saltlen), (prf_nid), (keylen))
#define RSA_PSS_PARAMS_new() IAmiSSL->RSA_PSS_PARAMS_new()
#define d2i_RSA_PSS_PARAMS(a, pp, length) IAmiSSL->d2i_RSA_PSS_PARAMS((a), (pp), (length))
#define RSA_PSS_PARAMS_free(a) IAmiSSL->RSA_PSS_PARAMS_free((a))
#define i2d_RSA_PSS_PARAMS(a, out) IAmiSSL->i2d_RSA_PSS_PARAMS((a), (out))
#define POLICY_MAPPING_it() IAmiSSL->POLICY_MAPPING_it()
#define NAME_CONSTRAINTS_it() IAmiSSL->NAME_CONSTRAINTS_it()
#define ASN1_OCTET_STRING_NDEF_it() IAmiSSL->ASN1_OCTET_STRING_NDEF_it()
#define POLICY_CONSTRAINTS_it() IAmiSSL->POLICY_CONSTRAINTS_it()
#define POLICY_MAPPINGS_it() IAmiSSL->POLICY_MAPPINGS_it()
#define GENERAL_SUBTREE_it() IAmiSSL->GENERAL_SUBTREE_it()
#define X509_EXTENSIONS_it() IAmiSSL->X509_EXTENSIONS_it()
#define X509_ALGORS_it() IAmiSSL->X509_ALGORS_it()
#define CMS_ContentInfo_it() IAmiSSL->CMS_ContentInfo_it()
#define CMS_ReceiptRequest_it() IAmiSSL->CMS_ReceiptRequest_it()
#define ASN1_SEQUENCE_ANY_it() IAmiSSL->ASN1_SEQUENCE_ANY_it()
#define ASN1_SET_ANY_it() IAmiSSL->ASN1_SET_ANY_it()
#define ISSUING_DIST_POINT_it() IAmiSSL->ISSUING_DIST_POINT_it()
#define RSA_PSS_PARAMS_it() IAmiSSL->RSA_PSS_PARAMS_it()
#define PEM_write_bio_DHxparams(bp, x) IAmiSSL->PEM_write_bio_DHxparams((bp), (x))
#define X509_ALGOR_cmp(a, b) IAmiSSL->X509_ALGOR_cmp((a), (b))
#define ASN1_STRING_clear_free(a) IAmiSSL->ASN1_STRING_clear_free((a))
#define ASN1_TIME_diff(pday, psec, from, to) IAmiSSL->ASN1_TIME_diff((pday), (psec), (from), (to))
#define BIO_hex_string(out, indent, width, data, datalen) IAmiSSL->BIO_hex_string((out), (indent), (width), (data), (datalen))
#define OBSOLETE_BUF_strnlen(str, maxlen) IAmiSSL->OBSOLETE_BUF_strnlen((str), (maxlen))
#define CMS_RecipientEncryptedKey_cert_cmp(rek, cert) IAmiSSL->CMS_RecipientEncryptedKey_cert_cmp((rek), (cert))
#define CMS_RecipientEncryptedKey_get0_id(rek, keyid, tm, other, issuer, sno) IAmiSSL->CMS_RecipientEncryptedKey_get0_id((rek), (keyid), (tm), (other), (issuer), (sno))
#define CMS_RecipientInfo_encrypt(cms, ri) IAmiSSL->CMS_RecipientInfo_encrypt((cms), (ri))
#define CMS_RecipientInfo_get0_pkey_ctx(ri) IAmiSSL->CMS_RecipientInfo_get0_pkey_ctx((ri))
#define CMS_RecipientInfo_kari_decrypt(cms, ri, rek) IAmiSSL->CMS_RecipientInfo_kari_decrypt((cms), (ri), (rek))
#define CMS_RecipientInfo_kari_get0_alg(ri, palg, pukm) IAmiSSL->CMS_RecipientInfo_kari_get0_alg((ri), (palg), (pukm))
#define CMS_RecipientInfo_kari_get0_ctx(ri) IAmiSSL->CMS_RecipientInfo_kari_get0_ctx((ri))
#define CMS_RecipientInfo_kari_get0_orig_id(ri, pubalg, pubkey, keyid, issuer, sno) IAmiSSL->CMS_RecipientInfo_kari_get0_orig_id((ri), (pubalg), (pubkey), (keyid), (issuer), (sno))
#define CMS_RecipientInfo_kari_get0_reks(ri) IAmiSSL->CMS_RecipientInfo_kari_get0_reks((ri))
#define CMS_RecipientInfo_kari_orig_id_cmp(ri, cert) IAmiSSL->CMS_RecipientInfo_kari_orig_id_cmp((ri), (cert))
#define CMS_RecipientInfo_kari_set0_pkey(ri, pk) IAmiSSL->CMS_RecipientInfo_kari_set0_pkey((ri), (pk))
#define CMS_SharedInfo_encode(pder, kekalg, ukm, keylen) IAmiSSL->CMS_SharedInfo_encode((pder), (kekalg), (ukm), (keylen))
#define CMS_SignerInfo_get0_md_ctx(si) IAmiSSL->CMS_SignerInfo_get0_md_ctx((si))
#define CMS_SignerInfo_get0_pkey_ctx(si) IAmiSSL->CMS_SignerInfo_get0_pkey_ctx((si))
#define CMS_SignerInfo_get0_signature(si) IAmiSSL->CMS_SignerInfo_get0_signature((si))
#define d2i_DHxparams(a, pp, length) IAmiSSL->d2i_DHxparams((a), (pp), (length))
#define i2d_DHxparams(dh, pp) IAmiSSL->i2d_DHxparams((dh), (pp))
#define DH_compute_key_padded(key, pub_key, dh) IAmiSSL->DH_compute_key_padded((key), (pub_key), (dh))
#define DH_get_1024_160() IAmiSSL->DH_get_1024_160()
#define DH_get_2048_224() IAmiSSL->DH_get_2048_224()
#define DH_get_2048_256() IAmiSSL->DH_get_2048_256()
#define DH_KDF_X9_42(out, outlen, Z, Zlen, key_oid, ukm, ukmlen, md) IAmiSSL->DH_KDF_X9_42((out), (outlen), (Z), (Zlen), (key_oid), (ukm), (ukmlen), (md))
#define EC_curve_nid2nist(nid) IAmiSSL->EC_curve_nid2nist((nid))
#define EC_curve_nist2nid(name) IAmiSSL->EC_curve_nist2nid((name))
#define EC_GROUP_get_mont_data(group) IAmiSSL->EC_GROUP_get_mont_data((group))
#define ECDH_KDF_X9_62(out, outlen, Z, Zlen, sinfo, sinfolen, md) IAmiSSL->ECDH_KDF_X9_62((out), (outlen), (Z), (Zlen), (sinfo), (sinfolen), (md))
#define EVP_aes_128_cbc_hmac_sha256() IAmiSSL->EVP_aes_128_cbc_hmac_sha256()
#define EVP_aes_128_wrap() IAmiSSL->EVP_aes_128_wrap()
#define EVP_aes_192_wrap() IAmiSSL->EVP_aes_192_wrap()
#define EVP_aes_256_cbc_hmac_sha256() IAmiSSL->EVP_aes_256_cbc_hmac_sha256()
#define EVP_aes_256_wrap() IAmiSSL->EVP_aes_256_wrap()
#define EVP_des_ede3_wrap() IAmiSSL->EVP_des_ede3_wrap()
#define CRYPTO_128_unwrap(key, iv, out, in, inlen, block) IAmiSSL->CRYPTO_128_unwrap((key), (iv), (out), (in), (inlen), (block))
#define CRYPTO_128_wrap(key, iv, out, in, inlen, block) IAmiSSL->CRYPTO_128_wrap((key), (iv), (out), (in), (inlen), (block))
#define OSSL_HTTP_REQ_CTX_get0_mem_bio(rctx) IAmiSSL->OSSL_HTTP_REQ_CTX_get0_mem_bio((rctx))
#define OBSOLETE_OCSP_REQ_CTX_http(rctx, op, path) IAmiSSL->OBSOLETE_OCSP_REQ_CTX_http((rctx), (op), (path))
#define OBSOLETE_OCSP_REQ_CTX_i2d(rctx, it, val) IAmiSSL->OBSOLETE_OCSP_REQ_CTX_i2d((rctx), (it), (val))
#define OSSL_HTTP_REQ_CTX_nbio(rctx) IAmiSSL->OSSL_HTTP_REQ_CTX_nbio((rctx))
#define OSSL_HTTP_REQ_CTX_nbio_d2i(rctx, pval, it) IAmiSSL->OSSL_HTTP_REQ_CTX_nbio_d2i((rctx), (pval), (it))
#define OBSOLETE_OCSP_REQ_CTX_new(io, maxline) IAmiSSL->OBSOLETE_OCSP_REQ_CTX_new((io), (maxline))
#define OSSL_HTTP_REQ_CTX_set_max_response_length(rctx, len) IAmiSSL->OSSL_HTTP_REQ_CTX_set_max_response_length((rctx), (len))
#define d2i_RSA_OAEP_PARAMS(a, in, len) IAmiSSL->d2i_RSA_OAEP_PARAMS((a), (in), (len))
#define RSA_OAEP_PARAMS_free(a) IAmiSSL->RSA_OAEP_PARAMS_free((a))
#define RSA_OAEP_PARAMS_it() IAmiSSL->RSA_OAEP_PARAMS_it()
#define RSA_OAEP_PARAMS_new() IAmiSSL->RSA_OAEP_PARAMS_new()
#define RSA_padding_add_PKCS1_OAEP_mgf1(to, tlen, from, flen, param, plen, md, mgf1md) IAmiSSL->RSA_padding_add_PKCS1_OAEP_mgf1((to), (tlen), (from), (flen), (param), (plen), (md), (mgf1md))
#define RSA_padding_check_PKCS1_OAEP_mgf1(to, tlen, from, flen, num, param, plen, md, mgf1md) IAmiSSL->RSA_padding_check_PKCS1_OAEP_mgf1((to), (tlen), (from), (flen), (num), (param), (plen), (md), (mgf1md))
#define OPENSSL_sk_deep_copy(sk, c, f) IAmiSSL->OPENSSL_sk_deep_copy((sk), (c), (f))
#define i2d_re_X509_tbs(x, pp) IAmiSSL->i2d_re_X509_tbs((x), (pp))
#define X509_chain_check_suiteb(perror_depth, x, chain, flags) IAmiSSL->X509_chain_check_suiteb((perror_depth), (x), (chain), (flags))
#define X509_chain_up_ref(chain) IAmiSSL->X509_chain_up_ref((chain))
#define X509_CRL_check_suiteb(crl, pk, flags) IAmiSSL->X509_CRL_check_suiteb((crl), (pk), (flags))
#define X509_CRL_diff(base, newer, skey, md, flags) IAmiSSL->X509_CRL_diff((base), (newer), (skey), (md), (flags))
#define OBSOLETE_X509_CRL_http_nbio(rctx, pcrl) IAmiSSL->OBSOLETE_X509_CRL_http_nbio((rctx), (pcrl))
#define X509_get0_signature(psig, palg, x) IAmiSSL->X509_get0_signature((psig), (palg), (x))
#define X509_get_signature_nid(x) IAmiSSL->X509_get_signature_nid((x))
#define OBSOLETE_X509_http_nbio(rctx, pcert) IAmiSSL->OBSOLETE_X509_http_nbio((rctx), (pcert))
#define X509_REVOKED_dup(rev) IAmiSSL->X509_REVOKED_dup((rev))
#define X509_STORE_CTX_get0_store(ctx) IAmiSSL->X509_STORE_CTX_get0_store((ctx))
#define X509_VERIFY_PARAM_add1_host(param, name, namelen) IAmiSSL->X509_VERIFY_PARAM_add1_host((param), (name), (namelen))
#define X509_VERIFY_PARAM_get0(id) IAmiSSL->X509_VERIFY_PARAM_get0((id))
#define X509_VERIFY_PARAM_get0_name(param) IAmiSSL->X509_VERIFY_PARAM_get0_name((param))
#define X509_VERIFY_PARAM_get0_peername(param) IAmiSSL->X509_VERIFY_PARAM_get0_peername((param))
#define X509_VERIFY_PARAM_get_count() IAmiSSL->X509_VERIFY_PARAM_get_count()
#define X509_VERIFY_PARAM_set1_email(param, email, emaillen) IAmiSSL->X509_VERIFY_PARAM_set1_email((param), (email), (emaillen))
#define X509_VERIFY_PARAM_set1_host(param, name, namelen) IAmiSSL->X509_VERIFY_PARAM_set1_host((param), (name), (namelen))
#define X509_VERIFY_PARAM_set1_ip(param, ip, iplen) IAmiSSL->X509_VERIFY_PARAM_set1_ip((param), (ip), (iplen))
#define X509_VERIFY_PARAM_set1_ip_asc(param, ipasc) IAmiSSL->X509_VERIFY_PARAM_set1_ip_asc((param), (ipasc))
#define X509_VERIFY_PARAM_set_hostflags(param, flags) IAmiSSL->X509_VERIFY_PARAM_set_hostflags((param), (flags))
#define X509_check_email(x, chk, chklen, flags) IAmiSSL->X509_check_email((x), (chk), (chklen), (flags))
#define X509_check_host(x, chk, chklen, flags, peername) IAmiSSL->X509_check_host((x), (chk), (chklen), (flags), (peername))
#define X509_check_ip(x, chk, chklen, flags) IAmiSSL->X509_check_ip((x), (chk), (chklen), (flags))
#define X509_check_ip_asc(x, ipasc, flags) IAmiSSL->X509_check_ip_asc((x), (ipasc), (flags))
#define EVP_PKEY_asn1_set_item(ameth, item_verify, item_sign) IAmiSSL->EVP_PKEY_asn1_set_item((ameth), (item_verify), (item_sign))
#define DTLS_client_method() IAmiSSL->DTLS_client_method()
#define DTLS_method() IAmiSSL->DTLS_method()
#define DTLS_server_method() IAmiSSL->DTLS_server_method()
#define SSL_certs_clear(s) IAmiSSL->SSL_certs_clear((s))
#define SSL_CIPHER_find(ssl, ptr) IAmiSSL->SSL_CIPHER_find((ssl), (ptr))
#define SSL_CONF_cmd(ctx, cmd, value) IAmiSSL->SSL_CONF_cmd((ctx), (cmd), (value))
#define SSL_CONF_cmd_argv(cctx, pargc, pargv) IAmiSSL->SSL_CONF_cmd_argv((cctx), (pargc), (pargv))
#define SSL_CONF_cmd_value_type(cctx, cmd) IAmiSSL->SSL_CONF_cmd_value_type((cctx), (cmd))
#define SSL_CONF_CTX_clear_flags(cctx, flags) IAmiSSL->SSL_CONF_CTX_clear_flags((cctx), (flags))
#define SSL_CONF_CTX_finish(cctx) IAmiSSL->SSL_CONF_CTX_finish((cctx))
#define SSL_CONF_CTX_free(cctx) IAmiSSL->SSL_CONF_CTX_free((cctx))
#define SSL_CONF_CTX_new() IAmiSSL->SSL_CONF_CTX_new()
#define SSL_CONF_CTX_set1_prefix(cctx, pre) IAmiSSL->SSL_CONF_CTX_set1_prefix((cctx), (pre))
#define SSL_CONF_CTX_set_flags(cctx, flags) IAmiSSL->SSL_CONF_CTX_set_flags((cctx), (flags))
#define SSL_CONF_CTX_set_ssl(cctx, ssl) IAmiSSL->SSL_CONF_CTX_set_ssl((cctx), (ssl))
#define SSL_CONF_CTX_set_ssl_ctx(cctx, ctx) IAmiSSL->SSL_CONF_CTX_set_ssl_ctx((cctx), (ctx))
#define SSL_CTX_add_client_custom_ext(ctx, ext_type, add_cb, free_cb, add_arg, parse_cb, parse_arg) IAmiSSL->SSL_CTX_add_client_custom_ext((ctx), (ext_type), (add_cb), (free_cb), (add_arg), (parse_cb), (parse_arg))
#define SSL_CTX_add_server_custom_ext(ctx, ext_type, add_cb, free_cb, add_arg, parse_cb, parse_arg) IAmiSSL->SSL_CTX_add_server_custom_ext((ctx), (ext_type), (add_cb), (free_cb), (add_arg), (parse_cb), (parse_arg))
#define SSL_CTX_get0_certificate(ctx) IAmiSSL->SSL_CTX_get0_certificate((ctx))
#define SSL_CTX_get0_param(ctx) IAmiSSL->SSL_CTX_get0_param((ctx))
#define SSL_CTX_get0_privatekey(ctx) IAmiSSL->SSL_CTX_get0_privatekey((ctx))
#define SSL_CTX_get_ssl_method(ctx) IAmiSSL->SSL_CTX_get_ssl_method((ctx))
#define SSL_CTX_set_alpn_protos(ctx, protos, protos_len) IAmiSSL->SSL_CTX_set_alpn_protos((ctx), (protos), (protos_len))
#define SSL_CTX_set_alpn_select_cb(ctx, cb, arg) IAmiSSL->SSL_CTX_set_alpn_select_cb((ctx), (cb), (arg))
#define SSL_CTX_set_cert_cb(c, cb, arg) IAmiSSL->SSL_CTX_set_cert_cb((c), (cb), (arg))
#define SSL_CTX_use_serverinfo(ctx, serverinfo, serverinfo_length) IAmiSSL->SSL_CTX_use_serverinfo((ctx), (serverinfo), (serverinfo_length))
#define SSL_CTX_use_serverinfo_file(ctx, file) IAmiSSL->SSL_CTX_use_serverinfo_file((ctx), (file))
#define SSL_extension_supported(ext_type) IAmiSSL->SSL_extension_supported((ext_type))
#define SSL_get0_alpn_selected(ssl, data, len) IAmiSSL->SSL_get0_alpn_selected((ssl), (data), (len))
#define SSL_get0_param(ssl) IAmiSSL->SSL_get0_param((ssl))
#define SSL_is_server(s) IAmiSSL->SSL_is_server((s))
#define SSL_set_alpn_protos(ssl, protos, protos_len) IAmiSSL->SSL_set_alpn_protos((ssl), (protos), (protos_len))
#define SSL_set_cert_cb(s, cb, arg) IAmiSSL->SSL_set_cert_cb((s), (cb), (arg))
#define SSL_check_chain(s, x, pk, chain) IAmiSSL->SSL_check_chain((s), (x), (pk), (chain))
#define SSL_get_shared_sigalgs(s, idx, psign, phash, psignandhash, rsig, rhash) IAmiSSL->SSL_get_shared_sigalgs((s), (idx), (psign), (phash), (psignandhash), (rsig), (rhash))
#define SSL_get_sigalgs(s, idx, psign, phash, psignandhash, rsig, rhash) IAmiSSL->SSL_get_sigalgs((s), (idx), (psign), (phash), (psignandhash), (rsig), (rhash))
#define ASN1_add_stable_module() IAmiSSL->ASN1_add_stable_module()
#define ASN1_buf_print(bp, buf, buflen, off) IAmiSSL->ASN1_buf_print((bp), (buf), (buflen), (off))
#define ASN1_ENUMERATED_get_int64(pr, a) IAmiSSL->ASN1_ENUMERATED_get_int64((pr), (a))
#define ASN1_ENUMERATED_set_int64(a, r) IAmiSSL->ASN1_ENUMERATED_set_int64((a), (r))
#define ASN1_INTEGER_get_int64(pr, a) IAmiSSL->ASN1_INTEGER_get_int64((pr), (a))
#define ASN1_INTEGER_get_uint64(pr, a) IAmiSSL->ASN1_INTEGER_get_uint64((pr), (a))
#define ASN1_INTEGER_set_int64(a, r) IAmiSSL->ASN1_INTEGER_set_int64((a), (r))
#define ASN1_INTEGER_set_uint64(a, r) IAmiSSL->ASN1_INTEGER_set_uint64((a), (r))
#define ASN1_SCTX_free(p) IAmiSSL->ASN1_SCTX_free((p))
#define ASN1_SCTX_get_app_data(p) IAmiSSL->ASN1_SCTX_get_app_data((p))
#define ASN1_SCTX_get_flags(p) IAmiSSL->ASN1_SCTX_get_flags((p))
#define ASN1_SCTX_get_item(p) IAmiSSL->ASN1_SCTX_get_item((p))
#define ASN1_SCTX_get_template(p) IAmiSSL->ASN1_SCTX_get_template((p))
#define ASN1_SCTX_new(scan_cb) IAmiSSL->ASN1_SCTX_new((scan_cb))
#define ASN1_SCTX_set_app_data(p, data) IAmiSSL->ASN1_SCTX_set_app_data((p), (data))
#define ASN1_str2mask(str, pmask) IAmiSSL->ASN1_str2mask((str), (pmask))
#define ASN1_TYPE_pack_sequence(it, s, t) IAmiSSL->ASN1_TYPE_pack_sequence((it), (s), (t))
#define ASN1_TYPE_unpack_sequence(it, t) IAmiSSL->ASN1_TYPE_unpack_sequence((it), (t))
#define ASYNC_block_pause() IAmiSSL->ASYNC_block_pause()
#define ASYNC_cleanup_thread() IAmiSSL->ASYNC_cleanup_thread()
#define ASYNC_get_current_job() IAmiSSL->ASYNC_get_current_job()
#define ASYNC_init_thread(max_size, init_size) IAmiSSL->ASYNC_init_thread((max_size), (init_size))
#define ASYNC_pause_job() IAmiSSL->ASYNC_pause_job()
#define ASYNC_start_job(job, ctx, ret, func, args, size) IAmiSSL->ASYNC_start_job((job), (ctx), (ret), (func), (args), (size))
#define ASYNC_unblock_pause() IAmiSSL->ASYNC_unblock_pause()
#define ERR_load_ASYNC_strings() IAmiSSL->ERR_load_ASYNC_strings()
#define BIO_accept_ex(accept_sock, addr, options) IAmiSSL->BIO_accept_ex((accept_sock), (addr), (options))
#define BIO_ADDR_clear(ap) IAmiSSL->BIO_ADDR_clear((ap))
#define BIO_ADDR_family(ap) IAmiSSL->BIO_ADDR_family((ap))
#define BIO_ADDR_free(ap) IAmiSSL->BIO_ADDR_free((ap))
#define BIO_ADDR_hostname_string(ap, numeric) IAmiSSL->BIO_ADDR_hostname_string((ap), (numeric))
#define BIO_ADDR_new() IAmiSSL->BIO_ADDR_new()
#define BIO_ADDR_path_string(ap) IAmiSSL->BIO_ADDR_path_string((ap))
#define BIO_ADDR_rawaddress(ap, p, l) IAmiSSL->BIO_ADDR_rawaddress((ap), (p), (l))
#define BIO_ADDR_rawmake(ap, family, where, wherelen, port) IAmiSSL->BIO_ADDR_rawmake((ap), (family), (where), (wherelen), (port))
#define BIO_ADDR_rawport(ap) IAmiSSL->BIO_ADDR_rawport((ap))
#define BIO_ADDR_service_string(ap, numeric) IAmiSSL->BIO_ADDR_service_string((ap), (numeric))
#define BIO_ADDRINFO_address(bai) IAmiSSL->BIO_ADDRINFO_address((bai))
#define BIO_ADDRINFO_family(bai) IAmiSSL->BIO_ADDRINFO_family((bai))
#define BIO_ADDRINFO_free(bai) IAmiSSL->BIO_ADDRINFO_free((bai))
#define BIO_ADDRINFO_next(bai) IAmiSSL->BIO_ADDRINFO_next((bai))
#define BIO_ADDRINFO_protocol(bai) IAmiSSL->BIO_ADDRINFO_protocol((bai))
#define BIO_ADDRINFO_socktype(bai) IAmiSSL->BIO_ADDRINFO_socktype((bai))
#define BIO_closesocket(sock) IAmiSSL->BIO_closesocket((sock))
#define BIO_connect(sock, addr, options) IAmiSSL->BIO_connect((sock), (addr), (options))
#define BIO_listen(sock, addr, options) IAmiSSL->BIO_listen((sock), (addr), (options))
#define BIO_lookup(host, service, lookup_type, family, socktype, res) IAmiSSL->BIO_lookup((host), (service), (lookup_type), (family), (socktype), (res))
#define BIO_parse_hostserv(hostserv, host, service, hostserv_prio) IAmiSSL->BIO_parse_hostserv((hostserv), (host), (service), (hostserv_prio))
#define BIO_s_secmem() IAmiSSL->BIO_s_secmem()
#define BIO_sock_info(sock, type, info) IAmiSSL->BIO_sock_info((sock), (type), (info))
#define BIO_socket(domain, socktype, protocol, options) IAmiSSL->BIO_socket((domain), (socktype), (protocol), (options))
#define BN_abs_is_word(a, w) IAmiSSL->BN_abs_is_word((a), (w))
#define BN_bn2binpad(a, to, tolen) IAmiSSL->BN_bn2binpad((a), (to), (tolen))
#define BN_bn2lebinpad(a, to, tolen) IAmiSSL->BN_bn2lebinpad((a), (to), (tolen))
#define BN_CTX_secure_new() IAmiSSL->BN_CTX_secure_new()
#define BN_GENCB_free(cb) IAmiSSL->BN_GENCB_free((cb))
#define BN_GENCB_get_arg(cb) IAmiSSL->BN_GENCB_get_arg((cb))
#define BN_GENCB_new() IAmiSSL->BN_GENCB_new()
#define BN_GENCB_set(gencb, callback, cb_arg) IAmiSSL->BN_GENCB_set((gencb), (callback), (cb_arg))
#define BN_GENCB_set_old(gencb, callback, cb_arg) IAmiSSL->BN_GENCB_set_old((gencb), (callback), (cb_arg))
#define BN_generate_dsa_nonce(out, range, priv, message, message_len, ctx) IAmiSSL->BN_generate_dsa_nonce((out), (range), (priv), (message), (message_len), (ctx))
#define BN_get_flags(b, n) IAmiSSL->BN_get_flags((b), (n))
#define BN_is_negative(a) IAmiSSL->BN_is_negative((a))
#define BN_is_odd(a) IAmiSSL->BN_is_odd((a))
#define BN_is_one(a) IAmiSSL->BN_is_one((a))
#define BN_is_word(a, w) IAmiSSL->BN_is_word((a), (w))
#define BN_is_zero(a) IAmiSSL->BN_is_zero((a))
#define BN_lebin2bn(s, len, ret) IAmiSSL->BN_lebin2bn((s), (len), (ret))
#define BN_nist_mod_func(p) IAmiSSL->BN_nist_mod_func((p))
#define BN_secure_new() IAmiSSL->BN_secure_new()
#define BN_security_bits(L, N) IAmiSSL->BN_security_bits((L), (N))
#define BN_set_flags(b, n) IAmiSSL->BN_set_flags((b), (n))
#define BN_to_montgomery(r, a, mont, ctx) IAmiSSL->BN_to_montgomery((r), (a), (mont), (ctx))
#define BN_with_flags(dest, b, flags) IAmiSSL->BN_with_flags((dest), (b), (flags))
#define BN_zero_ex(a) IAmiSSL->BN_zero_ex((a))
#define BUF_MEM_new_ex(flags) IAmiSSL->BUF_MEM_new_ex((flags))
#define COMP_CTX_get_method(ctx) IAmiSSL->COMP_CTX_get_method((ctx))
#define COMP_CTX_get_type(ctx) IAmiSSL->COMP_CTX_get_type((ctx))
#define COMP_get_name(meth) IAmiSSL->COMP_get_name((meth))
#define COMP_get_type(meth) IAmiSSL->COMP_get_type((meth))
#define CRYPTO_clear_free(str, num, file, line) IAmiSSL->CRYPTO_clear_free((str), (num), (file), (line))
#define CRYPTO_clear_realloc(str, old_len, num, file, line) IAmiSSL->CRYPTO_clear_realloc((str), (old_len), (num), (file), (line))
#define CRYPTO_free_ex_index(class_index, idx) IAmiSSL->CRYPTO_free_ex_index((class_index), (idx))
#define CRYPTO_memdup(data, siz, file, line) IAmiSSL->CRYPTO_memdup((data), (siz), (file), (line))
#define CRYPTO_secure_actual_size(ptr) IAmiSSL->CRYPTO_secure_actual_size((ptr))
#define CRYPTO_secure_allocated(ptr) IAmiSSL->CRYPTO_secure_allocated((ptr))
#define CRYPTO_secure_free(ptr, file, line) IAmiSSL->CRYPTO_secure_free((ptr), (file), (line))
#define CRYPTO_secure_malloc(num, file, line) IAmiSSL->CRYPTO_secure_malloc((num), (file), (line))
#define CRYPTO_secure_malloc_done() IAmiSSL->CRYPTO_secure_malloc_done()
#define CRYPTO_secure_malloc_init(sz, minsize) IAmiSSL->CRYPTO_secure_malloc_init((sz), (minsize))
#define CRYPTO_secure_malloc_initialized() IAmiSSL->CRYPTO_secure_malloc_initialized()
#define CRYPTO_secure_used() IAmiSSL->CRYPTO_secure_used()
#define CRYPTO_secure_zalloc(num, file, line) IAmiSSL->CRYPTO_secure_zalloc((num), (file), (line))
#define CRYPTO_strndup(str, s, file, line) IAmiSSL->CRYPTO_strndup((str), (s), (file), (line))
#define CRYPTO_zalloc(num, file, line) IAmiSSL->CRYPTO_zalloc((num), (file), (line))
#define OPENSSL_atexit(handler) IAmiSSL->OPENSSL_atexit((handler))
#define OPENSSL_cleanup() IAmiSSL->OPENSSL_cleanup()
#define OPENSSL_init_crypto(opts, settings) IAmiSSL->OPENSSL_init_crypto((opts), (settings))
#define OPENSSL_INIT_free(settings) IAmiSSL->OPENSSL_INIT_free((settings))
#define OPENSSL_INIT_new() IAmiSSL->OPENSSL_INIT_new()
#define OPENSSL_strlcat(dst, src, size) IAmiSSL->OPENSSL_strlcat((dst), (src), (size))
#define OPENSSL_strlcpy(dst, src, size) IAmiSSL->OPENSSL_strlcpy((dst), (src), (size))
#define OPENSSL_strnlen(str, maxlen) IAmiSSL->OPENSSL_strnlen((str), (maxlen))
#define OPENSSL_thread_stop() IAmiSSL->OPENSSL_thread_stop()
#define OpenSSL_version(type) IAmiSSL->OpenSSL_version((type))
#define OpenSSL_version_num() IAmiSSL->OpenSSL_version_num()
#define DH_bits(dh) IAmiSSL->DH_bits((dh))
#define DH_security_bits(dh) IAmiSSL->DH_security_bits((dh))
#define DSA_security_bits(d) IAmiSSL->DSA_security_bits((d))
#define EC_GROUP_get0_cofactor(group) IAmiSSL->EC_GROUP_get0_cofactor((group))
#define EC_GROUP_get0_order(group) IAmiSSL->EC_GROUP_get0_order((group))
#define EC_GROUP_order_bits(group) IAmiSSL->EC_GROUP_order_bits((group))
#define EC_KEY_get_default_method() IAmiSSL->EC_KEY_get_default_method()
#define EC_KEY_get_ex_data(key, idx) IAmiSSL->EC_KEY_get_ex_data((key), (idx))
#define EC_KEY_get_method(key) IAmiSSL->EC_KEY_get_method((key))
#define EC_KEY_key2buf(key, form, pbuf, ctx) IAmiSSL->EC_KEY_key2buf((key), (form), (pbuf), (ctx))
#define EC_KEY_METHOD_free(meth) IAmiSSL->EC_KEY_METHOD_free((meth))
#define EC_KEY_METHOD_get_compute_key(meth, pck) IAmiSSL->EC_KEY_METHOD_get_compute_key((meth), (pck))
#define EC_KEY_METHOD_get_init(meth, pinit, pfinish, pcopy, pset_group, pset_private, pset_public) IAmiSSL->EC_KEY_METHOD_get_init((meth), (pinit), (pfinish), (pcopy), (pset_group), (pset_private), (pset_public))
#define EC_KEY_METHOD_get_keygen(meth, pkeygen) IAmiSSL->EC_KEY_METHOD_get_keygen((meth), (pkeygen))
#define EC_KEY_METHOD_get_sign(meth, psign, psign_setup, psign_sig) IAmiSSL->EC_KEY_METHOD_get_sign((meth), (psign), (psign_setup), (psign_sig))
#define EC_KEY_METHOD_get_verify(meth, pverify, pverify_sig) IAmiSSL->EC_KEY_METHOD_get_verify((meth), (pverify), (pverify_sig))
#define EC_KEY_METHOD_new(meth) IAmiSSL->EC_KEY_METHOD_new((meth))
#define EC_KEY_METHOD_set_compute_key(meth, ckey) IAmiSSL->EC_KEY_METHOD_set_compute_key((meth), (ckey))
#define EC_KEY_METHOD_set_init(meth, init, finish, copy, set_group, set_private, set_public) IAmiSSL->EC_KEY_METHOD_set_init((meth), (init), (finish), (copy), (set_group), (set_private), (set_public))
#define EC_KEY_METHOD_set_keygen(meth, keygen) IAmiSSL->EC_KEY_METHOD_set_keygen((meth), (keygen))
#define EC_KEY_METHOD_set_sign(meth, sign, sign_setup, sign_sig) IAmiSSL->EC_KEY_METHOD_set_sign((meth), (sign), (sign_setup), (sign_sig))
#define EC_KEY_METHOD_set_verify(meth, verify, verify_sig) IAmiSSL->EC_KEY_METHOD_set_verify((meth), (verify), (verify_sig))
#define EC_KEY_new_method(engine) IAmiSSL->EC_KEY_new_method((engine))
#define EC_KEY_oct2key(key, buf, len, ctx) IAmiSSL->EC_KEY_oct2key((key), (buf), (len), (ctx))
#define EC_KEY_oct2priv(key, buf, len) IAmiSSL->EC_KEY_oct2priv((key), (buf), (len))
#define EC_KEY_OpenSSL() IAmiSSL->EC_KEY_OpenSSL()
#define EC_KEY_priv2buf(eckey, pbuf) IAmiSSL->EC_KEY_priv2buf((eckey), (pbuf))
#define EC_KEY_priv2oct(eckey, buf, len) IAmiSSL->EC_KEY_priv2oct((eckey), (buf), (len))
#define EC_KEY_set_default_method(meth) IAmiSSL->EC_KEY_set_default_method((meth))
#define EC_KEY_set_ex_data(key, idx, arg) IAmiSSL->EC_KEY_set_ex_data((key), (idx), (arg))
#define EC_KEY_set_method(key, meth) IAmiSSL->EC_KEY_set_method((key), (meth))
#define EC_POINT_point2buf(group, point, form, pbuf, ctx) IAmiSSL->EC_POINT_point2buf((group), (point), (form), (pbuf), (ctx))
#define ECDSA_SIG_get0(sig, pr, ps) IAmiSSL->ECDSA_SIG_get0((sig), (pr), (ps))
#define ENGINE_get_default_EC() IAmiSSL->ENGINE_get_default_EC()
#define ENGINE_get_EC(e) IAmiSSL->ENGINE_get_EC((e))
#define ENGINE_register_all_EC() IAmiSSL->ENGINE_register_all_EC()
#define ENGINE_register_EC(e) IAmiSSL->ENGINE_register_EC((e))
#define ENGINE_set_default_EC(e) IAmiSSL->ENGINE_set_default_EC((e))
#define ENGINE_set_EC(e, ecdsa_meth) IAmiSSL->ENGINE_set_EC((e), (ecdsa_meth))
#define ENGINE_unregister_EC(e) IAmiSSL->ENGINE_unregister_EC((e))
#define EVP_aes_128_ocb() IAmiSSL->EVP_aes_128_ocb()
#define EVP_aes_128_wrap_pad() IAmiSSL->EVP_aes_128_wrap_pad()
#define EVP_aes_192_ocb() IAmiSSL->EVP_aes_192_ocb()
#define EVP_aes_192_wrap_pad() IAmiSSL->EVP_aes_192_wrap_pad()
#define EVP_aes_256_ocb() IAmiSSL->EVP_aes_256_ocb()
#define EVP_aes_256_wrap_pad() IAmiSSL->EVP_aes_256_wrap_pad()
#define EVP_camellia_128_ctr() IAmiSSL->EVP_camellia_128_ctr()
#define EVP_camellia_192_ctr() IAmiSSL->EVP_camellia_192_ctr()
#define EVP_camellia_256_ctr() IAmiSSL->EVP_camellia_256_ctr()
#define EVP_chacha20() IAmiSSL->EVP_chacha20()
#define EVP_chacha20_poly1305() IAmiSSL->EVP_chacha20_poly1305()
#define EVP_CIPHER_CTX_buf_noconst(ctx) IAmiSSL->EVP_CIPHER_CTX_buf_noconst((ctx))
#define EVP_CIPHER_CTX_get_cipher_data(ctx) IAmiSSL->EVP_CIPHER_CTX_get_cipher_data((ctx))
#define EVP_CIPHER_CTX_set_cipher_data(ctx, cipher_data) IAmiSSL->EVP_CIPHER_CTX_set_cipher_data((ctx), (cipher_data))
#define EVP_CIPHER_CTX_is_encrypting(ctx) IAmiSSL->EVP_CIPHER_CTX_is_encrypting((ctx))
#define EVP_CIPHER_CTX_iv(ctx) IAmiSSL->EVP_CIPHER_CTX_iv((ctx))
#define EVP_CIPHER_CTX_iv_noconst(ctx) IAmiSSL->EVP_CIPHER_CTX_iv_noconst((ctx))
#define EVP_CIPHER_CTX_get_num(ctx) IAmiSSL->EVP_CIPHER_CTX_get_num((ctx))
#define EVP_CIPHER_CTX_original_iv(ctx) IAmiSSL->EVP_CIPHER_CTX_original_iv((ctx))
#define EVP_CIPHER_CTX_reset(ctx) IAmiSSL->EVP_CIPHER_CTX_reset((ctx))
#define EVP_CIPHER_CTX_set_num(ctx, num) IAmiSSL->EVP_CIPHER_CTX_set_num((ctx), (num))
#define EVP_CIPHER_impl_ctx_size(cipher) IAmiSSL->EVP_CIPHER_impl_ctx_size((cipher))
#define EVP_CIPHER_meth_dup(cipher) IAmiSSL->EVP_CIPHER_meth_dup((cipher))
#define EVP_CIPHER_meth_free(cipher) IAmiSSL->EVP_CIPHER_meth_free((cipher))
#define EVP_CIPHER_meth_get_cleanup(cipher) IAmiSSL->EVP_CIPHER_meth_get_cleanup((cipher))
#define EVP_CIPHER_meth_get_ctrl(cipher) IAmiSSL->EVP_CIPHER_meth_get_ctrl((cipher))
#define EVP_CIPHER_meth_get_do_cipher(cipher) IAmiSSL->EVP_CIPHER_meth_get_do_cipher((cipher))
#define EVP_CIPHER_meth_get_get_asn1_params(cipher) IAmiSSL->EVP_CIPHER_meth_get_get_asn1_params((cipher))
#define EVP_CIPHER_meth_get_init(cipher) IAmiSSL->EVP_CIPHER_meth_get_init((cipher))
#define EVP_CIPHER_meth_get_set_asn1_params(cipher) IAmiSSL->EVP_CIPHER_meth_get_set_asn1_params((cipher))
#define EVP_CIPHER_meth_new(cipher_type, block_size, key_len) IAmiSSL->EVP_CIPHER_meth_new((cipher_type), (block_size), (key_len))
#define EVP_CIPHER_meth_set_cleanup(cipher, cleanup) IAmiSSL->EVP_CIPHER_meth_set_cleanup((cipher), (cleanup))
#define EVP_CIPHER_meth_set_ctrl(cipher, ctrl) IAmiSSL->EVP_CIPHER_meth_set_ctrl((cipher), (ctrl))
#define EVP_CIPHER_meth_set_do_cipher(cipher, do_cipher) IAmiSSL->EVP_CIPHER_meth_set_do_cipher((cipher), (do_cipher))
#define EVP_CIPHER_meth_set_flags(cipher, flags) IAmiSSL->EVP_CIPHER_meth_set_flags((cipher), (flags))
#define EVP_CIPHER_meth_set_get_asn1_params(cipher, get_asn1_parameters) IAmiSSL->EVP_CIPHER_meth_set_get_asn1_params((cipher), (get_asn1_parameters))
#define EVP_CIPHER_meth_set_impl_ctx_size(cipher, ctx_size) IAmiSSL->EVP_CIPHER_meth_set_impl_ctx_size((cipher), (ctx_size))
#define EVP_CIPHER_meth_set_init(cipher, init) IAmiSSL->EVP_CIPHER_meth_set_init((cipher), (init))
#define EVP_CIPHER_meth_set_iv_length(cipher, iv_len) IAmiSSL->EVP_CIPHER_meth_set_iv_length((cipher), (iv_len))
#define EVP_CIPHER_meth_set_set_asn1_params(cipher, set_asn1_parameters) IAmiSSL->EVP_CIPHER_meth_set_set_asn1_params((cipher), (set_asn1_parameters))
#define EVP_ENCODE_CTX_free(ctx) IAmiSSL->EVP_ENCODE_CTX_free((ctx))
#define EVP_ENCODE_CTX_new() IAmiSSL->EVP_ENCODE_CTX_new()
#define EVP_ENCODE_CTX_num(ctx) IAmiSSL->EVP_ENCODE_CTX_num((ctx))
#define EVP_md5_sha1() IAmiSSL->EVP_md5_sha1()
#define EVP_MD_CTX_ctrl(ctx, cmd, p1, p2) IAmiSSL->EVP_MD_CTX_ctrl((ctx), (cmd), (p1), (p2))
#define EVP_MD_CTX_free(ctx) IAmiSSL->EVP_MD_CTX_free((ctx))
#define EVP_MD_CTX_get0_md_data(ctx) IAmiSSL->EVP_MD_CTX_get0_md_data((ctx))
#define EVP_MD_CTX_new() IAmiSSL->EVP_MD_CTX_new()
#define EVP_MD_CTX_get_pkey_ctx(ctx) IAmiSSL->EVP_MD_CTX_get_pkey_ctx((ctx))
#define EVP_MD_CTX_reset(ctx) IAmiSSL->EVP_MD_CTX_reset((ctx))
#define EVP_MD_CTX_set_update_fn(ctx, update) IAmiSSL->EVP_MD_CTX_set_update_fn((ctx), (update))
#define EVP_MD_CTX_update_fn(ctx) IAmiSSL->EVP_MD_CTX_update_fn((ctx))
#define EVP_MD_meth_dup(md) IAmiSSL->EVP_MD_meth_dup((md))
#define EVP_MD_meth_free(md) IAmiSSL->EVP_MD_meth_free((md))
#define EVP_MD_meth_get_app_datasize(md) IAmiSSL->EVP_MD_meth_get_app_datasize((md))
#define EVP_MD_meth_get_cleanup(md) IAmiSSL->EVP_MD_meth_get_cleanup((md))
#define EVP_MD_meth_get_copy(md) IAmiSSL->EVP_MD_meth_get_copy((md))
#define EVP_MD_meth_get_ctrl(md) IAmiSSL->EVP_MD_meth_get_ctrl((md))
#define EVP_MD_meth_get_final(md) IAmiSSL->EVP_MD_meth_get_final((md))
#define EVP_MD_meth_get_flags(md) IAmiSSL->EVP_MD_meth_get_flags((md))
#define EVP_MD_meth_get_init(md) IAmiSSL->EVP_MD_meth_get_init((md))
#define EVP_MD_meth_get_input_blocksize(md) IAmiSSL->EVP_MD_meth_get_input_blocksize((md))
#define EVP_MD_meth_get_result_size(md) IAmiSSL->EVP_MD_meth_get_result_size((md))
#define EVP_MD_meth_get_update(md) IAmiSSL->EVP_MD_meth_get_update((md))
#define EVP_MD_meth_new(md_type, pkey_type) IAmiSSL->EVP_MD_meth_new((md_type), (pkey_type))
#define EVP_MD_meth_set_app_datasize(md, datasize) IAmiSSL->EVP_MD_meth_set_app_datasize((md), (datasize))
#define EVP_MD_meth_set_cleanup(md, cleanup) IAmiSSL->EVP_MD_meth_set_cleanup((md), (cleanup))
#define EVP_MD_meth_set_copy(md, copy) IAmiSSL->EVP_MD_meth_set_copy((md), (copy))
#define EVP_MD_meth_set_ctrl(md, ctrl) IAmiSSL->EVP_MD_meth_set_ctrl((md), (ctrl))
#define EVP_MD_meth_set_final(md, final) IAmiSSL->EVP_MD_meth_set_final((md), (final))
#define EVP_MD_meth_set_flags(md, flags) IAmiSSL->EVP_MD_meth_set_flags((md), (flags))
#define EVP_MD_meth_set_init(md, init) IAmiSSL->EVP_MD_meth_set_init((md), (init))
#define EVP_MD_meth_set_input_blocksize(md, blocksize) IAmiSSL->EVP_MD_meth_set_input_blocksize((md), (blocksize))
#define EVP_MD_meth_set_result_size(md, resultsize) IAmiSSL->EVP_MD_meth_set_result_size((md), (resultsize))
#define EVP_MD_meth_set_update(md, update) IAmiSSL->EVP_MD_meth_set_update((md), (update))
#define EVP_PBE_get(ptype, ppbe_nid, num) IAmiSSL->EVP_PBE_get((ptype), (ppbe_nid), (num))
#define OBSOLETE_EVP_PBE_scrypt(pass, passlen, salt, saltlen, N, r, p, maxmem, key, keylen) IAmiSSL->OBSOLETE_EVP_PBE_scrypt((pass), (passlen), (salt), (saltlen), (N), (r), (p), (maxmem), (key), (keylen))
#define EVP_PKEY_asn1_set_security_bits(ameth, pkey_security_bits) IAmiSSL->EVP_PKEY_asn1_set_security_bits((ameth), (pkey_security_bits))
#define EVP_PKEY_get0_DH(pkey) IAmiSSL->EVP_PKEY_get0_DH((pkey))
#define EVP_PKEY_get0_DSA(pkey) IAmiSSL->EVP_PKEY_get0_DSA((pkey))
#define EVP_PKEY_get0_EC_KEY(pkey) IAmiSSL->EVP_PKEY_get0_EC_KEY((pkey))
#define EVP_PKEY_get0_RSA(pkey) IAmiSSL->EVP_PKEY_get0_RSA((pkey))
#define EVP_PKEY_meth_get_cleanup(pmeth, pcleanup) IAmiSSL->EVP_PKEY_meth_get_cleanup((pmeth), (pcleanup))
#define EVP_PKEY_meth_get_copy(pmeth, pcopy) IAmiSSL->EVP_PKEY_meth_get_copy((pmeth), (pcopy))
#define EVP_PKEY_meth_get_ctrl(pmeth, pctrl, pctrl_str) IAmiSSL->EVP_PKEY_meth_get_ctrl((pmeth), (pctrl), (pctrl_str))
#define EVP_PKEY_meth_get_decrypt(pmeth, pdecrypt_init, pdecrypt) IAmiSSL->EVP_PKEY_meth_get_decrypt((pmeth), (pdecrypt_init), (pdecrypt))
#define EVP_PKEY_meth_get_derive(pmeth, pderive_init, pderive) IAmiSSL->EVP_PKEY_meth_get_derive((pmeth), (pderive_init), (pderive))
#define EVP_PKEY_meth_get_encrypt(pmeth, pencrypt_init, pencryptfn) IAmiSSL->EVP_PKEY_meth_get_encrypt((pmeth), (pencrypt_init), (pencryptfn))
#define EVP_PKEY_meth_get_init(pmeth, pinit) IAmiSSL->EVP_PKEY_meth_get_init((pmeth), (pinit))
#define EVP_PKEY_meth_get_keygen(pmeth, pkeygen_init, pkeygen) IAmiSSL->EVP_PKEY_meth_get_keygen((pmeth), (pkeygen_init), (pkeygen))
#define EVP_PKEY_meth_get_paramgen(pmeth, pparamgen_init, pparamgen) IAmiSSL->EVP_PKEY_meth_get_paramgen((pmeth), (pparamgen_init), (pparamgen))
#define EVP_PKEY_meth_get_sign(pmeth, psign_init, psign) IAmiSSL->EVP_PKEY_meth_get_sign((pmeth), (psign_init), (psign))
#define EVP_PKEY_meth_get_signctx(pmeth, psignctx_init, psignctx) IAmiSSL->EVP_PKEY_meth_get_signctx((pmeth), (psignctx_init), (psignctx))
#define EVP_PKEY_meth_get_verify(pmeth, pverify_init, pverify) IAmiSSL->EVP_PKEY_meth_get_verify((pmeth), (pverify_init), (pverify))
#define EVP_PKEY_meth_get_verify_recover(pmeth, pverify_recover_init, pverify_recover) IAmiSSL->EVP_PKEY_meth_get_verify_recover((pmeth), (pverify_recover_init), (pverify_recover))
#define EVP_PKEY_meth_get_verifyctx(pmeth, pverifyctx_init, pverifyctx) IAmiSSL->EVP_PKEY_meth_get_verifyctx((pmeth), (pverifyctx_init), (pverifyctx))
#define EVP_PKEY_get_security_bits(pkey) IAmiSSL->EVP_PKEY_get_security_bits((pkey))
#define EVP_PKEY_up_ref(pkey) IAmiSSL->EVP_PKEY_up_ref((pkey))
#define PKCS5_v2_scrypt_keyivgen(ctx, pass, passlen, param, c, md, en_de) IAmiSSL->PKCS5_v2_scrypt_keyivgen((ctx), (pass), (passlen), (param), (c), (md), (en_de))
#define HMAC_CTX_free(ctx) IAmiSSL->HMAC_CTX_free((ctx))
#define HMAC_CTX_new() IAmiSSL->HMAC_CTX_new()
#define HMAC_CTX_reset(ctx) IAmiSSL->HMAC_CTX_reset((ctx))
#define HMAC_size(ctx) IAmiSSL->HMAC_size((ctx))
#define OPENSSL_LH_error(lh) IAmiSSL->OPENSSL_LH_error((lh))
#define OPENSSL_LH_get_down_load(lh) IAmiSSL->OPENSSL_LH_get_down_load((lh))
#define OPENSSL_LH_set_down_load(lh, down_load) IAmiSSL->OPENSSL_LH_set_down_load((lh), (down_load))
#define CRYPTO_128_unwrap_pad(key, icv, out, in, inlen, block) IAmiSSL->CRYPTO_128_unwrap_pad((key), (icv), (out), (in), (inlen), (block))
#define CRYPTO_128_wrap_pad(key, icv, out, in, inlen, block) IAmiSSL->CRYPTO_128_wrap_pad((key), (icv), (out), (in), (inlen), (block))
#define CRYPTO_ocb128_aad(ctx, aad, len) IAmiSSL->CRYPTO_ocb128_aad((ctx), (aad), (len))
#define CRYPTO_ocb128_cleanup(ctx) IAmiSSL->CRYPTO_ocb128_cleanup((ctx))
#define CRYPTO_ocb128_copy_ctx(dest, src, keyenc, keydec) IAmiSSL->CRYPTO_ocb128_copy_ctx((dest), (src), (keyenc), (keydec))
#define CRYPTO_ocb128_decrypt(ctx, in, out, len) IAmiSSL->CRYPTO_ocb128_decrypt((ctx), (in), (out), (len))
#define CRYPTO_ocb128_encrypt(ctx, in, out, len) IAmiSSL->CRYPTO_ocb128_encrypt((ctx), (in), (out), (len))
#define CRYPTO_ocb128_finish(ctx, tag, len) IAmiSSL->CRYPTO_ocb128_finish((ctx), (tag), (len))
#define CRYPTO_ocb128_init(ctx, keyenc, keydec, encrypt, decrypt, stream) IAmiSSL->CRYPTO_ocb128_init((ctx), (keyenc), (keydec), (encrypt), (decrypt), (stream))
#define CRYPTO_ocb128_new(keyenc, keydec, encrypt, decrypt, stream) IAmiSSL->CRYPTO_ocb128_new((keyenc), (keydec), (encrypt), (decrypt), (stream))
#define CRYPTO_ocb128_setiv(ctx, iv, len, taglen) IAmiSSL->CRYPTO_ocb128_setiv((ctx), (iv), (len), (taglen))
#define CRYPTO_ocb128_tag(ctx, tag, len) IAmiSSL->CRYPTO_ocb128_tag((ctx), (tag), (len))
#define OBJ_get0_data(obj) IAmiSSL->OBJ_get0_data((obj))
#define OBJ_length(obj) IAmiSSL->OBJ_length((obj))
#define OCSP_resp_get0_produced_at(bs) IAmiSSL->OCSP_resp_get0_produced_at((bs))
#define OCSP_resp_get0_signature(bs) IAmiSSL->OCSP_resp_get0_signature((bs))
#define OCSP_SINGLERESP_get0_id(bs) IAmiSSL->OCSP_SINGLERESP_get0_id((bs))
#define PKCS12_get0_mac(pmac, pmacalg, psalt, piter, p12) IAmiSSL->PKCS12_get0_mac((pmac), (pmacalg), (psalt), (piter), (p12))
#define PKCS12_mac_present(p12) IAmiSSL->PKCS12_mac_present((p12))
#define PKCS12_SAFEBAG_create0_p8inf(p8) IAmiSSL->PKCS12_SAFEBAG_create0_p8inf((p8))
#define PKCS12_SAFEBAG_create0_pkcs8(p8) IAmiSSL->PKCS12_SAFEBAG_create0_pkcs8((p8))
#define PKCS12_SAFEBAG_create_cert(x509) IAmiSSL->PKCS12_SAFEBAG_create_cert((x509))
#define PKCS12_SAFEBAG_create_crl(crl) IAmiSSL->PKCS12_SAFEBAG_create_crl((crl))
#define PKCS12_SAFEBAG_create_pkcs8_encrypt(pbe_nid, pass, passlen, salt, saltlen, iter, p8inf) IAmiSSL->PKCS12_SAFEBAG_create_pkcs8_encrypt((pbe_nid), (pass), (passlen), (salt), (saltlen), (iter), (p8inf))
#define PKCS12_SAFEBAG_get0_attr(bag, attr_nid) IAmiSSL->PKCS12_SAFEBAG_get0_attr((bag), (attr_nid))
#define PKCS12_SAFEBAG_get0_attrs(bag) IAmiSSL->PKCS12_SAFEBAG_get0_attrs((bag))
#define PKCS12_SAFEBAG_get0_p8inf(bag) IAmiSSL->PKCS12_SAFEBAG_get0_p8inf((bag))
#define PKCS12_SAFEBAG_get0_pkcs8(bag) IAmiSSL->PKCS12_SAFEBAG_get0_pkcs8((bag))
#define PKCS12_SAFEBAG_get0_safes(bag) IAmiSSL->PKCS12_SAFEBAG_get0_safes((bag))
#define PKCS12_SAFEBAG_get0_type(bag) IAmiSSL->PKCS12_SAFEBAG_get0_type((bag))
#define PKCS12_SAFEBAG_get1_cert(bag) IAmiSSL->PKCS12_SAFEBAG_get1_cert((bag))
#define PKCS12_SAFEBAG_get1_crl(bag) IAmiSSL->PKCS12_SAFEBAG_get1_crl((bag))
#define PKCS12_SAFEBAG_get_bag_nid(bag) IAmiSSL->PKCS12_SAFEBAG_get_bag_nid((bag))
#define PKCS12_SAFEBAG_get_nid(bag) IAmiSSL->PKCS12_SAFEBAG_get_nid((bag))
#define PKCS8_get_attr(p8, attr_nid) IAmiSSL->PKCS8_get_attr((p8), (attr_nid))
#define PKCS8_set0_pbe(pass, passlen, p8inf, pbe) IAmiSSL->PKCS8_set0_pbe((pass), (passlen), (p8inf), (pbe))
#define RAND_OpenSSL() IAmiSSL->RAND_OpenSSL()
#define RSA_bits(r) IAmiSSL->RSA_bits((r))
#define RSA_check_key_ex(key, cb) IAmiSSL->RSA_check_key_ex((key), (cb))
#define RSA_PKCS1_OpenSSL() IAmiSSL->RSA_PKCS1_OpenSSL()
#define RSA_security_bits(rsa) IAmiSSL->RSA_security_bits((rsa))
#define OBSOLETE_RSA_X931_derive_ex(rsa, p1, p2, q1, q2, Xp1, Xp2, Xp, Xq1, Xq2, Xq, e, cb) IAmiSSL->OBSOLETE_RSA_X931_derive_ex((rsa), (p1), (p2), (q1), (q2), (Xp1), (Xp2), (Xp), (Xq1), (Xq2), (Xq), (e), (cb))
#define RSA_X931_generate_key_ex(rsa, bits, e, cb) IAmiSSL->RSA_X931_generate_key_ex((rsa), (bits), (e), (cb))
#define TS_CONF_set_signer_digest(conf, section, md, ctx) IAmiSSL->TS_CONF_set_signer_digest((conf), (section), (md), (ctx))
#define TS_RESP_CTX_set_signer_digest(ctx, md) IAmiSSL->TS_RESP_CTX_set_signer_digest((ctx), (md))
#define TS_STATUS_INFO_get0_failure_info(a) IAmiSSL->TS_STATUS_INFO_get0_failure_info((a))
#define TS_STATUS_INFO_get0_status(a) IAmiSSL->TS_STATUS_INFO_get0_status((a))
#define TS_STATUS_INFO_set_status(a, i) IAmiSSL->TS_STATUS_INFO_set_status((a), (i))
#define TS_VERIFY_CTX_add_flags(ctx, f) IAmiSSL->TS_VERIFY_CTX_add_flags((ctx), (f))
#define TS_VERIFY_CTX_set_data(ctx, b) IAmiSSL->TS_VERIFY_CTX_set_data((ctx), (b))
#define TS_VERIFY_CTX_set_flags(ctx, f) IAmiSSL->TS_VERIFY_CTX_set_flags((ctx), (f))
#define TS_VERIFY_CTX_set_imprint(ctx, hexstr, len) IAmiSSL->TS_VERIFY_CTX_set_imprint((ctx), (hexstr), (len))
#define TS_VERIFY_CTX_set_store(ctx, s) IAmiSSL->TS_VERIFY_CTX_set_store((ctx), (s))
#define TS_VERIFY_CTX_set_certs(ctx, certs) IAmiSSL->TS_VERIFY_CTX_set_certs((ctx), (certs))
#define i2d_re_X509_CRL_tbs(req, pp) IAmiSSL->i2d_re_X509_CRL_tbs((req), (pp))
#define i2d_re_X509_REQ_tbs(req, pp) IAmiSSL->i2d_re_X509_REQ_tbs((req), (pp))
#define PKCS5_pbe2_set_scrypt(cipher, salt, saltlen, aiv, N, r, p) IAmiSSL->PKCS5_pbe2_set_scrypt((cipher), (salt), (saltlen), (aiv), (N), (r), (p))
#define X509_CRL_get0_extensions(crl) IAmiSSL->X509_CRL_get0_extensions((crl))
#define X509_CRL_get0_signature(crl, psig, palg) IAmiSSL->X509_CRL_get0_signature((crl), (psig), (palg))
#define X509_CRL_get_issuer(crl) IAmiSSL->X509_CRL_get_issuer((crl))
#define X509_CRL_get_lastUpdate(crl) IAmiSSL->X509_CRL_get_lastUpdate((crl))
#define X509_CRL_get_nextUpdate(crl) IAmiSSL->X509_CRL_get_nextUpdate((crl))
#define X509_CRL_get_REVOKED(crl) IAmiSSL->X509_CRL_get_REVOKED((crl))
#define X509_CRL_get_signature_nid(crl) IAmiSSL->X509_CRL_get_signature_nid((crl))
#define X509_CRL_get_version(crl) IAmiSSL->X509_CRL_get_version((crl))
#define X509_CRL_up_ref(crl) IAmiSSL->X509_CRL_up_ref((crl))
#define X509_get0_extensions(x) IAmiSSL->X509_get0_extensions((x))
#define X509_get0_pubkey(x) IAmiSSL->X509_get0_pubkey((x))
#define X509_get0_reject_objects(x) IAmiSSL->X509_get0_reject_objects((x))
#define X509_get0_tbs_sigalg(x) IAmiSSL->X509_get0_tbs_sigalg((x))
#define X509_get0_trust_objects(x) IAmiSSL->X509_get0_trust_objects((x))
#define X509_get0_uids(x, piuid, psuid) IAmiSSL->X509_get0_uids((x), (piuid), (psuid))
#define X509_getm_notAfter(x) IAmiSSL->X509_getm_notAfter((x))
#define X509_getm_notBefore(x) IAmiSSL->X509_getm_notBefore((x))
#define X509_get_signature_type(x) IAmiSSL->X509_get_signature_type((x))
#define X509_get_version(x) IAmiSSL->X509_get_version((x))
#define X509_get_X509_PUBKEY(x) IAmiSSL->X509_get_X509_PUBKEY((x))
#define X509_NAME_ENTRY_set(ne) IAmiSSL->X509_NAME_ENTRY_set((ne))
#define X509_NAME_get0_der(nm, pder, pderlen) IAmiSSL->X509_NAME_get0_der((nm), (pder), (pderlen))
#define X509_PUBKEY_get0(key) IAmiSSL->X509_PUBKEY_get0((key))
#define X509_REQ_get0_signature(req, psig, palg) IAmiSSL->X509_REQ_get0_signature((req), (psig), (palg))
#define X509_REQ_get_signature_nid(req) IAmiSSL->X509_REQ_get_signature_nid((req))
#define X509_REQ_get_subject_name(req) IAmiSSL->X509_REQ_get_subject_name((req))
#define X509_REQ_get_version(req) IAmiSSL->X509_REQ_get_version((req))
#define X509_REQ_get_X509_PUBKEY(req) IAmiSSL->X509_REQ_get_X509_PUBKEY((req))
#define X509_REVOKED_get0_extensions(r) IAmiSSL->X509_REVOKED_get0_extensions((r))
#define X509_REVOKED_get0_revocationDate(x) IAmiSSL->X509_REVOKED_get0_revocationDate((x))
#define X509_REVOKED_get0_serialNumber(x) IAmiSSL->X509_REVOKED_get0_serialNumber((x))
#define X509_trusted(x) IAmiSSL->X509_trusted((x))
#define X509_up_ref(x) IAmiSSL->X509_up_ref((x))
#define X509_STORE_CTX_get_num_untrusted(ctx) IAmiSSL->X509_STORE_CTX_get_num_untrusted((ctx))
#define X509_STORE_CTX_set0_dane(ctx, dane) IAmiSSL->X509_STORE_CTX_set0_dane((ctx), (dane))
#define X509_VERIFY_PARAM_move_peername(to, from) IAmiSSL->X509_VERIFY_PARAM_move_peername((to), (from))
#define i2s_ASN1_IA5STRING(method, ia5) IAmiSSL->i2s_ASN1_IA5STRING((method), (ia5))
#define s2i_ASN1_IA5STRING(method, ctx, str) IAmiSSL->s2i_ASN1_IA5STRING((method), (ctx), (str))
#define X509v3_addr_add_inherit(addr, afi, safi) IAmiSSL->X509v3_addr_add_inherit((addr), (afi), (safi))
#define X509v3_addr_add_prefix(addr, afi, safi, a, prefixlen) IAmiSSL->X509v3_addr_add_prefix((addr), (afi), (safi), (a), (prefixlen))
#define X509v3_addr_add_range(addr, afi, safi, min, max) IAmiSSL->X509v3_addr_add_range((addr), (afi), (safi), (min), (max))
#define X509v3_addr_canonize(addr) IAmiSSL->X509v3_addr_canonize((addr))
#define X509v3_addr_get_afi(f) IAmiSSL->X509v3_addr_get_afi((f))
#define X509v3_addr_get_range(aor, afi, min, max, length) IAmiSSL->X509v3_addr_get_range((aor), (afi), (min), (max), (length))
#define X509v3_addr_inherits(addr) IAmiSSL->X509v3_addr_inherits((addr))
#define X509v3_addr_is_canonical(addr) IAmiSSL->X509v3_addr_is_canonical((addr))
#define X509v3_addr_subset(a, b) IAmiSSL->X509v3_addr_subset((a), (b))
#define X509v3_addr_validate_path(ctx) IAmiSSL->X509v3_addr_validate_path((ctx))
#define X509v3_addr_validate_resource_set(chain, ext, allow_inheritance) IAmiSSL->X509v3_addr_validate_resource_set((chain), (ext), (allow_inheritance))
#define X509v3_asid_add_inherit(asid, which) IAmiSSL->X509v3_asid_add_inherit((asid), (which))
#define X509v3_asid_add_id_or_range(asid, which, min, max) IAmiSSL->X509v3_asid_add_id_or_range((asid), (which), (min), (max))
#define X509v3_asid_canonize(asid) IAmiSSL->X509v3_asid_canonize((asid))
#define X509v3_asid_inherits(asid) IAmiSSL->X509v3_asid_inherits((asid))
#define X509v3_asid_is_canonical(asid) IAmiSSL->X509v3_asid_is_canonical((asid))
#define X509v3_asid_subset(a, b) IAmiSSL->X509v3_asid_subset((a), (b))
#define X509v3_asid_validate_path(ctx) IAmiSSL->X509v3_asid_validate_path((ctx))
#define X509v3_asid_validate_resource_set(chain, ext, allow_inheritance) IAmiSSL->X509v3_asid_validate_resource_set((chain), (ext), (allow_inheritance))
#define X509_get0_subject_key_id(x) IAmiSSL->X509_get0_subject_key_id((x))
#define X509_get_extended_key_usage(x) IAmiSSL->X509_get_extended_key_usage((x))
#define X509_get_extension_flags(x) IAmiSSL->X509_get_extension_flags((x))
#define X509_get_key_usage(x) IAmiSSL->X509_get_key_usage((x))
#define DTLSv1_listen(s, client) IAmiSSL->DTLSv1_listen((s), (client))
#define OPENSSL_init_ssl(opts, settings) IAmiSSL->OPENSSL_init_ssl((opts), (settings))
#define SSL_add1_host(s, host) IAmiSSL->SSL_add1_host((s), (host))
#define SSL_add_ssl_module() IAmiSSL->SSL_add_ssl_module()
#define SSL_CIPHER_get_cipher_nid(c) IAmiSSL->SSL_CIPHER_get_cipher_nid((c))
#define SSL_CIPHER_get_digest_nid(c) IAmiSSL->SSL_CIPHER_get_digest_nid((c))
#define SSL_clear_options(s, op) IAmiSSL->SSL_clear_options((s), (op))
#define SSL_config(s, name) IAmiSSL->SSL_config((s), (name))
#define SSL_CTX_clear_options(ctx, op) IAmiSSL->SSL_CTX_clear_options((ctx), (op))
#define SSL_CTX_config(ctx, name) IAmiSSL->SSL_CTX_config((ctx), (name))
#define SSL_CTX_dane_enable(ctx) IAmiSSL->SSL_CTX_dane_enable((ctx))
#define SSL_CTX_dane_mtype_set(ctx, md, mtype, ord) IAmiSSL->SSL_CTX_dane_mtype_set((ctx), (md), (mtype), (ord))
#define SSL_CTX_get0_security_ex_data(ctx) IAmiSSL->SSL_CTX_get0_security_ex_data((ctx))
#define SSL_CTX_get_options(ctx) IAmiSSL->SSL_CTX_get_options((ctx))
#define SSL_CTX_get_security_callback(ctx) IAmiSSL->SSL_CTX_get_security_callback((ctx))
#define SSL_CTX_get_security_level(ctx) IAmiSSL->SSL_CTX_get_security_level((ctx))
#define SSL_CTX_set0_security_ex_data(ctx, ex) IAmiSSL->SSL_CTX_set0_security_ex_data((ctx), (ex))
#define SSL_CTX_set_default_verify_dir(ctx) IAmiSSL->SSL_CTX_set_default_verify_dir((ctx))
#define SSL_CTX_set_default_verify_file(ctx) IAmiSSL->SSL_CTX_set_default_verify_file((ctx))
#define SSL_CTX_set_not_resumable_session_callback(ctx, cb) IAmiSSL->SSL_CTX_set_not_resumable_session_callback((ctx), (cb))
#define SSL_CTX_set_options(ctx, op) IAmiSSL->SSL_CTX_set_options((ctx), (op))
#define SSL_CTX_set_security_callback(ctx, cb) IAmiSSL->SSL_CTX_set_security_callback((ctx), (cb))
#define SSL_CTX_set_security_level(ctx, level) IAmiSSL->SSL_CTX_set_security_level((ctx), (level))
#define SSL_CTX_up_ref(ctx) IAmiSSL->SSL_CTX_up_ref((ctx))
#define SSL_dane_enable(s, basedomain) IAmiSSL->SSL_dane_enable((s), (basedomain))
#define SSL_dane_tlsa_add(s, usage, selector, mtype, data, dlen) IAmiSSL->SSL_dane_tlsa_add((s), (usage), (selector), (mtype), (data), (dlen))
#define SSL_get0_dane(ssl) IAmiSSL->SSL_get0_dane((ssl))
#define SSL_get0_dane_authority(s, mcert, mspki) IAmiSSL->SSL_get0_dane_authority((s), (mcert), (mspki))
#define SSL_get0_dane_tlsa(s, usage, selector, mtype, data, dlen) IAmiSSL->SSL_get0_dane_tlsa((s), (usage), (selector), (mtype), (data), (dlen))
#define SSL_get0_peername(s) IAmiSSL->SSL_get0_peername((s))
#define SSL_get0_security_ex_data(s) IAmiSSL->SSL_get0_security_ex_data((s))
#define SSL_get1_supported_ciphers(s) IAmiSSL->SSL_get1_supported_ciphers((s))
#define SSL_get_client_random(s, out, outlen) IAmiSSL->SSL_get_client_random((s), (out), (outlen))
#define SSL_get_options(s) IAmiSSL->SSL_get_options((s))
#define SSL_get_security_callback(s) IAmiSSL->SSL_get_security_callback((s))
#define SSL_get_security_level(s) IAmiSSL->SSL_get_security_level((s))
#define SSL_get_server_random(s, out, outlen) IAmiSSL->SSL_get_server_random((s), (out), (outlen))
#define SSL_get_state(ssl) IAmiSSL->SSL_get_state((ssl))
#define SSL_in_before(s) IAmiSSL->SSL_in_before((s))
#define SSL_in_init(s) IAmiSSL->SSL_in_init((s))
#define SSL_is_init_finished(s) IAmiSSL->SSL_is_init_finished((s))
#define SSL_SESSION_get0_ticket(s, tick, len) IAmiSSL->SSL_SESSION_get0_ticket((s), (tick), (len))
#define SSL_SESSION_get_master_key(sess, out, outlen) IAmiSSL->SSL_SESSION_get_master_key((sess), (out), (outlen))
#define SSL_SESSION_get_ticket_lifetime_hint(s) IAmiSSL->SSL_SESSION_get_ticket_lifetime_hint((s))
#define SSL_SESSION_has_ticket(s) IAmiSSL->SSL_SESSION_has_ticket((s))
#define SSL_SESSION_print_keylog(bp, x) IAmiSSL->SSL_SESSION_print_keylog((bp), (x))
#define SSL_session_reused(s) IAmiSSL->SSL_session_reused((s))
#define SSL_set0_security_ex_data(s, ex) IAmiSSL->SSL_set0_security_ex_data((s), (ex))
#define SSL_set1_host(s, host) IAmiSSL->SSL_set1_host((s), (host))
#define SSL_set_default_passwd_cb(s, cb) IAmiSSL->SSL_set_default_passwd_cb((s), (cb))
#define SSL_set_default_passwd_cb_userdata(s, u) IAmiSSL->SSL_set_default_passwd_cb_userdata((s), (u))
#define SSL_set_hostflags(s, flags) IAmiSSL->SSL_set_hostflags((s), (flags))
#define SSL_set_not_resumable_session_callback(ssl, cb) IAmiSSL->SSL_set_not_resumable_session_callback((ssl), (cb))
#define SSL_set_options(s, op) IAmiSSL->SSL_set_options((s), (op))
#define SSL_set0_rbio(s, rbio) IAmiSSL->SSL_set0_rbio((s), (rbio))
#define SSL_set_security_callback(s, cb) IAmiSSL->SSL_set_security_callback((s), (cb))
#define SSL_set_security_level(s, level) IAmiSSL->SSL_set_security_level((s), (level))
#define SSL_set0_wbio(s, wbio) IAmiSSL->SSL_set0_wbio((s), (wbio))
#define SSL_up_ref(s) IAmiSSL->SSL_up_ref((s))
#define SSL_use_certificate_chain_file(ssl, file) IAmiSSL->SSL_use_certificate_chain_file((ssl), (file))
#define SSL_waiting_for_async(s) IAmiSSL->SSL_waiting_for_async((s))
#define TLS_client_method() IAmiSSL->TLS_client_method()
#define TLS_method() IAmiSSL->TLS_method()
#define TLS_server_method() IAmiSSL->TLS_server_method()
#define ASYNC_WAIT_CTX_new() IAmiSSL->ASYNC_WAIT_CTX_new()
#define ASYNC_WAIT_CTX_free(ctx) IAmiSSL->ASYNC_WAIT_CTX_free((ctx))
#define ASYNC_WAIT_CTX_set_wait_fd(ctx, key, fd, custom_data, cleanup) IAmiSSL->ASYNC_WAIT_CTX_set_wait_fd((ctx), (key), (fd), (custom_data), (cleanup))
#define ASYNC_WAIT_CTX_get_fd(ctx, key, fd, custom_data) IAmiSSL->ASYNC_WAIT_CTX_get_fd((ctx), (key), (fd), (custom_data))
#define ASYNC_WAIT_CTX_get_all_fds(ctx, fd, numfds) IAmiSSL->ASYNC_WAIT_CTX_get_all_fds((ctx), (fd), (numfds))
#define ASYNC_WAIT_CTX_get_changed_fds(ctx, addfd, numaddfds, delfd, numdelfds) IAmiSSL->ASYNC_WAIT_CTX_get_changed_fds((ctx), (addfd), (numaddfds), (delfd), (numdelfds))
#define ASYNC_WAIT_CTX_clear_fd(ctx, key) IAmiSSL->ASYNC_WAIT_CTX_clear_fd((ctx), (key))
#define ASYNC_is_capable() IAmiSSL->ASYNC_is_capable()
#define ASYNC_get_wait_ctx(job) IAmiSSL->ASYNC_get_wait_ctx((job))
#define BIO_up_ref(a) IAmiSSL->BIO_up_ref((a))
#define BN_BLINDING_is_current_thread(b) IAmiSSL->BN_BLINDING_is_current_thread((b))
#define BN_BLINDING_set_current_thread(b) IAmiSSL->BN_BLINDING_set_current_thread((b))
#define BN_BLINDING_lock(b) IAmiSSL->BN_BLINDING_lock((b))
#define BN_BLINDING_unlock(b) IAmiSSL->BN_BLINDING_unlock((b))
#define CRYPTO_THREAD_run_once(once, init) IAmiSSL->CRYPTO_THREAD_run_once((once), (init))
#define CRYPTO_THREAD_init_local(key, cleanup) IAmiSSL->CRYPTO_THREAD_init_local((key), (cleanup))
#define CRYPTO_THREAD_get_local(key) IAmiSSL->CRYPTO_THREAD_get_local((key))
#define CRYPTO_THREAD_set_local(key, val) IAmiSSL->CRYPTO_THREAD_set_local((key), (val))
#define CRYPTO_THREAD_cleanup_local(key) IAmiSSL->CRYPTO_THREAD_cleanup_local((key))
#define CRYPTO_THREAD_get_current_id() IAmiSSL->CRYPTO_THREAD_get_current_id()
#define CRYPTO_THREAD_compare_id(a, b) IAmiSSL->CRYPTO_THREAD_compare_id((a), (b))
#define CRYPTO_THREAD_lock_new() IAmiSSL->CRYPTO_THREAD_lock_new()
#define CRYPTO_THREAD_read_lock(lock) IAmiSSL->CRYPTO_THREAD_read_lock((lock))
#define CRYPTO_THREAD_write_lock(lock) IAmiSSL->CRYPTO_THREAD_write_lock((lock))
#define CRYPTO_THREAD_unlock(lock) IAmiSSL->CRYPTO_THREAD_unlock((lock))
#define CRYPTO_THREAD_lock_free(lock) IAmiSSL->CRYPTO_THREAD_lock_free((lock))
#define CRYPTO_atomic_add(val, amount, ret, lock) IAmiSSL->CRYPTO_atomic_add((val), (amount), (ret), (lock))
#define OPENSSL_die(assertion, file, line) IAmiSSL->OPENSSL_die((assertion), (file), (line))
#define CT_POLICY_EVAL_CTX_new() IAmiSSL->CT_POLICY_EVAL_CTX_new()
#define CT_POLICY_EVAL_CTX_free(ctx) IAmiSSL->CT_POLICY_EVAL_CTX_free((ctx))
#define CT_POLICY_EVAL_CTX_get0_cert(ctx) IAmiSSL->CT_POLICY_EVAL_CTX_get0_cert((ctx))
#define CT_POLICY_EVAL_CTX_get0_issuer(ctx) IAmiSSL->CT_POLICY_EVAL_CTX_get0_issuer((ctx))
#define CT_POLICY_EVAL_CTX_get0_log_store(ctx) IAmiSSL->CT_POLICY_EVAL_CTX_get0_log_store((ctx))
#define SCT_new() IAmiSSL->SCT_new()
#define SCT_new_from_base64(version, logid_base64, entry_type, timestamp, extensions_base64, signature_base64) IAmiSSL->SCT_new_from_base64((version), (logid_base64), (entry_type), (timestamp), (extensions_base64), (signature_base64))
#define SCT_free(sct) IAmiSSL->SCT_free((sct))
#define SCT_LIST_free(a) IAmiSSL->SCT_LIST_free((a))
#define SCT_get_version(sct) IAmiSSL->SCT_get_version((sct))
#define SCT_set_version(sct, version) IAmiSSL->SCT_set_version((sct), (version))
#define SCT_get_log_entry_type(sct) IAmiSSL->SCT_get_log_entry_type((sct))
#define SCT_set_log_entry_type(sct, entry_type) IAmiSSL->SCT_set_log_entry_type((sct), (entry_type))
#define SCT_get0_log_id(sct, log_id) IAmiSSL->SCT_get0_log_id((sct), (log_id))
#define SCT_set0_log_id(sct, log_id, log_id_len) IAmiSSL->SCT_set0_log_id((sct), (log_id), (log_id_len))
#define SCT_set1_log_id(sct, log_id, log_id_len) IAmiSSL->SCT_set1_log_id((sct), (log_id), (log_id_len))
#define SCT_get_timestamp(sct) IAmiSSL->SCT_get_timestamp((sct))
#define SCT_set_timestamp(sct, timestamp) IAmiSSL->SCT_set_timestamp((sct), (timestamp))
#define SCT_get_signature_nid(sct) IAmiSSL->SCT_get_signature_nid((sct))
#define SCT_set_signature_nid(sct, nid) IAmiSSL->SCT_set_signature_nid((sct), (nid))
#define SCT_get0_extensions(sct, ext) IAmiSSL->SCT_get0_extensions((sct), (ext))
#define SCT_set0_extensions(sct, ext, ext_len) IAmiSSL->SCT_set0_extensions((sct), (ext), (ext_len))
#define SCT_set1_extensions(sct, ext, ext_len) IAmiSSL->SCT_set1_extensions((sct), (ext), (ext_len))
#define SCT_get0_signature(sct, sig) IAmiSSL->SCT_get0_signature((sct), (sig))
#define SCT_set0_signature(sct, sig, sig_len) IAmiSSL->SCT_set0_signature((sct), (sig), (sig_len))
#define SCT_set1_signature(sct, sig, sig_len) IAmiSSL->SCT_set1_signature((sct), (sig), (sig_len))
#define SCT_get_source(sct) IAmiSSL->SCT_get_source((sct))
#define SCT_set_source(sct, source) IAmiSSL->SCT_set_source((sct), (source))
#define SCT_print(sct, out, indent, logs) IAmiSSL->SCT_print((sct), (out), (indent), (logs))
#define SCT_LIST_print(sct_list, out, indent, separator, logs) IAmiSSL->SCT_LIST_print((sct_list), (out), (indent), (separator), (logs))
#define SCT_get_validation_status(sct) IAmiSSL->SCT_get_validation_status((sct))
#define SCT_validate(sct, ctx) IAmiSSL->SCT_validate((sct), (ctx))
#define SCT_LIST_validate(scts, ctx) IAmiSSL->SCT_LIST_validate((scts), (ctx))
#define i2o_SCT_LIST(a, pp) IAmiSSL->i2o_SCT_LIST((a), (pp))
#define o2i_SCT_LIST(a, pp, len) IAmiSSL->o2i_SCT_LIST((a), (pp), (len))
#define i2d_SCT_LIST(a, pp) IAmiSSL->i2d_SCT_LIST((a), (pp))
#define d2i_SCT_LIST(a, pp, len) IAmiSSL->d2i_SCT_LIST((a), (pp), (len))
#define i2o_SCT(sct, out) IAmiSSL->i2o_SCT((sct), (out))
#define o2i_SCT(psct, in, len) IAmiSSL->o2i_SCT((psct), (in), (len))
#define CTLOG_new(public_key, name) IAmiSSL->CTLOG_new((public_key), (name))
#define CTLOG_new_from_base64(ct_log, pkey_base64, name) IAmiSSL->CTLOG_new_from_base64((ct_log), (pkey_base64), (name))
#define CTLOG_free(log) IAmiSSL->CTLOG_free((log))
#define CTLOG_get0_name(log) IAmiSSL->CTLOG_get0_name((log))
#define CTLOG_get0_log_id(log, log_id, log_id_len) IAmiSSL->CTLOG_get0_log_id((log), (log_id), (log_id_len))
#define CTLOG_get0_public_key(log) IAmiSSL->CTLOG_get0_public_key((log))
#define CTLOG_STORE_new() IAmiSSL->CTLOG_STORE_new()
#define CTLOG_STORE_free(store) IAmiSSL->CTLOG_STORE_free((store))
#define CTLOG_STORE_get0_log_by_id(store, log_id, log_id_len) IAmiSSL->CTLOG_STORE_get0_log_by_id((store), (log_id), (log_id_len))
#define CTLOG_STORE_load_file(store, file) IAmiSSL->CTLOG_STORE_load_file((store), (file))
#define CTLOG_STORE_load_default_file(store) IAmiSSL->CTLOG_STORE_load_default_file((store))
#define ERR_load_CT_strings() IAmiSSL->ERR_load_CT_strings()
#define DHparams_it() IAmiSSL->DHparams_it()
#define DSA_SIG_get0(sig, pr, ps) IAmiSSL->DSA_SIG_get0((sig), (pr), (ps))
#define EC_GROUP_new_from_ecparameters(params) IAmiSSL->EC_GROUP_new_from_ecparameters((params))
#define EC_GROUP_get_ecparameters(group, params) IAmiSSL->EC_GROUP_get_ecparameters((group), (params))
#define EC_GROUP_new_from_ecpkparameters(params) IAmiSSL->EC_GROUP_new_from_ecpkparameters((params))
#define EC_GROUP_get_ecpkparameters(group, params) IAmiSSL->EC_GROUP_get_ecpkparameters((group), (params))
#define ECPKPARAMETERS_it() IAmiSSL->ECPKPARAMETERS_it()
#define ECPARAMETERS_it() IAmiSSL->ECPARAMETERS_it()
#define EC_KEY_can_sign(eckey) IAmiSSL->EC_KEY_can_sign((eckey))
#define EVP_blake2b512() IAmiSSL->EVP_blake2b512()
#define EVP_blake2s256() IAmiSSL->EVP_blake2s256()
#define EVP_PKEY_CTX_str2ctrl(ctx, cmd, str) IAmiSSL->EVP_PKEY_CTX_str2ctrl((ctx), (cmd), (str))
#define EVP_PKEY_CTX_hex2ctrl(ctx, cmd, hex) IAmiSSL->EVP_PKEY_CTX_hex2ctrl((ctx), (cmd), (hex))
#define ERR_load_KDF_strings() IAmiSSL->ERR_load_KDF_strings()
#define SRP_user_pwd_free(user_pwd) IAmiSSL->SRP_user_pwd_free((user_pwd))
#define SRP_VBASE_get1_by_user(vb, username) IAmiSSL->SRP_VBASE_get1_by_user((vb), (username))
#define SSL_CTX_has_client_custom_ext(ctx, ext_type) IAmiSSL->SSL_CTX_has_client_custom_ext((ctx), (ext_type))
#define SSL_CIPHER_get_kx_nid(c) IAmiSSL->SSL_CIPHER_get_kx_nid((c))
#define SSL_CIPHER_get_auth_nid(c) IAmiSSL->SSL_CIPHER_get_auth_nid((c))
#define SSL_CIPHER_is_aead(c) IAmiSSL->SSL_CIPHER_is_aead((c))
#define SSL_has_pending(s) IAmiSSL->SSL_has_pending((s))
#define SSL_SESSION_up_ref(ses) IAmiSSL->SSL_SESSION_up_ref((ses))
#define SSL_CTX_get_default_passwd_cb(ctx) IAmiSSL->SSL_CTX_get_default_passwd_cb((ctx))
#define SSL_CTX_get_default_passwd_cb_userdata(ctx) IAmiSSL->SSL_CTX_get_default_passwd_cb_userdata((ctx))
#define SSL_get_default_passwd_cb(ctx) IAmiSSL->SSL_get_default_passwd_cb((ctx))
#define SSL_get_default_passwd_cb_userdata(ctx) IAmiSSL->SSL_get_default_passwd_cb_userdata((ctx))
#define SSL_get_all_async_fds(s, fds, numfds) IAmiSSL->SSL_get_all_async_fds((s), (fds), (numfds))
#define SSL_get_changed_async_fds(s, addfd, numaddfds, delfd, numdelfds) IAmiSSL->SSL_get_changed_async_fds((s), (addfd), (numaddfds), (delfd), (numdelfds))
#define SSL_CTX_set_default_read_buffer_len(ctx, len) IAmiSSL->SSL_CTX_set_default_read_buffer_len((ctx), (len))
#define SSL_set_default_read_buffer_len(s, len) IAmiSSL->SSL_set_default_read_buffer_len((s), (len))
#define SSL_set_ct_validation_callback(s, callback, arg) IAmiSSL->SSL_set_ct_validation_callback((s), (callback), (arg))
#define SSL_CTX_set_ct_validation_callback(ctx, callback, arg) IAmiSSL->SSL_CTX_set_ct_validation_callback((ctx), (callback), (arg))
#define SSL_ct_is_enabled(s) IAmiSSL->SSL_ct_is_enabled((s))
#define SSL_CTX_ct_is_enabled(ctx) IAmiSSL->SSL_CTX_ct_is_enabled((ctx))
#define SSL_get0_peer_scts(s) IAmiSSL->SSL_get0_peer_scts((s))
#define SSL_CTX_set_default_ctlog_list_file(ctx) IAmiSSL->SSL_CTX_set_default_ctlog_list_file((ctx))
#define SSL_CTX_set_ctlog_list_file(ctx, path) IAmiSSL->SSL_CTX_set_ctlog_list_file((ctx), (path))
#define SSL_CTX_set0_ctlog_store(ctx, logs) IAmiSSL->SSL_CTX_set0_ctlog_store((ctx), (logs))
#define SSL_CTX_get0_ctlog_store(ctx) IAmiSSL->SSL_CTX_get0_ctlog_store((ctx))
#define X509_SIG_get0(sig, palg, pdigest) IAmiSSL->X509_SIG_get0((sig), (palg), (pdigest))
#define PKCS8_pkey_get0_attrs(p8) IAmiSSL->PKCS8_pkey_get0_attrs((p8))
#define PKCS8_pkey_add1_attr_by_NID(p8, nid, type, bytes, len) IAmiSSL->PKCS8_pkey_add1_attr_by_NID((p8), (nid), (type), (bytes), (len))
#define X509_STORE_up_ref(xs) IAmiSSL->X509_STORE_up_ref((xs))
#define SSL_enable_ct(s, validation_mode) IAmiSSL->SSL_enable_ct((s), (validation_mode))
#define SSL_CTX_enable_ct(ctx, validation_mode) IAmiSSL->SSL_CTX_enable_ct((ctx), (validation_mode))
#define SSL_CTX_get_ciphers(ctx) IAmiSSL->SSL_CTX_get_ciphers((ctx))
#define SSL_SESSION_get0_hostname(s) IAmiSSL->SSL_SESSION_get0_hostname((s))
#define SCT_validation_status_string(sct) IAmiSSL->SCT_validation_status_string((sct))
#define BIO_meth_new(type, name) IAmiSSL->BIO_meth_new((type), (name))
#define BIO_meth_get_puts(biom) IAmiSSL->BIO_meth_get_puts((biom))
#define BIO_meth_get_ctrl(biom) IAmiSSL->BIO_meth_get_ctrl((biom))
#define BIO_meth_get_gets(biom) IAmiSSL->BIO_meth_get_gets((biom))
#define BIO_get_data(a) IAmiSSL->BIO_get_data((a))
#define BIO_set_init(a, init) IAmiSSL->BIO_set_init((a), (init))
#define BIO_meth_set_puts(biom, func) IAmiSSL->BIO_meth_set_puts((biom), (func))
#define BIO_get_shutdown(a) IAmiSSL->BIO_get_shutdown((a))
#define BIO_get_init(a) IAmiSSL->BIO_get_init((a))
#define BIO_meth_set_ctrl(biom, ctrl) IAmiSSL->BIO_meth_set_ctrl((biom), (ctrl))
#define BIO_meth_set_read(biom, read) IAmiSSL->BIO_meth_set_read((biom), (read))
#define BIO_set_shutdown(a, shut) IAmiSSL->BIO_set_shutdown((a), (shut))
#define BIO_meth_set_create(biom, create) IAmiSSL->BIO_meth_set_create((biom), (create))
#define BIO_meth_get_write(biom) IAmiSSL->BIO_meth_get_write((biom))
#define BIO_meth_set_callback_ctrl(biom, callback_ctrl) IAmiSSL->BIO_meth_set_callback_ctrl((biom), (callback_ctrl))
#define BIO_meth_get_create(biom) IAmiSSL->BIO_meth_get_create((biom))
#define BIO_set_next(b, next) IAmiSSL->BIO_set_next((b), (next))
#define BIO_set_data(a, ptr) IAmiSSL->BIO_set_data((a), (ptr))
#define BIO_meth_set_write(biom, write) IAmiSSL->BIO_meth_set_write((biom), (write))
#define BIO_meth_set_destroy(biom, destroy) IAmiSSL->BIO_meth_set_destroy((biom), (destroy))
#define BIO_meth_set_gets(biom, ossl_gets) IAmiSSL->BIO_meth_set_gets((biom), (ossl_gets))
#define BIO_meth_get_callback_ctrl(biom) IAmiSSL->BIO_meth_get_callback_ctrl((biom))
#define BIO_meth_get_destroy(biom) IAmiSSL->BIO_meth_get_destroy((biom))
#define BIO_meth_get_read(biom) IAmiSSL->BIO_meth_get_read((biom))
#define BIO_set_retry_reason(bio, reason) IAmiSSL->BIO_set_retry_reason((bio), (reason))
#define BIO_meth_free(biom) IAmiSSL->BIO_meth_free((biom))
#define DSA_meth_set_bn_mod_exp(dsam, bn_mod_exp) IAmiSSL->DSA_meth_set_bn_mod_exp((dsam), (bn_mod_exp))
#define DSA_meth_set_init(dsam, init) IAmiSSL->DSA_meth_set_init((dsam), (init))
#define DSA_meth_free(dsam) IAmiSSL->DSA_meth_free((dsam))
#define DSA_meth_set_mod_exp(dsam, mod_exp) IAmiSSL->DSA_meth_set_mod_exp((dsam), (mod_exp))
#define DSA_meth_set_sign(dsam, sign) IAmiSSL->DSA_meth_set_sign((dsam), (sign))
#define DSA_meth_get_finish(dsam) IAmiSSL->DSA_meth_get_finish((dsam))
#define DSA_set_flags(d, flags) IAmiSSL->DSA_set_flags((d), (flags))
#define DSA_get0_pqg(d, p, q, g) IAmiSSL->DSA_get0_pqg((d), (p), (q), (g))
#define DSA_meth_get0_app_data(dsam) IAmiSSL->DSA_meth_get0_app_data((dsam))
#define DSA_meth_get_keygen(dsam) IAmiSSL->DSA_meth_get_keygen((dsam))
#define DSA_clear_flags(d, flags) IAmiSSL->DSA_clear_flags((d), (flags))
#define DSA_meth_get0_name(dsam) IAmiSSL->DSA_meth_get0_name((dsam))
#define DSA_meth_get_paramgen(dsam) IAmiSSL->DSA_meth_get_paramgen((dsam))
#define DSA_meth_get_sign(dsam) IAmiSSL->DSA_meth_get_sign((dsam))
#define DSA_meth_set_paramgen(dsam, paramgen) IAmiSSL->DSA_meth_set_paramgen((dsam), (paramgen))
#define DSA_test_flags(d, flags) IAmiSSL->DSA_test_flags((d), (flags))
#define DSA_meth_set0_app_data(dsam, app_data) IAmiSSL->DSA_meth_set0_app_data((dsam), (app_data))
#define DSA_meth_set1_name(dsam, name) IAmiSSL->DSA_meth_set1_name((dsam), (name))
#define DSA_get0_key(d, pub_key, priv_key) IAmiSSL->DSA_get0_key((d), (pub_key), (priv_key))
#define DSA_meth_get_mod_exp(dsam) IAmiSSL->DSA_meth_get_mod_exp((dsam))
#define DSA_set0_pqg(d, p, q, g) IAmiSSL->DSA_set0_pqg((d), (p), (q), (g))
#define DSA_meth_get_flags(dsam) IAmiSSL->DSA_meth_get_flags((dsam))
#define DSA_meth_get_verify(dsam) IAmiSSL->DSA_meth_get_verify((dsam))
#define DSA_meth_set_verify(dsam, verify) IAmiSSL->DSA_meth_set_verify((dsam), (verify))
#define DSA_meth_set_finish(dsam, finish) IAmiSSL->DSA_meth_set_finish((dsam), (finish))
#define DSA_meth_set_keygen(dsam, keygen) IAmiSSL->DSA_meth_set_keygen((dsam), (keygen))
#define DSA_meth_dup(dsam) IAmiSSL->DSA_meth_dup((dsam))
#define DSA_set0_key(d, pub_key, priv_key) IAmiSSL->DSA_set0_key((d), (pub_key), (priv_key))
#define DSA_meth_get_init(dsam) IAmiSSL->DSA_meth_get_init((dsam))
#define DSA_meth_set_sign_setup(dsam, sign_setup) IAmiSSL->DSA_meth_set_sign_setup((dsam), (sign_setup))
#define DSA_meth_get_bn_mod_exp(dsam) IAmiSSL->DSA_meth_get_bn_mod_exp((dsam))
#define DSA_get_method(d) IAmiSSL->DSA_get_method((d))
#define DSA_meth_new(name, flags) IAmiSSL->DSA_meth_new((name), (flags))
#define DSA_meth_set_flags(dsam, flags) IAmiSSL->DSA_meth_set_flags((dsam), (flags))
#define DSA_meth_get_sign_setup(dsam) IAmiSSL->DSA_meth_get_sign_setup((dsam))
#define DSA_get0_engine(d) IAmiSSL->DSA_get0_engine((d))
#define X509_VERIFY_PARAM_set_auth_level(param, auth_level) IAmiSSL->X509_VERIFY_PARAM_set_auth_level((param), (auth_level))
#define X509_VERIFY_PARAM_get_auth_level(param) IAmiSSL->X509_VERIFY_PARAM_get_auth_level((param))
#define X509_REQ_get0_pubkey(req) IAmiSSL->X509_REQ_get0_pubkey((req))
#define RSA_set0_key(r, n, e, d) IAmiSSL->RSA_set0_key((r), (n), (e), (d))
#define RSA_meth_get_flags(meth) IAmiSSL->RSA_meth_get_flags((meth))
#define RSA_meth_set_finish(rsa, finish) IAmiSSL->RSA_meth_set_finish((rsa), (finish))
#define RSA_meth_get_priv_dec(meth) IAmiSSL->RSA_meth_get_priv_dec((meth))
#define RSA_meth_get_sign(meth) IAmiSSL->RSA_meth_get_sign((meth))
#define RSA_meth_get_bn_mod_exp(meth) IAmiSSL->RSA_meth_get_bn_mod_exp((meth))
#define RSA_test_flags(r, flags) IAmiSSL->RSA_test_flags((r), (flags))
#define RSA_meth_new(name, flags) IAmiSSL->RSA_meth_new((name), (flags))
#define RSA_meth_get0_app_data(meth) IAmiSSL->RSA_meth_get0_app_data((meth))
#define RSA_meth_dup(meth) IAmiSSL->RSA_meth_dup((meth))
#define RSA_meth_set1_name(meth, name) IAmiSSL->RSA_meth_set1_name((meth), (name))
#define RSA_meth_set0_app_data(meth, app_data) IAmiSSL->RSA_meth_set0_app_data((meth), (app_data))
#define RSA_set_flags(r, flags) IAmiSSL->RSA_set_flags((r), (flags))
#define RSA_meth_set_sign(rsa, sign) IAmiSSL->RSA_meth_set_sign((rsa), (sign))
#define RSA_clear_flags(r, flags) IAmiSSL->RSA_clear_flags((r), (flags))
#define RSA_meth_get_keygen(meth) IAmiSSL->RSA_meth_get_keygen((meth))
#define RSA_meth_set_keygen(rsa, keygen) IAmiSSL->RSA_meth_set_keygen((rsa), (keygen))
#define RSA_meth_set_pub_dec(rsa, pub_dec) IAmiSSL->RSA_meth_set_pub_dec((rsa), (pub_dec))
#define RSA_meth_get_finish(meth) IAmiSSL->RSA_meth_get_finish((meth))
#define RSA_get0_key(r, n, e, d) IAmiSSL->RSA_get0_key((r), (n), (e), (d))
#define RSA_get0_engine(r) IAmiSSL->RSA_get0_engine((r))
#define RSA_meth_set_priv_enc(rsa, priv_enc) IAmiSSL->RSA_meth_set_priv_enc((rsa), (priv_enc))
#define RSA_meth_set_verify(rsa, verify) IAmiSSL->RSA_meth_set_verify((rsa), (verify))
#define RSA_get0_factors(r, p, q) IAmiSSL->RSA_get0_factors((r), (p), (q))
#define RSA_meth_get0_name(meth) IAmiSSL->RSA_meth_get0_name((meth))
#define RSA_meth_get_mod_exp(meth) IAmiSSL->RSA_meth_get_mod_exp((meth))
#define RSA_meth_set_flags(meth, flags) IAmiSSL->RSA_meth_set_flags((meth), (flags))
#define RSA_meth_get_pub_dec(meth) IAmiSSL->RSA_meth_get_pub_dec((meth))
#define RSA_meth_set_bn_mod_exp(rsa, bn_mod_exp) IAmiSSL->RSA_meth_set_bn_mod_exp((rsa), (bn_mod_exp))
#define RSA_meth_get_init(meth) IAmiSSL->RSA_meth_get_init((meth))
#define RSA_meth_free(meth) IAmiSSL->RSA_meth_free((meth))
#define RSA_meth_get_pub_enc(meth) IAmiSSL->RSA_meth_get_pub_enc((meth))
#define RSA_meth_set_mod_exp(rsa, mod_exp) IAmiSSL->RSA_meth_set_mod_exp((rsa), (mod_exp))
#define RSA_set0_factors(r, p, q) IAmiSSL->RSA_set0_factors((r), (p), (q))
#define RSA_meth_set_pub_enc(rsa, pub_enc) IAmiSSL->RSA_meth_set_pub_enc((rsa), (pub_enc))
#define RSA_meth_set_priv_dec(rsa, priv_dec) IAmiSSL->RSA_meth_set_priv_dec((rsa), (priv_dec))
#define RSA_meth_get_verify(meth) IAmiSSL->RSA_meth_get_verify((meth))
#define RSA_meth_set_init(rsa, init) IAmiSSL->RSA_meth_set_init((rsa), (init))
#define RSA_meth_get_priv_enc(meth) IAmiSSL->RSA_meth_get_priv_enc((meth))
#define RSA_set0_crt_params(r, dmp1, dmq1, iqmp) IAmiSSL->RSA_set0_crt_params((r), (dmp1), (dmq1), (iqmp))
#define RSA_get0_crt_params(r, dmp1, dmq1, iqmp) IAmiSSL->RSA_get0_crt_params((r), (dmp1), (dmq1), (iqmp))
#define DH_set0_pqg(dh, p, q, g) IAmiSSL->DH_set0_pqg((dh), (p), (q), (g))
#define DH_clear_flags(dh, flags) IAmiSSL->DH_clear_flags((dh), (flags))
#define DH_get0_key(dh, pub_key, priv_key) IAmiSSL->DH_get0_key((dh), (pub_key), (priv_key))
#define DH_get0_engine(d) IAmiSSL->DH_get0_engine((d))
#define DH_set0_key(dh, pub_key, priv_key) IAmiSSL->DH_set0_key((dh), (pub_key), (priv_key))
#define DH_set_length(dh, length) IAmiSSL->DH_set_length((dh), (length))
#define DH_test_flags(dh, flags) IAmiSSL->DH_test_flags((dh), (flags))
#define DH_get_length(dh) IAmiSSL->DH_get_length((dh))
#define DH_get0_pqg(dh, p, q, g) IAmiSSL->DH_get0_pqg((dh), (p), (q), (g))
#define DH_meth_get_compute_key(dhm) IAmiSSL->DH_meth_get_compute_key((dhm))
#define DH_meth_set1_name(dhm, name) IAmiSSL->DH_meth_set1_name((dhm), (name))
#define DH_meth_set_init(dhm, init) IAmiSSL->DH_meth_set_init((dhm), (init))
#define DH_meth_get_finish(dhm) IAmiSSL->DH_meth_get_finish((dhm))
#define DH_meth_get0_name(dhm) IAmiSSL->DH_meth_get0_name((dhm))
#define DH_meth_set_generate_params(dhm, generate_params) IAmiSSL->DH_meth_set_generate_params((dhm), (generate_params))
#define DH_meth_set_compute_key(dhm, compute_key) IAmiSSL->DH_meth_set_compute_key((dhm), (compute_key))
#define DH_meth_set_flags(dhm, flags) IAmiSSL->DH_meth_set_flags((dhm), (flags))
#define DH_meth_get_generate_params(dhm) IAmiSSL->DH_meth_get_generate_params((dhm))
#define DH_meth_get_flags(dhm) IAmiSSL->DH_meth_get_flags((dhm))
#define DH_meth_set_finish(dhm, finish) IAmiSSL->DH_meth_set_finish((dhm), (finish))
#define DH_meth_get0_app_data(dhm) IAmiSSL->DH_meth_get0_app_data((dhm))
#define DH_meth_set0_app_data(dhm, app_data) IAmiSSL->DH_meth_set0_app_data((dhm), (app_data))
#define DH_meth_get_init(dhm) IAmiSSL->DH_meth_get_init((dhm))
#define DH_meth_get_bn_mod_exp(dhm) IAmiSSL->DH_meth_get_bn_mod_exp((dhm))
#define DH_meth_new(name, flags) IAmiSSL->DH_meth_new((name), (flags))
#define DH_meth_dup(dhm) IAmiSSL->DH_meth_dup((dhm))
#define DH_meth_set_bn_mod_exp(dhm, bn_mod_exp) IAmiSSL->DH_meth_set_bn_mod_exp((dhm), (bn_mod_exp))
#define DH_meth_set_generate_key(dhm, generate_key) IAmiSSL->DH_meth_set_generate_key((dhm), (generate_key))
#define DH_meth_free(dhm) IAmiSSL->DH_meth_free((dhm))
#define DH_meth_get_generate_key(dhm) IAmiSSL->DH_meth_get_generate_key((dhm))
#define DH_set_flags(dh, flags) IAmiSSL->DH_set_flags((dh), (flags))
#define X509_STORE_CTX_get_obj_by_subject(vs, type, name) IAmiSSL->X509_STORE_CTX_get_obj_by_subject((vs), (type), (name))
#define X509_OBJECT_free(a) IAmiSSL->X509_OBJECT_free((a))
#define X509_OBJECT_get0_X509(a) IAmiSSL->X509_OBJECT_get0_X509((a))
#define X509_STORE_CTX_get0_untrusted(ctx) IAmiSSL->X509_STORE_CTX_get0_untrusted((ctx))
#define X509_STORE_CTX_get0_cert(ctx) IAmiSSL->X509_STORE_CTX_get0_cert((ctx))
#define X509_STORE_CTX_set_verify(ctx, verify) IAmiSSL->X509_STORE_CTX_set_verify((ctx), (verify))
#define X509_STORE_CTX_get_verify(ctx) IAmiSSL->X509_STORE_CTX_get_verify((ctx))
#define X509_STORE_CTX_get_verify_cb(ctx) IAmiSSL->X509_STORE_CTX_get_verify_cb((ctx))
#define X509_STORE_CTX_set0_verified_chain(ctx, sk) IAmiSSL->X509_STORE_CTX_set0_verified_chain((ctx), (sk))
#define X509_STORE_CTX_set0_untrusted(ctx, sk) IAmiSSL->X509_STORE_CTX_set0_untrusted((ctx), (sk))
#define OPENSSL_hexchar2int(c) IAmiSSL->OPENSSL_hexchar2int((c))
#define DSA_SIG_set0(sig, r, s) IAmiSSL->DSA_SIG_set0((sig), (r), (s))
#define DSA_bits(d) IAmiSSL->DSA_bits((d))
#define ECDSA_SIG_set0(sig, r, s) IAmiSSL->ECDSA_SIG_set0((sig), (r), (s))
#define EVP_ENCODE_CTX_copy(dctx, sctx) IAmiSSL->EVP_ENCODE_CTX_copy((dctx), (sctx))
#define EVP_PKEY_get0_hmac(pkey, len) IAmiSSL->EVP_PKEY_get0_hmac((pkey), (len))
#define HMAC_CTX_get_md(ctx) IAmiSSL->HMAC_CTX_get_md((ctx))
#define OCSP_resp_get0_certs(bs) IAmiSSL->OCSP_resp_get0_certs((bs))
#define OCSP_resp_get0_id(bs, pid, pname) IAmiSSL->OCSP_resp_get0_id((bs), (pid), (pname))
#define PEM_write_bio_PrivateKey_traditional(bp, x, enc, kstr, klen, cb, u) IAmiSSL->PEM_write_bio_PrivateKey_traditional((bp), (x), (enc), (kstr), (klen), (cb), (u))
#define SSL_SESSION_get_protocol_version(s) IAmiSSL->SSL_SESSION_get_protocol_version((s))
#define SSL_is_dtls(s) IAmiSSL->SSL_is_dtls((s))
#define SSL_CTX_dane_set_flags(ctx, flags) IAmiSSL->SSL_CTX_dane_set_flags((ctx), (flags))
#define SSL_CTX_dane_clear_flags(ctx, flags) IAmiSSL->SSL_CTX_dane_clear_flags((ctx), (flags))
#define SSL_dane_set_flags(ssl, flags) IAmiSSL->SSL_dane_set_flags((ssl), (flags))
#define SSL_dane_clear_flags(ssl, flags) IAmiSSL->SSL_dane_clear_flags((ssl), (flags))
#define SSL_client_version(s) IAmiSSL->SSL_client_version((s))
#define X509_get_pathlen(x) IAmiSSL->X509_get_pathlen((x))
#define X509_OBJECT_get_type(a) IAmiSSL->X509_OBJECT_get_type((a))
#define X509_OBJECT_get0_X509_CRL(a) IAmiSSL->X509_OBJECT_get0_X509_CRL((a))
#define X509_STORE_lock(xs) IAmiSSL->X509_STORE_lock((xs))
#define X509_STORE_unlock(xs) IAmiSSL->X509_STORE_unlock((xs))
#define X509_STORE_get0_objects(xs) IAmiSSL->X509_STORE_get0_objects((xs))
#define X509_STORE_get0_param(xs) IAmiSSL->X509_STORE_get0_param((xs))
#define X509_STORE_set_verify(xs, verify) IAmiSSL->X509_STORE_set_verify((xs), (verify))
#define X509_STORE_get_verify(xs) IAmiSSL->X509_STORE_get_verify((xs))
#define X509_STORE_get_verify_cb(xs) IAmiSSL->X509_STORE_get_verify_cb((xs))
#define X509_STORE_set_get_issuer(xs, get_issuer) IAmiSSL->X509_STORE_set_get_issuer((xs), (get_issuer))
#define X509_STORE_get_get_issuer(xs) IAmiSSL->X509_STORE_get_get_issuer((xs))
#define X509_STORE_set_check_issued(xs, check_issued) IAmiSSL->X509_STORE_set_check_issued((xs), (check_issued))
#define X509_STORE_get_check_issued(xs) IAmiSSL->X509_STORE_get_check_issued((xs))
#define X509_STORE_set_check_revocation(xs, check_revocation) IAmiSSL->X509_STORE_set_check_revocation((xs), (check_revocation))
#define X509_STORE_get_check_revocation(xs) IAmiSSL->X509_STORE_get_check_revocation((xs))
#define X509_STORE_set_get_crl(xs, get_crl) IAmiSSL->X509_STORE_set_get_crl((xs), (get_crl))
#define X509_STORE_get_get_crl(xs) IAmiSSL->X509_STORE_get_get_crl((xs))
#define X509_STORE_set_check_crl(xs, check_crl) IAmiSSL->X509_STORE_set_check_crl((xs), (check_crl))
#define X509_STORE_get_check_crl(xs) IAmiSSL->X509_STORE_get_check_crl((xs))
#define X509_STORE_set_cert_crl(xs, cert_crl) IAmiSSL->X509_STORE_set_cert_crl((xs), (cert_crl))
#define X509_STORE_get_cert_crl(xs) IAmiSSL->X509_STORE_get_cert_crl((xs))
#define X509_STORE_set_check_policy(xs, check_policy) IAmiSSL->X509_STORE_set_check_policy((xs), (check_policy))
#define X509_STORE_get_check_policy(xs) IAmiSSL->X509_STORE_get_check_policy((xs))
#define X509_STORE_set_lookup_certs(xs, lookup_certs) IAmiSSL->X509_STORE_set_lookup_certs((xs), (lookup_certs))
#define X509_STORE_get_lookup_certs(xs) IAmiSSL->X509_STORE_get_lookup_certs((xs))
#define X509_STORE_set_lookup_crls(xs, lookup_crls) IAmiSSL->X509_STORE_set_lookup_crls((xs), (lookup_crls))
#define X509_STORE_get_lookup_crls(xs) IAmiSSL->X509_STORE_get_lookup_crls((xs))
#define X509_STORE_set_cleanup(xs, cleanup) IAmiSSL->X509_STORE_set_cleanup((xs), (cleanup))
#define X509_STORE_get_cleanup(xs) IAmiSSL->X509_STORE_get_cleanup((xs))
#define X509_STORE_set_ex_data(xs, idx, data) IAmiSSL->X509_STORE_set_ex_data((xs), (idx), (data))
#define X509_STORE_get_ex_data(xs, idx) IAmiSSL->X509_STORE_get_ex_data((xs), (idx))
#define X509_STORE_CTX_get_get_issuer(ctx) IAmiSSL->X509_STORE_CTX_get_get_issuer((ctx))
#define X509_STORE_CTX_get_check_issued(ctx) IAmiSSL->X509_STORE_CTX_get_check_issued((ctx))
#define X509_STORE_CTX_get_check_revocation(ctx) IAmiSSL->X509_STORE_CTX_get_check_revocation((ctx))
#define X509_STORE_CTX_get_get_crl(ctx) IAmiSSL->X509_STORE_CTX_get_get_crl((ctx))
#define X509_STORE_CTX_get_check_crl(ctx) IAmiSSL->X509_STORE_CTX_get_check_crl((ctx))
#define X509_STORE_CTX_get_cert_crl(ctx) IAmiSSL->X509_STORE_CTX_get_cert_crl((ctx))
#define X509_STORE_CTX_get_check_policy(ctx) IAmiSSL->X509_STORE_CTX_get_check_policy((ctx))
#define X509_STORE_CTX_get_lookup_certs(ctx) IAmiSSL->X509_STORE_CTX_get_lookup_certs((ctx))
#define X509_STORE_CTX_get_lookup_crls(ctx) IAmiSSL->X509_STORE_CTX_get_lookup_crls((ctx))
#define X509_STORE_CTX_get_cleanup(ctx) IAmiSSL->X509_STORE_CTX_get_cleanup((ctx))
#define X509_STORE_CTX_set_error_depth(ctx, depth) IAmiSSL->X509_STORE_CTX_set_error_depth((ctx), (depth))
#define X509_STORE_CTX_set_current_cert(ctx, x) IAmiSSL->X509_STORE_CTX_set_current_cert((ctx), (x))
#define NAME_CONSTRAINTS_check_CN(x, nc) IAmiSSL->NAME_CONSTRAINTS_check_CN((x), (nc))
#define X509_set_proxy_flag(x) IAmiSSL->X509_set_proxy_flag((x))
#define X509_set_proxy_pathlen(x, l) IAmiSSL->X509_set_proxy_pathlen((x), (l))
#define X509_get_proxy_pathlen(x) IAmiSSL->X509_get_proxy_pathlen((x))
#define ASIdentifierChoice_new() IAmiSSL->ASIdentifierChoice_new()
#define ASIdentifierChoice_free(a) IAmiSSL->ASIdentifierChoice_free((a))
#define d2i_ASIdentifierChoice(a, in, len) IAmiSSL->d2i_ASIdentifierChoice((a), (in), (len))
#define i2d_ASIdentifierChoice(a, out) IAmiSSL->i2d_ASIdentifierChoice((a), (out))
#define ASIdentifierChoice_it() IAmiSSL->ASIdentifierChoice_it()
#define ASIdentifiers_new() IAmiSSL->ASIdentifiers_new()
#define ASIdentifiers_free(a) IAmiSSL->ASIdentifiers_free((a))
#define d2i_ASIdentifiers(a, in, len) IAmiSSL->d2i_ASIdentifiers((a), (in), (len))
#define i2d_ASIdentifiers(a, out) IAmiSSL->i2d_ASIdentifiers((a), (out))
#define ASIdentifiers_it() IAmiSSL->ASIdentifiers_it()
#define ASIdOrRange_new() IAmiSSL->ASIdOrRange_new()
#define ASIdOrRange_free(a) IAmiSSL->ASIdOrRange_free((a))
#define d2i_ASIdOrRange(a, in, len) IAmiSSL->d2i_ASIdOrRange((a), (in), (len))
#define i2d_ASIdOrRange(a, out) IAmiSSL->i2d_ASIdOrRange((a), (out))
#define ASIdOrRange_it() IAmiSSL->ASIdOrRange_it()
#define ASRange_new() IAmiSSL->ASRange_new()
#define ASRange_free(a) IAmiSSL->ASRange_free((a))
#define d2i_ASRange(a, in, len) IAmiSSL->d2i_ASRange((a), (in), (len))
#define i2d_ASRange(a, out) IAmiSSL->i2d_ASRange((a), (out))
#define ASRange_it() IAmiSSL->ASRange_it()
#define IPAddressChoice_new() IAmiSSL->IPAddressChoice_new()
#define IPAddressChoice_free(a) IAmiSSL->IPAddressChoice_free((a))
#define d2i_IPAddressChoice(a, in, len) IAmiSSL->d2i_IPAddressChoice((a), (in), (len))
#define i2d_IPAddressChoice(a, out) IAmiSSL->i2d_IPAddressChoice((a), (out))
#define IPAddressChoice_it() IAmiSSL->IPAddressChoice_it()
#define IPAddressFamily_new() IAmiSSL->IPAddressFamily_new()
#define IPAddressFamily_free(a) IAmiSSL->IPAddressFamily_free((a))
#define d2i_IPAddressFamily(a, in, len) IAmiSSL->d2i_IPAddressFamily((a), (in), (len))
#define i2d_IPAddressFamily(a, out) IAmiSSL->i2d_IPAddressFamily((a), (out))
#define IPAddressFamily_it() IAmiSSL->IPAddressFamily_it()
#define IPAddressOrRange_new() IAmiSSL->IPAddressOrRange_new()
#define IPAddressOrRange_free(a) IAmiSSL->IPAddressOrRange_free((a))
#define d2i_IPAddressOrRange(a, in, len) IAmiSSL->d2i_IPAddressOrRange((a), (in), (len))
#define i2d_IPAddressOrRange(a, out) IAmiSSL->i2d_IPAddressOrRange((a), (out))
#define IPAddressOrRange_it() IAmiSSL->IPAddressOrRange_it()
#define ASN1_STRING_get0_data(x) IAmiSSL->ASN1_STRING_get0_data((x))
#define X509_get0_notBefore(x) IAmiSSL->X509_get0_notBefore((x))
#define X509_get0_notAfter(x) IAmiSSL->X509_get0_notAfter((x))
#define X509_CRL_get0_lastUpdate(crl) IAmiSSL->X509_CRL_get0_lastUpdate((crl))
#define X509_CRL_get0_nextUpdate(crl) IAmiSSL->X509_CRL_get0_nextUpdate((crl))
#define OPENSSL_uni2utf8(uni, unilen) IAmiSSL->OPENSSL_uni2utf8((uni), (unilen))
#define CT_POLICY_EVAL_CTX_set_shared_CTLOG_STORE(ctx, log_store) IAmiSSL->CT_POLICY_EVAL_CTX_set_shared_CTLOG_STORE((ctx), (log_store))
#define CT_POLICY_EVAL_CTX_set1_cert(ctx, cert) IAmiSSL->CT_POLICY_EVAL_CTX_set1_cert((ctx), (cert))
#define CT_POLICY_EVAL_CTX_set1_issuer(ctx, issuer) IAmiSSL->CT_POLICY_EVAL_CTX_set1_issuer((ctx), (issuer))
#define ECPARAMETERS_new() IAmiSSL->ECPARAMETERS_new()
#define ECPARAMETERS_free(a) IAmiSSL->ECPARAMETERS_free((a))
#define BIO_get_new_index() IAmiSSL->BIO_get_new_index()
#define EVP_PKEY_set1_encoded_public_key(pkey, pub, publen) IAmiSSL->EVP_PKEY_set1_encoded_public_key((pkey), (pub), (publen))
#define EVP_PKEY_get1_encoded_public_key(pkey, ppub) IAmiSSL->EVP_PKEY_get1_encoded_public_key((pkey), (ppub))
#define OCSP_RESPID_set_by_name(respid, cert) IAmiSSL->OCSP_RESPID_set_by_name((respid), (cert))
#define OCSP_RESPID_set_by_key(respid, cert) IAmiSSL->OCSP_RESPID_set_by_key((respid), (cert))
#define OCSP_RESPID_match(respid, cert) IAmiSSL->OCSP_RESPID_match((respid), (cert))
#define PKCS12_add_friendlyname_utf8(bag, name, namelen) IAmiSSL->PKCS12_add_friendlyname_utf8((bag), (name), (namelen))
#define PKCS12_key_gen_utf8(pass, passlen, salt, saltlen, id, iter, n, out, md_type) IAmiSSL->PKCS12_key_gen_utf8((pass), (passlen), (salt), (saltlen), (id), (iter), (n), (out), (md_type))
#define OPENSSL_utf82uni(asc, asclen, uni, unilen) IAmiSSL->OPENSSL_utf82uni((asc), (asclen), (uni), (unilen))
#define SSL_SESSION_get0_cipher(s) IAmiSSL->SSL_SESSION_get0_cipher((s))
#define SSL_SESSION_set1_id(s, sid, sid_len) IAmiSSL->SSL_SESSION_set1_id((s), (sid), (sid_len))
#define SSL_SESSION_get0_id_context(s, len) IAmiSSL->SSL_SESSION_get0_id_context((s), (len))
#define TS_STATUS_INFO_get0_text(a) IAmiSSL->TS_STATUS_INFO_get0_text((a))
#define X509_SIG_getm(sig, palg, pdigest) IAmiSSL->X509_SIG_getm((sig), (palg), (pdigest))
#define X509_get0_serialNumber(x) IAmiSSL->X509_get0_serialNumber((x))
#define CT_POLICY_EVAL_CTX_get_time(ctx) IAmiSSL->CT_POLICY_EVAL_CTX_get_time((ctx))
#define CT_POLICY_EVAL_CTX_set_time(ctx, time_in_ms) IAmiSSL->CT_POLICY_EVAL_CTX_set_time((ctx), (time_in_ms))
#define DH_check_params(dh, ret) IAmiSSL->DH_check_params((dh), (ret))
#define SSL_COMP_get0_name(comp) IAmiSSL->SSL_COMP_get0_name((comp))
#define SSL_COMP_get_id(comp) IAmiSSL->SSL_COMP_get_id((comp))
#define X509_VERIFY_PARAM_get_time(param) IAmiSSL->X509_VERIFY_PARAM_get_time((param))
#define X509_VERIFY_PARAM_set_inh_flags(param, flags) IAmiSSL->X509_VERIFY_PARAM_set_inh_flags((param), (flags))
#define X509_VERIFY_PARAM_get_inh_flags(param) IAmiSSL->X509_VERIFY_PARAM_get_inh_flags((param))
#define CRYPTO_secure_clear_free(ptr, num, file, line) IAmiSSL->CRYPTO_secure_clear_free((ptr), (num), (file), (line))
#define EVP_PKEY_set1_engine(pkey, e) IAmiSSL->EVP_PKEY_set1_engine((pkey), (e))
#define SSL_get_client_ciphers(s) IAmiSSL->SSL_get_client_ciphers((s))
#define SSL_CIPHER_standard_name(c) IAmiSSL->SSL_CIPHER_standard_name((c))
#define SSL_get0_verified_chain(s) IAmiSSL->SSL_get0_verified_chain((s))
#define SSL_COMP_set0_compression_methods(meths) IAmiSSL->SSL_COMP_set0_compression_methods((meths))
#define SSL_CTX_set1_cert_store(a, b) IAmiSSL->SSL_CTX_set1_cert_store((a), (b))
#define DTLS_get_data_mtu(s) IAmiSSL->DTLS_get_data_mtu((s))
#define SSL_read_ex(ssl, buf, num, readbytes) IAmiSSL->SSL_read_ex((ssl), (buf), (num), (readbytes))
#define SSL_peek_ex(ssl, buf, num, readbytes) IAmiSSL->SSL_peek_ex((ssl), (buf), (num), (readbytes))
#define SSL_write_ex(s, buf, num, written) IAmiSSL->SSL_write_ex((s), (buf), (num), (written))
#define SSL_CTX_set_keylog_callback(ctx, cb) IAmiSSL->SSL_CTX_set_keylog_callback((ctx), (cb))
#define SSL_CTX_get_keylog_callback(ctx) IAmiSSL->SSL_CTX_get_keylog_callback((ctx))
#define SSL_get_peer_signature_type_nid(s, pnid) IAmiSSL->SSL_get_peer_signature_type_nid((s), (pnid))
#define SSL_key_update(s, updatetype) IAmiSSL->SSL_key_update((s), (updatetype))
#define SSL_get_key_update_type(s) IAmiSSL->SSL_get_key_update_type((s))
#define SSL_bytes_to_cipher_list(s, bytes, len, isv2format, sk, scsvs) IAmiSSL->SSL_bytes_to_cipher_list((s), (bytes), (len), (isv2format), (sk), (scsvs))
#define SSL_client_hello_get0_compression_methods(s, out) IAmiSSL->SSL_client_hello_get0_compression_methods((s), (out))
#define SSL_client_hello_get0_ciphers(s, out) IAmiSSL->SSL_client_hello_get0_ciphers((s), (out))
#define SSL_client_hello_get0_ext(s, type, out, outlen) IAmiSSL->SSL_client_hello_get0_ext((s), (type), (out), (outlen))
#define SSL_client_hello_get0_session_id(s, out) IAmiSSL->SSL_client_hello_get0_session_id((s), (out))
#define SSL_client_hello_get0_random(s, out) IAmiSSL->SSL_client_hello_get0_random((s), (out))
#define SSL_CTX_set_client_hello_cb(c, cb, arg) IAmiSSL->SSL_CTX_set_client_hello_cb((c), (cb), (arg))
#define SSL_client_hello_get0_legacy_version(s) IAmiSSL->SSL_client_hello_get0_legacy_version((s))
#define SSL_client_hello_isv2(s) IAmiSSL->SSL_client_hello_isv2((s))
#define SSL_set_max_early_data(s, max_early_data) IAmiSSL->SSL_set_max_early_data((s), (max_early_data))
#define SSL_CTX_set_max_early_data(ctx, max_early_data) IAmiSSL->SSL_CTX_set_max_early_data((ctx), (max_early_data))
#define SSL_get_max_early_data(s) IAmiSSL->SSL_get_max_early_data((s))
#define SSL_CTX_get_max_early_data(ctx) IAmiSSL->SSL_CTX_get_max_early_data((ctx))
#define SSL_write_early_data(s, buf, num, written) IAmiSSL->SSL_write_early_data((s), (buf), (num), (written))
#define SSL_read_early_data(s, buf, num, readbytes) IAmiSSL->SSL_read_early_data((s), (buf), (num), (readbytes))
#define SSL_get_early_data_status(s) IAmiSSL->SSL_get_early_data_status((s))
#define SSL_SESSION_get_max_early_data(s) IAmiSSL->SSL_SESSION_get_max_early_data((s))
#define SSL_add1_to_CA_list(ssl, x) IAmiSSL->SSL_add1_to_CA_list((ssl), (x))
#define SSL_set0_CA_list(s, name_list) IAmiSSL->SSL_set0_CA_list((s), (name_list))
#define SSL_CTX_set0_CA_list(ctx, name_list) IAmiSSL->SSL_CTX_set0_CA_list((ctx), (name_list))
#define SSL_get0_CA_list(s) IAmiSSL->SSL_get0_CA_list((s))
#define SSL_get0_peer_CA_list(s) IAmiSSL->SSL_get0_peer_CA_list((s))
#define SSL_CTX_add1_to_CA_list(ctx, x) IAmiSSL->SSL_CTX_add1_to_CA_list((ctx), (x))
#define SSL_CTX_get0_CA_list(ctx) IAmiSSL->SSL_CTX_get0_CA_list((ctx))
#define SSL_CTX_add_custom_ext(ctx, ext_type, context, add_cb, free_cb, add_arg, parse_cb, parse_arg) IAmiSSL->SSL_CTX_add_custom_ext((ctx), (ext_type), (context), (add_cb), (free_cb), (add_arg), (parse_cb), (parse_arg))
#define SSL_SESSION_is_resumable(s) IAmiSSL->SSL_SESSION_is_resumable((s))
#define SSL_CTX_set_record_padding_callback(ctx, cb) IAmiSSL->SSL_CTX_set_record_padding_callback((ctx), (cb))
#define SSL_set_record_padding_callback(ssl, cb) IAmiSSL->SSL_set_record_padding_callback((ssl), (cb))
#define SSL_CTX_set_block_padding(ctx, block_size) IAmiSSL->SSL_CTX_set_block_padding((ctx), (block_size))
#define SSL_CTX_get_record_padding_callback_arg(ctx) IAmiSSL->SSL_CTX_get_record_padding_callback_arg((ctx))
#define SSL_get_record_padding_callback_arg(ssl) IAmiSSL->SSL_get_record_padding_callback_arg((ssl))
#define SSL_set_block_padding(ssl, block_size) IAmiSSL->SSL_set_block_padding((ssl), (block_size))
#define SSL_set_record_padding_callback_arg(ssl, arg) IAmiSSL->SSL_set_record_padding_callback_arg((ssl), (arg))
#define SSL_CTX_set_record_padding_callback_arg(ctx, arg) IAmiSSL->SSL_CTX_set_record_padding_callback_arg((ctx), (arg))
#define SSL_CTX_use_serverinfo_ex(ctx, version, serverinfo, serverinfo_length) IAmiSSL->SSL_CTX_use_serverinfo_ex((ctx), (version), (serverinfo), (serverinfo_length))
#define SSL_client_hello_get1_extensions_present(s, out, outlen) IAmiSSL->SSL_client_hello_get1_extensions_present((s), (out), (outlen))
#define SSL_set_psk_find_session_callback(s, cb) IAmiSSL->SSL_set_psk_find_session_callback((s), (cb))
#define SSL_set_psk_use_session_callback(s, cb) IAmiSSL->SSL_set_psk_use_session_callback((s), (cb))
#define SSL_CTX_set_psk_use_session_callback(ctx, cb) IAmiSSL->SSL_CTX_set_psk_use_session_callback((ctx), (cb))
#define SSL_CTX_set_psk_find_session_callback(ctx, cb) IAmiSSL->SSL_CTX_set_psk_find_session_callback((ctx), (cb))
#define SSL_CIPHER_get_handshake_digest(c) IAmiSSL->SSL_CIPHER_get_handshake_digest((c))
#define SSL_SESSION_set1_master_key(sess, in, len) IAmiSSL->SSL_SESSION_set1_master_key((sess), (in), (len))
#define SSL_SESSION_set_cipher(s, cipher) IAmiSSL->SSL_SESSION_set_cipher((s), (cipher))
#define SSL_SESSION_set_protocol_version(s, version) IAmiSSL->SSL_SESSION_set_protocol_version((s), (version))
#define OPENSSL_cipher_name(rfc_name) IAmiSSL->OPENSSL_cipher_name((rfc_name))
#define SSL_alloc_buffers(ssl) IAmiSSL->SSL_alloc_buffers((ssl))
#define SSL_free_buffers(ssl) IAmiSSL->SSL_free_buffers((ssl))
#define SSL_SESSION_dup(src) IAmiSSL->SSL_SESSION_dup((src))
#define SSL_get_pending_cipher(s) IAmiSSL->SSL_get_pending_cipher((s))
#define SSL_CIPHER_get_protocol_id(c) IAmiSSL->SSL_CIPHER_get_protocol_id((c))
#define SSL_SESSION_set_max_early_data(s, max_early_data) IAmiSSL->SSL_SESSION_set_max_early_data((s), (max_early_data))
#define SSL_SESSION_set1_alpn_selected(s, alpn, len) IAmiSSL->SSL_SESSION_set1_alpn_selected((s), (alpn), (len))
#define SSL_SESSION_set1_hostname(s, hostname) IAmiSSL->SSL_SESSION_set1_hostname((s), (hostname))
#define SSL_SESSION_get0_alpn_selected(s, alpn, len) IAmiSSL->SSL_SESSION_get0_alpn_selected((s), (alpn), (len))
#define DTLS_set_timer_cb(s, cb) IAmiSSL->DTLS_set_timer_cb((s), (cb))
#define SSL_CTX_set_tlsext_max_fragment_length(ctx, mode) IAmiSSL->SSL_CTX_set_tlsext_max_fragment_length((ctx), (mode))
#define SSL_set_tlsext_max_fragment_length(ssl, mode) IAmiSSL->SSL_set_tlsext_max_fragment_length((ssl), (mode))
#define SSL_SESSION_get_max_fragment_length(sess) IAmiSSL->SSL_SESSION_get_max_fragment_length((sess))
#define SSL_stateless(s) IAmiSSL->SSL_stateless((s))
#define SSL_verify_client_post_handshake(s) IAmiSSL->SSL_verify_client_post_handshake((s))
#define SSL_set_post_handshake_auth(s, val) IAmiSSL->SSL_set_post_handshake_auth((s), (val))
#define SSL_export_keying_material_early(s, out, olen, label, llen, context, contextlen) IAmiSSL->SSL_export_keying_material_early((s), (out), (olen), (label), (llen), (context), (contextlen))
#define SSL_CTX_use_cert_and_key(ctx, x509, privatekey, chain, override) IAmiSSL->SSL_CTX_use_cert_and_key((ctx), (x509), (privatekey), (chain), (override))
#define SSL_use_cert_and_key(ssl, x509, privatekey, chain, override) IAmiSSL->SSL_use_cert_and_key((ssl), (x509), (privatekey), (chain), (override))
#define SSL_SESSION_get0_ticket_appdata(ss, data, len) IAmiSSL->SSL_SESSION_get0_ticket_appdata((ss), (data), (len))
#define SSL_SESSION_set1_ticket_appdata(ss, data, len) IAmiSSL->SSL_SESSION_set1_ticket_appdata((ss), (data), (len))
#define SSL_CTX_set_session_ticket_cb(ctx, gen_cb, dec_cb, arg) IAmiSSL->SSL_CTX_set_session_ticket_cb((ctx), (gen_cb), (dec_cb), (arg))
#define SSL_CTX_set_stateless_cookie_generate_cb(ctx, gen_stateless_cookie_cb) IAmiSSL->SSL_CTX_set_stateless_cookie_generate_cb((ctx), (gen_stateless_cookie_cb))
#define SSL_CTX_set_stateless_cookie_verify_cb(ctx, verify_stateless_cookie_cb) IAmiSSL->SSL_CTX_set_stateless_cookie_verify_cb((ctx), (verify_stateless_cookie_cb))
#define SSL_CTX_set_ciphersuites(ctx, str) IAmiSSL->SSL_CTX_set_ciphersuites((ctx), (str))
#define SSL_set_ciphersuites(s, str) IAmiSSL->SSL_set_ciphersuites((s), (str))
#define SSL_set_num_tickets(s, num_tickets) IAmiSSL->SSL_set_num_tickets((s), (num_tickets))
#define SSL_CTX_get_num_tickets(ctx) IAmiSSL->SSL_CTX_get_num_tickets((ctx))
#define SSL_get_num_tickets(s) IAmiSSL->SSL_get_num_tickets((s))
#define SSL_CTX_set_num_tickets(ctx, num_tickets) IAmiSSL->SSL_CTX_set_num_tickets((ctx), (num_tickets))
#define SSL_CTX_set_allow_early_data_cb(ctx, cb, arg) IAmiSSL->SSL_CTX_set_allow_early_data_cb((ctx), (cb), (arg))
#define SSL_set_allow_early_data_cb(s, cb, arg) IAmiSSL->SSL_set_allow_early_data_cb((s), (cb), (arg))
#define SSL_set_recv_max_early_data(s, recv_max_early_data) IAmiSSL->SSL_set_recv_max_early_data((s), (recv_max_early_data))
#define SSL_get_recv_max_early_data(s) IAmiSSL->SSL_get_recv_max_early_data((s))
#define SSL_CTX_get_recv_max_early_data(ctx) IAmiSSL->SSL_CTX_get_recv_max_early_data((ctx))
#define SSL_CTX_set_recv_max_early_data(ctx, recv_max_early_data) IAmiSSL->SSL_CTX_set_recv_max_early_data((ctx), (recv_max_early_data))
#define SSL_CTX_set_post_handshake_auth(ctx, val) IAmiSSL->SSL_CTX_set_post_handshake_auth((ctx), (val))
#define SSL_get_signature_type_nid(s, pnid) IAmiSSL->SSL_get_signature_type_nid((s), (pnid))
#define IPAddressRange_free(a) IAmiSSL->IPAddressRange_free((a))
#define TLS_FEATURE_new() IAmiSSL->TLS_FEATURE_new()
#define BIO_f_linebuffer() IAmiSSL->BIO_f_linebuffer()
#define IPAddressRange_new() IAmiSSL->IPAddressRange_new()
#define IPAddressRange_it() IAmiSSL->IPAddressRange_it()
#define d2i_IPAddressRange(a, in, len) IAmiSSL->d2i_IPAddressRange((a), (in), (len))
#define TLS_FEATURE_free(a) IAmiSSL->TLS_FEATURE_free((a))
#define i2d_RSA_OAEP_PARAMS(a, out) IAmiSSL->i2d_RSA_OAEP_PARAMS((a), (out))
#define i2d_IPAddressRange(a, out) IAmiSSL->i2d_IPAddressRange((a), (out))
#define X509_OBJECT_new() IAmiSSL->X509_OBJECT_new()
#define PKCS12_get_attr(bag, attr_nid) IAmiSSL->PKCS12_get_attr((bag), (attr_nid))
#define ECPKPARAMETERS_free(a) IAmiSSL->ECPKPARAMETERS_free((a))
#define ECPKPARAMETERS_new() IAmiSSL->ECPKPARAMETERS_new()
#define ASN1_ITEM_lookup(name) IAmiSSL->ASN1_ITEM_lookup((name))
#define ASN1_ITEM_get(i) IAmiSSL->ASN1_ITEM_get((i))
#define BIO_read_ex(b, data, dlen, readbytes) IAmiSSL->BIO_read_ex((b), (data), (dlen), (readbytes))
#define BIO_set_callback_ex(b, callback) IAmiSSL->BIO_set_callback_ex((b), (callback))
#define BIO_get_callback_ex(b) IAmiSSL->BIO_get_callback_ex((b))
#define BIO_meth_set_read_ex(biom, bread) IAmiSSL->BIO_meth_set_read_ex((biom), (bread))
#define BIO_meth_get_read_ex(biom) IAmiSSL->BIO_meth_get_read_ex((biom))
#define BIO_write_ex(b, data, dlen, written) IAmiSSL->BIO_write_ex((b), (data), (dlen), (written))
#define BIO_meth_get_write_ex(biom) IAmiSSL->BIO_meth_get_write_ex((biom))
#define BIO_meth_set_write_ex(biom, bwrite) IAmiSSL->BIO_meth_set_write_ex((biom), (bwrite))
#define EVP_PKEY_CTX_md(ctx, optype, cmd, md) IAmiSSL->EVP_PKEY_CTX_md((ctx), (optype), (cmd), (md))
#define RSA_pkey_ctx_ctrl(ctx, optype, cmd, p1, p2) IAmiSSL->RSA_pkey_ctx_ctrl((ctx), (optype), (cmd), (p1), (p2))
#define UI_method_set_ex_data(method, idx, data) IAmiSSL->UI_method_set_ex_data((method), (idx), (data))
#define UI_method_get_ex_data(method, idx) IAmiSSL->UI_method_get_ex_data((method), (idx))
#define UI_UTIL_wrap_read_pem_callback(cb, rwflag) IAmiSSL->UI_UTIL_wrap_read_pem_callback((cb), (rwflag))
#define EVP_PKEY_get0_poly1305(pkey, len) IAmiSSL->EVP_PKEY_get0_poly1305((pkey), (len))
#define EVP_PKEY_get0_siphash(pkey, len) IAmiSSL->EVP_PKEY_get0_siphash((pkey), (len))
#define EVP_aria_256_ofb() IAmiSSL->EVP_aria_256_ofb()
#define EVP_aria_256_cfb128() IAmiSSL->EVP_aria_256_cfb128()
#define EVP_aria_128_cfb1() IAmiSSL->EVP_aria_128_cfb1()
#define EVP_aria_128_ecb() IAmiSSL->EVP_aria_128_ecb()
#define EVP_aria_128_cfb128() IAmiSSL->EVP_aria_128_cfb128()
#define EVP_aria_192_ecb() IAmiSSL->EVP_aria_192_ecb()
#define EVP_aria_128_cbc() IAmiSSL->EVP_aria_128_cbc()
#define EVP_aria_192_ofb() IAmiSSL->EVP_aria_192_ofb()
#define EVP_aria_192_cbc() IAmiSSL->EVP_aria_192_cbc()
#define EVP_aria_192_cfb1() IAmiSSL->EVP_aria_192_cfb1()
#define EVP_aria_128_cfb8() IAmiSSL->EVP_aria_128_cfb8()
#define EVP_aria_256_cfb1() IAmiSSL->EVP_aria_256_cfb1()
#define EVP_aria_192_cfb8() IAmiSSL->EVP_aria_192_cfb8()
#define EVP_aria_256_cfb8() IAmiSSL->EVP_aria_256_cfb8()
#define EVP_aria_256_cbc() IAmiSSL->EVP_aria_256_cbc()
#define EVP_aria_128_ofb() IAmiSSL->EVP_aria_128_ofb()
#define EVP_aria_192_cfb128() IAmiSSL->EVP_aria_192_cfb128()
#define EVP_aria_256_ecb() IAmiSSL->EVP_aria_256_ecb()
#define EVP_aria_256_ctr() IAmiSSL->EVP_aria_256_ctr()
#define EVP_aria_128_ctr() IAmiSSL->EVP_aria_128_ctr()
#define EVP_aria_192_ctr() IAmiSSL->EVP_aria_192_ctr()
#define UI_null() IAmiSSL->UI_null()
#define EC_KEY_get0_engine(eckey) IAmiSSL->EC_KEY_get0_engine((eckey))
#define INT32_it() IAmiSSL->INT32_it()
#define UINT64_it() IAmiSSL->UINT64_it()
#define ZINT32_it() IAmiSSL->ZINT32_it()
#define ZUINT64_it() IAmiSSL->ZUINT64_it()
#define INT64_it() IAmiSSL->INT64_it()
#define ZUINT32_it() IAmiSSL->ZUINT32_it()
#define UINT32_it() IAmiSSL->UINT32_it()
#define ZINT64_it() IAmiSSL->ZINT64_it()
#define BIO_lookup_ex(host, service, lookup_type, family, socktype, protocol, res) IAmiSSL->BIO_lookup_ex((host), (service), (lookup_type), (family), (socktype), (protocol), (res))
#define X509_CRL_print_ex(out, x, nmflag) IAmiSSL->X509_CRL_print_ex((out), (x), (nmflag))
#define X509_SIG_INFO_get(siginf, mdnid, pknid, secbits, flags) IAmiSSL->X509_SIG_INFO_get((siginf), (mdnid), (pknid), (secbits), (flags))
#define X509_get_signature_info(x, mdnid, pknid, secbits, flags) IAmiSSL->X509_get_signature_info((x), (mdnid), (pknid), (secbits), (flags))
#define X509_SIG_INFO_set(siginf, mdnid, pknid, secbits, flags) IAmiSSL->X509_SIG_INFO_set((siginf), (mdnid), (pknid), (secbits), (flags))
#define ESS_CERT_ID_V2_free(a) IAmiSSL->ESS_CERT_ID_V2_free((a))
#define ESS_SIGNING_CERT_V2_new() IAmiSSL->ESS_SIGNING_CERT_V2_new()
#define d2i_ESS_SIGNING_CERT_V2(a, pp, length) IAmiSSL->d2i_ESS_SIGNING_CERT_V2((a), (pp), (length))
#define i2d_ESS_CERT_ID_V2(a, pp) IAmiSSL->i2d_ESS_CERT_ID_V2((a), (pp))
#define ESS_CERT_ID_V2_dup(a) IAmiSSL->ESS_CERT_ID_V2_dup((a))
#define TS_RESP_CTX_set_ess_cert_id_digest(ctx, md) IAmiSSL->TS_RESP_CTX_set_ess_cert_id_digest((ctx), (md))
#define d2i_ESS_CERT_ID_V2(a, pp, length) IAmiSSL->d2i_ESS_CERT_ID_V2((a), (pp), (length))
#define i2d_ESS_SIGNING_CERT_V2(a, pp) IAmiSSL->i2d_ESS_SIGNING_CERT_V2((a), (pp))
#define TS_CONF_set_ess_cert_id_digest(conf, section, ctx) IAmiSSL->TS_CONF_set_ess_cert_id_digest((conf), (section), (ctx))
#define ESS_SIGNING_CERT_V2_free(a) IAmiSSL->ESS_SIGNING_CERT_V2_free((a))
#define ESS_SIGNING_CERT_V2_dup(a) IAmiSSL->ESS_SIGNING_CERT_V2_dup((a))
#define ESS_CERT_ID_V2_new() IAmiSSL->ESS_CERT_ID_V2_new()
#define PEM_read_bio_ex(bp, name, header, data, len, flags) IAmiSSL->PEM_read_bio_ex((bp), (name), (header), (data), (len), (flags))
#define PEM_bytes_read_bio_secmem(pdata, plen, pnm, name, bp, cb, u) IAmiSSL->PEM_bytes_read_bio_secmem((pdata), (plen), (pnm), (name), (bp), (cb), (u))
#define EVP_DigestSign(ctx, sigret, siglen, tbs, tbslen) IAmiSSL->EVP_DigestSign((ctx), (sigret), (siglen), (tbs), (tbslen))
#define EVP_DigestVerify(ctx, sigret, siglen, tbs, tbslen) IAmiSSL->EVP_DigestVerify((ctx), (sigret), (siglen), (tbs), (tbslen))
#define UI_method_get_data_duplicator(method) IAmiSSL->UI_method_get_data_duplicator((method))
#define UI_method_set_data_duplicator(method, duplicator, destructor) IAmiSSL->UI_method_set_data_duplicator((method), (duplicator), (destructor))
#define UI_dup_user_data(ui, user_data) IAmiSSL->UI_dup_user_data((ui), (user_data))
#define UI_method_get_data_destructor(method) IAmiSSL->UI_method_get_data_destructor((method))
#define ERR_load_strings_const(str) IAmiSSL->ERR_load_strings_const((str))
#define ASN1_TIME_to_tm(s, tm) IAmiSSL->ASN1_TIME_to_tm((s), (tm))
#define ASN1_TIME_set_string_X509(s, str) IAmiSSL->ASN1_TIME_set_string_X509((s), (str))
#define OCSP_resp_get1_id(bs, pid, pname) IAmiSSL->OCSP_resp_get1_id((bs), (pid), (pname))
#define OSSL_STORE_register_loader(loader) IAmiSSL->OSSL_STORE_register_loader((loader))
#define OSSL_STORE_LOADER_set_error(loader, error_function) IAmiSSL->OSSL_STORE_LOADER_set_error((loader), (error_function))
#define OSSL_STORE_INFO_get0_PKEY(info) IAmiSSL->OSSL_STORE_INFO_get0_PKEY((info))
#define OSSL_STORE_INFO_get_type(info) IAmiSSL->OSSL_STORE_INFO_get_type((info))
#define ERR_load_OSSL_STORE_strings() IAmiSSL->ERR_load_OSSL_STORE_strings()
#define OSSL_STORE_LOADER_free(loader) IAmiSSL->OSSL_STORE_LOADER_free((loader))
#define OSSL_STORE_INFO_get1_PKEY(info) IAmiSSL->OSSL_STORE_INFO_get1_PKEY((info))
#define OSSL_STORE_INFO_free(info) IAmiSSL->OSSL_STORE_INFO_free((info))
#define OSSL_STORE_LOADER_set_eof(loader, eof_function) IAmiSSL->OSSL_STORE_LOADER_set_eof((loader), (eof_function))
#define OSSL_STORE_LOADER_new(e, scheme) IAmiSSL->OSSL_STORE_LOADER_new((e), (scheme))
#define OSSL_STORE_INFO_get0_CERT(info) IAmiSSL->OSSL_STORE_INFO_get0_CERT((info))
#define OSSL_STORE_LOADER_set_close(loader, close_function) IAmiSSL->OSSL_STORE_LOADER_set_close((loader), (close_function))
#define OSSL_STORE_INFO_new_PARAMS(params) IAmiSSL->OSSL_STORE_INFO_new_PARAMS((params))
#define OSSL_STORE_INFO_new_PKEY(pkey) IAmiSSL->OSSL_STORE_INFO_new_PKEY((pkey))
#define OSSL_STORE_INFO_get1_PARAMS(info) IAmiSSL->OSSL_STORE_INFO_get1_PARAMS((info))
#define OSSL_STORE_INFO_get1_CRL(info) IAmiSSL->OSSL_STORE_INFO_get1_CRL((info))
#define OSSL_STORE_error(ctx) IAmiSSL->OSSL_STORE_error((ctx))
#define OSSL_STORE_INFO_get1_CERT(info) IAmiSSL->OSSL_STORE_INFO_get1_CERT((info))
#define OSSL_STORE_INFO_get0_PARAMS(info) IAmiSSL->OSSL_STORE_INFO_get0_PARAMS((info))
#define OSSL_STORE_INFO_type_string(type) IAmiSSL->OSSL_STORE_INFO_type_string((type))
#define OSSL_STORE_INFO_get1_NAME(info) IAmiSSL->OSSL_STORE_INFO_get1_NAME((info))
#define OSSL_STORE_LOADER_set_load(loader, load_function) IAmiSSL->OSSL_STORE_LOADER_set_load((loader), (load_function))
#define OSSL_STORE_LOADER_get0_scheme(loader) IAmiSSL->OSSL_STORE_LOADER_get0_scheme((loader))
#define OSSL_STORE_open(uri, ui_method, ui_data, post_process, post_process_data) IAmiSSL->OSSL_STORE_open((uri), (ui_method), (ui_data), (post_process), (post_process_data))
#define OSSL_STORE_close(ctx) IAmiSSL->OSSL_STORE_close((ctx))
#define OSSL_STORE_INFO_new_CERT(x509) IAmiSSL->OSSL_STORE_INFO_new_CERT((x509))
#define OSSL_STORE_INFO_get0_CRL(info) IAmiSSL->OSSL_STORE_INFO_get0_CRL((info))
#define OSSL_STORE_load(ctx) IAmiSSL->OSSL_STORE_load((ctx))
#define OSSL_STORE_INFO_get0_NAME(info) IAmiSSL->OSSL_STORE_INFO_get0_NAME((info))
#define OSSL_STORE_unregister_loader(scheme) IAmiSSL->OSSL_STORE_unregister_loader((scheme))
#define OSSL_STORE_INFO_new_CRL(crl) IAmiSSL->OSSL_STORE_INFO_new_CRL((crl))
#define OSSL_STORE_INFO_new_NAME(name) IAmiSSL->OSSL_STORE_INFO_new_NAME((name))
#define OSSL_STORE_eof(ctx) IAmiSSL->OSSL_STORE_eof((ctx))
#define OSSL_STORE_LOADER_set_open(loader, open_function) IAmiSSL->OSSL_STORE_LOADER_set_open((loader), (open_function))
#define OSSL_STORE_LOADER_set_ctrl(loader, ctrl_function) IAmiSSL->OSSL_STORE_LOADER_set_ctrl((loader), (ctrl_function))
#define OSSL_STORE_vctrl(ctx, cmd, args) IAmiSSL->OSSL_STORE_vctrl((ctx), (cmd), (args))
#if (defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L) || (__GNUC__ >= 3)
#define OSSL_STORE_ctrl(ctx, ...) IAmiSSL->OSSL_STORE_ctrl((ctx), __VA_ARGS__)
#elif (__GNUC__ == 2 && __GNUC_MINOR__ >= 95)
#define OSSL_STORE_ctrl(ctx, vargs...) IAmiSSL->OSSL_STORE_ctrl(ctx, vargs)
#endif
#define OSSL_STORE_INFO_get0_NAME_description(info) IAmiSSL->OSSL_STORE_INFO_get0_NAME_description((info))
#define OSSL_STORE_INFO_set0_NAME_description(info, desc) IAmiSSL->OSSL_STORE_INFO_set0_NAME_description((info), (desc))
#define OSSL_STORE_INFO_get1_NAME_description(info) IAmiSSL->OSSL_STORE_INFO_get1_NAME_description((info))
#define OSSL_STORE_do_all_loaders(do_function, do_arg) IAmiSSL->OSSL_STORE_do_all_loaders((do_function), (do_arg))
#define OSSL_STORE_LOADER_get0_engine(loader) IAmiSSL->OSSL_STORE_LOADER_get0_engine((loader))
#define EVP_sha3_224() IAmiSSL->EVP_sha3_224()
#define EVP_sha3_256() IAmiSSL->EVP_sha3_256()
#define EVP_sha3_384() IAmiSSL->EVP_sha3_384()
#define EVP_sha3_512() IAmiSSL->EVP_sha3_512()
#define EVP_shake128() IAmiSSL->EVP_shake128()
#define EVP_shake256() IAmiSSL->EVP_shake256()
#define SCRYPT_PARAMS_new() IAmiSSL->SCRYPT_PARAMS_new()
#define SCRYPT_PARAMS_free(a) IAmiSSL->SCRYPT_PARAMS_free((a))
#define i2d_SCRYPT_PARAMS(a, out) IAmiSSL->i2d_SCRYPT_PARAMS((a), (out))
#define d2i_SCRYPT_PARAMS(a, in, len) IAmiSSL->d2i_SCRYPT_PARAMS((a), (in), (len))
#define SCRYPT_PARAMS_it() IAmiSSL->SCRYPT_PARAMS_it()
#define EVP_PKEY_meth_get0(idx) IAmiSSL->EVP_PKEY_meth_get0((idx))
#define EVP_PKEY_meth_get_count() IAmiSSL->EVP_PKEY_meth_get_count()
#define RAND_priv_bytes(buf, num) IAmiSSL->RAND_priv_bytes((buf), (num))
#define BN_priv_rand(rnd, bits, top, bottom) IAmiSSL->BN_priv_rand((rnd), (bits), (top), (bottom))
#define BN_priv_rand_range(rnd, range) IAmiSSL->BN_priv_rand_range((rnd), (range))
#define ASN1_TIME_normalize(s) IAmiSSL->ASN1_TIME_normalize((s))
#define ASN1_TIME_cmp_time_t(s, t) IAmiSSL->ASN1_TIME_cmp_time_t((s), (t))
#define ASN1_TIME_compare(a, b) IAmiSSL->ASN1_TIME_compare((a), (b))
#define EVP_PKEY_CTX_ctrl_uint64(ctx, keytype, optype, cmd, value) IAmiSSL->EVP_PKEY_CTX_ctrl_uint64((ctx), (keytype), (optype), (cmd), (value))
#define EVP_DigestFinalXOF(ctx, md, len) IAmiSSL->EVP_DigestFinalXOF((ctx), (md), (len))
#define ERR_clear_last_mark() IAmiSSL->ERR_clear_last_mark()
#define EVP_aria_192_ccm() IAmiSSL->EVP_aria_192_ccm()
#define EVP_aria_256_gcm() IAmiSSL->EVP_aria_256_gcm()
#define EVP_aria_256_ccm() IAmiSSL->EVP_aria_256_ccm()
#define EVP_aria_128_gcm() IAmiSSL->EVP_aria_128_gcm()
#define EVP_aria_128_ccm() IAmiSSL->EVP_aria_128_ccm()
#define EVP_aria_192_gcm() IAmiSSL->EVP_aria_192_gcm()
#define UI_get_result_length(ui, i) IAmiSSL->UI_get_result_length((ui), (i))
#define UI_set_result_ex(ui, uis, result, len) IAmiSSL->UI_set_result_ex((ui), (uis), (result), (len))
#define UI_get_result_string_length(uis) IAmiSSL->UI_get_result_string_length((uis))
#define EVP_PKEY_check(ctx) IAmiSSL->EVP_PKEY_check((ctx))
#define EVP_PKEY_meth_set_check(pmeth, check) IAmiSSL->EVP_PKEY_meth_set_check((pmeth), (check))
#define EVP_PKEY_meth_get_check(pmeth, pcheck) IAmiSSL->EVP_PKEY_meth_get_check((pmeth), (pcheck))
#define EVP_PKEY_meth_remove(pmeth) IAmiSSL->EVP_PKEY_meth_remove((pmeth))
#define OPENSSL_sk_reserve(st, n) IAmiSSL->OPENSSL_sk_reserve((st), (n))
#define DH_new_by_nid(nid) IAmiSSL->DH_new_by_nid((nid))
#define DH_get_nid(dh) IAmiSSL->DH_get_nid((dh))
#define OPENSSL_sk_new_reserve(c, n) IAmiSSL->OPENSSL_sk_new_reserve((c), (n))
#define EVP_PKEY_asn1_set_check(ameth, pkey_check) IAmiSSL->EVP_PKEY_asn1_set_check((ameth), (pkey_check))
#define EVP_PKEY_asn1_set_siginf(ameth, siginf_set) IAmiSSL->EVP_PKEY_asn1_set_siginf((ameth), (siginf_set))
#define EVP_sm4_ctr() IAmiSSL->EVP_sm4_ctr()
#define EVP_sm4_cbc() IAmiSSL->EVP_sm4_cbc()
#define EVP_sm4_ofb() IAmiSSL->EVP_sm4_ofb()
#define EVP_sm4_ecb() IAmiSSL->EVP_sm4_ecb()
#define EVP_sm4_cfb128() IAmiSSL->EVP_sm4_cfb128()
#define EVP_sm3() IAmiSSL->EVP_sm3()
#define RSA_get0_multi_prime_factors(r, primes) IAmiSSL->RSA_get0_multi_prime_factors((r), (primes))
#define EVP_PKEY_public_check(ctx) IAmiSSL->EVP_PKEY_public_check((ctx))
#define EVP_PKEY_param_check(ctx) IAmiSSL->EVP_PKEY_param_check((ctx))
#define EVP_PKEY_meth_set_public_check(pmeth, check) IAmiSSL->EVP_PKEY_meth_set_public_check((pmeth), (check))
#define EVP_PKEY_meth_set_param_check(pmeth, check) IAmiSSL->EVP_PKEY_meth_set_param_check((pmeth), (check))
#define EVP_PKEY_meth_get_public_check(pmeth, pcheck) IAmiSSL->EVP_PKEY_meth_get_public_check((pmeth), (pcheck))
#define EVP_PKEY_meth_get_param_check(pmeth, pcheck) IAmiSSL->EVP_PKEY_meth_get_param_check((pmeth), (pcheck))
#define EVP_PKEY_asn1_set_public_check(ameth, pkey_pub_check) IAmiSSL->EVP_PKEY_asn1_set_public_check((ameth), (pkey_pub_check))
#define EVP_PKEY_asn1_set_param_check(ameth, pkey_param_check) IAmiSSL->EVP_PKEY_asn1_set_param_check((ameth), (pkey_param_check))
#define DH_check_ex(dh) IAmiSSL->DH_check_ex((dh))
#define DH_check_pub_key_ex(dh, pub_key) IAmiSSL->DH_check_pub_key_ex((dh), (pub_key))
#define DH_check_params_ex(dh) IAmiSSL->DH_check_params_ex((dh))
#define RSA_generate_multi_prime_key(rsa, bits, primes, e, cb) IAmiSSL->RSA_generate_multi_prime_key((rsa), (bits), (primes), (e), (cb))
#define RSA_get_multi_prime_extra_count(r) IAmiSSL->RSA_get_multi_prime_extra_count((r))
#define OCSP_resp_get0_signer(bs, signer, extra_certs) IAmiSSL->OCSP_resp_get0_signer((bs), (signer), (extra_certs))
#define RSA_get0_multi_prime_crt_params(r, exps, coeffs) IAmiSSL->RSA_get0_multi_prime_crt_params((r), (exps), (coeffs))
#define RSA_set0_multi_prime_params(r, primes, exps, coeffs, pnum) IAmiSSL->RSA_set0_multi_prime_params((r), (primes), (exps), (coeffs), (pnum))
#define RSA_get_version(r) IAmiSSL->RSA_get_version((r))
#define RSA_meth_get_multi_prime_keygen(meth) IAmiSSL->RSA_meth_get_multi_prime_keygen((meth))
#define RSA_meth_set_multi_prime_keygen(meth, keygen) IAmiSSL->RSA_meth_set_multi_prime_keygen((meth), (keygen))
#define PROFESSION_INFO_get0_addProfessionInfo(pi) IAmiSSL->PROFESSION_INFO_get0_addProfessionInfo((pi))
#define ADMISSION_SYNTAX_free(a) IAmiSSL->ADMISSION_SYNTAX_free((a))
#define d2i_ADMISSION_SYNTAX(a, in, len) IAmiSSL->d2i_ADMISSION_SYNTAX((a), (in), (len))
#define NAMING_AUTHORITY_set0_authorityId(n, namingAuthorityId) IAmiSSL->NAMING_AUTHORITY_set0_authorityId((n), (namingAuthorityId))
#define NAMING_AUTHORITY_set0_authorityURL(n, namingAuthorityUrl) IAmiSSL->NAMING_AUTHORITY_set0_authorityURL((n), (namingAuthorityUrl))
#define d2i_PROFESSION_INFO(a, in, len) IAmiSSL->d2i_PROFESSION_INFO((a), (in), (len))
#define NAMING_AUTHORITY_it() IAmiSSL->NAMING_AUTHORITY_it()
#define ADMISSION_SYNTAX_get0_contentsOfAdmissions(as) IAmiSSL->ADMISSION_SYNTAX_get0_contentsOfAdmissions((as))
#define PROFESSION_INFO_set0_professionItems(pi, as) IAmiSSL->PROFESSION_INFO_set0_professionItems((pi), (as))
#define NAMING_AUTHORITY_new() IAmiSSL->NAMING_AUTHORITY_new()
#define NAMING_AUTHORITY_get0_authorityURL(n) IAmiSSL->NAMING_AUTHORITY_get0_authorityURL((n))
#define ADMISSION_SYNTAX_get0_admissionAuthority(as) IAmiSSL->ADMISSION_SYNTAX_get0_admissionAuthority((as))
#define PROFESSION_INFO_new() IAmiSSL->PROFESSION_INFO_new()
#define ADMISSIONS_new() IAmiSSL->ADMISSIONS_new()
#define ADMISSION_SYNTAX_set0_admissionAuthority(as, aa) IAmiSSL->ADMISSION_SYNTAX_set0_admissionAuthority((as), (aa))
#define PROFESSION_INFO_get0_professionOIDs(pi) IAmiSSL->PROFESSION_INFO_get0_professionOIDs((pi))
#define PROFESSION_INFO_it() IAmiSSL->PROFESSION_INFO_it()
#define i2d_PROFESSION_INFO(a, out) IAmiSSL->i2d_PROFESSION_INFO((a), (out))
#define ADMISSIONS_set0_professionInfos(a, pi) IAmiSSL->ADMISSIONS_set0_professionInfos((a), (pi))
#define PROFESSION_INFO_get0_namingAuthority(pi) IAmiSSL->PROFESSION_INFO_get0_namingAuthority((pi))
#define PROFESSION_INFO_free(a) IAmiSSL->PROFESSION_INFO_free((a))
#define PROFESSION_INFO_set0_addProfessionInfo(pi, aos) IAmiSSL->PROFESSION_INFO_set0_addProfessionInfo((pi), (aos))
#define PROFESSION_INFO_set0_registrationNumber(pi, rn) IAmiSSL->PROFESSION_INFO_set0_registrationNumber((pi), (rn))
#define ADMISSION_SYNTAX_set0_contentsOfAdmissions(as, a) IAmiSSL->ADMISSION_SYNTAX_set0_contentsOfAdmissions((as), (a))
#define NAMING_AUTHORITY_get0_authorityId(n) IAmiSSL->NAMING_AUTHORITY_get0_authorityId((n))
#define ADMISSION_SYNTAX_it() IAmiSSL->ADMISSION_SYNTAX_it()
#define i2d_ADMISSION_SYNTAX(a, out) IAmiSSL->i2d_ADMISSION_SYNTAX((a), (out))
#define NAMING_AUTHORITY_get0_authorityText(n) IAmiSSL->NAMING_AUTHORITY_get0_authorityText((n))
#define PROFESSION_INFO_set0_namingAuthority(pi, na) IAmiSSL->PROFESSION_INFO_set0_namingAuthority((pi), (na))
#define i2d_NAMING_AUTHORITY(a, out) IAmiSSL->i2d_NAMING_AUTHORITY((a), (out))
#define NAMING_AUTHORITY_free(a) IAmiSSL->NAMING_AUTHORITY_free((a))
#define ADMISSIONS_set0_admissionAuthority(a, aa) IAmiSSL->ADMISSIONS_set0_admissionAuthority((a), (aa))
#define ADMISSIONS_free(a) IAmiSSL->ADMISSIONS_free((a))
#define PROFESSION_INFO_get0_registrationNumber(pi) IAmiSSL->PROFESSION_INFO_get0_registrationNumber((pi))
#define d2i_ADMISSIONS(a, in, len) IAmiSSL->d2i_ADMISSIONS((a), (in), (len))
#define i2d_ADMISSIONS(a, out) IAmiSSL->i2d_ADMISSIONS((a), (out))
#define PROFESSION_INFO_get0_professionItems(pi) IAmiSSL->PROFESSION_INFO_get0_professionItems((pi))
#define ADMISSIONS_get0_admissionAuthority(a) IAmiSSL->ADMISSIONS_get0_admissionAuthority((a))
#define PROFESSION_INFO_set0_professionOIDs(pi, po) IAmiSSL->PROFESSION_INFO_set0_professionOIDs((pi), (po))
#define d2i_NAMING_AUTHORITY(a, in, len) IAmiSSL->d2i_NAMING_AUTHORITY((a), (in), (len))
#define ADMISSIONS_it() IAmiSSL->ADMISSIONS_it()
#define ADMISSIONS_get0_namingAuthority(a) IAmiSSL->ADMISSIONS_get0_namingAuthority((a))
#define NAMING_AUTHORITY_set0_authorityText(n, namingAuthorityText) IAmiSSL->NAMING_AUTHORITY_set0_authorityText((n), (namingAuthorityText))
#define ADMISSIONS_set0_namingAuthority(a, na) IAmiSSL->ADMISSIONS_set0_namingAuthority((a), (na))
#define ADMISSIONS_get0_professionInfos(a) IAmiSSL->ADMISSIONS_get0_professionInfos((a))
#define ADMISSION_SYNTAX_new() IAmiSSL->ADMISSION_SYNTAX_new()
#define EVP_sha512_256() IAmiSSL->EVP_sha512_256()
#define EVP_sha512_224() IAmiSSL->EVP_sha512_224()
#define OCSP_basic_sign_ctx(brsp, signer, ctx, certs, flags) IAmiSSL->OCSP_basic_sign_ctx((brsp), (signer), (ctx), (certs), (flags))
#define OSSL_STORE_SEARCH_by_alias(alias) IAmiSSL->OSSL_STORE_SEARCH_by_alias((alias))
#define BIO_bind(sock, addr, options) IAmiSSL->BIO_bind((sock), (addr), (options))
#define OSSL_STORE_LOADER_set_expect(loader, expect_function) IAmiSSL->OSSL_STORE_LOADER_set_expect((loader), (expect_function))
#define OSSL_STORE_expect(ctx, expected_type) IAmiSSL->OSSL_STORE_expect((ctx), (expected_type))
#define OSSL_STORE_SEARCH_by_key_fingerprint(digest, bytes, len) IAmiSSL->OSSL_STORE_SEARCH_by_key_fingerprint((digest), (bytes), (len))
#define OSSL_STORE_SEARCH_get0_serial(criterion) IAmiSSL->OSSL_STORE_SEARCH_get0_serial((criterion))
#define OSSL_STORE_SEARCH_by_name(name) IAmiSSL->OSSL_STORE_SEARCH_by_name((name))
#define OSSL_STORE_supports_search(ctx, search_type) IAmiSSL->OSSL_STORE_supports_search((ctx), (search_type))
#define OSSL_STORE_find(ctx, search) IAmiSSL->OSSL_STORE_find((ctx), (search))
#define OSSL_STORE_SEARCH_get_type(criterion) IAmiSSL->OSSL_STORE_SEARCH_get_type((criterion))
#define OSSL_STORE_SEARCH_get0_bytes(criterion, length) IAmiSSL->OSSL_STORE_SEARCH_get0_bytes((criterion), (length))
#define OSSL_STORE_SEARCH_get0_string(criterion) IAmiSSL->OSSL_STORE_SEARCH_get0_string((criterion))
#define OSSL_STORE_SEARCH_by_issuer_serial(name, serial) IAmiSSL->OSSL_STORE_SEARCH_by_issuer_serial((name), (serial))
#define OSSL_STORE_SEARCH_get0_name(criterion) IAmiSSL->OSSL_STORE_SEARCH_get0_name((criterion))
#define X509_get0_authority_key_id(x) IAmiSSL->X509_get0_authority_key_id((x))
#define OSSL_STORE_LOADER_set_find(loader, find_function) IAmiSSL->OSSL_STORE_LOADER_set_find((loader), (find_function))
#define OSSL_STORE_SEARCH_free(search) IAmiSSL->OSSL_STORE_SEARCH_free((search))
#define OSSL_STORE_SEARCH_get0_digest(criterion) IAmiSSL->OSSL_STORE_SEARCH_get0_digest((criterion))
#define EVP_PKEY_new_raw_private_key(type, e, priv, len) IAmiSSL->EVP_PKEY_new_raw_private_key((type), (e), (priv), (len))
#define EVP_PKEY_new_raw_public_key(type, e, pub, len) IAmiSSL->EVP_PKEY_new_raw_public_key((type), (e), (pub), (len))
#define EVP_PKEY_new_CMAC_key(e, priv, len, cipher) IAmiSSL->EVP_PKEY_new_CMAC_key((e), (priv), (len), (cipher))
#define EVP_PKEY_asn1_set_set_priv_key(ameth, set_priv_key) IAmiSSL->EVP_PKEY_asn1_set_set_priv_key((ameth), (set_priv_key))
#define EVP_PKEY_asn1_set_set_pub_key(ameth, set_pub_key) IAmiSSL->EVP_PKEY_asn1_set_set_pub_key((ameth), (set_pub_key))
#define X509_VERIFY_PARAM_get_hostflags(param) IAmiSSL->X509_VERIFY_PARAM_get_hostflags((param))
#define DH_get0_p(dh) IAmiSSL->DH_get0_p((dh))
#define DH_get0_q(dh) IAmiSSL->DH_get0_q((dh))
#define DH_get0_g(dh) IAmiSSL->DH_get0_g((dh))
#define DH_get0_priv_key(dh) IAmiSSL->DH_get0_priv_key((dh))
#define DH_get0_pub_key(dh) IAmiSSL->DH_get0_pub_key((dh))
#define DSA_get0_priv_key(d) IAmiSSL->DSA_get0_priv_key((d))
#define DSA_get0_pub_key(d) IAmiSSL->DSA_get0_pub_key((d))
#define DSA_get0_q(d) IAmiSSL->DSA_get0_q((d))
#define DSA_get0_p(d) IAmiSSL->DSA_get0_p((d))
#define DSA_get0_g(d) IAmiSSL->DSA_get0_g((d))
#define RSA_get0_dmp1(r) IAmiSSL->RSA_get0_dmp1((r))
#define RSA_get0_d(d) IAmiSSL->RSA_get0_d((d))
#define RSA_get0_n(d) IAmiSSL->RSA_get0_n((d))
#define RSA_get0_dmq1(r) IAmiSSL->RSA_get0_dmq1((r))
#define RSA_get0_e(d) IAmiSSL->RSA_get0_e((d))
#define RSA_get0_q(d) IAmiSSL->RSA_get0_q((d))
#define RSA_get0_p(d) IAmiSSL->RSA_get0_p((d))
#define RSA_get0_iqmp(r) IAmiSSL->RSA_get0_iqmp((r))
#define ECDSA_SIG_get0_r(sig) IAmiSSL->ECDSA_SIG_get0_r((sig))
#define ECDSA_SIG_get0_s(sig) IAmiSSL->ECDSA_SIG_get0_s((sig))
#define X509_LOOKUP_meth_get_get_by_fingerprint(method) IAmiSSL->X509_LOOKUP_meth_get_get_by_fingerprint((method))
#define X509_LOOKUP_meth_new(name) IAmiSSL->X509_LOOKUP_meth_new((name))
#define X509_LOOKUP_meth_get_init(method) IAmiSSL->X509_LOOKUP_meth_get_init((method))
#define X509_LOOKUP_meth_get_get_by_alias(method) IAmiSSL->X509_LOOKUP_meth_get_get_by_alias((method))
#define X509_LOOKUP_meth_set_new_item(method, new_item) IAmiSSL->X509_LOOKUP_meth_set_new_item((method), (new_item))
#define X509_LOOKUP_meth_set_shutdown(method, __shutdown) IAmiSSL->X509_LOOKUP_meth_set_shutdown((method), (__shutdown))
#define X509_LOOKUP_meth_get_new_item(method) IAmiSSL->X509_LOOKUP_meth_get_new_item((method))
#define X509_LOOKUP_meth_set_ctrl(method, ctrl_fn) IAmiSSL->X509_LOOKUP_meth_set_ctrl((method), (ctrl_fn))
#define X509_LOOKUP_meth_set_get_by_issuer_serial(method, fn) IAmiSSL->X509_LOOKUP_meth_set_get_by_issuer_serial((method), (fn))
#define X509_LOOKUP_get_store(ctx) IAmiSSL->X509_LOOKUP_get_store((ctx))
#define X509_LOOKUP_meth_get_ctrl(method) IAmiSSL->X509_LOOKUP_meth_get_ctrl((method))
#define X509_LOOKUP_meth_set_get_by_alias(method, fn) IAmiSSL->X509_LOOKUP_meth_set_get_by_alias((method), (fn))
#define X509_LOOKUP_meth_get_get_by_subject(method) IAmiSSL->X509_LOOKUP_meth_get_get_by_subject((method))
#define X509_LOOKUP_meth_get_free(method) IAmiSSL->X509_LOOKUP_meth_get_free((method))
#define X509_LOOKUP_meth_set_get_by_subject(method, fn) IAmiSSL->X509_LOOKUP_meth_set_get_by_subject((method), (fn))
#define X509_LOOKUP_meth_set_free(method, free_fn) IAmiSSL->X509_LOOKUP_meth_set_free((method), (free_fn))
#define X509_LOOKUP_meth_get_shutdown(method) IAmiSSL->X509_LOOKUP_meth_get_shutdown((method))
#define X509_LOOKUP_set_method_data(ctx, data) IAmiSSL->X509_LOOKUP_set_method_data((ctx), (data))
#define X509_LOOKUP_get_method_data(ctx) IAmiSSL->X509_LOOKUP_get_method_data((ctx))
#define X509_LOOKUP_meth_set_get_by_fingerprint(method, fn) IAmiSSL->X509_LOOKUP_meth_set_get_by_fingerprint((method), (fn))
#define X509_LOOKUP_meth_free(method) IAmiSSL->X509_LOOKUP_meth_free((method))
#define X509_OBJECT_set1_X509(a, obj) IAmiSSL->X509_OBJECT_set1_X509((a), (obj))
#define X509_LOOKUP_meth_get_get_by_issuer_serial(method) IAmiSSL->X509_LOOKUP_meth_get_get_by_issuer_serial((method))
#define X509_LOOKUP_meth_set_init(method, init) IAmiSSL->X509_LOOKUP_meth_set_init((method), (init))
#define X509_OBJECT_set1_X509_CRL(a, obj) IAmiSSL->X509_OBJECT_set1_X509_CRL((a), (obj))
#define EVP_PKEY_get_raw_public_key(pkey, pub, len) IAmiSSL->EVP_PKEY_get_raw_public_key((pkey), (pub), (len))
#define EVP_PKEY_get_raw_private_key(pkey, priv, len) IAmiSSL->EVP_PKEY_get_raw_private_key((pkey), (priv), (len))
#define EVP_PKEY_asn1_set_get_priv_key(ameth, get_priv_key) IAmiSSL->EVP_PKEY_asn1_set_get_priv_key((ameth), (get_priv_key))
#define EVP_PKEY_asn1_set_get_pub_key(ameth, get_pub_key) IAmiSSL->EVP_PKEY_asn1_set_get_pub_key((ameth), (get_pub_key))
#define RAND_keep_random_devices_open(keep) IAmiSSL->RAND_keep_random_devices_open((keep))
#define EC_POINT_set_compressed_coordinates(group, p, x, y_bit, ctx) IAmiSSL->EC_POINT_set_compressed_coordinates((group), (p), (x), (y_bit), (ctx))
#define EC_POINT_set_affine_coordinates(group, p, x, y, ctx) IAmiSSL->EC_POINT_set_affine_coordinates((group), (p), (x), (y), (ctx))
#define EC_POINT_get_affine_coordinates(group, p, x, y, ctx) IAmiSSL->EC_POINT_get_affine_coordinates((group), (p), (x), (y), (ctx))
#define EC_GROUP_set_curve(group, p, a, b, ctx) IAmiSSL->EC_GROUP_set_curve((group), (p), (a), (b), (ctx))
#define EC_GROUP_get_curve(group, p, a, b, ctx) IAmiSSL->EC_GROUP_get_curve((group), (p), (a), (b), (ctx))
#define OCSP_resp_get0_tbs_sigalg(bs) IAmiSSL->OCSP_resp_get0_tbs_sigalg((bs))
#define OCSP_resp_get0_respdata(bs) IAmiSSL->OCSP_resp_get0_respdata((bs))
#define EVP_MD_CTX_set_pkey_ctx(ctx, pctx) IAmiSSL->EVP_MD_CTX_set_pkey_ctx((ctx), (pctx))
#define EVP_PKEY_meth_set_digest_custom(pmeth, digest_custom) IAmiSSL->EVP_PKEY_meth_set_digest_custom((pmeth), (digest_custom))
#define EVP_PKEY_meth_get_digest_custom(pmeth, pdigest_custom) IAmiSSL->EVP_PKEY_meth_get_digest_custom((pmeth), (pdigest_custom))
#define OPENSSL_DIR_read(ctx, directory) IAmiSSL->OPENSSL_DIR_read((ctx), (directory))
#define OPENSSL_DIR_end(ctx) IAmiSSL->OPENSSL_DIR_end((ctx))
#define EVP_PKEY_get0_engine(pkey) IAmiSSL->EVP_PKEY_get0_engine((pkey))
#define X509_get0_authority_serial(x) IAmiSSL->X509_get0_authority_serial((x))
#define X509_get0_authority_issuer(x) IAmiSSL->X509_get0_authority_issuer((x))
#define EVP_PKEY_meth_set_digestsign(pmeth, digestsign) IAmiSSL->EVP_PKEY_meth_set_digestsign((pmeth), (digestsign))
#define EVP_PKEY_meth_set_digestverify(pmeth, digestverify) IAmiSSL->EVP_PKEY_meth_set_digestverify((pmeth), (digestverify))
#define EVP_PKEY_meth_get_digestverify(pmeth, digestverify) IAmiSSL->EVP_PKEY_meth_get_digestverify((pmeth), (digestverify))
#define EVP_PKEY_meth_get_digestsign(pmeth, digestsign) IAmiSSL->EVP_PKEY_meth_get_digestsign((pmeth), (digestsign))
#define RSA_get0_pss_params(r) IAmiSSL->RSA_get0_pss_params((r))
#define X509_ALGOR_copy(dest, src) IAmiSSL->X509_ALGOR_copy((dest), (src))
#define X509_REQ_set0_signature(req, psig) IAmiSSL->X509_REQ_set0_signature((req), (psig))
#define X509_REQ_set1_signature_algo(req, palg) IAmiSSL->X509_REQ_set1_signature_algo((req), (palg))
#define EC_KEY_decoded_from_explicit_params(key) IAmiSSL->EC_KEY_decoded_from_explicit_params((key))
#define RSA_X931_derive_ex_amiga_1(rsa, p1, p2, q1, q2, Xp1, moreargs) IAmiSSL->RSA_X931_derive_ex_amiga_1((rsa), (p1), (p2), (q1), (q2), (Xp1), (moreargs))
#define RSA_X931_derive_ex_amiga_2(Xp2, Xp, Xq1, Xq2, Xq, e, cb) IAmiSSL->RSA_X931_derive_ex_amiga_2((Xp2), (Xp), (Xq1), (Xq2), (Xq), (e), (cb))
#define SSL_CTX_set_async_callback(ctx, callback) IAmiSSL->SSL_CTX_set_async_callback((ctx), (callback))
#define SSL_CTX_set_async_callback_arg(ctx, arg) IAmiSSL->SSL_CTX_set_async_callback_arg((ctx), (arg))
#define SSL_set_async_callback(s, callback) IAmiSSL->SSL_set_async_callback((s), (callback))
#define SSL_set_async_callback_arg(s, arg) IAmiSSL->SSL_set_async_callback_arg((s), (arg))
#define SSL_get_async_status(s, status) IAmiSSL->SSL_get_async_status((s), (status))
#define SSL_sendfile(s, fd, offset, size, flags) IAmiSSL->SSL_sendfile((s), (fd), (offset), (size), (flags))
#define OSSL_default_cipher_list() IAmiSSL->OSSL_default_cipher_list()
#define OSSL_default_ciphersuites() IAmiSSL->OSSL_default_ciphersuites()
#define SSL_add_store_cert_subjects_to_stack(stackCAs, uri) IAmiSSL->SSL_add_store_cert_subjects_to_stack((stackCAs), (uri))
#define SSL_CTX_set_default_verify_store(ctx) IAmiSSL->SSL_CTX_set_default_verify_store((ctx))
#define SSL_CTX_load_verify_file(ctx, CAfile) IAmiSSL->SSL_CTX_load_verify_file((ctx), (CAfile))
#define SSL_CTX_load_verify_dir(ctx, CApath) IAmiSSL->SSL_CTX_load_verify_dir((ctx), (CApath))
#define SSL_CTX_load_verify_store(ctx, CAstore) IAmiSSL->SSL_CTX_load_verify_store((ctx), (CAstore))
#define SSL_CTX_set_tlsext_ticket_key_evp_cb(ctx, fp) IAmiSSL->SSL_CTX_set_tlsext_ticket_key_evp_cb((ctx), (fp))
#define SSL_CTX_new_ex(libctx, propq, meth) IAmiSSL->SSL_CTX_new_ex((libctx), (propq), (meth))
#define SSL_new_session_ticket(s) IAmiSSL->SSL_new_session_ticket((s))
#define SSL_get0_peer_certificate(s) IAmiSSL->SSL_get0_peer_certificate((s))
#define SSL_load_client_CA_file_ex(file, libctx, propq) IAmiSSL->SSL_load_client_CA_file_ex((file), (libctx), (propq))
#define SSL_set0_tmp_dh_pkey(s, dhpkey) IAmiSSL->SSL_set0_tmp_dh_pkey((s), (dhpkey))
#define SSL_CTX_set0_tmp_dh_pkey(ctx, dhpkey) IAmiSSL->SSL_CTX_set0_tmp_dh_pkey((ctx), (dhpkey))
#define SSL_group_to_name(s, id) IAmiSSL->SSL_group_to_name((s), (id))
#define X509_CRL_load_http(url, bio, rbio, timeout) IAmiSSL->X509_CRL_load_http((url), (bio), (rbio), (timeout))
#define OSSL_HTTP_parse_url(url, pssl, puser, phost, pport, pport_num, ppath, pquery, pfrag) IAmiSSL->OSSL_HTTP_parse_url((url), (pssl), (puser), (phost), (pport), (pport_num), (ppath), (pquery), (pfrag))
#define OSSL_HTTP_REQ_CTX_exchange(rctx) IAmiSSL->OSSL_HTTP_REQ_CTX_exchange((rctx))
#define OSSL_HTTP_REQ_CTX_new(wbio, rbio, buf_size) IAmiSSL->OSSL_HTTP_REQ_CTX_new((wbio), (rbio), (buf_size))
#define X509_load_http(url, bio, rbio, timeout) IAmiSSL->X509_load_http((url), (bio), (rbio), (timeout))
#define X509_NAME_hash_ex(x, libctx, propq, ok) IAmiSSL->X509_NAME_hash_ex((x), (libctx), (propq), (ok))
#define OSSL_HTTP_REQ_CTX_set_request_line(rctx, method_POST, server, port, path) IAmiSSL->OSSL_HTTP_REQ_CTX_set_request_line((rctx), (method_POST), (server), (port), (path))
#define OSSL_HTTP_REQ_CTX_set1_req(rctx, content_type, it, req) IAmiSSL->OSSL_HTTP_REQ_CTX_set1_req((rctx), (content_type), (it), (req))
#define EVP_MAC_CTX_new(mac) IAmiSSL->EVP_MAC_CTX_new((mac))
#define EVP_MAC_CTX_free(ctx) IAmiSSL->EVP_MAC_CTX_free((ctx))
#define EVP_MAC_CTX_dup(src) IAmiSSL->EVP_MAC_CTX_dup((src))
#define EVP_MAC_CTX_get0_mac(ctx) IAmiSSL->EVP_MAC_CTX_get0_mac((ctx))
#define EVP_MAC_CTX_get_mac_size(ctx) IAmiSSL->EVP_MAC_CTX_get_mac_size((ctx))
#define EVP_Q_mac(libctx, name, propq, subalg, params, key, keylen, data, datalen, out, outsize, outlen) IAmiSSL->EVP_Q_mac((libctx), (name), (propq), (subalg), (params), (key), (keylen), (data), (datalen), (out), (outsize), (outlen))
#define EVP_MAC_init(ctx, key, keylen, params) IAmiSSL->EVP_MAC_init((ctx), (key), (keylen), (params))
#define EVP_MAC_update(ctx, data, datalen) IAmiSSL->EVP_MAC_update((ctx), (data), (datalen))
#define EVP_MAC_final(ctx, out, outl, outsize) IAmiSSL->EVP_MAC_final((ctx), (out), (outl), (outsize))
#define EVP_MAC_finalXOF(ctx, out, outsize) IAmiSSL->EVP_MAC_finalXOF((ctx), (out), (outsize))
#define OSSL_EC_curve_nid2name(nid) IAmiSSL->OSSL_EC_curve_nid2name((nid))
#define EVP_PKEY_digestsign_supports_digest(pkey, libctx, name, propq) IAmiSSL->EVP_PKEY_digestsign_supports_digest((pkey), (libctx), (name), (propq))
#define SRP_VBASE_add0_user(vb, user_pwd) IAmiSSL->SRP_VBASE_add0_user((vb), (user_pwd))
#define SRP_user_pwd_new() IAmiSSL->SRP_user_pwd_new()
#define SRP_user_pwd_set_gN(user_pwd, g, N) IAmiSSL->SRP_user_pwd_set_gN((user_pwd), (g), (N))
#define SRP_user_pwd_set1_ids(user_pwd, id, info) IAmiSSL->SRP_user_pwd_set1_ids((user_pwd), (id), (info))
#define SRP_user_pwd_set0_sv(user_pwd, s, v) IAmiSSL->SRP_user_pwd_set0_sv((user_pwd), (s), (v))
#define OPENSSL_version_major() IAmiSSL->OPENSSL_version_major()
#define OPENSSL_version_minor() IAmiSSL->OPENSSL_version_minor()
#define OPENSSL_version_patch() IAmiSSL->OPENSSL_version_patch()
#define OPENSSL_version_pre_release() IAmiSSL->OPENSSL_version_pre_release()
#define OPENSSL_version_build_metadata() IAmiSSL->OPENSSL_version_build_metadata()
#define ASYNC_WAIT_CTX_get_callback(ctx, callback, callback_arg) IAmiSSL->ASYNC_WAIT_CTX_get_callback((ctx), (callback), (callback_arg))
#define ASYNC_WAIT_CTX_set_callback(ctx, callback, callback_arg) IAmiSSL->ASYNC_WAIT_CTX_set_callback((ctx), (callback), (callback_arg))
#define ASYNC_WAIT_CTX_set_status(ctx, status) IAmiSSL->ASYNC_WAIT_CTX_set_status((ctx), (status))
#define ASYNC_WAIT_CTX_get_status(ctx) IAmiSSL->ASYNC_WAIT_CTX_get_status((ctx))
#define EVP_KDF_CTX_free(ctx) IAmiSSL->EVP_KDF_CTX_free((ctx))
#define EVP_KDF_CTX_reset(ctx) IAmiSSL->EVP_KDF_CTX_reset((ctx))
#define EVP_KDF_CTX_get_kdf_size(ctx) IAmiSSL->EVP_KDF_CTX_get_kdf_size((ctx))
#define EVP_KDF_derive(ctx, key, keylen, params) IAmiSSL->EVP_KDF_derive((ctx), (key), (keylen), (params))
#define EVP_KDF_get0_name(kdf) IAmiSSL->EVP_KDF_get0_name((kdf))
#define EC_GROUP_get0_field(group) IAmiSSL->EC_GROUP_get0_field((group))
#define CRYPTO_alloc_ex_data(class_index, obj, ad, idx) IAmiSSL->CRYPTO_alloc_ex_data((class_index), (obj), (ad), (idx))
#define OSSL_LIB_CTX_new() IAmiSSL->OSSL_LIB_CTX_new()
#define OSSL_LIB_CTX_free(a) IAmiSSL->OSSL_LIB_CTX_free((a))
#define OPENSSL_LH_flush(lh) IAmiSSL->OPENSSL_LH_flush((lh))
#define BN_native2bn(s, len, ret) IAmiSSL->BN_native2bn((s), (len), (ret))
#define BN_bn2nativepad(a, to, tolen) IAmiSSL->BN_bn2nativepad((a), (to), (tolen))
#define OSSL_trace_get_category_num(name) IAmiSSL->OSSL_trace_get_category_num((name))
#define OSSL_trace_get_category_name(num) IAmiSSL->OSSL_trace_get_category_name((num))
#define OSSL_trace_set_channel(category, channel) IAmiSSL->OSSL_trace_set_channel((category), (channel))
#define OSSL_trace_set_prefix(category, prefix) IAmiSSL->OSSL_trace_set_prefix((category), (prefix))
#define OSSL_trace_set_suffix(category, suffix) IAmiSSL->OSSL_trace_set_suffix((category), (suffix))
#define OSSL_trace_set_callback(category, callback, data) IAmiSSL->OSSL_trace_set_callback((category), (callback), (data))
#define OSSL_trace_enabled(category) IAmiSSL->OSSL_trace_enabled((category))
#define OSSL_trace_begin(category) IAmiSSL->OSSL_trace_begin((category))
#define OSSL_trace_end(category, channel) IAmiSSL->OSSL_trace_end((category), (channel))
#define OSSL_PROVIDER_load(a, name) IAmiSSL->OSSL_PROVIDER_load((a), (name))
#define OSSL_PROVIDER_try_load(a, name, retain_fallbacks) IAmiSSL->OSSL_PROVIDER_try_load((a), (name), (retain_fallbacks))
#define OSSL_PROVIDER_unload(prov) IAmiSSL->OSSL_PROVIDER_unload((prov))
#define OSSL_PROVIDER_add_builtin(a, name, init_fn) IAmiSSL->OSSL_PROVIDER_add_builtin((a), (name), (init_fn))
#define OSSL_PROVIDER_gettable_params(prov) IAmiSSL->OSSL_PROVIDER_gettable_params((prov))
#define OSSL_PROVIDER_get_params(prov, params) IAmiSSL->OSSL_PROVIDER_get_params((prov), (params))
#define d2i_OSSL_CRMF_ENCRYPTEDVALUE(a, in, len) IAmiSSL->d2i_OSSL_CRMF_ENCRYPTEDVALUE((a), (in), (len))
#define i2d_OSSL_CRMF_ENCRYPTEDVALUE(a, out) IAmiSSL->i2d_OSSL_CRMF_ENCRYPTEDVALUE((a), (out))
#define OSSL_CRMF_ENCRYPTEDVALUE_free(a) IAmiSSL->OSSL_CRMF_ENCRYPTEDVALUE_free((a))
#define OSSL_CRMF_ENCRYPTEDVALUE_new() IAmiSSL->OSSL_CRMF_ENCRYPTEDVALUE_new()
#define OSSL_CRMF_ENCRYPTEDVALUE_it() IAmiSSL->OSSL_CRMF_ENCRYPTEDVALUE_it()
#define d2i_OSSL_CRMF_MSG(a, in, len) IAmiSSL->d2i_OSSL_CRMF_MSG((a), (in), (len))
#define i2d_OSSL_CRMF_MSG(a, out) IAmiSSL->i2d_OSSL_CRMF_MSG((a), (out))
#define OSSL_CRMF_MSG_dup(a) IAmiSSL->OSSL_CRMF_MSG_dup((a))
#define OSSL_CRMF_MSG_free(a) IAmiSSL->OSSL_CRMF_MSG_free((a))
#define OSSL_CRMF_MSG_new() IAmiSSL->OSSL_CRMF_MSG_new()
#define OSSL_CRMF_MSG_it() IAmiSSL->OSSL_CRMF_MSG_it()
#define d2i_OSSL_CRMF_PBMPARAMETER(a, in, len) IAmiSSL->d2i_OSSL_CRMF_PBMPARAMETER((a), (in), (len))
#define i2d_OSSL_CRMF_PBMPARAMETER(a, out) IAmiSSL->i2d_OSSL_CRMF_PBMPARAMETER((a), (out))
#define OSSL_CRMF_PBMPARAMETER_free(a) IAmiSSL->OSSL_CRMF_PBMPARAMETER_free((a))
#define OSSL_CRMF_PBMPARAMETER_new() IAmiSSL->OSSL_CRMF_PBMPARAMETER_new()
#define OSSL_CRMF_PBMPARAMETER_it() IAmiSSL->OSSL_CRMF_PBMPARAMETER_it()
#define d2i_OSSL_CRMF_CERTID(a, in, len) IAmiSSL->d2i_OSSL_CRMF_CERTID((a), (in), (len))
#define i2d_OSSL_CRMF_CERTID(a, out) IAmiSSL->i2d_OSSL_CRMF_CERTID((a), (out))
#define OSSL_CRMF_CERTID_dup(a) IAmiSSL->OSSL_CRMF_CERTID_dup((a))
#define OSSL_CRMF_CERTID_free(a) IAmiSSL->OSSL_CRMF_CERTID_free((a))
#define OSSL_CRMF_CERTID_new() IAmiSSL->OSSL_CRMF_CERTID_new()
#define OSSL_CRMF_CERTID_it() IAmiSSL->OSSL_CRMF_CERTID_it()
#define d2i_OSSL_CRMF_PKIPUBLICATIONINFO(a, in, len) IAmiSSL->d2i_OSSL_CRMF_PKIPUBLICATIONINFO((a), (in), (len))
#define i2d_OSSL_CRMF_PKIPUBLICATIONINFO(a, out) IAmiSSL->i2d_OSSL_CRMF_PKIPUBLICATIONINFO((a), (out))
#define OSSL_CRMF_PKIPUBLICATIONINFO_free(a) IAmiSSL->OSSL_CRMF_PKIPUBLICATIONINFO_free((a))
#define OSSL_CRMF_PKIPUBLICATIONINFO_new() IAmiSSL->OSSL_CRMF_PKIPUBLICATIONINFO_new()
#define OSSL_CRMF_PKIPUBLICATIONINFO_it() IAmiSSL->OSSL_CRMF_PKIPUBLICATIONINFO_it()
#define d2i_OSSL_CRMF_SINGLEPUBINFO(a, in, len) IAmiSSL->d2i_OSSL_CRMF_SINGLEPUBINFO((a), (in), (len))
#define i2d_OSSL_CRMF_SINGLEPUBINFO(a, out) IAmiSSL->i2d_OSSL_CRMF_SINGLEPUBINFO((a), (out))
#define OSSL_CRMF_SINGLEPUBINFO_free(a) IAmiSSL->OSSL_CRMF_SINGLEPUBINFO_free((a))
#define OSSL_CRMF_SINGLEPUBINFO_new() IAmiSSL->OSSL_CRMF_SINGLEPUBINFO_new()
#define OSSL_CRMF_SINGLEPUBINFO_it() IAmiSSL->OSSL_CRMF_SINGLEPUBINFO_it()
#define d2i_OSSL_CRMF_CERTTEMPLATE(a, in, len) IAmiSSL->d2i_OSSL_CRMF_CERTTEMPLATE((a), (in), (len))
#define i2d_OSSL_CRMF_CERTTEMPLATE(a, out) IAmiSSL->i2d_OSSL_CRMF_CERTTEMPLATE((a), (out))
#define OSSL_CRMF_CERTTEMPLATE_free(a) IAmiSSL->OSSL_CRMF_CERTTEMPLATE_free((a))
#define OSSL_CRMF_CERTTEMPLATE_new() IAmiSSL->OSSL_CRMF_CERTTEMPLATE_new()
#define OSSL_CRMF_CERTTEMPLATE_it() IAmiSSL->OSSL_CRMF_CERTTEMPLATE_it()
#define d2i_OSSL_CRMF_MSGS(a, in, len) IAmiSSL->d2i_OSSL_CRMF_MSGS((a), (in), (len))
#define i2d_OSSL_CRMF_MSGS(a, out) IAmiSSL->i2d_OSSL_CRMF_MSGS((a), (out))
#define OSSL_CRMF_MSGS_free(a) IAmiSSL->OSSL_CRMF_MSGS_free((a))
#define OSSL_CRMF_MSGS_new() IAmiSSL->OSSL_CRMF_MSGS_new()
#define OSSL_CRMF_MSGS_it() IAmiSSL->OSSL_CRMF_MSGS_it()
#define OSSL_CRMF_pbmp_new(libctx, slen, owfnid, itercnt, macnid) IAmiSSL->OSSL_CRMF_pbmp_new((libctx), (slen), (owfnid), (itercnt), (macnid))
#define OSSL_CRMF_pbm_new(libctx, propq, pbmp, msg, msglen, sec, seclen, mac, maclen) IAmiSSL->OSSL_CRMF_pbm_new((libctx), (propq), (pbmp), (msg), (msglen), (sec), (seclen), (mac), (maclen))
#define OSSL_CRMF_MSG_get0_regCtrl_regToken(msg) IAmiSSL->OSSL_CRMF_MSG_get0_regCtrl_regToken((msg))
#define OSSL_CRMF_MSG_set1_regCtrl_regToken(msg, tok) IAmiSSL->OSSL_CRMF_MSG_set1_regCtrl_regToken((msg), (tok))
#define OSSL_CRMF_MSG_get0_regCtrl_authenticator(msg) IAmiSSL->OSSL_CRMF_MSG_get0_regCtrl_authenticator((msg))
#define OSSL_CRMF_MSG_set1_regCtrl_authenticator(msg, auth) IAmiSSL->OSSL_CRMF_MSG_set1_regCtrl_authenticator((msg), (auth))
#define OSSL_CRMF_MSG_PKIPublicationInfo_push0_SinglePubInfo(pi, spi) IAmiSSL->OSSL_CRMF_MSG_PKIPublicationInfo_push0_SinglePubInfo((pi), (spi))
#define OSSL_CRMF_MSG_set0_SinglePubInfo(spi, method, nm) IAmiSSL->OSSL_CRMF_MSG_set0_SinglePubInfo((spi), (method), (nm))
#define OSSL_CRMF_MSG_get0_regCtrl_pkiPublicationInfo(msg) IAmiSSL->OSSL_CRMF_MSG_get0_regCtrl_pkiPublicationInfo((msg))
#define OSSL_CRMF_MSG_set_PKIPublicationInfo_action(pi, action) IAmiSSL->OSSL_CRMF_MSG_set_PKIPublicationInfo_action((pi), (action))
#define OSSL_CRMF_MSG_set1_regCtrl_pkiPublicationInfo(msg, pi) IAmiSSL->OSSL_CRMF_MSG_set1_regCtrl_pkiPublicationInfo((msg), (pi))
#define OSSL_CRMF_MSG_get0_regCtrl_protocolEncrKey(msg) IAmiSSL->OSSL_CRMF_MSG_get0_regCtrl_protocolEncrKey((msg))
#define OSSL_CRMF_MSG_set1_regCtrl_protocolEncrKey(msg, pubkey) IAmiSSL->OSSL_CRMF_MSG_set1_regCtrl_protocolEncrKey((msg), (pubkey))
#define OSSL_CRMF_MSG_get0_regCtrl_oldCertID(msg) IAmiSSL->OSSL_CRMF_MSG_get0_regCtrl_oldCertID((msg))
#define OSSL_CRMF_MSG_set1_regCtrl_oldCertID(msg, cid) IAmiSSL->OSSL_CRMF_MSG_set1_regCtrl_oldCertID((msg), (cid))
#define OSSL_CRMF_CERTID_gen(issuer, serial) IAmiSSL->OSSL_CRMF_CERTID_gen((issuer), (serial))
#define OSSL_CRMF_MSG_get0_regInfo_utf8Pairs(msg) IAmiSSL->OSSL_CRMF_MSG_get0_regInfo_utf8Pairs((msg))
#define OSSL_CRMF_MSG_set1_regInfo_utf8Pairs(msg, utf8pairs) IAmiSSL->OSSL_CRMF_MSG_set1_regInfo_utf8Pairs((msg), (utf8pairs))
#define OSSL_CRMF_MSG_get0_regInfo_certReq(msg) IAmiSSL->OSSL_CRMF_MSG_get0_regInfo_certReq((msg))
#define OSSL_CRMF_MSG_set1_regInfo_certReq(msg, cr) IAmiSSL->OSSL_CRMF_MSG_set1_regInfo_certReq((msg), (cr))
#define OSSL_CRMF_MSG_set0_validity(crm, notBefore, notAfter) IAmiSSL->OSSL_CRMF_MSG_set0_validity((crm), (notBefore), (notAfter))
#define OSSL_CRMF_MSG_set_certReqId(crm, rid) IAmiSSL->OSSL_CRMF_MSG_set_certReqId((crm), (rid))
#define OSSL_CRMF_MSG_get_certReqId(crm) IAmiSSL->OSSL_CRMF_MSG_get_certReqId((crm))
#define OSSL_CRMF_MSG_set0_extensions(crm, exts) IAmiSSL->OSSL_CRMF_MSG_set0_extensions((crm), (exts))
#define OSSL_CRMF_MSG_push0_extension(crm, ext) IAmiSSL->OSSL_CRMF_MSG_push0_extension((crm), (ext))
#define OSSL_CRMF_MSG_create_popo(meth, crm, pkey, digest, libctx, propq) IAmiSSL->OSSL_CRMF_MSG_create_popo((meth), (crm), (pkey), (digest), (libctx), (propq))
#define OSSL_CRMF_MSGS_verify_popo(reqs, rid, acceptRAVerified, libctx, propq) IAmiSSL->OSSL_CRMF_MSGS_verify_popo((reqs), (rid), (acceptRAVerified), (libctx), (propq))
#define OSSL_CRMF_MSG_get0_tmpl(crm) IAmiSSL->OSSL_CRMF_MSG_get0_tmpl((crm))
#define OSSL_CRMF_CERTTEMPLATE_get0_serialNumber(tmpl) IAmiSSL->OSSL_CRMF_CERTTEMPLATE_get0_serialNumber((tmpl))
#define OSSL_CRMF_CERTTEMPLATE_get0_subject(tmpl) IAmiSSL->OSSL_CRMF_CERTTEMPLATE_get0_subject((tmpl))
#define OSSL_CRMF_CERTTEMPLATE_get0_issuer(tmpl) IAmiSSL->OSSL_CRMF_CERTTEMPLATE_get0_issuer((tmpl))
#define OSSL_CRMF_CERTTEMPLATE_get0_extensions(tmpl) IAmiSSL->OSSL_CRMF_CERTTEMPLATE_get0_extensions((tmpl))
#define OSSL_CRMF_CERTTEMPLATE_fill(tmpl, pubkey, subject, issuer, serial) IAmiSSL->OSSL_CRMF_CERTTEMPLATE_fill((tmpl), (pubkey), (subject), (issuer), (serial))
#define OSSL_CRMF_ENCRYPTEDVALUE_get1_encCert(ecert, libctx, propq, pkey) IAmiSSL->OSSL_CRMF_ENCRYPTEDVALUE_get1_encCert((ecert), (libctx), (propq), (pkey))
#define OSSL_PARAM_locate(p, key) IAmiSSL->OSSL_PARAM_locate((p), (key))
#define OSSL_PARAM_construct_int_amiga(result, key, buf) IAmiSSL->OSSL_PARAM_construct_int_amiga((result), (key), (buf))
#define OSSL_PARAM_construct_uint_amiga(result, key, buf) IAmiSSL->OSSL_PARAM_construct_uint_amiga((result), (key), (buf))
#define OSSL_PARAM_construct_long_amiga(result, key, buf) IAmiSSL->OSSL_PARAM_construct_long_amiga((result), (key), (buf))
#define OSSL_PARAM_construct_ulong_amiga(result, key, buf) IAmiSSL->OSSL_PARAM_construct_ulong_amiga((result), (key), (buf))
#define OSSL_PARAM_construct_int32_amiga(result, key, buf) IAmiSSL->OSSL_PARAM_construct_int32_amiga((result), (key), (buf))
#define OSSL_PARAM_construct_uint32_amiga(result, key, buf) IAmiSSL->OSSL_PARAM_construct_uint32_amiga((result), (key), (buf))
#define OSSL_PARAM_construct_int64_amiga(result, key, buf) IAmiSSL->OSSL_PARAM_construct_int64_amiga((result), (key), (buf))
#define OSSL_PARAM_construct_uint64_amiga(result, key, buf) IAmiSSL->OSSL_PARAM_construct_uint64_amiga((result), (key), (buf))
#define OSSL_PARAM_construct_size_t_amiga(result, key, buf) IAmiSSL->OSSL_PARAM_construct_size_t_amiga((result), (key), (buf))
#define OSSL_PARAM_construct_BN_amiga(result, key, buf, bsize) IAmiSSL->OSSL_PARAM_construct_BN_amiga((result), (key), (buf), (bsize))
#define OSSL_PARAM_construct_double_amiga(result, key, buf) IAmiSSL->OSSL_PARAM_construct_double_amiga((result), (key), (buf))
#define OSSL_PARAM_construct_utf8_string_amiga(result, key, buf, bsize) IAmiSSL->OSSL_PARAM_construct_utf8_string_amiga((result), (key), (buf), (bsize))
#define OSSL_PARAM_construct_utf8_ptr_amiga(result, key, buf, bsize) IAmiSSL->OSSL_PARAM_construct_utf8_ptr_amiga((result), (key), (buf), (bsize))
#define OSSL_PARAM_construct_octet_string_amiga(result, key, buf, bsize) IAmiSSL->OSSL_PARAM_construct_octet_string_amiga((result), (key), (buf), (bsize))
#define OSSL_PARAM_construct_octet_ptr_amiga(result, key, buf, bsize) IAmiSSL->OSSL_PARAM_construct_octet_ptr_amiga((result), (key), (buf), (bsize))
#define OSSL_PARAM_get_int(p, val) IAmiSSL->OSSL_PARAM_get_int((p), (val))
#define OSSL_PARAM_get_uint(p, val) IAmiSSL->OSSL_PARAM_get_uint((p), (val))
#define OSSL_PARAM_get_long(p, val) IAmiSSL->OSSL_PARAM_get_long((p), (val))
#define OSSL_PARAM_get_ulong(p, val) IAmiSSL->OSSL_PARAM_get_ulong((p), (val))
#define OSSL_PARAM_get_int32(p, val) IAmiSSL->OSSL_PARAM_get_int32((p), (val))
#define OSSL_PARAM_get_uint32(p, val) IAmiSSL->OSSL_PARAM_get_uint32((p), (val))
#define OSSL_PARAM_get_int64(p, val) IAmiSSL->OSSL_PARAM_get_int64((p), (val))
#define OSSL_PARAM_get_uint64(p, val) IAmiSSL->OSSL_PARAM_get_uint64((p), (val))
#define OSSL_PARAM_get_size_t(p, val) IAmiSSL->OSSL_PARAM_get_size_t((p), (val))
#define OSSL_PARAM_set_int(p, val) IAmiSSL->OSSL_PARAM_set_int((p), (val))
#define OSSL_PARAM_set_uint(p, val) IAmiSSL->OSSL_PARAM_set_uint((p), (val))
#define OSSL_PARAM_set_long(p, val) IAmiSSL->OSSL_PARAM_set_long((p), (val))
#define OSSL_PARAM_set_ulong(p, val) IAmiSSL->OSSL_PARAM_set_ulong((p), (val))
#define OSSL_PARAM_set_int32(p, val) IAmiSSL->OSSL_PARAM_set_int32((p), (val))
#define OSSL_PARAM_set_uint32(p, val) IAmiSSL->OSSL_PARAM_set_uint32((p), (val))
#define OSSL_PARAM_set_int64(p, val) IAmiSSL->OSSL_PARAM_set_int64((p), (val))
#define OSSL_PARAM_set_uint64(p, val) IAmiSSL->OSSL_PARAM_set_uint64((p), (val))
#define OSSL_PARAM_set_size_t(p, val) IAmiSSL->OSSL_PARAM_set_size_t((p), (val))
#define OSSL_PARAM_get_double(p, val) IAmiSSL->OSSL_PARAM_get_double((p), (val))
#define OSSL_PARAM_set_double(p, val) IAmiSSL->OSSL_PARAM_set_double((p), (val))
#define OSSL_PARAM_get_BN(p, val) IAmiSSL->OSSL_PARAM_get_BN((p), (val))
#define OSSL_PARAM_set_BN(p, val) IAmiSSL->OSSL_PARAM_set_BN((p), (val))
#define OSSL_PARAM_get_utf8_string(p, val, max_len) IAmiSSL->OSSL_PARAM_get_utf8_string((p), (val), (max_len))
#define OSSL_PARAM_set_utf8_string(p, val) IAmiSSL->OSSL_PARAM_set_utf8_string((p), (val))
#define OSSL_PARAM_get_octet_string(p, val, max_len, used_len) IAmiSSL->OSSL_PARAM_get_octet_string((p), (val), (max_len), (used_len))
#define OSSL_PARAM_set_octet_string(p, val, len) IAmiSSL->OSSL_PARAM_set_octet_string((p), (val), (len))
#define OSSL_PARAM_get_utf8_ptr(p, val) IAmiSSL->OSSL_PARAM_get_utf8_ptr((p), (val))
#define OSSL_PARAM_set_utf8_ptr(p, val) IAmiSSL->OSSL_PARAM_set_utf8_ptr((p), (val))
#define OSSL_PARAM_get_octet_ptr(p, val, used_len) IAmiSSL->OSSL_PARAM_get_octet_ptr((p), (val), (used_len))
#define OSSL_PARAM_set_octet_ptr(p, val, used_len) IAmiSSL->OSSL_PARAM_set_octet_ptr((p), (val), (used_len))
#define X509_set0_distinguishing_id(x, d_id) IAmiSSL->X509_set0_distinguishing_id((x), (d_id))
#define X509_get0_distinguishing_id(x) IAmiSSL->X509_get0_distinguishing_id((x))
#define EVP_MD_up_ref(md) IAmiSSL->EVP_MD_up_ref((md))
#define EVP_MD_fetch(ctx, algorithm, properties) IAmiSSL->EVP_MD_fetch((ctx), (algorithm), (properties))
#define EVP_set_default_properties(libctx, propq) IAmiSSL->EVP_set_default_properties((libctx), (propq))
#define OSSL_PARAM_construct_end_amiga(result) IAmiSSL->OSSL_PARAM_construct_end_amiga((result))
#define EC_GROUP_check_named_curve(group, nist_only, ctx) IAmiSSL->EC_GROUP_check_named_curve((group), (nist_only), (ctx))
#define EVP_CIPHER_up_ref(cipher) IAmiSSL->EVP_CIPHER_up_ref((cipher))
#define EVP_CIPHER_fetch(ctx, algorithm, properties) IAmiSSL->EVP_CIPHER_fetch((ctx), (algorithm), (properties))
#define EVP_CIPHER_get_mode(cipher) IAmiSSL->EVP_CIPHER_get_mode((cipher))
#define OPENSSL_info(type) IAmiSSL->OPENSSL_info((type))
#define EVP_KDF_CTX_new(kdf) IAmiSSL->EVP_KDF_CTX_new((kdf))
#define EVP_KDF_CTX_kdf(ctx) IAmiSSL->EVP_KDF_CTX_kdf((ctx))
#define i2d_KeyParams(a, pp) IAmiSSL->i2d_KeyParams((a), (pp))
#define d2i_KeyParams(type, a, pp, length) IAmiSSL->d2i_KeyParams((type), (a), (pp), (length))
#define i2d_KeyParams_bio(bp, pkey) IAmiSSL->i2d_KeyParams_bio((bp), (pkey))
#define d2i_KeyParams_bio(type, a, in) IAmiSSL->d2i_KeyParams_bio((type), (a), (in))
#define OSSL_CMP_PKISTATUS_it() IAmiSSL->OSSL_CMP_PKISTATUS_it()
#define d2i_OSSL_CMP_PKIHEADER(a, in, len) IAmiSSL->d2i_OSSL_CMP_PKIHEADER((a), (in), (len))
#define i2d_OSSL_CMP_PKIHEADER(a, out) IAmiSSL->i2d_OSSL_CMP_PKIHEADER((a), (out))
#define OSSL_CMP_PKIHEADER_free(a) IAmiSSL->OSSL_CMP_PKIHEADER_free((a))
#define OSSL_CMP_PKIHEADER_new() IAmiSSL->OSSL_CMP_PKIHEADER_new()
#define OSSL_CMP_PKIHEADER_it() IAmiSSL->OSSL_CMP_PKIHEADER_it()
#define d2i_OSSL_CMP_MSG(a, in, len) IAmiSSL->d2i_OSSL_CMP_MSG((a), (in), (len))
#define i2d_OSSL_CMP_MSG(a, out) IAmiSSL->i2d_OSSL_CMP_MSG((a), (out))
#define OSSL_CMP_MSG_it() IAmiSSL->OSSL_CMP_MSG_it()
#define OSSL_CMP_ITAV_create(type, value) IAmiSSL->OSSL_CMP_ITAV_create((type), (value))
#define OSSL_CMP_ITAV_set0(itav, type, value) IAmiSSL->OSSL_CMP_ITAV_set0((itav), (type), (value))
#define OSSL_CMP_ITAV_get0_type(itav) IAmiSSL->OSSL_CMP_ITAV_get0_type((itav))
#define OSSL_CMP_ITAV_get0_value(itav) IAmiSSL->OSSL_CMP_ITAV_get0_value((itav))
#define OSSL_CMP_ITAV_push0_stack_item(itav_sk_p, itav) IAmiSSL->OSSL_CMP_ITAV_push0_stack_item((itav_sk_p), (itav))
#define OSSL_CMP_ITAV_free(itav) IAmiSSL->OSSL_CMP_ITAV_free((itav))
#define OSSL_CMP_MSG_free(msg) IAmiSSL->OSSL_CMP_MSG_free((msg))
#define EVP_MD_CTX_set_params(ctx, params) IAmiSSL->EVP_MD_CTX_set_params((ctx), (params))
#define EVP_MD_CTX_get_params(ctx, params) IAmiSSL->EVP_MD_CTX_get_params((ctx), (params))
#define BN_CTX_new_ex(ctx) IAmiSSL->BN_CTX_new_ex((ctx))
#define BN_CTX_secure_new_ex(ctx) IAmiSSL->BN_CTX_secure_new_ex((ctx))
#define OPENSSL_thread_stop_ex(ctx) IAmiSSL->OPENSSL_thread_stop_ex((ctx))
#define OSSL_PARAM_locate_const(p, key) IAmiSSL->OSSL_PARAM_locate_const((p), (key))
#define X509_REQ_set0_distinguishing_id(x, d_id) IAmiSSL->X509_REQ_set0_distinguishing_id((x), (d_id))
#define X509_REQ_get0_distinguishing_id(x) IAmiSSL->X509_REQ_get0_distinguishing_id((x))
#define BN_rand_ex(rnd, bits, top, bottom, strength, ctx) IAmiSSL->BN_rand_ex((rnd), (bits), (top), (bottom), (strength), (ctx))
#define BN_priv_rand_ex(rnd, bits, top, bottom, strength, ctx) IAmiSSL->BN_priv_rand_ex((rnd), (bits), (top), (bottom), (strength), (ctx))
#define BN_rand_range_ex(r, range, strength, ctx) IAmiSSL->BN_rand_range_ex((r), (range), (strength), (ctx))
#define BN_priv_rand_range_ex(r, range, strength, ctx) IAmiSSL->BN_priv_rand_range_ex((r), (range), (strength), (ctx))
#define BN_generate_prime_ex2(ret, bits, safe, add, rem, cb, ctx) IAmiSSL->BN_generate_prime_ex2((ret), (bits), (safe), (add), (rem), (cb), (ctx))
#define EVP_KEYEXCH_free(exchange) IAmiSSL->EVP_KEYEXCH_free((exchange))
#define EVP_KEYEXCH_up_ref(exchange) IAmiSSL->EVP_KEYEXCH_up_ref((exchange))
#define EVP_KEYEXCH_fetch(ctx, algorithm, properties) IAmiSSL->EVP_KEYEXCH_fetch((ctx), (algorithm), (properties))
#define EVP_PKEY_CTX_set_dh_pad(ctx, pad) IAmiSSL->EVP_PKEY_CTX_set_dh_pad((ctx), (pad))
#define EVP_PKEY_CTX_set_params(ctx, params) IAmiSSL->EVP_PKEY_CTX_set_params((ctx), (params))
#define EVP_KEYMGMT_fetch(ctx, algorithm, properties) IAmiSSL->EVP_KEYMGMT_fetch((ctx), (algorithm), (properties))
#define EVP_KEYMGMT_up_ref(keymgmt) IAmiSSL->EVP_KEYMGMT_up_ref((keymgmt))
#define EVP_KEYMGMT_free(keymgmt) IAmiSSL->EVP_KEYMGMT_free((keymgmt))
#define EVP_KEYMGMT_get0_provider(keymgmt) IAmiSSL->EVP_KEYMGMT_get0_provider((keymgmt))
#define X509_PUBKEY_dup(a) IAmiSSL->X509_PUBKEY_dup((a))
#define EVP_MD_get0_name(md) IAmiSSL->EVP_MD_get0_name((md))
#define EVP_CIPHER_get0_name(cipher) IAmiSSL->EVP_CIPHER_get0_name((cipher))
#define EVP_MD_get0_provider(md) IAmiSSL->EVP_MD_get0_provider((md))
#define EVP_CIPHER_get0_provider(cipher) IAmiSSL->EVP_CIPHER_get0_provider((cipher))
#define OSSL_PROVIDER_get0_name(prov) IAmiSSL->OSSL_PROVIDER_get0_name((prov))
#define EVP_CIPHER_do_all_provided(libctx, fn, arg) IAmiSSL->EVP_CIPHER_do_all_provided((libctx), (fn), (arg))
#define EVP_MD_do_all_provided(libctx, fn, arg) IAmiSSL->EVP_MD_do_all_provided((libctx), (fn), (arg))
#define EVP_KEYEXCH_get0_provider(exchange) IAmiSSL->EVP_KEYEXCH_get0_provider((exchange))
#define OSSL_PROVIDER_available(a, name) IAmiSSL->OSSL_PROVIDER_available((a), (name))
#define ERR_new() IAmiSSL->ERR_new()
#define ERR_set_debug(file, line, func) IAmiSSL->ERR_set_debug((file), (line), (func))
#define ERR_vset_error(lib, reason, fmt, args) IAmiSSL->ERR_vset_error((lib), (reason), (fmt), (args))
#if (defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L) || (__GNUC__ >= 3)
#define ERR_set_error(lib, reason, ...) IAmiSSL->ERR_set_error((lib), (reason), __VA_ARGS__)
#elif (__GNUC__ == 2 && __GNUC_MINOR__ >= 95)
#define ERR_set_error(lib, reason, vargs...) IAmiSSL->ERR_set_error(lib, reason, vargs)
#endif
#define X509_self_signed(cert, verify_signature) IAmiSSL->X509_self_signed((cert), (verify_signature))
#define OPENSSL_hexstr2buf_ex(buf, buf_n, buflen, str, sep) IAmiSSL->OPENSSL_hexstr2buf_ex((buf), (buf_n), (buflen), (str), (sep))
#define OPENSSL_buf2hexstr_ex(str, str_n, strlength, buf, buflen, sep) IAmiSSL->OPENSSL_buf2hexstr_ex((str), (str_n), (strlength), (buf), (buflen), (sep))
#define OSSL_PARAM_allocate_from_text(to, paramdefs, key, value, value_n, found) IAmiSSL->OSSL_PARAM_allocate_from_text((to), (paramdefs), (key), (value), (value_n), (found))
#define EVP_MD_gettable_params(digest) IAmiSSL->EVP_MD_gettable_params((digest))
#define EVP_MD_CTX_settable_params(ctx) IAmiSSL->EVP_MD_CTX_settable_params((ctx))
#define EVP_MD_CTX_gettable_params(ctx) IAmiSSL->EVP_MD_CTX_gettable_params((ctx))
#define EVP_CIPHER_get_params(cipher, params) IAmiSSL->EVP_CIPHER_get_params((cipher), (params))
#define EVP_CIPHER_CTX_set_params(ctx, params) IAmiSSL->EVP_CIPHER_CTX_set_params((ctx), (params))
#define EVP_CIPHER_CTX_get_params(ctx, params) IAmiSSL->EVP_CIPHER_CTX_get_params((ctx), (params))
#define EVP_CIPHER_gettable_params(cipher) IAmiSSL->EVP_CIPHER_gettable_params((cipher))
#define EVP_CIPHER_settable_ctx_params(cipher) IAmiSSL->EVP_CIPHER_settable_ctx_params((cipher))
#define EVP_CIPHER_gettable_ctx_params(cipher) IAmiSSL->EVP_CIPHER_gettable_ctx_params((cipher))
#define EVP_MD_get_params(digest, params) IAmiSSL->EVP_MD_get_params((digest), (params))
#define EVP_MAC_fetch(libctx, algorithm, properties) IAmiSSL->EVP_MAC_fetch((libctx), (algorithm), (properties))
#define EVP_MAC_settable_ctx_params(mac) IAmiSSL->EVP_MAC_settable_ctx_params((mac))
#define EVP_MAC_CTX_set_params(ctx, params) IAmiSSL->EVP_MAC_CTX_set_params((ctx), (params))
#define EVP_MAC_CTX_get_params(ctx, params) IAmiSSL->EVP_MAC_CTX_get_params((ctx), (params))
#define EVP_MAC_gettable_ctx_params(mac) IAmiSSL->EVP_MAC_gettable_ctx_params((mac))
#define EVP_MAC_free(mac) IAmiSSL->EVP_MAC_free((mac))
#define EVP_MAC_up_ref(mac) IAmiSSL->EVP_MAC_up_ref((mac))
#define EVP_MAC_get_params(mac, params) IAmiSSL->EVP_MAC_get_params((mac), (params))
#define EVP_MAC_gettable_params(mac) IAmiSSL->EVP_MAC_gettable_params((mac))
#define EVP_MAC_get0_provider(mac) IAmiSSL->EVP_MAC_get0_provider((mac))
#define EVP_MAC_do_all_provided(libctx, fn, arg) IAmiSSL->EVP_MAC_do_all_provided((libctx), (fn), (arg))
#define EVP_MAC_get0_name(mac) IAmiSSL->EVP_MAC_get0_name((mac))
#define EVP_MD_free(md) IAmiSSL->EVP_MD_free((md))
#define EVP_CIPHER_free(cipher) IAmiSSL->EVP_CIPHER_free((cipher))
#define EVP_KDF_up_ref(kdf) IAmiSSL->EVP_KDF_up_ref((kdf))
#define EVP_KDF_free(kdf) IAmiSSL->EVP_KDF_free((kdf))
#define EVP_KDF_fetch(libctx, algorithm, properties) IAmiSSL->EVP_KDF_fetch((libctx), (algorithm), (properties))
#define EVP_KDF_CTX_dup(src) IAmiSSL->EVP_KDF_CTX_dup((src))
#define EVP_KDF_get0_provider(kdf) IAmiSSL->EVP_KDF_get0_provider((kdf))
#define EVP_KDF_get_params(kdf, params) IAmiSSL->EVP_KDF_get_params((kdf), (params))
#define EVP_KDF_CTX_get_params(ctx, params) IAmiSSL->EVP_KDF_CTX_get_params((ctx), (params))
#define EVP_KDF_CTX_set_params(ctx, params) IAmiSSL->EVP_KDF_CTX_set_params((ctx), (params))
#define EVP_KDF_gettable_params(kdf) IAmiSSL->EVP_KDF_gettable_params((kdf))
#define EVP_KDF_gettable_ctx_params(kdf) IAmiSSL->EVP_KDF_gettable_ctx_params((kdf))
#define EVP_KDF_settable_ctx_params(kdf) IAmiSSL->EVP_KDF_settable_ctx_params((kdf))
#define EVP_KDF_do_all_provided(libctx, fn, arg) IAmiSSL->EVP_KDF_do_all_provided((libctx), (fn), (arg))
#define EVP_SIGNATURE_free(signature) IAmiSSL->EVP_SIGNATURE_free((signature))
#define EVP_SIGNATURE_up_ref(signature) IAmiSSL->EVP_SIGNATURE_up_ref((signature))
#define EVP_SIGNATURE_get0_provider(signature) IAmiSSL->EVP_SIGNATURE_get0_provider((signature))
#define EVP_SIGNATURE_fetch(ctx, algorithm, properties) IAmiSSL->EVP_SIGNATURE_fetch((ctx), (algorithm), (properties))
#define EVP_PKEY_CTX_set_signature_md(ctx, md) IAmiSSL->EVP_PKEY_CTX_set_signature_md((ctx), (md))
#define EVP_PKEY_CTX_get_signature_md(ctx, md) IAmiSSL->EVP_PKEY_CTX_get_signature_md((ctx), (md))
#define EVP_PKEY_CTX_get_params(ctx, params) IAmiSSL->EVP_PKEY_CTX_get_params((ctx), (params))
#define EVP_PKEY_CTX_gettable_params(ctx) IAmiSSL->EVP_PKEY_CTX_gettable_params((ctx))
#define EVP_PKEY_CTX_settable_params(ctx) IAmiSSL->EVP_PKEY_CTX_settable_params((ctx))
#define EVP_CIPHER_CTX_get_tag_length(ctx) IAmiSSL->EVP_CIPHER_CTX_get_tag_length((ctx))
#define ERR_get_error_all(file, line, func, data, flags) IAmiSSL->ERR_get_error_all((file), (line), (func), (data), (flags))
#define ERR_peek_error_func(func) IAmiSSL->ERR_peek_error_func((func))
#define ERR_peek_error_data(data, flags) IAmiSSL->ERR_peek_error_data((data), (flags))
#define ERR_peek_error_all(file, line, func, data, flags) IAmiSSL->ERR_peek_error_all((file), (line), (func), (data), (flags))
#define ERR_peek_last_error_func(func) IAmiSSL->ERR_peek_last_error_func((func))
#define ERR_peek_last_error_data(data, flags) IAmiSSL->ERR_peek_last_error_data((data), (flags))
#define ERR_peek_last_error_all(file, line, func, data, flags) IAmiSSL->ERR_peek_last_error_all((file), (line), (func), (data), (flags))
#define EVP_CIPHER_is_a(cipher, name) IAmiSSL->EVP_CIPHER_is_a((cipher), (name))
#define EVP_MAC_is_a(mac, name) IAmiSSL->EVP_MAC_is_a((mac), (name))
#define EVP_MD_settable_ctx_params(md) IAmiSSL->EVP_MD_settable_ctx_params((md))
#define EVP_MD_gettable_ctx_params(md) IAmiSSL->EVP_MD_gettable_ctx_params((md))
#define OSSL_CMP_CTX_new(libctx, propq) IAmiSSL->OSSL_CMP_CTX_new((libctx), (propq))
#define OSSL_CMP_CTX_free(ctx) IAmiSSL->OSSL_CMP_CTX_free((ctx))
#define OSSL_CMP_CTX_reinit(ctx) IAmiSSL->OSSL_CMP_CTX_reinit((ctx))
#define OSSL_CMP_CTX_set_option(ctx, opt, val) IAmiSSL->OSSL_CMP_CTX_set_option((ctx), (opt), (val))
#define OSSL_CMP_CTX_get_option(ctx, opt) IAmiSSL->OSSL_CMP_CTX_get_option((ctx), (opt))
#define OSSL_CMP_CTX_set_log_cb(ctx, cb) IAmiSSL->OSSL_CMP_CTX_set_log_cb((ctx), (cb))
#define OSSL_CMP_CTX_print_errors(ctx) IAmiSSL->OSSL_CMP_CTX_print_errors((ctx))
#define OSSL_CMP_CTX_set1_serverPath(ctx, path) IAmiSSL->OSSL_CMP_CTX_set1_serverPath((ctx), (path))
#define OSSL_CMP_CTX_set1_server(ctx, address) IAmiSSL->OSSL_CMP_CTX_set1_server((ctx), (address))
#define OSSL_CMP_CTX_set_serverPort(ctx, port) IAmiSSL->OSSL_CMP_CTX_set_serverPort((ctx), (port))
#define OSSL_CMP_CTX_set1_proxy(ctx, name) IAmiSSL->OSSL_CMP_CTX_set1_proxy((ctx), (name))
#define OSSL_CMP_CTX_set1_no_proxy(ctx, names) IAmiSSL->OSSL_CMP_CTX_set1_no_proxy((ctx), (names))
#define OSSL_CMP_CTX_set_http_cb(ctx, cb) IAmiSSL->OSSL_CMP_CTX_set_http_cb((ctx), (cb))
#define OSSL_CMP_CTX_set_http_cb_arg(ctx, arg) IAmiSSL->OSSL_CMP_CTX_set_http_cb_arg((ctx), (arg))
#define OSSL_CMP_CTX_get_http_cb_arg(ctx) IAmiSSL->OSSL_CMP_CTX_get_http_cb_arg((ctx))
#define OSSL_CMP_CTX_set_transfer_cb(ctx, cb) IAmiSSL->OSSL_CMP_CTX_set_transfer_cb((ctx), (cb))
#define OSSL_CMP_CTX_set_transfer_cb_arg(ctx, arg) IAmiSSL->OSSL_CMP_CTX_set_transfer_cb_arg((ctx), (arg))
#define OSSL_CMP_CTX_get_transfer_cb_arg(ctx) IAmiSSL->OSSL_CMP_CTX_get_transfer_cb_arg((ctx))
#define OSSL_CMP_CTX_set1_srvCert(ctx, cert) IAmiSSL->OSSL_CMP_CTX_set1_srvCert((ctx), (cert))
#define OSSL_CMP_CTX_set1_expected_sender(ctx, name) IAmiSSL->OSSL_CMP_CTX_set1_expected_sender((ctx), (name))
#define OSSL_CMP_CTX_set0_trustedStore(ctx, store) IAmiSSL->OSSL_CMP_CTX_set0_trustedStore((ctx), (store))
#define OSSL_CMP_CTX_get0_trustedStore(ctx) IAmiSSL->OSSL_CMP_CTX_get0_trustedStore((ctx))
#define OSSL_CMP_CTX_set1_untrusted(ctx, certs) IAmiSSL->OSSL_CMP_CTX_set1_untrusted((ctx), (certs))
#define OSSL_CMP_CTX_get0_untrusted(ctx) IAmiSSL->OSSL_CMP_CTX_get0_untrusted((ctx))
#define OSSL_CMP_CTX_set1_cert(ctx, cert) IAmiSSL->OSSL_CMP_CTX_set1_cert((ctx), (cert))
#define OSSL_CMP_CTX_set1_pkey(ctx, pkey) IAmiSSL->OSSL_CMP_CTX_set1_pkey((ctx), (pkey))
#define OSSL_CMP_CTX_build_cert_chain(ctx, own_trusted, candidates) IAmiSSL->OSSL_CMP_CTX_build_cert_chain((ctx), (own_trusted), (candidates))
#define OSSL_CMP_CTX_set1_referenceValue(ctx, ref, len) IAmiSSL->OSSL_CMP_CTX_set1_referenceValue((ctx), (ref), (len))
#define OSSL_CMP_CTX_set1_secretValue(ctx, sec, len) IAmiSSL->OSSL_CMP_CTX_set1_secretValue((ctx), (sec), (len))
#define OSSL_CMP_CTX_set1_recipient(ctx, name) IAmiSSL->OSSL_CMP_CTX_set1_recipient((ctx), (name))
#define OSSL_CMP_CTX_push0_geninfo_ITAV(ctx, itav) IAmiSSL->OSSL_CMP_CTX_push0_geninfo_ITAV((ctx), (itav))
#define OSSL_CMP_CTX_set1_extraCertsOut(ctx, extraCertsOut) IAmiSSL->OSSL_CMP_CTX_set1_extraCertsOut((ctx), (extraCertsOut))
#define OSSL_CMP_CTX_set0_newPkey(ctx, priv, pkey) IAmiSSL->OSSL_CMP_CTX_set0_newPkey((ctx), (priv), (pkey))
#define OSSL_CMP_CTX_get0_newPkey(ctx, priv) IAmiSSL->OSSL_CMP_CTX_get0_newPkey((ctx), (priv))
#define OSSL_CMP_CTX_set1_issuer(ctx, name) IAmiSSL->OSSL_CMP_CTX_set1_issuer((ctx), (name))
#define OSSL_CMP_CTX_set1_subjectName(ctx, name) IAmiSSL->OSSL_CMP_CTX_set1_subjectName((ctx), (name))
#define OSSL_CMP_CTX_push1_subjectAltName(ctx, name) IAmiSSL->OSSL_CMP_CTX_push1_subjectAltName((ctx), (name))
#define OSSL_CMP_CTX_set0_reqExtensions(ctx, exts) IAmiSSL->OSSL_CMP_CTX_set0_reqExtensions((ctx), (exts))
#define OSSL_CMP_CTX_reqExtensions_have_SAN(ctx) IAmiSSL->OSSL_CMP_CTX_reqExtensions_have_SAN((ctx))
#define OSSL_CMP_CTX_push0_policy(ctx, pinfo) IAmiSSL->OSSL_CMP_CTX_push0_policy((ctx), (pinfo))
#define OSSL_CMP_CTX_set1_oldCert(ctx, cert) IAmiSSL->OSSL_CMP_CTX_set1_oldCert((ctx), (cert))
#define OSSL_CMP_CTX_set1_p10CSR(ctx, csr) IAmiSSL->OSSL_CMP_CTX_set1_p10CSR((ctx), (csr))
#define OSSL_CMP_CTX_push0_genm_ITAV(ctx, itav) IAmiSSL->OSSL_CMP_CTX_push0_genm_ITAV((ctx), (itav))
#define OSSL_CMP_CTX_set_certConf_cb(ctx, cb) IAmiSSL->OSSL_CMP_CTX_set_certConf_cb((ctx), (cb))
#define OSSL_CMP_CTX_set_certConf_cb_arg(ctx, arg) IAmiSSL->OSSL_CMP_CTX_set_certConf_cb_arg((ctx), (arg))
#define OSSL_CMP_CTX_get_certConf_cb_arg(ctx) IAmiSSL->OSSL_CMP_CTX_get_certConf_cb_arg((ctx))
#define OSSL_CMP_CTX_get_status(ctx) IAmiSSL->OSSL_CMP_CTX_get_status((ctx))
#define OSSL_CMP_CTX_get0_statusString(ctx) IAmiSSL->OSSL_CMP_CTX_get0_statusString((ctx))
#define OSSL_CMP_CTX_get_failInfoCode(ctx) IAmiSSL->OSSL_CMP_CTX_get_failInfoCode((ctx))
#define OSSL_CMP_CTX_get0_newCert(ctx) IAmiSSL->OSSL_CMP_CTX_get0_newCert((ctx))
#define OSSL_CMP_CTX_get1_newChain(ctx) IAmiSSL->OSSL_CMP_CTX_get1_newChain((ctx))
#define OSSL_CMP_CTX_get1_caPubs(ctx) IAmiSSL->OSSL_CMP_CTX_get1_caPubs((ctx))
#define OSSL_CMP_CTX_get1_extraCertsIn(ctx) IAmiSSL->OSSL_CMP_CTX_get1_extraCertsIn((ctx))
#define OSSL_CMP_CTX_set1_transactionID(ctx, id) IAmiSSL->OSSL_CMP_CTX_set1_transactionID((ctx), (id))
#define OSSL_CMP_CTX_set1_senderNonce(ctx, nonce) IAmiSSL->OSSL_CMP_CTX_set1_senderNonce((ctx), (nonce))
#define OSSL_CMP_log_open() IAmiSSL->OSSL_CMP_log_open()
#define OSSL_CMP_log_close() IAmiSSL->OSSL_CMP_log_close()
#define OSSL_CMP_print_to_bio(bio, component, file, line, level, msg) IAmiSSL->OSSL_CMP_print_to_bio((bio), (component), (file), (line), (level), (msg))
#define OSSL_CMP_print_errors_cb(log_fn) IAmiSSL->OSSL_CMP_print_errors_cb((log_fn))
#define OSSL_CRMF_CERTID_get0_issuer(cid) IAmiSSL->OSSL_CRMF_CERTID_get0_issuer((cid))
#define OSSL_CRMF_CERTID_get0_serialNumber(cid) IAmiSSL->OSSL_CRMF_CERTID_get0_serialNumber((cid))
#define EVP_DigestSignUpdate(ctx, data, dsize) IAmiSSL->EVP_DigestSignUpdate((ctx), (data), (dsize))
#define EVP_DigestVerifyUpdate(ctx, data, dsize) IAmiSSL->EVP_DigestVerifyUpdate((ctx), (data), (dsize))
#define BN_check_prime(p, ctx, cb) IAmiSSL->BN_check_prime((p), (ctx), (cb))
#define EVP_KEYMGMT_is_a(keymgmt, name) IAmiSSL->EVP_KEYMGMT_is_a((keymgmt), (name))
#define EVP_KEYMGMT_do_all_provided(libctx, fn, arg) IAmiSSL->EVP_KEYMGMT_do_all_provided((libctx), (fn), (arg))
#define EVP_KEYEXCH_is_a(keyexch, name) IAmiSSL->EVP_KEYEXCH_is_a((keyexch), (name))
#define EVP_KEYEXCH_do_all_provided(libctx, fn, data) IAmiSSL->EVP_KEYEXCH_do_all_provided((libctx), (fn), (data))
#define EVP_KDF_is_a(kdf, name) IAmiSSL->EVP_KDF_is_a((kdf), (name))
#define EVP_MD_is_a(md, name) IAmiSSL->EVP_MD_is_a((md), (name))
#define EVP_SIGNATURE_is_a(signature, name) IAmiSSL->EVP_SIGNATURE_is_a((signature), (name))
#define EVP_SIGNATURE_do_all_provided(libctx, fn, data) IAmiSSL->EVP_SIGNATURE_do_all_provided((libctx), (fn), (data))
#define EVP_MD_names_do_all(md, fn, data) IAmiSSL->EVP_MD_names_do_all((md), (fn), (data))
#define EVP_CIPHER_names_do_all(cipher, fn, data) IAmiSSL->EVP_CIPHER_names_do_all((cipher), (fn), (data))
#define EVP_MAC_names_do_all(mac, fn, data) IAmiSSL->EVP_MAC_names_do_all((mac), (fn), (data))
#define EVP_KEYMGMT_names_do_all(keymgmt, fn, data) IAmiSSL->EVP_KEYMGMT_names_do_all((keymgmt), (fn), (data))
#define EVP_KEYEXCH_names_do_all(keyexch, fn, data) IAmiSSL->EVP_KEYEXCH_names_do_all((keyexch), (fn), (data))
#define EVP_KDF_names_do_all(kdf, fn, data) IAmiSSL->EVP_KDF_names_do_all((kdf), (fn), (data))
#define EVP_SIGNATURE_names_do_all(signature, fn, data) IAmiSSL->EVP_SIGNATURE_names_do_all((signature), (fn), (data))
#define OSSL_CMP_CTX_snprint_PKIStatus(ctx, buf, bufsize) IAmiSSL->OSSL_CMP_CTX_snprint_PKIStatus((ctx), (buf), (bufsize))
#define OSSL_CMP_HDR_get0_transactionID(hdr) IAmiSSL->OSSL_CMP_HDR_get0_transactionID((hdr))
#define OSSL_CMP_HDR_get0_recipNonce(hdr) IAmiSSL->OSSL_CMP_HDR_get0_recipNonce((hdr))
#define X509_LOOKUP_store() IAmiSSL->X509_LOOKUP_store()
#define X509_add_cert(sk, cert, flags) IAmiSSL->X509_add_cert((sk), (cert), (flags))
#define X509_add_certs(sk, certs, flags) IAmiSSL->X509_add_certs((sk), (certs), (flags))
#define X509_STORE_load_file(xs, file) IAmiSSL->X509_STORE_load_file((xs), (file))
#define X509_STORE_load_path(xs, path) IAmiSSL->X509_STORE_load_path((xs), (path))
#define X509_STORE_load_store(xs, store) IAmiSSL->X509_STORE_load_store((xs), (store))
#define EVP_PKEY_fromdata(ctx, ppkey, selection, params) IAmiSSL->EVP_PKEY_fromdata((ctx), (ppkey), (selection), (params))
#define EVP_ASYM_CIPHER_free(cipher) IAmiSSL->EVP_ASYM_CIPHER_free((cipher))
#define EVP_ASYM_CIPHER_up_ref(cipher) IAmiSSL->EVP_ASYM_CIPHER_up_ref((cipher))
#define EVP_ASYM_CIPHER_get0_provider(cipher) IAmiSSL->EVP_ASYM_CIPHER_get0_provider((cipher))
#define EVP_ASYM_CIPHER_fetch(ctx, algorithm, properties) IAmiSSL->EVP_ASYM_CIPHER_fetch((ctx), (algorithm), (properties))
#define EVP_ASYM_CIPHER_is_a(cipher, name) IAmiSSL->EVP_ASYM_CIPHER_is_a((cipher), (name))
#define EVP_ASYM_CIPHER_do_all_provided(libctx, fn, arg) IAmiSSL->EVP_ASYM_CIPHER_do_all_provided((libctx), (fn), (arg))
#define EVP_ASYM_CIPHER_names_do_all(cipher, fn, data) IAmiSSL->EVP_ASYM_CIPHER_names_do_all((cipher), (fn), (data))
#define EVP_PKEY_CTX_set_rsa_padding(ctx, pad_mode) IAmiSSL->EVP_PKEY_CTX_set_rsa_padding((ctx), (pad_mode))
#define EVP_PKEY_CTX_get_rsa_padding(ctx, pad_mode) IAmiSSL->EVP_PKEY_CTX_get_rsa_padding((ctx), (pad_mode))
#define EVP_PKEY_CTX_set_rsa_mgf1_md(ctx, md) IAmiSSL->EVP_PKEY_CTX_set_rsa_mgf1_md((ctx), (md))
#define EVP_PKEY_CTX_set_rsa_mgf1_md_name(ctx, mdname, mdprops) IAmiSSL->EVP_PKEY_CTX_set_rsa_mgf1_md_name((ctx), (mdname), (mdprops))
#define EVP_PKEY_CTX_get_rsa_mgf1_md(ctx, md) IAmiSSL->EVP_PKEY_CTX_get_rsa_mgf1_md((ctx), (md))
#define EVP_PKEY_CTX_set_rsa_oaep_md(ctx, md) IAmiSSL->EVP_PKEY_CTX_set_rsa_oaep_md((ctx), (md))
#define EVP_PKEY_CTX_set_rsa_oaep_md_name(ctx, mdname, mdprops) IAmiSSL->EVP_PKEY_CTX_set_rsa_oaep_md_name((ctx), (mdname), (mdprops))
#define EVP_PKEY_CTX_get_rsa_oaep_md(ctx, md) IAmiSSL->EVP_PKEY_CTX_get_rsa_oaep_md((ctx), (md))
#define EVP_PKEY_CTX_set0_rsa_oaep_label(ctx, label, llen) IAmiSSL->EVP_PKEY_CTX_set0_rsa_oaep_label((ctx), (label), (llen))
#define EVP_PKEY_CTX_get0_rsa_oaep_label(ctx, label) IAmiSSL->EVP_PKEY_CTX_get0_rsa_oaep_label((ctx), (label))
#define EVP_PKEY_CTX_get_rsa_mgf1_md_name(ctx, name, namelen) IAmiSSL->EVP_PKEY_CTX_get_rsa_mgf1_md_name((ctx), (name), (namelen))
#define EVP_PKEY_CTX_get_rsa_oaep_md_name(ctx, name, namelen) IAmiSSL->EVP_PKEY_CTX_get_rsa_oaep_md_name((ctx), (name), (namelen))
#define OSSL_ENCODER_up_ref(encoder) IAmiSSL->OSSL_ENCODER_up_ref((encoder))
#define OSSL_ENCODER_free(encoder) IAmiSSL->OSSL_ENCODER_free((encoder))
#define OSSL_ENCODER_fetch(libctx, name, properties) IAmiSSL->OSSL_ENCODER_fetch((libctx), (name), (properties))
#define OSSL_ENCODER_is_a(encoder, name) IAmiSSL->OSSL_ENCODER_is_a((encoder), (name))
#define OSSL_ENCODER_get0_provider(encoder) IAmiSSL->OSSL_ENCODER_get0_provider((encoder))
#define OSSL_ENCODER_do_all_provided(libctx, fn, arg) IAmiSSL->OSSL_ENCODER_do_all_provided((libctx), (fn), (arg))
#define OSSL_ENCODER_names_do_all(encoder, fn, data) IAmiSSL->OSSL_ENCODER_names_do_all((encoder), (fn), (data))
#define OSSL_ENCODER_settable_ctx_params(encoder) IAmiSSL->OSSL_ENCODER_settable_ctx_params((encoder))
#define OSSL_ENCODER_CTX_new() IAmiSSL->OSSL_ENCODER_CTX_new()
#define OSSL_ENCODER_CTX_set_params(ctx, params) IAmiSSL->OSSL_ENCODER_CTX_set_params((ctx), (params))
#define OSSL_ENCODER_CTX_free(ctx) IAmiSSL->OSSL_ENCODER_CTX_free((ctx))
#define OSSL_ENCODER_get0_properties(encoder) IAmiSSL->OSSL_ENCODER_get0_properties((encoder))
#define OSSL_ENCODER_to_bio(ctx, out) IAmiSSL->OSSL_ENCODER_to_bio((ctx), (out))
#define OSSL_ENCODER_CTX_new_for_pkey(pkey, selection, output_type, output_struct, propquery) IAmiSSL->OSSL_ENCODER_CTX_new_for_pkey((pkey), (selection), (output_type), (output_struct), (propquery))
#define OSSL_ENCODER_CTX_set_cipher(ctx, cipher_name, propquery) IAmiSSL->OSSL_ENCODER_CTX_set_cipher((ctx), (cipher_name), (propquery))
#define OSSL_ENCODER_CTX_set_passphrase(ctx, kstr, klen) IAmiSSL->OSSL_ENCODER_CTX_set_passphrase((ctx), (kstr), (klen))
#define OSSL_ENCODER_CTX_set_pem_password_cb(ctx, cb, cbarg) IAmiSSL->OSSL_ENCODER_CTX_set_pem_password_cb((ctx), (cb), (cbarg))
#define OSSL_ENCODER_CTX_set_passphrase_ui(ctx, ui_method, ui_data) IAmiSSL->OSSL_ENCODER_CTX_set_passphrase_ui((ctx), (ui_method), (ui_data))
#define PEM_read_bio_X509_PUBKEY(out, x, cb, u) IAmiSSL->PEM_read_bio_X509_PUBKEY((out), (x), (cb), (u))
#define PEM_write_bio_X509_PUBKEY(out, x) IAmiSSL->PEM_write_bio_X509_PUBKEY((out), (x))
#define d2i_X509_PUBKEY_bio(bp, xpk) IAmiSSL->d2i_X509_PUBKEY_bio((bp), (xpk))
#define i2d_X509_PUBKEY_bio(bp, xpk) IAmiSSL->i2d_X509_PUBKEY_bio((bp), (xpk))
#define X509_cmp_timeframe(vpm, start, end) IAmiSSL->X509_cmp_timeframe((vpm), (start), (end))
#define OSSL_CMP_MSG_get0_header(msg) IAmiSSL->OSSL_CMP_MSG_get0_header((msg))
#define OSSL_CMP_MSG_get_bodytype(msg) IAmiSSL->OSSL_CMP_MSG_get_bodytype((msg))
#define OSSL_CMP_MSG_update_transactionID(ctx, msg) IAmiSSL->OSSL_CMP_MSG_update_transactionID((ctx), (msg))
#define OSSL_CMP_CTX_setup_CRM(ctx, for_KUR, rid) IAmiSSL->OSSL_CMP_CTX_setup_CRM((ctx), (for_KUR), (rid))
#define BIO_f_prefix() IAmiSSL->BIO_f_prefix()
#define EVP_PKEY_CTX_new_from_name(libctx, name, propquery) IAmiSSL->EVP_PKEY_CTX_new_from_name((libctx), (name), (propquery))
#define EVP_PKEY_CTX_new_from_pkey(libctx, pkey, propquery) IAmiSSL->EVP_PKEY_CTX_new_from_pkey((libctx), (pkey), (propquery))
#define OSSL_SELF_TEST_set_callback(libctx, cb, cbarg) IAmiSSL->OSSL_SELF_TEST_set_callback((libctx), (cb), (cbarg))
#define OSSL_SELF_TEST_get_callback(libctx, cb, cbarg) IAmiSSL->OSSL_SELF_TEST_get_callback((libctx), (cb), (cbarg))
#define ASN1_TIME_dup(a) IAmiSSL->ASN1_TIME_dup((a))
#define ASN1_UTCTIME_dup(a) IAmiSSL->ASN1_UTCTIME_dup((a))
#define ASN1_GENERALIZEDTIME_dup(a) IAmiSSL->ASN1_GENERALIZEDTIME_dup((a))
#define RAND_priv_bytes_ex(ctx, buf, num, strength) IAmiSSL->RAND_priv_bytes_ex((ctx), (buf), (num), (strength))
#define RAND_bytes_ex(ctx, buf, num, strength) IAmiSSL->RAND_bytes_ex((ctx), (buf), (num), (strength))
#define EVP_PKEY_get_default_digest_name(pkey, mdname, mdname_sz) IAmiSSL->EVP_PKEY_get_default_digest_name((pkey), (mdname), (mdname_sz))
#define CMS_decrypt_set1_pkey_and_peer(cms, pk, cert, peer) IAmiSSL->CMS_decrypt_set1_pkey_and_peer((cms), (pk), (cert), (peer))
#define CMS_add1_recipient(cms, recip, originatorPrivKey, originator, flags) IAmiSSL->CMS_add1_recipient((cms), (recip), (originatorPrivKey), (originator), (flags))
#define CMS_RecipientInfo_kari_set0_pkey_and_peer(ri, pk, peer) IAmiSSL->CMS_RecipientInfo_kari_set0_pkey_and_peer((ri), (pk), (peer))
#define PKCS8_pkey_add1_attr(p8, attr) IAmiSSL->PKCS8_pkey_add1_attr((p8), (attr))
#define PKCS8_pkey_add1_attr_by_OBJ(p8, obj, type, bytes, len) IAmiSSL->PKCS8_pkey_add1_attr_by_OBJ((p8), (obj), (type), (bytes), (len))
#define EVP_PKEY_private_check(ctx) IAmiSSL->EVP_PKEY_private_check((ctx))
#define EVP_PKEY_pairwise_check(ctx) IAmiSSL->EVP_PKEY_pairwise_check((ctx))
#define ASN1_item_verify_ctx(it, alg, signature, data, ctx) IAmiSSL->ASN1_item_verify_ctx((it), (alg), (signature), (data), (ctx))
#define ASN1_item_sign_ex(it, algor1, algor2, signature, data, id, pkey, md, libctx, propq) IAmiSSL->ASN1_item_sign_ex((it), (algor1), (algor2), (signature), (data), (id), (pkey), (md), (libctx), (propq))
#define ASN1_item_verify_ex(it, alg, signature, data, id, pkey, libctx, propq) IAmiSSL->ASN1_item_verify_ex((it), (alg), (signature), (data), (id), (pkey), (libctx), (propq))
#define BIO_socket_wait(fd, for_read, max_time) IAmiSSL->BIO_socket_wait((fd), (for_read), (max_time))
#define BIO_wait(bio, max_time, nap_milliseconds) IAmiSSL->BIO_wait((bio), (max_time), (nap_milliseconds))
#define BIO_do_connect_retry(bio, timeout, nap_milliseconds) IAmiSSL->BIO_do_connect_retry((bio), (timeout), (nap_milliseconds))
#define OSSL_parse_url(url, pscheme, puser, phost, pport, pport_num, ppath, pquery, pfrag) IAmiSSL->OSSL_parse_url((url), (pscheme), (puser), (phost), (pport), (pport_num), (ppath), (pquery), (pfrag))
#define OSSL_HTTP_adapt_proxy(proxy, no_proxy, server, use_ssl) IAmiSSL->OSSL_HTTP_adapt_proxy((proxy), (no_proxy), (server), (use_ssl))
#define OSSL_HTTP_REQ_CTX_get_resp_len(rctx) IAmiSSL->OSSL_HTTP_REQ_CTX_get_resp_len((rctx))
#define OSSL_HTTP_REQ_CTX_set_expected(rctx, content_type, asn1, timeout, keep_alive) IAmiSSL->OSSL_HTTP_REQ_CTX_set_expected((rctx), (content_type), (asn1), (timeout), (keep_alive))
#define OSSL_HTTP_is_alive(rctx) IAmiSSL->OSSL_HTTP_is_alive((rctx))
#define OSSL_HTTP_open(server, port, proxy, no_proxy, use_ssl, bio, rbio, bio_update_fn, arg, buf_size, overall_timeout) IAmiSSL->OSSL_HTTP_open((server), (port), (proxy), (no_proxy), (use_ssl), (bio), (rbio), (bio_update_fn), (arg), (buf_size), (overall_timeout))
#define OSSL_HTTP_proxy_connect(bio, server, port, proxyuser, proxypass, timeout, bio_err, prog) IAmiSSL->OSSL_HTTP_proxy_connect((bio), (server), (port), (proxyuser), (proxypass), (timeout), (bio_err), (prog))
#define OSSL_HTTP_set1_request(rctx, path, headers, content_type, req, expected_content_type, expect_asn1, max_resp_len, timeout, keep_alive) IAmiSSL->OSSL_HTTP_set1_request((rctx), (path), (headers), (content_type), (req), (expected_content_type), (expect_asn1), (max_resp_len), (timeout), (keep_alive))
#define OSSL_HTTP_exchange(rctx, redirection_url) IAmiSSL->OSSL_HTTP_exchange((rctx), (redirection_url))
#define OSSL_HTTP_get_amiga_1(url, proxy, no_proxy, bio, rbio, bio_update_fn, moreargs) IAmiSSL->OSSL_HTTP_get_amiga_1((url), (proxy), (no_proxy), (bio), (rbio), (bio_update_fn), (moreargs))
#define OSSL_HTTP_get_amiga_2(arg, buf_size, headers, expected_content_type, expect_asn1, max_resp_len, timeout) IAmiSSL->OSSL_HTTP_get_amiga_2((arg), (buf_size), (headers), (expected_content_type), (expect_asn1), (max_resp_len), (timeout))
#define OSSL_HTTP_transfer_amiga_1(prctx, server, port, path, use_ssl, proxy, no_proxy, bio, rbio, bio_update_fn, moreargs) IAmiSSL->OSSL_HTTP_transfer_amiga_1((prctx), (server), (port), (path), (use_ssl), (proxy), (no_proxy), (bio), (rbio), (bio_update_fn), (moreargs))
#define OSSL_HTTP_transfer_amiga_2(arg, buf_size, headers, content_type, req, expected_content_type, expect_asn1, max_resp_len, timeout, keep_alive) IAmiSSL->OSSL_HTTP_transfer_amiga_2((arg), (buf_size), (headers), (content_type), (req), (expected_content_type), (expect_asn1), (max_resp_len), (timeout), (keep_alive))
#define OSSL_HTTP_close(rctx, ok) IAmiSSL->OSSL_HTTP_close((rctx), (ok))
#define ASN1_item_i2d_mem_bio(it, val) IAmiSSL->ASN1_item_i2d_mem_bio((it), (val))
#define ERR_add_error_txt(sepr, txt) IAmiSSL->ERR_add_error_txt((sepr), (txt))
#define ERR_add_error_mem_bio(sep, bio) IAmiSSL->ERR_add_error_mem_bio((sep), (bio))
#define X509_STORE_CTX_print_verify_cb(ok, ctx) IAmiSSL->X509_STORE_CTX_print_verify_cb((ok), (ctx))
#define X509_STORE_get1_all_certs(xs) IAmiSSL->X509_STORE_get1_all_certs((xs))
#define OSSL_CMP_validate_msg(ctx, msg) IAmiSSL->OSSL_CMP_validate_msg((ctx), (msg))
#define OSSL_CMP_validate_cert_path(ctx, trusted_store, cert) IAmiSSL->OSSL_CMP_validate_cert_path((ctx), (trusted_store), (cert))
#define EVP_PKEY_CTX_set_ecdh_cofactor_mode(ctx, cofactor_mode) IAmiSSL->EVP_PKEY_CTX_set_ecdh_cofactor_mode((ctx), (cofactor_mode))
#define EVP_PKEY_CTX_get_ecdh_cofactor_mode(ctx) IAmiSSL->EVP_PKEY_CTX_get_ecdh_cofactor_mode((ctx))
#define EVP_PKEY_CTX_set_ecdh_kdf_type(ctx, kdf) IAmiSSL->EVP_PKEY_CTX_set_ecdh_kdf_type((ctx), (kdf))
#define EVP_PKEY_CTX_get_ecdh_kdf_type(ctx) IAmiSSL->EVP_PKEY_CTX_get_ecdh_kdf_type((ctx))
#define EVP_PKEY_CTX_set_ecdh_kdf_md(ctx, md) IAmiSSL->EVP_PKEY_CTX_set_ecdh_kdf_md((ctx), (md))
#define EVP_PKEY_CTX_get_ecdh_kdf_md(ctx, md) IAmiSSL->EVP_PKEY_CTX_get_ecdh_kdf_md((ctx), (md))
#define EVP_PKEY_CTX_set_ecdh_kdf_outlen(ctx, len) IAmiSSL->EVP_PKEY_CTX_set_ecdh_kdf_outlen((ctx), (len))
#define EVP_PKEY_CTX_get_ecdh_kdf_outlen(ctx, len) IAmiSSL->EVP_PKEY_CTX_get_ecdh_kdf_outlen((ctx), (len))
#define EVP_PKEY_CTX_set0_ecdh_kdf_ukm(ctx, ukm, len) IAmiSSL->EVP_PKEY_CTX_set0_ecdh_kdf_ukm((ctx), (ukm), (len))
#define EVP_PKEY_CTX_get0_ecdh_kdf_ukm(ctx, ukm) IAmiSSL->EVP_PKEY_CTX_get0_ecdh_kdf_ukm((ctx), (ukm))
#define EVP_PKEY_CTX_set_rsa_pss_saltlen(ctx, saltlen) IAmiSSL->EVP_PKEY_CTX_set_rsa_pss_saltlen((ctx), (saltlen))
#define EVP_PKEY_CTX_get_rsa_pss_saltlen(ctx, saltlen) IAmiSSL->EVP_PKEY_CTX_get_rsa_pss_saltlen((ctx), (saltlen))
#define d2i_ISSUER_SIGN_TOOL(a, in, len) IAmiSSL->d2i_ISSUER_SIGN_TOOL((a), (in), (len))
#define i2d_ISSUER_SIGN_TOOL(a, out) IAmiSSL->i2d_ISSUER_SIGN_TOOL((a), (out))
#define ISSUER_SIGN_TOOL_free(a) IAmiSSL->ISSUER_SIGN_TOOL_free((a))
#define ISSUER_SIGN_TOOL_new() IAmiSSL->ISSUER_SIGN_TOOL_new()
#define ISSUER_SIGN_TOOL_it() IAmiSSL->ISSUER_SIGN_TOOL_it()
#define OSSL_SELF_TEST_new(cb, cbarg) IAmiSSL->OSSL_SELF_TEST_new((cb), (cbarg))
#define OSSL_SELF_TEST_free(st) IAmiSSL->OSSL_SELF_TEST_free((st))
#define OSSL_SELF_TEST_onbegin(st, type, desc) IAmiSSL->OSSL_SELF_TEST_onbegin((st), (type), (desc))
#define OSSL_SELF_TEST_oncorrupt_byte(st, bytes) IAmiSSL->OSSL_SELF_TEST_oncorrupt_byte((st), (bytes))
#define OSSL_SELF_TEST_onend(st, ret) IAmiSSL->OSSL_SELF_TEST_onend((st), (ret))
#define OSSL_PROVIDER_set_default_search_path(a, path) IAmiSSL->OSSL_PROVIDER_set_default_search_path((a), (path))
#define X509_digest_sig(cert, md_used, md_is_fallback) IAmiSSL->X509_digest_sig((cert), (md_used), (md_is_fallback))
#define OSSL_CMP_MSG_dup(a) IAmiSSL->OSSL_CMP_MSG_dup((a))
#define OSSL_CMP_ITAV_dup(a) IAmiSSL->OSSL_CMP_ITAV_dup((a))
#define d2i_OSSL_CMP_PKISI(a, in, len) IAmiSSL->d2i_OSSL_CMP_PKISI((a), (in), (len))
#define i2d_OSSL_CMP_PKISI(a, out) IAmiSSL->i2d_OSSL_CMP_PKISI((a), (out))
#define OSSL_CMP_PKISI_free(a) IAmiSSL->OSSL_CMP_PKISI_free((a))
#define OSSL_CMP_PKISI_new() IAmiSSL->OSSL_CMP_PKISI_new()
#define OSSL_CMP_PKISI_it() IAmiSSL->OSSL_CMP_PKISI_it()
#define OSSL_CMP_PKISI_dup(a) IAmiSSL->OSSL_CMP_PKISI_dup((a))
#define OSSL_CMP_snprint_PKIStatusInfo(statusInfo, buf, bufsize) IAmiSSL->OSSL_CMP_snprint_PKIStatusInfo((statusInfo), (buf), (bufsize))
#define OSSL_CMP_STATUSINFO_new(status, fail_info, text) IAmiSSL->OSSL_CMP_STATUSINFO_new((status), (fail_info), (text))
#define d2i_OSSL_CMP_MSG_bio(bio, msg) IAmiSSL->d2i_OSSL_CMP_MSG_bio((bio), (msg))
#define i2d_OSSL_CMP_MSG_bio(bio, msg) IAmiSSL->i2d_OSSL_CMP_MSG_bio((bio), (msg))
#define OSSL_CMP_SRV_process_request(srv_ctx, req) IAmiSSL->OSSL_CMP_SRV_process_request((srv_ctx), (req))
#define OSSL_CMP_CTX_server_perform(client_ctx, req) IAmiSSL->OSSL_CMP_CTX_server_perform((client_ctx), (req))
#define OSSL_CMP_SRV_CTX_new(libctx, propq) IAmiSSL->OSSL_CMP_SRV_CTX_new((libctx), (propq))
#define OSSL_CMP_SRV_CTX_free(srv_ctx) IAmiSSL->OSSL_CMP_SRV_CTX_free((srv_ctx))
#define OSSL_CMP_SRV_CTX_init(srv_ctx, custom_ctx, process_cert_request, process_rr, process_genm, process_error, process_certConf, process_pollReq) IAmiSSL->OSSL_CMP_SRV_CTX_init((srv_ctx), (custom_ctx), (process_cert_request), (process_rr), (process_genm), (process_error), (process_certConf), (process_pollReq))
#define OSSL_CMP_SRV_CTX_get0_cmp_ctx(srv_ctx) IAmiSSL->OSSL_CMP_SRV_CTX_get0_cmp_ctx((srv_ctx))
#define OSSL_CMP_SRV_CTX_get0_custom_ctx(srv_ctx) IAmiSSL->OSSL_CMP_SRV_CTX_get0_custom_ctx((srv_ctx))
#define OSSL_CMP_SRV_CTX_set_send_unprotected_errors(srv_ctx, val) IAmiSSL->OSSL_CMP_SRV_CTX_set_send_unprotected_errors((srv_ctx), (val))
#define OSSL_CMP_SRV_CTX_set_accept_unprotected(srv_ctx, val) IAmiSSL->OSSL_CMP_SRV_CTX_set_accept_unprotected((srv_ctx), (val))
#define OSSL_CMP_SRV_CTX_set_accept_raverified(srv_ctx, val) IAmiSSL->OSSL_CMP_SRV_CTX_set_accept_raverified((srv_ctx), (val))
#define OSSL_CMP_SRV_CTX_set_grant_implicit_confirm(srv_ctx, val) IAmiSSL->OSSL_CMP_SRV_CTX_set_grant_implicit_confirm((srv_ctx), (val))
#define OSSL_CMP_exec_certreq(ctx, req_type, crm) IAmiSSL->OSSL_CMP_exec_certreq((ctx), (req_type), (crm))
#define OSSL_CMP_try_certreq(ctx, req_type, crm, checkAfter) IAmiSSL->OSSL_CMP_try_certreq((ctx), (req_type), (crm), (checkAfter))
#define OSSL_CMP_certConf_cb(ctx, cert, fail_info, text) IAmiSSL->OSSL_CMP_certConf_cb((ctx), (cert), (fail_info), (text))
#define OSSL_CMP_exec_RR_ses(ctx) IAmiSSL->OSSL_CMP_exec_RR_ses((ctx))
#define OSSL_CMP_exec_GENM_ses(ctx) IAmiSSL->OSSL_CMP_exec_GENM_ses((ctx))
#define OSSL_CMP_MSG_http_perform(ctx, req) IAmiSSL->OSSL_CMP_MSG_http_perform((ctx), (req))
#define OSSL_CMP_MSG_read(file, libctx, propq) IAmiSSL->OSSL_CMP_MSG_read((file), (libctx), (propq))
#define OSSL_CMP_MSG_write(file, msg) IAmiSSL->OSSL_CMP_MSG_write((file), (msg))
#define EVP_PKEY_Q_vkeygen(libctx, propq, type, args) IAmiSSL->EVP_PKEY_Q_vkeygen((libctx), (propq), (type), (args))
#if (defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L) || (__GNUC__ >= 3)
#define EVP_PKEY_Q_keygen(libctx, propq, ...) IAmiSSL->EVP_PKEY_Q_keygen((libctx), (propq), __VA_ARGS__)
#elif (__GNUC__ == 2 && __GNUC_MINOR__ >= 95)
#define EVP_PKEY_Q_keygen(libctx, propq, vargs...) IAmiSSL->EVP_PKEY_Q_keygen(libctx, propq, vargs)
#endif
#define EVP_PKEY_generate(ctx, ppkey) IAmiSSL->EVP_PKEY_generate((ctx), (ppkey))
#define EVP_PKEY_CTX_set_rsa_keygen_bits(ctx, bits) IAmiSSL->EVP_PKEY_CTX_set_rsa_keygen_bits((ctx), (bits))
#define EVP_PKEY_CTX_set_rsa_keygen_pubexp(ctx, pubexp) IAmiSSL->EVP_PKEY_CTX_set_rsa_keygen_pubexp((ctx), (pubexp))
#define EVP_PKEY_CTX_set1_rsa_keygen_pubexp(ctx, pubexp) IAmiSSL->EVP_PKEY_CTX_set1_rsa_keygen_pubexp((ctx), (pubexp))
#define EVP_PKEY_CTX_set_rsa_keygen_primes(ctx, primes) IAmiSSL->EVP_PKEY_CTX_set_rsa_keygen_primes((ctx), (primes))
#define NCONF_new_ex(libctx, meth) IAmiSSL->NCONF_new_ex((libctx), (meth))
#define CONF_modules_load_file_ex(libctx, filename, appname, flags) IAmiSSL->CONF_modules_load_file_ex((libctx), (filename), (appname), (flags))
#define OSSL_LIB_CTX_load_config(ctx, config_file) IAmiSSL->OSSL_LIB_CTX_load_config((ctx), (config_file))
#define OSSL_PARAM_BLD_to_param(bld) IAmiSSL->OSSL_PARAM_BLD_to_param((bld))
#define OSSL_PARAM_BLD_push_int(bld, key, val) IAmiSSL->OSSL_PARAM_BLD_push_int((bld), (key), (val))
#define OSSL_PARAM_BLD_push_uint(bld, key, val) IAmiSSL->OSSL_PARAM_BLD_push_uint((bld), (key), (val))
#define OSSL_PARAM_BLD_push_long(bld, key, val) IAmiSSL->OSSL_PARAM_BLD_push_long((bld), (key), (val))
#define OSSL_PARAM_BLD_push_ulong(bld, key, val) IAmiSSL->OSSL_PARAM_BLD_push_ulong((bld), (key), (val))
#define OSSL_PARAM_BLD_push_int32(bld, key, val) IAmiSSL->OSSL_PARAM_BLD_push_int32((bld), (key), (val))
#define OSSL_PARAM_BLD_push_uint32(bld, key, val) IAmiSSL->OSSL_PARAM_BLD_push_uint32((bld), (key), (val))
#define OSSL_PARAM_BLD_push_int64(bld, key, val) IAmiSSL->OSSL_PARAM_BLD_push_int64((bld), (key), (val))
#define OSSL_PARAM_BLD_push_uint64(bld, key, val) IAmiSSL->OSSL_PARAM_BLD_push_uint64((bld), (key), (val))
#define OSSL_PARAM_BLD_push_size_t(bld, key, val) IAmiSSL->OSSL_PARAM_BLD_push_size_t((bld), (key), (val))
#define OSSL_PARAM_BLD_push_double(bld, key, val) IAmiSSL->OSSL_PARAM_BLD_push_double((bld), (key), (val))
#define OSSL_PARAM_BLD_push_BN(bld, key, bn) IAmiSSL->OSSL_PARAM_BLD_push_BN((bld), (key), (bn))
#define OSSL_PARAM_BLD_push_BN_pad(bld, key, bn, sz) IAmiSSL->OSSL_PARAM_BLD_push_BN_pad((bld), (key), (bn), (sz))
#define OSSL_PARAM_BLD_push_utf8_string(bld, key, buf, bsize) IAmiSSL->OSSL_PARAM_BLD_push_utf8_string((bld), (key), (buf), (bsize))
#define OSSL_PARAM_BLD_push_utf8_ptr(bld, key, buf, bsize) IAmiSSL->OSSL_PARAM_BLD_push_utf8_ptr((bld), (key), (buf), (bsize))
#define OSSL_PARAM_BLD_push_octet_string(bld, key, buf, bsize) IAmiSSL->OSSL_PARAM_BLD_push_octet_string((bld), (key), (buf), (bsize))
#define OSSL_PARAM_BLD_push_octet_ptr(bld, key, buf, bsize) IAmiSSL->OSSL_PARAM_BLD_push_octet_ptr((bld), (key), (buf), (bsize))
#define OSSL_PARAM_BLD_new() IAmiSSL->OSSL_PARAM_BLD_new()
#define OSSL_PARAM_BLD_free(bld) IAmiSSL->OSSL_PARAM_BLD_free((bld))
#define EVP_PKEY_set_type_by_keymgmt(pkey, keymgmt) IAmiSSL->EVP_PKEY_set_type_by_keymgmt((pkey), (keymgmt))
#define OCSP_RESPID_set_by_key_ex(respid, cert, libctx, propq) IAmiSSL->OCSP_RESPID_set_by_key_ex((respid), (cert), (libctx), (propq))
#define OCSP_RESPID_match_ex(respid, cert, libctx, propq) IAmiSSL->OCSP_RESPID_match_ex((respid), (cert), (libctx), (propq))
#define SRP_create_verifier_ex(user, pass, salt, verifier, N, g, libctx, propq) IAmiSSL->SRP_create_verifier_ex((user), (pass), (salt), (verifier), (N), (g), (libctx), (propq))
#define SRP_create_verifier_BN_ex(user, pass, salt, verifier, N, g, libctx, propq) IAmiSSL->SRP_create_verifier_BN_ex((user), (pass), (salt), (verifier), (N), (g), (libctx), (propq))
#define SRP_Calc_B_ex(b, N, g, v, libctx, propq) IAmiSSL->SRP_Calc_B_ex((b), (N), (g), (v), (libctx), (propq))
#define SRP_Calc_u_ex(A, B, N, libctx, propq) IAmiSSL->SRP_Calc_u_ex((A), (B), (N), (libctx), (propq))
#define SRP_Calc_x_ex(s, user, pass, libctx, propq) IAmiSSL->SRP_Calc_x_ex((s), (user), (pass), (libctx), (propq))
#define SRP_Calc_client_key_ex(N, B, g, x, a, u, libctx, propq) IAmiSSL->SRP_Calc_client_key_ex((N), (B), (g), (x), (a), (u), (libctx), (propq))
#define EVP_PKEY_gettable_params(pkey) IAmiSSL->EVP_PKEY_gettable_params((pkey))
#define EVP_PKEY_get_int_param(pkey, key_name, out) IAmiSSL->EVP_PKEY_get_int_param((pkey), (key_name), (out))
#define EVP_PKEY_get_size_t_param(pkey, key_name, out) IAmiSSL->EVP_PKEY_get_size_t_param((pkey), (key_name), (out))
#define EVP_PKEY_get_bn_param(pkey, key_name, bn) IAmiSSL->EVP_PKEY_get_bn_param((pkey), (key_name), (bn))
#define EVP_PKEY_get_utf8_string_param(pkey, key_name, str, max_buf_sz, out_sz) IAmiSSL->EVP_PKEY_get_utf8_string_param((pkey), (key_name), (str), (max_buf_sz), (out_sz))
#define EVP_PKEY_get_octet_string_param(pkey, key_name, buf, max_buf_sz, out_sz) IAmiSSL->EVP_PKEY_get_octet_string_param((pkey), (key_name), (buf), (max_buf_sz), (out_sz))
#define EVP_PKEY_is_a(pkey, name) IAmiSSL->EVP_PKEY_is_a((pkey), (name))
#define EVP_PKEY_can_sign(pkey) IAmiSSL->EVP_PKEY_can_sign((pkey))
#define X509_STORE_CTX_new_ex(libctx, propq) IAmiSSL->X509_STORE_CTX_new_ex((libctx), (propq))
#define X509_STORE_CTX_verify(ctx) IAmiSSL->X509_STORE_CTX_verify((ctx))
#define CT_POLICY_EVAL_CTX_new_ex(libctx, propq) IAmiSSL->CT_POLICY_EVAL_CTX_new_ex((libctx), (propq))
#define CTLOG_new_ex(public_key, name, libctx, propq) IAmiSSL->CTLOG_new_ex((public_key), (name), (libctx), (propq))
#define CTLOG_new_from_base64_ex(ct_log, pkey_base64, name, libctx, propq) IAmiSSL->CTLOG_new_from_base64_ex((ct_log), (pkey_base64), (name), (libctx), (propq))
#define CTLOG_STORE_new_ex(libctx, propq) IAmiSSL->CTLOG_STORE_new_ex((libctx), (propq))
#define EVP_PKEY_set_ex_data(key, idx, arg) IAmiSSL->EVP_PKEY_set_ex_data((key), (idx), (arg))
#define EVP_PKEY_get_ex_data(key, idx) IAmiSSL->EVP_PKEY_get_ex_data((key), (idx))
#define EVP_PKEY_CTX_set_group_name(ctx, name) IAmiSSL->EVP_PKEY_CTX_set_group_name((ctx), (name))
#define EVP_PKEY_CTX_get_group_name(ctx, name, namelen) IAmiSSL->EVP_PKEY_CTX_get_group_name((ctx), (name), (namelen))
#define EVP_PKEY_CTX_set_ec_paramgen_curve_nid(ctx, nid) IAmiSSL->EVP_PKEY_CTX_set_ec_paramgen_curve_nid((ctx), (nid))
#define d2i_PrivateKey_ex(type, a, pp, length, libctx, propq) IAmiSSL->d2i_PrivateKey_ex((type), (a), (pp), (length), (libctx), (propq))
#define d2i_AutoPrivateKey_ex(a, pp, length, libctx, propq) IAmiSSL->d2i_AutoPrivateKey_ex((a), (pp), (length), (libctx), (propq))
#define d2i_PrivateKey_ex_bio(bp, a, libctx, propq) IAmiSSL->d2i_PrivateKey_ex_bio((bp), (a), (libctx), (propq))
#define PEM_read_bio_PrivateKey_ex(out, x, cb, u, libctx, propq) IAmiSSL->PEM_read_bio_PrivateKey_ex((out), (x), (cb), (u), (libctx), (propq))
#define EVP_PKEY_CTX_set_dsa_paramgen_bits(ctx, nbits) IAmiSSL->EVP_PKEY_CTX_set_dsa_paramgen_bits((ctx), (nbits))
#define EVP_PKEY_CTX_set_dsa_paramgen_q_bits(ctx, qbits) IAmiSSL->EVP_PKEY_CTX_set_dsa_paramgen_q_bits((ctx), (qbits))
#define EVP_PKEY_CTX_set_dsa_paramgen_md_props(ctx, md_name, md_properties) IAmiSSL->EVP_PKEY_CTX_set_dsa_paramgen_md_props((ctx), (md_name), (md_properties))
#define EVP_PKEY_CTX_set_dsa_paramgen_gindex(ctx, gindex) IAmiSSL->EVP_PKEY_CTX_set_dsa_paramgen_gindex((ctx), (gindex))
#define EVP_PKEY_CTX_set_dsa_paramgen_type(ctx, name) IAmiSSL->EVP_PKEY_CTX_set_dsa_paramgen_type((ctx), (name))
#define EVP_PKEY_CTX_set_dsa_paramgen_seed(ctx, seed, seedlen) IAmiSSL->EVP_PKEY_CTX_set_dsa_paramgen_seed((ctx), (seed), (seedlen))
#define EVP_PKEY_CTX_set_dsa_paramgen_md(ctx, md) IAmiSSL->EVP_PKEY_CTX_set_dsa_paramgen_md((ctx), (md))
#define EVP_PKEY_CTX_set_dh_paramgen_type(ctx, typ) IAmiSSL->EVP_PKEY_CTX_set_dh_paramgen_type((ctx), (typ))
#define EVP_PKEY_CTX_set_dh_paramgen_gindex(ctx, gindex) IAmiSSL->EVP_PKEY_CTX_set_dh_paramgen_gindex((ctx), (gindex))
#define EVP_PKEY_CTX_set_dh_paramgen_seed(ctx, seed, seedlen) IAmiSSL->EVP_PKEY_CTX_set_dh_paramgen_seed((ctx), (seed), (seedlen))
#define EVP_PKEY_CTX_set_dh_paramgen_prime_len(ctx, pbits) IAmiSSL->EVP_PKEY_CTX_set_dh_paramgen_prime_len((ctx), (pbits))
#define EVP_PKEY_CTX_set_dh_paramgen_subprime_len(ctx, qlen) IAmiSSL->EVP_PKEY_CTX_set_dh_paramgen_subprime_len((ctx), (qlen))
#define EVP_PKEY_CTX_set_dh_paramgen_generator(ctx, gen) IAmiSSL->EVP_PKEY_CTX_set_dh_paramgen_generator((ctx), (gen))
#define EVP_PKEY_CTX_set_dh_nid(ctx, nid) IAmiSSL->EVP_PKEY_CTX_set_dh_nid((ctx), (nid))
#define EVP_PKEY_CTX_set_dh_rfc5114(ctx, gen) IAmiSSL->EVP_PKEY_CTX_set_dh_rfc5114((ctx), (gen))
#define EVP_PKEY_CTX_set_dhx_rfc5114(ctx, gen) IAmiSSL->EVP_PKEY_CTX_set_dhx_rfc5114((ctx), (gen))
#define X509_VERIFY_PARAM_get0_host(param, idx) IAmiSSL->X509_VERIFY_PARAM_get0_host((param), (idx))
#define X509_VERIFY_PARAM_get0_email(param) IAmiSSL->X509_VERIFY_PARAM_get0_email((param))
#define X509_VERIFY_PARAM_get1_ip_asc(param) IAmiSSL->X509_VERIFY_PARAM_get1_ip_asc((param))
#define OSSL_PARAM_modified(p) IAmiSSL->OSSL_PARAM_modified((p))
#define OSSL_PARAM_set_all_unmodified(p) IAmiSSL->OSSL_PARAM_set_all_unmodified((p))
#define EVP_RAND_fetch(libctx, algorithm, properties) IAmiSSL->EVP_RAND_fetch((libctx), (algorithm), (properties))
#define EVP_RAND_up_ref(rand) IAmiSSL->EVP_RAND_up_ref((rand))
#define EVP_RAND_free(rand) IAmiSSL->EVP_RAND_free((rand))
#define EVP_RAND_get0_name(rand) IAmiSSL->EVP_RAND_get0_name((rand))
#define EVP_RAND_is_a(rand, name) IAmiSSL->EVP_RAND_is_a((rand), (name))
#define EVP_RAND_get0_provider(rand) IAmiSSL->EVP_RAND_get0_provider((rand))
#define EVP_RAND_get_params(rand, params) IAmiSSL->EVP_RAND_get_params((rand), (params))
#define EVP_RAND_CTX_new(rand, parent) IAmiSSL->EVP_RAND_CTX_new((rand), (parent))
#define EVP_RAND_CTX_free(ctx) IAmiSSL->EVP_RAND_CTX_free((ctx))
#define EVP_RAND_CTX_get0_rand(ctx) IAmiSSL->EVP_RAND_CTX_get0_rand((ctx))
#define EVP_RAND_CTX_get_params(ctx, params) IAmiSSL->EVP_RAND_CTX_get_params((ctx), (params))
#define EVP_RAND_CTX_set_params(ctx, params) IAmiSSL->EVP_RAND_CTX_set_params((ctx), (params))
#define EVP_RAND_gettable_params(rand) IAmiSSL->EVP_RAND_gettable_params((rand))
#define EVP_RAND_gettable_ctx_params(rand) IAmiSSL->EVP_RAND_gettable_ctx_params((rand))
#define EVP_RAND_settable_ctx_params(rand) IAmiSSL->EVP_RAND_settable_ctx_params((rand))
#define EVP_RAND_do_all_provided(libctx, fn, arg) IAmiSSL->EVP_RAND_do_all_provided((libctx), (fn), (arg))
#define EVP_RAND_names_do_all(rand, fn, data) IAmiSSL->EVP_RAND_names_do_all((rand), (fn), (data))
#define EVP_RAND_instantiate(ctx, strength, prediction_resistance, pstr, pstr_len, params) IAmiSSL->EVP_RAND_instantiate((ctx), (strength), (prediction_resistance), (pstr), (pstr_len), (params))
#define EVP_RAND_uninstantiate(ctx) IAmiSSL->EVP_RAND_uninstantiate((ctx))
#define EVP_RAND_generate(ctx, out, outlen, strength, prediction_resistance, addin, addin_len) IAmiSSL->EVP_RAND_generate((ctx), (out), (outlen), (strength), (prediction_resistance), (addin), (addin_len))
#define EVP_RAND_reseed(ctx, prediction_resistance, ent, ent_len, addin, addin_len) IAmiSSL->EVP_RAND_reseed((ctx), (prediction_resistance), (ent), (ent_len), (addin), (addin_len))
#define EVP_RAND_nonce(ctx, out, outlen) IAmiSSL->EVP_RAND_nonce((ctx), (out), (outlen))
#define EVP_RAND_enable_locking(ctx) IAmiSSL->EVP_RAND_enable_locking((ctx))
#define EVP_RAND_verify_zeroization(ctx) IAmiSSL->EVP_RAND_verify_zeroization((ctx))
#define EVP_RAND_get_strength(ctx) IAmiSSL->EVP_RAND_get_strength((ctx))
#define EVP_RAND_get_state(ctx) IAmiSSL->EVP_RAND_get_state((ctx))
#define EVP_default_properties_is_fips_enabled(libctx) IAmiSSL->EVP_default_properties_is_fips_enabled((libctx))
#define EVP_default_properties_enable_fips(libctx, enable) IAmiSSL->EVP_default_properties_enable_fips((libctx), (enable))
#define EVP_PKEY_new_raw_private_key_ex(libctx, keytype, propq, priv, len) IAmiSSL->EVP_PKEY_new_raw_private_key_ex((libctx), (keytype), (propq), (priv), (len))
#define EVP_PKEY_new_raw_public_key_ex(libctx, keytype, propq, pub, len) IAmiSSL->EVP_PKEY_new_raw_public_key_ex((libctx), (keytype), (propq), (pub), (len))
#define OSSL_PARAM_BLD_push_time_t(bld, key, val) IAmiSSL->OSSL_PARAM_BLD_push_time_t((bld), (key), (val))
#define OSSL_PARAM_construct_time_t_amiga(result, key, buf) IAmiSSL->OSSL_PARAM_construct_time_t_amiga((result), (key), (buf))
#define OSSL_PARAM_get_time_t(p, val) IAmiSSL->OSSL_PARAM_get_time_t((p), (val))
#define OSSL_PARAM_set_time_t(p, val) IAmiSSL->OSSL_PARAM_set_time_t((p), (val))
#define OSSL_STORE_attach(bio, scheme, libctx, propq, ui_method, ui_data, params, post_process, post_process_data) IAmiSSL->OSSL_STORE_attach((bio), (scheme), (libctx), (propq), (ui_method), (ui_data), (params), (post_process), (post_process_data))
#define OSSL_STORE_LOADER_set_attach(loader, attach_function) IAmiSSL->OSSL_STORE_LOADER_set_attach((loader), (attach_function))
#define EVP_PKEY_CTX_set_rsa_pss_keygen_saltlen(ctx, saltlen) IAmiSSL->EVP_PKEY_CTX_set_rsa_pss_keygen_saltlen((ctx), (saltlen))
#define EVP_PKEY_CTX_set_rsa_pss_keygen_mgf1_md(ctx, md) IAmiSSL->EVP_PKEY_CTX_set_rsa_pss_keygen_mgf1_md((ctx), (md))
#define EVP_PKEY_CTX_set_rsa_pss_keygen_mgf1_md_name(ctx, mdname) IAmiSSL->EVP_PKEY_CTX_set_rsa_pss_keygen_mgf1_md_name((ctx), (mdname))
#define OSSL_PROVIDER_do_all(ctx, cb, cbdata) IAmiSSL->OSSL_PROVIDER_do_all((ctx), (cb), (cbdata))
#define EC_GROUP_get_field_type(group) IAmiSSL->EC_GROUP_get_field_type((group))
#define X509_PUBKEY_eq(a, b) IAmiSSL->X509_PUBKEY_eq((a), (b))
#define EVP_PKEY_eq(a, b) IAmiSSL->EVP_PKEY_eq((a), (b))
#define EVP_PKEY_parameters_eq(a, b) IAmiSSL->EVP_PKEY_parameters_eq((a), (b))
#define OSSL_PROVIDER_query_operation(prov, operation_id, no_cache) IAmiSSL->OSSL_PROVIDER_query_operation((prov), (operation_id), (no_cache))
#define OSSL_PROVIDER_unquery_operation(prov, operation_id, algs) IAmiSSL->OSSL_PROVIDER_unquery_operation((prov), (operation_id), (algs))
#define OSSL_PROVIDER_get0_provider_ctx(prov) IAmiSSL->OSSL_PROVIDER_get0_provider_ctx((prov))
#define OSSL_PROVIDER_get_capabilities(prov, capability, cb, arg) IAmiSSL->OSSL_PROVIDER_get_capabilities((prov), (capability), (cb), (arg))
#define EC_GROUP_new_by_curve_name_ex(libctx, propq, nid) IAmiSSL->EC_GROUP_new_by_curve_name_ex((libctx), (propq), (nid))
#define EC_KEY_new_ex(ctx, propq) IAmiSSL->EC_KEY_new_ex((ctx), (propq))
#define EC_KEY_new_by_curve_name_ex(ctx, propq, nid) IAmiSSL->EC_KEY_new_by_curve_name_ex((ctx), (propq), (nid))
#define OSSL_LIB_CTX_set0_default(libctx) IAmiSSL->OSSL_LIB_CTX_set0_default((libctx))
#define PEM_X509_INFO_read_bio_ex(bp, sk, cb, u, libctx, propq) IAmiSSL->PEM_X509_INFO_read_bio_ex((bp), (sk), (cb), (u), (libctx), (propq))
#define X509_REQ_verify_ex(a, r, libctx, propq) IAmiSSL->X509_REQ_verify_ex((a), (r), (libctx), (propq))
#define X509_new_ex(libctx, propq) IAmiSSL->X509_new_ex((libctx), (propq))
#define X509_LOOKUP_ctrl_ex(ctx, cmd, argc, argl, ret, libctx, propq) IAmiSSL->X509_LOOKUP_ctrl_ex((ctx), (cmd), (argc), (argl), (ret), (libctx), (propq))
#define X509_load_cert_file_ex(ctx, file, type, libctx, propq) IAmiSSL->X509_load_cert_file_ex((ctx), (file), (type), (libctx), (propq))
#define X509_load_cert_crl_file_ex(ctx, file, type, libctx, propq) IAmiSSL->X509_load_cert_crl_file_ex((ctx), (file), (type), (libctx), (propq))
#define X509_LOOKUP_by_subject_ex(ctx, type, name, ret, libctx, propq) IAmiSSL->X509_LOOKUP_by_subject_ex((ctx), (type), (name), (ret), (libctx), (propq))
#define X509_STORE_load_file_ex(xs, file, libctx, propq) IAmiSSL->X509_STORE_load_file_ex((xs), (file), (libctx), (propq))
#define X509_STORE_load_store_ex(xs, store, libctx, propq) IAmiSSL->X509_STORE_load_store_ex((xs), (store), (libctx), (propq))
#define X509_STORE_load_locations_ex(xs, file, dir, libctx, propq) IAmiSSL->X509_STORE_load_locations_ex((xs), (file), (dir), (libctx), (propq))
#define X509_STORE_set_default_paths_ex(xs, libctx, propq) IAmiSSL->X509_STORE_set_default_paths_ex((xs), (libctx), (propq))
#define X509_build_chain(target, certs, store, with_self_signed, libctx, propq) IAmiSSL->X509_build_chain((target), (certs), (store), (with_self_signed), (libctx), (propq))
#define X509V3_set_issuer_pkey(ctx, pkey) IAmiSSL->X509V3_set_issuer_pkey((ctx), (pkey))
#define i2s_ASN1_UTF8STRING(method, utf8) IAmiSSL->i2s_ASN1_UTF8STRING((method), (utf8))
#define s2i_ASN1_UTF8STRING(method, ctx, str) IAmiSSL->s2i_ASN1_UTF8STRING((method), (ctx), (str))
#define OSSL_STORE_open_ex(uri, libctx, propq, ui_method, ui_data, params, post_process, post_process_data) IAmiSSL->OSSL_STORE_open_ex((uri), (libctx), (propq), (ui_method), (ui_data), (params), (post_process), (post_process_data))
#define OSSL_DECODER_fetch(libctx, name, properties) IAmiSSL->OSSL_DECODER_fetch((libctx), (name), (properties))
#define OSSL_DECODER_up_ref(encoder) IAmiSSL->OSSL_DECODER_up_ref((encoder))
#define OSSL_DECODER_free(encoder) IAmiSSL->OSSL_DECODER_free((encoder))
#define OSSL_DECODER_get0_provider(encoder) IAmiSSL->OSSL_DECODER_get0_provider((encoder))
#define OSSL_DECODER_get0_properties(encoder) IAmiSSL->OSSL_DECODER_get0_properties((encoder))
#define OSSL_DECODER_is_a(encoder, name) IAmiSSL->OSSL_DECODER_is_a((encoder), (name))
#define OSSL_DECODER_do_all_provided(libctx, fn, arg) IAmiSSL->OSSL_DECODER_do_all_provided((libctx), (fn), (arg))
#define OSSL_DECODER_names_do_all(encoder, fn, data) IAmiSSL->OSSL_DECODER_names_do_all((encoder), (fn), (data))
#define OSSL_DECODER_settable_ctx_params(encoder) IAmiSSL->OSSL_DECODER_settable_ctx_params((encoder))
#define OSSL_DECODER_CTX_new() IAmiSSL->OSSL_DECODER_CTX_new()
#define OSSL_DECODER_CTX_set_params(ctx, params) IAmiSSL->OSSL_DECODER_CTX_set_params((ctx), (params))
#define OSSL_DECODER_CTX_free(ctx) IAmiSSL->OSSL_DECODER_CTX_free((ctx))
#define OSSL_DECODER_CTX_set_passphrase(ctx, kstr, klen) IAmiSSL->OSSL_DECODER_CTX_set_passphrase((ctx), (kstr), (klen))
#define OSSL_DECODER_CTX_set_pem_password_cb(ctx, cb, cbarg) IAmiSSL->OSSL_DECODER_CTX_set_pem_password_cb((ctx), (cb), (cbarg))
#define OSSL_DECODER_CTX_set_passphrase_ui(ctx, ui_method, ui_data) IAmiSSL->OSSL_DECODER_CTX_set_passphrase_ui((ctx), (ui_method), (ui_data))
#define OSSL_DECODER_from_bio(ctx, in) IAmiSSL->OSSL_DECODER_from_bio((ctx), (in))
#define OSSL_DECODER_CTX_add_decoder(ctx, decoder) IAmiSSL->OSSL_DECODER_CTX_add_decoder((ctx), (decoder))
#define OSSL_DECODER_CTX_add_extra(ctx, libctx, propq) IAmiSSL->OSSL_DECODER_CTX_add_extra((ctx), (libctx), (propq))
#define OSSL_DECODER_CTX_get_num_decoders(ctx) IAmiSSL->OSSL_DECODER_CTX_get_num_decoders((ctx))
#define OSSL_DECODER_CTX_set_input_type(ctx, input_type) IAmiSSL->OSSL_DECODER_CTX_set_input_type((ctx), (input_type))
#define OSSL_DECODER_export(decoder_inst, reference, reference_sz, export_cb, export_cbarg) IAmiSSL->OSSL_DECODER_export((decoder_inst), (reference), (reference_sz), (export_cb), (export_cbarg))
#define OSSL_DECODER_INSTANCE_get_decoder(decoder_inst) IAmiSSL->OSSL_DECODER_INSTANCE_get_decoder((decoder_inst))
#define OSSL_DECODER_INSTANCE_get_decoder_ctx(decoder_inst) IAmiSSL->OSSL_DECODER_INSTANCE_get_decoder_ctx((decoder_inst))
#define OSSL_DECODER_gettable_params(decoder) IAmiSSL->OSSL_DECODER_gettable_params((decoder))
#define OSSL_DECODER_get_params(decoder, params) IAmiSSL->OSSL_DECODER_get_params((decoder), (params))
#define OSSL_DECODER_CTX_new_for_pkey(pkey, input_type, input_struct, keytype, selection, libctx, propquery) IAmiSSL->OSSL_DECODER_CTX_new_for_pkey((pkey), (input_type), (input_struct), (keytype), (selection), (libctx), (propquery))
#define OSSL_DECODER_CTX_set_construct(ctx, construct) IAmiSSL->OSSL_DECODER_CTX_set_construct((ctx), (construct))
#define OSSL_DECODER_CTX_set_construct_data(ctx, construct_data) IAmiSSL->OSSL_DECODER_CTX_set_construct_data((ctx), (construct_data))
#define OSSL_DECODER_CTX_set_cleanup(ctx, cleanup) IAmiSSL->OSSL_DECODER_CTX_set_cleanup((ctx), (cleanup))
#define OSSL_DECODER_CTX_get_construct(ctx) IAmiSSL->OSSL_DECODER_CTX_get_construct((ctx))
#define OSSL_DECODER_CTX_get_construct_data(ctx) IAmiSSL->OSSL_DECODER_CTX_get_construct_data((ctx))
#define OSSL_DECODER_CTX_get_cleanup(ctx) IAmiSSL->OSSL_DECODER_CTX_get_cleanup((ctx))
#define RAND_get0_primary(ctx) IAmiSSL->RAND_get0_primary((ctx))
#define RAND_get0_public(ctx) IAmiSSL->RAND_get0_public((ctx))
#define RAND_get0_private(ctx) IAmiSSL->RAND_get0_private((ctx))
#define PKCS12_SAFEBAG_get0_bag_obj(bag) IAmiSSL->PKCS12_SAFEBAG_get0_bag_obj((bag))
#define PKCS12_SAFEBAG_get0_bag_type(bag) IAmiSSL->PKCS12_SAFEBAG_get0_bag_type((bag))
#define PKCS12_SAFEBAG_create_secret(type, vtype, value, len) IAmiSSL->PKCS12_SAFEBAG_create_secret((type), (vtype), (value), (len))
#define PKCS12_add1_attr_by_NID(bag, nid, type, bytes, len) IAmiSSL->PKCS12_add1_attr_by_NID((bag), (nid), (type), (bytes), (len))
#define PKCS12_add1_attr_by_txt(bag, attrname, type, bytes, len) IAmiSSL->PKCS12_add1_attr_by_txt((bag), (attrname), (type), (bytes), (len))
#define PKCS12_add_secret(pbags, nid_type, value, len) IAmiSSL->PKCS12_add_secret((pbags), (nid_type), (value), (len))
#define SMIME_write_ASN1_ex(bio, val, data, flags, ctype_nid, econt_nid, mdalgs, it, libctx, propq) IAmiSSL->SMIME_write_ASN1_ex((bio), (val), (data), (flags), (ctype_nid), (econt_nid), (mdalgs), (it), (libctx), (propq))
#define SMIME_read_ASN1_ex(bio, flags, bcont, it, x, libctx, propq) IAmiSSL->SMIME_read_ASN1_ex((bio), (flags), (bcont), (it), (x), (libctx), (propq))
#define CMS_ContentInfo_new_ex(libctx, propq) IAmiSSL->CMS_ContentInfo_new_ex((libctx), (propq))
#define SMIME_read_CMS_ex(bio, flags, bcont, ci) IAmiSSL->SMIME_read_CMS_ex((bio), (flags), (bcont), (ci))
#define CMS_sign_ex(signcert, pkey, certs, data, flags, libctx, propq) IAmiSSL->CMS_sign_ex((signcert), (pkey), (certs), (data), (flags), (libctx), (propq))
#define CMS_data_create_ex(in, flags, libctx, propq) IAmiSSL->CMS_data_create_ex((in), (flags), (libctx), (propq))
#define CMS_digest_create_ex(in, md, flags, libctx, propq) IAmiSSL->CMS_digest_create_ex((in), (md), (flags), (libctx), (propq))
#define CMS_EncryptedData_encrypt_ex(in, cipher, key, keylen, flags, libctx, propq) IAmiSSL->CMS_EncryptedData_encrypt_ex((in), (cipher), (key), (keylen), (flags), (libctx), (propq))
#define CMS_encrypt_ex(certs, in, cipher, flags, libctx, propq) IAmiSSL->CMS_encrypt_ex((certs), (in), (cipher), (flags), (libctx), (propq))
#define CMS_EnvelopedData_create_ex(cipher, libctx, propq) IAmiSSL->CMS_EnvelopedData_create_ex((cipher), (libctx), (propq))
#define CMS_ReceiptRequest_create0_ex(id, idlen, allorfirst, receiptList, receiptsTo, libctx) IAmiSSL->CMS_ReceiptRequest_create0_ex((id), (idlen), (allorfirst), (receiptList), (receiptsTo), (libctx))
#define EVP_SignFinal_ex(ctx, md, s, pkey, libctx, propq) IAmiSSL->EVP_SignFinal_ex((ctx), (md), (s), (pkey), (libctx), (propq))
#define EVP_VerifyFinal_ex(ctx, sigbuf, siglen, pkey, libctx, propq) IAmiSSL->EVP_VerifyFinal_ex((ctx), (sigbuf), (siglen), (pkey), (libctx), (propq))
#define EVP_DigestSignInit_ex(ctx, pctx, mdname, libctx, props, pkey, params) IAmiSSL->EVP_DigestSignInit_ex((ctx), (pctx), (mdname), (libctx), (props), (pkey), (params))
#define EVP_DigestVerifyInit_ex(ctx, pctx, mdname, libctx, props, pkey, params) IAmiSSL->EVP_DigestVerifyInit_ex((ctx), (pctx), (mdname), (libctx), (props), (pkey), (params))
#define PKCS7_new_ex(libctx, propq) IAmiSSL->PKCS7_new_ex((libctx), (propq))
#define PKCS7_sign_ex(signcert, pkey, certs, data, flags, libctx, propq) IAmiSSL->PKCS7_sign_ex((signcert), (pkey), (certs), (data), (flags), (libctx), (propq))
#define PKCS7_encrypt_ex(certs, in, cipher, flags, libctx, propq) IAmiSSL->PKCS7_encrypt_ex((certs), (in), (cipher), (flags), (libctx), (propq))
#define SMIME_read_PKCS7_ex(bio, bcont, p7) IAmiSSL->SMIME_read_PKCS7_ex((bio), (bcont), (p7))
#define OSSL_PROVIDER_self_test(prov) IAmiSSL->OSSL_PROVIDER_self_test((prov))
#define EVP_PKEY_CTX_set_tls1_prf_md(ctx, md) IAmiSSL->EVP_PKEY_CTX_set_tls1_prf_md((ctx), (md))
#define EVP_PKEY_CTX_set1_tls1_prf_secret(pctx, sec, seclen) IAmiSSL->EVP_PKEY_CTX_set1_tls1_prf_secret((pctx), (sec), (seclen))
#define EVP_PKEY_CTX_add1_tls1_prf_seed(pctx, seed, seedlen) IAmiSSL->EVP_PKEY_CTX_add1_tls1_prf_seed((pctx), (seed), (seedlen))
#define EVP_PKEY_CTX_set_hkdf_md(ctx, md) IAmiSSL->EVP_PKEY_CTX_set_hkdf_md((ctx), (md))
#define EVP_PKEY_CTX_set1_hkdf_salt(ctx, salt, saltlen) IAmiSSL->EVP_PKEY_CTX_set1_hkdf_salt((ctx), (salt), (saltlen))
#define EVP_PKEY_CTX_set1_hkdf_key(ctx, key, keylen) IAmiSSL->EVP_PKEY_CTX_set1_hkdf_key((ctx), (key), (keylen))
#define EVP_PKEY_CTX_add1_hkdf_info(ctx, info, infolen) IAmiSSL->EVP_PKEY_CTX_add1_hkdf_info((ctx), (info), (infolen))
#define EVP_PKEY_CTX_set_hkdf_mode(ctx, mode) IAmiSSL->EVP_PKEY_CTX_set_hkdf_mode((ctx), (mode))
#define EVP_PKEY_CTX_set1_pbe_pass(ctx, pass, passlen) IAmiSSL->EVP_PKEY_CTX_set1_pbe_pass((ctx), (pass), (passlen))
#define EVP_PKEY_CTX_set1_scrypt_salt(ctx, salt, saltlen) IAmiSSL->EVP_PKEY_CTX_set1_scrypt_salt((ctx), (salt), (saltlen))
#define EVP_PKEY_CTX_set_scrypt_N(ctx, n) IAmiSSL->EVP_PKEY_CTX_set_scrypt_N((ctx), (n))
#define EVP_PKEY_CTX_set_scrypt_r(ctx, r) IAmiSSL->EVP_PKEY_CTX_set_scrypt_r((ctx), (r))
#define EVP_PKEY_CTX_set_scrypt_p(ctx, p) IAmiSSL->EVP_PKEY_CTX_set_scrypt_p((ctx), (p))
#define EVP_PKEY_CTX_set_scrypt_maxmem_bytes(ctx, maxmem_bytes) IAmiSSL->EVP_PKEY_CTX_set_scrypt_maxmem_bytes((ctx), (maxmem_bytes))
#define EVP_PKEY_CTX_set_dh_kdf_type(ctx, kdf) IAmiSSL->EVP_PKEY_CTX_set_dh_kdf_type((ctx), (kdf))
#define EVP_PKEY_CTX_get_dh_kdf_type(ctx) IAmiSSL->EVP_PKEY_CTX_get_dh_kdf_type((ctx))
#define EVP_PKEY_CTX_set0_dh_kdf_oid(ctx, oid) IAmiSSL->EVP_PKEY_CTX_set0_dh_kdf_oid((ctx), (oid))
#define EVP_PKEY_CTX_get0_dh_kdf_oid(ctx, oid) IAmiSSL->EVP_PKEY_CTX_get0_dh_kdf_oid((ctx), (oid))
#define EVP_PKEY_CTX_set_dh_kdf_md(ctx, md) IAmiSSL->EVP_PKEY_CTX_set_dh_kdf_md((ctx), (md))
#define EVP_PKEY_CTX_get_dh_kdf_md(ctx, md) IAmiSSL->EVP_PKEY_CTX_get_dh_kdf_md((ctx), (md))
#define EVP_PKEY_CTX_set_dh_kdf_outlen(ctx, len) IAmiSSL->EVP_PKEY_CTX_set_dh_kdf_outlen((ctx), (len))
#define EVP_PKEY_CTX_get_dh_kdf_outlen(ctx, len) IAmiSSL->EVP_PKEY_CTX_get_dh_kdf_outlen((ctx), (len))
#define EVP_PKEY_CTX_set0_dh_kdf_ukm(ctx, ukm, len) IAmiSSL->EVP_PKEY_CTX_set0_dh_kdf_ukm((ctx), (ukm), (len))
#define EVP_PKEY_CTX_get0_dh_kdf_ukm(ctx, ukm) IAmiSSL->EVP_PKEY_CTX_get0_dh_kdf_ukm((ctx), (ukm))
#define EVP_CIPHER_CTX_get_updated_iv(ctx, buf, len) IAmiSSL->EVP_CIPHER_CTX_get_updated_iv((ctx), (buf), (len))
#define EVP_CIPHER_CTX_get_original_iv(ctx, buf, len) IAmiSSL->EVP_CIPHER_CTX_get_original_iv((ctx), (buf), (len))
#define EVP_KEYMGMT_gettable_params(keymgmt) IAmiSSL->EVP_KEYMGMT_gettable_params((keymgmt))
#define EVP_KEYMGMT_settable_params(keymgmt) IAmiSSL->EVP_KEYMGMT_settable_params((keymgmt))
#define EVP_KEYMGMT_gen_settable_params(keymgmt) IAmiSSL->EVP_KEYMGMT_gen_settable_params((keymgmt))
#define EVP_SIGNATURE_gettable_ctx_params(sig) IAmiSSL->EVP_SIGNATURE_gettable_ctx_params((sig))
#define EVP_SIGNATURE_settable_ctx_params(sig) IAmiSSL->EVP_SIGNATURE_settable_ctx_params((sig))
#define EVP_KEYEXCH_gettable_ctx_params(keyexch) IAmiSSL->EVP_KEYEXCH_gettable_ctx_params((keyexch))
#define EVP_KEYEXCH_settable_ctx_params(keyexch) IAmiSSL->EVP_KEYEXCH_settable_ctx_params((keyexch))
#define d2i_PUBKEY_ex(a, pp, length, libctx, propq) IAmiSSL->d2i_PUBKEY_ex((a), (pp), (length), (libctx), (propq))
#define OSSL_STORE_INFO_new_PUBKEY(pubkey) IAmiSSL->OSSL_STORE_INFO_new_PUBKEY((pubkey))
#define OSSL_STORE_INFO_get0_PUBKEY(info) IAmiSSL->OSSL_STORE_INFO_get0_PUBKEY((info))
#define OSSL_STORE_INFO_get1_PUBKEY(info) IAmiSSL->OSSL_STORE_INFO_get1_PUBKEY((info))
#define PEM_read_bio_PUBKEY_ex(out, x, cb, u, libctx, propq) IAmiSSL->PEM_read_bio_PUBKEY_ex((out), (x), (cb), (u), (libctx), (propq))
#define PEM_read_bio_Parameters_ex(bp, x, libctx, propq) IAmiSSL->PEM_read_bio_Parameters_ex((bp), (x), (libctx), (propq))
#define EC_GROUP_new_from_params(params, libctx, propq) IAmiSSL->EC_GROUP_new_from_params((params), (libctx), (propq))
#define OSSL_STORE_LOADER_set_open_ex(loader, open_ex_function) IAmiSSL->OSSL_STORE_LOADER_set_open_ex((loader), (open_ex_function))
#define OSSL_STORE_LOADER_fetch(libctx, scheme, properties) IAmiSSL->OSSL_STORE_LOADER_fetch((libctx), (scheme), (properties))
#define OSSL_STORE_LOADER_up_ref(loader) IAmiSSL->OSSL_STORE_LOADER_up_ref((loader))
#define OSSL_STORE_LOADER_get0_provider(loader) IAmiSSL->OSSL_STORE_LOADER_get0_provider((loader))
#define OSSL_STORE_LOADER_get0_properties(loader) IAmiSSL->OSSL_STORE_LOADER_get0_properties((loader))
#define OSSL_STORE_LOADER_is_a(loader, scheme) IAmiSSL->OSSL_STORE_LOADER_is_a((loader), (scheme))
#define OSSL_STORE_LOADER_do_all_provided(libctx, fn, arg) IAmiSSL->OSSL_STORE_LOADER_do_all_provided((libctx), (fn), (arg))
#define OSSL_STORE_LOADER_names_do_all(loader, fn, data) IAmiSSL->OSSL_STORE_LOADER_names_do_all((loader), (fn), (data))
#define OSSL_PARAM_get_utf8_string_ptr(p, val) IAmiSSL->OSSL_PARAM_get_utf8_string_ptr((p), (val))
#define OSSL_PARAM_get_octet_string_ptr(p, val, used_len) IAmiSSL->OSSL_PARAM_get_octet_string_ptr((p), (val), (used_len))
#define OSSL_DECODER_CTX_set_passphrase_cb(ctx, cb, cbarg) IAmiSSL->OSSL_DECODER_CTX_set_passphrase_cb((ctx), (cb), (cbarg))
#define EVP_PKEY_CTX_set_mac_key(ctx, key, keylen) IAmiSSL->EVP_PKEY_CTX_set_mac_key((ctx), (key), (keylen))
#define OSSL_STORE_INFO_new(type, data) IAmiSSL->OSSL_STORE_INFO_new((type), (data))
#define OSSL_STORE_INFO_get0_data(type, info) IAmiSSL->OSSL_STORE_INFO_get0_data((type), (info))
#define EVP_PKCS82PKEY_ex(p8, libctx, propq) IAmiSSL->EVP_PKCS82PKEY_ex((p8), (libctx), (propq))
#define EVP_PKEY_CTX_set1_id(ctx, id, len) IAmiSSL->EVP_PKEY_CTX_set1_id((ctx), (id), (len))
#define EVP_PKEY_CTX_get1_id(ctx, id) IAmiSSL->EVP_PKEY_CTX_get1_id((ctx), (id))
#define EVP_PKEY_CTX_get1_id_len(ctx, id_len) IAmiSSL->EVP_PKEY_CTX_get1_id_len((ctx), (id_len))
#define CMS_AuthEnvelopedData_create(cipher) IAmiSSL->CMS_AuthEnvelopedData_create((cipher))
#define CMS_AuthEnvelopedData_create_ex(cipher, libctx, propq) IAmiSSL->CMS_AuthEnvelopedData_create_ex((cipher), (libctx), (propq))
#define EVP_PKEY_CTX_set_ec_param_enc(ctx, param_enc) IAmiSSL->EVP_PKEY_CTX_set_ec_param_enc((ctx), (param_enc))
#define EVP_PKEY_get0_type_name(key) IAmiSSL->EVP_PKEY_get0_type_name((key))
#define EVP_KEYMGMT_get0_name(keymgmt) IAmiSSL->EVP_KEYMGMT_get0_name((keymgmt))
#define EVP_KEM_free(wrap) IAmiSSL->EVP_KEM_free((wrap))
#define EVP_KEM_up_ref(wrap) IAmiSSL->EVP_KEM_up_ref((wrap))
#define EVP_KEM_get0_provider(wrap) IAmiSSL->EVP_KEM_get0_provider((wrap))
#define EVP_KEM_fetch(ctx, algorithm, properties) IAmiSSL->EVP_KEM_fetch((ctx), (algorithm), (properties))
#define EVP_KEM_is_a(wrap, name) IAmiSSL->EVP_KEM_is_a((wrap), (name))
#define EVP_KEM_do_all_provided(libctx, fn, arg) IAmiSSL->EVP_KEM_do_all_provided((libctx), (fn), (arg))
#define EVP_KEM_names_do_all(wrap, fn, data) IAmiSSL->EVP_KEM_names_do_all((wrap), (fn), (data))
#define EVP_PKEY_encapsulate_init(ctx, params) IAmiSSL->EVP_PKEY_encapsulate_init((ctx), (params))
#define EVP_PKEY_encapsulate(ctx, wrappedkey, wrappedkeylen, genkey, genkeylen) IAmiSSL->EVP_PKEY_encapsulate((ctx), (wrappedkey), (wrappedkeylen), (genkey), (genkeylen))
#define EVP_PKEY_decapsulate_init(ctx, params) IAmiSSL->EVP_PKEY_decapsulate_init((ctx), (params))
#define EVP_PKEY_decapsulate(ctx, unwrapped, unwrappedlen, wrapped, wrappedlen) IAmiSSL->EVP_PKEY_decapsulate((ctx), (unwrapped), (unwrappedlen), (wrapped), (wrappedlen))
#define EVP_PKEY_CTX_set_kem_op(ctx, op) IAmiSSL->EVP_PKEY_CTX_set_kem_op((ctx), (op))
#define OSSL_ENCODER_gettable_params(encoder) IAmiSSL->OSSL_ENCODER_gettable_params((encoder))
#define OSSL_ENCODER_get_params(encoder, params) IAmiSSL->OSSL_ENCODER_get_params((encoder), (params))
#define OSSL_ENCODER_CTX_set_output_type(ctx, output_type) IAmiSSL->OSSL_ENCODER_CTX_set_output_type((ctx), (output_type))
#define OSSL_ENCODER_CTX_add_encoder(ctx, encoder) IAmiSSL->OSSL_ENCODER_CTX_add_encoder((ctx), (encoder))
#define OSSL_ENCODER_CTX_add_extra(ctx, libctx, propq) IAmiSSL->OSSL_ENCODER_CTX_add_extra((ctx), (libctx), (propq))
#define OSSL_ENCODER_CTX_get_num_encoders(ctx) IAmiSSL->OSSL_ENCODER_CTX_get_num_encoders((ctx))
#define OSSL_ENCODER_CTX_set_selection(ctx, selection) IAmiSSL->OSSL_ENCODER_CTX_set_selection((ctx), (selection))
#define OSSL_ENCODER_INSTANCE_get_encoder(encoder_inst) IAmiSSL->OSSL_ENCODER_INSTANCE_get_encoder((encoder_inst))
#define OSSL_ENCODER_INSTANCE_get_encoder_ctx(encoder_inst) IAmiSSL->OSSL_ENCODER_INSTANCE_get_encoder_ctx((encoder_inst))
#define OSSL_ENCODER_INSTANCE_get_output_type(encoder_inst) IAmiSSL->OSSL_ENCODER_INSTANCE_get_output_type((encoder_inst))
#define OSSL_ENCODER_CTX_set_construct(ctx, construct) IAmiSSL->OSSL_ENCODER_CTX_set_construct((ctx), (construct))
#define OSSL_ENCODER_CTX_set_construct_data(ctx, construct_data) IAmiSSL->OSSL_ENCODER_CTX_set_construct_data((ctx), (construct_data))
#define OSSL_ENCODER_CTX_set_cleanup(ctx, cleanup) IAmiSSL->OSSL_ENCODER_CTX_set_cleanup((ctx), (cleanup))
#define OSSL_ENCODER_CTX_set_passphrase_cb(ctx, cb, cbarg) IAmiSSL->OSSL_ENCODER_CTX_set_passphrase_cb((ctx), (cb), (cbarg))
#define EVP_PKEY_type_names_do_all(pkey, fn, data) IAmiSSL->EVP_PKEY_type_names_do_all((pkey), (fn), (data))
#define OSSL_DECODER_INSTANCE_get_input_type(decoder_inst) IAmiSSL->OSSL_DECODER_INSTANCE_get_input_type((decoder_inst))
#define EVP_ASYM_CIPHER_gettable_ctx_params(ciph) IAmiSSL->EVP_ASYM_CIPHER_gettable_ctx_params((ciph))
#define EVP_ASYM_CIPHER_settable_ctx_params(ciph) IAmiSSL->EVP_ASYM_CIPHER_settable_ctx_params((ciph))
#define EVP_KEM_gettable_ctx_params(kem) IAmiSSL->EVP_KEM_gettable_ctx_params((kem))
#define EVP_KEM_settable_ctx_params(kem) IAmiSSL->EVP_KEM_settable_ctx_params((kem))
#define PKCS7_type_is_other(p7) IAmiSSL->PKCS7_type_is_other((p7))
#define PKCS7_get_octet_string(p7) IAmiSSL->PKCS7_get_octet_string((p7))
#define OSSL_DECODER_from_data(ctx, pdata, pdata_len) IAmiSSL->OSSL_DECODER_from_data((ctx), (pdata), (pdata_len))
#define OSSL_ENCODER_to_data(ctx, pdata, pdata_len) IAmiSSL->OSSL_ENCODER_to_data((ctx), (pdata), (pdata_len))
#define EVP_PKEY_CTX_get0_libctx(ctx) IAmiSSL->EVP_PKEY_CTX_get0_libctx((ctx))
#define EVP_PKEY_CTX_get0_propq(ctx) IAmiSSL->EVP_PKEY_CTX_get0_propq((ctx))
#define OSSL_DECODER_CTX_set_selection(ctx, selection) IAmiSSL->OSSL_DECODER_CTX_set_selection((ctx), (selection))
#define OSSL_DECODER_CTX_set_input_structure(ctx, input_structure) IAmiSSL->OSSL_DECODER_CTX_set_input_structure((ctx), (input_structure))
#define OSSL_DECODER_INSTANCE_get_input_structure(decoder_inst, was_set) IAmiSSL->OSSL_DECODER_INSTANCE_get_input_structure((decoder_inst), (was_set))
#define OSSL_ENCODER_CTX_set_output_structure(ctx, output_structure) IAmiSSL->OSSL_ENCODER_CTX_set_output_structure((ctx), (output_structure))
#define OSSL_ENCODER_INSTANCE_get_output_structure(encoder_inst) IAmiSSL->OSSL_ENCODER_INSTANCE_get_output_structure((encoder_inst))
#define PEM_write_bio_PrivateKey_ex(out, x, enc, kstr, klen, cb, u, libctx, propq) IAmiSSL->PEM_write_bio_PrivateKey_ex((out), (x), (enc), (kstr), (klen), (cb), (u), (libctx), (propq))
#define PEM_write_bio_PUBKEY_ex(out, x, libctx, propq) IAmiSSL->PEM_write_bio_PUBKEY_ex((out), (x), (libctx), (propq))
#define EVP_PKEY_get_group_name(pkey, name, name_sz, gname_len) IAmiSSL->EVP_PKEY_get_group_name((pkey), (name), (name_sz), (gname_len))
#define CRYPTO_atomic_or(val, op, ret, lock) IAmiSSL->CRYPTO_atomic_or((val), (op), (ret), (lock))
#define CRYPTO_atomic_load(val, ret, lock) IAmiSSL->CRYPTO_atomic_load((val), (ret), (lock))
#define EVP_PKEY_CTX_set_rsa_pss_keygen_md(ctx, md) IAmiSSL->EVP_PKEY_CTX_set_rsa_pss_keygen_md((ctx), (md))
#define EVP_PKEY_CTX_set_rsa_pss_keygen_md_name(ctx, mdname, mdprops) IAmiSSL->EVP_PKEY_CTX_set_rsa_pss_keygen_md_name((ctx), (mdname), (mdprops))
#define EVP_PKEY_settable_params(pkey) IAmiSSL->EVP_PKEY_settable_params((pkey))
#define EVP_PKEY_set_params(pkey, params) IAmiSSL->EVP_PKEY_set_params((pkey), (params))
#define EVP_PKEY_set_int_param(pkey, key_name, in) IAmiSSL->EVP_PKEY_set_int_param((pkey), (key_name), (in))
#define EVP_PKEY_set_size_t_param(pkey, key_name, in) IAmiSSL->EVP_PKEY_set_size_t_param((pkey), (key_name), (in))
#define EVP_PKEY_set_bn_param(pkey, key_name, bn) IAmiSSL->EVP_PKEY_set_bn_param((pkey), (key_name), (bn))
#define EVP_PKEY_set_utf8_string_param(pkey, key_name, str) IAmiSSL->EVP_PKEY_set_utf8_string_param((pkey), (key_name), (str))
#define EVP_PKEY_set_octet_string_param(pkey, key_name, buf, bsize) IAmiSSL->EVP_PKEY_set_octet_string_param((pkey), (key_name), (buf), (bsize))
#define EVP_PKEY_get_ec_point_conv_form(pkey) IAmiSSL->EVP_PKEY_get_ec_point_conv_form((pkey))
#define EVP_PKEY_get_field_type(pkey) IAmiSSL->EVP_PKEY_get_field_type((pkey))
#define EVP_PKEY_get_params(pkey, params) IAmiSSL->EVP_PKEY_get_params((pkey), (params))
#define EVP_PKEY_fromdata_init(ctx) IAmiSSL->EVP_PKEY_fromdata_init((ctx))
#define EVP_PKEY_fromdata_settable(ctx, selection) IAmiSSL->EVP_PKEY_fromdata_settable((ctx), (selection))
#define EVP_PKEY_param_check_quick(ctx) IAmiSSL->EVP_PKEY_param_check_quick((ctx))
#define EVP_PKEY_public_check_quick(ctx) IAmiSSL->EVP_PKEY_public_check_quick((ctx))
#define EVP_PKEY_CTX_is_a(ctx, keytype) IAmiSSL->EVP_PKEY_CTX_is_a((ctx), (keytype))
#define EVP_CIPHER_CTX_settable_params(ctx) IAmiSSL->EVP_CIPHER_CTX_settable_params((ctx))
#define EVP_CIPHER_CTX_gettable_params(ctx) IAmiSSL->EVP_CIPHER_CTX_gettable_params((ctx))
#define EVP_KDF_CTX_gettable_params(ctx) IAmiSSL->EVP_KDF_CTX_gettable_params((ctx))
#define EVP_KDF_CTX_settable_params(ctx) IAmiSSL->EVP_KDF_CTX_settable_params((ctx))
#define EVP_MAC_CTX_gettable_params(ctx) IAmiSSL->EVP_MAC_CTX_gettable_params((ctx))
#define EVP_MAC_CTX_settable_params(ctx) IAmiSSL->EVP_MAC_CTX_settable_params((ctx))
#define EVP_RAND_CTX_gettable_params(ctx) IAmiSSL->EVP_RAND_CTX_gettable_params((ctx))
#define EVP_RAND_CTX_settable_params(ctx) IAmiSSL->EVP_RAND_CTX_settable_params((ctx))
#define RAND_set_DRBG_type(ctx, drbg, propq, cipher, digest) IAmiSSL->RAND_set_DRBG_type((ctx), (drbg), (propq), (cipher), (digest))
#define RAND_set_seed_source_type(ctx, seed, propq) IAmiSSL->RAND_set_seed_source_type((ctx), (seed), (propq))
#define BN_mod_exp_mont_consttime_x2(rr1, a1, p1, m1, in_mont1, rr2, a2, p2, m2, in_mont2, ctx) IAmiSSL->BN_mod_exp_mont_consttime_x2((rr1), (a1), (p1), (m1), (in_mont1), (rr2), (a2), (p2), (m2), (in_mont2), (ctx))
#define BIO_f_readbuffer() IAmiSSL->BIO_f_readbuffer()
#define OSSL_ESS_check_signing_certs(ss, ssv2, chain, require_signing_cert) IAmiSSL->OSSL_ESS_check_signing_certs((ss), (ssv2), (chain), (require_signing_cert))
#define OSSL_ESS_signing_cert_new_init(signcert, certs, set_issuer_serial) IAmiSSL->OSSL_ESS_signing_cert_new_init((signcert), (certs), (set_issuer_serial))
#define OSSL_ESS_signing_cert_v2_new_init(hash_alg, signcert, certs, set_issuer_serial) IAmiSSL->OSSL_ESS_signing_cert_v2_new_init((hash_alg), (signcert), (certs), (set_issuer_serial))
#define ESS_SIGNING_CERT_it() IAmiSSL->ESS_SIGNING_CERT_it()
#define ESS_SIGNING_CERT_V2_it() IAmiSSL->ESS_SIGNING_CERT_V2_it()
#define EVP_Q_digest(libctx, name, propq, data, datalen, md, mdlen) IAmiSSL->EVP_Q_digest((libctx), (name), (propq), (data), (datalen), (md), (mdlen))
#define EVP_DigestInit_ex2(ctx, type, params) IAmiSSL->EVP_DigestInit_ex2((ctx), (type), (params))
#define EVP_EncryptInit_ex2(ctx, cipher, key, iv, params) IAmiSSL->EVP_EncryptInit_ex2((ctx), (cipher), (key), (iv), (params))
#define EVP_DecryptInit_ex2(ctx, cipher, key, iv, params) IAmiSSL->EVP_DecryptInit_ex2((ctx), (cipher), (key), (iv), (params))
#define EVP_CipherInit_ex2(ctx, cipher, key, iv, enc, params) IAmiSSL->EVP_CipherInit_ex2((ctx), (cipher), (key), (iv), (enc), (params))
#define EVP_PKEY_sign_init_ex(ctx, params) IAmiSSL->EVP_PKEY_sign_init_ex((ctx), (params))
#define EVP_PKEY_verify_init_ex(ctx, params) IAmiSSL->EVP_PKEY_verify_init_ex((ctx), (params))
#define EVP_PKEY_verify_recover_init_ex(ctx, params) IAmiSSL->EVP_PKEY_verify_recover_init_ex((ctx), (params))
#define EVP_PKEY_encrypt_init_ex(ctx, params) IAmiSSL->EVP_PKEY_encrypt_init_ex((ctx), (params))
#define EVP_PKEY_decrypt_init_ex(ctx, params) IAmiSSL->EVP_PKEY_decrypt_init_ex((ctx), (params))
#define EVP_PKEY_derive_init_ex(ctx, params) IAmiSSL->EVP_PKEY_derive_init_ex((ctx), (params))
#define TS_RESP_CTX_new_ex(libctx, propq) IAmiSSL->TS_RESP_CTX_new_ex((libctx), (propq))
#define X509_REQ_new_ex(libctx, propq) IAmiSSL->X509_REQ_new_ex((libctx), (propq))
#define EVP_PKEY_dup(pkey) IAmiSSL->EVP_PKEY_dup((pkey))
#define RSA_PSS_PARAMS_dup(a) IAmiSSL->RSA_PSS_PARAMS_dup((a))
#define EVP_PKEY_derive_set_peer_ex(ctx, peer, validate_peer) IAmiSSL->EVP_PKEY_derive_set_peer_ex((ctx), (peer), (validate_peer))
#define OSSL_DECODER_get0_name(decoder) IAmiSSL->OSSL_DECODER_get0_name((decoder))
#define OSSL_ENCODER_get0_name(kdf) IAmiSSL->OSSL_ENCODER_get0_name((kdf))
#define OSSL_DECODER_get0_description(decoder) IAmiSSL->OSSL_DECODER_get0_description((decoder))
#define OSSL_ENCODER_get0_description(kdf) IAmiSSL->OSSL_ENCODER_get0_description((kdf))
#define OSSL_STORE_LOADER_get0_description(loader) IAmiSSL->OSSL_STORE_LOADER_get0_description((loader))
#define EVP_MD_get0_description(md) IAmiSSL->EVP_MD_get0_description((md))
#define EVP_CIPHER_get0_description(cipher) IAmiSSL->EVP_CIPHER_get0_description((cipher))
#define EVP_MAC_get0_description(mac) IAmiSSL->EVP_MAC_get0_description((mac))
#define EVP_RAND_get0_description(md) IAmiSSL->EVP_RAND_get0_description((md))
#define EVP_PKEY_get0_description(pkey) IAmiSSL->EVP_PKEY_get0_description((pkey))
#define EVP_KEYMGMT_get0_description(keymgmt) IAmiSSL->EVP_KEYMGMT_get0_description((keymgmt))
#define EVP_SIGNATURE_get0_description(signature) IAmiSSL->EVP_SIGNATURE_get0_description((signature))
#define EVP_ASYM_CIPHER_get0_description(cipher) IAmiSSL->EVP_ASYM_CIPHER_get0_description((cipher))
#define EVP_KEM_get0_description(wrap) IAmiSSL->EVP_KEM_get0_description((wrap))
#define EVP_KEYEXCH_get0_description(keyexch) IAmiSSL->EVP_KEYEXCH_get0_description((keyexch))
#define EVP_KDF_get0_description(kdf) IAmiSSL->EVP_KDF_get0_description((kdf))
#define OPENSSL_sk_find_all(st, data, pnum) IAmiSSL->OPENSSL_sk_find_all((st), (data), (pnum))
#define X509_CRL_new_ex(libctx, propq) IAmiSSL->X509_CRL_new_ex((libctx), (propq))
#define OSSL_PARAM_dup(p) IAmiSSL->OSSL_PARAM_dup((p))
#define OSSL_PARAM_merge(p1, p2) IAmiSSL->OSSL_PARAM_merge((p1), (p2))
#define OSSL_PARAM_free(p) IAmiSSL->OSSL_PARAM_free((p))
#define EVP_PKEY_todata(pkey, selection, params) IAmiSSL->EVP_PKEY_todata((pkey), (selection), (params))
#define EVP_PKEY_export(pkey, selection, export_cb, export_cbarg) IAmiSSL->EVP_PKEY_export((pkey), (selection), (export_cb), (export_cbarg))
#define EVP_MD_CTX_get0_md(ctx) IAmiSSL->EVP_MD_CTX_get0_md((ctx))
#define EVP_MD_CTX_get1_md(ctx) IAmiSSL->EVP_MD_CTX_get1_md((ctx))
#define EVP_CIPHER_CTX_get0_cipher(ctx) IAmiSSL->EVP_CIPHER_CTX_get0_cipher((ctx))
#define EVP_CIPHER_CTX_get1_cipher(ctx) IAmiSSL->EVP_CIPHER_CTX_get1_cipher((ctx))
#define OSSL_LIB_CTX_get0_global_default() IAmiSSL->OSSL_LIB_CTX_get0_global_default()
#define EVP_SIGNATURE_get0_name(signature) IAmiSSL->EVP_SIGNATURE_get0_name((signature))
#define EVP_ASYM_CIPHER_get0_name(cipher) IAmiSSL->EVP_ASYM_CIPHER_get0_name((cipher))
#define EVP_KEM_get0_name(wrap) IAmiSSL->EVP_KEM_get0_name((wrap))
#define EVP_KEYEXCH_get0_name(keyexch) IAmiSSL->EVP_KEYEXCH_get0_name((keyexch))
#define PKCS5_v2_PBE_keyivgen_ex(ctx, pass, passlen, param, cipher, md, en_de, libctx, propq) IAmiSSL->PKCS5_v2_PBE_keyivgen_ex((ctx), (pass), (passlen), (param), (cipher), (md), (en_de), (libctx), (propq))
#define EVP_PBE_scrypt_amiga_1(pass, passlen, salt, N, r, p, maxmem, moreargs) IAmiSSL->EVP_PBE_scrypt_amiga_1((pass), (passlen), (salt), (N), (r), (p), (maxmem), (moreargs))
#define EVP_PBE_scrypt_amiga_2(saltlen, key, keylen) IAmiSSL->EVP_PBE_scrypt_amiga_2((saltlen), (key), (keylen))
#define EVP_PBE_scrypt_ex_amiga_2(saltlen, key, keylen, ctx, propq) IAmiSSL->EVP_PBE_scrypt_ex_amiga_2((saltlen), (key), (keylen), (ctx), (propq))
#define PKCS5_v2_scrypt_keyivgen_ex(ctx, pass, passlen, param, c, md, en_de, libctx, propq) IAmiSSL->PKCS5_v2_scrypt_keyivgen_ex((ctx), (pass), (passlen), (param), (c), (md), (en_de), (libctx), (propq))
#define EVP_PBE_CipherInit_ex(pbe_obj, pass, passlen, param, ctx, en_de, libctx, propq) IAmiSSL->EVP_PBE_CipherInit_ex((pbe_obj), (pass), (passlen), (param), (ctx), (en_de), (libctx), (propq))
#define EVP_PBE_find_ex(type, pbe_nid, pcnid, pmnid, pkeygen, pkeygen_ex) IAmiSSL->EVP_PBE_find_ex((type), (pbe_nid), (pcnid), (pmnid), (pkeygen), (pkeygen_ex))
#define PKCS12_SAFEBAG_create_pkcs8_encrypt_ex(pbe_nid, pass, passlen, salt, saltlen, iter, p8inf, ctx, propq) IAmiSSL->PKCS12_SAFEBAG_create_pkcs8_encrypt_ex((pbe_nid), (pass), (passlen), (salt), (saltlen), (iter), (p8inf), (ctx), (propq))
#define PKCS8_decrypt_ex(p8, pass, passlen, ctx, propq) IAmiSSL->PKCS8_decrypt_ex((p8), (pass), (passlen), (ctx), (propq))
#define PKCS12_decrypt_skey_ex(bag, pass, passlen, ctx, propq) IAmiSSL->PKCS12_decrypt_skey_ex((bag), (pass), (passlen), (ctx), (propq))
#define PKCS8_encrypt_ex(pbe_nid, cipher, pass, passlen, salt, saltlen, iter, p8, ctx, propq) IAmiSSL->PKCS8_encrypt_ex((pbe_nid), (cipher), (pass), (passlen), (salt), (saltlen), (iter), (p8), (ctx), (propq))
#define PKCS8_set0_pbe_ex(pass, passlen, p8inf, pbe, ctx, propq) IAmiSSL->PKCS8_set0_pbe_ex((pass), (passlen), (p8inf), (pbe), (ctx), (propq))
#define PKCS12_pack_p7encdata_ex(pbe_nid, pass, passlen, salt, saltlen, iter, bags, ctx, propq) IAmiSSL->PKCS12_pack_p7encdata_ex((pbe_nid), (pass), (passlen), (salt), (saltlen), (iter), (bags), (ctx), (propq))
#define PKCS12_pbe_crypt_ex(algor, pass, passlen, in, inlen, data, datalen, en_de, libctx, propq) IAmiSSL->PKCS12_pbe_crypt_ex((algor), (pass), (passlen), (in), (inlen), (data), (datalen), (en_de), (libctx), (propq))
#define PKCS12_item_decrypt_d2i_ex(algor, it, pass, passlen, oct, zbuf, libctx, propq) IAmiSSL->PKCS12_item_decrypt_d2i_ex((algor), (it), (pass), (passlen), (oct), (zbuf), (libctx), (propq))
#define PKCS12_item_i2d_encrypt_ex(algor, it, pass, passlen, obj, zbuf, ctx, propq) IAmiSSL->PKCS12_item_i2d_encrypt_ex((algor), (it), (pass), (passlen), (obj), (zbuf), (ctx), (propq))
#define PKCS12_init_ex(mode, ctx, propq) IAmiSSL->PKCS12_init_ex((mode), (ctx), (propq))
#define PKCS12_key_gen_asc_ex(pass, passlen, salt, saltlen, id, iter, n, out, md_type, ctx, propq) IAmiSSL->PKCS12_key_gen_asc_ex((pass), (passlen), (salt), (saltlen), (id), (iter), (n), (out), (md_type), (ctx), (propq))
#define PKCS12_key_gen_uni_ex(pass, passlen, salt, saltlen, id, iter, n, out, md_type, ctx, propq) IAmiSSL->PKCS12_key_gen_uni_ex((pass), (passlen), (salt), (saltlen), (id), (iter), (n), (out), (md_type), (ctx), (propq))
#define PKCS12_key_gen_utf8_ex(pass, passlen, salt, saltlen, id, iter, n, out, md_type, ctx, propq) IAmiSSL->PKCS12_key_gen_utf8_ex((pass), (passlen), (salt), (saltlen), (id), (iter), (n), (out), (md_type), (ctx), (propq))
#define PKCS12_PBE_keyivgen_ex(ctx, pass, passlen, param, cipher, md_type, en_de, libctx, propq) IAmiSSL->PKCS12_PBE_keyivgen_ex((ctx), (pass), (passlen), (param), (cipher), (md_type), (en_de), (libctx), (propq))
#define PKCS12_create_ex(pass, name, pkey, cert, ca, nid_key, nid_cert, iter, mac_iter, keytype, ctx, propq) IAmiSSL->PKCS12_create_ex((pass), (name), (pkey), (cert), (ca), (nid_key), (nid_cert), (iter), (mac_iter), (keytype), (ctx), (propq))
#define PKCS12_add_key_ex(pbags, key, key_usage, iter, key_nid, pass, ctx, propq) IAmiSSL->PKCS12_add_key_ex((pbags), (key), (key_usage), (iter), (key_nid), (pass), (ctx), (propq))
#define PKCS12_add_safe_ex(psafes, bags, safe_nid, iter, pass, ctx, propq) IAmiSSL->PKCS12_add_safe_ex((psafes), (bags), (safe_nid), (iter), (pass), (ctx), (propq))
#define PKCS12_add_safes_ex(safes, p7_nid, ctx, propq) IAmiSSL->PKCS12_add_safes_ex((safes), (p7_nid), (ctx), (propq))
#define PKCS5_pbe_set0_algor_ex(algor, alg, iter, salt, saltlen, libctx) IAmiSSL->PKCS5_pbe_set0_algor_ex((algor), (alg), (iter), (salt), (saltlen), (libctx))
#define PKCS5_pbe_set_ex(alg, iter, salt, saltlen, libctx) IAmiSSL->PKCS5_pbe_set_ex((alg), (iter), (salt), (saltlen), (libctx))
#define PKCS5_pbe2_set_iv_ex(cipher, iter, salt, saltlen, aiv, prf_nid, libctx) IAmiSSL->PKCS5_pbe2_set_iv_ex((cipher), (iter), (salt), (saltlen), (aiv), (prf_nid), (libctx))
#define PKCS5_pbkdf2_set_ex(iter, salt, saltlen, prf_nid, keylen, libctx) IAmiSSL->PKCS5_pbkdf2_set_ex((iter), (salt), (saltlen), (prf_nid), (keylen), (libctx))
#define BIO_new_from_core_bio(libctx, corebio) IAmiSSL->BIO_new_from_core_bio((libctx), (corebio))
#define BIO_new_ex(libctx, method) IAmiSSL->BIO_new_ex((libctx), (method))
#define BIO_s_core() IAmiSSL->BIO_s_core()
#define BIO_get_line(bio, buf, size) IAmiSSL->BIO_get_line((bio), (buf), (size))
#define OSSL_LIB_CTX_new_from_dispatch(handle, in) IAmiSSL->OSSL_LIB_CTX_new_from_dispatch((handle), (in))
#define OSSL_LIB_CTX_new_child(handle, in) IAmiSSL->OSSL_LIB_CTX_new_child((handle), (in))
#define OSSL_PROVIDER_get0_dispatch(prov) IAmiSSL->OSSL_PROVIDER_get0_dispatch((prov))
#define PKCS5_PBE_keyivgen_ex(cctx, pass, passlen, param, cipher, md, en_de, libctx, propq) IAmiSSL->PKCS5_PBE_keyivgen_ex((cctx), (pass), (passlen), (param), (cipher), (md), (en_de), (libctx), (propq))
#define EVP_MAC_CTX_get_block_size(ctx) IAmiSSL->EVP_MAC_CTX_get_block_size((ctx))
#define BIO_debug_callback_ex(bio, oper, argp, len, argi, argl, ret, processed) IAmiSSL->BIO_debug_callback_ex((bio), (oper), (argp), (len), (argi), (argl), (ret), (processed))
#define b2i_PVK_bio_ex(in, cb, u, libctx, propq) IAmiSSL->b2i_PVK_bio_ex((in), (cb), (u), (libctx), (propq))
#define i2b_PVK_bio_ex(out, pk, enclevel, cb, u, libctx, propq) IAmiSSL->i2b_PVK_bio_ex((out), (pk), (enclevel), (cb), (u), (libctx), (propq))
#define NCONF_get0_libctx(conf) IAmiSSL->NCONF_get0_libctx((conf))
#define NCONF_get_section_names(conf) IAmiSSL->NCONF_get_section_names((conf))
#define X509_PUBKEY_new_ex(libctx, propq) IAmiSSL->X509_PUBKEY_new_ex((libctx), (propq))
#define ASN1_item_new_ex(it, libctx, propq) IAmiSSL->ASN1_item_new_ex((it), (libctx), (propq))
#define ASN1_item_d2i_bio_ex(it, in, pval, libctx, propq) IAmiSSL->ASN1_item_d2i_bio_ex((it), (in), (pval), (libctx), (propq))
#define ASN1_item_d2i_ex(val, in, len, it, libctx, propq) IAmiSSL->ASN1_item_d2i_ex((val), (in), (len), (it), (libctx), (propq))
#define ASN1_TIME_print_ex(bp, tm, flags) IAmiSSL->ASN1_TIME_print_ex((bp), (tm), (flags))
#define EVP_PKEY_get0_provider(key) IAmiSSL->EVP_PKEY_get0_provider((key))
#define EVP_PKEY_CTX_get0_provider(ctx) IAmiSSL->EVP_PKEY_CTX_get0_provider((ctx))
#define OPENSSL_strcasecmp(s1, s2) IAmiSSL->OPENSSL_strcasecmp((s1), (s2))
#define OPENSSL_strncasecmp(s1, s2, n) IAmiSSL->OPENSSL_strncasecmp((s1), (s2), (n))
#define OSSL_CMP_CTX_reset_geninfo_ITAVs(ctx) IAmiSSL->OSSL_CMP_CTX_reset_geninfo_ITAVs((ctx))
#define EVP_RAND_CTX_up_ref(ctx) IAmiSSL->EVP_RAND_CTX_up_ref((ctx))
#define RAND_set0_public(ctx, rand) IAmiSSL->RAND_set0_public((ctx), (rand))
#define RAND_set0_private(ctx, rand) IAmiSSL->RAND_set0_private((ctx), (rand))
#define EVP_MD_CTX_dup(in) IAmiSSL->EVP_MD_CTX_dup((in))
#define EVP_CIPHER_CTX_dup(in) IAmiSSL->EVP_CIPHER_CTX_dup((in))
#define BN_are_coprime(a, b, ctx) IAmiSSL->BN_are_coprime((a), (b), (ctx))
#define OSSL_CMP_MSG_update_recipNonce(ctx, msg) IAmiSSL->OSSL_CMP_MSG_update_recipNonce((ctx), (msg))
#define SSL_client_hello_get_extension_order(s, exts, num_exts) IAmiSSL->SSL_client_hello_get_extension_order((s), (exts), (num_exts))
#define OSSL_QUIC_client_method() IAmiSSL->OSSL_QUIC_client_method()
#define OSSL_QUIC_client_thread_method() IAmiSSL->OSSL_QUIC_client_thread_method()
#define SSL_CTX_set1_cert_comp_preference(ctx, algs, len) IAmiSSL->SSL_CTX_set1_cert_comp_preference((ctx), (algs), (len))
#define SSL_set1_cert_comp_preference(ssl, algs, len) IAmiSSL->SSL_set1_cert_comp_preference((ssl), (algs), (len))
#define SSL_CTX_compress_certs(ctx, alg) IAmiSSL->SSL_CTX_compress_certs((ctx), (alg))
#define SSL_compress_certs(ssl, alg) IAmiSSL->SSL_compress_certs((ssl), (alg))
#define SSL_CTX_set1_compressed_cert(ctx, algorithm, comp_data, comp_length, orig_length) IAmiSSL->SSL_CTX_set1_compressed_cert((ctx), (algorithm), (comp_data), (comp_length), (orig_length))
#define SSL_set1_compressed_cert(ssl, algorithm, comp_data, comp_length, orig_length) IAmiSSL->SSL_set1_compressed_cert((ssl), (algorithm), (comp_data), (comp_length), (orig_length))
#define SSL_CTX_get1_compressed_cert(ctx, alg, data, orig_len) IAmiSSL->SSL_CTX_get1_compressed_cert((ctx), (alg), (data), (orig_len))
#define SSL_get1_compressed_cert(ssl, alg, data, orig_len) IAmiSSL->SSL_get1_compressed_cert((ssl), (alg), (data), (orig_len))
#define SSL_get_rpoll_descriptor(s, desc) IAmiSSL->SSL_get_rpoll_descriptor((s), (desc))
#define SSL_get_wpoll_descriptor(s, desc) IAmiSSL->SSL_get_wpoll_descriptor((s), (desc))
#define SSL_set_blocking_mode(s, blocking) IAmiSSL->SSL_set_blocking_mode((s), (blocking))
#define SSL_get_blocking_mode(s) IAmiSSL->SSL_get_blocking_mode((s))
#define SSL_set1_initial_peer_addr(s, peer_addr) IAmiSSL->SSL_set1_initial_peer_addr((s), (peer_addr))
#define SSL_net_read_desired(s) IAmiSSL->SSL_net_read_desired((s))
#define SSL_net_write_desired(s) IAmiSSL->SSL_net_write_desired((s))
#define SSL_shutdown_ex(ssl, flags, args, args_len) IAmiSSL->SSL_shutdown_ex((ssl), (flags), (args), (args_len))
#define SSL_stream_conclude(ssl, flags) IAmiSSL->SSL_stream_conclude((ssl), (flags))
#define SSL_inject_net_dgram(s, buf, buf_len, peer, local) IAmiSSL->SSL_inject_net_dgram((s), (buf), (buf_len), (peer), (local))
#define SSL_get0_peer_rpk(s) IAmiSSL->SSL_get0_peer_rpk((s))
#define SSL_SESSION_get0_peer_rpk(s) IAmiSSL->SSL_SESSION_get0_peer_rpk((s))
#define SSL_set1_client_cert_type(s, val, len) IAmiSSL->SSL_set1_client_cert_type((s), (val), (len))
#define SSL_get0_client_cert_type(s, t, len) IAmiSSL->SSL_get0_client_cert_type((s), (t), (len))
#define SSL_set1_server_cert_type(s, val, len) IAmiSSL->SSL_set1_server_cert_type((s), (val), (len))
#define SSL_get0_server_cert_type(s, t, len) IAmiSSL->SSL_get0_server_cert_type((s), (t), (len))
#define SSL_CTX_set1_client_cert_type(ctx, val, len) IAmiSSL->SSL_CTX_set1_client_cert_type((ctx), (val), (len))
#define SSL_CTX_get0_client_cert_type(ctx, t, len) IAmiSSL->SSL_CTX_get0_client_cert_type((ctx), (t), (len))
#define SSL_CTX_set1_server_cert_type(ctx, val, len) IAmiSSL->SSL_CTX_set1_server_cert_type((ctx), (val), (len))
#define SSL_CTX_get0_server_cert_type(s, t, len) IAmiSSL->SSL_CTX_get0_server_cert_type((s), (t), (len))
#define SSL_get_negotiated_client_cert_type(s) IAmiSSL->SSL_get_negotiated_client_cert_type((s))
#define SSL_get_negotiated_server_cert_type(s) IAmiSSL->SSL_get_negotiated_server_cert_type((s))
#define SSL_add_expected_rpk(s, rpk) IAmiSSL->SSL_add_expected_rpk((s), (rpk))
#define d2i_SSL_SESSION_ex(a, pp, length, libctx, propq) IAmiSSL->d2i_SSL_SESSION_ex((a), (pp), (length), (libctx), (propq))
#define SSL_is_tls(s) IAmiSSL->SSL_is_tls((s))
#define SSL_is_quic(s) IAmiSSL->SSL_is_quic((s))
#define SSL_get_handshake_rtt(s, rtt) IAmiSSL->SSL_get_handshake_rtt((s), (rtt))
#define SSL_new_stream(s, flags) IAmiSSL->SSL_new_stream((s), (flags))
#define SSL_get0_connection(s) IAmiSSL->SSL_get0_connection((s))
#define SSL_is_connection(s) IAmiSSL->SSL_is_connection((s))
#define SSL_get_stream_type(s) IAmiSSL->SSL_get_stream_type((s))
#define SSL_get_stream_id(s) IAmiSSL->SSL_get_stream_id((s))
#define SSL_set_default_stream_mode(s, mode) IAmiSSL->SSL_set_default_stream_mode((s), (mode))
#define SSL_accept_stream(s, flags) IAmiSSL->SSL_accept_stream((s), (flags))
#define SSL_get_accept_stream_queue_len(s) IAmiSSL->SSL_get_accept_stream_queue_len((s))
#define SSL_stream_reset(ssl, args, args_len) IAmiSSL->SSL_stream_reset((ssl), (args), (args_len))
#define SSL_get_stream_read_state(ssl) IAmiSSL->SSL_get_stream_read_state((ssl))
#define SSL_get_stream_write_state(ssl) IAmiSSL->SSL_get_stream_write_state((ssl))
#define SSL_get_stream_read_error_code(ssl, app_error_code) IAmiSSL->SSL_get_stream_read_error_code((ssl), (app_error_code))
#define SSL_get_stream_write_error_code(ssl, app_error_code) IAmiSSL->SSL_get_stream_write_error_code((ssl), (app_error_code))
#define SSL_get_conn_close_info(ssl, info, info_len) IAmiSSL->SSL_get_conn_close_info((ssl), (info), (info_len))
#define SSL_set_incoming_stream_policy(s, policy, aec) IAmiSSL->SSL_set_incoming_stream_policy((s), (policy), (aec))
#define SSL_handle_events(s) IAmiSSL->SSL_handle_events((s))
#define SSL_get_event_timeout(s, tv, is_infinite) IAmiSSL->SSL_get_event_timeout((s), (tv), (is_infinite))
#define SSL_get0_group_name(s) IAmiSSL->SSL_get0_group_name((s))
#define SSL_is_stream_local(s) IAmiSSL->SSL_is_stream_local((s))
#define BIO_f_zlib() IAmiSSL->BIO_f_zlib()
#define X509_PUBKEY_set0_public_key(pub, penc, penclen) IAmiSSL->X509_PUBKEY_set0_public_key((pub), (penc), (penclen))
#define OSSL_STACK_OF_X509_free(certs) IAmiSSL->OSSL_STACK_OF_X509_free((certs))
#define OSSL_trace_string(out, text, full, data, size) IAmiSSL->OSSL_trace_string((out), (text), (full), (data), (size))
#define BN_signed_bin2bn(s, len, ret) IAmiSSL->BN_signed_bin2bn((s), (len), (ret))
#define BN_signed_bn2bin(a, to, tolen) IAmiSSL->BN_signed_bn2bin((a), (to), (tolen))
#define BN_signed_lebin2bn(s, len, ret) IAmiSSL->BN_signed_lebin2bn((s), (len), (ret))
#define BN_signed_bn2lebin(a, to, tolen) IAmiSSL->BN_signed_bn2lebin((a), (to), (tolen))
#define BN_signed_native2bn(s, len, ret) IAmiSSL->BN_signed_native2bn((s), (len), (ret))
#define BN_signed_bn2native(a, to, tolen) IAmiSSL->BN_signed_bn2native((a), (to), (tolen))
#define ASYNC_set_mem_functions(alloc_fn, free_fn) IAmiSSL->ASYNC_set_mem_functions((alloc_fn), (free_fn))
#define ASYNC_get_mem_functions(alloc_fn, free_fn) IAmiSSL->ASYNC_get_mem_functions((alloc_fn), (free_fn))
#define BIO_ADDR_dup(ap) IAmiSSL->BIO_ADDR_dup((ap))
#define OSSL_CMP_ITAV_new_caCerts(caCerts) IAmiSSL->OSSL_CMP_ITAV_new_caCerts((caCerts))
#define OSSL_CMP_ITAV_get0_caCerts(itav, out) IAmiSSL->OSSL_CMP_ITAV_get0_caCerts((itav), (out))
#define OSSL_CMP_get1_caCerts(ctx, out) IAmiSSL->OSSL_CMP_get1_caCerts((ctx), (out))
#define OSSL_CMP_ITAV_new_rootCaCert(rootCaCert) IAmiSSL->OSSL_CMP_ITAV_new_rootCaCert((rootCaCert))
#define OSSL_CMP_ITAV_get0_rootCaCert(itav, out) IAmiSSL->OSSL_CMP_ITAV_get0_rootCaCert((itav), (out))
#define OSSL_CMP_ITAV_new_rootCaKeyUpdate(newWithNew, newWithOld, oldWithNew) IAmiSSL->OSSL_CMP_ITAV_new_rootCaKeyUpdate((newWithNew), (newWithOld), (oldWithNew))
#define OSSL_CMP_ITAV_get0_rootCaKeyUpdate(itav, newWithNew, newWithOld, oldWithNew) IAmiSSL->OSSL_CMP_ITAV_get0_rootCaKeyUpdate((itav), (newWithNew), (newWithOld), (oldWithNew))
#define OSSL_CMP_get1_rootCaKeyUpdate(ctx, oldWithOld, newWithNew, newWithOld, oldWithNew) IAmiSSL->OSSL_CMP_get1_rootCaKeyUpdate((ctx), (oldWithOld), (newWithNew), (newWithOld), (oldWithNew))
#define OSSL_CMP_CTX_get0_libctx(ctx) IAmiSSL->OSSL_CMP_CTX_get0_libctx((ctx))
#define OSSL_CMP_CTX_get0_propq(ctx) IAmiSSL->OSSL_CMP_CTX_get0_propq((ctx))
#define OSSL_CMP_CTX_get0_validatedSrvCert(ctx) IAmiSSL->OSSL_CMP_CTX_get0_validatedSrvCert((ctx))
#define OSSL_CMP_CTX_set1_serialNumber(ctx, sn) IAmiSSL->OSSL_CMP_CTX_set1_serialNumber((ctx), (sn))
#define OSSL_CRMF_CERTTEMPLATE_get0_publicKey(tmpl) IAmiSSL->OSSL_CRMF_CERTTEMPLATE_get0_publicKey((tmpl))
#define CMS_final_digest(cms, md, mdlen, dcont, flags) IAmiSSL->CMS_final_digest((cms), (md), (mdlen), (dcont), (flags))
#define CMS_EnvelopedData_it() IAmiSSL->CMS_EnvelopedData_it()
#define CMS_EnvelopedData_decrypt(env, detached_data, pkey, cert, secret, flags, libctx, propq) IAmiSSL->CMS_EnvelopedData_decrypt((env), (detached_data), (pkey), (cert), (secret), (flags), (libctx), (propq))
#define CMS_SignedData_free(a) IAmiSSL->CMS_SignedData_free((a))
#define CMS_SignedData_new() IAmiSSL->CMS_SignedData_new()
#define CMS_SignedData_verify(sd, detached_data, scerts, store, extra, crls, flags, libctx, propq) IAmiSSL->CMS_SignedData_verify((sd), (detached_data), (scerts), (store), (extra), (crls), (flags), (libctx), (propq))
#define BIO_s_dgram_mem() IAmiSSL->BIO_s_dgram_mem()
#define BIO_recvmmsg(b, msg, stride, num_msg, flags, msgs_processed) IAmiSSL->BIO_recvmmsg((b), (msg), (stride), (num_msg), (flags), (msgs_processed))
#define BIO_sendmmsg(b, msg, stride, num_msg, flags, msgs_processed) IAmiSSL->BIO_sendmmsg((b), (msg), (stride), (num_msg), (flags), (msgs_processed))
#define BIO_meth_set_sendmmsg(biom, f) IAmiSSL->BIO_meth_set_sendmmsg((biom), (f))
#define BIO_meth_get_sendmmsg(biom) IAmiSSL->BIO_meth_get_sendmmsg((biom))
#define BIO_meth_set_recvmmsg(biom, f) IAmiSSL->BIO_meth_set_recvmmsg((biom), (f))
#define BIO_meth_get_recvmmsg(biom) IAmiSSL->BIO_meth_get_recvmmsg((biom))
#define BIO_err_is_non_fatal(errcode) IAmiSSL->BIO_err_is_non_fatal((errcode))
#define BIO_s_dgram_pair() IAmiSSL->BIO_s_dgram_pair()
#define BIO_new_bio_dgram_pair(bio1, writebuf1, bio2, writebuf2) IAmiSSL->BIO_new_bio_dgram_pair((bio1), (writebuf1), (bio2), (writebuf2))
#define EVP_PKEY_auth_encapsulate_init(ctx, authpriv, params) IAmiSSL->EVP_PKEY_auth_encapsulate_init((ctx), (authpriv), (params))
#define EVP_PKEY_auth_decapsulate_init(ctx, authpub, params) IAmiSSL->EVP_PKEY_auth_decapsulate_init((ctx), (authpub), (params))
#define PKCS12_SAFEBAG_set0_attrs(bag, attrs) IAmiSSL->PKCS12_SAFEBAG_set0_attrs((bag), (attrs))
#define PKCS12_create_ex2_amiga_1(pass, name, pkey, cert, ca, nid_key, nid_cert, moreargs) IAmiSSL->PKCS12_create_ex2_amiga_1((pass), (name), (pkey), (cert), (ca), (nid_key), (nid_cert), (moreargs))
#define PKCS12_create_ex2_amiga_2(iter, mac_iter, keytype, ctx, propq, cb, cbarg) IAmiSSL->PKCS12_create_ex2_amiga_2((iter), (mac_iter), (keytype), (ctx), (propq), (cb), (cbarg))
#define OSSL_sleep(millis) IAmiSSL->OSSL_sleep((millis))
#define OSSL_get_thread_support_flags() IAmiSSL->OSSL_get_thread_support_flags()
#define OSSL_set_max_threads(ctx, max_threads) IAmiSSL->OSSL_set_max_threads((ctx), (max_threads))
#define OSSL_get_max_threads(ctx) IAmiSSL->OSSL_get_max_threads((ctx))
#define COMP_brotli() IAmiSSL->COMP_brotli()
#define COMP_brotli_oneshot() IAmiSSL->COMP_brotli_oneshot()
#define BIO_f_brotli() IAmiSSL->BIO_f_brotli()
#define COMP_zstd() IAmiSSL->COMP_zstd()
#define COMP_zstd_oneshot() IAmiSSL->COMP_zstd_oneshot()
#define BIO_f_zstd() IAmiSSL->BIO_f_zstd()
#define d2i_PUBKEY_ex_bio(bp, a, libctx, propq) IAmiSSL->d2i_PUBKEY_ex_bio((bp), (a), (libctx), (propq))
#define COMP_zlib_oneshot() IAmiSSL->COMP_zlib_oneshot()
#define OSSL_HPKE_keygen_amiga(suite, pub, publen, priv, ikm, ikmlen, libctx, propq) IAmiSSL->OSSL_HPKE_keygen_amiga((suite), (pub), (publen), (priv), (ikm), (ikmlen), (libctx), (propq))
#define OSSL_HPKE_suite_check_amiga(suite) IAmiSSL->OSSL_HPKE_suite_check_amiga((suite))
#define OSSL_HPKE_get_grease_value(suite_in, suite, enc, enclen, ct, ctlen, libctx, propq) IAmiSSL->OSSL_HPKE_get_grease_value((suite_in), (suite), (enc), (enclen), (ct), (ctlen), (libctx), (propq))
#define OSSL_HPKE_str2suite(str, suite) IAmiSSL->OSSL_HPKE_str2suite((str), (suite))
#define OSSL_HPKE_CTX_free(ctx) IAmiSSL->OSSL_HPKE_CTX_free((ctx))
#define OSSL_HPKE_CTX_new_amiga(mode, suite, role, libctx, propq) IAmiSSL->OSSL_HPKE_CTX_new_amiga((mode), (suite), (role), (libctx), (propq))
#define OSSL_HPKE_CTX_set1_authpriv(ctx, priv) IAmiSSL->OSSL_HPKE_CTX_set1_authpriv((ctx), (priv))
#define OSSL_HPKE_CTX_set1_authpub(ctx, pub, publen) IAmiSSL->OSSL_HPKE_CTX_set1_authpub((ctx), (pub), (publen))
#define OSSL_HPKE_CTX_set1_psk(ctx, pskid, psk, psklen) IAmiSSL->OSSL_HPKE_CTX_set1_psk((ctx), (pskid), (psk), (psklen))
#define OSSL_HPKE_CTX_set1_ikme(ctx, ikme, ikmelen) IAmiSSL->OSSL_HPKE_CTX_set1_ikme((ctx), (ikme), (ikmelen))
#define OSSL_HPKE_get_ciphertext_size_amiga(suite, clearlen) IAmiSSL->OSSL_HPKE_get_ciphertext_size_amiga((suite), (clearlen))
#define OSSL_HPKE_get_public_encap_size_amiga(suite) IAmiSSL->OSSL_HPKE_get_public_encap_size_amiga((suite))
#define OSSL_HPKE_export(ctx, secret, secretlen, label, labellen) IAmiSSL->OSSL_HPKE_export((ctx), (secret), (secretlen), (label), (labellen))
#define OSSL_HPKE_encap(ctx, enc, enclen, pub, publen, info, infolen) IAmiSSL->OSSL_HPKE_encap((ctx), (enc), (enclen), (pub), (publen), (info), (infolen))
#define OSSL_HPKE_decap(ctx, enc, enclen, recippriv, info, infolen) IAmiSSL->OSSL_HPKE_decap((ctx), (enc), (enclen), (recippriv), (info), (infolen))
#define OSSL_HPKE_seal(ctx, ct, ctlen, aad, aadlen, pt, ptlen) IAmiSSL->OSSL_HPKE_seal((ctx), (ct), (ctlen), (aad), (aadlen), (pt), (ptlen))
#define OSSL_HPKE_open(ctx, pt, ptlen, aad, aadlen, ct, ctlen) IAmiSSL->OSSL_HPKE_open((ctx), (pt), (ptlen), (aad), (aadlen), (ct), (ctlen))
#define OSSL_HPKE_CTX_get_seq(ctx, seq) IAmiSSL->OSSL_HPKE_CTX_get_seq((ctx), (seq))
#define OSSL_HPKE_CTX_set_seq(ctx, seq) IAmiSSL->OSSL_HPKE_CTX_set_seq((ctx), (seq))
#define OSSL_HPKE_get_recommended_ikmelen_amiga(suite) IAmiSSL->OSSL_HPKE_get_recommended_ikmelen_amiga((suite))
#define OSSL_PROVIDER_get0_default_search_path(libctx) IAmiSSL->OSSL_PROVIDER_get0_default_search_path((libctx))
#define BIO_get_rpoll_descriptor(b, desc) IAmiSSL->BIO_get_rpoll_descriptor((b), (desc))
#define BIO_get_wpoll_descriptor(b, desc) IAmiSSL->BIO_get_wpoll_descriptor((b), (desc))
#define ASN1_item_unpack_ex(oct, it, libctx, propq) IAmiSSL->ASN1_item_unpack_ex((oct), (it), (libctx), (propq))
#define PKCS12_SAFEBAG_get1_cert_ex(bag, libctx, propq) IAmiSSL->PKCS12_SAFEBAG_get1_cert_ex((bag), (libctx), (propq))
#define PKCS12_SAFEBAG_get1_crl_ex(bag, libctx, propq) IAmiSSL->PKCS12_SAFEBAG_get1_crl_ex((bag), (libctx), (propq))
#define EC_GROUP_to_params(group, libctx, propq, bnctx) IAmiSSL->EC_GROUP_to_params((group), (libctx), (propq), (bnctx))
#define X509_STORE_CTX_init_rpk(ctx, trust_store, rpk) IAmiSSL->X509_STORE_CTX_init_rpk((ctx), (trust_store), (rpk))
#define X509_STORE_CTX_get0_rpk(ctx) IAmiSSL->X509_STORE_CTX_get0_rpk((ctx))
#define X509_STORE_CTX_set0_rpk(ctx, target) IAmiSSL->X509_STORE_CTX_set0_rpk((ctx), (target))
#define CRYPTO_atomic_load_int(val, ret, lock) IAmiSSL->CRYPTO_atomic_load_int((val), (ret), (lock))
#define OSSL_ERR_STATE_new() IAmiSSL->OSSL_ERR_STATE_new()
#define OSSL_ERR_STATE_save(es) IAmiSSL->OSSL_ERR_STATE_save((es))
#define OSSL_ERR_STATE_restore(es) IAmiSSL->OSSL_ERR_STATE_restore((es))
#define OSSL_ERR_STATE_free(es) IAmiSSL->OSSL_ERR_STATE_free((es))
#define ERR_count_to_mark() IAmiSSL->ERR_count_to_mark()
#define OSSL_PROVIDER_load_ex(a, name, params) IAmiSSL->OSSL_PROVIDER_load_ex((a), (name), (params))
#define OSSL_PROVIDER_try_load_ex(a, name, params, retain_fallbacks) IAmiSSL->OSSL_PROVIDER_try_load_ex((a), (name), (params), (retain_fallbacks))
#define OSSL_ERR_STATE_save_to_mark(es) IAmiSSL->OSSL_ERR_STATE_save_to_mark((es))
#define X509_STORE_CTX_set_get_crl(ctx, get_crl) IAmiSSL->X509_STORE_CTX_set_get_crl((ctx), (get_crl))
#define X509_STORE_CTX_set_current_reasons(ctx, current_reasons) IAmiSSL->X509_STORE_CTX_set_current_reasons((ctx), (current_reasons))
#define OSSL_STORE_delete(uri, libctx, propq, ui_method, ui_data, params) IAmiSSL->OSSL_STORE_delete((uri), (libctx), (propq), (ui_method), (ui_data), (params))
#define BIO_ADDR_copy(dst, src) IAmiSSL->BIO_ADDR_copy((dst), (src))
#define SSL_write_ex2(s, buf, num, flags, written) IAmiSSL->SSL_write_ex2((s), (buf), (num), (flags), (written))
#define SSL_get_value_uint(s, class_, id, v) IAmiSSL->SSL_get_value_uint((s), (class_), (id), (v))
#define SSL_set_value_uint(s, class_, id, v) IAmiSSL->SSL_set_value_uint((s), (class_), (id), (v))
#define SSL_poll(items, num_items, stride, timeout, flags, result_count) IAmiSSL->SSL_poll((items), (num_items), (stride), (timeout), (flags), (result_count))
#define SSL_SESSION_get_time_ex(s) IAmiSSL->SSL_SESSION_get_time_ex((s))
#define SSL_SESSION_set_time_ex(s, t) IAmiSSL->SSL_SESSION_set_time_ex((s), (t))
#define OSSL_CMP_CTX_get0_geninfo_ITAVs(ctx) IAmiSSL->OSSL_CMP_CTX_get0_geninfo_ITAVs((ctx))
#define OSSL_CMP_HDR_get0_geninfo_ITAVs(hdr) IAmiSSL->OSSL_CMP_HDR_get0_geninfo_ITAVs((hdr))
#define OSSL_CMP_ITAV_new0_certProfile(certProfile) IAmiSSL->OSSL_CMP_ITAV_new0_certProfile((certProfile))
#define OSSL_CMP_ITAV_get0_certProfile(itav, out) IAmiSSL->OSSL_CMP_ITAV_get0_certProfile((itav), (out))
#define OSSL_CMP_MSG_get0_certreq_publickey(msg) IAmiSSL->OSSL_CMP_MSG_get0_certreq_publickey((msg))
#define OSSL_CMP_SRV_CTX_init_trans(srv_ctx, delay, clean) IAmiSSL->OSSL_CMP_SRV_CTX_init_trans((srv_ctx), (delay), (clean))
#define EVP_DigestSqueeze(ctx, out, outlen) IAmiSSL->EVP_DigestSqueeze((ctx), (out), (outlen))
#define ERR_pop() IAmiSSL->ERR_pop()
#define X509_STORE_get1_objects(xs) IAmiSSL->X509_STORE_get1_objects((xs))
#define OPENSSL_LH_set_thunks(lh, hw, cw, daw, daaw) IAmiSSL->OPENSSL_LH_set_thunks((lh), (hw), (cw), (daw), (daaw))
#define OPENSSL_LH_doall_arg_thunk(lh, daaw, fn, arg) IAmiSSL->OPENSSL_LH_doall_arg_thunk((lh), (daaw), (fn), (arg))
#define OSSL_HTTP_REQ_CTX_set_max_response_hdr_lines(rctx, count) IAmiSSL->OSSL_HTTP_REQ_CTX_set_max_response_hdr_lines((rctx), (count))
#define SSL_CTX_flush_sessions_ex(ctx, tm) IAmiSSL->SSL_CTX_flush_sessions_ex((ctx), (tm))
#define SSL_CTX_set_block_padding_ex(ctx, app_block_size, hs_block_size) IAmiSSL->SSL_CTX_set_block_padding_ex((ctx), (app_block_size), (hs_block_size))
#define SSL_set_block_padding_ex(ssl, app_block_size, hs_block_size) IAmiSSL->SSL_set_block_padding_ex((ssl), (app_block_size), (hs_block_size))
#define SSL_get1_builtin_sigalgs(libctx) IAmiSSL->SSL_get1_builtin_sigalgs((libctx))
#define DIST_POINT_NAME_dup(a) IAmiSSL->DIST_POINT_NAME_dup((a))
#define GENERAL_NAME_set1_X509_NAME(tgt, src) IAmiSSL->GENERAL_NAME_set1_X509_NAME((tgt), (src))
#define OSSL_CMP_CRLSTATUS_create(crl, cert, only_DN) IAmiSSL->OSSL_CMP_CRLSTATUS_create((crl), (cert), (only_DN))
#define OSSL_CMP_CRLSTATUS_free(crlstatus) IAmiSSL->OSSL_CMP_CRLSTATUS_free((crlstatus))
#define OSSL_CMP_CRLSTATUS_get0(crlstatus, dpn, issuer, thisUpdate) IAmiSSL->OSSL_CMP_CRLSTATUS_get0((crlstatus), (dpn), (issuer), (thisUpdate))
#define OSSL_CMP_CRLSTATUS_new1(dpn, issuer, thisUpdate) IAmiSSL->OSSL_CMP_CRLSTATUS_new1((dpn), (issuer), (thisUpdate))
#define OSSL_CMP_ITAV_get0_crlStatusList(itav, out) IAmiSSL->OSSL_CMP_ITAV_get0_crlStatusList((itav), (out))
#define OSSL_CMP_ITAV_get0_crls(it, out) IAmiSSL->OSSL_CMP_ITAV_get0_crls((it), (out))
#define OSSL_CMP_ITAV_new0_crlStatusList(crlStatusList) IAmiSSL->OSSL_CMP_ITAV_new0_crlStatusList((crlStatusList))
#define OSSL_CMP_ITAV_new_crls(crls) IAmiSSL->OSSL_CMP_ITAV_new_crls((crls))
#define OSSL_CMP_get1_crlUpdate(ctx, crlcert, last_crl, crl) IAmiSSL->OSSL_CMP_get1_crlUpdate((ctx), (crlcert), (last_crl), (crl))
#define OSSL_CMP_ITAV_new0_certReqTemplate(certTemplate, keySpec) IAmiSSL->OSSL_CMP_ITAV_new0_certReqTemplate((certTemplate), (keySpec))
#define OSSL_CMP_ITAV_get1_certReqTemplate(itav, certTemplate, keySpec) IAmiSSL->OSSL_CMP_ITAV_get1_certReqTemplate((itav), (certTemplate), (keySpec))
#define OSSL_CMP_ATAV_create(type, value) IAmiSSL->OSSL_CMP_ATAV_create((type), (value))
#define OSSL_CMP_ATAV_set0(itav, type, value) IAmiSSL->OSSL_CMP_ATAV_set0((itav), (type), (value))
#define OSSL_CMP_ATAV_get0_type(itav) IAmiSSL->OSSL_CMP_ATAV_get0_type((itav))
#define OSSL_CMP_ATAV_get0_value(itav) IAmiSSL->OSSL_CMP_ATAV_get0_value((itav))
#define OSSL_CMP_ATAV_new_algId(alg) IAmiSSL->OSSL_CMP_ATAV_new_algId((alg))
#define OSSL_CMP_ATAV_get0_algId(atav) IAmiSSL->OSSL_CMP_ATAV_get0_algId((atav))
#define OSSL_CMP_ATAV_new_rsaKeyLen(len) IAmiSSL->OSSL_CMP_ATAV_new_rsaKeyLen((len))
#define OSSL_CMP_ATAV_get_rsaKeyLen(atav) IAmiSSL->OSSL_CMP_ATAV_get_rsaKeyLen((atav))
#define OSSL_CMP_ATAV_push1(sk_p, atav) IAmiSSL->OSSL_CMP_ATAV_push1((sk_p), (atav))
#define OSSL_CMP_get1_certReqTemplate(ctx, certTemplate, keySpec) IAmiSSL->OSSL_CMP_get1_certReqTemplate((ctx), (certTemplate), (keySpec))
#define d2i_OSSL_CMP_ATAVS(a, in, len) IAmiSSL->d2i_OSSL_CMP_ATAVS((a), (in), (len))
#define i2d_OSSL_CMP_ATAVS(a, out) IAmiSSL->i2d_OSSL_CMP_ATAVS((a), (out))
#define OSSL_CMP_ATAVS_free(a) IAmiSSL->OSSL_CMP_ATAVS_free((a))
#define OSSL_CMP_ATAVS_new() IAmiSSL->OSSL_CMP_ATAVS_new()
#define OSSL_CMP_ATAVS_it() IAmiSSL->OSSL_CMP_ATAVS_it()
#define OSSL_CRMF_ATTRIBUTETYPEANDVALUE_free(v) IAmiSSL->OSSL_CRMF_ATTRIBUTETYPEANDVALUE_free((v))
#define OSSL_CRMF_ATTRIBUTETYPEANDVALUE_dup(a) IAmiSSL->OSSL_CRMF_ATTRIBUTETYPEANDVALUE_dup((a))
#define OSSL_CRMF_CERTTEMPLATE_dup(a) IAmiSSL->OSSL_CRMF_CERTTEMPLATE_dup((a))
#define CRYPTO_atomic_store(dst, val, lock) IAmiSSL->CRYPTO_atomic_store((dst), (val), (lock))
#define CRYPTO_aligned_alloc(num, align, freeptr, file, line) IAmiSSL->CRYPTO_aligned_alloc((num), (align), (freeptr), (file), (line))
#define X509v3_add_extensions(target, exts) IAmiSSL->X509v3_add_extensions((target), (exts))
#define PKCS12_set_pbmac1_pbkdf2(p12, pass, passlen, salt, saltlen, iter, md_type, prf_md_name) IAmiSSL->PKCS12_set_pbmac1_pbkdf2((p12), (pass), (passlen), (salt), (saltlen), (iter), (md_type), (prf_md_name))
#define PBMAC1_get1_pbkdf2_param(macalg) IAmiSSL->PBMAC1_get1_pbkdf2_param((macalg))
#define d2i_PBMAC1PARAM(a, in, len) IAmiSSL->d2i_PBMAC1PARAM((a), (in), (len))
#define i2d_PBMAC1PARAM(a, out) IAmiSSL->i2d_PBMAC1PARAM((a), (out))
#define PBMAC1PARAM_free(a) IAmiSSL->PBMAC1PARAM_free((a))
#define PBMAC1PARAM_new() IAmiSSL->PBMAC1PARAM_new()
#define PBMAC1PARAM_it() IAmiSSL->PBMAC1PARAM_it()
#define OSSL_LIB_CTX_get_conf_diagnostics(ctx) IAmiSSL->OSSL_LIB_CTX_get_conf_diagnostics((ctx))
#define OSSL_LIB_CTX_set_conf_diagnostics(ctx, value) IAmiSSL->OSSL_LIB_CTX_set_conf_diagnostics((ctx), (value))
#define OSSL_LIB_CTX_get_data(ctx, index) IAmiSSL->OSSL_LIB_CTX_get_data((ctx), (index))
#define OSSL_GENERAL_NAMES_print(out, gens, indent) IAmiSSL->OSSL_GENERAL_NAMES_print((out), (gens), (indent))
#define TS_VERIFY_CTX_set0_data(ctx, b) IAmiSSL->TS_VERIFY_CTX_set0_data((ctx), (b))
#define TS_VERIFY_CTX_set0_imprint(ctx, hexstr, len) IAmiSSL->TS_VERIFY_CTX_set0_imprint((ctx), (hexstr), (len))
#define TS_VERIFY_CTX_set0_store(ctx, s) IAmiSSL->TS_VERIFY_CTX_set0_store((ctx), (s))
#define TS_VERIFY_CTX_set0_certs(ctx, certs) IAmiSSL->TS_VERIFY_CTX_set0_certs((ctx), (certs))
#define CRYPTO_atomic_add64(val, op, ret, lock) IAmiSSL->CRYPTO_atomic_add64((val), (op), (ret), (lock))
#define CRYPTO_atomic_and(val, op, ret, lock) IAmiSSL->CRYPTO_atomic_and((val), (op), (ret), (lock))
#define d2i_OSSL_ATTRIBUTES_SYNTAX(a, in, len) IAmiSSL->d2i_OSSL_ATTRIBUTES_SYNTAX((a), (in), (len))
#define i2d_OSSL_ATTRIBUTES_SYNTAX(a, out) IAmiSSL->i2d_OSSL_ATTRIBUTES_SYNTAX((a), (out))
#define OSSL_ATTRIBUTES_SYNTAX_free(a) IAmiSSL->OSSL_ATTRIBUTES_SYNTAX_free((a))
#define OSSL_ATTRIBUTES_SYNTAX_new() IAmiSSL->OSSL_ATTRIBUTES_SYNTAX_new()
#define OSSL_ATTRIBUTES_SYNTAX_it() IAmiSSL->OSSL_ATTRIBUTES_SYNTAX_it()
#define d2i_OSSL_USER_NOTICE_SYNTAX(a, in, len) IAmiSSL->d2i_OSSL_USER_NOTICE_SYNTAX((a), (in), (len))
#define i2d_OSSL_USER_NOTICE_SYNTAX(a, out) IAmiSSL->i2d_OSSL_USER_NOTICE_SYNTAX((a), (out))
#define OSSL_USER_NOTICE_SYNTAX_free(a) IAmiSSL->OSSL_USER_NOTICE_SYNTAX_free((a))
#define OSSL_USER_NOTICE_SYNTAX_new() IAmiSSL->OSSL_USER_NOTICE_SYNTAX_new()
#define OSSL_USER_NOTICE_SYNTAX_it() IAmiSSL->OSSL_USER_NOTICE_SYNTAX_it()
#define OSSL_INDICATOR_set_callback(libctx, cb) IAmiSSL->OSSL_INDICATOR_set_callback((libctx), (cb))
#define OSSL_INDICATOR_get_callback(libctx, cb) IAmiSSL->OSSL_INDICATOR_get_callback((libctx), (cb))
#define OPENSSL_strtoul(str, endptr, base, num) IAmiSSL->OPENSSL_strtoul((str), (endptr), (base), (num))
#define d2i_OSSL_BASIC_ATTR_CONSTRAINTS(a, in, len) IAmiSSL->d2i_OSSL_BASIC_ATTR_CONSTRAINTS((a), (in), (len))
#define i2d_OSSL_BASIC_ATTR_CONSTRAINTS(a, out) IAmiSSL->i2d_OSSL_BASIC_ATTR_CONSTRAINTS((a), (out))
#define OSSL_BASIC_ATTR_CONSTRAINTS_free(a) IAmiSSL->OSSL_BASIC_ATTR_CONSTRAINTS_free((a))
#define OSSL_BASIC_ATTR_CONSTRAINTS_new() IAmiSSL->OSSL_BASIC_ATTR_CONSTRAINTS_new()
#define OSSL_BASIC_ATTR_CONSTRAINTS_it() IAmiSSL->OSSL_BASIC_ATTR_CONSTRAINTS_it()
#define EVP_KEYMGMT_gen_gettable_params(keymgmt) IAmiSSL->EVP_KEYMGMT_gen_gettable_params((keymgmt))
#define EVP_PKEY_CTX_set_signature(pctx, sig, siglen) IAmiSSL->EVP_PKEY_CTX_set_signature((pctx), (sig), (siglen))
#define EVP_PKEY_sign_init_ex2(ctx, algo, params) IAmiSSL->EVP_PKEY_sign_init_ex2((ctx), (algo), (params))
#define EVP_PKEY_sign_message_init(ctx, algo, params) IAmiSSL->EVP_PKEY_sign_message_init((ctx), (algo), (params))
#define EVP_PKEY_sign_message_update(ctx, in, inlen) IAmiSSL->EVP_PKEY_sign_message_update((ctx), (in), (inlen))
#define EVP_PKEY_sign_message_final(ctx, sig, siglen) IAmiSSL->EVP_PKEY_sign_message_final((ctx), (sig), (siglen))
#define EVP_PKEY_verify_init_ex2(ctx, algo, params) IAmiSSL->EVP_PKEY_verify_init_ex2((ctx), (algo), (params))
#define EVP_PKEY_verify_message_init(ctx, algo, params) IAmiSSL->EVP_PKEY_verify_message_init((ctx), (algo), (params))
#define EVP_PKEY_verify_message_update(ctx, in, inlen) IAmiSSL->EVP_PKEY_verify_message_update((ctx), (in), (inlen))
#define EVP_PKEY_verify_message_final(ctx) IAmiSSL->EVP_PKEY_verify_message_final((ctx))
#define EVP_PKEY_verify_recover_init_ex2(ctx, algo, params) IAmiSSL->EVP_PKEY_verify_recover_init_ex2((ctx), (algo), (params))
#define EVP_MD_xof(md) IAmiSSL->EVP_MD_xof((md))
#define EVP_MD_CTX_get_size_ex(ctx) IAmiSSL->EVP_MD_CTX_get_size_ex((ctx))
#define EVP_CIPHER_CTX_set_algor_params(ctx, alg) IAmiSSL->EVP_CIPHER_CTX_set_algor_params((ctx), (alg))
#define EVP_CIPHER_CTX_get_algor_params(ctx, alg) IAmiSSL->EVP_CIPHER_CTX_get_algor_params((ctx), (alg))
#define EVP_CIPHER_CTX_get_algor(ctx, alg) IAmiSSL->EVP_CIPHER_CTX_get_algor((ctx), (alg))
#define EVP_PKEY_CTX_set_algor_params(ctx, alg) IAmiSSL->EVP_PKEY_CTX_set_algor_params((ctx), (alg))
#define EVP_PKEY_CTX_get_algor_params(ctx, alg) IAmiSSL->EVP_PKEY_CTX_get_algor_params((ctx), (alg))
#define EVP_PKEY_CTX_get_algor(ctx, alg) IAmiSSL->EVP_PKEY_CTX_get_algor((ctx), (alg))
#define d2i_X509_ACERT(a, in, len) IAmiSSL->d2i_X509_ACERT((a), (in), (len))
#define i2d_X509_ACERT(a, out) IAmiSSL->i2d_X509_ACERT((a), (out))
#define X509_ACERT_free(a) IAmiSSL->X509_ACERT_free((a))
#define X509_ACERT_new() IAmiSSL->X509_ACERT_new()
#define X509_ACERT_it() IAmiSSL->X509_ACERT_it()
#define X509_ACERT_dup(a) IAmiSSL->X509_ACERT_dup((a))
#define X509_ACERT_INFO_it() IAmiSSL->X509_ACERT_INFO_it()
#define X509_ACERT_INFO_free(a) IAmiSSL->X509_ACERT_INFO_free((a))
#define X509_ACERT_INFO_new() IAmiSSL->X509_ACERT_INFO_new()
#define OSSL_OBJECT_DIGEST_INFO_free(a) IAmiSSL->OSSL_OBJECT_DIGEST_INFO_free((a))
#define OSSL_OBJECT_DIGEST_INFO_new() IAmiSSL->OSSL_OBJECT_DIGEST_INFO_new()
#define OSSL_ISSUER_SERIAL_free(a) IAmiSSL->OSSL_ISSUER_SERIAL_free((a))
#define OSSL_ISSUER_SERIAL_new() IAmiSSL->OSSL_ISSUER_SERIAL_new()
#define X509_ACERT_ISSUER_V2FORM_free(a) IAmiSSL->X509_ACERT_ISSUER_V2FORM_free((a))
#define X509_ACERT_ISSUER_V2FORM_new() IAmiSSL->X509_ACERT_ISSUER_V2FORM_new()
#define PEM_read_bio_X509_ACERT(out, x, cb, u) IAmiSSL->PEM_read_bio_X509_ACERT((out), (x), (cb), (u))
#define PEM_write_bio_X509_ACERT(out, x) IAmiSSL->PEM_write_bio_X509_ACERT((out), (x))
#define d2i_X509_ACERT_bio(bp, acert) IAmiSSL->d2i_X509_ACERT_bio((bp), (acert))
#define i2d_X509_ACERT_bio(bp, acert) IAmiSSL->i2d_X509_ACERT_bio((bp), (acert))
#define X509_ACERT_get0_holder_entityName(x) IAmiSSL->X509_ACERT_get0_holder_entityName((x))
#define X509_ACERT_get0_holder_baseCertId(x) IAmiSSL->X509_ACERT_get0_holder_baseCertId((x))
#define X509_ACERT_get0_holder_digest(x) IAmiSSL->X509_ACERT_get0_holder_digest((x))
#define X509_ACERT_get0_issuerName(x) IAmiSSL->X509_ACERT_get0_issuerName((x))
#define X509_ACERT_get_version(x) IAmiSSL->X509_ACERT_get_version((x))
#define X509_ACERT_get0_signature(x, psig, palg) IAmiSSL->X509_ACERT_get0_signature((x), (psig), (palg))
#define X509_ACERT_get_signature_nid(x) IAmiSSL->X509_ACERT_get_signature_nid((x))
#define X509_ACERT_get0_info_sigalg(x) IAmiSSL->X509_ACERT_get0_info_sigalg((x))
#define X509_ACERT_get0_serialNumber(x) IAmiSSL->X509_ACERT_get0_serialNumber((x))
#define X509_ACERT_get0_notBefore(x) IAmiSSL->X509_ACERT_get0_notBefore((x))
#define X509_ACERT_get0_notAfter(x) IAmiSSL->X509_ACERT_get0_notAfter((x))
#define X509_ACERT_get0_issuerUID(x) IAmiSSL->X509_ACERT_get0_issuerUID((x))
#define X509_ACERT_set_version(x, version) IAmiSSL->X509_ACERT_set_version((x), (version))
#define X509_ACERT_set0_holder_entityName(x, name) IAmiSSL->X509_ACERT_set0_holder_entityName((x), (name))
#define X509_ACERT_set0_holder_baseCertId(x, isss) IAmiSSL->X509_ACERT_set0_holder_baseCertId((x), (isss))
#define X509_ACERT_set0_holder_digest(x, dinfo) IAmiSSL->X509_ACERT_set0_holder_digest((x), (dinfo))
#define X509_ACERT_set1_issuerName(x, name) IAmiSSL->X509_ACERT_set1_issuerName((x), (name))
#define X509_ACERT_set1_serialNumber(x, serial) IAmiSSL->X509_ACERT_set1_serialNumber((x), (serial))
#define X509_ACERT_set1_notBefore(x, time) IAmiSSL->X509_ACERT_set1_notBefore((x), (time))
#define X509_ACERT_set1_notAfter(x, time) IAmiSSL->X509_ACERT_set1_notAfter((x), (time))
#define OSSL_OBJECT_DIGEST_INFO_get0_digest(o, digestedObjectType, digestAlgorithm, digest) IAmiSSL->OSSL_OBJECT_DIGEST_INFO_get0_digest((o), (digestedObjectType), (digestAlgorithm), (digest))
#define OSSL_OBJECT_DIGEST_INFO_set1_digest(o, digestedObjectType, digestAlgorithm, digest) IAmiSSL->OSSL_OBJECT_DIGEST_INFO_set1_digest((o), (digestedObjectType), (digestAlgorithm), (digest))
#define OSSL_ISSUER_SERIAL_get0_issuer(isss) IAmiSSL->OSSL_ISSUER_SERIAL_get0_issuer((isss))
#define OSSL_ISSUER_SERIAL_get0_serial(isss) IAmiSSL->OSSL_ISSUER_SERIAL_get0_serial((isss))
#define OSSL_ISSUER_SERIAL_get0_issuerUID(isss) IAmiSSL->OSSL_ISSUER_SERIAL_get0_issuerUID((isss))
#define OSSL_ISSUER_SERIAL_set1_issuer(isss, issuer) IAmiSSL->OSSL_ISSUER_SERIAL_set1_issuer((isss), (issuer))
#define OSSL_ISSUER_SERIAL_set1_serial(isss, serial) IAmiSSL->OSSL_ISSUER_SERIAL_set1_serial((isss), (serial))
#define OSSL_ISSUER_SERIAL_set1_issuerUID(isss, uid) IAmiSSL->OSSL_ISSUER_SERIAL_set1_issuerUID((isss), (uid))
#define X509_ACERT_print(bp, x) IAmiSSL->X509_ACERT_print((bp), (x))
#define X509_ACERT_print_ex(bp, x, nmflags, cflag) IAmiSSL->X509_ACERT_print_ex((bp), (x), (nmflags), (cflag))
#define X509_ACERT_get_attr_count(x) IAmiSSL->X509_ACERT_get_attr_count((x))
#define X509_ACERT_get_attr_by_NID(x, nid, lastpos) IAmiSSL->X509_ACERT_get_attr_by_NID((x), (nid), (lastpos))
#define X509_ACERT_get_attr_by_OBJ(x, obj, lastpos) IAmiSSL->X509_ACERT_get_attr_by_OBJ((x), (obj), (lastpos))
#define X509_ACERT_get_attr(x, loc) IAmiSSL->X509_ACERT_get_attr((x), (loc))
#define X509_ACERT_delete_attr(x, loc) IAmiSSL->X509_ACERT_delete_attr((x), (loc))
#define X509_ACERT_add1_attr(x, attr) IAmiSSL->X509_ACERT_add1_attr((x), (attr))
#define X509_ACERT_add1_attr_by_OBJ(x, obj, type, bytes, len) IAmiSSL->X509_ACERT_add1_attr_by_OBJ((x), (obj), (type), (bytes), (len))
#define X509_ACERT_add1_attr_by_NID(x, nid, type, bytes, len) IAmiSSL->X509_ACERT_add1_attr_by_NID((x), (nid), (type), (bytes), (len))
#define X509_ACERT_add1_attr_by_txt(x, attrname, type, bytes, len) IAmiSSL->X509_ACERT_add1_attr_by_txt((x), (attrname), (type), (bytes), (len))
#define X509_ACERT_sign(x, pkey, md) IAmiSSL->X509_ACERT_sign((x), (pkey), (md))
#define X509_ACERT_sign_ctx(x, ctx) IAmiSSL->X509_ACERT_sign_ctx((x), (ctx))
#define X509_ACERT_verify(a, r) IAmiSSL->X509_ACERT_verify((a), (r))
#define X509_ACERT_get_ext_d2i(x, nid, crit, idx) IAmiSSL->X509_ACERT_get_ext_d2i((x), (nid), (crit), (idx))
#define X509_ACERT_add1_ext_i2d(x, nid, value, crit, flags) IAmiSSL->X509_ACERT_add1_ext_i2d((x), (nid), (value), (crit), (flags))
#define X509_ACERT_get0_extensions(x) IAmiSSL->X509_ACERT_get0_extensions((x))
#define OSSL_IETF_ATTR_SYNTAX_VALUE_it() IAmiSSL->OSSL_IETF_ATTR_SYNTAX_VALUE_it()
#define OSSL_IETF_ATTR_SYNTAX_VALUE_free(a) IAmiSSL->OSSL_IETF_ATTR_SYNTAX_VALUE_free((a))
#define OSSL_IETF_ATTR_SYNTAX_VALUE_new() IAmiSSL->OSSL_IETF_ATTR_SYNTAX_VALUE_new()
#define d2i_OSSL_IETF_ATTR_SYNTAX(a, in, len) IAmiSSL->d2i_OSSL_IETF_ATTR_SYNTAX((a), (in), (len))
#define i2d_OSSL_IETF_ATTR_SYNTAX(a, out) IAmiSSL->i2d_OSSL_IETF_ATTR_SYNTAX((a), (out))
#define OSSL_IETF_ATTR_SYNTAX_free(a) IAmiSSL->OSSL_IETF_ATTR_SYNTAX_free((a))
#define OSSL_IETF_ATTR_SYNTAX_new() IAmiSSL->OSSL_IETF_ATTR_SYNTAX_new()
#define OSSL_IETF_ATTR_SYNTAX_it() IAmiSSL->OSSL_IETF_ATTR_SYNTAX_it()
#define OSSL_IETF_ATTR_SYNTAX_get0_policyAuthority(a) IAmiSSL->OSSL_IETF_ATTR_SYNTAX_get0_policyAuthority((a))
#define OSSL_IETF_ATTR_SYNTAX_set0_policyAuthority(a, names) IAmiSSL->OSSL_IETF_ATTR_SYNTAX_set0_policyAuthority((a), (names))
#define OSSL_IETF_ATTR_SYNTAX_get_value_num(a) IAmiSSL->OSSL_IETF_ATTR_SYNTAX_get_value_num((a))
#define OSSL_IETF_ATTR_SYNTAX_get0_value(a, ind, type) IAmiSSL->OSSL_IETF_ATTR_SYNTAX_get0_value((a), (ind), (type))
#define OSSL_IETF_ATTR_SYNTAX_add1_value(a, type, data) IAmiSSL->OSSL_IETF_ATTR_SYNTAX_add1_value((a), (type), (data))
#define OSSL_IETF_ATTR_SYNTAX_print(bp, a, indent) IAmiSSL->OSSL_IETF_ATTR_SYNTAX_print((bp), (a), (indent))
#define X509_ACERT_add_attr_nconf(conf, section, acert) IAmiSSL->X509_ACERT_add_attr_nconf((conf), (section), (acert))
#define d2i_OSSL_TARGET(a, in, len) IAmiSSL->d2i_OSSL_TARGET((a), (in), (len))
#define i2d_OSSL_TARGET(a, out) IAmiSSL->i2d_OSSL_TARGET((a), (out))
#define OSSL_TARGET_free(a) IAmiSSL->OSSL_TARGET_free((a))
#define OSSL_TARGET_new() IAmiSSL->OSSL_TARGET_new()
#define OSSL_TARGET_it() IAmiSSL->OSSL_TARGET_it()
#define d2i_OSSL_TARGETS(a, in, len) IAmiSSL->d2i_OSSL_TARGETS((a), (in), (len))
#define i2d_OSSL_TARGETS(a, out) IAmiSSL->i2d_OSSL_TARGETS((a), (out))
#define OSSL_TARGETS_free(a) IAmiSSL->OSSL_TARGETS_free((a))
#define OSSL_TARGETS_new() IAmiSSL->OSSL_TARGETS_new()
#define OSSL_TARGETS_it() IAmiSSL->OSSL_TARGETS_it()
#define d2i_OSSL_TARGETING_INFORMATION(a, in, len) IAmiSSL->d2i_OSSL_TARGETING_INFORMATION((a), (in), (len))
#define i2d_OSSL_TARGETING_INFORMATION(a, out) IAmiSSL->i2d_OSSL_TARGETING_INFORMATION((a), (out))
#define OSSL_TARGETING_INFORMATION_free(a) IAmiSSL->OSSL_TARGETING_INFORMATION_free((a))
#define OSSL_TARGETING_INFORMATION_new() IAmiSSL->OSSL_TARGETING_INFORMATION_new()
#define OSSL_TARGETING_INFORMATION_it() IAmiSSL->OSSL_TARGETING_INFORMATION_it()
#define SSL_set_quic_tls_cbs(s, qtdis, arg) IAmiSSL->SSL_set_quic_tls_cbs((s), (qtdis), (arg))
#define SSL_set_quic_tls_transport_params(s, params, params_len) IAmiSSL->SSL_set_quic_tls_transport_params((s), (params), (params_len))
#define SSL_set_quic_tls_early_data_enabled(s, enabled) IAmiSSL->SSL_set_quic_tls_early_data_enabled((s), (enabled))
#define OSSL_QUIC_server_method() IAmiSSL->OSSL_QUIC_server_method()
#define SSL_is_listener(ssl) IAmiSSL->SSL_is_listener((ssl))
#define SSL_get0_listener(s) IAmiSSL->SSL_get0_listener((s))
#define SSL_new_listener(ctx, flags) IAmiSSL->SSL_new_listener((ctx), (flags))
#define SSL_accept_connection(ssl, flags) IAmiSSL->SSL_accept_connection((ssl), (flags))
#define SSL_get_accept_connection_queue_len(ssl) IAmiSSL->SSL_get_accept_connection_queue_len((ssl))
#define SSL_listen(ssl) IAmiSSL->SSL_listen((ssl))
#define SSL_new_from_listener(ssl, flags) IAmiSSL->SSL_new_from_listener((ssl), (flags))
#define SSL_new_listener_from(ssl, flags) IAmiSSL->SSL_new_listener_from((ssl), (flags))
#define SSL_is_domain(s) IAmiSSL->SSL_is_domain((s))
#define SSL_get0_domain(s) IAmiSSL->SSL_get0_domain((s))
#define SSL_new_domain(ctx, flags) IAmiSSL->SSL_new_domain((ctx), (flags))
#define SSL_CTX_set_domain_flags(ctx, domain_flags) IAmiSSL->SSL_CTX_set_domain_flags((ctx), (domain_flags))
#define SSL_CTX_get_domain_flags(ctx, domain_flags) IAmiSSL->SSL_CTX_get_domain_flags((ctx), (domain_flags))
#define SSL_get_domain_flags(ssl, domain_flags) IAmiSSL->SSL_get_domain_flags((ssl), (domain_flags))
#define SSL_CTX_set_new_pending_conn_cb(c, cb, arg) IAmiSSL->SSL_CTX_set_new_pending_conn_cb((c), (cb), (arg))
#define X509_VERIFY_PARAM_get_purpose(param) IAmiSSL->X509_VERIFY_PARAM_get_purpose((param))
#define d2i_OSSL_CRMF_ENCRYPTEDKEY(a, in, len) IAmiSSL->d2i_OSSL_CRMF_ENCRYPTEDKEY((a), (in), (len))
#define i2d_OSSL_CRMF_ENCRYPTEDKEY(a, out) IAmiSSL->i2d_OSSL_CRMF_ENCRYPTEDKEY((a), (out))
#define OSSL_CRMF_ENCRYPTEDKEY_free(a) IAmiSSL->OSSL_CRMF_ENCRYPTEDKEY_free((a))
#define OSSL_CRMF_ENCRYPTEDKEY_new() IAmiSSL->OSSL_CRMF_ENCRYPTEDKEY_new()
#define OSSL_CRMF_ENCRYPTEDKEY_it() IAmiSSL->OSSL_CRMF_ENCRYPTEDKEY_it()
#define OSSL_CRMF_ENCRYPTEDKEY_get1_encCert(ecert, libctx, propq, pkey, flags) IAmiSSL->OSSL_CRMF_ENCRYPTEDKEY_get1_encCert((ecert), (libctx), (propq), (pkey), (flags))
#define OSSL_CRMF_ENCRYPTEDVALUE_decrypt(enc, libctx, propq, pkey, outlen) IAmiSSL->OSSL_CRMF_ENCRYPTEDVALUE_decrypt((enc), (libctx), (propq), (pkey), (outlen))
#define OSSL_CRMF_ENCRYPTEDKEY_get1_pkey(encryptedKey, ts, extra, pkey, cert, secret, libctx, propq) IAmiSSL->OSSL_CRMF_ENCRYPTEDKEY_get1_pkey((encryptedKey), (ts), (extra), (pkey), (cert), (secret), (libctx), (propq))
#define OSSL_CRMF_MSG_centralkeygen_requested(crm, p10cr) IAmiSSL->OSSL_CRMF_MSG_centralkeygen_requested((crm), (p10cr))
#define CMS_EnvelopedData_dup(a) IAmiSSL->CMS_EnvelopedData_dup((a))
#define OSSL_CRMF_ENCRYPTEDKEY_init_envdata(envdata) IAmiSSL->OSSL_CRMF_ENCRYPTEDKEY_init_envdata((envdata))
#define EVP_get1_default_properties(libctx) IAmiSSL->EVP_get1_default_properties((libctx))
#define RAND_set1_random_provider(ctx, p) IAmiSSL->RAND_set1_random_provider((ctx), (p))
#define X509_PURPOSE_get_unused_id(libctx) IAmiSSL->X509_PURPOSE_get_unused_id((libctx))
#define d2i_OSSL_AUTHORITY_ATTRIBUTE_ID_SYNTAX(a, in, len) IAmiSSL->d2i_OSSL_AUTHORITY_ATTRIBUTE_ID_SYNTAX((a), (in), (len))
#define i2d_OSSL_AUTHORITY_ATTRIBUTE_ID_SYNTAX(a, out) IAmiSSL->i2d_OSSL_AUTHORITY_ATTRIBUTE_ID_SYNTAX((a), (out))
#define OSSL_AUTHORITY_ATTRIBUTE_ID_SYNTAX_free(a) IAmiSSL->OSSL_AUTHORITY_ATTRIBUTE_ID_SYNTAX_free((a))
#define OSSL_AUTHORITY_ATTRIBUTE_ID_SYNTAX_new() IAmiSSL->OSSL_AUTHORITY_ATTRIBUTE_ID_SYNTAX_new()
#define OSSL_AUTHORITY_ATTRIBUTE_ID_SYNTAX_it() IAmiSSL->OSSL_AUTHORITY_ATTRIBUTE_ID_SYNTAX_it()
#define d2i_OSSL_ROLE_SPEC_CERT_ID(a, in, len) IAmiSSL->d2i_OSSL_ROLE_SPEC_CERT_ID((a), (in), (len))
#define i2d_OSSL_ROLE_SPEC_CERT_ID(a, out) IAmiSSL->i2d_OSSL_ROLE_SPEC_CERT_ID((a), (out))
#define OSSL_ROLE_SPEC_CERT_ID_free(a) IAmiSSL->OSSL_ROLE_SPEC_CERT_ID_free((a))
#define OSSL_ROLE_SPEC_CERT_ID_new() IAmiSSL->OSSL_ROLE_SPEC_CERT_ID_new()
#define OSSL_ROLE_SPEC_CERT_ID_it() IAmiSSL->OSSL_ROLE_SPEC_CERT_ID_it()
#define d2i_OSSL_ROLE_SPEC_CERT_ID_SYNTAX(a, in, len) IAmiSSL->d2i_OSSL_ROLE_SPEC_CERT_ID_SYNTAX((a), (in), (len))
#define i2d_OSSL_ROLE_SPEC_CERT_ID_SYNTAX(a, out) IAmiSSL->i2d_OSSL_ROLE_SPEC_CERT_ID_SYNTAX((a), (out))
#define OSSL_ROLE_SPEC_CERT_ID_SYNTAX_free(a) IAmiSSL->OSSL_ROLE_SPEC_CERT_ID_SYNTAX_free((a))
#define OSSL_ROLE_SPEC_CERT_ID_SYNTAX_new() IAmiSSL->OSSL_ROLE_SPEC_CERT_ID_SYNTAX_new()
#define OSSL_ROLE_SPEC_CERT_ID_SYNTAX_it() IAmiSSL->OSSL_ROLE_SPEC_CERT_ID_SYNTAX_it()
#define d2i_OSSL_ATTRIBUTE_DESCRIPTOR(a, in, len) IAmiSSL->d2i_OSSL_ATTRIBUTE_DESCRIPTOR((a), (in), (len))
#define i2d_OSSL_ATTRIBUTE_DESCRIPTOR(a, out) IAmiSSL->i2d_OSSL_ATTRIBUTE_DESCRIPTOR((a), (out))
#define OSSL_ATTRIBUTE_DESCRIPTOR_free(a) IAmiSSL->OSSL_ATTRIBUTE_DESCRIPTOR_free((a))
#define OSSL_ATTRIBUTE_DESCRIPTOR_new() IAmiSSL->OSSL_ATTRIBUTE_DESCRIPTOR_new()
#define OSSL_ATTRIBUTE_DESCRIPTOR_it() IAmiSSL->OSSL_ATTRIBUTE_DESCRIPTOR_it()
#define OSSL_HASH_it() IAmiSSL->OSSL_HASH_it()
#define OSSL_INFO_SYNTAX_it() IAmiSSL->OSSL_INFO_SYNTAX_it()
#define OSSL_INFO_SYNTAX_POINTER_it() IAmiSSL->OSSL_INFO_SYNTAX_POINTER_it()
#define OSSL_PRIVILEGE_POLICY_ID_it() IAmiSSL->OSSL_PRIVILEGE_POLICY_ID_it()
#define d2i_OSSL_HASH(a, in, len) IAmiSSL->d2i_OSSL_HASH((a), (in), (len))
#define i2d_OSSL_HASH(a, out) IAmiSSL->i2d_OSSL_HASH((a), (out))
#define OSSL_HASH_free(a) IAmiSSL->OSSL_HASH_free((a))
#define OSSL_HASH_new() IAmiSSL->OSSL_HASH_new()
#define d2i_OSSL_INFO_SYNTAX(a, in, len) IAmiSSL->d2i_OSSL_INFO_SYNTAX((a), (in), (len))
#define i2d_OSSL_INFO_SYNTAX(a, out) IAmiSSL->i2d_OSSL_INFO_SYNTAX((a), (out))
#define OSSL_INFO_SYNTAX_free(a) IAmiSSL->OSSL_INFO_SYNTAX_free((a))
#define OSSL_INFO_SYNTAX_new() IAmiSSL->OSSL_INFO_SYNTAX_new()
#define d2i_OSSL_INFO_SYNTAX_POINTER(a, in, len) IAmiSSL->d2i_OSSL_INFO_SYNTAX_POINTER((a), (in), (len))
#define i2d_OSSL_INFO_SYNTAX_POINTER(a, out) IAmiSSL->i2d_OSSL_INFO_SYNTAX_POINTER((a), (out))
#define OSSL_INFO_SYNTAX_POINTER_free(a) IAmiSSL->OSSL_INFO_SYNTAX_POINTER_free((a))
#define OSSL_INFO_SYNTAX_POINTER_new() IAmiSSL->OSSL_INFO_SYNTAX_POINTER_new()
#define d2i_OSSL_PRIVILEGE_POLICY_ID(a, in, len) IAmiSSL->d2i_OSSL_PRIVILEGE_POLICY_ID((a), (in), (len))
#define i2d_OSSL_PRIVILEGE_POLICY_ID(a, out) IAmiSSL->i2d_OSSL_PRIVILEGE_POLICY_ID((a), (out))
#define OSSL_PRIVILEGE_POLICY_ID_free(a) IAmiSSL->OSSL_PRIVILEGE_POLICY_ID_free((a))
#define OSSL_PRIVILEGE_POLICY_ID_new() IAmiSSL->OSSL_PRIVILEGE_POLICY_ID_new()
#define OSSL_PARAM_print_to_bio(params, bio, print_values) IAmiSSL->OSSL_PARAM_print_to_bio((params), (bio), (print_values))
#define d2i_OSSL_DAY_TIME(a, in, len) IAmiSSL->d2i_OSSL_DAY_TIME((a), (in), (len))
#define i2d_OSSL_DAY_TIME(a, out) IAmiSSL->i2d_OSSL_DAY_TIME((a), (out))
#define OSSL_DAY_TIME_free(a) IAmiSSL->OSSL_DAY_TIME_free((a))
#define OSSL_DAY_TIME_new() IAmiSSL->OSSL_DAY_TIME_new()
#define OSSL_DAY_TIME_it() IAmiSSL->OSSL_DAY_TIME_it()
#define d2i_OSSL_DAY_TIME_BAND(a, in, len) IAmiSSL->d2i_OSSL_DAY_TIME_BAND((a), (in), (len))
#define i2d_OSSL_DAY_TIME_BAND(a, out) IAmiSSL->i2d_OSSL_DAY_TIME_BAND((a), (out))
#define OSSL_DAY_TIME_BAND_free(a) IAmiSSL->OSSL_DAY_TIME_BAND_free((a))
#define OSSL_DAY_TIME_BAND_new() IAmiSSL->OSSL_DAY_TIME_BAND_new()
#define OSSL_DAY_TIME_BAND_it() IAmiSSL->OSSL_DAY_TIME_BAND_it()
#define d2i_OSSL_TIME_SPEC_DAY(a, in, len) IAmiSSL->d2i_OSSL_TIME_SPEC_DAY((a), (in), (len))
#define i2d_OSSL_TIME_SPEC_DAY(a, out) IAmiSSL->i2d_OSSL_TIME_SPEC_DAY((a), (out))
#define OSSL_TIME_SPEC_DAY_free(a) IAmiSSL->OSSL_TIME_SPEC_DAY_free((a))
#define OSSL_TIME_SPEC_DAY_new() IAmiSSL->OSSL_TIME_SPEC_DAY_new()
#define OSSL_TIME_SPEC_DAY_it() IAmiSSL->OSSL_TIME_SPEC_DAY_it()
#define d2i_OSSL_TIME_SPEC_WEEKS(a, in, len) IAmiSSL->d2i_OSSL_TIME_SPEC_WEEKS((a), (in), (len))
#define i2d_OSSL_TIME_SPEC_WEEKS(a, out) IAmiSSL->i2d_OSSL_TIME_SPEC_WEEKS((a), (out))
#define OSSL_TIME_SPEC_WEEKS_free(a) IAmiSSL->OSSL_TIME_SPEC_WEEKS_free((a))
#define OSSL_TIME_SPEC_WEEKS_new() IAmiSSL->OSSL_TIME_SPEC_WEEKS_new()
#define OSSL_TIME_SPEC_WEEKS_it() IAmiSSL->OSSL_TIME_SPEC_WEEKS_it()
#define d2i_OSSL_TIME_SPEC_MONTH(a, in, len) IAmiSSL->d2i_OSSL_TIME_SPEC_MONTH((a), (in), (len))
#define i2d_OSSL_TIME_SPEC_MONTH(a, out) IAmiSSL->i2d_OSSL_TIME_SPEC_MONTH((a), (out))
#define OSSL_TIME_SPEC_MONTH_free(a) IAmiSSL->OSSL_TIME_SPEC_MONTH_free((a))
#define OSSL_TIME_SPEC_MONTH_new() IAmiSSL->OSSL_TIME_SPEC_MONTH_new()
#define OSSL_TIME_SPEC_MONTH_it() IAmiSSL->OSSL_TIME_SPEC_MONTH_it()
#define d2i_OSSL_NAMED_DAY(a, in, len) IAmiSSL->d2i_OSSL_NAMED_DAY((a), (in), (len))
#define i2d_OSSL_NAMED_DAY(a, out) IAmiSSL->i2d_OSSL_NAMED_DAY((a), (out))
#define OSSL_NAMED_DAY_free(a) IAmiSSL->OSSL_NAMED_DAY_free((a))
#define OSSL_NAMED_DAY_new() IAmiSSL->OSSL_NAMED_DAY_new()
#define OSSL_NAMED_DAY_it() IAmiSSL->OSSL_NAMED_DAY_it()
#define d2i_OSSL_TIME_SPEC_X_DAY_OF(a, in, len) IAmiSSL->d2i_OSSL_TIME_SPEC_X_DAY_OF((a), (in), (len))
#define i2d_OSSL_TIME_SPEC_X_DAY_OF(a, out) IAmiSSL->i2d_OSSL_TIME_SPEC_X_DAY_OF((a), (out))
#define OSSL_TIME_SPEC_X_DAY_OF_free(a) IAmiSSL->OSSL_TIME_SPEC_X_DAY_OF_free((a))
#define OSSL_TIME_SPEC_X_DAY_OF_new() IAmiSSL->OSSL_TIME_SPEC_X_DAY_OF_new()
#define OSSL_TIME_SPEC_X_DAY_OF_it() IAmiSSL->OSSL_TIME_SPEC_X_DAY_OF_it()
#define d2i_OSSL_TIME_SPEC_ABSOLUTE(a, in, len) IAmiSSL->d2i_OSSL_TIME_SPEC_ABSOLUTE((a), (in), (len))
#define i2d_OSSL_TIME_SPEC_ABSOLUTE(a, out) IAmiSSL->i2d_OSSL_TIME_SPEC_ABSOLUTE((a), (out))
#define OSSL_TIME_SPEC_ABSOLUTE_free(a) IAmiSSL->OSSL_TIME_SPEC_ABSOLUTE_free((a))
#define OSSL_TIME_SPEC_ABSOLUTE_new() IAmiSSL->OSSL_TIME_SPEC_ABSOLUTE_new()
#define OSSL_TIME_SPEC_ABSOLUTE_it() IAmiSSL->OSSL_TIME_SPEC_ABSOLUTE_it()
#define d2i_OSSL_TIME_SPEC_TIME(a, in, len) IAmiSSL->d2i_OSSL_TIME_SPEC_TIME((a), (in), (len))
#define i2d_OSSL_TIME_SPEC_TIME(a, out) IAmiSSL->i2d_OSSL_TIME_SPEC_TIME((a), (out))
#define OSSL_TIME_SPEC_TIME_free(a) IAmiSSL->OSSL_TIME_SPEC_TIME_free((a))
#define OSSL_TIME_SPEC_TIME_new() IAmiSSL->OSSL_TIME_SPEC_TIME_new()
#define OSSL_TIME_SPEC_TIME_it() IAmiSSL->OSSL_TIME_SPEC_TIME_it()
#define d2i_OSSL_TIME_SPEC(a, in, len) IAmiSSL->d2i_OSSL_TIME_SPEC((a), (in), (len))
#define i2d_OSSL_TIME_SPEC(a, out) IAmiSSL->i2d_OSSL_TIME_SPEC((a), (out))
#define OSSL_TIME_SPEC_free(a) IAmiSSL->OSSL_TIME_SPEC_free((a))
#define OSSL_TIME_SPEC_new() IAmiSSL->OSSL_TIME_SPEC_new()
#define OSSL_TIME_SPEC_it() IAmiSSL->OSSL_TIME_SPEC_it()
#define d2i_OSSL_TIME_PERIOD(a, in, len) IAmiSSL->d2i_OSSL_TIME_PERIOD((a), (in), (len))
#define i2d_OSSL_TIME_PERIOD(a, out) IAmiSSL->i2d_OSSL_TIME_PERIOD((a), (out))
#define OSSL_TIME_PERIOD_free(a) IAmiSSL->OSSL_TIME_PERIOD_free((a))
#define OSSL_TIME_PERIOD_new() IAmiSSL->OSSL_TIME_PERIOD_new()
#define OSSL_TIME_PERIOD_it() IAmiSSL->OSSL_TIME_PERIOD_it()
#define EVP_CIPHER_can_pipeline(cipher, enc) IAmiSSL->EVP_CIPHER_can_pipeline((cipher), (enc))
#define EVP_CipherPipelineEncryptInit(ctx, cipher, key, keylen, numpipes, iv, ivlen) IAmiSSL->EVP_CipherPipelineEncryptInit((ctx), (cipher), (key), (keylen), (numpipes), (iv), (ivlen))
#define EVP_CipherPipelineDecryptInit(ctx, cipher, key, keylen, numpipes, iv, ivlen) IAmiSSL->EVP_CipherPipelineDecryptInit((ctx), (cipher), (key), (keylen), (numpipes), (iv), (ivlen))
#define EVP_CipherPipelineUpdate(ctx, out, outl, outsize, in, inl) IAmiSSL->EVP_CipherPipelineUpdate((ctx), (out), (outl), (outsize), (in), (inl))
#define EVP_CipherPipelineFinal(ctx, outm, outl, outsize) IAmiSSL->EVP_CipherPipelineFinal((ctx), (outm), (outl), (outsize))
#define d2i_OSSL_ATTRIBUTE_TYPE_MAPPING(a, in, len) IAmiSSL->d2i_OSSL_ATTRIBUTE_TYPE_MAPPING((a), (in), (len))
#define i2d_OSSL_ATTRIBUTE_TYPE_MAPPING(a, out) IAmiSSL->i2d_OSSL_ATTRIBUTE_TYPE_MAPPING((a), (out))
#define OSSL_ATTRIBUTE_TYPE_MAPPING_free(a) IAmiSSL->OSSL_ATTRIBUTE_TYPE_MAPPING_free((a))
#define OSSL_ATTRIBUTE_TYPE_MAPPING_new() IAmiSSL->OSSL_ATTRIBUTE_TYPE_MAPPING_new()
#define OSSL_ATTRIBUTE_TYPE_MAPPING_it() IAmiSSL->OSSL_ATTRIBUTE_TYPE_MAPPING_it()
#define d2i_OSSL_ATTRIBUTE_VALUE_MAPPING(a, in, len) IAmiSSL->d2i_OSSL_ATTRIBUTE_VALUE_MAPPING((a), (in), (len))
#define i2d_OSSL_ATTRIBUTE_VALUE_MAPPING(a, out) IAmiSSL->i2d_OSSL_ATTRIBUTE_VALUE_MAPPING((a), (out))
#define OSSL_ATTRIBUTE_VALUE_MAPPING_free(a) IAmiSSL->OSSL_ATTRIBUTE_VALUE_MAPPING_free((a))
#define OSSL_ATTRIBUTE_VALUE_MAPPING_new() IAmiSSL->OSSL_ATTRIBUTE_VALUE_MAPPING_new()
#define OSSL_ATTRIBUTE_VALUE_MAPPING_it() IAmiSSL->OSSL_ATTRIBUTE_VALUE_MAPPING_it()
#define d2i_OSSL_ATTRIBUTE_MAPPING(a, in, len) IAmiSSL->d2i_OSSL_ATTRIBUTE_MAPPING((a), (in), (len))
#define i2d_OSSL_ATTRIBUTE_MAPPING(a, out) IAmiSSL->i2d_OSSL_ATTRIBUTE_MAPPING((a), (out))
#define OSSL_ATTRIBUTE_MAPPING_free(a) IAmiSSL->OSSL_ATTRIBUTE_MAPPING_free((a))
#define OSSL_ATTRIBUTE_MAPPING_new() IAmiSSL->OSSL_ATTRIBUTE_MAPPING_new()
#define OSSL_ATTRIBUTE_MAPPING_it() IAmiSSL->OSSL_ATTRIBUTE_MAPPING_it()
#define d2i_OSSL_ATTRIBUTE_MAPPINGS(a, in, len) IAmiSSL->d2i_OSSL_ATTRIBUTE_MAPPINGS((a), (in), (len))
#define i2d_OSSL_ATTRIBUTE_MAPPINGS(a, out) IAmiSSL->i2d_OSSL_ATTRIBUTE_MAPPINGS((a), (out))
#define OSSL_ATTRIBUTE_MAPPINGS_free(a) IAmiSSL->OSSL_ATTRIBUTE_MAPPINGS_free((a))
#define OSSL_ATTRIBUTE_MAPPINGS_new() IAmiSSL->OSSL_ATTRIBUTE_MAPPINGS_new()
#define OSSL_ATTRIBUTE_MAPPINGS_it() IAmiSSL->OSSL_ATTRIBUTE_MAPPINGS_it()
#define d2i_OSSL_ATAV(a, in, len) IAmiSSL->d2i_OSSL_ATAV((a), (in), (len))
#define i2d_OSSL_ATAV(a, out) IAmiSSL->i2d_OSSL_ATAV((a), (out))
#define OSSL_ATAV_free(a) IAmiSSL->OSSL_ATAV_free((a))
#define OSSL_ATAV_new() IAmiSSL->OSSL_ATAV_new()
#define OSSL_ATAV_it() IAmiSSL->OSSL_ATAV_it()
#define d2i_OSSL_ALLOWED_ATTRIBUTES_CHOICE(a, in, len) IAmiSSL->d2i_OSSL_ALLOWED_ATTRIBUTES_CHOICE((a), (in), (len))
#define i2d_OSSL_ALLOWED_ATTRIBUTES_CHOICE(a, out) IAmiSSL->i2d_OSSL_ALLOWED_ATTRIBUTES_CHOICE((a), (out))
#define OSSL_ALLOWED_ATTRIBUTES_CHOICE_free(a) IAmiSSL->OSSL_ALLOWED_ATTRIBUTES_CHOICE_free((a))
#define OSSL_ALLOWED_ATTRIBUTES_CHOICE_new() IAmiSSL->OSSL_ALLOWED_ATTRIBUTES_CHOICE_new()
#define OSSL_ALLOWED_ATTRIBUTES_CHOICE_it() IAmiSSL->OSSL_ALLOWED_ATTRIBUTES_CHOICE_it()
#define d2i_OSSL_ALLOWED_ATTRIBUTES_ITEM(a, in, len) IAmiSSL->d2i_OSSL_ALLOWED_ATTRIBUTES_ITEM((a), (in), (len))
#define i2d_OSSL_ALLOWED_ATTRIBUTES_ITEM(a, out) IAmiSSL->i2d_OSSL_ALLOWED_ATTRIBUTES_ITEM((a), (out))
#define OSSL_ALLOWED_ATTRIBUTES_ITEM_free(a) IAmiSSL->OSSL_ALLOWED_ATTRIBUTES_ITEM_free((a))
#define OSSL_ALLOWED_ATTRIBUTES_ITEM_new() IAmiSSL->OSSL_ALLOWED_ATTRIBUTES_ITEM_new()
#define OSSL_ALLOWED_ATTRIBUTES_ITEM_it() IAmiSSL->OSSL_ALLOWED_ATTRIBUTES_ITEM_it()
#define d2i_OSSL_ALLOWED_ATTRIBUTES_SYNTAX(a, in, len) IAmiSSL->d2i_OSSL_ALLOWED_ATTRIBUTES_SYNTAX((a), (in), (len))
#define i2d_OSSL_ALLOWED_ATTRIBUTES_SYNTAX(a, out) IAmiSSL->i2d_OSSL_ALLOWED_ATTRIBUTES_SYNTAX((a), (out))
#define OSSL_ALLOWED_ATTRIBUTES_SYNTAX_free(a) IAmiSSL->OSSL_ALLOWED_ATTRIBUTES_SYNTAX_free((a))
#define OSSL_ALLOWED_ATTRIBUTES_SYNTAX_new() IAmiSSL->OSSL_ALLOWED_ATTRIBUTES_SYNTAX_new()
#define OSSL_ALLOWED_ATTRIBUTES_SYNTAX_it() IAmiSSL->OSSL_ALLOWED_ATTRIBUTES_SYNTAX_it()
#define EVP_CipherInit_SKEY(ctx, cipher, skey, iv, iv_len, enc, params) IAmiSSL->EVP_CipherInit_SKEY((ctx), (cipher), (skey), (iv), (iv_len), (enc), (params))
#define EVP_SKEY_import(libctx, skeymgmtname, propquery, selection, params) IAmiSSL->EVP_SKEY_import((libctx), (skeymgmtname), (propquery), (selection), (params))
#define EVP_SKEY_generate(libctx, skeymgmtname, propquery, params) IAmiSSL->EVP_SKEY_generate((libctx), (skeymgmtname), (propquery), (params))
#define EVP_SKEY_import_raw_key(libctx, skeymgmtname, key, keylen, propquery) IAmiSSL->EVP_SKEY_import_raw_key((libctx), (skeymgmtname), (key), (keylen), (propquery))
#define EVP_SKEY_get0_raw_key(skey, key, len) IAmiSSL->EVP_SKEY_get0_raw_key((skey), (key), (len))
#define EVP_SKEY_export(skey, selection, export_cb, export_cbarg) IAmiSSL->EVP_SKEY_export((skey), (selection), (export_cb), (export_cbarg))
#define EVP_SKEY_up_ref(skey) IAmiSSL->EVP_SKEY_up_ref((skey))
#define EVP_SKEY_free(skey) IAmiSSL->EVP_SKEY_free((skey))
#define EVP_SKEYMGMT_fetch(ctx, algorithm, properties) IAmiSSL->EVP_SKEYMGMT_fetch((ctx), (algorithm), (properties))
#define EVP_SKEYMGMT_up_ref(keymgmt) IAmiSSL->EVP_SKEYMGMT_up_ref((keymgmt))
#define EVP_SKEYMGMT_free(keymgmt) IAmiSSL->EVP_SKEYMGMT_free((keymgmt))
#define EVP_SKEYMGMT_get0_provider(keymgmt) IAmiSSL->EVP_SKEYMGMT_get0_provider((keymgmt))
#define EVP_SKEYMGMT_get0_name(keymgmt) IAmiSSL->EVP_SKEYMGMT_get0_name((keymgmt))
#define EVP_SKEYMGMT_get0_description(keymgmt) IAmiSSL->EVP_SKEYMGMT_get0_description((keymgmt))
#define EVP_SKEYMGMT_is_a(keymgmt, name) IAmiSSL->EVP_SKEYMGMT_is_a((keymgmt), (name))
#define EVP_SKEYMGMT_do_all_provided(libctx, fn, arg) IAmiSSL->EVP_SKEYMGMT_do_all_provided((libctx), (fn), (arg))
#define EVP_SKEYMGMT_names_do_all(keymgmt, fn, data) IAmiSSL->EVP_SKEYMGMT_names_do_all((keymgmt), (fn), (data))
#define EVP_MAC_init_SKEY(ctx, skey, params) IAmiSSL->EVP_MAC_init_SKEY((ctx), (skey), (params))
#define EVP_SKEY_get0_key_id(skey) IAmiSSL->EVP_SKEY_get0_key_id((skey))
#define EVP_SKEY_get0_skeymgmt_name(skey) IAmiSSL->EVP_SKEY_get0_skeymgmt_name((skey))
#define EVP_SKEY_get0_provider_name(skey) IAmiSSL->EVP_SKEY_get0_provider_name((skey))
#define EVP_SKEYMGMT_get0_gen_settable_params(skeymgmt) IAmiSSL->EVP_SKEYMGMT_get0_gen_settable_params((skeymgmt))
#define EVP_SKEYMGMT_get0_imp_settable_params(skeymgmt) IAmiSSL->EVP_SKEYMGMT_get0_imp_settable_params((skeymgmt))
#define EVP_SKEY_is_a(skey, name) IAmiSSL->EVP_SKEY_is_a((skey), (name))
#define EVP_SKEY_to_provider(skey, libctx, prov, propquery) IAmiSSL->EVP_SKEY_to_provider((skey), (libctx), (prov), (propquery))
#define OSSL_PROVIDER_add_conf_parameter(prov, name, value) IAmiSSL->OSSL_PROVIDER_add_conf_parameter((prov), (name), (value))
#define OSSL_PROVIDER_get_conf_parameters(prov, params) IAmiSSL->OSSL_PROVIDER_get_conf_parameters((prov), (params))
#define OSSL_PROVIDER_conf_get_bool(prov, name, defval) IAmiSSL->OSSL_PROVIDER_conf_get_bool((prov), (name), (defval))
#define d2i_OSSL_AA_DIST_POINT(a, in, len) IAmiSSL->d2i_OSSL_AA_DIST_POINT((a), (in), (len))
#define i2d_OSSL_AA_DIST_POINT(a, out) IAmiSSL->i2d_OSSL_AA_DIST_POINT((a), (out))
#define OSSL_AA_DIST_POINT_free(a) IAmiSSL->OSSL_AA_DIST_POINT_free((a))
#define OSSL_AA_DIST_POINT_new() IAmiSSL->OSSL_AA_DIST_POINT_new()
#define OSSL_AA_DIST_POINT_it() IAmiSSL->OSSL_AA_DIST_POINT_it()
#define PEM_ASN1_write_bio_ctx(i2d, vctx, name, bp, x, enc, kstr, klen, cb, u) IAmiSSL->PEM_ASN1_write_bio_ctx((i2d), (vctx), (name), (bp), (x), (enc), (kstr), (klen), (cb), (u))
#define EVP_PKEY_get_security_category(pkey) IAmiSSL->EVP_PKEY_get_security_category((pkey))
#define X509_STORE_CTX_set_ocsp_resp(ctx, sk) IAmiSSL->X509_STORE_CTX_set_ocsp_resp((ctx), (sk))
#define OPENSSL_sk_set_thunks(st, f_thunk) IAmiSSL->OPENSSL_sk_set_thunks((st), (f_thunk))
#define i2d_PKCS8PrivateKey(a, pp) IAmiSSL->i2d_PKCS8PrivateKey((a), (pp))
#define OSSL_PARAM_set_octet_string_or_ptr(p, val, len) IAmiSSL->OSSL_PARAM_set_octet_string_or_ptr((p), (val), (len))
#define OSSL_STORE_LOADER_settable_ctx_params(loader) IAmiSSL->OSSL_STORE_LOADER_settable_ctx_params((loader))
#define X509_CRL_get0_tbs_sigalg(crl) IAmiSSL->X509_CRL_get0_tbs_sigalg((crl))
#define CMS_RecipientInfo_kemri_cert_cmp(ri, cert) IAmiSSL->CMS_RecipientInfo_kemri_cert_cmp((ri), (cert))
#define CMS_RecipientInfo_kemri_set0_pkey(ri, pk) IAmiSSL->CMS_RecipientInfo_kemri_set0_pkey((ri), (pk))
#define CMS_RecipientInfo_kemri_get0_ctx(ri) IAmiSSL->CMS_RecipientInfo_kemri_get0_ctx((ri))
#define CMS_RecipientInfo_kemri_get0_kdf_alg(ri) IAmiSSL->CMS_RecipientInfo_kemri_get0_kdf_alg((ri))
#define CMS_RecipientInfo_kemri_set_ukm(ri, ukm, ukmLength) IAmiSSL->CMS_RecipientInfo_kemri_set_ukm((ri), (ukm), (ukmLength))
#define EVP_PKEY_derive_SKEY(ctx, mgmt, key_type, propquery, keylen, params) IAmiSSL->EVP_PKEY_derive_SKEY((ctx), (mgmt), (key_type), (propquery), (keylen), (params))
#define EVP_KDF_CTX_set_SKEY(ctx, key, paramname) IAmiSSL->EVP_KDF_CTX_set_SKEY((ctx), (key), (paramname))
#define EVP_KDF_derive_SKEY(ctx, mgmt, key_type, propquery, keylen, params) IAmiSSL->EVP_KDF_derive_SKEY((ctx), (mgmt), (key_type), (propquery), (keylen), (params))
#define EVP_SKEY_import_SKEYMGMT(libctx, skeymgmt, selection, params) IAmiSSL->EVP_SKEY_import_SKEYMGMT((libctx), (skeymgmt), (selection), (params))
#define CRYPTO_malloc_array(num, size, file, line) IAmiSSL->CRYPTO_malloc_array((num), (size), (file), (line))
#define CRYPTO_calloc(num, size, file, line) IAmiSSL->CRYPTO_calloc((num), (size), (file), (line))
#define CRYPTO_aligned_alloc_array(num, size, align, freeptr, file, line) IAmiSSL->CRYPTO_aligned_alloc_array((num), (size), (align), (freeptr), (file), (line))
#define CRYPTO_realloc_array(addr, num, size, file, line) IAmiSSL->CRYPTO_realloc_array((addr), (num), (size), (file), (line))
#define CRYPTO_clear_realloc_array(addr, old_num, num, size, file, line) IAmiSSL->CRYPTO_clear_realloc_array((addr), (old_num), (num), (size), (file), (line))
#define CRYPTO_secure_malloc_array(num, size, file, line) IAmiSSL->CRYPTO_secure_malloc_array((num), (size), (file), (line))
#define CRYPTO_secure_calloc(num, size, file, line) IAmiSSL->CRYPTO_secure_calloc((num), (size), (file), (line))

#endif /* INLINE4_AMISSL_H */
