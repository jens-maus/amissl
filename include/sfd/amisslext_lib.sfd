==id $Id$
==base _AmiSSLExtBase
==basetype struct Library *
==libname amisslext.library
==include <exec/types.h>
==include <dos/dos.h>
==include <amissl/amissl.h>
==bias 30
int OSSL_trace_enabled(int category) (d0)
BIO * OSSL_trace_begin(int category) (d0)
void OSSL_trace_end(int category, BIO * channel) (d0,a0)
OSSL_PROVIDER * OSSL_PROVIDER_load(OSSL_LIB_CTX * a, const char * name) (a0,a1)
OSSL_PROVIDER * OSSL_PROVIDER_try_load(OSSL_LIB_CTX * a, const char * name, int retain_fallbacks) (a0,a1,d0)
int OSSL_PROVIDER_unload(OSSL_PROVIDER * prov) (a0)
int OSSL_PROVIDER_add_builtin(OSSL_LIB_CTX * a, const char * name, OSSL_provider_init_fn * init_fn) (a0,a1,a2)
const OSSL_PARAM * OSSL_PROVIDER_gettable_params(const OSSL_PROVIDER * prov) (a0)
int OSSL_PROVIDER_get_params(const OSSL_PROVIDER * prov, OSSL_PARAM * params) (a0,a1)
OSSL_CRMF_ENCRYPTEDVALUE * d2i_OSSL_CRMF_ENCRYPTEDVALUE(OSSL_CRMF_ENCRYPTEDVALUE ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_OSSL_CRMF_ENCRYPTEDVALUE(const OSSL_CRMF_ENCRYPTEDVALUE * a, unsigned char ** out) (a0,a1)
void OSSL_CRMF_ENCRYPTEDVALUE_free(OSSL_CRMF_ENCRYPTEDVALUE * a) (a0)
OSSL_CRMF_ENCRYPTEDVALUE * OSSL_CRMF_ENCRYPTEDVALUE_new() ()
const ASN1_ITEM * OSSL_CRMF_ENCRYPTEDVALUE_it() ()
OSSL_CRMF_MSG * d2i_OSSL_CRMF_MSG(OSSL_CRMF_MSG ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_OSSL_CRMF_MSG(const OSSL_CRMF_MSG * a, unsigned char ** out) (a0,a1)
OSSL_CRMF_MSG * OSSL_CRMF_MSG_dup(const OSSL_CRMF_MSG * a) (a0)
void OSSL_CRMF_MSG_free(OSSL_CRMF_MSG * a) (a0)
OSSL_CRMF_MSG * OSSL_CRMF_MSG_new() ()
const ASN1_ITEM * OSSL_CRMF_MSG_it() ()
OSSL_CRMF_PBMPARAMETER * d2i_OSSL_CRMF_PBMPARAMETER(OSSL_CRMF_PBMPARAMETER ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_OSSL_CRMF_PBMPARAMETER(const OSSL_CRMF_PBMPARAMETER * a, unsigned char ** out) (a0,a1)
void OSSL_CRMF_PBMPARAMETER_free(OSSL_CRMF_PBMPARAMETER * a) (a0)
OSSL_CRMF_PBMPARAMETER * OSSL_CRMF_PBMPARAMETER_new() ()
const ASN1_ITEM * OSSL_CRMF_PBMPARAMETER_it() ()
OSSL_CRMF_CERTID * d2i_OSSL_CRMF_CERTID(OSSL_CRMF_CERTID ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_OSSL_CRMF_CERTID(const OSSL_CRMF_CERTID * a, unsigned char ** out) (a0,a1)
OSSL_CRMF_CERTID * OSSL_CRMF_CERTID_dup(const OSSL_CRMF_CERTID * a) (a0)
void OSSL_CRMF_CERTID_free(OSSL_CRMF_CERTID * a) (a0)
OSSL_CRMF_CERTID * OSSL_CRMF_CERTID_new() ()
const ASN1_ITEM * OSSL_CRMF_CERTID_it() ()
OSSL_CRMF_PKIPUBLICATIONINFO * d2i_OSSL_CRMF_PKIPUBLICATIONINFO(OSSL_CRMF_PKIPUBLICATIONINFO ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_OSSL_CRMF_PKIPUBLICATIONINFO(const OSSL_CRMF_PKIPUBLICATIONINFO * a, unsigned char ** out) (a0,a1)
void OSSL_CRMF_PKIPUBLICATIONINFO_free(OSSL_CRMF_PKIPUBLICATIONINFO * a) (a0)
OSSL_CRMF_PKIPUBLICATIONINFO * OSSL_CRMF_PKIPUBLICATIONINFO_new() ()
const ASN1_ITEM * OSSL_CRMF_PKIPUBLICATIONINFO_it() ()
OSSL_CRMF_SINGLEPUBINFO * d2i_OSSL_CRMF_SINGLEPUBINFO(OSSL_CRMF_SINGLEPUBINFO ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_OSSL_CRMF_SINGLEPUBINFO(const OSSL_CRMF_SINGLEPUBINFO * a, unsigned char ** out) (a0,a1)
void OSSL_CRMF_SINGLEPUBINFO_free(OSSL_CRMF_SINGLEPUBINFO * a) (a0)
OSSL_CRMF_SINGLEPUBINFO * OSSL_CRMF_SINGLEPUBINFO_new() ()
const ASN1_ITEM * OSSL_CRMF_SINGLEPUBINFO_it() ()
OSSL_CRMF_CERTTEMPLATE * d2i_OSSL_CRMF_CERTTEMPLATE(OSSL_CRMF_CERTTEMPLATE ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_OSSL_CRMF_CERTTEMPLATE(const OSSL_CRMF_CERTTEMPLATE * a, unsigned char ** out) (a0,a1)
void OSSL_CRMF_CERTTEMPLATE_free(OSSL_CRMF_CERTTEMPLATE * a) (a0)
OSSL_CRMF_CERTTEMPLATE * OSSL_CRMF_CERTTEMPLATE_new() ()
const ASN1_ITEM * OSSL_CRMF_CERTTEMPLATE_it() ()
OSSL_CRMF_MSGS * d2i_OSSL_CRMF_MSGS(OSSL_CRMF_MSGS ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_OSSL_CRMF_MSGS(const OSSL_CRMF_MSGS * a, unsigned char ** out) (a0,a1)
void OSSL_CRMF_MSGS_free(OSSL_CRMF_MSGS * a) (a0)
OSSL_CRMF_MSGS * OSSL_CRMF_MSGS_new() ()
const ASN1_ITEM * OSSL_CRMF_MSGS_it() ()
OSSL_CRMF_PBMPARAMETER * OSSL_CRMF_pbmp_new(OSSL_LIB_CTX * libctx, size_t slen, int owfnid, size_t itercnt, int macnid) (a0,d0,d1,d2,d3)
int OSSL_CRMF_pbm_new(OSSL_LIB_CTX * libctx, const char * propq, const OSSL_CRMF_PBMPARAMETER * pbmp, const unsigned char * msg, size_t msglen, const unsigned char * sec, size_t seclen, unsigned char ** mac, size_t * maclen) (a0,a1,a2,a3,d0,d1,d2,d3,d4)
ASN1_UTF8STRING * OSSL_CRMF_MSG_get0_regCtrl_regToken(const OSSL_CRMF_MSG * msg) (a0)
int OSSL_CRMF_MSG_set1_regCtrl_regToken(OSSL_CRMF_MSG * msg, const ASN1_UTF8STRING * tok) (a0,a1)
ASN1_UTF8STRING * OSSL_CRMF_MSG_get0_regCtrl_authenticator(const OSSL_CRMF_MSG * msg) (a0)
int OSSL_CRMF_MSG_set1_regCtrl_authenticator(OSSL_CRMF_MSG * msg, const ASN1_UTF8STRING * auth) (a0,a1)
int OSSL_CRMF_MSG_PKIPublicationInfo_push0_SinglePubInfo(OSSL_CRMF_PKIPUBLICATIONINFO * pi, OSSL_CRMF_SINGLEPUBINFO * spi) (a0,a1)
int OSSL_CRMF_MSG_set0_SinglePubInfo(OSSL_CRMF_SINGLEPUBINFO * spi, int method, GENERAL_NAME * nm) (a0,d0,a1)
OSSL_CRMF_PKIPUBLICATIONINFO * OSSL_CRMF_MSG_get0_regCtrl_pkiPublicationInfo(const OSSL_CRMF_MSG * msg) (a0)
int OSSL_CRMF_MSG_set_PKIPublicationInfo_action(OSSL_CRMF_PKIPUBLICATIONINFO * pi, int action) (a0,d0)
int OSSL_CRMF_MSG_set1_regCtrl_pkiPublicationInfo(OSSL_CRMF_MSG * msg, const OSSL_CRMF_PKIPUBLICATIONINFO * pi) (a0,a1)
X509_PUBKEY * OSSL_CRMF_MSG_get0_regCtrl_protocolEncrKey(const OSSL_CRMF_MSG * msg) (a0)
int OSSL_CRMF_MSG_set1_regCtrl_protocolEncrKey(OSSL_CRMF_MSG * msg, const X509_PUBKEY * pubkey) (a0,a1)
OSSL_CRMF_CERTID * OSSL_CRMF_MSG_get0_regCtrl_oldCertID(const OSSL_CRMF_MSG * msg) (a0)
int OSSL_CRMF_MSG_set1_regCtrl_oldCertID(OSSL_CRMF_MSG * msg, const OSSL_CRMF_CERTID * cid) (a0,a1)
OSSL_CRMF_CERTID * OSSL_CRMF_CERTID_gen(const X509_NAME * issuer, const ASN1_INTEGER * serial) (a0,a1)
ASN1_UTF8STRING * OSSL_CRMF_MSG_get0_regInfo_utf8Pairs(const OSSL_CRMF_MSG * msg) (a0)
int OSSL_CRMF_MSG_set1_regInfo_utf8Pairs(OSSL_CRMF_MSG * msg, const ASN1_UTF8STRING * utf8pairs) (a0,a1)
OSSL_CRMF_CERTREQUEST * OSSL_CRMF_MSG_get0_regInfo_certReq(const OSSL_CRMF_MSG * msg) (a0)
int OSSL_CRMF_MSG_set1_regInfo_certReq(OSSL_CRMF_MSG * msg, const OSSL_CRMF_CERTREQUEST * cr) (a0,a1)
int OSSL_CRMF_MSG_set0_validity(OSSL_CRMF_MSG * crm, ASN1_TIME * notBefore, ASN1_TIME * notAfter) (a0,a1,a2)
int OSSL_CRMF_MSG_set_certReqId(OSSL_CRMF_MSG * crm, int rid) (a0,d0)
int OSSL_CRMF_MSG_get_certReqId(const OSSL_CRMF_MSG * crm) (a0)
int OSSL_CRMF_MSG_set0_extensions(OSSL_CRMF_MSG * crm, X509_EXTENSIONS * exts) (a0,a1)
int OSSL_CRMF_MSG_push0_extension(OSSL_CRMF_MSG * crm, X509_EXTENSION * ext) (a0,a1)
int OSSL_CRMF_MSG_create_popo(int meth, OSSL_CRMF_MSG * crm, EVP_PKEY * pkey, const EVP_MD * digest, OSSL_LIB_CTX * libctx, const char * propq) (d0,a0,a1,a2,a3,d1)
int OSSL_CRMF_MSGS_verify_popo(const OSSL_CRMF_MSGS * reqs, int rid, int acceptRAVerified, OSSL_LIB_CTX * libctx, const char * propq) (a0,d0,d1,a1,a2)
OSSL_CRMF_CERTTEMPLATE * OSSL_CRMF_MSG_get0_tmpl(const OSSL_CRMF_MSG * crm) (a0)
const ASN1_INTEGER * OSSL_CRMF_CERTTEMPLATE_get0_serialNumber(const OSSL_CRMF_CERTTEMPLATE * tmpl) (a0)
const X509_NAME * OSSL_CRMF_CERTTEMPLATE_get0_subject(const OSSL_CRMF_CERTTEMPLATE * tmpl) (a0)
const X509_NAME * OSSL_CRMF_CERTTEMPLATE_get0_issuer(const OSSL_CRMF_CERTTEMPLATE * tmpl) (a0)
X509_EXTENSIONS * OSSL_CRMF_CERTTEMPLATE_get0_extensions(const OSSL_CRMF_CERTTEMPLATE * tmpl) (a0)
int OSSL_CRMF_CERTTEMPLATE_fill(OSSL_CRMF_CERTTEMPLATE * tmpl, EVP_PKEY * pubkey, const X509_NAME * subject, const X509_NAME * issuer, const ASN1_INTEGER * serial) (a0,a1,a2,a3,d0)
X509 * OSSL_CRMF_ENCRYPTEDVALUE_get1_encCert(const OSSL_CRMF_ENCRYPTEDVALUE * ecert, OSSL_LIB_CTX * libctx, const char * propq, EVP_PKEY * pkey) (a0,a1,a2,a3)
OSSL_PARAM * OSSL_PARAM_locate(OSSL_PARAM * p, const char * key) (a0,a1)
void OSSL_PARAM_construct_int_amiga(OSSL_PARAM * result, const char * key, int * buf) (a0,a1,a2)
void OSSL_PARAM_construct_uint_amiga(OSSL_PARAM * result, const char * key, unsigned int * buf) (a0,a1,a2)
void OSSL_PARAM_construct_long_amiga(OSSL_PARAM * result, const char * key, long int * buf) (a0,a1,a2)
void OSSL_PARAM_construct_ulong_amiga(OSSL_PARAM * result, const char * key, unsigned long int * buf) (a0,a1,a2)
void OSSL_PARAM_construct_int32_amiga(OSSL_PARAM * result, const char * key, int32_t * buf) (a1,a2,a3)
void OSSL_PARAM_construct_uint32_amiga(OSSL_PARAM * result, const char * key, uint32_t * buf) (a1,a2,a3)
void OSSL_PARAM_construct_int64_amiga(OSSL_PARAM * result, const char * key, int64_t * buf) (a0,a1,a2)
void OSSL_PARAM_construct_uint64_amiga(OSSL_PARAM * result, const char * key, uint64_t * buf) (a0,a1,a2)
void OSSL_PARAM_construct_size_t_amiga(OSSL_PARAM * result, const char * key, size_t * buf) (a0,a1,a2)
void OSSL_PARAM_construct_BN_amiga(OSSL_PARAM * result, const char * key, unsigned char * buf, size_t bsize) (a0,a1,a2,d0)
void OSSL_PARAM_construct_double_amiga(OSSL_PARAM * result, const char * key, double * buf) (a0,a1,a2)
void OSSL_PARAM_construct_utf8_string_amiga(OSSL_PARAM * result, const char * key, char * buf, size_t bsize) (a0,a1,a2,d0)
void OSSL_PARAM_construct_utf8_ptr_amiga(OSSL_PARAM * result, const char * key, char ** buf, size_t bsize) (a0,a1,a2,d0)
void OSSL_PARAM_construct_octet_string_amiga(OSSL_PARAM * result, const char * key, void * buf, size_t bsize) (a0,a1,a2,d0)
void OSSL_PARAM_construct_octet_ptr_amiga(OSSL_PARAM * result, const char * key, void ** buf, size_t bsize) (a0,a1,a2,d0)
int OSSL_PARAM_get_int(const OSSL_PARAM * p, int * val) (a0,a1)
int OSSL_PARAM_get_uint(const OSSL_PARAM * p, unsigned int * val) (a0,a1)
int OSSL_PARAM_get_long(const OSSL_PARAM * p, long int * val) (a0,a1)
int OSSL_PARAM_get_ulong(const OSSL_PARAM * p, unsigned long int * val) (a0,a1)
int OSSL_PARAM_get_int32(const OSSL_PARAM * p, int32_t * val) (a0,a1)
int OSSL_PARAM_get_uint32(const OSSL_PARAM * p, uint32_t * val) (a0,a1)
int OSSL_PARAM_get_int64(const OSSL_PARAM * p, int64_t * val) (a0,a1)
int OSSL_PARAM_get_uint64(const OSSL_PARAM * p, uint64_t * val) (a0,a1)
int OSSL_PARAM_get_size_t(const OSSL_PARAM * p, size_t * val) (a0,a1)
int OSSL_PARAM_set_int(OSSL_PARAM * p, int val) (a0,d0)
int OSSL_PARAM_set_uint(OSSL_PARAM * p, unsigned int val) (a0,d0)
int OSSL_PARAM_set_long(OSSL_PARAM * p, long int val) (a0,d0)
int OSSL_PARAM_set_ulong(OSSL_PARAM * p, unsigned long int val) (a0,d0)
int OSSL_PARAM_set_int32(OSSL_PARAM * p, int32_t val) (a0,d0)
int OSSL_PARAM_set_uint32(OSSL_PARAM * p, uint32_t val) (a0,d0)
int OSSL_PARAM_set_int64(OSSL_PARAM * p, int64_t val) (a0,d0-d1)
int OSSL_PARAM_set_uint64(OSSL_PARAM * p, uint64_t val) (a0,d0-d1)
int OSSL_PARAM_set_size_t(OSSL_PARAM * p, size_t val) (a0,d0)
int OSSL_PARAM_get_double(const OSSL_PARAM * p, double * val) (a0,a1)
int OSSL_PARAM_set_double(OSSL_PARAM * p, double val) (a0,d0-d1)
int OSSL_PARAM_get_BN(const OSSL_PARAM * p, BIGNUM ** val) (a0,a1)
int OSSL_PARAM_set_BN(OSSL_PARAM * p, const BIGNUM * val) (a0,a1)
int OSSL_PARAM_get_utf8_string(const OSSL_PARAM * p, char ** val, size_t max_len) (a0,a1,d0)
int OSSL_PARAM_set_utf8_string(OSSL_PARAM * p, const char * val) (a0,a1)
int OSSL_PARAM_get_octet_string(const OSSL_PARAM * p, void ** val, size_t max_len, size_t * used_len) (a0,a1,d0,a2)
int OSSL_PARAM_set_octet_string(OSSL_PARAM * p, const void * val, size_t len) (a0,a1,d0)
int OSSL_PARAM_get_utf8_ptr(const OSSL_PARAM * p, const char ** val) (a0,a1)
int OSSL_PARAM_set_utf8_ptr(OSSL_PARAM * p, const char * val) (a0,a1)
int OSSL_PARAM_get_octet_ptr(const OSSL_PARAM * p, const void ** val, size_t * used_len) (a0,a1,a2)
int OSSL_PARAM_set_octet_ptr(OSSL_PARAM * p, const void * val, size_t used_len) (a0,a1,d0)
void X509_set0_distinguishing_id(X509 * x, ASN1_OCTET_STRING * d_id) (a0,a1)
ASN1_OCTET_STRING * X509_get0_distinguishing_id(X509 * x) (a0)
int EVP_MD_up_ref(EVP_MD * md) (a0)
EVP_MD * EVP_MD_fetch(OSSL_LIB_CTX * ctx, const char * algorithm, const char * properties) (a0,a1,a2)
int EVP_set_default_properties(OSSL_LIB_CTX * libctx, const char * propq) (a0,a1)
void OSSL_PARAM_construct_end_amiga(OSSL_PARAM * result) (a0)
int EC_GROUP_check_named_curve(const EC_GROUP * group, int nist_only, BN_CTX * ctx) (a0,d0,a1)
int EVP_CIPHER_up_ref(EVP_CIPHER * cipher) (a0)
EVP_CIPHER * EVP_CIPHER_fetch(OSSL_LIB_CTX * ctx, const char * algorithm, const char * properties) (a0,a1,a2)
int EVP_CIPHER_get_mode(const EVP_CIPHER * cipher) (a0)
const char * OPENSSL_info(int type) (d0)
EVP_KDF_CTX * EVP_KDF_CTX_new(EVP_KDF * kdf) (a0)
const EVP_KDF * EVP_KDF_CTX_kdf(EVP_KDF_CTX * ctx) (a0)
int i2d_KeyParams(const EVP_PKEY * a, unsigned char ** pp) (a0,a1)
EVP_PKEY * d2i_KeyParams(int type, EVP_PKEY ** a, const unsigned char ** pp, long length) (d0,a0,a1,d1)
int i2d_KeyParams_bio(BIO * bp, const EVP_PKEY * pkey) (a0,a1)
EVP_PKEY * d2i_KeyParams_bio(int type, EVP_PKEY ** a, BIO * in) (d0,a0,a1)
const ASN1_ITEM * OSSL_CMP_PKISTATUS_it() ()
OSSL_CMP_PKIHEADER * d2i_OSSL_CMP_PKIHEADER(OSSL_CMP_PKIHEADER ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_OSSL_CMP_PKIHEADER(const OSSL_CMP_PKIHEADER * a, unsigned char ** out) (a0,a1)
void OSSL_CMP_PKIHEADER_free(OSSL_CMP_PKIHEADER * a) (a0)
OSSL_CMP_PKIHEADER * OSSL_CMP_PKIHEADER_new() ()
const ASN1_ITEM * OSSL_CMP_PKIHEADER_it() ()
OSSL_CMP_MSG * d2i_OSSL_CMP_MSG(OSSL_CMP_MSG ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_OSSL_CMP_MSG(const OSSL_CMP_MSG * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * OSSL_CMP_MSG_it() ()
OSSL_CMP_ITAV * OSSL_CMP_ITAV_create(ASN1_OBJECT * type, ASN1_TYPE * value) (a0,a1)
void OSSL_CMP_ITAV_set0(OSSL_CMP_ITAV * itav, ASN1_OBJECT * type, ASN1_TYPE * value) (a0,a1,a2)
ASN1_OBJECT * OSSL_CMP_ITAV_get0_type(const OSSL_CMP_ITAV * itav) (a0)
ASN1_TYPE * OSSL_CMP_ITAV_get0_value(const OSSL_CMP_ITAV * itav) (a0)
int OSSL_CMP_ITAV_push0_stack_item(STACK_OF(OSSL_CMP_ITAV) ** itav_sk_p, OSSL_CMP_ITAV * itav) (a0,a1)
void OSSL_CMP_ITAV_free(OSSL_CMP_ITAV * itav) (a0)
void OSSL_CMP_MSG_free(OSSL_CMP_MSG * msg) (a0)
int EVP_MD_CTX_set_params(EVP_MD_CTX * ctx, const OSSL_PARAM * params) (a0,a1)
int EVP_MD_CTX_get_params(EVP_MD_CTX * ctx, OSSL_PARAM * params) (a0,a1)
BN_CTX * BN_CTX_new_ex(OSSL_LIB_CTX * ctx) (a0)
BN_CTX * BN_CTX_secure_new_ex(OSSL_LIB_CTX * ctx) (a0)
void OPENSSL_thread_stop_ex(OSSL_LIB_CTX * ctx) (a0)
const OSSL_PARAM * OSSL_PARAM_locate_const(const OSSL_PARAM * p, const char * key) (a0,a1)
void X509_REQ_set0_distinguishing_id(X509_REQ * x, ASN1_OCTET_STRING * d_id) (a0,a1)
ASN1_OCTET_STRING * X509_REQ_get0_distinguishing_id(X509_REQ * x) (a0)
int BN_rand_ex(BIGNUM * rnd, int bits, int top, int bottom, unsigned int strength, BN_CTX * ctx) (a0,d0,d1,d2,d3,a1)
int BN_priv_rand_ex(BIGNUM * rnd, int bits, int top, int bottom, unsigned int strength, BN_CTX * ctx) (a0,d0,d1,d2,d3,a1)
int BN_rand_range_ex(BIGNUM * r, const BIGNUM * range, unsigned int strength, BN_CTX * ctx) (a0,a1,d0,a2)
int BN_priv_rand_range_ex(BIGNUM * r, const BIGNUM * range, unsigned int strength, BN_CTX * ctx) (a0,a1,d0,a2)
int BN_generate_prime_ex2(BIGNUM * ret, int bits, int safe, const BIGNUM * add, const BIGNUM * rem, BN_GENCB * cb, BN_CTX * ctx) (a0,d0,d1,a1,a2,a3,d2)
void EVP_KEYEXCH_free(EVP_KEYEXCH * exchange) (a0)
int EVP_KEYEXCH_up_ref(EVP_KEYEXCH * exchange) (a0)
EVP_KEYEXCH * EVP_KEYEXCH_fetch(OSSL_LIB_CTX * ctx, const char * algorithm, const char * properties) (a0,a1,a2)
int EVP_PKEY_CTX_set_dh_pad(EVP_PKEY_CTX * ctx, int pad) (a0,d0)
int EVP_PKEY_CTX_set_params(EVP_PKEY_CTX * ctx, const OSSL_PARAM * params) (a0,a1)
EVP_KEYMGMT * EVP_KEYMGMT_fetch(OSSL_LIB_CTX * ctx, const char * algorithm, const char * properties) (a0,a1,a2)
int EVP_KEYMGMT_up_ref(EVP_KEYMGMT * keymgmt) (a0)
void EVP_KEYMGMT_free(EVP_KEYMGMT * keymgmt) (a0)
const OSSL_PROVIDER * EVP_KEYMGMT_get0_provider(const EVP_KEYMGMT * keymgmt) (a0)
X509_PUBKEY * X509_PUBKEY_dup(const X509_PUBKEY * a) (a0)
const char * EVP_MD_get0_name(const EVP_MD * md) (a0)
const char * EVP_CIPHER_get0_name(const EVP_CIPHER * cipher) (a0)
const OSSL_PROVIDER * EVP_MD_get0_provider(const EVP_MD * md) (a0)
const OSSL_PROVIDER * EVP_CIPHER_get0_provider(const EVP_CIPHER * cipher) (a0)
const char * OSSL_PROVIDER_get0_name(const OSSL_PROVIDER * prov) (a0)
void EVP_CIPHER_do_all_provided(OSSL_LIB_CTX * libctx, void (*fn)(EVP_CIPHER *cipher, void *arg), void * arg) (a0,a1,a2)
void EVP_MD_do_all_provided(OSSL_LIB_CTX * libctx, void (*fn)(EVP_MD *md, void *arg), void * arg) (a0,a1,a2)
OSSL_PROVIDER * EVP_KEYEXCH_get0_provider(const EVP_KEYEXCH * exchange) (a0)
int OSSL_PROVIDER_available(OSSL_LIB_CTX * a, const char * name) (a0,a1)
void ERR_new() ()
void ERR_set_debug(const char * file, int line, const char * func) (a0,d0,a1)
void ERR_vset_error(int lib, int reason, const char * fmt, va_list args) (d0,d1,a0,a1)
==varargs
void ERR_set_error(int lib, int reason, const char * fmt, long dummy, ...) (d0,d1,a0,a1)
int X509_self_signed(X509 * cert, int verify_signature) (a0,d0)
int OPENSSL_hexstr2buf_ex(unsigned char * buf, size_t buf_n, size_t * buflen, const char * str, const char sep) (a0,d0,a1,a2,d1)
int OPENSSL_buf2hexstr_ex(char * str, size_t str_n, size_t * strlength, const unsigned char * buf, size_t buflen, const char sep) (a0,d0,a1,a2,d1,d2)
int OSSL_PARAM_allocate_from_text(OSSL_PARAM * to, const OSSL_PARAM * paramdefs, const char * key, const char * value, size_t value_n, int * found) (a0,a1,a2,a3,d0,d1)
const OSSL_PARAM * EVP_MD_gettable_params(const EVP_MD * digest) (a0)
const OSSL_PARAM * EVP_MD_CTX_settable_params(EVP_MD_CTX * ctx) (a0)
const OSSL_PARAM * EVP_MD_CTX_gettable_params(EVP_MD_CTX * ctx) (a0)
int EVP_CIPHER_get_params(EVP_CIPHER * cipher, OSSL_PARAM * params) (a0,a1)
int EVP_CIPHER_CTX_set_params(EVP_CIPHER_CTX * ctx, const OSSL_PARAM * params) (a0,a1)
int EVP_CIPHER_CTX_get_params(EVP_CIPHER_CTX * ctx, OSSL_PARAM * params) (a0,a1)
const OSSL_PARAM * EVP_CIPHER_gettable_params(const EVP_CIPHER * cipher) (a0)
const OSSL_PARAM * EVP_CIPHER_settable_ctx_params(const EVP_CIPHER * cipher) (a0)
const OSSL_PARAM * EVP_CIPHER_gettable_ctx_params(const EVP_CIPHER * cipher) (a0)
int EVP_MD_get_params(const EVP_MD * digest, OSSL_PARAM * params) (a0,a1)
EVP_MAC * EVP_MAC_fetch(OSSL_LIB_CTX * libctx, const char * algorithm, const char * properties) (a0,a1,a2)
const OSSL_PARAM * EVP_MAC_settable_ctx_params(const EVP_MAC * mac) (a0)
int EVP_MAC_CTX_set_params(EVP_MAC_CTX * ctx, const OSSL_PARAM * params) (a0,a1)
int EVP_MAC_CTX_get_params(EVP_MAC_CTX * ctx, OSSL_PARAM * params) (a0,a1)
const OSSL_PARAM * EVP_MAC_gettable_ctx_params(const EVP_MAC * mac) (a0)
void EVP_MAC_free(EVP_MAC * mac) (a0)
int EVP_MAC_up_ref(EVP_MAC * mac) (a0)
int EVP_MAC_get_params(EVP_MAC * mac, OSSL_PARAM * params) (a0,a1)
const OSSL_PARAM * EVP_MAC_gettable_params(const EVP_MAC * mac) (a0)
const OSSL_PROVIDER * EVP_MAC_get0_provider(const EVP_MAC * mac) (a0)
void EVP_MAC_do_all_provided(OSSL_LIB_CTX * libctx, void (*fn)(EVP_MAC *mac, void *arg), void * arg) (a0,a1,a2)
const char * EVP_MAC_get0_name(const EVP_MAC * mac) (a0)
void EVP_MD_free(EVP_MD * md) (a0)
void EVP_CIPHER_free(EVP_CIPHER * cipher) (a0)
int EVP_KDF_up_ref(EVP_KDF * kdf) (a0)
void EVP_KDF_free(EVP_KDF * kdf) (a0)
EVP_KDF * EVP_KDF_fetch(OSSL_LIB_CTX * libctx, const char * algorithm, const char * properties) (a0,a1,a2)
EVP_KDF_CTX * EVP_KDF_CTX_dup(const EVP_KDF_CTX * src) (a0)
const OSSL_PROVIDER * EVP_KDF_get0_provider(const EVP_KDF * kdf) (a0)
int EVP_KDF_get_params(EVP_KDF * kdf, OSSL_PARAM * params) (a0,a1)
int EVP_KDF_CTX_get_params(EVP_KDF_CTX * ctx, OSSL_PARAM * params) (a0,a1)
int EVP_KDF_CTX_set_params(EVP_KDF_CTX * ctx, const OSSL_PARAM * params) (a0,a1)
const OSSL_PARAM * EVP_KDF_gettable_params(const EVP_KDF * kdf) (a0)
const OSSL_PARAM * EVP_KDF_gettable_ctx_params(const EVP_KDF * kdf) (a0)
const OSSL_PARAM * EVP_KDF_settable_ctx_params(const EVP_KDF * kdf) (a0)
void EVP_KDF_do_all_provided(OSSL_LIB_CTX * libctx, void (*fn)(EVP_KDF *kdf, void *arg), void * arg) (a0,a1,a2)
void EVP_SIGNATURE_free(EVP_SIGNATURE * signature) (a0)
int EVP_SIGNATURE_up_ref(EVP_SIGNATURE * signature) (a0)
OSSL_PROVIDER * EVP_SIGNATURE_get0_provider(const EVP_SIGNATURE * signature) (a0)
EVP_SIGNATURE * EVP_SIGNATURE_fetch(OSSL_LIB_CTX * ctx, const char * algorithm, const char * properties) (a0,a1,a2)
int EVP_PKEY_CTX_set_signature_md(EVP_PKEY_CTX * ctx, const EVP_MD * md) (a0,a1)
int EVP_PKEY_CTX_get_signature_md(EVP_PKEY_CTX * ctx, const EVP_MD ** md) (a0,a1)
int EVP_PKEY_CTX_get_params(EVP_PKEY_CTX * ctx, OSSL_PARAM * params) (a0,a1)
const OSSL_PARAM * EVP_PKEY_CTX_gettable_params(const EVP_PKEY_CTX * ctx) (a0)
const OSSL_PARAM * EVP_PKEY_CTX_settable_params(const EVP_PKEY_CTX * ctx) (a0)
int EVP_CIPHER_CTX_get_tag_length(const EVP_CIPHER_CTX * ctx) (a0)
unsigned long ERR_get_error_all(const char ** file, int * line, const char ** func, const char ** data, int * flags) (a0,a1,a2,a3,d0)
unsigned long ERR_peek_error_func(const char ** func) (a0)
unsigned long ERR_peek_error_data(const char ** data, int * flags) (a0,a1)
unsigned long ERR_peek_error_all(const char ** file, int * line, const char ** func, const char ** data, int * flags) (a0,a1,a2,a3,d0)
unsigned long ERR_peek_last_error_func(const char ** func) (a0)
unsigned long ERR_peek_last_error_data(const char ** data, int * flags) (a0,a1)
unsigned long ERR_peek_last_error_all(const char ** file, int * line, const char ** func, const char ** data, int * flags) (a0,a1,a2,a3,d0)
int EVP_CIPHER_is_a(const EVP_CIPHER * cipher, const char * name) (a0,a1)
int EVP_MAC_is_a(const EVP_MAC * mac, const char * name) (a0,a1)
const OSSL_PARAM * EVP_MD_settable_ctx_params(const EVP_MD * md) (a0)
const OSSL_PARAM * EVP_MD_gettable_ctx_params(const EVP_MD * md) (a0)
OSSL_CMP_CTX * OSSL_CMP_CTX_new(OSSL_LIB_CTX * libctx, const char * propq) (a0,a1)
void OSSL_CMP_CTX_free(OSSL_CMP_CTX * ctx) (a0)
int OSSL_CMP_CTX_reinit(OSSL_CMP_CTX * ctx) (a0)
int OSSL_CMP_CTX_set_option(OSSL_CMP_CTX * ctx, int opt, int val) (a0,d0,d1)
int OSSL_CMP_CTX_get_option(const OSSL_CMP_CTX * ctx, int opt) (a0,d0)
int OSSL_CMP_CTX_set_log_cb(OSSL_CMP_CTX * ctx, OSSL_CMP_log_cb_t cb) (a0,a1)
void OSSL_CMP_CTX_print_errors(const OSSL_CMP_CTX * ctx) (a0)
int OSSL_CMP_CTX_set1_serverPath(OSSL_CMP_CTX * ctx, const char * path) (a0,a1)
int OSSL_CMP_CTX_set1_server(OSSL_CMP_CTX * ctx, const char * address) (a0,a1)
int OSSL_CMP_CTX_set_serverPort(OSSL_CMP_CTX * ctx, int port) (a0,d0)
int OSSL_CMP_CTX_set1_proxy(OSSL_CMP_CTX * ctx, const char * name) (a0,a1)
int OSSL_CMP_CTX_set1_no_proxy(OSSL_CMP_CTX * ctx, const char * names) (a0,a1)
int OSSL_CMP_CTX_set_http_cb(OSSL_CMP_CTX * ctx, OSSL_HTTP_bio_cb_t cb) (a0,a1)
int OSSL_CMP_CTX_set_http_cb_arg(OSSL_CMP_CTX * ctx, void * arg) (a0,a1)
void * OSSL_CMP_CTX_get_http_cb_arg(const OSSL_CMP_CTX * ctx) (a0)
int OSSL_CMP_CTX_set_transfer_cb(OSSL_CMP_CTX * ctx, OSSL_CMP_transfer_cb_t cb) (a0,a1)
int OSSL_CMP_CTX_set_transfer_cb_arg(OSSL_CMP_CTX * ctx, void * arg) (a0,a1)
void * OSSL_CMP_CTX_get_transfer_cb_arg(const OSSL_CMP_CTX * ctx) (a0)
int OSSL_CMP_CTX_set1_srvCert(OSSL_CMP_CTX * ctx, X509 * cert) (a0,a1)
int OSSL_CMP_CTX_set1_expected_sender(OSSL_CMP_CTX * ctx, const X509_NAME * name) (a0,a1)
int OSSL_CMP_CTX_set0_trustedStore(OSSL_CMP_CTX * ctx, X509_STORE * store) (a0,a1)
X509_STORE * OSSL_CMP_CTX_get0_trustedStore(const OSSL_CMP_CTX * ctx) (a0)
int OSSL_CMP_CTX_set1_untrusted(OSSL_CMP_CTX * ctx, STACK_OF(X509) * certs) (a0,a1)
STACK_OF(X509) * OSSL_CMP_CTX_get0_untrusted(const OSSL_CMP_CTX * ctx) (a0)
int OSSL_CMP_CTX_set1_cert(OSSL_CMP_CTX * ctx, X509 * cert) (a0,a1)
int OSSL_CMP_CTX_set1_pkey(OSSL_CMP_CTX * ctx, EVP_PKEY * pkey) (a0,a1)
int OSSL_CMP_CTX_build_cert_chain(OSSL_CMP_CTX * ctx, X509_STORE * own_trusted, STACK_OF(X509) * candidates) (a0,a1,a2)
int OSSL_CMP_CTX_set1_referenceValue(OSSL_CMP_CTX * ctx, const unsigned char * ref, int len) (a0,a1,d0)
int OSSL_CMP_CTX_set1_secretValue(OSSL_CMP_CTX * ctx, const unsigned char * sec, const int len) (a0,a1,d0)
int OSSL_CMP_CTX_set1_recipient(OSSL_CMP_CTX * ctx, const X509_NAME * name) (a0,a1)
int OSSL_CMP_CTX_push0_geninfo_ITAV(OSSL_CMP_CTX * ctx, OSSL_CMP_ITAV * itav) (a0,a1)
int OSSL_CMP_CTX_set1_extraCertsOut(OSSL_CMP_CTX * ctx, STACK_OF(X509) * extraCertsOut) (a0,a1)
int OSSL_CMP_CTX_set0_newPkey(OSSL_CMP_CTX * ctx, int priv, EVP_PKEY * pkey) (a0,d0,a1)
EVP_PKEY * OSSL_CMP_CTX_get0_newPkey(const OSSL_CMP_CTX * ctx, int priv) (a0,d0)
int OSSL_CMP_CTX_set1_issuer(OSSL_CMP_CTX * ctx, const X509_NAME * name) (a0,a1)
int OSSL_CMP_CTX_set1_subjectName(OSSL_CMP_CTX * ctx, const X509_NAME * name) (a0,a1)
int OSSL_CMP_CTX_push1_subjectAltName(OSSL_CMP_CTX * ctx, const GENERAL_NAME * name) (a0,a1)
int OSSL_CMP_CTX_set0_reqExtensions(OSSL_CMP_CTX * ctx, X509_EXTENSIONS * exts) (a0,a1)
int OSSL_CMP_CTX_reqExtensions_have_SAN(OSSL_CMP_CTX * ctx) (a0)
int OSSL_CMP_CTX_push0_policy(OSSL_CMP_CTX * ctx, POLICYINFO * pinfo) (a0,a1)
int OSSL_CMP_CTX_set1_oldCert(OSSL_CMP_CTX * ctx, X509 * cert) (a0,a1)
int OSSL_CMP_CTX_set1_p10CSR(OSSL_CMP_CTX * ctx, const X509_REQ * csr) (a0,a1)
int OSSL_CMP_CTX_push0_genm_ITAV(OSSL_CMP_CTX * ctx, OSSL_CMP_ITAV * itav) (a0,a1)
int OSSL_CMP_CTX_set_certConf_cb(OSSL_CMP_CTX * ctx, OSSL_CMP_certConf_cb_t cb) (a0,a1)
int OSSL_CMP_CTX_set_certConf_cb_arg(OSSL_CMP_CTX * ctx, void * arg) (a0,a1)
void * OSSL_CMP_CTX_get_certConf_cb_arg(const OSSL_CMP_CTX * ctx) (a0)
int OSSL_CMP_CTX_get_status(const OSSL_CMP_CTX * ctx) (a0)
OSSL_CMP_PKIFREETEXT * OSSL_CMP_CTX_get0_statusString(const OSSL_CMP_CTX * ctx) (a0)
int OSSL_CMP_CTX_get_failInfoCode(const OSSL_CMP_CTX * ctx) (a0)
X509 * OSSL_CMP_CTX_get0_newCert(const OSSL_CMP_CTX * ctx) (a0)
STACK_OF(X509) * OSSL_CMP_CTX_get1_newChain(const OSSL_CMP_CTX * ctx) (a0)
STACK_OF(X509) * OSSL_CMP_CTX_get1_caPubs(const OSSL_CMP_CTX * ctx) (a0)
STACK_OF(X509) * OSSL_CMP_CTX_get1_extraCertsIn(const OSSL_CMP_CTX * ctx) (a0)
int OSSL_CMP_CTX_set1_transactionID(OSSL_CMP_CTX * ctx, const ASN1_OCTET_STRING * id) (a0,a1)
int OSSL_CMP_CTX_set1_senderNonce(OSSL_CMP_CTX * ctx, const ASN1_OCTET_STRING * nonce) (a0,a1)
int OSSL_CMP_log_open() ()
void OSSL_CMP_log_close() ()
int OSSL_CMP_print_to_bio(BIO * bio, const char * component, const char * file, int line, OSSL_CMP_severity level, const char * msg) (a0,a1,a2,d0,d1,a3)
void OSSL_CMP_print_errors_cb(OSSL_CMP_log_cb_t log_fn) (a0)
const X509_NAME * OSSL_CRMF_CERTID_get0_issuer(const OSSL_CRMF_CERTID * cid) (a0)
const ASN1_INTEGER * OSSL_CRMF_CERTID_get0_serialNumber(const OSSL_CRMF_CERTID * cid) (a0)
int EVP_DigestSignUpdate(EVP_MD_CTX * ctx, const void * data, size_t dsize) (a0,a1,d0)
int EVP_DigestVerifyUpdate(EVP_MD_CTX * ctx, const void * data, size_t dsize) (a0,a1,d0)
int BN_check_prime(const BIGNUM * p, BN_CTX * ctx, BN_GENCB * cb) (a0,a1,a2)
int EVP_KEYMGMT_is_a(const EVP_KEYMGMT * keymgmt, const char * name) (a0,a1)
void EVP_KEYMGMT_do_all_provided(OSSL_LIB_CTX * libctx, void (*fn)(EVP_KEYMGMT *keymgmt, void *arg), void * arg) (a0,a1,a2)
int EVP_KEYEXCH_is_a(const EVP_KEYEXCH * keyexch, const char * name) (a0,a1)
void EVP_KEYEXCH_do_all_provided(OSSL_LIB_CTX * libctx, void (*fn)(EVP_KEYEXCH *keyexch, void *data), void * data) (a0,a1,a2)
int EVP_KDF_is_a(const EVP_KDF * kdf, const char * name) (a0,a1)
int EVP_MD_is_a(const EVP_MD * md, const char * name) (a0,a1)
int EVP_SIGNATURE_is_a(const EVP_SIGNATURE * signature, const char * name) (a0,a1)
void EVP_SIGNATURE_do_all_provided(OSSL_LIB_CTX * libctx, void (*fn)(EVP_SIGNATURE *signature, void *data), void * data) (a0,a1,a2)
int EVP_MD_names_do_all(const EVP_MD * md, void (*fn)(const char *name, void *data), void * data) (a0,a1,a2)
int EVP_CIPHER_names_do_all(const EVP_CIPHER * cipher, void (*fn)(const char *name, void *data), void * data) (a0,a1,a2)
int EVP_MAC_names_do_all(const EVP_MAC * mac, void (*fn)(const char *name, void *data), void * data) (a0,a1,a2)
int EVP_KEYMGMT_names_do_all(const EVP_KEYMGMT * keymgmt, void (*fn)(const char *name, void *data), void * data) (a0,a1,a2)
int EVP_KEYEXCH_names_do_all(const EVP_KEYEXCH * keyexch, void (*fn)(const char *name, void *data), void * data) (a0,a1,a2)
int EVP_KDF_names_do_all(const EVP_KDF * kdf, void (*fn)(const char *name, void *data), void * data) (a0,a1,a2)
int EVP_SIGNATURE_names_do_all(const EVP_SIGNATURE * signature, void (*fn)(const char *name, void *data), void * data) (a0,a1,a2)
char * OSSL_CMP_CTX_snprint_PKIStatus(const OSSL_CMP_CTX * ctx, char * buf, size_t bufsize) (a0,a1,d0)
ASN1_OCTET_STRING * OSSL_CMP_HDR_get0_transactionID(const OSSL_CMP_PKIHEADER * hdr) (a0)
ASN1_OCTET_STRING * OSSL_CMP_HDR_get0_recipNonce(const OSSL_CMP_PKIHEADER * hdr) (a0)
X509_LOOKUP_METHOD * X509_LOOKUP_store() ()
int X509_add_cert(STACK_OF(X509) * sk, X509 * cert, int flags) (a0,a1,d0)
int X509_add_certs(STACK_OF(X509) * sk, STACK_OF(X509) * certs, int flags) (a0,a1,d0)
int X509_STORE_load_file(X509_STORE * xs, const char * file) (a0,a1)
int X509_STORE_load_path(X509_STORE * xs, const char * path) (a0,a1)
int X509_STORE_load_store(X509_STORE * xs, const char * store) (a0,a1)
int EVP_PKEY_fromdata(EVP_PKEY_CTX * ctx, EVP_PKEY ** ppkey, int selection, OSSL_PARAM * params) (a0,a1,d0,a2)
void EVP_ASYM_CIPHER_free(EVP_ASYM_CIPHER * cipher) (a0)
int EVP_ASYM_CIPHER_up_ref(EVP_ASYM_CIPHER * cipher) (a0)
OSSL_PROVIDER * EVP_ASYM_CIPHER_get0_provider(const EVP_ASYM_CIPHER * cipher) (a0)
EVP_ASYM_CIPHER * EVP_ASYM_CIPHER_fetch(OSSL_LIB_CTX * ctx, const char * algorithm, const char * properties) (a0,a1,a2)
int EVP_ASYM_CIPHER_is_a(const EVP_ASYM_CIPHER * cipher, const char * name) (a0,a1)
void EVP_ASYM_CIPHER_do_all_provided(OSSL_LIB_CTX * libctx, void (*fn)(EVP_ASYM_CIPHER *cipher, void *arg), void * arg) (a0,a1,a2)
int EVP_ASYM_CIPHER_names_do_all(const EVP_ASYM_CIPHER * cipher, void (*fn)(const char *name, void *data), void * data) (a0,a1,a2)
int EVP_PKEY_CTX_set_rsa_padding(EVP_PKEY_CTX * ctx, int pad_mode) (a0,d0)
int EVP_PKEY_CTX_get_rsa_padding(EVP_PKEY_CTX * ctx, int * pad_mode) (a0,a1)
int EVP_PKEY_CTX_set_rsa_mgf1_md(EVP_PKEY_CTX * ctx, const EVP_MD * md) (a0,a1)
int EVP_PKEY_CTX_set_rsa_mgf1_md_name(EVP_PKEY_CTX * ctx, const char * mdname, const char * mdprops) (a0,a1,a2)
int EVP_PKEY_CTX_get_rsa_mgf1_md(EVP_PKEY_CTX * ctx, const EVP_MD ** md) (a0,a1)
int EVP_PKEY_CTX_set_rsa_oaep_md(EVP_PKEY_CTX * ctx, const EVP_MD * md) (a0,a1)
int EVP_PKEY_CTX_set_rsa_oaep_md_name(EVP_PKEY_CTX * ctx, const char * mdname, const char * mdprops) (a0,a1,a2)
int EVP_PKEY_CTX_get_rsa_oaep_md(EVP_PKEY_CTX * ctx, const EVP_MD ** md) (a0,a1)
int EVP_PKEY_CTX_set0_rsa_oaep_label(EVP_PKEY_CTX * ctx, void * label, int llen) (a0,a1,d0)
int EVP_PKEY_CTX_get0_rsa_oaep_label(EVP_PKEY_CTX * ctx, unsigned char ** label) (a0,a1)
int EVP_PKEY_CTX_get_rsa_mgf1_md_name(EVP_PKEY_CTX * ctx, char * name, size_t namelen) (a0,a1,d0)
int EVP_PKEY_CTX_get_rsa_oaep_md_name(EVP_PKEY_CTX * ctx, char * name, size_t namelen) (a0,a1,d0)
int OSSL_ENCODER_up_ref(OSSL_ENCODER * encoder) (a0)
void OSSL_ENCODER_free(OSSL_ENCODER * encoder) (a0)
OSSL_ENCODER * OSSL_ENCODER_fetch(OSSL_LIB_CTX * libctx, const char * name, const char * properties) (a0,a1,a2)
int OSSL_ENCODER_is_a(const OSSL_ENCODER * encoder, const char * name) (a0,a1)
const OSSL_PROVIDER * OSSL_ENCODER_get0_provider(const OSSL_ENCODER * encoder) (a0)
void OSSL_ENCODER_do_all_provided(OSSL_LIB_CTX * libctx, void (*fn)(OSSL_ENCODER *encoder, void *arg), void * arg) (a0,a1,a2)
int OSSL_ENCODER_names_do_all(const OSSL_ENCODER * encoder, void (*fn)(const char *name, void *data), void * data) (a0,a1,a2)
const OSSL_PARAM * OSSL_ENCODER_settable_ctx_params(OSSL_ENCODER * encoder) (a0)
OSSL_ENCODER_CTX * OSSL_ENCODER_CTX_new() ()
int OSSL_ENCODER_CTX_set_params(OSSL_ENCODER_CTX * ctx, const OSSL_PARAM * params) (a0,a1)
void OSSL_ENCODER_CTX_free(OSSL_ENCODER_CTX * ctx) (a0)
const char * OSSL_ENCODER_get0_properties(const OSSL_ENCODER * encoder) (a0)
int OSSL_ENCODER_to_bio(OSSL_ENCODER_CTX * ctx, BIO * out) (a0,a1)
OSSL_ENCODER_CTX * OSSL_ENCODER_CTX_new_for_pkey(const EVP_PKEY * pkey, int selection, const char * output_type, const char * output_struct, const char * propquery) (a0,d0,a1,a2,a3)
int OSSL_ENCODER_CTX_set_cipher(OSSL_ENCODER_CTX * ctx, const char * cipher_name, const char * propquery) (a0,a1,a2)
int OSSL_ENCODER_CTX_set_passphrase(OSSL_ENCODER_CTX * ctx, const unsigned char * kstr, size_t klen) (a0,a1,d0)
int OSSL_ENCODER_CTX_set_pem_password_cb(OSSL_ENCODER_CTX * ctx, pem_password_cb * cb, void * cbarg) (a0,a1,a2)
int OSSL_ENCODER_CTX_set_passphrase_ui(OSSL_ENCODER_CTX * ctx, const UI_METHOD * ui_method, void * ui_data) (a0,a1,a2)
X509_PUBKEY * PEM_read_bio_X509_PUBKEY(BIO * out, X509_PUBKEY ** x, pem_password_cb * cb, void * u) (a0,a1,a2,a3)
int PEM_write_bio_X509_PUBKEY(BIO * out, const X509_PUBKEY * x) (a0,a1)
X509_PUBKEY * d2i_X509_PUBKEY_bio(BIO * bp, X509_PUBKEY ** xpk) (a0,a1)
int i2d_X509_PUBKEY_bio(BIO * bp, const X509_PUBKEY * xpk) (a0,a1)
int X509_cmp_timeframe(const X509_VERIFY_PARAM * vpm, const ASN1_TIME * start, const ASN1_TIME * end) (a0,a1,a2)
OSSL_CMP_PKIHEADER * OSSL_CMP_MSG_get0_header(const OSSL_CMP_MSG * msg) (a0)
int OSSL_CMP_MSG_get_bodytype(const OSSL_CMP_MSG * msg) (a0)
int OSSL_CMP_MSG_update_transactionID(OSSL_CMP_CTX * ctx, OSSL_CMP_MSG * msg) (a0,a1)
OSSL_CRMF_MSG * OSSL_CMP_CTX_setup_CRM(OSSL_CMP_CTX * ctx, int for_KUR, int rid) (a0,d0,d1)
const BIO_METHOD * BIO_f_prefix() ()
EVP_PKEY_CTX * EVP_PKEY_CTX_new_from_name(OSSL_LIB_CTX * libctx, const char * name, const char * propquery) (a0,a1,a2)
EVP_PKEY_CTX * EVP_PKEY_CTX_new_from_pkey(OSSL_LIB_CTX * libctx, EVP_PKEY * pkey, const char * propquery) (a0,a1,a2)
void OSSL_SELF_TEST_set_callback(OSSL_LIB_CTX * libctx, OSSL_CALLBACK * cb, void * cbarg) (a0,a1,a2)
void OSSL_SELF_TEST_get_callback(OSSL_LIB_CTX * libctx, OSSL_CALLBACK ** cb, void ** cbarg) (a0,a1,a2)
ASN1_TIME * ASN1_TIME_dup(const ASN1_TIME * a) (a0)
ASN1_UTCTIME * ASN1_UTCTIME_dup(const ASN1_UTCTIME * a) (a0)
ASN1_GENERALIZEDTIME * ASN1_GENERALIZEDTIME_dup(const ASN1_GENERALIZEDTIME * a) (a0)
int RAND_priv_bytes_ex(OSSL_LIB_CTX * ctx, unsigned char * buf, size_t num, unsigned int strength) (a0,a1,d0,d1)
int RAND_bytes_ex(OSSL_LIB_CTX * ctx, unsigned char * buf, size_t num, unsigned int strength) (a0,a1,d0,d1)
int EVP_PKEY_get_default_digest_name(EVP_PKEY * pkey, char * mdname, size_t mdname_sz) (a0,a1,d0)
int CMS_decrypt_set1_pkey_and_peer(CMS_ContentInfo * cms, EVP_PKEY * pk, X509 * cert, X509 * peer) (a0,a1,a2,a3)
CMS_RecipientInfo * CMS_add1_recipient(CMS_ContentInfo * cms, X509 * recip, EVP_PKEY * originatorPrivKey, X509 * originator, unsigned int flags) (a0,a1,a2,a3,d0)
int CMS_RecipientInfo_kari_set0_pkey_and_peer(CMS_RecipientInfo * ri, EVP_PKEY * pk, X509 * peer) (a0,a1,a2)
int PKCS8_pkey_add1_attr(PKCS8_PRIV_KEY_INFO * p8, X509_ATTRIBUTE * attr) (a0,a1)
int PKCS8_pkey_add1_attr_by_OBJ(PKCS8_PRIV_KEY_INFO * p8, const ASN1_OBJECT * obj, int type, const unsigned char * bytes, int len) (a0,a1,d0,a2,d1)
int EVP_PKEY_private_check(EVP_PKEY_CTX * ctx) (a0)
int EVP_PKEY_pairwise_check(EVP_PKEY_CTX * ctx) (a0)
int ASN1_item_verify_ctx(const ASN1_ITEM * it, const X509_ALGOR * alg, const ASN1_BIT_STRING * signature, const void * data, EVP_MD_CTX * ctx) (a0,a1,a2,a3,d0)
int ASN1_item_sign_ex(const ASN1_ITEM * it, X509_ALGOR * algor1, X509_ALGOR * algor2, ASN1_BIT_STRING * signature, const void * data, const ASN1_OCTET_STRING * id, EVP_PKEY * pkey, const EVP_MD * md, OSSL_LIB_CTX * libctx, const char * propq) (a0,a1,a2,a3,d0,d1,d2,d3,d4,d5)
int ASN1_item_verify_ex(const ASN1_ITEM * it, const X509_ALGOR * alg, const ASN1_BIT_STRING * signature, const void * data, const ASN1_OCTET_STRING * id, EVP_PKEY * pkey, OSSL_LIB_CTX * libctx, const char * propq) (a0,a1,a2,a3,d0,d1,d2,d3)
int BIO_socket_wait(int fd, int for_read, time_t max_time) (d0,d1,d2)
int BIO_wait(BIO * bio, time_t max_time, unsigned int nap_milliseconds) (a0,d0,d1)
int BIO_do_connect_retry(BIO * bio, int timeout, int nap_milliseconds) (a0,d0,d1)
int OSSL_parse_url(const char * url, char ** pscheme, char ** puser, char ** phost, char ** pport, int * pport_num, char ** ppath, char ** pquery, char ** pfrag) (a0,a1,a2,a3,d0,d1,d2,d3,d4)
const char * OSSL_HTTP_adapt_proxy(const char * proxy, const char * no_proxy, const char * server, int use_ssl) (a0,a1,a2,d0)
size_t OSSL_HTTP_REQ_CTX_get_resp_len(const OSSL_HTTP_REQ_CTX * rctx) (a0)
int OSSL_HTTP_REQ_CTX_set_expected(OSSL_HTTP_REQ_CTX * rctx, const char * content_type, int asn1, int timeout, int keep_alive) (a0,a1,d0,d1,d2)
int OSSL_HTTP_is_alive(const OSSL_HTTP_REQ_CTX * rctx) (a0)
OSSL_HTTP_REQ_CTX * OSSL_HTTP_open(const char * server, const char * port, const char * proxy, const char * no_proxy, int use_ssl, BIO * bio, BIO * rbio, OSSL_HTTP_bio_cb_t bio_update_fn, void * arg, int buf_size, int overall_timeout) (a0,a1,a2,a3,d0,d1,d2,d3,d4,d5,d6)
int OSSL_HTTP_proxy_connect(BIO * bio, const char * server, const char * port, const char * proxyuser, const char * proxypass, int timeout, BIO * bio_err, const char * prog) (a0,a1,a2,a3,d0,d1,d2,d3)
int OSSL_HTTP_set1_request(OSSL_HTTP_REQ_CTX * rctx, const char * path, const STACK_OF(CONF_VALUE) * headers, const char * content_type, BIO * req, const char * expected_content_type, int expect_asn1, size_t max_resp_len, int timeout, int keep_alive) (a0,a1,a2,a3,d0,d1,d2,d3,d4,d5)
BIO * OSSL_HTTP_exchange(OSSL_HTTP_REQ_CTX * rctx, char ** redirection_url) (a0,a1)
BIO * OSSL_HTTP_get_amiga_1(const char * url, const char * proxy, const char * no_proxy, BIO * bio, BIO * rbio, OSSL_HTTP_bio_cb_t bio_update_fn, void * moreargs) (a0,a1,a2,d1,d2,a3,d0)
void * OSSL_HTTP_get_amiga_2(void * arg, int buf_size, const STACK_OF(CONF_VALUE) * headers, const char * expected_content_type, int expect_asn1, size_t max_resp_len, int timeout) (a0,a1,a2,a3,d0,d1,d2)
BIO * OSSL_HTTP_transfer_amiga_1(OSSL_HTTP_REQ_CTX ** prctx, const char * server, const char * port, const char * path, int use_ssl, const char * proxy, const char * no_proxy, BIO * bio, BIO * rbio, OSSL_HTTP_bio_cb_t bio_update_fn, void * moreargs) (a0,a1,a2,d1,d2,d3,d4,d5,d6,a3,d0)
void * OSSL_HTTP_transfer_amiga_2(void * arg, int buf_size, const STACK_OF(CONF_VALUE) * headers, const char * content_type, BIO * req, const char * expected_content_type, int expect_asn1, size_t max_resp_len, int timeout, int keep_alive) (a0,d0,a1,a2,a3,d1,d2,d3,d4,d5)
int OSSL_HTTP_close(OSSL_HTTP_REQ_CTX * rctx, int ok) (a0,d0)
BIO * ASN1_item_i2d_mem_bio(const ASN1_ITEM * it, const ASN1_VALUE * val) (a0,a1)
void ERR_add_error_txt(const char * sepr, const char * txt) (a0,a1)
void ERR_add_error_mem_bio(const char * sep, BIO * bio) (a0,a1)
int X509_STORE_CTX_print_verify_cb(int ok, X509_STORE_CTX * ctx) (d0,a0)
STACK_OF(X509) * X509_STORE_get1_all_certs(X509_STORE * xs) (a0)
int OSSL_CMP_validate_msg(OSSL_CMP_CTX * ctx, const OSSL_CMP_MSG * msg) (a0,a1)
int OSSL_CMP_validate_cert_path(const OSSL_CMP_CTX * ctx, X509_STORE * trusted_store, X509 * cert) (a0,a1,a2)
int EVP_PKEY_CTX_set_ecdh_cofactor_mode(EVP_PKEY_CTX * ctx, int cofactor_mode) (a0,d0)
int EVP_PKEY_CTX_get_ecdh_cofactor_mode(EVP_PKEY_CTX * ctx) (a0)
int EVP_PKEY_CTX_set_ecdh_kdf_type(EVP_PKEY_CTX * ctx, int kdf) (a0,d0)
int EVP_PKEY_CTX_get_ecdh_kdf_type(EVP_PKEY_CTX * ctx) (a0)
int EVP_PKEY_CTX_set_ecdh_kdf_md(EVP_PKEY_CTX * ctx, const EVP_MD * md) (a0,a1)
int EVP_PKEY_CTX_get_ecdh_kdf_md(EVP_PKEY_CTX * ctx, const EVP_MD ** md) (a0,a1)
int EVP_PKEY_CTX_set_ecdh_kdf_outlen(EVP_PKEY_CTX * ctx, int len) (a0,d0)
int EVP_PKEY_CTX_get_ecdh_kdf_outlen(EVP_PKEY_CTX * ctx, int * len) (a0,a1)
int EVP_PKEY_CTX_set0_ecdh_kdf_ukm(EVP_PKEY_CTX * ctx, unsigned char * ukm, int len) (a0,a1,d0)
int EVP_PKEY_CTX_get0_ecdh_kdf_ukm(EVP_PKEY_CTX * ctx, unsigned char ** ukm) (a0,a1)
int EVP_PKEY_CTX_set_rsa_pss_saltlen(EVP_PKEY_CTX * ctx, int saltlen) (a0,d0)
int EVP_PKEY_CTX_get_rsa_pss_saltlen(EVP_PKEY_CTX * ctx, int * saltlen) (a0,a1)
ISSUER_SIGN_TOOL * d2i_ISSUER_SIGN_TOOL(ISSUER_SIGN_TOOL ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_ISSUER_SIGN_TOOL(const ISSUER_SIGN_TOOL * a, unsigned char ** out) (a0,a1)
void ISSUER_SIGN_TOOL_free(ISSUER_SIGN_TOOL * a) (a0)
ISSUER_SIGN_TOOL * ISSUER_SIGN_TOOL_new() ()
const ASN1_ITEM * ISSUER_SIGN_TOOL_it() ()
OSSL_SELF_TEST * OSSL_SELF_TEST_new(OSSL_CALLBACK * cb, void * cbarg) (a0,a1)
void OSSL_SELF_TEST_free(OSSL_SELF_TEST * st) (a0)
void OSSL_SELF_TEST_onbegin(OSSL_SELF_TEST * st, const char * type, const char * desc) (a0,a1,a2)
int OSSL_SELF_TEST_oncorrupt_byte(OSSL_SELF_TEST * st, unsigned char * bytes) (a0,a1)
void OSSL_SELF_TEST_onend(OSSL_SELF_TEST * st, int ret) (a0,d0)
int OSSL_PROVIDER_set_default_search_path(OSSL_LIB_CTX * a, const char * path) (a0,a1)
ASN1_OCTET_STRING * X509_digest_sig(const X509 * cert, EVP_MD ** md_used, int * md_is_fallback) (a0,a1,a2)
OSSL_CMP_MSG * OSSL_CMP_MSG_dup(const OSSL_CMP_MSG * a) (a0)
OSSL_CMP_ITAV * OSSL_CMP_ITAV_dup(const OSSL_CMP_ITAV * a) (a0)
OSSL_CMP_PKISI * d2i_OSSL_CMP_PKISI(OSSL_CMP_PKISI ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_OSSL_CMP_PKISI(const OSSL_CMP_PKISI * a, unsigned char ** out) (a0,a1)
void OSSL_CMP_PKISI_free(OSSL_CMP_PKISI * a) (a0)
OSSL_CMP_PKISI * OSSL_CMP_PKISI_new() ()
const ASN1_ITEM * OSSL_CMP_PKISI_it() ()
OSSL_CMP_PKISI * OSSL_CMP_PKISI_dup(const OSSL_CMP_PKISI * a) (a0)
char * OSSL_CMP_snprint_PKIStatusInfo(const OSSL_CMP_PKISI * statusInfo, char * buf, size_t bufsize) (a0,a1,d0)
OSSL_CMP_PKISI * OSSL_CMP_STATUSINFO_new(int status, int fail_info, const char * text) (d0,d1,a0)
OSSL_CMP_MSG * d2i_OSSL_CMP_MSG_bio(BIO * bio, OSSL_CMP_MSG ** msg) (a0,a1)
int i2d_OSSL_CMP_MSG_bio(BIO * bio, const OSSL_CMP_MSG * msg) (a0,a1)
OSSL_CMP_MSG * OSSL_CMP_SRV_process_request(OSSL_CMP_SRV_CTX * srv_ctx, const OSSL_CMP_MSG * req) (a0,a1)
OSSL_CMP_MSG * OSSL_CMP_CTX_server_perform(OSSL_CMP_CTX * client_ctx, const OSSL_CMP_MSG * req) (a0,a1)
OSSL_CMP_SRV_CTX * OSSL_CMP_SRV_CTX_new(OSSL_LIB_CTX * libctx, const char * propq) (a0,a1)
void OSSL_CMP_SRV_CTX_free(OSSL_CMP_SRV_CTX * srv_ctx) (a0)
int OSSL_CMP_SRV_CTX_init(OSSL_CMP_SRV_CTX * srv_ctx, void * custom_ctx, OSSL_CMP_SRV_cert_request_cb_t process_cert_request, OSSL_CMP_SRV_rr_cb_t process_rr, OSSL_CMP_SRV_genm_cb_t process_genm, OSSL_CMP_SRV_error_cb_t process_error, OSSL_CMP_SRV_certConf_cb_t process_certConf, OSSL_CMP_SRV_pollReq_cb_t process_pollReq) (a0,a1,a2,a3,d0,d1,d2,d3)
OSSL_CMP_CTX * OSSL_CMP_SRV_CTX_get0_cmp_ctx(const OSSL_CMP_SRV_CTX * srv_ctx) (a0)
void * OSSL_CMP_SRV_CTX_get0_custom_ctx(const OSSL_CMP_SRV_CTX * srv_ctx) (a0)
int OSSL_CMP_SRV_CTX_set_send_unprotected_errors(OSSL_CMP_SRV_CTX * srv_ctx, int val) (a0,d0)
int OSSL_CMP_SRV_CTX_set_accept_unprotected(OSSL_CMP_SRV_CTX * srv_ctx, int val) (a0,d0)
int OSSL_CMP_SRV_CTX_set_accept_raverified(OSSL_CMP_SRV_CTX * srv_ctx, int val) (a0,d0)
int OSSL_CMP_SRV_CTX_set_grant_implicit_confirm(OSSL_CMP_SRV_CTX * srv_ctx, int val) (a0,d0)
X509 * OSSL_CMP_exec_certreq(OSSL_CMP_CTX * ctx, int req_type, const OSSL_CRMF_MSG * crm) (a0,d0,a1)
int OSSL_CMP_try_certreq(OSSL_CMP_CTX * ctx, int req_type, const OSSL_CRMF_MSG * crm, int * checkAfter) (a0,d0,a1,a2)
int OSSL_CMP_certConf_cb(OSSL_CMP_CTX * ctx, X509 * cert, int fail_info, const char ** text) (a0,a1,d0,a2)
int OSSL_CMP_exec_RR_ses(OSSL_CMP_CTX * ctx) (a0)
STACK_OF(OSSL_CMP_ITAV) * OSSL_CMP_exec_GENM_ses(OSSL_CMP_CTX * ctx) (a0)
OSSL_CMP_MSG * OSSL_CMP_MSG_http_perform(OSSL_CMP_CTX * ctx, const OSSL_CMP_MSG * req) (a0,a1)
OSSL_CMP_MSG * OSSL_CMP_MSG_read(const char * file, OSSL_LIB_CTX * libctx, const char * propq) (a0,a1,a2)
int OSSL_CMP_MSG_write(const char * file, const OSSL_CMP_MSG * msg) (a0,a1)
EVP_PKEY * EVP_PKEY_Q_vkeygen(OSSL_LIB_CTX * libctx, const char * propq, const char * type, va_list args) (a0,a1,a2,a3)
==varargs
EVP_PKEY * EVP_PKEY_Q_keygen(OSSL_LIB_CTX * libctx, const char * propq, const char * type, long dummy, ...) (a0,a1,a2,a3)
int EVP_PKEY_generate(EVP_PKEY_CTX * ctx, EVP_PKEY ** ppkey) (a0,a1)
int EVP_PKEY_CTX_set_rsa_keygen_bits(EVP_PKEY_CTX * ctx, int bits) (a0,d0)
int EVP_PKEY_CTX_set_rsa_keygen_pubexp(EVP_PKEY_CTX * ctx, BIGNUM * pubexp) (a0,a1)
int EVP_PKEY_CTX_set1_rsa_keygen_pubexp(EVP_PKEY_CTX * ctx, BIGNUM * pubexp) (a0,a1)
int EVP_PKEY_CTX_set_rsa_keygen_primes(EVP_PKEY_CTX * ctx, int primes) (a0,d0)
CONF * NCONF_new_ex(OSSL_LIB_CTX * libctx, CONF_METHOD * meth) (a0,a1)
int CONF_modules_load_file_ex(OSSL_LIB_CTX * libctx, const char * filename, const char * appname, unsigned long flags) (a0,a1,a2,d0)
int OSSL_LIB_CTX_load_config(OSSL_LIB_CTX * ctx, const char * config_file) (a0,a1)
OSSL_PARAM * OSSL_PARAM_BLD_to_param(OSSL_PARAM_BLD * bld) (a0)
int OSSL_PARAM_BLD_push_int(OSSL_PARAM_BLD * bld, const char * key, int val) (a0,a1,d0)
int OSSL_PARAM_BLD_push_uint(OSSL_PARAM_BLD * bld, const char * key, unsigned int val) (a0,a1,d0)
int OSSL_PARAM_BLD_push_long(OSSL_PARAM_BLD * bld, const char * key, long int val) (a0,a1,d0)
int OSSL_PARAM_BLD_push_ulong(OSSL_PARAM_BLD * bld, const char * key, unsigned long int val) (a0,a1,d0)
int OSSL_PARAM_BLD_push_int32(OSSL_PARAM_BLD * bld, const char * key, int32_t val) (a0,a1,d0)
int OSSL_PARAM_BLD_push_uint32(OSSL_PARAM_BLD * bld, const char * key, uint32_t val) (a0,a1,d0)
int OSSL_PARAM_BLD_push_int64(OSSL_PARAM_BLD * bld, const char * key, int64_t val) (a0,a1,d0-d1)
int OSSL_PARAM_BLD_push_uint64(OSSL_PARAM_BLD * bld, const char * key, uint64_t val) (a0,a1,d0-d1)
int OSSL_PARAM_BLD_push_size_t(OSSL_PARAM_BLD * bld, const char * key, size_t val) (a0,a1,d0)
int OSSL_PARAM_BLD_push_double(OSSL_PARAM_BLD * bld, const char * key, double val) (a0,a1,d0-d1)
int OSSL_PARAM_BLD_push_BN(OSSL_PARAM_BLD * bld, const char * key, const BIGNUM * bn) (a0,a1,a2)
int OSSL_PARAM_BLD_push_BN_pad(OSSL_PARAM_BLD * bld, const char * key, const BIGNUM * bn, size_t sz) (a0,a1,a2,d0)
int OSSL_PARAM_BLD_push_utf8_string(OSSL_PARAM_BLD * bld, const char * key, const char * buf, size_t bsize) (a0,a1,a2,d0)
int OSSL_PARAM_BLD_push_utf8_ptr(OSSL_PARAM_BLD * bld, const char * key, char * buf, size_t bsize) (a0,a1,a2,d0)
int OSSL_PARAM_BLD_push_octet_string(OSSL_PARAM_BLD * bld, const char * key, const void * buf, size_t bsize) (a0,a1,a2,d0)
int OSSL_PARAM_BLD_push_octet_ptr(OSSL_PARAM_BLD * bld, const char * key, void * buf, size_t bsize) (a0,a1,a2,d0)
OSSL_PARAM_BLD * OSSL_PARAM_BLD_new() ()
void OSSL_PARAM_BLD_free(OSSL_PARAM_BLD * bld) (a0)
int EVP_PKEY_set_type_by_keymgmt(EVP_PKEY * pkey, EVP_KEYMGMT * keymgmt) (a0,a1)
int OCSP_RESPID_set_by_key_ex(OCSP_RESPID * respid, X509 * cert, OSSL_LIB_CTX * libctx, const char * propq) (a0,a1,a2,a3)
int OCSP_RESPID_match_ex(OCSP_RESPID * respid, X509 * cert, OSSL_LIB_CTX * libctx, const char * propq) (a0,a1,a2,a3)
char * SRP_create_verifier_ex(const char * user, const char * pass, char ** salt, char ** verifier, const char * N, const char * g, OSSL_LIB_CTX * libctx, const char * propq) (a0,a1,a2,a3,d0,d1,d2,d3)
int SRP_create_verifier_BN_ex(const char * user, const char * pass, BIGNUM ** salt, BIGNUM ** verifier, const BIGNUM * N, const BIGNUM * g, OSSL_LIB_CTX * libctx, const char * propq) (a0,a1,a2,a3,d0,d1,d2,d3)
BIGNUM * SRP_Calc_B_ex(const BIGNUM * b, const BIGNUM * N, const BIGNUM * g, const BIGNUM * v, OSSL_LIB_CTX * libctx, const char * propq) (a0,a1,a2,a3,d0,d1)
BIGNUM * SRP_Calc_u_ex(const BIGNUM * A, const BIGNUM * B, const BIGNUM * N, OSSL_LIB_CTX * libctx, const char * propq) (a0,a1,a2,a3,d0)
BIGNUM * SRP_Calc_x_ex(const BIGNUM * s, const char * user, const char * pass, OSSL_LIB_CTX * libctx, const char * propq) (a0,a1,a2,a3,d0)
BIGNUM * SRP_Calc_client_key_ex(const BIGNUM * N, const BIGNUM * B, const BIGNUM * g, const BIGNUM * x, const BIGNUM * a, const BIGNUM * u, OSSL_LIB_CTX * libctx, const char * propq) (a0,a1,a2,a3,d0,d1,d2,d3)
const OSSL_PARAM * EVP_PKEY_gettable_params(const EVP_PKEY * pkey) (a0)
int EVP_PKEY_get_int_param(const EVP_PKEY * pkey, const char * key_name, int * out) (a0,a1,a2)
int EVP_PKEY_get_size_t_param(const EVP_PKEY * pkey, const char * key_name, size_t * out) (a0,a1,a2)
int EVP_PKEY_get_bn_param(const EVP_PKEY * pkey, const char * key_name, BIGNUM ** bn) (a0,a1,a2)
int EVP_PKEY_get_utf8_string_param(const EVP_PKEY * pkey, const char * key_name, char * str, size_t max_buf_sz, size_t * out_sz) (a0,a1,a2,d0,a3)
int EVP_PKEY_get_octet_string_param(const EVP_PKEY * pkey, const char * key_name, unsigned char * buf, size_t max_buf_sz, size_t * out_sz) (a0,a1,a2,d0,a3)
int EVP_PKEY_is_a(const EVP_PKEY * pkey, const char * name) (a0,a1)
int EVP_PKEY_can_sign(const EVP_PKEY * pkey) (a0)
X509_STORE_CTX * X509_STORE_CTX_new_ex(OSSL_LIB_CTX * libctx, const char * propq) (a0,a1)
int X509_STORE_CTX_verify(X509_STORE_CTX * ctx) (a0)
CT_POLICY_EVAL_CTX * CT_POLICY_EVAL_CTX_new_ex(OSSL_LIB_CTX * libctx, const char * propq) (a0,a1)
CTLOG * CTLOG_new_ex(EVP_PKEY * public_key, const char * name, OSSL_LIB_CTX * libctx, const char * propq) (a0,a1,a2,a3)
int CTLOG_new_from_base64_ex(CTLOG ** ct_log, const char * pkey_base64, const char * name, OSSL_LIB_CTX * libctx, const char * propq) (a0,a1,a2,a3,d0)
CTLOG_STORE * CTLOG_STORE_new_ex(OSSL_LIB_CTX * libctx, const char * propq) (a0,a1)
int EVP_PKEY_set_ex_data(EVP_PKEY * key, int idx, void * arg) (a0,d0,a1)
void * EVP_PKEY_get_ex_data(const EVP_PKEY * key, int idx) (a0,d0)
int EVP_PKEY_CTX_set_group_name(EVP_PKEY_CTX * ctx, const char * name) (a0,a1)
int EVP_PKEY_CTX_get_group_name(EVP_PKEY_CTX * ctx, char * name, size_t namelen) (a0,a1,d0)
int EVP_PKEY_CTX_set_ec_paramgen_curve_nid(EVP_PKEY_CTX * ctx, int nid) (a0,d0)
EVP_PKEY * d2i_PrivateKey_ex(int type, EVP_PKEY ** a, const unsigned char ** pp, long length, OSSL_LIB_CTX * libctx, const char * propq) (d0,a0,a1,d1,a2,a3)
EVP_PKEY * d2i_AutoPrivateKey_ex(EVP_PKEY ** a, const unsigned char ** pp, long length, OSSL_LIB_CTX * libctx, const char * propq) (a0,a1,d0,a2,a3)
EVP_PKEY * d2i_PrivateKey_ex_bio(BIO * bp, EVP_PKEY ** a, OSSL_LIB_CTX * libctx, const char * propq) (a0,a1,a2,a3)
EVP_PKEY * PEM_read_bio_PrivateKey_ex(BIO * out, EVP_PKEY ** x, pem_password_cb * cb, void * u, OSSL_LIB_CTX * libctx, const char * propq) (a0,a1,a2,a3,d0,d1)
int EVP_PKEY_CTX_set_dsa_paramgen_bits(EVP_PKEY_CTX * ctx, int nbits) (a0,d0)
int EVP_PKEY_CTX_set_dsa_paramgen_q_bits(EVP_PKEY_CTX * ctx, int qbits) (a0,d0)
int EVP_PKEY_CTX_set_dsa_paramgen_md_props(EVP_PKEY_CTX * ctx, const char * md_name, const char * md_properties) (a0,a1,a2)
int EVP_PKEY_CTX_set_dsa_paramgen_gindex(EVP_PKEY_CTX * ctx, int gindex) (a0,d0)
int EVP_PKEY_CTX_set_dsa_paramgen_type(EVP_PKEY_CTX * ctx, const char * name) (a0,a1)
int EVP_PKEY_CTX_set_dsa_paramgen_seed(EVP_PKEY_CTX * ctx, const unsigned char * seed, size_t seedlen) (a0,a1,d0)
int EVP_PKEY_CTX_set_dsa_paramgen_md(EVP_PKEY_CTX * ctx, const EVP_MD * md) (a0,a1)
int EVP_PKEY_CTX_set_dh_paramgen_type(EVP_PKEY_CTX * ctx, int typ) (a0,d0)
int EVP_PKEY_CTX_set_dh_paramgen_gindex(EVP_PKEY_CTX * ctx, int gindex) (a0,d0)
int EVP_PKEY_CTX_set_dh_paramgen_seed(EVP_PKEY_CTX * ctx, const unsigned char * seed, size_t seedlen) (a0,a1,d0)
int EVP_PKEY_CTX_set_dh_paramgen_prime_len(EVP_PKEY_CTX * ctx, int pbits) (a0,d0)
int EVP_PKEY_CTX_set_dh_paramgen_subprime_len(EVP_PKEY_CTX * ctx, int qlen) (a0,d0)
int EVP_PKEY_CTX_set_dh_paramgen_generator(EVP_PKEY_CTX * ctx, int gen) (a0,d0)
int EVP_PKEY_CTX_set_dh_nid(EVP_PKEY_CTX * ctx, int nid) (a0,d0)
int EVP_PKEY_CTX_set_dh_rfc5114(EVP_PKEY_CTX * ctx, int gen) (a0,d0)
int EVP_PKEY_CTX_set_dhx_rfc5114(EVP_PKEY_CTX * ctx, int gen) (a0,d0)
char * X509_VERIFY_PARAM_get0_host(X509_VERIFY_PARAM * param, int idx) (a0,d0)
char * X509_VERIFY_PARAM_get0_email(X509_VERIFY_PARAM * param) (a0)
char * X509_VERIFY_PARAM_get1_ip_asc(X509_VERIFY_PARAM * param) (a0)
int OSSL_PARAM_modified(const OSSL_PARAM * p) (a0)
void OSSL_PARAM_set_all_unmodified(OSSL_PARAM * p) (a0)
EVP_RAND * EVP_RAND_fetch(OSSL_LIB_CTX * libctx, const char * algorithm, const char * properties) (a0,a1,a2)
int EVP_RAND_up_ref(EVP_RAND * rand) (a0)
void EVP_RAND_free(EVP_RAND * rand) (a0)
const char * EVP_RAND_get0_name(const EVP_RAND * rand) (a0)
int EVP_RAND_is_a(const EVP_RAND * rand, const char * name) (a0,a1)
const OSSL_PROVIDER * EVP_RAND_get0_provider(const EVP_RAND * rand) (a0)
int EVP_RAND_get_params(EVP_RAND * rand, OSSL_PARAM * params) (a0,a1)
EVP_RAND_CTX * EVP_RAND_CTX_new(EVP_RAND * rand, EVP_RAND_CTX * parent) (a0,a1)
void EVP_RAND_CTX_free(EVP_RAND_CTX * ctx) (a0)
EVP_RAND * EVP_RAND_CTX_get0_rand(EVP_RAND_CTX * ctx) (a0)
int EVP_RAND_CTX_get_params(EVP_RAND_CTX * ctx, OSSL_PARAM * params) (a0,a1)
int EVP_RAND_CTX_set_params(EVP_RAND_CTX * ctx, const OSSL_PARAM * params) (a0,a1)
const OSSL_PARAM * EVP_RAND_gettable_params(const EVP_RAND * rand) (a0)
const OSSL_PARAM * EVP_RAND_gettable_ctx_params(const EVP_RAND * rand) (a0)
const OSSL_PARAM * EVP_RAND_settable_ctx_params(const EVP_RAND * rand) (a0)
void EVP_RAND_do_all_provided(OSSL_LIB_CTX * libctx, void (*fn)(EVP_RAND *rand, void *arg), void * arg) (a0,a1,a2)
int EVP_RAND_names_do_all(const EVP_RAND * rand, void (*fn)(const char *name, void *data), void * data) (a0,a1,a2)
int EVP_RAND_instantiate(EVP_RAND_CTX * ctx, unsigned int strength, int prediction_resistance, const unsigned char * pstr, size_t pstr_len, const OSSL_PARAM * params) (a0,d0,d1,a1,d2,a2)
int EVP_RAND_uninstantiate(EVP_RAND_CTX * ctx) (a0)
int EVP_RAND_generate(EVP_RAND_CTX * ctx, unsigned char * out, size_t outlen, unsigned int strength, int prediction_resistance, const unsigned char * addin, size_t addin_len) (a0,a1,d0,d1,d2,a2,d3)
int EVP_RAND_reseed(EVP_RAND_CTX * ctx, int prediction_resistance, const unsigned char * ent, size_t ent_len, const unsigned char * addin, size_t addin_len) (a0,d0,a1,d1,a2,d2)
int EVP_RAND_nonce(EVP_RAND_CTX * ctx, unsigned char * out, size_t outlen) (a0,a1,d0)
int EVP_RAND_enable_locking(EVP_RAND_CTX * ctx) (a0)
int EVP_RAND_verify_zeroization(EVP_RAND_CTX * ctx) (a0)
unsigned int EVP_RAND_get_strength(EVP_RAND_CTX * ctx) (a0)
int EVP_RAND_get_state(EVP_RAND_CTX * ctx) (a0)
int EVP_default_properties_is_fips_enabled(OSSL_LIB_CTX * libctx) (a0)
int EVP_default_properties_enable_fips(OSSL_LIB_CTX * libctx, int enable) (a0,d0)
EVP_PKEY * EVP_PKEY_new_raw_private_key_ex(OSSL_LIB_CTX * libctx, const char * keytype, const char * propq, const unsigned char * priv, size_t len) (a0,a1,a2,a3,d0)
EVP_PKEY * EVP_PKEY_new_raw_public_key_ex(OSSL_LIB_CTX * libctx, const char * keytype, const char * propq, const unsigned char * pub, size_t len) (a0,a1,a2,a3,d0)
int OSSL_PARAM_BLD_push_time_t(OSSL_PARAM_BLD * bld, const char * key, time_t val) (a0,a1,d0)
void OSSL_PARAM_construct_time_t_amiga(OSSL_PARAM * result, const char * key, time_t * buf) (a0,a1,a2)
int OSSL_PARAM_get_time_t(const OSSL_PARAM * p, time_t * val) (a0,a1)
int OSSL_PARAM_set_time_t(OSSL_PARAM * p, time_t val) (a0,d0)
OSSL_STORE_CTX * OSSL_STORE_attach(BIO * bio, const char * scheme, OSSL_LIB_CTX * libctx, const char * propq, const UI_METHOD * ui_method, void * ui_data, const OSSL_PARAM * params, OSSL_STORE_post_process_info_fn post_process, void * post_process_data) (a0,a1,a2,a3,d0,d1,d2,d3,d4)
int OSSL_STORE_LOADER_set_attach(OSSL_STORE_LOADER * loader, OSSL_STORE_attach_fn attach_function) (a0,a1)
int EVP_PKEY_CTX_set_rsa_pss_keygen_saltlen(EVP_PKEY_CTX * ctx, int saltlen) (a0,d0)
int EVP_PKEY_CTX_set_rsa_pss_keygen_mgf1_md(EVP_PKEY_CTX * ctx, const EVP_MD * md) (a0,a1)
int EVP_PKEY_CTX_set_rsa_pss_keygen_mgf1_md_name(EVP_PKEY_CTX * ctx, const char * mdname) (a0,a1)
int OSSL_PROVIDER_do_all(OSSL_LIB_CTX * ctx, int (*cb)(OSSL_PROVIDER *provider, void *cbdata), void * cbdata) (a0,a1,a2)
int EC_GROUP_get_field_type(const EC_GROUP * group) (a0)
int X509_PUBKEY_eq(const X509_PUBKEY * a, const X509_PUBKEY * b) (a0,a1)
int EVP_PKEY_eq(const EVP_PKEY * a, const EVP_PKEY * b) (a0,a1)
int EVP_PKEY_parameters_eq(const EVP_PKEY * a, const EVP_PKEY * b) (a0,a1)
const OSSL_ALGORITHM * OSSL_PROVIDER_query_operation(const OSSL_PROVIDER * prov, int operation_id, int * no_cache) (a0,d0,a1)
void OSSL_PROVIDER_unquery_operation(const OSSL_PROVIDER * prov, int operation_id, const OSSL_ALGORITHM * algs) (a0,d0,a1)
void * OSSL_PROVIDER_get0_provider_ctx(const OSSL_PROVIDER * prov) (a0)
int OSSL_PROVIDER_get_capabilities(const OSSL_PROVIDER * prov, const char * capability, OSSL_CALLBACK * cb, void * arg) (a0,a1,a2,a3)
EC_GROUP * EC_GROUP_new_by_curve_name_ex(OSSL_LIB_CTX * libctx, const char * propq, int nid) (a0,a1,d0)
EC_KEY * EC_KEY_new_ex(OSSL_LIB_CTX * ctx, const char * propq) (a0,a1)
EC_KEY * EC_KEY_new_by_curve_name_ex(OSSL_LIB_CTX * ctx, const char * propq, int nid) (a0,a1,d0)
OSSL_LIB_CTX * OSSL_LIB_CTX_set0_default(OSSL_LIB_CTX * libctx) (a0)
STACK_OF(X509_INFO) * PEM_X509_INFO_read_bio_ex(BIO * bp, STACK_OF(X509_INFO) * sk, pem_password_cb * cb, void * u, OSSL_LIB_CTX * libctx, const char * propq) (a0,a1,a2,a3,d0,d1)
int X509_REQ_verify_ex(X509_REQ * a, EVP_PKEY * r, OSSL_LIB_CTX * libctx, const char * propq) (a0,a1,a2,a3)
X509 * X509_new_ex(OSSL_LIB_CTX * libctx, const char * propq) (a0,a1)
int X509_LOOKUP_ctrl_ex(X509_LOOKUP * ctx, int cmd, const char * argc, long argl, char ** ret, OSSL_LIB_CTX * libctx, const char * propq) (a0,d0,a1,d1,a2,a3,d2)
int X509_load_cert_file_ex(X509_LOOKUP * ctx, const char * file, int type, OSSL_LIB_CTX * libctx, const char * propq) (a0,a1,d0,a2,a3)
int X509_load_cert_crl_file_ex(X509_LOOKUP * ctx, const char * file, int type, OSSL_LIB_CTX * libctx, const char * propq) (a0,a1,d0,a2,a3)
int X509_LOOKUP_by_subject_ex(X509_LOOKUP * ctx, X509_LOOKUP_TYPE type, const X509_NAME * name, X509_OBJECT * ret, OSSL_LIB_CTX * libctx, const char * propq) (a0,d0,a1,a2,a3,d1)
int X509_STORE_load_file_ex(X509_STORE * xs, const char * file, OSSL_LIB_CTX * libctx, const char * propq) (a0,a1,a2,a3)
int X509_STORE_load_store_ex(X509_STORE * xs, const char * store, OSSL_LIB_CTX * libctx, const char * propq) (a0,a1,a2,a3)
int X509_STORE_load_locations_ex(X509_STORE * xs, const char * file, const char * dir, OSSL_LIB_CTX * libctx, const char * propq) (a0,a1,a2,a3,d0)
int X509_STORE_set_default_paths_ex(X509_STORE * xs, OSSL_LIB_CTX * libctx, const char * propq) (a0,a1,a2)
STACK_OF(X509) * X509_build_chain(X509 * target, STACK_OF(X509) * certs, X509_STORE * store, int with_self_signed, OSSL_LIB_CTX * libctx, const char * propq) (a0,a1,a2,d0,a3,d1)
int X509V3_set_issuer_pkey(X509V3_CTX * ctx, EVP_PKEY * pkey) (a0,a1)
char * i2s_ASN1_UTF8STRING(X509V3_EXT_METHOD * method, ASN1_UTF8STRING * utf8) (a0,a1)
ASN1_UTF8STRING * s2i_ASN1_UTF8STRING(X509V3_EXT_METHOD * method, X509V3_CTX * ctx, const char * str) (a0,a1,a2)
OSSL_STORE_CTX * OSSL_STORE_open_ex(const char * uri, OSSL_LIB_CTX * libctx, const char * propq, const UI_METHOD * ui_method, void * ui_data, const OSSL_PARAM * params, OSSL_STORE_post_process_info_fn post_process, void * post_process_data) (a0,a1,a2,a3,d0,d1,d2,d3)
OSSL_DECODER * OSSL_DECODER_fetch(OSSL_LIB_CTX * libctx, const char * name, const char * properties) (a0,a1,a2)
int OSSL_DECODER_up_ref(OSSL_DECODER * encoder) (a0)
void OSSL_DECODER_free(OSSL_DECODER * encoder) (a0)
const OSSL_PROVIDER * OSSL_DECODER_get0_provider(const OSSL_DECODER * encoder) (a0)
const char * OSSL_DECODER_get0_properties(const OSSL_DECODER * encoder) (a0)
int OSSL_DECODER_is_a(const OSSL_DECODER * encoder, const char * name) (a0,a1)
void OSSL_DECODER_do_all_provided(OSSL_LIB_CTX * libctx, void (*fn)(OSSL_DECODER *encoder, void *arg), void * arg) (a0,a1,a2)
int OSSL_DECODER_names_do_all(const OSSL_DECODER * encoder, void (*fn)(const char *name, void *data), void * data) (a0,a1,a2)
const OSSL_PARAM * OSSL_DECODER_settable_ctx_params(OSSL_DECODER * encoder) (a0)
OSSL_DECODER_CTX * OSSL_DECODER_CTX_new() ()
int OSSL_DECODER_CTX_set_params(OSSL_DECODER_CTX * ctx, const OSSL_PARAM * params) (a0,a1)
void OSSL_DECODER_CTX_free(OSSL_DECODER_CTX * ctx) (a0)
int OSSL_DECODER_CTX_set_passphrase(OSSL_DECODER_CTX * ctx, const unsigned char * kstr, size_t klen) (a0,a1,d0)
int OSSL_DECODER_CTX_set_pem_password_cb(OSSL_DECODER_CTX * ctx, pem_password_cb * cb, void * cbarg) (a0,a1,a2)
int OSSL_DECODER_CTX_set_passphrase_ui(OSSL_DECODER_CTX * ctx, const UI_METHOD * ui_method, void * ui_data) (a0,a1,a2)
int OSSL_DECODER_from_bio(OSSL_DECODER_CTX * ctx, BIO * in) (a0,a1)
int OSSL_DECODER_CTX_add_decoder(OSSL_DECODER_CTX * ctx, OSSL_DECODER * decoder) (a0,a1)
int OSSL_DECODER_CTX_add_extra(OSSL_DECODER_CTX * ctx, OSSL_LIB_CTX * libctx, const char * propq) (a0,a1,a2)
int OSSL_DECODER_CTX_get_num_decoders(OSSL_DECODER_CTX * ctx) (a0)
int OSSL_DECODER_CTX_set_input_type(OSSL_DECODER_CTX * ctx, const char * input_type) (a0,a1)
int OSSL_DECODER_export(OSSL_DECODER_INSTANCE * decoder_inst, void * reference, size_t reference_sz, OSSL_CALLBACK * export_cb, void * export_cbarg) (a0,a1,d0,a2,a3)
OSSL_DECODER * OSSL_DECODER_INSTANCE_get_decoder(OSSL_DECODER_INSTANCE * decoder_inst) (a0)
void * OSSL_DECODER_INSTANCE_get_decoder_ctx(OSSL_DECODER_INSTANCE * decoder_inst) (a0)
const OSSL_PARAM * OSSL_DECODER_gettable_params(OSSL_DECODER * decoder) (a0)
int OSSL_DECODER_get_params(OSSL_DECODER * decoder, OSSL_PARAM * params) (a0,a1)
OSSL_DECODER_CTX * OSSL_DECODER_CTX_new_for_pkey(EVP_PKEY ** pkey, const char * input_type, const char * input_struct, const char * keytype, int selection, OSSL_LIB_CTX * libctx, const char * propquery) (a0,a1,a2,a3,d0,d1,d2)
int OSSL_DECODER_CTX_set_construct(OSSL_DECODER_CTX * ctx, OSSL_DECODER_CONSTRUCT * construct) (a0,a1)
int OSSL_DECODER_CTX_set_construct_data(OSSL_DECODER_CTX * ctx, void * construct_data) (a0,a1)
int OSSL_DECODER_CTX_set_cleanup(OSSL_DECODER_CTX * ctx, OSSL_DECODER_CLEANUP * cleanup) (a0,a1)
OSSL_DECODER_CONSTRUCT * OSSL_DECODER_CTX_get_construct(OSSL_DECODER_CTX * ctx) (a0)
void * OSSL_DECODER_CTX_get_construct_data(OSSL_DECODER_CTX * ctx) (a0)
OSSL_DECODER_CLEANUP * OSSL_DECODER_CTX_get_cleanup(OSSL_DECODER_CTX * ctx) (a0)
EVP_RAND_CTX * RAND_get0_primary(OSSL_LIB_CTX * ctx) (a0)
EVP_RAND_CTX * RAND_get0_public(OSSL_LIB_CTX * ctx) (a0)
EVP_RAND_CTX * RAND_get0_private(OSSL_LIB_CTX * ctx) (a0)
const ASN1_TYPE * PKCS12_SAFEBAG_get0_bag_obj(const PKCS12_SAFEBAG * bag) (a0)
const ASN1_OBJECT * PKCS12_SAFEBAG_get0_bag_type(const PKCS12_SAFEBAG * bag) (a0)
PKCS12_SAFEBAG * PKCS12_SAFEBAG_create_secret(int type, int vtype, const unsigned char * value, int len) (d0,d1,a0,d2)
int PKCS12_add1_attr_by_NID(PKCS12_SAFEBAG * bag, int nid, int type, const unsigned char * bytes, int len) (a0,d0,d1,a1,d2)
int PKCS12_add1_attr_by_txt(PKCS12_SAFEBAG * bag, const char * attrname, int type, const unsigned char * bytes, int len) (a0,a1,d0,a2,d1)
PKCS12_SAFEBAG * PKCS12_add_secret(STACK_OF(PKCS12_SAFEBAG) ** pbags, int nid_type, const unsigned char * value, int len) (a0,d0,a1,d1)
int SMIME_write_ASN1_ex(BIO * bio, ASN1_VALUE * val, BIO * data, int flags, int ctype_nid, int econt_nid, STACK_OF(X509_ALGOR) * mdalgs, const ASN1_ITEM * it, OSSL_LIB_CTX * libctx, const char * propq) (a0,a1,a2,d0,d1,d2,a3,d3,d4,d5)
ASN1_VALUE * SMIME_read_ASN1_ex(BIO * bio, int flags, BIO ** bcont, const ASN1_ITEM * it, ASN1_VALUE ** x, OSSL_LIB_CTX * libctx, const char * propq) (a0,d0,a1,a2,a3,d1,d2)
CMS_ContentInfo * CMS_ContentInfo_new_ex(OSSL_LIB_CTX * libctx, const char * propq) (a0,a1)
CMS_ContentInfo * SMIME_read_CMS_ex(BIO * bio, int flags, BIO ** bcont, CMS_ContentInfo ** ci) (a0,d0,a1,a2)
CMS_ContentInfo * CMS_sign_ex(X509 * signcert, EVP_PKEY * pkey, STACK_OF(X509) * certs, BIO * data, unsigned int flags, OSSL_LIB_CTX * libctx, const char * propq) (a0,a1,a2,a3,d0,d1,d2)
CMS_ContentInfo * CMS_data_create_ex(BIO * in, unsigned int flags, OSSL_LIB_CTX * libctx, const char * propq) (a0,d0,a1,a2)
CMS_ContentInfo * CMS_digest_create_ex(BIO * in, const EVP_MD * md, unsigned int flags, OSSL_LIB_CTX * libctx, const char * propq) (a0,a1,d0,a2,a3)
CMS_ContentInfo * CMS_EncryptedData_encrypt_ex(BIO * in, const EVP_CIPHER * cipher, const unsigned char * key, size_t keylen, unsigned int flags, OSSL_LIB_CTX * libctx, const char * propq) (a0,a1,a2,d0,d1,a3,d2)
CMS_ContentInfo * CMS_encrypt_ex(STACK_OF(X509) * certs, BIO * in, const EVP_CIPHER * cipher, unsigned int flags, OSSL_LIB_CTX * libctx, const char * propq) (a0,a1,a2,d0,a3,d1)
CMS_ContentInfo * CMS_EnvelopedData_create_ex(const EVP_CIPHER * cipher, OSSL_LIB_CTX * libctx, const char * propq) (a0,a1,a2)
CMS_ReceiptRequest * CMS_ReceiptRequest_create0_ex(unsigned char * id, int idlen, int allorfirst, STACK_OF(GENERAL_NAMES) * receiptList, STACK_OF(GENERAL_NAMES) * receiptsTo, OSSL_LIB_CTX * libctx) (a0,d0,d1,a1,a2,a3)
int EVP_SignFinal_ex(EVP_MD_CTX * ctx, unsigned char * md, unsigned int * s, EVP_PKEY * pkey, OSSL_LIB_CTX * libctx, const char * propq) (a0,a1,a2,a3,d0,d1)
int EVP_VerifyFinal_ex(EVP_MD_CTX * ctx, const unsigned char * sigbuf, unsigned int siglen, EVP_PKEY * pkey, OSSL_LIB_CTX * libctx, const char * propq) (a0,a1,d0,a2,a3,d1)
int EVP_DigestSignInit_ex(EVP_MD_CTX * ctx, EVP_PKEY_CTX ** pctx, const char * mdname, OSSL_LIB_CTX * libctx, const char * props, EVP_PKEY * pkey, const OSSL_PARAM * params) (a0,a1,a2,a3,d0,d1,d2)
int EVP_DigestVerifyInit_ex(EVP_MD_CTX * ctx, EVP_PKEY_CTX ** pctx, const char * mdname, OSSL_LIB_CTX * libctx, const char * props, EVP_PKEY * pkey, const OSSL_PARAM * params) (a0,a1,a2,a3,d0,d1,d2)
PKCS7 * PKCS7_new_ex(OSSL_LIB_CTX * libctx, const char * propq) (a0,a1)
PKCS7 * PKCS7_sign_ex(X509 * signcert, EVP_PKEY * pkey, STACK_OF(X509) * certs, BIO * data, int flags, OSSL_LIB_CTX * libctx, const char * propq) (a0,a1,a2,a3,d0,d1,d2)
PKCS7 * PKCS7_encrypt_ex(STACK_OF(X509) * certs, BIO * in, const EVP_CIPHER * cipher, int flags, OSSL_LIB_CTX * libctx, const char * propq) (a0,a1,a2,d0,a3,d1)
PKCS7 * SMIME_read_PKCS7_ex(BIO * bio, BIO ** bcont, PKCS7 ** p7) (a0,a1,a2)
int OSSL_PROVIDER_self_test(const OSSL_PROVIDER * prov) (a0)
int EVP_PKEY_CTX_set_tls1_prf_md(EVP_PKEY_CTX * ctx, const EVP_MD * md) (a0,a1)
int EVP_PKEY_CTX_set1_tls1_prf_secret(EVP_PKEY_CTX * pctx, const unsigned char * sec, int seclen) (a0,a1,d0)
int EVP_PKEY_CTX_add1_tls1_prf_seed(EVP_PKEY_CTX * pctx, const unsigned char * seed, int seedlen) (a0,a1,d0)
int EVP_PKEY_CTX_set_hkdf_md(EVP_PKEY_CTX * ctx, const EVP_MD * md) (a0,a1)
int EVP_PKEY_CTX_set1_hkdf_salt(EVP_PKEY_CTX * ctx, const unsigned char * salt, int saltlen) (a0,a1,d0)
int EVP_PKEY_CTX_set1_hkdf_key(EVP_PKEY_CTX * ctx, const unsigned char * key, int keylen) (a0,a1,d0)
int EVP_PKEY_CTX_add1_hkdf_info(EVP_PKEY_CTX * ctx, const unsigned char * info, int infolen) (a0,a1,d0)
int EVP_PKEY_CTX_set_hkdf_mode(EVP_PKEY_CTX * ctx, int mode) (a0,d0)
int EVP_PKEY_CTX_set1_pbe_pass(EVP_PKEY_CTX * ctx, const char * pass, int passlen) (a0,a1,d0)
int EVP_PKEY_CTX_set1_scrypt_salt(EVP_PKEY_CTX * ctx, const unsigned char * salt, int saltlen) (a0,a1,d0)
int EVP_PKEY_CTX_set_scrypt_N(EVP_PKEY_CTX * ctx, uint64_t n) (a0,d0-d1)
int EVP_PKEY_CTX_set_scrypt_r(EVP_PKEY_CTX * ctx, uint64_t r) (a0,d0-d1)
int EVP_PKEY_CTX_set_scrypt_p(EVP_PKEY_CTX * ctx, uint64_t p) (a0,d0-d1)
int EVP_PKEY_CTX_set_scrypt_maxmem_bytes(EVP_PKEY_CTX * ctx, uint64_t maxmem_bytes) (a0,d0-d1)
int EVP_PKEY_CTX_set_dh_kdf_type(EVP_PKEY_CTX * ctx, int kdf) (a0,d0)
int EVP_PKEY_CTX_get_dh_kdf_type(EVP_PKEY_CTX * ctx) (a0)
int EVP_PKEY_CTX_set0_dh_kdf_oid(EVP_PKEY_CTX * ctx, ASN1_OBJECT * oid) (a0,a1)
int EVP_PKEY_CTX_get0_dh_kdf_oid(EVP_PKEY_CTX * ctx, ASN1_OBJECT ** oid) (a0,a1)
int EVP_PKEY_CTX_set_dh_kdf_md(EVP_PKEY_CTX * ctx, const EVP_MD * md) (a0,a1)
int EVP_PKEY_CTX_get_dh_kdf_md(EVP_PKEY_CTX * ctx, const EVP_MD ** md) (a0,a1)
int EVP_PKEY_CTX_set_dh_kdf_outlen(EVP_PKEY_CTX * ctx, int len) (a0,d0)
int EVP_PKEY_CTX_get_dh_kdf_outlen(EVP_PKEY_CTX * ctx, int * len) (a0,a1)
int EVP_PKEY_CTX_set0_dh_kdf_ukm(EVP_PKEY_CTX * ctx, unsigned char * ukm, int len) (a0,a1,d0)
int EVP_PKEY_CTX_get0_dh_kdf_ukm(EVP_PKEY_CTX * ctx, unsigned char ** ukm) (a0,a1)
int EVP_CIPHER_CTX_get_updated_iv(EVP_CIPHER_CTX * ctx, void * buf, size_t len) (a0,a1,d0)
int EVP_CIPHER_CTX_get_original_iv(EVP_CIPHER_CTX * ctx, void * buf, size_t len) (a0,a1,d0)
const OSSL_PARAM * EVP_KEYMGMT_gettable_params(const EVP_KEYMGMT * keymgmt) (a0)
const OSSL_PARAM * EVP_KEYMGMT_settable_params(const EVP_KEYMGMT * keymgmt) (a0)
const OSSL_PARAM * EVP_KEYMGMT_gen_settable_params(const EVP_KEYMGMT * keymgmt) (a0)
const OSSL_PARAM * EVP_SIGNATURE_gettable_ctx_params(const EVP_SIGNATURE * sig) (a0)
const OSSL_PARAM * EVP_SIGNATURE_settable_ctx_params(const EVP_SIGNATURE * sig) (a0)
const OSSL_PARAM * EVP_KEYEXCH_gettable_ctx_params(const EVP_KEYEXCH * keyexch) (a0)
const OSSL_PARAM * EVP_KEYEXCH_settable_ctx_params(const EVP_KEYEXCH * keyexch) (a0)
EVP_PKEY * d2i_PUBKEY_ex(EVP_PKEY ** a, const unsigned char ** pp, long length, OSSL_LIB_CTX * libctx, const char * propq) (a0,a1,d0,a2,a3)
OSSL_STORE_INFO * OSSL_STORE_INFO_new_PUBKEY(EVP_PKEY * pubkey) (a0)
EVP_PKEY * OSSL_STORE_INFO_get0_PUBKEY(const OSSL_STORE_INFO * info) (a0)
EVP_PKEY * OSSL_STORE_INFO_get1_PUBKEY(const OSSL_STORE_INFO * info) (a0)
EVP_PKEY * PEM_read_bio_PUBKEY_ex(BIO * out, EVP_PKEY ** x, pem_password_cb * cb, void * u, OSSL_LIB_CTX * libctx, const char * propq) (a0,a1,a2,a3,d0,d1)
EVP_PKEY * PEM_read_bio_Parameters_ex(BIO * bp, EVP_PKEY ** x, OSSL_LIB_CTX * libctx, const char * propq) (a0,a1,a2,a3)
EC_GROUP * EC_GROUP_new_from_params(const OSSL_PARAM * params, OSSL_LIB_CTX * libctx, const char * propq) (a0,a1,a2)
int OSSL_STORE_LOADER_set_open_ex(OSSL_STORE_LOADER * loader, OSSL_STORE_open_ex_fn open_ex_function) (a0,a1)
OSSL_STORE_LOADER * OSSL_STORE_LOADER_fetch(OSSL_LIB_CTX * libctx, const char * scheme, const char * properties) (a0,a1,a2)
int OSSL_STORE_LOADER_up_ref(OSSL_STORE_LOADER * loader) (a0)
const OSSL_PROVIDER * OSSL_STORE_LOADER_get0_provider(const OSSL_STORE_LOADER * loader) (a0)
const char * OSSL_STORE_LOADER_get0_properties(const OSSL_STORE_LOADER * loader) (a0)
int OSSL_STORE_LOADER_is_a(const OSSL_STORE_LOADER * loader, const char * scheme) (a0,a1)
void OSSL_STORE_LOADER_do_all_provided(OSSL_LIB_CTX * libctx, void (*fn)(OSSL_STORE_LOADER *loader, void *arg), void * arg) (a0,a1,a2)
int OSSL_STORE_LOADER_names_do_all(const OSSL_STORE_LOADER * loader, void (*fn)(const char *name, void *data), void * data) (a0,a1,a2)
int OSSL_PARAM_get_utf8_string_ptr(const OSSL_PARAM * p, const char ** val) (a0,a1)
int OSSL_PARAM_get_octet_string_ptr(const OSSL_PARAM * p, const void ** val, size_t * used_len) (a0,a1,a2)
int OSSL_DECODER_CTX_set_passphrase_cb(OSSL_DECODER_CTX * ctx, OSSL_PASSPHRASE_CALLBACK * cb, void * cbarg) (a0,a1,a2)
int EVP_PKEY_CTX_set_mac_key(EVP_PKEY_CTX * ctx, const unsigned char * key, int keylen) (a0,a1,d0)
OSSL_STORE_INFO * OSSL_STORE_INFO_new(int type, void * data) (d0,a0)
void * OSSL_STORE_INFO_get0_data(int type, const OSSL_STORE_INFO * info) (d0,a0)
EVP_PKEY * EVP_PKCS82PKEY_ex(const PKCS8_PRIV_KEY_INFO * p8, OSSL_LIB_CTX * libctx, const char * propq) (a0,a1,a2)
int EVP_PKEY_CTX_set1_id(EVP_PKEY_CTX * ctx, const void * id, int len) (a0,a1,d0)
int EVP_PKEY_CTX_get1_id(EVP_PKEY_CTX * ctx, void * id) (a0,a1)
int EVP_PKEY_CTX_get1_id_len(EVP_PKEY_CTX * ctx, size_t * id_len) (a0,a1)
CMS_ContentInfo * CMS_AuthEnvelopedData_create(const EVP_CIPHER * cipher) (a0)
CMS_ContentInfo * CMS_AuthEnvelopedData_create_ex(const EVP_CIPHER * cipher, OSSL_LIB_CTX * libctx, const char * propq) (a0,a1,a2)
int EVP_PKEY_CTX_set_ec_param_enc(EVP_PKEY_CTX * ctx, int param_enc) (a0,d0)
const char * EVP_PKEY_get0_type_name(const EVP_PKEY * key) (a0)
const char * EVP_KEYMGMT_get0_name(const EVP_KEYMGMT * keymgmt) (a0)
void EVP_KEM_free(EVP_KEM * wrap) (a0)
int EVP_KEM_up_ref(EVP_KEM * wrap) (a0)
OSSL_PROVIDER * EVP_KEM_get0_provider(const EVP_KEM * wrap) (a0)
EVP_KEM * EVP_KEM_fetch(OSSL_LIB_CTX * ctx, const char * algorithm, const char * properties) (a0,a1,a2)
int EVP_KEM_is_a(const EVP_KEM * wrap, const char * name) (a0,a1)
void EVP_KEM_do_all_provided(OSSL_LIB_CTX * libctx, void (*fn)(EVP_KEM *wrap, void *arg), void * arg) (a0,a1,a2)
int EVP_KEM_names_do_all(const EVP_KEM * wrap, void (*fn)(const char *name, void *data), void * data) (a0,a1,a2)
int EVP_PKEY_encapsulate_init(EVP_PKEY_CTX * ctx, const OSSL_PARAM * params) (a0,a1)
int EVP_PKEY_encapsulate(EVP_PKEY_CTX * ctx, unsigned char * wrappedkey, size_t * wrappedkeylen, unsigned char * genkey, size_t * genkeylen) (a0,a1,a2,a3,d0)
int EVP_PKEY_decapsulate_init(EVP_PKEY_CTX * ctx, const OSSL_PARAM * params) (a0,a1)
int EVP_PKEY_decapsulate(EVP_PKEY_CTX * ctx, unsigned char * unwrapped, size_t * unwrappedlen, const unsigned char * wrapped, size_t wrappedlen) (a0,a1,a2,a3,d0)
int EVP_PKEY_CTX_set_kem_op(EVP_PKEY_CTX * ctx, const char * op) (a0,a1)
const OSSL_PARAM * OSSL_ENCODER_gettable_params(OSSL_ENCODER * encoder) (a0)
int OSSL_ENCODER_get_params(OSSL_ENCODER * encoder, OSSL_PARAM * params) (a0,a1)
int OSSL_ENCODER_CTX_set_output_type(OSSL_ENCODER_CTX * ctx, const char * output_type) (a0,a1)
int OSSL_ENCODER_CTX_add_encoder(OSSL_ENCODER_CTX * ctx, OSSL_ENCODER * encoder) (a0,a1)
int OSSL_ENCODER_CTX_add_extra(OSSL_ENCODER_CTX * ctx, OSSL_LIB_CTX * libctx, const char * propq) (a0,a1,a2)
int OSSL_ENCODER_CTX_get_num_encoders(OSSL_ENCODER_CTX * ctx) (a0)
int OSSL_ENCODER_CTX_set_selection(OSSL_ENCODER_CTX * ctx, int selection) (a0,d0)
OSSL_ENCODER * OSSL_ENCODER_INSTANCE_get_encoder(OSSL_ENCODER_INSTANCE * encoder_inst) (a0)
void * OSSL_ENCODER_INSTANCE_get_encoder_ctx(OSSL_ENCODER_INSTANCE * encoder_inst) (a0)
const char * OSSL_ENCODER_INSTANCE_get_output_type(OSSL_ENCODER_INSTANCE * encoder_inst) (a0)
int OSSL_ENCODER_CTX_set_construct(OSSL_ENCODER_CTX * ctx, OSSL_ENCODER_CONSTRUCT * construct) (a0,a1)
int OSSL_ENCODER_CTX_set_construct_data(OSSL_ENCODER_CTX * ctx, void * construct_data) (a0,a1)
int OSSL_ENCODER_CTX_set_cleanup(OSSL_ENCODER_CTX * ctx, OSSL_ENCODER_CLEANUP * cleanup) (a0,a1)
int OSSL_ENCODER_CTX_set_passphrase_cb(OSSL_ENCODER_CTX * ctx, OSSL_PASSPHRASE_CALLBACK * cb, void * cbarg) (a0,a1,a2)
int EVP_PKEY_type_names_do_all(const EVP_PKEY * pkey, void (*fn)(const char *name, void *data), void * data) (a0,a1,a2)
const char * OSSL_DECODER_INSTANCE_get_input_type(OSSL_DECODER_INSTANCE * decoder_inst) (a0)
const OSSL_PARAM * EVP_ASYM_CIPHER_gettable_ctx_params(const EVP_ASYM_CIPHER * ciph) (a0)
const OSSL_PARAM * EVP_ASYM_CIPHER_settable_ctx_params(const EVP_ASYM_CIPHER * ciph) (a0)
const OSSL_PARAM * EVP_KEM_gettable_ctx_params(const EVP_KEM * kem) (a0)
const OSSL_PARAM * EVP_KEM_settable_ctx_params(const EVP_KEM * kem) (a0)
int PKCS7_type_is_other(PKCS7 * p7) (a0)
ASN1_OCTET_STRING * PKCS7_get_octet_string(PKCS7 * p7) (a0)
int OSSL_DECODER_from_data(OSSL_DECODER_CTX * ctx, const unsigned char ** pdata, size_t * pdata_len) (a0,a1,a2)
int OSSL_ENCODER_to_data(OSSL_ENCODER_CTX * ctx, unsigned char ** pdata, size_t * pdata_len) (a0,a1,a2)
OSSL_LIB_CTX * EVP_PKEY_CTX_get0_libctx(EVP_PKEY_CTX * ctx) (a0)
const char * EVP_PKEY_CTX_get0_propq(const EVP_PKEY_CTX * ctx) (a0)
int OSSL_DECODER_CTX_set_selection(OSSL_DECODER_CTX * ctx, int selection) (a0,d0)
int OSSL_DECODER_CTX_set_input_structure(OSSL_DECODER_CTX * ctx, const char * input_structure) (a0,a1)
const char * OSSL_DECODER_INSTANCE_get_input_structure(OSSL_DECODER_INSTANCE * decoder_inst, int * was_set) (a0,a1)
int OSSL_ENCODER_CTX_set_output_structure(OSSL_ENCODER_CTX * ctx, const char * output_structure) (a0,a1)
const char * OSSL_ENCODER_INSTANCE_get_output_structure(OSSL_ENCODER_INSTANCE * encoder_inst) (a0)
int PEM_write_bio_PrivateKey_ex(BIO * out, const EVP_PKEY * x, const EVP_CIPHER * enc, const unsigned char * kstr, int klen, pem_password_cb * cb, void * u, OSSL_LIB_CTX * libctx, const char * propq) (a0,a1,a2,a3,d0,d1,d2,d3,d4)
int PEM_write_bio_PUBKEY_ex(BIO * out, const EVP_PKEY * x, OSSL_LIB_CTX * libctx, const char * propq) (a0,a1,a2,a3)
int EVP_PKEY_get_group_name(const EVP_PKEY * pkey, char * name, size_t name_sz, size_t * gname_len) (a0,a1,d0,a2)
int CRYPTO_atomic_or(uint64_t * val, uint64_t op, uint64_t * ret, CRYPTO_RWLOCK * lock) (a0,d0-d1,a1,a2)
int CRYPTO_atomic_load(uint64_t * val, uint64_t * ret, CRYPTO_RWLOCK * lock) (a0,a1,a2)
int EVP_PKEY_CTX_set_rsa_pss_keygen_md(EVP_PKEY_CTX * ctx, const EVP_MD * md) (a0,a1)
int EVP_PKEY_CTX_set_rsa_pss_keygen_md_name(EVP_PKEY_CTX * ctx, const char * mdname, const char * mdprops) (a0,a1,a2)
const OSSL_PARAM * EVP_PKEY_settable_params(const EVP_PKEY * pkey) (a0)
int EVP_PKEY_set_params(EVP_PKEY * pkey, OSSL_PARAM * params) (a0,a1)
int EVP_PKEY_set_int_param(EVP_PKEY * pkey, const char * key_name, int in) (a0,a1,d0)
int EVP_PKEY_set_size_t_param(EVP_PKEY * pkey, const char * key_name, size_t in) (a0,a1,d0)
int EVP_PKEY_set_bn_param(EVP_PKEY * pkey, const char * key_name, const BIGNUM * bn) (a0,a1,a2)
int EVP_PKEY_set_utf8_string_param(EVP_PKEY * pkey, const char * key_name, const char * str) (a0,a1,a2)
int EVP_PKEY_set_octet_string_param(EVP_PKEY * pkey, const char * key_name, const unsigned char * buf, size_t bsize) (a0,a1,a2,d0)
int EVP_PKEY_get_ec_point_conv_form(const EVP_PKEY * pkey) (a0)
int EVP_PKEY_get_field_type(const EVP_PKEY * pkey) (a0)
int EVP_PKEY_get_params(const EVP_PKEY * pkey, OSSL_PARAM * params) (a0,a1)
int EVP_PKEY_fromdata_init(EVP_PKEY_CTX * ctx) (a0)
const OSSL_PARAM * EVP_PKEY_fromdata_settable(EVP_PKEY_CTX * ctx, int selection) (a0,d0)
int EVP_PKEY_param_check_quick(EVP_PKEY_CTX * ctx) (a0)
int EVP_PKEY_public_check_quick(EVP_PKEY_CTX * ctx) (a0)
int EVP_PKEY_CTX_is_a(EVP_PKEY_CTX * ctx, const char * keytype) (a0,a1)
const OSSL_PARAM * EVP_CIPHER_CTX_settable_params(EVP_CIPHER_CTX * ctx) (a0)
const OSSL_PARAM * EVP_CIPHER_CTX_gettable_params(EVP_CIPHER_CTX * ctx) (a0)
const OSSL_PARAM * EVP_KDF_CTX_gettable_params(EVP_KDF_CTX * ctx) (a0)
const OSSL_PARAM * EVP_KDF_CTX_settable_params(EVP_KDF_CTX * ctx) (a0)
const OSSL_PARAM * EVP_MAC_CTX_gettable_params(EVP_MAC_CTX * ctx) (a0)
const OSSL_PARAM * EVP_MAC_CTX_settable_params(EVP_MAC_CTX * ctx) (a0)
const OSSL_PARAM * EVP_RAND_CTX_gettable_params(EVP_RAND_CTX * ctx) (a0)
const OSSL_PARAM * EVP_RAND_CTX_settable_params(EVP_RAND_CTX * ctx) (a0)
int RAND_set_DRBG_type(OSSL_LIB_CTX * ctx, const char * drbg, const char * propq, const char * cipher, const char * digest) (a0,a1,a2,a3,d0)
int RAND_set_seed_source_type(OSSL_LIB_CTX * ctx, const char * seed, const char * propq) (a0,a1,a2)
int BN_mod_exp_mont_consttime_x2(BIGNUM * rr1, const BIGNUM * a1, const BIGNUM * p1, const BIGNUM * m1, BN_MONT_CTX * in_mont1, BIGNUM * rr2, const BIGNUM * a2, const BIGNUM * p2, const BIGNUM * m2, BN_MONT_CTX * in_mont2, BN_CTX * ctx) (a0,a1,a2,a3,d0,d1,d2,d3,d4,d5,d6)
const BIO_METHOD * BIO_f_readbuffer() ()
int OSSL_ESS_check_signing_certs(const ESS_SIGNING_CERT * ss, const ESS_SIGNING_CERT_V2 * ssv2, const STACK_OF(X509) * chain, int require_signing_cert) (a0,a1,a2,d0)
ESS_SIGNING_CERT * OSSL_ESS_signing_cert_new_init(const X509 * signcert, const STACK_OF(X509) * certs, int set_issuer_serial) (a0,a1,d0)
ESS_SIGNING_CERT_V2 * OSSL_ESS_signing_cert_v2_new_init(const EVP_MD * hash_alg, const X509 * signcert, const STACK_OF(X509) * certs, int set_issuer_serial) (a0,a1,a2,d0)
const ASN1_ITEM * ESS_SIGNING_CERT_it() ()
const ASN1_ITEM * ESS_SIGNING_CERT_V2_it() ()
int EVP_Q_digest(OSSL_LIB_CTX * libctx, const char * name, const char * propq, const void * data, size_t datalen, unsigned char * md, size_t * mdlen) (a0,a1,a2,a3,d0,d1,d2)
int EVP_DigestInit_ex2(EVP_MD_CTX * ctx, const EVP_MD * type, const OSSL_PARAM * params) (a0,a1,a2)
int EVP_EncryptInit_ex2(EVP_CIPHER_CTX * ctx, const EVP_CIPHER * cipher, const unsigned char * key, const unsigned char * iv, const OSSL_PARAM * params) (a0,a1,a2,a3,d0)
int EVP_DecryptInit_ex2(EVP_CIPHER_CTX * ctx, const EVP_CIPHER * cipher, const unsigned char * key, const unsigned char * iv, const OSSL_PARAM * params) (a0,a1,a2,a3,d0)
int EVP_CipherInit_ex2(EVP_CIPHER_CTX * ctx, const EVP_CIPHER * cipher, const unsigned char * key, const unsigned char * iv, int enc, const OSSL_PARAM * params) (a0,a1,a2,a3,d0,d1)
int EVP_PKEY_sign_init_ex(EVP_PKEY_CTX * ctx, const OSSL_PARAM * params) (a0,a1)
int EVP_PKEY_verify_init_ex(EVP_PKEY_CTX * ctx, const OSSL_PARAM * params) (a0,a1)
int EVP_PKEY_verify_recover_init_ex(EVP_PKEY_CTX * ctx, const OSSL_PARAM * params) (a0,a1)
int EVP_PKEY_encrypt_init_ex(EVP_PKEY_CTX * ctx, const OSSL_PARAM * params) (a0,a1)
int EVP_PKEY_decrypt_init_ex(EVP_PKEY_CTX * ctx, const OSSL_PARAM * params) (a0,a1)
int EVP_PKEY_derive_init_ex(EVP_PKEY_CTX * ctx, const OSSL_PARAM * params) (a0,a1)
TS_RESP_CTX * TS_RESP_CTX_new_ex(OSSL_LIB_CTX * libctx, const char * propq) (a0,a1)
X509_REQ * X509_REQ_new_ex(OSSL_LIB_CTX * libctx, const char * propq) (a0,a1)
EVP_PKEY * EVP_PKEY_dup(EVP_PKEY * pkey) (a0)
RSA_PSS_PARAMS * RSA_PSS_PARAMS_dup(const RSA_PSS_PARAMS * a) (a0)
int EVP_PKEY_derive_set_peer_ex(EVP_PKEY_CTX * ctx, EVP_PKEY * peer, int validate_peer) (a0,a1,d0)
const char * OSSL_DECODER_get0_name(const OSSL_DECODER * decoder) (a0)
const char * OSSL_ENCODER_get0_name(const OSSL_ENCODER * kdf) (a0)
const char * OSSL_DECODER_get0_description(const OSSL_DECODER * decoder) (a0)
const char * OSSL_ENCODER_get0_description(const OSSL_ENCODER * kdf) (a0)
const char * OSSL_STORE_LOADER_get0_description(const OSSL_STORE_LOADER * loader) (a0)
const char * EVP_MD_get0_description(const EVP_MD * md) (a0)
const char * EVP_CIPHER_get0_description(const EVP_CIPHER * cipher) (a0)
const char * EVP_MAC_get0_description(const EVP_MAC * mac) (a0)
const char * EVP_RAND_get0_description(const EVP_RAND * md) (a0)
const char * EVP_PKEY_get0_description(const EVP_PKEY * pkey) (a0)
const char * EVP_KEYMGMT_get0_description(const EVP_KEYMGMT * keymgmt) (a0)
const char * EVP_SIGNATURE_get0_description(const EVP_SIGNATURE * signature) (a0)
const char * EVP_ASYM_CIPHER_get0_description(const EVP_ASYM_CIPHER * cipher) (a0)
const char * EVP_KEM_get0_description(const EVP_KEM * wrap) (a0)
const char * EVP_KEYEXCH_get0_description(const EVP_KEYEXCH * keyexch) (a0)
const char * EVP_KDF_get0_description(const EVP_KDF * kdf) (a0)
int OPENSSL_sk_find_all(OPENSSL_STACK * st, const void * data, int * pnum) (a0,a1,a2)
X509_CRL * X509_CRL_new_ex(OSSL_LIB_CTX * libctx, const char * propq) (a0,a1)
OSSL_PARAM * OSSL_PARAM_dup(const OSSL_PARAM * p) (a0)
OSSL_PARAM * OSSL_PARAM_merge(const OSSL_PARAM * p1, const OSSL_PARAM * p2) (a0,a1)
void OSSL_PARAM_free(OSSL_PARAM * p) (a0)
int EVP_PKEY_todata(const EVP_PKEY * pkey, int selection, OSSL_PARAM ** params) (a0,d0,a1)
int EVP_PKEY_export(const EVP_PKEY * pkey, int selection, OSSL_CALLBACK * export_cb, void * export_cbarg) (a0,d0,a1,a2)
const EVP_MD * EVP_MD_CTX_get0_md(const EVP_MD_CTX * ctx) (a0)
EVP_MD * EVP_MD_CTX_get1_md(EVP_MD_CTX * ctx) (a0)
const EVP_CIPHER * EVP_CIPHER_CTX_get0_cipher(const EVP_CIPHER_CTX * ctx) (a0)
EVP_CIPHER * EVP_CIPHER_CTX_get1_cipher(EVP_CIPHER_CTX * ctx) (a0)
OSSL_LIB_CTX * OSSL_LIB_CTX_get0_global_default() ()
const char * EVP_SIGNATURE_get0_name(const EVP_SIGNATURE * signature) (a0)
const char * EVP_ASYM_CIPHER_get0_name(const EVP_ASYM_CIPHER * cipher) (a0)
const char * EVP_KEM_get0_name(const EVP_KEM * wrap) (a0)
const char * EVP_KEYEXCH_get0_name(const EVP_KEYEXCH * keyexch) (a0)
int PKCS5_v2_PBE_keyivgen_ex(EVP_CIPHER_CTX * ctx, const char * pass, int passlen, ASN1_TYPE * param, const EVP_CIPHER * cipher, const EVP_MD * md, int en_de, OSSL_LIB_CTX * libctx, const char * propq) (a0,a1,d0,a2,a3,d1,d2,d3,d4)
int EVP_PBE_scrypt_amiga_1(const char * pass, size_t passlen, const unsigned char * salt, uint64_t N, uint64_t r, uint64_t p, uint64_t maxmem, void * moreargs) (a0,a1,a2,d0-d1,d2-d3,d4-d5,d6-d7,a3)
void * EVP_PBE_scrypt_amiga_2(size_t saltlen, unsigned char * key, size_t keylen) (d0,a0,d1)
void * EVP_PBE_scrypt_ex_amiga_2(size_t saltlen, unsigned char * key, size_t keylen, OSSL_LIB_CTX * ctx, const char * propq) (d0,a0,d1,a1,a2)
int PKCS5_v2_scrypt_keyivgen_ex(EVP_CIPHER_CTX * ctx, const char * pass, int passlen, ASN1_TYPE * param, const EVP_CIPHER * c, const EVP_MD * md, int en_de, OSSL_LIB_CTX * libctx, const char * propq) (a0,a1,d0,a2,a3,d1,d2,d3,d4)
int EVP_PBE_CipherInit_ex(ASN1_OBJECT * pbe_obj, const char * pass, int passlen, ASN1_TYPE * param, EVP_CIPHER_CTX * ctx, int en_de, OSSL_LIB_CTX * libctx, const char * propq) (a0,a1,d0,a2,a3,d1,d2,d3)
int EVP_PBE_find_ex(int type, int pbe_nid, int * pcnid, int * pmnid, EVP_PBE_KEYGEN ** pkeygen, EVP_PBE_KEYGEN_EX ** pkeygen_ex) (d0,d1,a0,a1,a2,a3)
PKCS12_SAFEBAG * PKCS12_SAFEBAG_create_pkcs8_encrypt_ex(int pbe_nid, const char * pass, int passlen, unsigned char * salt, int saltlen, int iter, PKCS8_PRIV_KEY_INFO * p8inf, OSSL_LIB_CTX * ctx, const char * propq) (d0,a0,d1,a1,d2,d3,a2,a3,d4)
PKCS8_PRIV_KEY_INFO * PKCS8_decrypt_ex(const X509_SIG * p8, const char * pass, int passlen, OSSL_LIB_CTX * ctx, const char * propq) (a0,a1,d0,a2,a3)
PKCS8_PRIV_KEY_INFO * PKCS12_decrypt_skey_ex(const PKCS12_SAFEBAG * bag, const char * pass, int passlen, OSSL_LIB_CTX * ctx, const char * propq) (a0,a1,d0,a2,a3)
X509_SIG * PKCS8_encrypt_ex(int pbe_nid, const EVP_CIPHER * cipher, const char * pass, int passlen, unsigned char * salt, int saltlen, int iter, PKCS8_PRIV_KEY_INFO * p8, OSSL_LIB_CTX * ctx, const char * propq) (d0,a0,a1,d1,a2,d2,d3,a3,d4,d5)
X509_SIG * PKCS8_set0_pbe_ex(const char * pass, int passlen, PKCS8_PRIV_KEY_INFO * p8inf, X509_ALGOR * pbe, OSSL_LIB_CTX * ctx, const char * propq) (a0,d0,a1,a2,a3,d1)
PKCS7 * PKCS12_pack_p7encdata_ex(int pbe_nid, const char * pass, int passlen, unsigned char * salt, int saltlen, int iter, STACK_OF(PKCS12_SAFEBAG) * bags, OSSL_LIB_CTX * ctx, const char * propq) (d0,a0,d1,a1,d2,d3,a2,a3,d4)
unsigned char * PKCS12_pbe_crypt_ex(const X509_ALGOR * algor, const char * pass, int passlen, const unsigned char * in, int inlen, unsigned char ** data, int * datalen, int en_de, OSSL_LIB_CTX * libctx, const char * propq) (a0,a1,d0,a2,d1,a3,d2,d3,d4,d5)
void * PKCS12_item_decrypt_d2i_ex(const X509_ALGOR * algor, const ASN1_ITEM * it, const char * pass, int passlen, const ASN1_OCTET_STRING * oct, int zbuf, OSSL_LIB_CTX * libctx, const char * propq) (a0,a1,a2,d0,a3,d1,d2,d3)
ASN1_OCTET_STRING * PKCS12_item_i2d_encrypt_ex(X509_ALGOR * algor, const ASN1_ITEM * it, const char * pass, int passlen, void * obj, int zbuf, OSSL_LIB_CTX * ctx, const char * propq) (a0,a1,a2,d0,a3,d1,d2,d3)
PKCS12 * PKCS12_init_ex(int mode, OSSL_LIB_CTX * ctx, const char * propq) (d0,a0,a1)
int PKCS12_key_gen_asc_ex(const char * pass, int passlen, unsigned char * salt, int saltlen, int id, int iter, int n, unsigned char * out, const EVP_MD * md_type, OSSL_LIB_CTX * ctx, const char * propq) (a0,d0,a1,d1,d2,d3,d4,a2,a3,d5,d6)
int PKCS12_key_gen_uni_ex(unsigned char * pass, int passlen, unsigned char * salt, int saltlen, int id, int iter, int n, unsigned char * out, const EVP_MD * md_type, OSSL_LIB_CTX * ctx, const char * propq) (a0,d0,a1,d1,d2,d3,d4,a2,a3,d5,d6)
int PKCS12_key_gen_utf8_ex(const char * pass, int passlen, unsigned char * salt, int saltlen, int id, int iter, int n, unsigned char * out, const EVP_MD * md_type, OSSL_LIB_CTX * ctx, const char * propq) (a0,d0,a1,d1,d2,d3,d4,a2,a3,d5,d6)
int PKCS12_PBE_keyivgen_ex(EVP_CIPHER_CTX * ctx, const char * pass, int passlen, ASN1_TYPE * param, const EVP_CIPHER * cipher, const EVP_MD * md_type, int en_de, OSSL_LIB_CTX * libctx, const char * propq) (a0,a1,d0,a2,a3,d1,d2,d3,d4)
PKCS12 * PKCS12_create_ex(const char * pass, const char * name, EVP_PKEY * pkey, X509 * cert, STACK_OF(X509) * ca, int nid_key, int nid_cert, int iter, int mac_iter, int keytype, OSSL_LIB_CTX * ctx, const char * propq) (a0,a1,a2,a3,d0,d1,d2,d3,d4,d5,d6,d7)
PKCS12_SAFEBAG * PKCS12_add_key_ex(STACK_OF(PKCS12_SAFEBAG) ** pbags, EVP_PKEY * key, int key_usage, int iter, int key_nid, const char * pass, OSSL_LIB_CTX * ctx, const char * propq) (a0,a1,d0,d1,d2,a2,a3,d3)
int PKCS12_add_safe_ex(STACK_OF(PKCS7) ** psafes, STACK_OF(PKCS12_SAFEBAG) * bags, int safe_nid, int iter, const char * pass, OSSL_LIB_CTX * ctx, const char * propq) (a0,a1,d0,d1,a2,a3,d2)
PKCS12 * PKCS12_add_safes_ex(STACK_OF(PKCS7) * safes, int p7_nid, OSSL_LIB_CTX * ctx, const char * propq) (a0,d0,a1,a2)
int PKCS5_pbe_set0_algor_ex(X509_ALGOR * algor, int alg, int iter, const unsigned char * salt, int saltlen, OSSL_LIB_CTX * libctx) (a0,d0,d1,a1,d2,a2)
X509_ALGOR * PKCS5_pbe_set_ex(int alg, int iter, const unsigned char * salt, int saltlen, OSSL_LIB_CTX * libctx) (d0,d1,a0,d2,a1)
X509_ALGOR * PKCS5_pbe2_set_iv_ex(const EVP_CIPHER * cipher, int iter, unsigned char * salt, int saltlen, unsigned char * aiv, int prf_nid, OSSL_LIB_CTX * libctx) (a0,d0,a1,d1,a2,d2,a3)
X509_ALGOR * PKCS5_pbkdf2_set_ex(int iter, unsigned char * salt, int saltlen, int prf_nid, int keylen, OSSL_LIB_CTX * libctx) (d0,a0,d1,d2,d3,a1)
BIO * BIO_new_from_core_bio(OSSL_LIB_CTX * libctx, OSSL_CORE_BIO * corebio) (a0,a1)
BIO * BIO_new_ex(OSSL_LIB_CTX * libctx, const BIO_METHOD * method) (a0,a1)
const BIO_METHOD * BIO_s_core() ()
int BIO_get_line(BIO * bio, char * buf, int size) (a0,a1,d0)
OSSL_LIB_CTX * OSSL_LIB_CTX_new_from_dispatch(const OSSL_CORE_HANDLE * handle, const OSSL_DISPATCH * in) (a0,a1)
OSSL_LIB_CTX * OSSL_LIB_CTX_new_child(const OSSL_CORE_HANDLE * handle, const OSSL_DISPATCH * in) (a0,a1)
const OSSL_DISPATCH * OSSL_PROVIDER_get0_dispatch(const OSSL_PROVIDER * prov) (a0)
int PKCS5_PBE_keyivgen_ex(EVP_CIPHER_CTX * cctx, const char * pass, int passlen, ASN1_TYPE * param, const EVP_CIPHER * cipher, const EVP_MD * md, int en_de, OSSL_LIB_CTX * libctx, const char * propq) (a0,a1,d0,a2,a3,d1,d2,d3,d4)
size_t EVP_MAC_CTX_get_block_size(EVP_MAC_CTX * ctx) (a0)
long BIO_debug_callback_ex(BIO * bio, int oper, const char * argp, size_t len, int argi, long argl, int ret, size_t * processed) (a0,d0,a1,d1,d2,d3,d4,a2)
EVP_PKEY * b2i_PVK_bio_ex(BIO * in, pem_password_cb * cb, void * u, OSSL_LIB_CTX * libctx, const char * propq) (a0,a1,a2,a3,d0)
int i2b_PVK_bio_ex(BIO * out, const EVP_PKEY * pk, int enclevel, pem_password_cb * cb, void * u, OSSL_LIB_CTX * libctx, const char * propq) (a0,a1,d0,a2,a3,d1,d2)
OSSL_LIB_CTX * NCONF_get0_libctx(const CONF * conf) (a0)
STACK_OF(OPENSSL_CSTRING) * NCONF_get_section_names(const CONF * conf) (a0)
X509_PUBKEY * X509_PUBKEY_new_ex(OSSL_LIB_CTX * libctx, const char * propq) (a0,a1)
ASN1_VALUE * ASN1_item_new_ex(const ASN1_ITEM * it, OSSL_LIB_CTX * libctx, const char * propq) (a0,a1,a2)
void * ASN1_item_d2i_bio_ex(const ASN1_ITEM * it, BIO * in, void * pval, OSSL_LIB_CTX * libctx, const char * propq) (a0,a1,a2,a3,d0)
ASN1_VALUE * ASN1_item_d2i_ex(ASN1_VALUE ** val, const unsigned char ** in, long len, const ASN1_ITEM * it, OSSL_LIB_CTX * libctx, const char * propq) (a0,a1,d0,a2,a3,d1)
int ASN1_TIME_print_ex(BIO * bp, const ASN1_TIME * tm, unsigned long flags) (a0,a1,d0)
const OSSL_PROVIDER * EVP_PKEY_get0_provider(const EVP_PKEY * key) (a0)
const OSSL_PROVIDER * EVP_PKEY_CTX_get0_provider(const EVP_PKEY_CTX * ctx) (a0)
int OPENSSL_strcasecmp(const char * s1, const char * s2) (a0,a1)
int OPENSSL_strncasecmp(const char * s1, const char * s2, size_t n) (a0,a1,d0)
int OSSL_CMP_CTX_reset_geninfo_ITAVs(OSSL_CMP_CTX * ctx) (a0)
int EVP_RAND_CTX_up_ref(EVP_RAND_CTX * ctx) (a0)
int RAND_set0_public(OSSL_LIB_CTX * ctx, EVP_RAND_CTX * rand) (a0,a1)
int RAND_set0_private(OSSL_LIB_CTX * ctx, EVP_RAND_CTX * rand) (a0,a1)
EVP_MD_CTX * EVP_MD_CTX_dup(const EVP_MD_CTX * in) (a0)
EVP_CIPHER_CTX * EVP_CIPHER_CTX_dup(const EVP_CIPHER_CTX * in) (a0)
int BN_are_coprime(BIGNUM * a, const BIGNUM * b, BN_CTX * ctx) (a0,a1,a2)
int OSSL_CMP_MSG_update_recipNonce(OSSL_CMP_CTX * ctx, OSSL_CMP_MSG * msg) (a0,a1)
int SSL_client_hello_get_extension_order(SSL * s, uint16_t * exts, size_t * num_exts) (a0,a1,a2)
const SSL_METHOD * OSSL_QUIC_client_method() ()
const SSL_METHOD * OSSL_QUIC_client_thread_method() ()
int SSL_CTX_set1_cert_comp_preference(SSL_CTX * ctx, int * algs, size_t len) (a0,a1,d0)
int SSL_set1_cert_comp_preference(SSL * ssl, int * algs, size_t len) (a0,a1,d0)
int SSL_CTX_compress_certs(SSL_CTX * ctx, int alg) (a0,d0)
int SSL_compress_certs(SSL * ssl, int alg) (a0,d0)
int SSL_CTX_set1_compressed_cert(SSL_CTX * ctx, int algorithm, unsigned char * comp_data, size_t comp_length, size_t orig_length) (a0,d0,a1,d1,d2)
int SSL_set1_compressed_cert(SSL * ssl, int algorithm, unsigned char * comp_data, size_t comp_length, size_t orig_length) (a0,d0,a1,d1,d2)
size_t SSL_CTX_get1_compressed_cert(SSL_CTX * ctx, int alg, unsigned char ** data, size_t * orig_len) (a0,d0,a1,a2)
size_t SSL_get1_compressed_cert(SSL * ssl, int alg, unsigned char ** data, size_t * orig_len) (a0,d0,a1,a2)
int SSL_get_rpoll_descriptor(SSL * s, BIO_POLL_DESCRIPTOR * desc) (a0,a1)
int SSL_get_wpoll_descriptor(SSL * s, BIO_POLL_DESCRIPTOR * desc) (a0,a1)
int SSL_set_blocking_mode(SSL * s, int blocking) (a0,d0)
int SSL_get_blocking_mode(SSL * s) (a0)
int SSL_set1_initial_peer_addr(SSL * s, const BIO_ADDR * peer_addr) (a0,a1)
int SSL_net_read_desired(SSL * s) (a0)
int SSL_net_write_desired(SSL * s) (a0)
int SSL_shutdown_ex(SSL * ssl, uint64_t flags, const SSL_SHUTDOWN_EX_ARGS * args, size_t args_len) (a0,d0-d1,a1,d2)
int SSL_stream_conclude(SSL * ssl, uint64_t flags) (a0,d0-d1)
int SSL_inject_net_dgram(SSL * s, const unsigned char * buf, size_t buf_len, const BIO_ADDR * peer, const BIO_ADDR * local) (a0,a1,d0,a2,a3)
EVP_PKEY * SSL_get0_peer_rpk(const SSL * s) (a0)
EVP_PKEY * SSL_SESSION_get0_peer_rpk(SSL_SESSION * s) (a0)
int SSL_set1_client_cert_type(SSL * s, const unsigned char * val, size_t len) (a0,a1,d0)
int SSL_get0_client_cert_type(const SSL * s, unsigned char ** t, size_t * len) (a0,a1,a2)
int SSL_set1_server_cert_type(SSL * s, const unsigned char * val, size_t len) (a0,a1,d0)
int SSL_get0_server_cert_type(const SSL * s, unsigned char ** t, size_t * len) (a0,a1,a2)
int SSL_CTX_set1_client_cert_type(SSL_CTX * ctx, const unsigned char * val, size_t len) (a0,a1,d0)
int SSL_CTX_get0_client_cert_type(const SSL_CTX * ctx, unsigned char ** t, size_t * len) (a0,a1,a2)
int SSL_CTX_set1_server_cert_type(SSL_CTX * ctx, const unsigned char * val, size_t len) (a0,a1,d0)
int SSL_CTX_get0_server_cert_type(const SSL_CTX * s, unsigned char ** t, size_t * len) (a0,a1,a2)
int SSL_get_negotiated_client_cert_type(const SSL * s) (a0)
int SSL_get_negotiated_server_cert_type(const SSL * s) (a0)
int SSL_add_expected_rpk(SSL * s, EVP_PKEY * rpk) (a0,a1)
SSL_SESSION * d2i_SSL_SESSION_ex(SSL_SESSION ** a, const unsigned char ** pp, long length, OSSL_LIB_CTX * libctx, const char * propq) (a0,a1,d0,a2,a3)
int SSL_is_tls(const SSL * s) (a0)
int SSL_is_quic(const SSL * s) (a0)
int SSL_get_handshake_rtt(const SSL * s, uint64_t * rtt) (a0,a1)
SSL * SSL_new_stream(SSL * s, uint64_t flags) (a0,d0-d1)
SSL * SSL_get0_connection(SSL * s) (a0)
int SSL_is_connection(SSL * s) (a0)
int SSL_get_stream_type(SSL * s) (a0)
uint64_t SSL_get_stream_id(SSL * s) (a0)
int SSL_set_default_stream_mode(SSL * s, uint32_t mode) (a0,d0)
SSL * SSL_accept_stream(SSL * s, uint64_t flags) (a0,d0-d1)
size_t SSL_get_accept_stream_queue_len(SSL * s) (a0)
int SSL_stream_reset(SSL * ssl, const SSL_STREAM_RESET_ARGS * args, size_t args_len) (a0,a1,d0)
int SSL_get_stream_read_state(SSL * ssl) (a0)
int SSL_get_stream_write_state(SSL * ssl) (a0)
int SSL_get_stream_read_error_code(SSL * ssl, uint64_t * app_error_code) (a0,a1)
int SSL_get_stream_write_error_code(SSL * ssl, uint64_t * app_error_code) (a0,a1)
int SSL_get_conn_close_info(SSL * ssl, SSL_CONN_CLOSE_INFO * info, size_t info_len) (a0,a1,d0)
int SSL_set_incoming_stream_policy(SSL * s, int policy, uint64_t aec) (a0,d2,d0-d1)
int SSL_handle_events(SSL * s) (a0)
int SSL_get_event_timeout(SSL * s, struct timeval * tv, int * is_infinite) (a0,a1,a2)
const char * SSL_get0_group_name(SSL * s) (a0)
int SSL_is_stream_local(SSL * s) (a0)
const BIO_METHOD * BIO_f_zlib() ()
void X509_PUBKEY_set0_public_key(X509_PUBKEY * pub, unsigned char * penc, int penclen) (a0,a1,d0)
void OSSL_STACK_OF_X509_free(STACK_OF(X509) * certs) (a0)
int OSSL_trace_string(BIO * out, int text, int full, const unsigned char * data, size_t size) (a0,d0,d1,a1,d2)
BIGNUM * BN_signed_bin2bn(const unsigned char * s, int len, BIGNUM * ret) (a0,d0,a1)
int BN_signed_bn2bin(const BIGNUM * a, unsigned char * to, int tolen) (a0,a1,d0)
BIGNUM * BN_signed_lebin2bn(const unsigned char * s, int len, BIGNUM * ret) (a0,d0,a1)
int BN_signed_bn2lebin(const BIGNUM * a, unsigned char * to, int tolen) (a0,a1,d0)
BIGNUM * BN_signed_native2bn(const unsigned char * s, int len, BIGNUM * ret) (a0,d0,a1)
int BN_signed_bn2native(const BIGNUM * a, unsigned char * to, int tolen) (a0,a1,d0)
int ASYNC_set_mem_functions(ASYNC_stack_alloc_fn alloc_fn, ASYNC_stack_free_fn free_fn) (a0,a1)
void ASYNC_get_mem_functions(ASYNC_stack_alloc_fn * alloc_fn, ASYNC_stack_free_fn * free_fn) (a0,a1)
BIO_ADDR * BIO_ADDR_dup(const BIO_ADDR * ap) (a0)
OSSL_CMP_ITAV * OSSL_CMP_ITAV_new_caCerts(const STACK_OF(X509) * caCerts) (a0)
int OSSL_CMP_ITAV_get0_caCerts(const OSSL_CMP_ITAV * itav, STACK_OF(X509) ** out) (a0,a1)
int OSSL_CMP_get1_caCerts(OSSL_CMP_CTX * ctx, STACK_OF(X509) ** out) (a0,a1)
OSSL_CMP_ITAV * OSSL_CMP_ITAV_new_rootCaCert(const X509 * rootCaCert) (a0)
int OSSL_CMP_ITAV_get0_rootCaCert(const OSSL_CMP_ITAV * itav, X509 ** out) (a0,a1)
OSSL_CMP_ITAV * OSSL_CMP_ITAV_new_rootCaKeyUpdate(const X509 * newWithNew, const X509 * newWithOld, const X509 * oldWithNew) (a0,a1,a2)
int OSSL_CMP_ITAV_get0_rootCaKeyUpdate(const OSSL_CMP_ITAV * itav, X509 ** newWithNew, X509 ** newWithOld, X509 ** oldWithNew) (a0,a1,a2,a3)
int OSSL_CMP_get1_rootCaKeyUpdate(OSSL_CMP_CTX * ctx, const X509 * oldWithOld, X509 ** newWithNew, X509 ** newWithOld, X509 ** oldWithNew) (a0,a1,a2,a3,d0)
OSSL_LIB_CTX * OSSL_CMP_CTX_get0_libctx(const OSSL_CMP_CTX * ctx) (a0)
const char * OSSL_CMP_CTX_get0_propq(const OSSL_CMP_CTX * ctx) (a0)
X509 * OSSL_CMP_CTX_get0_validatedSrvCert(const OSSL_CMP_CTX * ctx) (a0)
int OSSL_CMP_CTX_set1_serialNumber(OSSL_CMP_CTX * ctx, const ASN1_INTEGER * sn) (a0,a1)
X509_PUBKEY * OSSL_CRMF_CERTTEMPLATE_get0_publicKey(const OSSL_CRMF_CERTTEMPLATE * tmpl) (a0)
int CMS_final_digest(CMS_ContentInfo * cms, const unsigned char * md, unsigned int mdlen, BIO * dcont, unsigned int flags) (a0,a1,d0,a2,d1)
const ASN1_ITEM * CMS_EnvelopedData_it() ()
BIO * CMS_EnvelopedData_decrypt(CMS_EnvelopedData * env, BIO * detached_data, EVP_PKEY * pkey, X509 * cert, ASN1_OCTET_STRING * secret, unsigned int flags, OSSL_LIB_CTX * libctx, const char * propq) (a0,a1,a2,a3,d0,d1,d2,d3)
void CMS_SignedData_free(CMS_SignedData * a) (a0)
CMS_SignedData * CMS_SignedData_new() ()
BIO * CMS_SignedData_verify(CMS_SignedData * sd, BIO * detached_data, STACK_OF(X509) * scerts, X509_STORE * store, STACK_OF(X509) * extra, STACK_OF(X509_CRL) * crls, unsigned int flags, OSSL_LIB_CTX * libctx, const char * propq) (a0,a1,a2,a3,d0,d1,d2,d3,d4)
const BIO_METHOD * BIO_s_dgram_mem() ()
int BIO_recvmmsg(BIO * b, BIO_MSG * msg, size_t stride, size_t num_msg, uint64_t flags, size_t * msgs_processed) (a0,a1,d0,d1,d2-d3,a2)
int BIO_sendmmsg(BIO * b, BIO_MSG * msg, size_t stride, size_t num_msg, uint64_t flags, size_t * msgs_processed) (a0,a1,d0,d1,d2-d3,a2)
int BIO_meth_set_sendmmsg(BIO_METHOD * biom, int (*f)(BIO *, BIO_MSG *, size_t, size_t, uint64_t, size_t *)) (a0,a1)
int (*)(BIO *, BIO_MSG *, size_t, size_t, uint64_t, size_t *) BIO_meth_get_sendmmsg(const BIO_METHOD * biom) (a0)
int BIO_meth_set_recvmmsg(BIO_METHOD * biom, int (*f)(BIO *, BIO_MSG *, size_t, size_t, uint64_t, size_t *)) (a0,a1)
int (*)(BIO *, BIO_MSG *, size_t, size_t, uint64_t, size_t *) BIO_meth_get_recvmmsg(const BIO_METHOD * biom) (a0)
int BIO_err_is_non_fatal(unsigned int errcode) (d0)
const BIO_METHOD * BIO_s_dgram_pair() ()
int BIO_new_bio_dgram_pair(BIO ** bio1, size_t writebuf1, BIO ** bio2, size_t writebuf2) (a0,d0,a1,d1)
int EVP_PKEY_auth_encapsulate_init(EVP_PKEY_CTX * ctx, EVP_PKEY * authpriv, const OSSL_PARAM * params) (a0,a1,a2)
int EVP_PKEY_auth_decapsulate_init(EVP_PKEY_CTX * ctx, EVP_PKEY * authpub, const OSSL_PARAM * params) (a0,a1,a2)
void PKCS12_SAFEBAG_set0_attrs(PKCS12_SAFEBAG * bag, STACK_OF(X509_ATTRIBUTE) * attrs) (a0,a1)
PKCS12 * PKCS12_create_ex2_amiga_1(const char * pass, const char * name, EVP_PKEY * pkey, X509 * cert, STACK_OF(X509) * ca, int nid_key, int nid_cert, void * moreargs) (a0,a1,a2,a3,d0,d1,d2,d3)
void * PKCS12_create_ex2_amiga_2(int iter, int mac_iter, int keytype, OSSL_LIB_CTX * ctx, const char * propq, PKCS12_create_cb * cb, void * cbarg) (d0,d1,d2,a1,a2,a3,d3)
void OSSL_sleep(uint64_t millis) (d0-d1)
uint32_t OSSL_get_thread_support_flags() ()
int OSSL_set_max_threads(OSSL_LIB_CTX * ctx, uint64_t max_threads) (a0,d0-d1)
uint64_t OSSL_get_max_threads(OSSL_LIB_CTX * ctx) (a0)
COMP_METHOD * COMP_brotli() ()
COMP_METHOD * COMP_brotli_oneshot() ()
const BIO_METHOD * BIO_f_brotli() ()
COMP_METHOD * COMP_zstd() ()
COMP_METHOD * COMP_zstd_oneshot() ()
const BIO_METHOD * BIO_f_zstd() ()
EVP_PKEY * d2i_PUBKEY_ex_bio(BIO * bp, EVP_PKEY ** a, OSSL_LIB_CTX * libctx, const char * propq) (a0,a1,a2,a3)
COMP_METHOD * COMP_zlib_oneshot() ()
int OSSL_HPKE_keygen_amiga(OSSL_HPKE_SUITE * suite, unsigned char * pub, size_t * publen, EVP_PKEY ** priv, const unsigned char * ikm, size_t ikmlen, OSSL_LIB_CTX * libctx, const char * propq) (a0,a1,a2,a3,d0,d1,d2,d3)
int OSSL_HPKE_suite_check_amiga(OSSL_HPKE_SUITE * suite) (a0)
int OSSL_HPKE_get_grease_value(const OSSL_HPKE_SUITE * suite_in, OSSL_HPKE_SUITE * suite, unsigned char * enc, size_t * enclen, unsigned char * ct, size_t ctlen, OSSL_LIB_CTX * libctx, const char * propq) (a0,a1,a2,a3,d0,d1,d2,d3)
int OSSL_HPKE_str2suite(const char * str, OSSL_HPKE_SUITE * suite) (a0,a1)
void OSSL_HPKE_CTX_free(OSSL_HPKE_CTX * ctx) (a0)
OSSL_HPKE_CTX * OSSL_HPKE_CTX_new_amiga(int mode, OSSL_HPKE_SUITE * suite, int role, OSSL_LIB_CTX * libctx, const char * propq) (d0,a0,d1,a1,a2)
int OSSL_HPKE_CTX_set1_authpriv(OSSL_HPKE_CTX * ctx, EVP_PKEY * priv) (a0,a1)
int OSSL_HPKE_CTX_set1_authpub(OSSL_HPKE_CTX * ctx, const unsigned char * pub, size_t publen) (a0,a1,d0)
int OSSL_HPKE_CTX_set1_psk(OSSL_HPKE_CTX * ctx, const char * pskid, const unsigned char * psk, size_t psklen) (a0,a1,a2,d0)
int OSSL_HPKE_CTX_set1_ikme(OSSL_HPKE_CTX * ctx, const unsigned char * ikme, size_t ikmelen) (a0,a1,d0)
size_t OSSL_HPKE_get_ciphertext_size_amiga(OSSL_HPKE_SUITE * suite, size_t clearlen) (a0,d0)
size_t OSSL_HPKE_get_public_encap_size_amiga(OSSL_HPKE_SUITE * suite) (a0)
int OSSL_HPKE_export(OSSL_HPKE_CTX * ctx, unsigned char * secret, size_t secretlen, const unsigned char * label, size_t labellen) (a0,a1,d0,a2,d1)
int OSSL_HPKE_encap(OSSL_HPKE_CTX * ctx, unsigned char * enc, size_t * enclen, const unsigned char * pub, size_t publen, const unsigned char * info, size_t infolen) (a0,a1,a2,a3,d0,d1,d2)
int OSSL_HPKE_decap(OSSL_HPKE_CTX * ctx, const unsigned char * enc, size_t enclen, EVP_PKEY * recippriv, const unsigned char * info, size_t infolen) (a0,a1,d0,a2,a3,d1)
int OSSL_HPKE_seal(OSSL_HPKE_CTX * ctx, unsigned char * ct, size_t * ctlen, const unsigned char * aad, size_t aadlen, const unsigned char * pt, size_t ptlen) (a0,a1,a2,a3,d0,d1,d2)
int OSSL_HPKE_open(OSSL_HPKE_CTX * ctx, unsigned char * pt, size_t * ptlen, const unsigned char * aad, size_t aadlen, const unsigned char * ct, size_t ctlen) (a0,a1,a2,a3,d0,d1,d2)
int OSSL_HPKE_CTX_get_seq(OSSL_HPKE_CTX * ctx, uint64_t * seq) (a0,a1)
int OSSL_HPKE_CTX_set_seq(OSSL_HPKE_CTX * ctx, uint64_t seq) (a0,d0-d1)
size_t OSSL_HPKE_get_recommended_ikmelen_amiga(OSSL_HPKE_SUITE * suite) (a0)
const char * OSSL_PROVIDER_get0_default_search_path(OSSL_LIB_CTX * libctx) (a0)
int BIO_get_rpoll_descriptor(BIO * b, BIO_POLL_DESCRIPTOR * desc) (a0,a1)
int BIO_get_wpoll_descriptor(BIO * b, BIO_POLL_DESCRIPTOR * desc) (a0,a1)
void * ASN1_item_unpack_ex(const ASN1_STRING * oct, const ASN1_ITEM * it, OSSL_LIB_CTX * libctx, const char * propq) (a0,a1,a2,a3)
X509 * PKCS12_SAFEBAG_get1_cert_ex(const PKCS12_SAFEBAG * bag, OSSL_LIB_CTX * libctx, const char * propq) (a0,a1,a2)
X509_CRL * PKCS12_SAFEBAG_get1_crl_ex(const PKCS12_SAFEBAG * bag, OSSL_LIB_CTX * libctx, const char * propq) (a0,a1,a2)
OSSL_PARAM * EC_GROUP_to_params(const EC_GROUP * group, OSSL_LIB_CTX * libctx, const char * propq, BN_CTX * bnctx) (a0,a1,a2,a3)
int X509_STORE_CTX_init_rpk(X509_STORE_CTX * ctx, X509_STORE * trust_store, EVP_PKEY* rpk) (a0,a1,a2)
EVP_PKEY * X509_STORE_CTX_get0_rpk(const X509_STORE_CTX * ctx) (a0)
void X509_STORE_CTX_set0_rpk(X509_STORE_CTX * ctx, EVP_PKEY * target) (a0,a1)
int CRYPTO_atomic_load_int(int * val, int * ret, CRYPTO_RWLOCK * lock) (a0,a1,a2)
ERR_STATE * OSSL_ERR_STATE_new() ()
void OSSL_ERR_STATE_save(ERR_STATE * es) (a0)
void OSSL_ERR_STATE_restore(const ERR_STATE * es) (a0)
void OSSL_ERR_STATE_free(ERR_STATE * es) (a0)
int ERR_count_to_mark() ()
OSSL_PROVIDER * OSSL_PROVIDER_load_ex(OSSL_LIB_CTX * a, const char * name, OSSL_PARAM * params) (a0,a1,a2)
OSSL_PROVIDER * OSSL_PROVIDER_try_load_ex(OSSL_LIB_CTX * a, const char * name, OSSL_PARAM * params, int retain_fallbacks) (a0,a1,a2,d0)
void OSSL_ERR_STATE_save_to_mark(ERR_STATE * es) (a0)
void X509_STORE_CTX_set_get_crl(X509_STORE_CTX * ctx, X509_STORE_CTX_get_crl_fn get_crl) (a0,a1)
void X509_STORE_CTX_set_current_reasons(X509_STORE_CTX * ctx, unsigned int current_reasons) (a0,d0)
int OSSL_STORE_delete(const char * uri, OSSL_LIB_CTX * libctx, const char * propq, const UI_METHOD * ui_method, void * ui_data, const OSSL_PARAM * params) (a0,a1,a2,a3,d0,d1)
int BIO_ADDR_copy(BIO_ADDR * dst, const BIO_ADDR * src) (a0,a1)
int SSL_write_ex2(SSL * s, const void * buf, size_t num, uint64_t flags, size_t * written) (a0,a1,d2,d0-d1,a2)
int SSL_get_value_uint(SSL * s, uint32_t class_, uint32_t id, uint64_t * v) (a0,d0,d1,a1)
int SSL_set_value_uint(SSL * s, uint32_t class_, uint32_t id, uint64_t v) (a0,d0,d1,d2-d3)
int SSL_poll(SSL_POLL_ITEM * items, size_t num_items, size_t stride, const struct timeval * timeout, uint64_t flags, size_t * result_count) (a0,d0,d1,a1,d2-d3,a2)
time_t SSL_SESSION_get_time_ex(const SSL_SESSION * s) (a0)
time_t SSL_SESSION_set_time_ex(SSL_SESSION * s, time_t t) (a0,d0)
STACK_OF(OSSL_CMP_ITAV) * OSSL_CMP_CTX_get0_geninfo_ITAVs(const OSSL_CMP_CTX * ctx) (a0)
STACK_OF(OSSL_CMP_ITAV) * OSSL_CMP_HDR_get0_geninfo_ITAVs(const OSSL_CMP_PKIHEADER * hdr) (a0)
OSSL_CMP_ITAV * OSSL_CMP_ITAV_new0_certProfile(STACK_OF(ASN1_UTF8STRING) * certProfile) (a0)
int OSSL_CMP_ITAV_get0_certProfile(const OSSL_CMP_ITAV * itav, STACK_OF(ASN1_UTF8STRING) ** out) (a0,a1)
X509_PUBKEY * OSSL_CMP_MSG_get0_certreq_publickey(const OSSL_CMP_MSG * msg) (a0)
int OSSL_CMP_SRV_CTX_init_trans(OSSL_CMP_SRV_CTX * srv_ctx, OSSL_CMP_SRV_delayed_delivery_cb_t delay, OSSL_CMP_SRV_clean_transaction_cb_t clean) (a0,a1,a2)
int EVP_DigestSqueeze(EVP_MD_CTX * ctx, unsigned char * out, size_t outlen) (a0,a1,d0)
int ERR_pop() ()
STACK_OF(X509_OBJECT) * X509_STORE_get1_objects(X509_STORE * xs) (a0)
OPENSSL_LHASH * OPENSSL_LH_set_thunks(OPENSSL_LHASH * lh, OPENSSL_LH_HASHFUNCTHUNK hw, OPENSSL_LH_COMPFUNCTHUNK cw, OPENSSL_LH_DOALL_FUNC_THUNK daw, OPENSSL_LH_DOALL_FUNCARG_THUNK daaw) (a0,a1,a2,a3,d0)
void OPENSSL_LH_doall_arg_thunk(OPENSSL_LHASH * lh, OPENSSL_LH_DOALL_FUNCARG_THUNK daaw, OPENSSL_LH_DOALL_FUNCARG fn, void * arg) (a0,d0,d1,a1)
void OSSL_HTTP_REQ_CTX_set_max_response_hdr_lines(OSSL_HTTP_REQ_CTX * rctx, size_t count) (a0,d0)
void SSL_CTX_flush_sessions_ex(SSL_CTX * ctx, time_t tm) (a0,d0)
int SSL_CTX_set_block_padding_ex(SSL_CTX * ctx, size_t app_block_size, size_t hs_block_size) (a0,d0,d1)
int SSL_set_block_padding_ex(SSL * ssl, size_t app_block_size, size_t hs_block_size) (a0,d0,d1)
char * SSL_get1_builtin_sigalgs(OSSL_LIB_CTX * libctx) (a0)
DIST_POINT_NAME * DIST_POINT_NAME_dup(const DIST_POINT_NAME * a) (a0)
int GENERAL_NAME_set1_X509_NAME(GENERAL_NAME ** tgt, const X509_NAME * src) (a0,a1)
OSSL_CMP_CRLSTATUS * OSSL_CMP_CRLSTATUS_create(const X509_CRL * crl, const X509 * cert, int only_DN) (a0,a1,d0)
void OSSL_CMP_CRLSTATUS_free(OSSL_CMP_CRLSTATUS * crlstatus) (a0)
int OSSL_CMP_CRLSTATUS_get0(const OSSL_CMP_CRLSTATUS * crlstatus, DIST_POINT_NAME ** dpn, GENERAL_NAMES ** issuer, ASN1_TIME ** thisUpdate) (a0,a1,a2,a3)
OSSL_CMP_CRLSTATUS * OSSL_CMP_CRLSTATUS_new1(const DIST_POINT_NAME * dpn, const GENERAL_NAMES * issuer, const ASN1_TIME * thisUpdate) (a0,a1,a2)
int OSSL_CMP_ITAV_get0_crlStatusList(const OSSL_CMP_ITAV * itav, STACK_OF(OSSL_CMP_CRLSTATUS) ** out) (a0,a1)
int OSSL_CMP_ITAV_get0_crls(const OSSL_CMP_ITAV * it, STACK_OF(X509_CRL) ** out) (a0,a1)
OSSL_CMP_ITAV * OSSL_CMP_ITAV_new0_crlStatusList(STACK_OF(OSSL_CMP_CRLSTATUS) * crlStatusList) (a0)
OSSL_CMP_ITAV * OSSL_CMP_ITAV_new_crls(const X509_CRL * crls) (a0)
int OSSL_CMP_get1_crlUpdate(OSSL_CMP_CTX * ctx, const X509 * crlcert, const X509_CRL * last_crl, X509_CRL ** crl) (a0,a1,a2,a3)
OSSL_CMP_ITAV * OSSL_CMP_ITAV_new0_certReqTemplate(OSSL_CRMF_CERTTEMPLATE * certTemplate, OSSL_CMP_ATAVS * keySpec) (a0,a1)
int OSSL_CMP_ITAV_get1_certReqTemplate(const OSSL_CMP_ITAV * itav, OSSL_CRMF_CERTTEMPLATE ** certTemplate, OSSL_CMP_ATAVS ** keySpec) (a0,a1,a2)
OSSL_CMP_ATAV * OSSL_CMP_ATAV_create(ASN1_OBJECT * type, ASN1_TYPE * value) (a0,a1)
void OSSL_CMP_ATAV_set0(OSSL_CMP_ATAV * itav, ASN1_OBJECT * type, ASN1_TYPE * value) (a0,a1,a2)
ASN1_OBJECT * OSSL_CMP_ATAV_get0_type(const OSSL_CMP_ATAV * itav) (a0)
ASN1_TYPE * OSSL_CMP_ATAV_get0_value(const OSSL_CMP_ATAV * itav) (a0)
OSSL_CMP_ATAV * OSSL_CMP_ATAV_new_algId(const X509_ALGOR * alg) (a0)
X509_ALGOR * OSSL_CMP_ATAV_get0_algId(const OSSL_CMP_ATAV * atav) (a0)
OSSL_CMP_ATAV * OSSL_CMP_ATAV_new_rsaKeyLen(int len) (d0)
int OSSL_CMP_ATAV_get_rsaKeyLen(const OSSL_CMP_ATAV * atav) (a0)
int OSSL_CMP_ATAV_push1(OSSL_CMP_ATAVS ** sk_p, const OSSL_CMP_ATAV * atav) (a0,a1)
int OSSL_CMP_get1_certReqTemplate(OSSL_CMP_CTX * ctx, OSSL_CRMF_CERTTEMPLATE ** certTemplate, OSSL_CMP_ATAVS ** keySpec) (a0,a1,a2)
OSSL_CMP_ATAVS * d2i_OSSL_CMP_ATAVS(OSSL_CMP_ATAVS ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_OSSL_CMP_ATAVS(const OSSL_CMP_ATAVS * a, unsigned char ** out) (a0,a1)
void OSSL_CMP_ATAVS_free(OSSL_CMP_ATAVS * a) (a0)
OSSL_CMP_ATAVS * OSSL_CMP_ATAVS_new() ()
const ASN1_ITEM * OSSL_CMP_ATAVS_it() ()
void OSSL_CRMF_ATTRIBUTETYPEANDVALUE_free(OSSL_CRMF_ATTRIBUTETYPEANDVALUE * v) (a0)
OSSL_CRMF_ATTRIBUTETYPEANDVALUE * OSSL_CRMF_ATTRIBUTETYPEANDVALUE_dup(const OSSL_CRMF_ATTRIBUTETYPEANDVALUE * a) (a0)
OSSL_CRMF_CERTTEMPLATE * OSSL_CRMF_CERTTEMPLATE_dup(const OSSL_CRMF_CERTTEMPLATE * a) (a0)
int CRYPTO_atomic_store(uint64_t * dst, uint64_t val, CRYPTO_RWLOCK * lock) (a0,d0-d1,a1)
void * CRYPTO_aligned_alloc(size_t num, size_t align, void ** freeptr, const char * file, int line) (d0,d1,a0,a1,d2)
STACK_OF(X509_EXTENSION) * X509v3_add_extensions(STACK_OF(X509_EXTENSION) ** target, const STACK_OF(X509_EXTENSION) * exts) (a0,a1)
int PKCS12_set_pbmac1_pbkdf2(PKCS12 * p12, const char * pass, int passlen, unsigned char * salt, int saltlen, int iter, const EVP_MD * md_type, const char * prf_md_name) (a0,a1,d0,a2,d1,d2,a3,d3)
PBKDF2PARAM * PBMAC1_get1_pbkdf2_param(const X509_ALGOR * macalg) (a0)
PBMAC1PARAM * d2i_PBMAC1PARAM(PBMAC1PARAM ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_PBMAC1PARAM(const PBMAC1PARAM * a, unsigned char ** out) (a0,a1)
void PBMAC1PARAM_free(PBMAC1PARAM * a) (a0)
PBMAC1PARAM * PBMAC1PARAM_new() ()
const ASN1_ITEM * PBMAC1PARAM_it() ()
int OSSL_LIB_CTX_get_conf_diagnostics(OSSL_LIB_CTX * ctx) (a0)
void OSSL_LIB_CTX_set_conf_diagnostics(OSSL_LIB_CTX * ctx, int value) (a0,d0)
void * OSSL_LIB_CTX_get_data(OSSL_LIB_CTX * ctx, int index) (a0,d0)
int OSSL_GENERAL_NAMES_print(BIO * out, GENERAL_NAMES * gens, int indent) (a0,a1,d0)
int TS_VERIFY_CTX_set0_data(TS_VERIFY_CTX * ctx, BIO * b) (a0,a1)
int TS_VERIFY_CTX_set0_imprint(TS_VERIFY_CTX * ctx, unsigned char * hexstr, long len) (a0,a1,d0)
int TS_VERIFY_CTX_set0_store(TS_VERIFY_CTX * ctx, X509_STORE * s) (a0,a1)
int TS_VERIFY_CTX_set0_certs(TS_VERIFY_CTX * ctx, STACK_OF(X509) * certs) (a0,a1)
int CRYPTO_atomic_add64(uint64_t * val, uint64_t op, uint64_t * ret, CRYPTO_RWLOCK * lock) (a0,d0-d1,a1,a2)
int CRYPTO_atomic_and(uint64_t * val, uint64_t op, uint64_t * ret, CRYPTO_RWLOCK * lock) (a0,d0-d1,a1,a2)
OSSL_ATTRIBUTES_SYNTAX * d2i_OSSL_ATTRIBUTES_SYNTAX(OSSL_ATTRIBUTES_SYNTAX ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_OSSL_ATTRIBUTES_SYNTAX(const OSSL_ATTRIBUTES_SYNTAX * a, unsigned char ** out) (a0,a1)
void OSSL_ATTRIBUTES_SYNTAX_free(OSSL_ATTRIBUTES_SYNTAX * a) (a0)
OSSL_ATTRIBUTES_SYNTAX * OSSL_ATTRIBUTES_SYNTAX_new() ()
const ASN1_ITEM * OSSL_ATTRIBUTES_SYNTAX_it() ()
OSSL_USER_NOTICE_SYNTAX * d2i_OSSL_USER_NOTICE_SYNTAX(OSSL_USER_NOTICE_SYNTAX ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_OSSL_USER_NOTICE_SYNTAX(const OSSL_USER_NOTICE_SYNTAX * a, unsigned char ** out) (a0,a1)
void OSSL_USER_NOTICE_SYNTAX_free(OSSL_USER_NOTICE_SYNTAX * a) (a0)
OSSL_USER_NOTICE_SYNTAX * OSSL_USER_NOTICE_SYNTAX_new() ()
const ASN1_ITEM * OSSL_USER_NOTICE_SYNTAX_it() ()
void OSSL_INDICATOR_set_callback(OSSL_LIB_CTX * libctx, OSSL_INDICATOR_CALLBACK * cb) (a0,a1)
void OSSL_INDICATOR_get_callback(OSSL_LIB_CTX * libctx, OSSL_INDICATOR_CALLBACK ** cb) (a0,a1)
int OPENSSL_strtoul(const char * str, char ** endptr, int base, unsigned long * num) (a0,a1,d0,a2)
OSSL_BASIC_ATTR_CONSTRAINTS * d2i_OSSL_BASIC_ATTR_CONSTRAINTS(OSSL_BASIC_ATTR_CONSTRAINTS ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_OSSL_BASIC_ATTR_CONSTRAINTS(const OSSL_BASIC_ATTR_CONSTRAINTS * a, unsigned char ** out) (a0,a1)
void OSSL_BASIC_ATTR_CONSTRAINTS_free(OSSL_BASIC_ATTR_CONSTRAINTS * a) (a0)
OSSL_BASIC_ATTR_CONSTRAINTS * OSSL_BASIC_ATTR_CONSTRAINTS_new() ()
const ASN1_ITEM * OSSL_BASIC_ATTR_CONSTRAINTS_it() ()
const OSSL_PARAM * EVP_KEYMGMT_gen_gettable_params(const EVP_KEYMGMT * keymgmt) (a0)
int EVP_PKEY_CTX_set_signature(EVP_PKEY_CTX * pctx, const unsigned char * sig, size_t siglen) (a0,a1,d0)
int EVP_PKEY_sign_init_ex2(EVP_PKEY_CTX * ctx, EVP_SIGNATURE * algo, const OSSL_PARAM * params) (a0,a1,a2)
int EVP_PKEY_sign_message_init(EVP_PKEY_CTX * ctx, EVP_SIGNATURE * algo, const OSSL_PARAM * params) (a0,a1,a2)
int EVP_PKEY_sign_message_update(EVP_PKEY_CTX * ctx, const unsigned char * in, size_t inlen) (a0,a1,d0)
int EVP_PKEY_sign_message_final(EVP_PKEY_CTX * ctx, unsigned char * sig, size_t * siglen) (a0,a1,a2)
int EVP_PKEY_verify_init_ex2(EVP_PKEY_CTX * ctx, EVP_SIGNATURE * algo, const OSSL_PARAM * params) (a0,a1,a2)
int EVP_PKEY_verify_message_init(EVP_PKEY_CTX * ctx, EVP_SIGNATURE * algo, const OSSL_PARAM * params) (a0,a1,a2)
int EVP_PKEY_verify_message_update(EVP_PKEY_CTX * ctx, const unsigned char * in, size_t inlen) (a0,a1,d0)
int EVP_PKEY_verify_message_final(EVP_PKEY_CTX * ctx) (a0)
int EVP_PKEY_verify_recover_init_ex2(EVP_PKEY_CTX * ctx, EVP_SIGNATURE * algo, const OSSL_PARAM * params) (a0,a1,a2)
int EVP_MD_xof(const EVP_MD * md) (a0)
int EVP_MD_CTX_get_size_ex(const EVP_MD_CTX * ctx) (a0)
int EVP_CIPHER_CTX_set_algor_params(EVP_CIPHER_CTX * ctx, const X509_ALGOR * alg) (a0,a1)
int EVP_CIPHER_CTX_get_algor_params(EVP_CIPHER_CTX * ctx, X509_ALGOR * alg) (a0,a1)
int EVP_CIPHER_CTX_get_algor(EVP_CIPHER_CTX * ctx, X509_ALGOR ** alg) (a0,a1)
int EVP_PKEY_CTX_set_algor_params(EVP_PKEY_CTX * ctx, const X509_ALGOR * alg) (a0,a1)
int EVP_PKEY_CTX_get_algor_params(EVP_PKEY_CTX * ctx, X509_ALGOR * alg) (a0,a1)
int EVP_PKEY_CTX_get_algor(EVP_PKEY_CTX * ctx, X509_ALGOR ** alg) (a0,a1)
X509_ACERT * d2i_X509_ACERT(X509_ACERT ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_X509_ACERT(const X509_ACERT * a, unsigned char ** out) (a0,a1)
void X509_ACERT_free(X509_ACERT * a) (a0)
X509_ACERT * X509_ACERT_new() ()
const ASN1_ITEM * X509_ACERT_it() ()
X509_ACERT * X509_ACERT_dup(const X509_ACERT * a) (a0)
const ASN1_ITEM * X509_ACERT_INFO_it() ()
void X509_ACERT_INFO_free(X509_ACERT_INFO * a) (a0)
X509_ACERT_INFO * X509_ACERT_INFO_new() ()
void OSSL_OBJECT_DIGEST_INFO_free(OSSL_OBJECT_DIGEST_INFO * a) (a0)
OSSL_OBJECT_DIGEST_INFO * OSSL_OBJECT_DIGEST_INFO_new() ()
void OSSL_ISSUER_SERIAL_free(OSSL_ISSUER_SERIAL * a) (a0)
OSSL_ISSUER_SERIAL * OSSL_ISSUER_SERIAL_new() ()
void X509_ACERT_ISSUER_V2FORM_free(X509_ACERT_ISSUER_V2FORM * a) (a0)
X509_ACERT_ISSUER_V2FORM * X509_ACERT_ISSUER_V2FORM_new() ()
X509_ACERT * PEM_read_bio_X509_ACERT(BIO * out, X509_ACERT ** x, pem_password_cb * cb, void * u) (a0,a1,a2,a3)
int PEM_write_bio_X509_ACERT(BIO * out, const X509_ACERT * x) (a0,a1)
X509_ACERT * d2i_X509_ACERT_bio(BIO * bp, X509_ACERT ** acert) (a0,a1)
int i2d_X509_ACERT_bio(BIO * bp, const X509_ACERT * acert) (a0,a1)
const GENERAL_NAMES * X509_ACERT_get0_holder_entityName(const X509_ACERT * x) (a0)
const OSSL_ISSUER_SERIAL * X509_ACERT_get0_holder_baseCertId(const X509_ACERT * x) (a0)
const OSSL_OBJECT_DIGEST_INFO * X509_ACERT_get0_holder_digest(const X509_ACERT * x) (a0)
const X509_NAME * X509_ACERT_get0_issuerName(const X509_ACERT * x) (a0)
long X509_ACERT_get_version(const X509_ACERT * x) (a0)
void X509_ACERT_get0_signature(const X509_ACERT * x, const ASN1_BIT_STRING ** psig, const X509_ALGOR ** palg) (a0,a1,a2)
int X509_ACERT_get_signature_nid(const X509_ACERT * x) (a0)
const X509_ALGOR * X509_ACERT_get0_info_sigalg(const X509_ACERT * x) (a0)
const ASN1_INTEGER * X509_ACERT_get0_serialNumber(const X509_ACERT * x) (a0)
const ASN1_TIME * X509_ACERT_get0_notBefore(const X509_ACERT * x) (a0)
const ASN1_TIME * X509_ACERT_get0_notAfter(const X509_ACERT * x) (a0)
const ASN1_BIT_STRING * X509_ACERT_get0_issuerUID(const X509_ACERT * x) (a0)
int X509_ACERT_set_version(X509_ACERT * x, long version) (a0,d0)
void X509_ACERT_set0_holder_entityName(X509_ACERT * x, GENERAL_NAMES * name) (a0,a1)
void X509_ACERT_set0_holder_baseCertId(X509_ACERT * x, OSSL_ISSUER_SERIAL * isss) (a0,a1)
void X509_ACERT_set0_holder_digest(X509_ACERT * x, OSSL_OBJECT_DIGEST_INFO * dinfo) (a0,a1)
int X509_ACERT_set1_issuerName(X509_ACERT * x, const X509_NAME * name) (a0,a1)
int X509_ACERT_set1_serialNumber(X509_ACERT * x, const ASN1_INTEGER * serial) (a0,a1)
int X509_ACERT_set1_notBefore(X509_ACERT * x, const ASN1_GENERALIZEDTIME * time) (a0,a1)
int X509_ACERT_set1_notAfter(X509_ACERT * x, const ASN1_GENERALIZEDTIME * time) (a0,a1)
void OSSL_OBJECT_DIGEST_INFO_get0_digest(const OSSL_OBJECT_DIGEST_INFO * o, int * digestedObjectType, const X509_ALGOR ** digestAlgorithm, const ASN1_BIT_STRING ** digest) (a0,a1,a2,a3)
int OSSL_OBJECT_DIGEST_INFO_set1_digest(OSSL_OBJECT_DIGEST_INFO * o, int digestedObjectType, X509_ALGOR * digestAlgorithm, ASN1_BIT_STRING * digest) (a0,d0,a1,a2)
const X509_NAME * OSSL_ISSUER_SERIAL_get0_issuer(const OSSL_ISSUER_SERIAL * isss) (a0)
const ASN1_INTEGER * OSSL_ISSUER_SERIAL_get0_serial(const OSSL_ISSUER_SERIAL * isss) (a0)
const ASN1_BIT_STRING * OSSL_ISSUER_SERIAL_get0_issuerUID(const OSSL_ISSUER_SERIAL * isss) (a0)
int OSSL_ISSUER_SERIAL_set1_issuer(OSSL_ISSUER_SERIAL * isss, const X509_NAME * issuer) (a0,a1)
int OSSL_ISSUER_SERIAL_set1_serial(OSSL_ISSUER_SERIAL * isss, const ASN1_INTEGER * serial) (a0,a1)
int OSSL_ISSUER_SERIAL_set1_issuerUID(OSSL_ISSUER_SERIAL * isss, const ASN1_BIT_STRING * uid) (a0,a1)
int X509_ACERT_print(BIO * bp, X509_ACERT * x) (a0,a1)
int X509_ACERT_print_ex(BIO * bp, X509_ACERT * x, unsigned long nmflags, unsigned long cflag) (a0,a1,d0,d1)
int X509_ACERT_get_attr_count(const X509_ACERT * x) (a0)
int X509_ACERT_get_attr_by_NID(const X509_ACERT * x, int nid, int lastpos) (a0,d0,d1)
int X509_ACERT_get_attr_by_OBJ(const X509_ACERT * x, const ASN1_OBJECT * obj, int lastpos) (a0,a1,d0)
X509_ATTRIBUTE * X509_ACERT_get_attr(const X509_ACERT * x, int loc) (a0,d0)
X509_ATTRIBUTE * X509_ACERT_delete_attr(X509_ACERT * x, int loc) (a0,d0)
int X509_ACERT_add1_attr(X509_ACERT * x, X509_ATTRIBUTE * attr) (a0,a1)
int X509_ACERT_add1_attr_by_OBJ(X509_ACERT * x, const ASN1_OBJECT * obj, int type, const void * bytes, int len) (a0,a1,d0,a2,d1)
int X509_ACERT_add1_attr_by_NID(X509_ACERT * x, int nid, int type, const void * bytes, int len) (a0,d0,d1,a1,d2)
int X509_ACERT_add1_attr_by_txt(X509_ACERT * x, const char * attrname, int type, const unsigned char * bytes, int len) (a0,a1,d0,a2,d1)
int X509_ACERT_sign(X509_ACERT * x, EVP_PKEY * pkey, const EVP_MD * md) (a0,a1,a2)
int X509_ACERT_sign_ctx(X509_ACERT * x, EVP_MD_CTX * ctx) (a0,a1)
int X509_ACERT_verify(X509_ACERT * a, EVP_PKEY * r) (a0,a1)
void * X509_ACERT_get_ext_d2i(const X509_ACERT * x, int nid, int * crit, int * idx) (a0,d0,a1,a2)
int X509_ACERT_add1_ext_i2d(X509_ACERT * x, int nid, void * value, int crit, unsigned long flags) (a0,d0,a1,d1,d2)
const struct stack_st_X509_EXTENSION * X509_ACERT_get0_extensions(const X509_ACERT * x) (a0)
const ASN1_ITEM * OSSL_IETF_ATTR_SYNTAX_VALUE_it() ()
void OSSL_IETF_ATTR_SYNTAX_VALUE_free(OSSL_IETF_ATTR_SYNTAX_VALUE * a) (a0)
OSSL_IETF_ATTR_SYNTAX_VALUE * OSSL_IETF_ATTR_SYNTAX_VALUE_new() ()
OSSL_IETF_ATTR_SYNTAX * d2i_OSSL_IETF_ATTR_SYNTAX(OSSL_IETF_ATTR_SYNTAX ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_OSSL_IETF_ATTR_SYNTAX(const OSSL_IETF_ATTR_SYNTAX * a, unsigned char ** out) (a0,a1)
void OSSL_IETF_ATTR_SYNTAX_free(OSSL_IETF_ATTR_SYNTAX * a) (a0)
OSSL_IETF_ATTR_SYNTAX * OSSL_IETF_ATTR_SYNTAX_new() ()
const ASN1_ITEM * OSSL_IETF_ATTR_SYNTAX_it() ()
const GENERAL_NAMES * OSSL_IETF_ATTR_SYNTAX_get0_policyAuthority(const OSSL_IETF_ATTR_SYNTAX * a) (a0)
void OSSL_IETF_ATTR_SYNTAX_set0_policyAuthority(OSSL_IETF_ATTR_SYNTAX * a, GENERAL_NAMES * names) (a0,a1)
int OSSL_IETF_ATTR_SYNTAX_get_value_num(const OSSL_IETF_ATTR_SYNTAX * a) (a0)
void * OSSL_IETF_ATTR_SYNTAX_get0_value(const OSSL_IETF_ATTR_SYNTAX * a, int ind, int * type) (a0,d0,a1)
int OSSL_IETF_ATTR_SYNTAX_add1_value(OSSL_IETF_ATTR_SYNTAX * a, int type, void * data) (a0,d0,a1)
int OSSL_IETF_ATTR_SYNTAX_print(BIO * bp, OSSL_IETF_ATTR_SYNTAX * a, int indent) (a0,a1,d0)
int X509_ACERT_add_attr_nconf(CONF * conf, const char * section, X509_ACERT * acert) (a0,a1,a2)
OSSL_TARGET * d2i_OSSL_TARGET(OSSL_TARGET ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_OSSL_TARGET(const OSSL_TARGET * a, unsigned char ** out) (a0,a1)
void OSSL_TARGET_free(OSSL_TARGET * a) (a0)
OSSL_TARGET * OSSL_TARGET_new() ()
const ASN1_ITEM * OSSL_TARGET_it() ()
OSSL_TARGETS * d2i_OSSL_TARGETS(OSSL_TARGETS ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_OSSL_TARGETS(const OSSL_TARGETS * a, unsigned char ** out) (a0,a1)
void OSSL_TARGETS_free(OSSL_TARGETS * a) (a0)
OSSL_TARGETS * OSSL_TARGETS_new() ()
const ASN1_ITEM * OSSL_TARGETS_it() ()
OSSL_TARGETING_INFORMATION * d2i_OSSL_TARGETING_INFORMATION(OSSL_TARGETING_INFORMATION ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_OSSL_TARGETING_INFORMATION(const OSSL_TARGETING_INFORMATION * a, unsigned char ** out) (a0,a1)
void OSSL_TARGETING_INFORMATION_free(OSSL_TARGETING_INFORMATION * a) (a0)
OSSL_TARGETING_INFORMATION * OSSL_TARGETING_INFORMATION_new() ()
const ASN1_ITEM * OSSL_TARGETING_INFORMATION_it() ()
int SSL_set_quic_tls_cbs(SSL * s, const OSSL_DISPATCH * qtdis, void * arg) (a0,a1,a2)
int SSL_set_quic_tls_transport_params(SSL * s, const unsigned char * params, size_t params_len) (a0,a1,d0)
int SSL_set_quic_tls_early_data_enabled(SSL * s, int enabled) (a0,d0)
const SSL_METHOD * OSSL_QUIC_server_method() ()
int SSL_is_listener(SSL * ssl) (a0)
SSL * SSL_get0_listener(SSL * s) (a0)
SSL * SSL_new_listener(SSL_CTX * ctx, uint64_t flags) (a0,d0-d1)
SSL * SSL_accept_connection(SSL * ssl, uint64_t flags) (a0,d0-d1)
size_t SSL_get_accept_connection_queue_len(SSL * ssl) (a0)
int SSL_listen(SSL * ssl) (a0)
SSL * SSL_new_from_listener(SSL * ssl, uint64_t flags) (a0,d0-d1)
SSL * SSL_new_listener_from(SSL * ssl, uint64_t flags) (a0,d0-d1)
int SSL_is_domain(SSL * s) (a0)
SSL * SSL_get0_domain(SSL * s) (a0)
SSL * SSL_new_domain(SSL_CTX * ctx, uint64_t flags) (a0,d0-d1)
int SSL_CTX_set_domain_flags(SSL_CTX * ctx, uint64_t domain_flags) (a0,d0-d1)
int SSL_CTX_get_domain_flags(const SSL_CTX * ctx, uint64_t * domain_flags) (a0,a1)
int SSL_get_domain_flags(const SSL * ssl, uint64_t * domain_flags) (a0,a1)
void SSL_CTX_set_new_pending_conn_cb(SSL_CTX * c, SSL_new_pending_conn_cb_fn cb, void * arg) (a0,a1,a2)
int X509_VERIFY_PARAM_get_purpose(const X509_VERIFY_PARAM * param) (a0)
OSSL_CRMF_ENCRYPTEDKEY * d2i_OSSL_CRMF_ENCRYPTEDKEY(OSSL_CRMF_ENCRYPTEDKEY ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_OSSL_CRMF_ENCRYPTEDKEY(const OSSL_CRMF_ENCRYPTEDKEY * a, unsigned char ** out) (a0,a1)
void OSSL_CRMF_ENCRYPTEDKEY_free(OSSL_CRMF_ENCRYPTEDKEY * a) (a0)
OSSL_CRMF_ENCRYPTEDKEY * OSSL_CRMF_ENCRYPTEDKEY_new() ()
const ASN1_ITEM * OSSL_CRMF_ENCRYPTEDKEY_it() ()
X509 * OSSL_CRMF_ENCRYPTEDKEY_get1_encCert(const OSSL_CRMF_ENCRYPTEDKEY * ecert, OSSL_LIB_CTX * libctx, const char * propq, EVP_PKEY * pkey, unsigned int flags) (a0,a1,a2,a3,d0)
unsigned char * OSSL_CRMF_ENCRYPTEDVALUE_decrypt(const OSSL_CRMF_ENCRYPTEDVALUE * enc, OSSL_LIB_CTX * libctx, const char * propq, EVP_PKEY * pkey, int * outlen) (a0,a1,a2,a3,d0)
EVP_PKEY * OSSL_CRMF_ENCRYPTEDKEY_get1_pkey(const OSSL_CRMF_ENCRYPTEDKEY * encryptedKey, X509_STORE * ts, STACK_OF(X509) * extra, EVP_PKEY * pkey, X509 * cert, ASN1_OCTET_STRING * secret, OSSL_LIB_CTX * libctx, const char * propq) (a0,a1,a2,a3,d0,d1,d2,d3)
int OSSL_CRMF_MSG_centralkeygen_requested(const OSSL_CRMF_MSG * crm, const X509_REQ * p10cr) (a0,a1)
CMS_EnvelopedData * CMS_EnvelopedData_dup(const CMS_EnvelopedData * a) (a0)
OSSL_CRMF_ENCRYPTEDKEY * OSSL_CRMF_ENCRYPTEDKEY_init_envdata(CMS_EnvelopedData * envdata) (a0)
char * EVP_get1_default_properties(OSSL_LIB_CTX * libctx) (a0)
int RAND_set1_random_provider(OSSL_LIB_CTX * ctx, OSSL_PROVIDER * p) (a0,a1)
int X509_PURPOSE_get_unused_id(OSSL_LIB_CTX * libctx) (a0)
OSSL_AUTHORITY_ATTRIBUTE_ID_SYNTAX * d2i_OSSL_AUTHORITY_ATTRIBUTE_ID_SYNTAX(OSSL_AUTHORITY_ATTRIBUTE_ID_SYNTAX ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_OSSL_AUTHORITY_ATTRIBUTE_ID_SYNTAX(const OSSL_AUTHORITY_ATTRIBUTE_ID_SYNTAX * a, unsigned char ** out) (a0,a1)
void OSSL_AUTHORITY_ATTRIBUTE_ID_SYNTAX_free(OSSL_AUTHORITY_ATTRIBUTE_ID_SYNTAX * a) (a0)
OSSL_AUTHORITY_ATTRIBUTE_ID_SYNTAX * OSSL_AUTHORITY_ATTRIBUTE_ID_SYNTAX_new() ()
const ASN1_ITEM * OSSL_AUTHORITY_ATTRIBUTE_ID_SYNTAX_it() ()
OSSL_ROLE_SPEC_CERT_ID * d2i_OSSL_ROLE_SPEC_CERT_ID(OSSL_ROLE_SPEC_CERT_ID ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_OSSL_ROLE_SPEC_CERT_ID(const OSSL_ROLE_SPEC_CERT_ID * a, unsigned char ** out) (a0,a1)
void OSSL_ROLE_SPEC_CERT_ID_free(OSSL_ROLE_SPEC_CERT_ID * a) (a0)
OSSL_ROLE_SPEC_CERT_ID * OSSL_ROLE_SPEC_CERT_ID_new() ()
const ASN1_ITEM * OSSL_ROLE_SPEC_CERT_ID_it() ()
OSSL_ROLE_SPEC_CERT_ID_SYNTAX * d2i_OSSL_ROLE_SPEC_CERT_ID_SYNTAX(OSSL_ROLE_SPEC_CERT_ID_SYNTAX ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_OSSL_ROLE_SPEC_CERT_ID_SYNTAX(const OSSL_ROLE_SPEC_CERT_ID_SYNTAX * a, unsigned char ** out) (a0,a1)
void OSSL_ROLE_SPEC_CERT_ID_SYNTAX_free(OSSL_ROLE_SPEC_CERT_ID_SYNTAX * a) (a0)
OSSL_ROLE_SPEC_CERT_ID_SYNTAX * OSSL_ROLE_SPEC_CERT_ID_SYNTAX_new() ()
const ASN1_ITEM * OSSL_ROLE_SPEC_CERT_ID_SYNTAX_it() ()
OSSL_ATTRIBUTE_DESCRIPTOR * d2i_OSSL_ATTRIBUTE_DESCRIPTOR(OSSL_ATTRIBUTE_DESCRIPTOR ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_OSSL_ATTRIBUTE_DESCRIPTOR(const OSSL_ATTRIBUTE_DESCRIPTOR * a, unsigned char ** out) (a0,a1)
void OSSL_ATTRIBUTE_DESCRIPTOR_free(OSSL_ATTRIBUTE_DESCRIPTOR * a) (a0)
OSSL_ATTRIBUTE_DESCRIPTOR * OSSL_ATTRIBUTE_DESCRIPTOR_new() ()
const ASN1_ITEM * OSSL_ATTRIBUTE_DESCRIPTOR_it() ()
const ASN1_ITEM * OSSL_HASH_it() ()
const ASN1_ITEM * OSSL_INFO_SYNTAX_it() ()
const ASN1_ITEM * OSSL_INFO_SYNTAX_POINTER_it() ()
const ASN1_ITEM * OSSL_PRIVILEGE_POLICY_ID_it() ()
OSSL_HASH * d2i_OSSL_HASH(OSSL_HASH ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_OSSL_HASH(const OSSL_HASH * a, unsigned char ** out) (a0,a1)
void OSSL_HASH_free(OSSL_HASH * a) (a0)
OSSL_HASH * OSSL_HASH_new() ()
OSSL_INFO_SYNTAX * d2i_OSSL_INFO_SYNTAX(OSSL_INFO_SYNTAX ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_OSSL_INFO_SYNTAX(const OSSL_INFO_SYNTAX * a, unsigned char ** out) (a0,a1)
void OSSL_INFO_SYNTAX_free(OSSL_INFO_SYNTAX * a) (a0)
OSSL_INFO_SYNTAX * OSSL_INFO_SYNTAX_new() ()
OSSL_INFO_SYNTAX_POINTER * d2i_OSSL_INFO_SYNTAX_POINTER(OSSL_INFO_SYNTAX_POINTER ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_OSSL_INFO_SYNTAX_POINTER(const OSSL_INFO_SYNTAX_POINTER * a, unsigned char ** out) (a0,a1)
void OSSL_INFO_SYNTAX_POINTER_free(OSSL_INFO_SYNTAX_POINTER * a) (a0)
OSSL_INFO_SYNTAX_POINTER * OSSL_INFO_SYNTAX_POINTER_new() ()
OSSL_PRIVILEGE_POLICY_ID * d2i_OSSL_PRIVILEGE_POLICY_ID(OSSL_PRIVILEGE_POLICY_ID ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_OSSL_PRIVILEGE_POLICY_ID(const OSSL_PRIVILEGE_POLICY_ID * a, unsigned char ** out) (a0,a1)
void OSSL_PRIVILEGE_POLICY_ID_free(OSSL_PRIVILEGE_POLICY_ID * a) (a0)
OSSL_PRIVILEGE_POLICY_ID * OSSL_PRIVILEGE_POLICY_ID_new() ()
int OSSL_PARAM_print_to_bio(const OSSL_PARAM * params, BIO * bio, int print_values) (a0,a1,d0)
OSSL_DAY_TIME * d2i_OSSL_DAY_TIME(OSSL_DAY_TIME ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_OSSL_DAY_TIME(const OSSL_DAY_TIME * a, unsigned char ** out) (a0,a1)
void OSSL_DAY_TIME_free(OSSL_DAY_TIME * a) (a0)
OSSL_DAY_TIME * OSSL_DAY_TIME_new() ()
const ASN1_ITEM * OSSL_DAY_TIME_it() ()
OSSL_DAY_TIME_BAND * d2i_OSSL_DAY_TIME_BAND(OSSL_DAY_TIME_BAND ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_OSSL_DAY_TIME_BAND(const OSSL_DAY_TIME_BAND * a, unsigned char ** out) (a0,a1)
void OSSL_DAY_TIME_BAND_free(OSSL_DAY_TIME_BAND * a) (a0)
OSSL_DAY_TIME_BAND * OSSL_DAY_TIME_BAND_new() ()
const ASN1_ITEM * OSSL_DAY_TIME_BAND_it() ()
OSSL_TIME_SPEC_DAY * d2i_OSSL_TIME_SPEC_DAY(OSSL_TIME_SPEC_DAY ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_OSSL_TIME_SPEC_DAY(const OSSL_TIME_SPEC_DAY * a, unsigned char ** out) (a0,a1)
void OSSL_TIME_SPEC_DAY_free(OSSL_TIME_SPEC_DAY * a) (a0)
OSSL_TIME_SPEC_DAY * OSSL_TIME_SPEC_DAY_new() ()
const ASN1_ITEM * OSSL_TIME_SPEC_DAY_it() ()
OSSL_TIME_SPEC_WEEKS * d2i_OSSL_TIME_SPEC_WEEKS(OSSL_TIME_SPEC_WEEKS ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_OSSL_TIME_SPEC_WEEKS(const OSSL_TIME_SPEC_WEEKS * a, unsigned char ** out) (a0,a1)
void OSSL_TIME_SPEC_WEEKS_free(OSSL_TIME_SPEC_WEEKS * a) (a0)
OSSL_TIME_SPEC_WEEKS * OSSL_TIME_SPEC_WEEKS_new() ()
const ASN1_ITEM * OSSL_TIME_SPEC_WEEKS_it() ()
OSSL_TIME_SPEC_MONTH * d2i_OSSL_TIME_SPEC_MONTH(OSSL_TIME_SPEC_MONTH ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_OSSL_TIME_SPEC_MONTH(const OSSL_TIME_SPEC_MONTH * a, unsigned char ** out) (a0,a1)
void OSSL_TIME_SPEC_MONTH_free(OSSL_TIME_SPEC_MONTH * a) (a0)
OSSL_TIME_SPEC_MONTH * OSSL_TIME_SPEC_MONTH_new() ()
const ASN1_ITEM * OSSL_TIME_SPEC_MONTH_it() ()
OSSL_NAMED_DAY * d2i_OSSL_NAMED_DAY(OSSL_NAMED_DAY ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_OSSL_NAMED_DAY(const OSSL_NAMED_DAY * a, unsigned char ** out) (a0,a1)
void OSSL_NAMED_DAY_free(OSSL_NAMED_DAY * a) (a0)
OSSL_NAMED_DAY * OSSL_NAMED_DAY_new() ()
const ASN1_ITEM * OSSL_NAMED_DAY_it() ()
OSSL_TIME_SPEC_X_DAY_OF * d2i_OSSL_TIME_SPEC_X_DAY_OF(OSSL_TIME_SPEC_X_DAY_OF ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_OSSL_TIME_SPEC_X_DAY_OF(const OSSL_TIME_SPEC_X_DAY_OF * a, unsigned char ** out) (a0,a1)
void OSSL_TIME_SPEC_X_DAY_OF_free(OSSL_TIME_SPEC_X_DAY_OF * a) (a0)
OSSL_TIME_SPEC_X_DAY_OF * OSSL_TIME_SPEC_X_DAY_OF_new() ()
const ASN1_ITEM * OSSL_TIME_SPEC_X_DAY_OF_it() ()
OSSL_TIME_SPEC_ABSOLUTE * d2i_OSSL_TIME_SPEC_ABSOLUTE(OSSL_TIME_SPEC_ABSOLUTE ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_OSSL_TIME_SPEC_ABSOLUTE(const OSSL_TIME_SPEC_ABSOLUTE * a, unsigned char ** out) (a0,a1)
void OSSL_TIME_SPEC_ABSOLUTE_free(OSSL_TIME_SPEC_ABSOLUTE * a) (a0)
OSSL_TIME_SPEC_ABSOLUTE * OSSL_TIME_SPEC_ABSOLUTE_new() ()
const ASN1_ITEM * OSSL_TIME_SPEC_ABSOLUTE_it() ()
OSSL_TIME_SPEC_TIME * d2i_OSSL_TIME_SPEC_TIME(OSSL_TIME_SPEC_TIME ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_OSSL_TIME_SPEC_TIME(const OSSL_TIME_SPEC_TIME * a, unsigned char ** out) (a0,a1)
void OSSL_TIME_SPEC_TIME_free(OSSL_TIME_SPEC_TIME * a) (a0)
OSSL_TIME_SPEC_TIME * OSSL_TIME_SPEC_TIME_new() ()
const ASN1_ITEM * OSSL_TIME_SPEC_TIME_it() ()
OSSL_TIME_SPEC * d2i_OSSL_TIME_SPEC(OSSL_TIME_SPEC ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_OSSL_TIME_SPEC(const OSSL_TIME_SPEC * a, unsigned char ** out) (a0,a1)
void OSSL_TIME_SPEC_free(OSSL_TIME_SPEC * a) (a0)
OSSL_TIME_SPEC * OSSL_TIME_SPEC_new() ()
const ASN1_ITEM * OSSL_TIME_SPEC_it() ()
OSSL_TIME_PERIOD * d2i_OSSL_TIME_PERIOD(OSSL_TIME_PERIOD ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_OSSL_TIME_PERIOD(const OSSL_TIME_PERIOD * a, unsigned char ** out) (a0,a1)
void OSSL_TIME_PERIOD_free(OSSL_TIME_PERIOD * a) (a0)
OSSL_TIME_PERIOD * OSSL_TIME_PERIOD_new() ()
const ASN1_ITEM * OSSL_TIME_PERIOD_it() ()
int EVP_CIPHER_can_pipeline(const EVP_CIPHER * cipher, int enc) (a0,d0)
int EVP_CipherPipelineEncryptInit(EVP_CIPHER_CTX * ctx, const EVP_CIPHER * cipher, const unsigned char * key, size_t keylen, size_t numpipes, const unsigned char ** iv, size_t ivlen) (a0,a1,a2,d0,d1,a3,d2)
int EVP_CipherPipelineDecryptInit(EVP_CIPHER_CTX * ctx, const EVP_CIPHER * cipher, const unsigned char * key, size_t keylen, size_t numpipes, const unsigned char ** iv, size_t ivlen) (a0,a1,a2,d0,d1,a3,d2)
int EVP_CipherPipelineUpdate(EVP_CIPHER_CTX * ctx, unsigned char ** out, size_t * outl, const size_t * outsize, const unsigned char ** in, const size_t * inl) (a0,a1,a2,a3,d0,d1)
int EVP_CipherPipelineFinal(EVP_CIPHER_CTX * ctx, unsigned char ** outm, size_t * outl, const size_t * outsize) (a0,a1,a2,a3)
OSSL_ATTRIBUTE_TYPE_MAPPING * d2i_OSSL_ATTRIBUTE_TYPE_MAPPING(OSSL_ATTRIBUTE_TYPE_MAPPING ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_OSSL_ATTRIBUTE_TYPE_MAPPING(const OSSL_ATTRIBUTE_TYPE_MAPPING * a, unsigned char ** out) (a0,a1)
void OSSL_ATTRIBUTE_TYPE_MAPPING_free(OSSL_ATTRIBUTE_TYPE_MAPPING * a) (a0)
OSSL_ATTRIBUTE_TYPE_MAPPING * OSSL_ATTRIBUTE_TYPE_MAPPING_new() ()
const ASN1_ITEM * OSSL_ATTRIBUTE_TYPE_MAPPING_it() ()
OSSL_ATTRIBUTE_VALUE_MAPPING * d2i_OSSL_ATTRIBUTE_VALUE_MAPPING(OSSL_ATTRIBUTE_VALUE_MAPPING ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_OSSL_ATTRIBUTE_VALUE_MAPPING(const OSSL_ATTRIBUTE_VALUE_MAPPING * a, unsigned char ** out) (a0,a1)
void OSSL_ATTRIBUTE_VALUE_MAPPING_free(OSSL_ATTRIBUTE_VALUE_MAPPING * a) (a0)
OSSL_ATTRIBUTE_VALUE_MAPPING * OSSL_ATTRIBUTE_VALUE_MAPPING_new() ()
const ASN1_ITEM * OSSL_ATTRIBUTE_VALUE_MAPPING_it() ()
OSSL_ATTRIBUTE_MAPPING * d2i_OSSL_ATTRIBUTE_MAPPING(OSSL_ATTRIBUTE_MAPPING ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_OSSL_ATTRIBUTE_MAPPING(const OSSL_ATTRIBUTE_MAPPING * a, unsigned char ** out) (a0,a1)
void OSSL_ATTRIBUTE_MAPPING_free(OSSL_ATTRIBUTE_MAPPING * a) (a0)
OSSL_ATTRIBUTE_MAPPING * OSSL_ATTRIBUTE_MAPPING_new() ()
const ASN1_ITEM * OSSL_ATTRIBUTE_MAPPING_it() ()
OSSL_ATTRIBUTE_MAPPINGS * d2i_OSSL_ATTRIBUTE_MAPPINGS(OSSL_ATTRIBUTE_MAPPINGS ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_OSSL_ATTRIBUTE_MAPPINGS(const OSSL_ATTRIBUTE_MAPPINGS * a, unsigned char ** out) (a0,a1)
void OSSL_ATTRIBUTE_MAPPINGS_free(OSSL_ATTRIBUTE_MAPPINGS * a) (a0)
OSSL_ATTRIBUTE_MAPPINGS * OSSL_ATTRIBUTE_MAPPINGS_new() ()
const ASN1_ITEM * OSSL_ATTRIBUTE_MAPPINGS_it() ()
OSSL_ATAV * d2i_OSSL_ATAV(OSSL_ATAV ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_OSSL_ATAV(const OSSL_ATAV * a, unsigned char ** out) (a0,a1)
void OSSL_ATAV_free(OSSL_ATAV * a) (a0)
OSSL_ATAV * OSSL_ATAV_new() ()
const ASN1_ITEM * OSSL_ATAV_it() ()
OSSL_ALLOWED_ATTRIBUTES_CHOICE * d2i_OSSL_ALLOWED_ATTRIBUTES_CHOICE(OSSL_ALLOWED_ATTRIBUTES_CHOICE ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_OSSL_ALLOWED_ATTRIBUTES_CHOICE(const OSSL_ALLOWED_ATTRIBUTES_CHOICE * a, unsigned char ** out) (a0,a1)
void OSSL_ALLOWED_ATTRIBUTES_CHOICE_free(OSSL_ALLOWED_ATTRIBUTES_CHOICE * a) (a0)
OSSL_ALLOWED_ATTRIBUTES_CHOICE * OSSL_ALLOWED_ATTRIBUTES_CHOICE_new() ()
const ASN1_ITEM * OSSL_ALLOWED_ATTRIBUTES_CHOICE_it() ()
OSSL_ALLOWED_ATTRIBUTES_ITEM * d2i_OSSL_ALLOWED_ATTRIBUTES_ITEM(OSSL_ALLOWED_ATTRIBUTES_ITEM ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_OSSL_ALLOWED_ATTRIBUTES_ITEM(const OSSL_ALLOWED_ATTRIBUTES_ITEM * a, unsigned char ** out) (a0,a1)
void OSSL_ALLOWED_ATTRIBUTES_ITEM_free(OSSL_ALLOWED_ATTRIBUTES_ITEM * a) (a0)
OSSL_ALLOWED_ATTRIBUTES_ITEM * OSSL_ALLOWED_ATTRIBUTES_ITEM_new() ()
const ASN1_ITEM * OSSL_ALLOWED_ATTRIBUTES_ITEM_it() ()
OSSL_ALLOWED_ATTRIBUTES_SYNTAX * d2i_OSSL_ALLOWED_ATTRIBUTES_SYNTAX(OSSL_ALLOWED_ATTRIBUTES_SYNTAX ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_OSSL_ALLOWED_ATTRIBUTES_SYNTAX(const OSSL_ALLOWED_ATTRIBUTES_SYNTAX * a, unsigned char ** out) (a0,a1)
void OSSL_ALLOWED_ATTRIBUTES_SYNTAX_free(OSSL_ALLOWED_ATTRIBUTES_SYNTAX * a) (a0)
OSSL_ALLOWED_ATTRIBUTES_SYNTAX * OSSL_ALLOWED_ATTRIBUTES_SYNTAX_new() ()
const ASN1_ITEM * OSSL_ALLOWED_ATTRIBUTES_SYNTAX_it() ()
int EVP_CipherInit_SKEY(EVP_CIPHER_CTX * ctx, const EVP_CIPHER * cipher, EVP_SKEY * skey, const unsigned char * iv, size_t iv_len, int enc, const OSSL_PARAM * params) (a0,a1,a2,a3,d0,d1,d2)
EVP_SKEY * EVP_SKEY_import(OSSL_LIB_CTX * libctx, const char * skeymgmtname, const char * propquery, int selection, const OSSL_PARAM * params) (a0,a1,a2,d0,a3)
EVP_SKEY * EVP_SKEY_generate(OSSL_LIB_CTX * libctx, const char * skeymgmtname, const char * propquery, const OSSL_PARAM * params) (a0,a1,a2,a3)
EVP_SKEY * EVP_SKEY_import_raw_key(OSSL_LIB_CTX * libctx, const char * skeymgmtname, unsigned char * key, size_t keylen, const char * propquery) (a0,a1,a2,d0,a3)
int EVP_SKEY_get0_raw_key(const EVP_SKEY * skey, const unsigned char ** key, size_t * len) (a0,a1,a2)
int EVP_SKEY_export(const EVP_SKEY * skey, int selection, OSSL_CALLBACK * export_cb, void * export_cbarg) (a0,d0,a1,a2)
int EVP_SKEY_up_ref(EVP_SKEY * skey) (a0)
void EVP_SKEY_free(EVP_SKEY * skey) (a0)
EVP_SKEYMGMT * EVP_SKEYMGMT_fetch(OSSL_LIB_CTX * ctx, const char * algorithm, const char * properties) (a0,a1,a2)
int EVP_SKEYMGMT_up_ref(EVP_SKEYMGMT * keymgmt) (a0)
void EVP_SKEYMGMT_free(EVP_SKEYMGMT * keymgmt) (a0)
const OSSL_PROVIDER * EVP_SKEYMGMT_get0_provider(const EVP_SKEYMGMT * keymgmt) (a0)
const char * EVP_SKEYMGMT_get0_name(const EVP_SKEYMGMT * keymgmt) (a0)
const char * EVP_SKEYMGMT_get0_description(const EVP_SKEYMGMT * keymgmt) (a0)
int EVP_SKEYMGMT_is_a(const EVP_SKEYMGMT * keymgmt, const char * name) (a0,a1)
void EVP_SKEYMGMT_do_all_provided(OSSL_LIB_CTX * libctx, void (*fn)(EVP_SKEYMGMT *keymgmt, void *arg), void * arg) (a0,a1,a2)
int EVP_SKEYMGMT_names_do_all(const EVP_SKEYMGMT * keymgmt, void (*fn)(const char *name, void *data), void * data) (a0,a1,a2)
int EVP_MAC_init_SKEY(EVP_MAC_CTX * ctx, EVP_SKEY * skey, const OSSL_PARAM * params) (a0,a1,a2)
const char * EVP_SKEY_get0_key_id(const EVP_SKEY * skey) (a0)
const char * EVP_SKEY_get0_skeymgmt_name(const EVP_SKEY * skey) (a0)
const char * EVP_SKEY_get0_provider_name(const EVP_SKEY * skey) (a0)
const OSSL_PARAM * EVP_SKEYMGMT_get0_gen_settable_params(const EVP_SKEYMGMT * skeymgmt) (a0)
const OSSL_PARAM * EVP_SKEYMGMT_get0_imp_settable_params(const EVP_SKEYMGMT * skeymgmt) (a0)
int EVP_SKEY_is_a(const EVP_SKEY * skey, const char * name) (a0,a1)
EVP_SKEY * EVP_SKEY_to_provider(EVP_SKEY * skey, OSSL_LIB_CTX * libctx, OSSL_PROVIDER * prov, const char * propquery) (a0,a1,a2,a3)
int OSSL_PROVIDER_add_conf_parameter(OSSL_PROVIDER * prov, const char * name, const char * value) (a0,a1,a2)
int OSSL_PROVIDER_get_conf_parameters(const OSSL_PROVIDER * prov, OSSL_PARAM * params) (a0,a1)
int OSSL_PROVIDER_conf_get_bool(const OSSL_PROVIDER * prov, const char * name, int defval) (a0,a1,d0)
OSSL_AA_DIST_POINT * d2i_OSSL_AA_DIST_POINT(OSSL_AA_DIST_POINT ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_OSSL_AA_DIST_POINT(const OSSL_AA_DIST_POINT * a, unsigned char ** out) (a0,a1)
void OSSL_AA_DIST_POINT_free(OSSL_AA_DIST_POINT * a) (a0)
OSSL_AA_DIST_POINT * OSSL_AA_DIST_POINT_new() ()
const ASN1_ITEM * OSSL_AA_DIST_POINT_it() ()
int PEM_ASN1_write_bio_ctx(OSSL_i2d_of_void_ctx * i2d, void * vctx, const char * name, BIO * bp, const void * x, const EVP_CIPHER * enc, const unsigned char * kstr, int klen, pem_password_cb * cb, void * u) (a0,a1,a2,a3,d0,d1,d2,d3,d4,d5)
int EVP_PKEY_get_security_category(const EVP_PKEY * pkey) (a0)
void X509_STORE_CTX_set_ocsp_resp(X509_STORE_CTX * ctx, STACK_OF(OCSP_RESPONSE) * sk) (a0,a1)
OPENSSL_STACK * OPENSSL_sk_set_thunks(OPENSSL_STACK * st, OPENSSL_sk_freefunc_thunk f_thunk) (a0,d0)
int i2d_PKCS8PrivateKey(const EVP_PKEY * a, unsigned char ** pp) (a0,a1)
int OSSL_PARAM_set_octet_string_or_ptr(OSSL_PARAM * p, const void * val, size_t len) (a0,a1,d0)
const OSSL_PARAM * OSSL_STORE_LOADER_settable_ctx_params(const OSSL_STORE_LOADER * loader) (a0)
const X509_ALGOR * X509_CRL_get0_tbs_sigalg(const X509_CRL * crl) (a0)
int CMS_RecipientInfo_kemri_cert_cmp(CMS_RecipientInfo * ri, X509 * cert) (a0,a1)
int CMS_RecipientInfo_kemri_set0_pkey(CMS_RecipientInfo * ri, EVP_PKEY * pk) (a0,a1)
EVP_CIPHER_CTX * CMS_RecipientInfo_kemri_get0_ctx(CMS_RecipientInfo * ri) (a0)
X509_ALGOR * CMS_RecipientInfo_kemri_get0_kdf_alg(CMS_RecipientInfo * ri) (a0)
int CMS_RecipientInfo_kemri_set_ukm(CMS_RecipientInfo * ri, const unsigned char * ukm, int ukmLength) (a0,a1,d0)
EVP_SKEY * EVP_PKEY_derive_SKEY(EVP_PKEY_CTX * ctx, EVP_SKEYMGMT * mgmt, const char * key_type, const char * propquery, size_t keylen, const OSSL_PARAM * params) (a0,a1,a2,a3,d0,d1)
int EVP_KDF_CTX_set_SKEY(EVP_KDF_CTX * ctx, EVP_SKEY * key, const char * paramname) (a0,a1,a2)
EVP_SKEY * EVP_KDF_derive_SKEY(EVP_KDF_CTX * ctx, EVP_SKEYMGMT * mgmt, const char * key_type, const char * propquery, size_t keylen, const OSSL_PARAM * params) (a0,a1,a2,a3,d0,d1)
EVP_SKEY * EVP_SKEY_import_SKEYMGMT(OSSL_LIB_CTX * libctx, EVP_SKEYMGMT * skeymgmt, int selection, const OSSL_PARAM * params) (a0,a1,d0,a2)
void * CRYPTO_malloc_array(size_t num, size_t size, const char * file, int line) (d0,d1,a0,d2)
void * CRYPTO_calloc(size_t num, size_t size, const char * file, int line) (d0,d1,a0,d2)
void * CRYPTO_aligned_alloc_array(size_t num, size_t size, size_t align, void ** freeptr, const char * file, int line) (d0,d1,d2,a0,a1,d3)
void * CRYPTO_realloc_array(void * addr, size_t num, size_t size, const char * file, int line) (a0,d0,d1,a1,d2)
void * CRYPTO_clear_realloc_array(void * addr, size_t old_num, size_t num, size_t size, const char * file, int line) (a0,d0,d1,d2,a1,d3)
void * CRYPTO_secure_malloc_array(size_t num, size_t size, const char * file, int line) (d0,d1,a0,d2)
void * CRYPTO_secure_calloc(size_t num, size_t size, const char * file, int line) (d0,d1,a0,d2)
==end
