==id $Id$
==base _AmiSSLBase
==basetype struct Library *
==libname amissl.library
==include <exec/types.h>
==include <dos/dos.h>
==include <amissl/amissl.h>
==bias 30
==private
void InternalInitAmiSSL(void * amisslinit) (a0)
==public
long InitAmiSSLA(struct TagItem * tagList) (a0)
==varargs
long InitAmiSSL(Tag tag, ...) (a0)
long CleanupAmiSSLA(struct TagItem * tagList) (a0)
==varargs
long CleanupAmiSSL(Tag tag, ...) (a0)
==reserve 9
ASN1_TYPE * ASN1_TYPE_new() ()
void ASN1_TYPE_free(ASN1_TYPE * a) (a0)
ASN1_TYPE * d2i_ASN1_TYPE(ASN1_TYPE ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_ASN1_TYPE(const ASN1_TYPE * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * ASN1_ANY_it() ()
int ASN1_TYPE_get(const ASN1_TYPE * a) (a0)
void ASN1_TYPE_set(ASN1_TYPE * a, int type, void * value) (a0,d0,a1)
ASN1_OBJECT * ASN1_OBJECT_new() ()
void ASN1_OBJECT_free(ASN1_OBJECT * a) (a0)
int i2d_ASN1_OBJECT(const ASN1_OBJECT * a, unsigned char ** pp) (a0,a1)
==reserve 1
ASN1_OBJECT * d2i_ASN1_OBJECT(ASN1_OBJECT ** a, const unsigned char ** pp, long length) (a0,a1,d0)
const ASN1_ITEM * ASN1_OBJECT_it() ()
ASN1_STRING * ASN1_STRING_new() ()
void ASN1_STRING_free(ASN1_STRING * a) (a0)
ASN1_STRING * ASN1_STRING_dup(const ASN1_STRING * a) (a0)
ASN1_STRING * ASN1_STRING_type_new(int type) (d0)
int ASN1_STRING_cmp(const ASN1_STRING * a, const ASN1_STRING * b) (a0,a1)
int ASN1_STRING_set(ASN1_STRING * str, const void * data, int len) (a0,a1,d0)
int ASN1_STRING_length(const ASN1_STRING * x) (a0)
void ASN1_STRING_length_set(ASN1_STRING * x, int n) (a0,d0)
int ASN1_STRING_type(const ASN1_STRING * x) (a0)
unsigned char * ASN1_STRING_data(ASN1_STRING * x) (a0)
ASN1_BIT_STRING * ASN1_BIT_STRING_new() ()
void ASN1_BIT_STRING_free(ASN1_BIT_STRING * x) (a0)
ASN1_BIT_STRING * d2i_ASN1_BIT_STRING(ASN1_BIT_STRING ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_ASN1_BIT_STRING(const ASN1_BIT_STRING * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * ASN1_BIT_STRING_it() ()
==reserve 2
int ASN1_BIT_STRING_set(ASN1_BIT_STRING * a, unsigned char * d, int length) (a0,a1,d0)
int ASN1_BIT_STRING_set_bit(ASN1_BIT_STRING * a, int n, int value) (a0,d0,d1)
int ASN1_BIT_STRING_get_bit(const ASN1_BIT_STRING * a, int n) (a0,d0)
int ASN1_BIT_STRING_name_print(BIO * out, ASN1_BIT_STRING * bs, BIT_STRING_BITNAME * tbl, int indent) (a0,a1,a2,d0)
int ASN1_BIT_STRING_num_asc(const char * name, BIT_STRING_BITNAME * tbl) (a0,a1)
int ASN1_BIT_STRING_set_asc(ASN1_BIT_STRING * bs, const char * name, int value, BIT_STRING_BITNAME * tbl) (a0,a1,d0,a2)
==reserve 2
ASN1_INTEGER * ASN1_INTEGER_new() ()
void ASN1_INTEGER_free(ASN1_INTEGER * x) (a0)
ASN1_INTEGER * d2i_ASN1_INTEGER(ASN1_INTEGER ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_ASN1_INTEGER(const ASN1_INTEGER * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * ASN1_INTEGER_it() ()
==reserve 2
ASN1_INTEGER * d2i_ASN1_UINTEGER(ASN1_INTEGER ** a, const unsigned char ** pp, long length) (a0,a1,d0)
ASN1_INTEGER * ASN1_INTEGER_dup(const ASN1_INTEGER * x) (a0)
int ASN1_INTEGER_cmp(const ASN1_INTEGER * x, const ASN1_INTEGER * y) (a0,a1)
ASN1_ENUMERATED * ASN1_ENUMERATED_new() ()
void ASN1_ENUMERATED_free(ASN1_ENUMERATED * x) (a0)
ASN1_ENUMERATED * d2i_ASN1_ENUMERATED(ASN1_ENUMERATED ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_ASN1_ENUMERATED(const ASN1_ENUMERATED * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * ASN1_ENUMERATED_it() ()
int ASN1_UTCTIME_check(const ASN1_UTCTIME * a) (a0)
ASN1_UTCTIME * ASN1_UTCTIME_set(ASN1_UTCTIME * s, time_t t) (a0,d0)
int ASN1_UTCTIME_set_string(ASN1_UTCTIME * s, const char * str) (a0,a1)
int ASN1_UTCTIME_cmp_time_t(const ASN1_UTCTIME * s, time_t t) (a0,d0)
int ASN1_GENERALIZEDTIME_check(const ASN1_GENERALIZEDTIME * a) (a0)
ASN1_GENERALIZEDTIME * ASN1_GENERALIZEDTIME_set(ASN1_GENERALIZEDTIME * s, time_t t) (a0,d0)
int ASN1_GENERALIZEDTIME_set_string(ASN1_GENERALIZEDTIME * s, const char * str) (a0,a1)
ASN1_OCTET_STRING * ASN1_OCTET_STRING_new() ()
void ASN1_OCTET_STRING_free(ASN1_OCTET_STRING * x) (a0)
ASN1_OCTET_STRING * d2i_ASN1_OCTET_STRING(ASN1_OCTET_STRING ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_ASN1_OCTET_STRING(const ASN1_OCTET_STRING * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * ASN1_OCTET_STRING_it() ()
ASN1_OCTET_STRING * ASN1_OCTET_STRING_dup(const ASN1_OCTET_STRING * a) (a0)
int ASN1_OCTET_STRING_cmp(const ASN1_OCTET_STRING * a, const ASN1_OCTET_STRING * b) (a0,a1)
int ASN1_OCTET_STRING_set(ASN1_OCTET_STRING * str, const unsigned char * data, int len) (a0,a1,d0)
ASN1_VISIBLESTRING * ASN1_VISIBLESTRING_new() ()
void ASN1_VISIBLESTRING_free(ASN1_VISIBLESTRING * a) (a0)
ASN1_VISIBLESTRING * d2i_ASN1_VISIBLESTRING(ASN1_VISIBLESTRING ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_ASN1_VISIBLESTRING(const ASN1_VISIBLESTRING * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * ASN1_VISIBLESTRING_it() ()
ASN1_UNIVERSALSTRING * ASN1_UNIVERSALSTRING_new() ()
void ASN1_UNIVERSALSTRING_free(ASN1_UNIVERSALSTRING * a) (a0)
ASN1_UNIVERSALSTRING * d2i_ASN1_UNIVERSALSTRING(ASN1_UNIVERSALSTRING ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_ASN1_UNIVERSALSTRING(const ASN1_UNIVERSALSTRING * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * ASN1_UNIVERSALSTRING_it() ()
ASN1_UTF8STRING * ASN1_UTF8STRING_new() ()
void ASN1_UTF8STRING_free(ASN1_UTF8STRING * x) (a0)
ASN1_UTF8STRING * d2i_ASN1_UTF8STRING(ASN1_UTF8STRING ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_ASN1_UTF8STRING(const ASN1_UTF8STRING * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * ASN1_UTF8STRING_it() ()
ASN1_NULL * ASN1_NULL_new() ()
void ASN1_NULL_free(ASN1_NULL * a) (a0)
ASN1_NULL * d2i_ASN1_NULL(ASN1_NULL ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_ASN1_NULL(const ASN1_NULL * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * ASN1_NULL_it() ()
ASN1_BMPSTRING * ASN1_BMPSTRING_new() ()
void ASN1_BMPSTRING_free(ASN1_BMPSTRING * a) (a0)
ASN1_BMPSTRING * d2i_ASN1_BMPSTRING(ASN1_BMPSTRING ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_ASN1_BMPSTRING(const ASN1_BMPSTRING * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * ASN1_BMPSTRING_it() ()
int UTF8_getc(const unsigned char * str, int len, unsigned long * val) (a0,d0,a1)
int UTF8_putc(unsigned char * str, int len, unsigned long value) (a0,d0,d1)
ASN1_STRING * ASN1_PRINTABLE_new() ()
void ASN1_PRINTABLE_free(ASN1_STRING * a) (a0)
ASN1_STRING * d2i_ASN1_PRINTABLE(ASN1_STRING ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_ASN1_PRINTABLE(const ASN1_STRING * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * ASN1_PRINTABLE_it() ()
ASN1_STRING * DIRECTORYSTRING_new() ()
void DIRECTORYSTRING_free(ASN1_STRING * a) (a0)
ASN1_STRING * d2i_DIRECTORYSTRING(ASN1_STRING ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_DIRECTORYSTRING(const ASN1_STRING * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * DIRECTORYSTRING_it() ()
ASN1_STRING * DISPLAYTEXT_new() ()
void DISPLAYTEXT_free(ASN1_STRING * a) (a0)
ASN1_STRING * d2i_DISPLAYTEXT(ASN1_STRING ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_DISPLAYTEXT(const ASN1_STRING * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * DISPLAYTEXT_it() ()
ASN1_PRINTABLESTRING * ASN1_PRINTABLESTRING_new() ()
void ASN1_PRINTABLESTRING_free(ASN1_PRINTABLESTRING * a) (a0)
ASN1_PRINTABLESTRING * d2i_ASN1_PRINTABLESTRING(ASN1_PRINTABLESTRING ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_ASN1_PRINTABLESTRING(const ASN1_PRINTABLESTRING * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * ASN1_PRINTABLESTRING_it() ()
ASN1_T61STRING * ASN1_T61STRING_new() ()
void ASN1_T61STRING_free(ASN1_T61STRING * a) (a0)
ASN1_T61STRING * d2i_ASN1_T61STRING(ASN1_T61STRING ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_ASN1_T61STRING(const ASN1_T61STRING * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * ASN1_T61STRING_it() ()
ASN1_IA5STRING * ASN1_IA5STRING_new() ()
void ASN1_IA5STRING_free(ASN1_IA5STRING * a) (a0)
ASN1_IA5STRING * d2i_ASN1_IA5STRING(ASN1_IA5STRING ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_ASN1_IA5STRING(const ASN1_IA5STRING * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * ASN1_IA5STRING_it() ()
ASN1_GENERALSTRING * ASN1_GENERALSTRING_new() ()
void ASN1_GENERALSTRING_free(ASN1_GENERALSTRING * a) (a0)
ASN1_GENERALSTRING * d2i_ASN1_GENERALSTRING(ASN1_GENERALSTRING ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_ASN1_GENERALSTRING(const ASN1_GENERALSTRING * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * ASN1_GENERALSTRING_it() ()
ASN1_UTCTIME * ASN1_UTCTIME_new() ()
void ASN1_UTCTIME_free(ASN1_UTCTIME * a) (a0)
ASN1_UTCTIME * d2i_ASN1_UTCTIME(ASN1_UTCTIME ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_ASN1_UTCTIME(const ASN1_UTCTIME * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * ASN1_UTCTIME_it() ()
ASN1_GENERALIZEDTIME * ASN1_GENERALIZEDTIME_new() ()
void ASN1_GENERALIZEDTIME_free(ASN1_GENERALIZEDTIME * x) (a0)
ASN1_GENERALIZEDTIME * d2i_ASN1_GENERALIZEDTIME(ASN1_GENERALIZEDTIME ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_ASN1_GENERALIZEDTIME(const ASN1_GENERALIZEDTIME * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * ASN1_GENERALIZEDTIME_it() ()
ASN1_TIME * ASN1_TIME_new() ()
void ASN1_TIME_free(ASN1_TIME * a) (a0)
ASN1_TIME * d2i_ASN1_TIME(ASN1_TIME ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_ASN1_TIME(const ASN1_TIME * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * ASN1_TIME_it() ()
ASN1_TIME * ASN1_TIME_set(ASN1_TIME * s, time_t t) (a0,d0)
int ASN1_TIME_check(const ASN1_TIME * t) (a0)
ASN1_GENERALIZEDTIME * ASN1_TIME_to_generalizedtime(const ASN1_TIME * t, ASN1_GENERALIZEDTIME ** out) (a0,a1)
==reserve 2
int i2a_ASN1_INTEGER(BIO * bp, const ASN1_INTEGER * a) (a0,a1)
int a2i_ASN1_INTEGER(BIO * bp, ASN1_INTEGER * bs, char * buf, int size) (a0,a1,a2,d0)
int i2a_ASN1_ENUMERATED(BIO * bp, const ASN1_ENUMERATED * a) (a0,a1)
int a2i_ASN1_ENUMERATED(BIO * bp, ASN1_ENUMERATED * bs, char * buf, int size) (a0,a1,a2,d0)
int i2a_ASN1_OBJECT(BIO * bp, const ASN1_OBJECT * a) (a0,a1)
int a2i_ASN1_STRING(BIO * bp, ASN1_STRING * bs, char * buf, int size) (a0,a1,a2,d0)
int i2a_ASN1_STRING(BIO * bp, const ASN1_STRING * a, int type) (a0,a1,d0)
int i2t_ASN1_OBJECT(char * buf, int buf_len, const ASN1_OBJECT * a) (a0,d0,a1)
int a2d_ASN1_OBJECT(unsigned char * out, int olen, const char * buf, int num) (a0,d0,a1,d1)
ASN1_OBJECT * ASN1_OBJECT_create(int nid, unsigned char * data, int len, const char * sn, const char * ln) (d0,a0,d1,a1,a2)
int ASN1_INTEGER_set(ASN1_INTEGER * a, long v) (a0,d0)
long ASN1_INTEGER_get(const ASN1_INTEGER * a) (a0)
ASN1_INTEGER * BN_to_ASN1_INTEGER(const BIGNUM * bn, ASN1_INTEGER * ai) (a0,a1)
BIGNUM * ASN1_INTEGER_to_BN(const ASN1_INTEGER * ai, BIGNUM * bn) (a0,a1)
int ASN1_ENUMERATED_set(ASN1_ENUMERATED * a, long v) (a0,d0)
long ASN1_ENUMERATED_get(const ASN1_ENUMERATED * a) (a0)
ASN1_ENUMERATED * BN_to_ASN1_ENUMERATED(const BIGNUM * bn, ASN1_ENUMERATED * ai) (a0,a1)
BIGNUM * ASN1_ENUMERATED_to_BN(const ASN1_ENUMERATED * ai, BIGNUM * bn) (a0,a1)
int ASN1_PRINTABLE_type(const unsigned char * s, int max) (a0,d0)
==reserve 2
unsigned long ASN1_tag2bit(int tag) (d0)
==reserve 2
int ASN1_get_object(const unsigned char ** pp, long * plength, int * ptag, int * pclass, long omax) (a0,a1,a2,a3,d0)
int ASN1_check_infinite_end(unsigned char ** p, long len) (a0,d0)
void ASN1_put_object(unsigned char ** pp, int constructed, int length, int tag, int xclass) (a0,d0,d1,d2,d3)
int ASN1_object_size(int constructed, int length, int tag) (d0,d1,d2)
void * ASN1_dup(i2d_of_void * i2d, d2i_of_void * d2i, const void * x) (a0,a1,a2)
void * ASN1_item_dup(const ASN1_ITEM * it, const void * x) (a0,a1)
int ASN1_STRING_to_UTF8(unsigned char ** out, const ASN1_STRING * in) (a0,a1)
void * ASN1_d2i_bio(void * (*xnew)(void), d2i_of_void * d2i, BIO * in, void ** x) (a0,a1,a2,a3)
void * ASN1_item_d2i_bio(const ASN1_ITEM * it, BIO * in, void * x) (a0,a1,a2)
int ASN1_i2d_bio(i2d_of_void * i2d, BIO * out, const void * x) (a0,a1,a2)
int ASN1_item_i2d_bio(const ASN1_ITEM * it, BIO * out, const void * x) (a0,a1,a2)
int ASN1_UTCTIME_print(BIO * fp, const ASN1_UTCTIME * a) (a0,a1)
int ASN1_GENERALIZEDTIME_print(BIO * fp, const ASN1_GENERALIZEDTIME * a) (a0,a1)
int ASN1_TIME_print(BIO * fp, const ASN1_TIME * a) (a0,a1)
int ASN1_STRING_print(BIO * bp, const ASN1_STRING * v) (a0,a1)
int ASN1_STRING_print_ex(BIO * out, const ASN1_STRING * str, unsigned long flags) (a0,a1,d0)
int ASN1_parse(BIO * bp, const unsigned char * pp, long len, int indent) (a0,a1,d0,d1)
int ASN1_parse_dump(BIO * bp, const unsigned char * pp, long len, int indent, int dump) (a0,a1,d0,d1,d2)
const char * ASN1_tag2str(int tag) (d0)
==reserve 4
int ASN1_UNIVERSALSTRING_to_string(ASN1_UNIVERSALSTRING * s) (a0)
==reserve 4
int ASN1_TYPE_set_octetstring(ASN1_TYPE * a, unsigned char * data, int len) (a0,a1,d0)
int ASN1_TYPE_get_octetstring(const ASN1_TYPE * a, unsigned char * data, int max_len) (a0,a1,d0)
int ASN1_TYPE_set_int_octetstring(ASN1_TYPE * a, long num, unsigned char * data, int len) (a0,d0,a1,d1)
int ASN1_TYPE_get_int_octetstring(const ASN1_TYPE * a, long * num, unsigned char * data, int max_len) (a0,a1,a2,d0)
==reserve 3
void * ASN1_item_unpack(const ASN1_STRING * oct, const ASN1_ITEM * it) (a0,a1)
==reserve 1
ASN1_STRING * ASN1_item_pack(void * obj, const ASN1_ITEM * it, ASN1_OCTET_STRING ** oct) (a0,a1,a2)
void ASN1_STRING_set_default_mask(unsigned long mask) (d0)
int ASN1_STRING_set_default_mask_asc(const char * p) (a0)
unsigned long ASN1_STRING_get_default_mask() ()
int ASN1_mbstring_copy(ASN1_STRING ** out, const unsigned char * in, int len, int inform, unsigned long mask) (a0,a1,d0,d1,d2)
int ASN1_mbstring_ncopy(ASN1_STRING ** out, const unsigned char * in, int len, int inform, unsigned long mask, long minsize, long maxsize) (a0,a1,d0,d1,d2,d3,d4)
ASN1_STRING * ASN1_STRING_set_by_NID(ASN1_STRING ** out, const unsigned char * in, int inlen, int inform, int nid) (a0,a1,d0,d1,d2)
ASN1_STRING_TABLE * ASN1_STRING_TABLE_get(int nid) (d0)
int ASN1_STRING_TABLE_add(int a, long b, long c, unsigned long d, unsigned long e) (d0,d1,d2,d3,d4)
void ASN1_STRING_TABLE_cleanup() ()
ASN1_VALUE * ASN1_item_new(const ASN1_ITEM * it) (a0)
void ASN1_item_free(ASN1_VALUE * val, const ASN1_ITEM * it) (a0,a1)
ASN1_VALUE * ASN1_item_d2i(ASN1_VALUE ** val, const unsigned char ** in, long len, const ASN1_ITEM * it) (a0,a1,d0,a2)
int ASN1_item_i2d(const ASN1_VALUE * val, unsigned char ** out, const ASN1_ITEM * it) (a0,a1,a2)
void ASN1_add_oid_module() ()
int ERR_load_ASN1_strings() ()
==reserve 2
const ASN1_ITEM * ASN1_BOOLEAN_it() ()
const ASN1_ITEM * ASN1_TBOOLEAN_it() ()
const ASN1_ITEM * ASN1_FBOOLEAN_it() ()
const ASN1_ITEM * ASN1_SEQUENCE_it() ()
const ASN1_ITEM * CBIGNUM_it() ()
const ASN1_ITEM * BIGNUM_it() ()
const ASN1_ITEM * LONG_it() ()
const ASN1_ITEM * ZLONG_it() ()
int ASN1_item_ex_new(ASN1_VALUE ** pval, const ASN1_ITEM * it) (a0,a1)
void ASN1_item_ex_free(ASN1_VALUE ** pval, const ASN1_ITEM * it) (a0,a1)
==reserve 4
int ASN1_item_ex_d2i(ASN1_VALUE ** pval, const unsigned char ** in, long len, const ASN1_ITEM * it, int tag, int aclass, char opt, ASN1_TLC * ctx) (a0,a1,d0,a2,d1,d2,d3,a3)
int ASN1_item_ex_i2d(const ASN1_VALUE ** pval, unsigned char ** out, const ASN1_ITEM * it, int tag, int aclass) (a0,a1,a2,d0,d1)
==reserve 13
size_t BIO_ctrl_pending(BIO * b) (a0)
size_t BIO_ctrl_wpending(BIO * b) (a0)
size_t BIO_ctrl_get_write_guarantee(BIO * b) (a0)
size_t BIO_ctrl_get_read_request(BIO * b) (a0)
int BIO_ctrl_reset_read_request(BIO * b) (a0)
int BIO_set_ex_data(BIO * bio, int idx, void * data) (a0,d0,a1)
void * BIO_get_ex_data(const BIO * bio, int idx) (a0,d0)
int OBSOLETE_BIO_get_ex_new_index(long argl, void * argp, CRYPTO_EX_new * new_func, CRYPTO_EX_dup * dup_func, CRYPTO_EX_free * free_func) (d0,a0,a1,a2,a3)
uint64_t BIO_number_read(BIO * bio) (a0)
uint64_t BIO_number_written(BIO * bio) (a0)
const BIO_METHOD * BIO_s_file() ()
BIO * BIO_new_file(const char * filename, const char * mode) (a0,a1)
BIO * BIO_new_fp_amiga(BPTR stream, int close_flag) (a0,d0)
BIO * BIO_new(const BIO_METHOD * type) (a0)
==reserve 1
int BIO_free(BIO * a) (a0)
void BIO_vfree(BIO * a) (a0)
int BIO_read(BIO * b, void * data, int dlen) (a0,a1,d0)
int BIO_gets(BIO * bp, char * buf, int size) (a0,a1,d0)
int BIO_write(BIO * b, const void * data, int dlen) (a0,a1,d0)
int BIO_puts(BIO * bp, const char * buf) (a0,a1)
int BIO_indent(BIO * b, int indent, int max) (a0,d0,d1)
long BIO_ctrl(BIO * bp, int cmd, long larg, void * parg) (a0,d0,d1,a1)
long BIO_callback_ctrl(BIO * b, int cmd, BIO_info_cb * fp) (a0,d0,a1)
void * BIO_ptr_ctrl(BIO * bp, int cmd, long larg) (a0,d0,d1)
long BIO_int_ctrl(BIO * bp, int cmd, long larg, int iarg) (a0,d0,d1,d2)
BIO * BIO_push(BIO * b, BIO * append) (a0,a1)
BIO * BIO_pop(BIO * b) (a0)
void BIO_free_all(BIO * a) (a0)
BIO * BIO_find_type(BIO * b, int bio_type) (a0,d0)
BIO * BIO_next(BIO * b) (a0)
BIO * BIO_get_retry_BIO(BIO * bio, int * reason) (a0,a1)
int BIO_get_retry_reason(BIO * bio) (a0)
BIO * BIO_dup_chain(BIO * in) (a0)
int BIO_nread0(BIO * bio, char ** buf) (a0,a1)
int BIO_nread(BIO * bio, char ** buf, int num) (a0,a1,d0)
int BIO_nwrite0(BIO * bio, char ** buf) (a0,a1)
int BIO_nwrite(BIO * bio, char ** buf, int num) (a0,a1,d0)
long BIO_debug_callback(BIO * bio, int cmd, const char * argp, int argi, long argl, long ret) (a0,d0,a1,d1,d2,d3)
const BIO_METHOD * BIO_s_mem() ()
BIO * BIO_new_mem_buf(const void * buf, int len) (a0,d0)
const BIO_METHOD * BIO_s_socket() ()
const BIO_METHOD * BIO_s_connect() ()
const BIO_METHOD * BIO_s_accept() ()
const BIO_METHOD * BIO_s_fd() ()
const BIO_METHOD * BIO_s_log() ()
const BIO_METHOD * BIO_s_bio() ()
const BIO_METHOD * BIO_s_null() ()
const BIO_METHOD * BIO_f_null() ()
const BIO_METHOD * BIO_f_buffer() ()
const BIO_METHOD * BIO_f_nbio_test() ()
int BIO_sock_should_retry(int i) (d0)
int BIO_sock_non_fatal_error(int error) (d0)
int BIO_fd_should_retry(int i) (d0)
int BIO_fd_non_fatal_error(int error) (d0)
int BIO_dump(BIO * b, const void * bytes, int len) (a0,a1,d0)
int BIO_dump_indent(BIO * b, const void * bytes, int len, int indent) (a0,a1,d0,d1)
struct hostent * BIO_gethostbyname(const char * name) (a0)
int BIO_sock_error(int sock) (d0)
int BIO_socket_ioctl(int fd, long type, void * arg) (d0,d1,a0)
int BIO_socket_nbio(int fd, int mode) (d0,d1)
int BIO_get_port(const char * str, unsigned short * port_ptr) (a0,a1)
int BIO_get_host_ip(const char * str, unsigned char * ip) (a0,a1)
int BIO_get_accept_socket(char * host_port, int mode) (a0,d0)
int BIO_accept(int sock, char ** ip_port) (d0,a0)
int BIO_sock_init() ()
==reserve 1
int BIO_set_tcp_ndelay(int sock, int turn_on) (d0,d1)
BIO * BIO_new_socket(int sock, int close_flag) (d0,d1)
BIO * BIO_new_fd(int fd, int close_flag) (d0,d1)
BIO * BIO_new_connect(const char * host_port) (a0)
BIO * BIO_new_accept(const char * host_port) (a0)
int BIO_new_bio_pair(BIO ** bio1, size_t writebuf1, BIO ** bio2, size_t writebuf2) (a0,d0,a1,d1)
void BIO_copy_next_retry(BIO * b) (a0)
int BIO_vprintf(BIO * bio, const char * format, va_list args) (a0,a1,a2)
==varargs
int BIO_printf(BIO * bio, const char * format, long dummy, ...) (a0,a1,a2)
int BIO_vsnprintf(char * buf, size_t n, const char * format, va_list args) (a0,d0,a1,a2)
==varargs
int BIO_snprintf(char * buf, size_t n, const char * format, long dummy, ...) (a0,d0,a1,a2)
int ERR_load_BIO_strings() ()
const BIGNUM * BN_value_one() ()
char * BN_options() ()
BN_CTX * BN_CTX_new() ()
==reserve 1
void BN_CTX_free(BN_CTX * c) (a0)
void BN_CTX_start(BN_CTX * ctx) (a0)
BIGNUM * BN_CTX_get(BN_CTX * ctx) (a0)
void BN_CTX_end(BN_CTX * ctx) (a0)
int BN_rand(BIGNUM * rnd, int bits, int top, int bottom) (a0,d0,d1,d2)
int BN_pseudo_rand(BIGNUM * rnd, int bits, int top, int bottom) (a0,d0,d1,d2)
int BN_rand_range(BIGNUM * rnd, const BIGNUM * range) (a0,a1)
int BN_pseudo_rand_range(BIGNUM * rnd, const BIGNUM * range) (a0,a1)
int BN_num_bits(const BIGNUM * a) (a0)
int BN_num_bits_word(BN_ULONG a) (d0)
BIGNUM * BN_new() ()
==reserve 1
void BN_clear_free(BIGNUM * a) (a0)
BIGNUM * BN_copy(BIGNUM * a, const BIGNUM * b) (a0,a1)
void BN_swap(BIGNUM * a, BIGNUM * b) (a0,a1)
BIGNUM * BN_bin2bn(const unsigned char * s, int len, BIGNUM * ret) (a0,d0,a1)
int BN_bn2bin(const BIGNUM * a, unsigned char * to) (a0,a1)
BIGNUM * BN_mpi2bn(const unsigned char * s, int len, BIGNUM * ret) (a0,d0,a1)
int BN_bn2mpi(const BIGNUM * a, unsigned char * to) (a0,a1)
int BN_sub(BIGNUM * r, const BIGNUM * a, const BIGNUM * b) (a0,a1,a2)
int BN_usub(BIGNUM * r, const BIGNUM * a, const BIGNUM * b) (a0,a1,a2)
int BN_uadd(BIGNUM * r, const BIGNUM * a, const BIGNUM * b) (a0,a1,a2)
int BN_add(BIGNUM * r, const BIGNUM * a, const BIGNUM * b) (a0,a1,a2)
int BN_mul(BIGNUM * r, const BIGNUM * a, const BIGNUM * b, BN_CTX * ctx) (a0,a1,a2,a3)
int BN_sqr(BIGNUM * r, const BIGNUM * a, BN_CTX * ctx) (a0,a1,a2)
int BN_div(BIGNUM * dv, BIGNUM * rem, const BIGNUM * m, const BIGNUM * d, BN_CTX * ctx) (a0,a1,a2,a3,d0)
int BN_nnmod(BIGNUM * r, const BIGNUM * m, const BIGNUM * d, BN_CTX * ctx) (a0,a1,a2,a3)
int BN_mod_add(BIGNUM * r, const BIGNUM * a, const BIGNUM * b, const BIGNUM * m, BN_CTX * ctx) (a0,a1,a2,a3,d0)
int BN_mod_add_quick(BIGNUM * r, const BIGNUM * a, const BIGNUM * b, const BIGNUM * m) (a0,a1,a2,a3)
int BN_mod_sub(BIGNUM * r, const BIGNUM * a, const BIGNUM * b, const BIGNUM * m, BN_CTX * ctx) (a0,a1,a2,a3,d0)
int BN_mod_sub_quick(BIGNUM * r, const BIGNUM * a, const BIGNUM * b, const BIGNUM * m) (a0,a1,a2,a3)
int BN_mod_mul(BIGNUM * r, const BIGNUM * a, const BIGNUM * b, const BIGNUM * m, BN_CTX * ctx) (a0,a1,a2,a3,d0)
int BN_mod_sqr(BIGNUM * r, const BIGNUM * a, const BIGNUM * m, BN_CTX * ctx) (a0,a1,a2,a3)
int BN_mod_lshift1(BIGNUM * r, const BIGNUM * a, const BIGNUM * m, BN_CTX * ctx) (a0,a1,a2,a3)
int BN_mod_lshift1_quick(BIGNUM * r, const BIGNUM * a, const BIGNUM * m) (a0,a1,a2)
int BN_mod_lshift(BIGNUM * r, const BIGNUM * a, int n, const BIGNUM * m, BN_CTX * ctx) (a0,a1,d0,a2,a3)
int BN_mod_lshift_quick(BIGNUM * r, const BIGNUM * a, int n, const BIGNUM * m) (a0,a1,d0,a2)
BN_ULONG BN_mod_word(const BIGNUM * a, BN_ULONG w) (a0,d0)
BN_ULONG BN_div_word(BIGNUM * a, BN_ULONG w) (a0,d0)
int BN_mul_word(BIGNUM * a, BN_ULONG w) (a0,d0)
int BN_add_word(BIGNUM * a, BN_ULONG w) (a0,d0)
int BN_sub_word(BIGNUM * a, BN_ULONG w) (a0,d0)
int BN_set_word(BIGNUM * a, BN_ULONG w) (a0,d0)
BN_ULONG BN_get_word(const BIGNUM * a) (a0)
int BN_cmp(const BIGNUM * a, const BIGNUM * b) (a0,a1)
void BN_free(BIGNUM * a) (a0)
int BN_is_bit_set(const BIGNUM * a, int n) (a0,d0)
int BN_lshift(BIGNUM * r, const BIGNUM * a, int n) (a0,a1,d0)
int BN_lshift1(BIGNUM * r, const BIGNUM * a) (a0,a1)
int BN_exp(BIGNUM * r, const BIGNUM * a, const BIGNUM * p, BN_CTX * ctx) (a0,a1,a2,a3)
int BN_mod_exp(BIGNUM * r, const BIGNUM * a, const BIGNUM * p, const BIGNUM * m, BN_CTX * ctx) (a0,a1,a2,a3,d0)
int BN_mod_exp_mont(BIGNUM * r, const BIGNUM * a, const BIGNUM * p, const BIGNUM * m, BN_CTX * ctx, BN_MONT_CTX * m_ctx) (a0,a1,a2,a3,d0,d1)
int BN_mod_exp_mont_word(BIGNUM * r, BN_ULONG a, const BIGNUM * p, const BIGNUM * m, BN_CTX * ctx, BN_MONT_CTX * m_ctx) (a0,d0,a1,a2,a3,d1)
int BN_mod_exp2_mont(BIGNUM * r, const BIGNUM * a1, const BIGNUM * p1, const BIGNUM * a2, const BIGNUM * p2, const BIGNUM * m, BN_CTX * ctx, BN_MONT_CTX * m_ctx) (a0,a1,a2,a3,d0,d1,d2,d3)
int BN_mod_exp_simple(BIGNUM * r, const BIGNUM * a, const BIGNUM * p, const BIGNUM * m, BN_CTX * ctx) (a0,a1,a2,a3,d0)
int BN_mask_bits(BIGNUM * a, int n) (a0,d0)
int BN_print(BIO * fp, const BIGNUM * a) (a0,a1)
int BN_reciprocal(BIGNUM * r, const BIGNUM * m, int len, BN_CTX * ctx) (a0,a1,d0,a2)
int BN_rshift(BIGNUM * r, const BIGNUM * a, int n) (a0,a1,d0)
int BN_rshift1(BIGNUM * r, const BIGNUM * a) (a0,a1)
void BN_clear(BIGNUM * a) (a0)
BIGNUM * BN_dup(const BIGNUM * a) (a0)
int BN_ucmp(const BIGNUM * a, const BIGNUM * b) (a0,a1)
int BN_set_bit(BIGNUM * a, int n) (a0,d0)
int BN_clear_bit(BIGNUM * a, int n) (a0,d0)
char * BN_bn2hex(const BIGNUM * a) (a0)
char * BN_bn2dec(const BIGNUM * a) (a0)
int BN_hex2bn(BIGNUM ** a, const char * str) (a0,a1)
int BN_dec2bn(BIGNUM ** a, const char * str) (a0,a1)
int BN_gcd(BIGNUM * r, const BIGNUM * a, const BIGNUM * b, BN_CTX * ctx) (a0,a1,a2,a3)
int BN_kronecker(const BIGNUM * a, const BIGNUM * b, BN_CTX * ctx) (a0,a1,a2)
BIGNUM * BN_mod_inverse(BIGNUM * ret, const BIGNUM * a, const BIGNUM * n, BN_CTX * ctx) (a0,a1,a2,a3)
BIGNUM * BN_mod_sqrt(BIGNUM * ret, const BIGNUM * a, const BIGNUM * n, BN_CTX * ctx) (a0,a1,a2,a3)
BIGNUM * BN_generate_prime(BIGNUM * ret, int bits, int safe, const BIGNUM * add, const BIGNUM * rem, void (*callback)(int, int, void *), void * cb_arg) (a0,d0,d1,a1,a2,a3,d2)
int BN_is_prime(const BIGNUM * p, int nchecks, void (*callback)(int, int, void *), BN_CTX * ctx, void * cb_arg) (a0,d0,a1,a2,a3)
int BN_is_prime_fasttest(const BIGNUM * p, int nchecks, void (*callback)(int, int, void *), BN_CTX * ctx, void * cb_arg, int do_trial_division) (a0,d0,a1,a2,a3,d1)
BN_MONT_CTX * BN_MONT_CTX_new() ()
==reserve 1
int BN_mod_mul_montgomery(BIGNUM * r, const BIGNUM * a, const BIGNUM * b, BN_MONT_CTX * mont, BN_CTX * ctx) (a0,a1,a2,a3,d0)
int BN_from_montgomery(BIGNUM * r, const BIGNUM * a, BN_MONT_CTX * mont, BN_CTX * ctx) (a0,a1,a2,a3)
void BN_MONT_CTX_free(BN_MONT_CTX * mont) (a0)
int BN_MONT_CTX_set(BN_MONT_CTX * mont, const BIGNUM * mod, BN_CTX * ctx) (a0,a1,a2)
BN_MONT_CTX * BN_MONT_CTX_copy(BN_MONT_CTX * to, BN_MONT_CTX * from) (a0,a1)
BN_BLINDING * BN_BLINDING_new(const BIGNUM * A, const BIGNUM * Ai, BIGNUM * mod) (a0,a1,a2)
void BN_BLINDING_free(BN_BLINDING * b) (a0)
int BN_BLINDING_update(BN_BLINDING * b, BN_CTX * ctx) (a0,a1)
int BN_BLINDING_convert(BIGNUM * n, BN_BLINDING * r, BN_CTX * ctx) (a0,a1,a2)
int BN_BLINDING_invert(BIGNUM * n, BN_BLINDING * b, BN_CTX * ctx) (a0,a1,a2)
void BN_set_params(int mul, int high, int low, int mont) (d0,d1,d2,d3)
int BN_get_params(int which) (d0)
==reserve 1
BN_RECP_CTX * BN_RECP_CTX_new() ()
void BN_RECP_CTX_free(BN_RECP_CTX * recp) (a0)
int BN_RECP_CTX_set(BN_RECP_CTX * recp, const BIGNUM * rdiv, BN_CTX * ctx) (a0,a1,a2)
int BN_mod_mul_reciprocal(BIGNUM * r, const BIGNUM * x, const BIGNUM * y, BN_RECP_CTX * recp, BN_CTX * ctx) (a0,a1,a2,a3,d0)
int BN_mod_exp_recp(BIGNUM * r, const BIGNUM * a, const BIGNUM * p, const BIGNUM * m, BN_CTX * ctx) (a0,a1,a2,a3,d0)
int BN_div_recp(BIGNUM * dv, BIGNUM * rem, const BIGNUM * m, BN_RECP_CTX * recp, BN_CTX * ctx) (a0,a1,a2,a3,d0)
==reserve 8
int BN_bntest_rand(BIGNUM * rnd, int bits, int top, int bottom) (a0,d0,d1,d2)
int ERR_load_BN_strings() ()
BUF_MEM * BUF_MEM_new() ()
void BUF_MEM_free(BUF_MEM * a) (a0)
size_t BUF_MEM_grow(BUF_MEM * str, size_t len) (a0,d0)
size_t BUF_MEM_grow_clean(BUF_MEM * str, size_t len) (a0,d0)
char * OBSOLETE_BUF_strdup(const char * str) (a0)
size_t OBSOLETE_BUF_strlcpy(char * dst, const char * src, size_t siz) (a0,a1,d0)
size_t OBSOLETE_BUF_strlcat(char * dst, const char * src, size_t siz) (a0,a1,d0)
int ERR_load_BUF_strings() ()
COMP_CTX * COMP_CTX_new(COMP_METHOD * meth) (a0)
void COMP_CTX_free(COMP_CTX * ctx) (a0)
int COMP_compress_block(COMP_CTX * ctx, unsigned char * out, int olen, unsigned char * in, int ilen) (a0,a1,d0,a2,d1)
int COMP_expand_block(COMP_CTX * ctx, unsigned char * out, int olen, unsigned char * in, int ilen) (a0,a1,d0,a2,d1)
==reserve 1
COMP_METHOD * COMP_zlib() ()
int ERR_load_COMP_strings() ()
int CONF_set_default_method(CONF_METHOD * meth) (a0)
void CONF_set_nconf(CONF * conf, LHASH_OF(CONF_VALUE) * hash) (a0,a1)
LHASH_OF(CONF_VALUE) * CONF_load(LHASH_OF(CONF_VALUE) * conf, const char * file, long * eline) (a0,a1,a2)
LHASH_OF(CONF_VALUE) * CONF_load_bio(LHASH_OF(CONF_VALUE) * conf, BIO * bp, long * eline) (a0,a1,a2)
STACK_OF(CONF_VALUE) * CONF_get_section(LHASH_OF(CONF_VALUE) * conf, const char * section) (a0,a1)
char * CONF_get_string(LHASH_OF(CONF_VALUE) * conf, const char * group, const char * name) (a0,a1,a2)
long CONF_get_number(LHASH_OF(CONF_VALUE) * conf, const char * group, const char * name) (a0,a1,a2)
void CONF_free(LHASH_OF(CONF_VALUE) * conf) (a0)
int CONF_dump_bio(LHASH_OF(CONF_VALUE) * conf, BIO * out) (a0,a1)
void OPENSSL_config(const char * config_name) (a0)
void OBSOLETE_OPENSSL_no_config() ()
CONF * NCONF_new(CONF_METHOD * meth) (a0)
CONF_METHOD * NCONF_default() ()
CONF_METHOD * NCONF_WIN32() ()
void NCONF_free(CONF * conf) (a0)
void NCONF_free_data(CONF * conf) (a0)
int NCONF_load(CONF * conf, const char * file, long * eline) (a0,a1,a2)
int NCONF_load_bio(CONF * conf, BIO * bp, long * eline) (a0,a1,a2)
STACK_OF(CONF_VALUE) * NCONF_get_section(const CONF * conf, const char * section) (a0,a1)
char * NCONF_get_string(const CONF * conf, const char * group, const char * name) (a0,a1,a2)
int NCONF_get_number_e(const CONF * conf, const char * group, const char * name, long * result) (a0,a1,a2,a3)
int NCONF_dump_bio(const CONF * conf, BIO * out) (a0,a1)
int CONF_modules_load(const CONF * cnf, const char * appname, unsigned long flags) (a0,a1,d0)
int CONF_modules_load_file(const char * filename, const char * appname, unsigned long flags) (a0,a1,d0)
void CONF_modules_unload(int all) (d0)
void CONF_modules_finish() ()
==reserve 1
int CONF_module_add(const char * name, conf_init_func * ifunc, conf_finish_func * ffunc) (a0,a1,a2)
const char * CONF_imodule_get_name(const CONF_IMODULE * md) (a0)
const char * CONF_imodule_get_value(const CONF_IMODULE * md) (a0)
void * CONF_imodule_get_usr_data(const CONF_IMODULE * md) (a0)
void CONF_imodule_set_usr_data(CONF_IMODULE * md, void * usr_data) (a0,a1)
CONF_MODULE * CONF_imodule_get_module(const CONF_IMODULE * md) (a0)
unsigned long CONF_imodule_get_flags(const CONF_IMODULE * md) (a0)
void CONF_imodule_set_flags(CONF_IMODULE * md, unsigned long flags) (a0,d0)
void * CONF_module_get_usr_data(CONF_MODULE * pmod) (a0)
void CONF_module_set_usr_data(CONF_MODULE * pmod, void * usr_data) (a0,a1)
char * CONF_get1_default_config_file() ()
int CONF_parse_list(const char * list, int sep, int nospc, int (*list_cb)(const char *elem, int len, void *usr), void * arg) (a0,d0,d1,a1,a2)
void OPENSSL_load_builtin_modules() ()
int ERR_load_CONF_strings() ()
==reserve 9
const char * OBSOLETE_SSLeay_version(int type) (d0)
unsigned long OBSOLETE_SSLeay() ()
int OPENSSL_issetugid() ()
==reserve 3
int CRYPTO_get_ex_new_index(int class_index, long argl, void * argp, CRYPTO_EX_new * new_func, CRYPTO_EX_dup * dup_func, CRYPTO_EX_free * free_func) (d0,d1,a0,a1,a2,a3)
int CRYPTO_new_ex_data(int class_index, void * obj, CRYPTO_EX_DATA * ad) (d0,a0,a1)
int CRYPTO_dup_ex_data(int class_index, CRYPTO_EX_DATA * to, const CRYPTO_EX_DATA * from) (d0,a0,a1)
void CRYPTO_free_ex_data(int class_index, void * obj, CRYPTO_EX_DATA * ad) (d0,a0,a1)
int CRYPTO_set_ex_data(CRYPTO_EX_DATA * ad, int idx, void * val) (a0,d0,a1)
void * CRYPTO_get_ex_data(const CRYPTO_EX_DATA * ad, int idx) (a0,d0)
==reserve 22
int CRYPTO_set_mem_functions(CRYPTO_malloc_fn malloc_fn, CRYPTO_realloc_fn realloc_fn, CRYPTO_free_fn free_fn) (a0,a1,a2)
==reserve 4
void CRYPTO_get_mem_functions(CRYPTO_malloc_fn * malloc_fn, CRYPTO_realloc_fn * realloc_fn, CRYPTO_free_fn * free_fn) (a0,a1,a2)
==reserve 6
void * CRYPTO_malloc(size_t num, const char * file, int line) (d0,a0,d1)
void CRYPTO_free(void * str, const char * file, int line) (a0,a1,d0)
void * CRYPTO_realloc(void * addr, size_t num, const char * file, int line) (a0,d0,a1,d1)
==reserve 2
void OPENSSL_cleanse(void * ptr, size_t len) (a0,d0)
==reserve 13
int ERR_load_CRYPTO_strings() ()
==reserve 25
const EC_METHOD * EC_GFp_simple_method() ()
const EC_METHOD * EC_GFp_mont_method() ()
EC_GROUP * EC_GROUP_new(const EC_METHOD * a) (a0)
void EC_GROUP_free(EC_GROUP * a) (a0)
void EC_GROUP_clear_free(EC_GROUP * a) (a0)
int EC_GROUP_copy(EC_GROUP * a, const EC_GROUP * b) (a0,a1)
const EC_METHOD * EC_GROUP_method_of(const EC_GROUP * a) (a0)
int EC_GROUP_set_curve_GFp(EC_GROUP * a1, const BIGNUM * p, const BIGNUM * a, const BIGNUM * b, BN_CTX * a2) (a0,a1,a2,a3,d0)
int EC_GROUP_get_curve_GFp(const EC_GROUP * a1, BIGNUM * p, BIGNUM * a, BIGNUM * b, BN_CTX * a2) (a0,a1,a2,a3,d0)
EC_GROUP * EC_GROUP_new_curve_GFp(const BIGNUM * p, const BIGNUM * a, const BIGNUM * b, BN_CTX * a1) (a0,a1,a2,a3)
int EC_GROUP_set_generator(EC_GROUP * a1, const EC_POINT * generator, const BIGNUM * order, const BIGNUM * cofactor) (a0,a1,a2,a3)
const EC_POINT * EC_GROUP_get0_generator(const EC_GROUP * a1) (a0)
int EC_GROUP_get_order(const EC_GROUP * a1, BIGNUM * order, BN_CTX * a2) (a0,a1,a2)
int EC_GROUP_get_cofactor(const EC_GROUP * a1, BIGNUM * cofactor, BN_CTX * a2) (a0,a1,a2)
EC_POINT * EC_POINT_new(const EC_GROUP * a) (a0)
void EC_POINT_free(EC_POINT * a) (a0)
void EC_POINT_clear_free(EC_POINT * a) (a0)
int EC_POINT_copy(EC_POINT * a, const EC_POINT * b) (a0,a1)
const EC_METHOD * EC_POINT_method_of(const EC_POINT * a) (a0)
int EC_POINT_set_to_infinity(const EC_GROUP * a, EC_POINT * b) (a0,a1)
int EC_POINT_set_Jprojective_coordinates_GFp(const EC_GROUP * a1, EC_POINT * a2, const BIGNUM * x, const BIGNUM * y, const BIGNUM * z, BN_CTX * a3) (a0,a1,a2,a3,d0,d1)
int EC_POINT_get_Jprojective_coordinates_GFp(const EC_GROUP * a1, const EC_POINT * a2, BIGNUM * x, BIGNUM * y, BIGNUM * z, BN_CTX * a3) (a0,a1,a2,a3,d0,d1)
int EC_POINT_set_affine_coordinates_GFp(const EC_GROUP * a1, EC_POINT * a2, const BIGNUM * x, const BIGNUM * y, BN_CTX * a3) (a0,a1,a2,a3,d0)
int EC_POINT_get_affine_coordinates_GFp(const EC_GROUP * a1, const EC_POINT * a2, BIGNUM * x, BIGNUM * y, BN_CTX * a3) (a0,a1,a2,a3,d0)
int EC_POINT_set_compressed_coordinates_GFp(const EC_GROUP * a1, EC_POINT * a2, const BIGNUM * x, int y_bit, BN_CTX * a3) (a0,a1,a2,d0,a3)
size_t EC_POINT_point2oct(const EC_GROUP * a1, const EC_POINT * a2, point_conversion_form_t form, unsigned char * buf, size_t len, BN_CTX * a3) (a0,a1,d0,a2,d1,a3)
int EC_POINT_oct2point(const EC_GROUP * a1, EC_POINT * a2, const unsigned char * buf, size_t len, BN_CTX * a3) (a0,a1,a2,d0,a3)
int EC_POINT_add(const EC_GROUP * a1, EC_POINT * r, const EC_POINT * a, const EC_POINT * b, BN_CTX * a2) (a0,a1,a2,a3,d0)
int EC_POINT_dbl(const EC_GROUP * a1, EC_POINT * r, const EC_POINT * a, BN_CTX * a2) (a0,a1,a2,a3)
int EC_POINT_invert(const EC_GROUP * a1, EC_POINT * a2, BN_CTX * a3) (a0,a1,a2)
int EC_POINT_is_at_infinity(const EC_GROUP * a, const EC_POINT * b) (a0,a1)
int EC_POINT_is_on_curve(const EC_GROUP * a, const EC_POINT * b, BN_CTX * c) (a0,a1,a2)
int EC_POINT_cmp(const EC_GROUP * a1, const EC_POINT * a, const EC_POINT * b, BN_CTX * a2) (a0,a1,a2,a3)
int EC_POINT_make_affine(const EC_GROUP * a, EC_POINT * b, BN_CTX * c) (a0,a1,a2)
int EC_POINTs_make_affine(const EC_GROUP * a1, size_t num, EC_POINT ** a2, BN_CTX * a3) (a0,d0,a1,a2)
int EC_POINTs_mul(const EC_GROUP * a1, EC_POINT * r, const BIGNUM * a2, size_t num, const EC_POINT ** a3, const BIGNUM ** a4, BN_CTX * a5) (a0,a1,a2,d0,a3,d1,d2)
int EC_POINT_mul(const EC_GROUP * a1, EC_POINT * r, const BIGNUM * a2, const EC_POINT * a3, const BIGNUM * a4, BN_CTX * a5) (a0,a1,a2,a3,d0,d1)
int EC_GROUP_precompute_mult(EC_GROUP * a, BN_CTX * b) (a0,a1)
int ERR_load_EC_strings() ()
void OBSOLETE_ERR_put_error(int lib, int func, int reason, const char * file, int line) (d0,d1,d2,a0,d3)
void ERR_set_error_data(char * data, int flags) (a0,d0)
unsigned long ERR_get_error() ()
unsigned long ERR_get_error_line(const char ** file, int * line) (a0,a1)
unsigned long ERR_get_error_line_data(const char ** file, int * line, const char ** data, int * flags) (a0,a1,a2,a3)
unsigned long ERR_peek_error() ()
unsigned long ERR_peek_error_line(const char ** file, int * line) (a0,a1)
unsigned long ERR_peek_error_line_data(const char ** file, int * line, const char ** data, int * flags) (a0,a1,a2,a3)
unsigned long ERR_peek_last_error() ()
unsigned long ERR_peek_last_error_line(const char ** file, int * line) (a0,a1)
unsigned long ERR_peek_last_error_line_data(const char ** file, int * line, const char ** data, int * flags) (a0,a1,a2,a3)
void ERR_clear_error() ()
char * ERR_error_string(unsigned long e, char * buf) (d0,a0)
void ERR_error_string_n(unsigned long e, char * buf, size_t len) (d0,a0,d1)
const char * ERR_lib_error_string(unsigned long e) (d0)
const char * ERR_func_error_string(unsigned long e) (d0)
const char * ERR_reason_error_string(unsigned long e) (d0)
void ERR_print_errors_cb(int (*cb)(const char *str, size_t len, void *u), void * u) (a0,a1)
void ERR_print_errors(BIO * bp) (a0)
void ERR_add_error_vdata(int num, va_list args) (d0,a0)
==varargs
void ERR_add_error_data(int num, long dummy, ...) (d0,a0)
int ERR_load_strings(int lib, ERR_STRING_DATA * str) (d0,a0)
int ERR_unload_strings(int lib, ERR_STRING_DATA * str) (d0,a0)
int ERR_load_ERR_strings() ()
void OBSOLETE_ERR_load_crypto_strings() ()
==reserve 2
ERR_STATE * ERR_get_state() ()
==reserve 3
int ERR_get_next_error_library() ()
==reserve 2
void OBSOLETE_EVP_MD_CTX_init(EVP_MD_CTX * ctx) (a0)
==reserve 1
EVP_MD_CTX * OBSOLETE_EVP_MD_CTX_create() ()
void OBSOLETE_EVP_MD_CTX_destroy(EVP_MD_CTX * ctx) (a0)
int EVP_MD_CTX_copy_ex(EVP_MD_CTX * out, const EVP_MD_CTX * in) (a0,a1)
int EVP_DigestInit_ex(EVP_MD_CTX * ctx, const EVP_MD * type, ENGINE * impl) (a0,a1,a2)
int EVP_DigestUpdate(EVP_MD_CTX * ctx, const void * d, unsigned int cnt) (a0,a1,d0)
int EVP_DigestFinal_ex(EVP_MD_CTX * ctx, unsigned char * md, unsigned int * s) (a0,a1,a2)
int EVP_Digest(const void * data, size_t count, unsigned char * md, unsigned int * size, const EVP_MD * type, ENGINE * impl) (a0,d0,a1,a2,a3,d1)
int EVP_MD_CTX_copy(EVP_MD_CTX * out, const EVP_MD_CTX * in) (a0,a1)
int EVP_DigestInit(EVP_MD_CTX * ctx, const EVP_MD * type) (a0,a1)
int EVP_DigestFinal(EVP_MD_CTX * ctx, unsigned char * md, unsigned int * s) (a0,a1,a2)
int EVP_read_pw_string(char * buf, int length, const char * prompt, int verify) (a0,d0,a1,d1)
void EVP_set_pw_prompt(const char * prompt) (a0)
char * EVP_get_pw_prompt() ()
int EVP_BytesToKey(const EVP_CIPHER * type, const EVP_MD * md, const unsigned char * salt, const unsigned char * data, int datal, int count, unsigned char * key, unsigned char * iv) (a0,a1,a2,a3,d0,d1,d2,d3)
int EVP_EncryptInit(EVP_CIPHER_CTX * ctx, const EVP_CIPHER * cipher, const unsigned char * key, const unsigned char * iv) (a0,a1,a2,a3)
int EVP_EncryptInit_ex(EVP_CIPHER_CTX * ctx, const EVP_CIPHER * cipher, ENGINE * impl, const unsigned char * key, const unsigned char * iv) (a0,a1,a2,a3,d0)
int EVP_EncryptUpdate(EVP_CIPHER_CTX * ctx, unsigned char * out, int * outl, const unsigned char * in, int inl) (a0,a1,a2,a3,d0)
int EVP_EncryptFinal_ex(EVP_CIPHER_CTX * ctx, unsigned char * out, int * outl) (a0,a1,a2)
int EVP_EncryptFinal(EVP_CIPHER_CTX * ctx, unsigned char * out, int * outl) (a0,a1,a2)
int EVP_DecryptInit(EVP_CIPHER_CTX * ctx, const EVP_CIPHER * cipher, const unsigned char * key, const unsigned char * iv) (a0,a1,a2,a3)
int EVP_DecryptInit_ex(EVP_CIPHER_CTX * ctx, const EVP_CIPHER * cipher, ENGINE * impl, const unsigned char * key, const unsigned char * iv) (a0,a1,a2,a3,d0)
int EVP_DecryptUpdate(EVP_CIPHER_CTX * ctx, unsigned char * out, int * outl, const unsigned char * in, int inl) (a0,a1,a2,a3,d0)
int EVP_DecryptFinal(EVP_CIPHER_CTX * ctx, unsigned char * outm, int * outl) (a0,a1,a2)
int EVP_DecryptFinal_ex(EVP_CIPHER_CTX * ctx, unsigned char * outm, int * outl) (a0,a1,a2)
int EVP_CipherInit(EVP_CIPHER_CTX * ctx, const EVP_CIPHER * cipher, const unsigned char * key, const unsigned char * iv, int enc) (a0,a1,a2,a3,d0)
int EVP_CipherInit_ex(EVP_CIPHER_CTX * ctx, const EVP_CIPHER * cipher, ENGINE * impl, const unsigned char * key, const unsigned char * iv, int enc) (a0,a1,a2,a3,d0,d1)
int EVP_CipherUpdate(EVP_CIPHER_CTX * ctx, unsigned char * out, int * outl, const unsigned char * in, int inl) (a0,a1,a2,a3,d0)
int EVP_CipherFinal(EVP_CIPHER_CTX * ctx, unsigned char * outm, int * outl) (a0,a1,a2)
int EVP_CipherFinal_ex(EVP_CIPHER_CTX * ctx, unsigned char * outm, int * outl) (a0,a1,a2)
int EVP_SignFinal(EVP_MD_CTX * ctx, unsigned char * md, unsigned int * s, EVP_PKEY * pkey) (a0,a1,a2,a3)
int EVP_VerifyFinal(EVP_MD_CTX * ctx, const unsigned char * sigbuf, unsigned int siglen, EVP_PKEY * pkey) (a0,a1,d0,a2)
int EVP_OpenInit(EVP_CIPHER_CTX * ctx, const EVP_CIPHER * type, const unsigned char * ek, int ekl, const unsigned char * iv, EVP_PKEY * priv) (a0,a1,a2,d0,a3,d1)
int EVP_OpenFinal(EVP_CIPHER_CTX * ctx, unsigned char * out, int * outl) (a0,a1,a2)
int EVP_SealInit(EVP_CIPHER_CTX * ctx, const EVP_CIPHER * type, unsigned char ** ek, int * ekl, unsigned char * iv, EVP_PKEY ** pubk, int npubk) (a0,a1,a2,a3,d0,d1,d2)
int EVP_SealFinal(EVP_CIPHER_CTX * ctx, unsigned char * out, int * outl) (a0,a1,a2)
void EVP_EncodeInit(EVP_ENCODE_CTX * ctx) (a0)
int EVP_EncodeUpdate(EVP_ENCODE_CTX * ctx, unsigned char * out, int * outl, const unsigned char * in, int inl) (a0,a1,a2,a3,d0)
void EVP_EncodeFinal(EVP_ENCODE_CTX * ctx, unsigned char * out, int * outl) (a0,a1,a2)
int EVP_EncodeBlock(unsigned char * t, const unsigned char * f, int n) (a0,a1,d0)
void EVP_DecodeInit(EVP_ENCODE_CTX * ctx) (a0)
int EVP_DecodeUpdate(EVP_ENCODE_CTX * ctx, unsigned char * out, int * outl, const unsigned char * in, int inl) (a0,a1,a2,a3,d0)
int EVP_DecodeFinal(EVP_ENCODE_CTX * ctx, unsigned char * out, int * outl) (a0,a1,a2)
int EVP_DecodeBlock(unsigned char * t, const unsigned char * f, int n) (a0,a1,d0)
void OBSOLETE_EVP_CIPHER_CTX_init(EVP_CIPHER_CTX * a) (a0)
int OBSOLETE_EVP_CIPHER_CTX_cleanup(EVP_CIPHER_CTX * a) (a0)
int EVP_CIPHER_CTX_set_key_length(EVP_CIPHER_CTX * x, int keylen) (a0,d0)
int EVP_CIPHER_CTX_set_padding(EVP_CIPHER_CTX * c, int pad) (a0,d0)
int EVP_CIPHER_CTX_ctrl(EVP_CIPHER_CTX * ctx, int type, int arg, void * ptr) (a0,d0,d1,a1)
const BIO_METHOD * BIO_f_md() ()
const BIO_METHOD * BIO_f_base64() ()
const BIO_METHOD * BIO_f_cipher() ()
const BIO_METHOD * BIO_f_reliable() ()
int BIO_set_cipher(BIO * b, const EVP_CIPHER * c, const unsigned char * k, const unsigned char * i, int enc) (a0,a1,a2,a3,d0)
const EVP_MD * EVP_md_null() ()
const EVP_MD * EVP_md2() ()
const EVP_MD * EVP_md4() ()
const EVP_MD * EVP_md5() ()
==reserve 1
const EVP_MD * EVP_sha1() ()
==reserve 2
const EVP_MD * EVP_mdc2() ()
const EVP_MD * EVP_ripemd160() ()
const EVP_CIPHER * EVP_enc_null() ()
const EVP_CIPHER * EVP_des_ecb() ()
const EVP_CIPHER * EVP_des_ede() ()
const EVP_CIPHER * EVP_des_ede3() ()
const EVP_CIPHER * EVP_des_ede_ecb() ()
const EVP_CIPHER * EVP_des_ede3_ecb() ()
const EVP_CIPHER * EVP_des_cfb64() ()
const EVP_CIPHER * EVP_des_cfb1() ()
const EVP_CIPHER * EVP_des_cfb8() ()
const EVP_CIPHER * EVP_des_ede_cfb64() ()
const EVP_CIPHER * EVP_des_ede3_cfb64() ()
const EVP_CIPHER * EVP_des_ede3_cfb1() ()
const EVP_CIPHER * EVP_des_ede3_cfb8() ()
const EVP_CIPHER * EVP_des_ofb() ()
const EVP_CIPHER * EVP_des_ede_ofb() ()
const EVP_CIPHER * EVP_des_ede3_ofb() ()
const EVP_CIPHER * EVP_des_cbc() ()
const EVP_CIPHER * EVP_des_ede_cbc() ()
const EVP_CIPHER * EVP_des_ede3_cbc() ()
const EVP_CIPHER * EVP_desx_cbc() ()
const EVP_CIPHER * EVP_rc4() ()
const EVP_CIPHER * EVP_rc4_40() ()
const EVP_CIPHER * EVP_idea_ecb() ()
const EVP_CIPHER * EVP_idea_cfb64() ()
const EVP_CIPHER * EVP_idea_ofb() ()
const EVP_CIPHER * EVP_idea_cbc() ()
const EVP_CIPHER * EVP_rc2_ecb() ()
const EVP_CIPHER * EVP_rc2_cbc() ()
const EVP_CIPHER * EVP_rc2_40_cbc() ()
const EVP_CIPHER * EVP_rc2_64_cbc() ()
const EVP_CIPHER * EVP_rc2_cfb64() ()
const EVP_CIPHER * EVP_rc2_ofb() ()
const EVP_CIPHER * EVP_bf_ecb() ()
const EVP_CIPHER * EVP_bf_cbc() ()
const EVP_CIPHER * EVP_bf_cfb64() ()
const EVP_CIPHER * EVP_bf_ofb() ()
const EVP_CIPHER * EVP_cast5_ecb() ()
const EVP_CIPHER * EVP_cast5_cbc() ()
const EVP_CIPHER * EVP_cast5_cfb64() ()
const EVP_CIPHER * EVP_cast5_ofb() ()
const EVP_CIPHER * EVP_rc5_32_12_16_cbc() ()
const EVP_CIPHER * EVP_rc5_32_12_16_ecb() ()
const EVP_CIPHER * EVP_rc5_32_12_16_cfb64() ()
const EVP_CIPHER * EVP_rc5_32_12_16_ofb() ()
const EVP_CIPHER * EVP_aes_128_ecb() ()
const EVP_CIPHER * EVP_aes_128_cbc() ()
const EVP_CIPHER * EVP_aes_128_cfb1() ()
const EVP_CIPHER * EVP_aes_128_cfb8() ()
const EVP_CIPHER * EVP_aes_128_cfb128() ()
const EVP_CIPHER * EVP_aes_128_ofb() ()
const EVP_CIPHER * EVP_aes_192_ecb() ()
const EVP_CIPHER * EVP_aes_192_cbc() ()
const EVP_CIPHER * EVP_aes_192_cfb1() ()
const EVP_CIPHER * EVP_aes_192_cfb8() ()
const EVP_CIPHER * EVP_aes_192_cfb128() ()
const EVP_CIPHER * EVP_aes_192_ofb() ()
const EVP_CIPHER * EVP_aes_256_ecb() ()
const EVP_CIPHER * EVP_aes_256_cbc() ()
const EVP_CIPHER * EVP_aes_256_cfb1() ()
const EVP_CIPHER * EVP_aes_256_cfb8() ()
const EVP_CIPHER * EVP_aes_256_cfb128() ()
const EVP_CIPHER * EVP_aes_256_ofb() ()
void OBSOLETE_OPENSSL_add_all_algorithms_noconf() ()
void OBSOLETE_OPENSSL_add_all_algorithms_conf() ()
void OBSOLETE_OpenSSL_add_all_ciphers() ()
void OBSOLETE_OpenSSL_add_all_digests() ()
int EVP_add_cipher(const EVP_CIPHER * cipher) (a0)
int EVP_add_digest(const EVP_MD * digest) (a0)
const EVP_CIPHER * EVP_get_cipherbyname(const char * name) (a0)
const EVP_MD * EVP_get_digestbyname(const char * name) (a0)
==reserve 1
int EVP_PKEY_decrypt(EVP_PKEY_CTX * ctx, unsigned char * out, size_t * outlen, const unsigned char * in, size_t inlen) (a0,a1,a2,a3,d0)
int EVP_PKEY_encrypt(EVP_PKEY_CTX * ctx, unsigned char * out, size_t * outlen, const unsigned char * in, size_t inlen) (a0,a1,a2,a3,d0)
int EVP_PKEY_type(int type) (d0)
int EVP_PKEY_get_bits(const EVP_PKEY * pkey) (a0)
int EVP_PKEY_get_size(const EVP_PKEY * pkey) (a0)
int EVP_PKEY_assign(EVP_PKEY * pkey, int type, void * key) (a0,d0,a1)
int EVP_PKEY_set1_RSA(EVP_PKEY * pkey, struct rsa_st * key) (a0,a1)
struct rsa_st * EVP_PKEY_get1_RSA(EVP_PKEY * pkey) (a0)
int EVP_PKEY_set1_DSA(EVP_PKEY * pkey, struct dsa_st * key) (a0,a1)
struct dsa_st * EVP_PKEY_get1_DSA(EVP_PKEY * pkey) (a0)
int EVP_PKEY_set1_DH(EVP_PKEY * pkey, struct dh_st * key) (a0,a1)
struct dh_st * EVP_PKEY_get1_DH(EVP_PKEY * pkey) (a0)
EVP_PKEY * EVP_PKEY_new() ()
void EVP_PKEY_free(EVP_PKEY * pkey) (a0)
EVP_PKEY * d2i_PublicKey(int type, EVP_PKEY ** a, const unsigned char ** pp, long length) (d0,a0,a1,d1)
int i2d_PublicKey(const EVP_PKEY * a, unsigned char ** pp) (a0,a1)
EVP_PKEY * d2i_PrivateKey(int type, EVP_PKEY ** a, const unsigned char ** pp, long length) (d0,a0,a1,d1)
EVP_PKEY * d2i_AutoPrivateKey(EVP_PKEY ** a, const unsigned char ** pp, long length) (a0,a1,d0)
int i2d_PrivateKey(const EVP_PKEY * a, unsigned char ** pp) (a0,a1)
int EVP_PKEY_copy_parameters(EVP_PKEY * to, const EVP_PKEY * from) (a0,a1)
int EVP_PKEY_missing_parameters(const EVP_PKEY * pkey) (a0)
int EVP_PKEY_save_parameters(EVP_PKEY * pkey, int mode) (a0,d0)
int EVP_PKEY_cmp_parameters(const EVP_PKEY * a, const EVP_PKEY * b) (a0,a1)
int EVP_CIPHER_get_type(const EVP_CIPHER * ctx) (a0)
int EVP_CIPHER_param_to_asn1(EVP_CIPHER_CTX * c, ASN1_TYPE * type) (a0,a1)
int EVP_CIPHER_asn1_to_param(EVP_CIPHER_CTX * c, ASN1_TYPE * type) (a0,a1)
int EVP_CIPHER_set_asn1_iv(EVP_CIPHER_CTX * c, ASN1_TYPE * type) (a0,a1)
int EVP_CIPHER_get_asn1_iv(EVP_CIPHER_CTX * c, ASN1_TYPE * type) (a0,a1)
int PKCS5_PBE_keyivgen(EVP_CIPHER_CTX * ctx, const char * pass, int passlen, ASN1_TYPE * param, const EVP_CIPHER * cipher, const EVP_MD * md, int en_de) (a0,a1,d0,a2,a3,d1,d2)
int PKCS5_PBKDF2_HMAC_SHA1(const char * pass, int passlen, const unsigned char * salt, int saltlen, int iter, int keylen, unsigned char * out) (a0,d0,a1,d1,d2,d3,a2)
int PKCS5_v2_PBE_keyivgen(EVP_CIPHER_CTX * ctx, const char * pass, int passlen, ASN1_TYPE * param, const EVP_CIPHER * cipher, const EVP_MD * md, int en_de) (a0,a1,d0,a2,a3,d1,d2)
void PKCS5_PBE_add() ()
int EVP_PBE_CipherInit(ASN1_OBJECT * pbe_obj, const char * pass, int passlen, ASN1_TYPE * param, EVP_CIPHER_CTX * ctx, int en_de) (a0,a1,d0,a2,a3,d1)
int EVP_PBE_alg_add(int nid, const EVP_CIPHER * cipher, const EVP_MD * md, EVP_PBE_KEYGEN * keygen) (d0,a0,a1,a2)
void EVP_PBE_cleanup() ()
int ERR_load_EVP_strings() ()
==reserve 2
int HMAC_Init(HMAC_CTX * ctx, const void * key, int len, const EVP_MD * md) (a0,a1,d0,a2)
int HMAC_Init_ex(HMAC_CTX * ctx, const void * key, int len, const EVP_MD * md, ENGINE * impl) (a0,a1,d0,a2,a3)
int HMAC_Update(HMAC_CTX * ctx, const unsigned char * data, size_t len) (a0,a1,d0)
int HMAC_Final(HMAC_CTX * ctx, unsigned char * md, unsigned int * len) (a0,a1,a2)
unsigned char * HMAC(const EVP_MD * evp_md, const void * key, int key_len, const unsigned char * data, size_t data_len, unsigned char * md, unsigned int * md_len) (a0,a1,d0,a2,d1,a3,d2)
==reserve 55
OPENSSL_LHASH * OPENSSL_LH_new(OPENSSL_LH_HASHFUNC h, OPENSSL_LH_COMPFUNC c) (a0,a1)
void OPENSSL_LH_free(OPENSSL_LHASH * lh) (a0)
void * OPENSSL_LH_insert(OPENSSL_LHASH * lh, void * data) (a0,a1)
void * OPENSSL_LH_delete(OPENSSL_LHASH * lh, const void * data) (a0,a1)
void * OPENSSL_LH_retrieve(OPENSSL_LHASH * lh, const void * data) (a0,a1)
void OPENSSL_LH_doall(OPENSSL_LHASH * lh, OPENSSL_LH_DOALL_FUNC func) (a0,a1)
void OPENSSL_LH_doall_arg(OPENSSL_LHASH * lh, OPENSSL_LH_DOALL_FUNCARG func, void * arg) (a0,a1,a2)
unsigned long OPENSSL_LH_strhash(const char * c) (a0)
unsigned long OPENSSL_LH_num_items(const OPENSSL_LHASH * lh) (a0)
void OPENSSL_LH_stats_bio(const OPENSSL_LHASH * lh, BIO * out) (a0,a1)
void OPENSSL_LH_node_stats_bio(const OPENSSL_LHASH * lh, BIO * out) (a0,a1)
void OPENSSL_LH_node_usage_stats_bio(const OPENSSL_LHASH * lh, BIO * out) (a0,a1)
int OBJ_NAME_init() ()
int OBJ_NAME_new_index(unsigned long (*hash_func)(const char *), int (*cmp_func)(const char *, const char *), void (*free_func)(const char *, int, const char *)) (a0,a1,a2)
const char * OBJ_NAME_get(const char * name, int type) (a0,d0)
int OBJ_NAME_add(const char * name, int type, const char * data) (a0,d0,a1)
int OBJ_NAME_remove(const char * name, int type) (a0,d0)
void OBJ_NAME_cleanup(int type) (d0)
void OBJ_NAME_do_all(int type, void (*fn)(const OBJ_NAME *, void *arg), void * arg) (d0,a0,a1)
void OBJ_NAME_do_all_sorted(int type, void (*fn)(const OBJ_NAME *, void *arg), void * arg) (d0,a0,a1)
ASN1_OBJECT * OBJ_dup(const ASN1_OBJECT * o) (a0)
ASN1_OBJECT * OBJ_nid2obj(int n) (d0)
const char * OBJ_nid2ln(int n) (d0)
const char * OBJ_nid2sn(int n) (d0)
int OBJ_obj2nid(const ASN1_OBJECT * o) (a0)
ASN1_OBJECT * OBJ_txt2obj(const char * s, int no_name) (a0,d0)
int OBJ_obj2txt(char * buf, int buf_len, const ASN1_OBJECT * a, int no_name) (a0,d0,a1,d1)
int OBJ_txt2nid(const char * s) (a0)
int OBJ_ln2nid(const char * s) (a0)
int OBJ_sn2nid(const char * s) (a0)
int OBJ_cmp(const ASN1_OBJECT * a, const ASN1_OBJECT * b) (a0,a1)
==reserve 1
int OBJ_new_nid(int num) (d0)
int OBJ_add_object(const ASN1_OBJECT * obj) (a0)
int OBJ_create(const char * oid, const char * sn, const char * ln) (a0,a1,a2)
==reserve 1
int OBJ_create_objects(BIO * in) (a0)
int ERR_load_OBJ_strings() ()
OCSP_RESPONSE * OCSP_sendreq_bio(BIO * b, const char * path, OCSP_REQUEST * req) (a0,a1,a2)
OCSP_CERTID * OCSP_cert_to_id(const EVP_MD * dgst, const X509 * subject, const X509 * issuer) (a0,a1,a2)
OCSP_CERTID * OCSP_cert_id_new(const EVP_MD * dgst, const X509_NAME * issuerName, const ASN1_BIT_STRING * issuerKey, const ASN1_INTEGER * serialNumber) (a0,a1,a2,a3)
OCSP_ONEREQ * OCSP_request_add0_id(OCSP_REQUEST * req, OCSP_CERTID * cid) (a0,a1)
int OCSP_request_add1_nonce(OCSP_REQUEST * req, unsigned char * val, int len) (a0,a1,d0)
int OCSP_basic_add1_nonce(OCSP_BASICRESP * resp, unsigned char * val, int len) (a0,a1,d0)
int OCSP_check_nonce(OCSP_REQUEST * req, OCSP_BASICRESP * bs) (a0,a1)
int OCSP_copy_nonce(OCSP_BASICRESP * resp, OCSP_REQUEST * req) (a0,a1)
int OCSP_request_set1_name(OCSP_REQUEST * req, const X509_NAME * nm) (a0,a1)
int OCSP_request_add1_cert(OCSP_REQUEST * req, X509 * cert) (a0,a1)
int OCSP_request_sign(OCSP_REQUEST * req, X509 * signer, EVP_PKEY * key, const EVP_MD * dgst, STACK_OF(X509) * certs, unsigned long flags) (a0,a1,a2,a3,d0,d1)
int OCSP_response_status(OCSP_RESPONSE * resp) (a0)
OCSP_BASICRESP * OCSP_response_get1_basic(OCSP_RESPONSE * resp) (a0)
int OCSP_resp_count(OCSP_BASICRESP * bs) (a0)
OCSP_SINGLERESP * OCSP_resp_get0(OCSP_BASICRESP * bs, int idx) (a0,d0)
int OCSP_resp_find(OCSP_BASICRESP * bs, OCSP_CERTID * id, int last) (a0,a1,d0)
int OCSP_single_get0_status(OCSP_SINGLERESP * single, int * reason, ASN1_GENERALIZEDTIME ** revtime, ASN1_GENERALIZEDTIME ** thisupd, ASN1_GENERALIZEDTIME ** nextupd) (a0,a1,a2,a3,d0)
int OCSP_resp_find_status(OCSP_BASICRESP * bs, OCSP_CERTID * id, int * status, int * reason, ASN1_GENERALIZEDTIME ** revtime, ASN1_GENERALIZEDTIME ** thisupd, ASN1_GENERALIZEDTIME ** nextupd) (a0,a1,a2,a3,d0,d1,d2)
int OCSP_check_validity(ASN1_GENERALIZEDTIME * thisupd, ASN1_GENERALIZEDTIME * nextupd, long sec, long maxsec) (a0,a1,d0,d1)
int OCSP_request_verify(OCSP_REQUEST * req, STACK_OF(X509) * certs, X509_STORE * store, unsigned long flags) (a0,a1,a2,d0)
int OBSOLETE_OCSP_parse_url(const char * url, char ** phost, char ** pport, char ** ppath, int * pssl) (a0,a1,a2,a3,d0)
int OCSP_id_issuer_cmp(const OCSP_CERTID * a, const OCSP_CERTID * b) (a0,a1)
int OCSP_id_cmp(const OCSP_CERTID * a, const OCSP_CERTID * b) (a0,a1)
int OCSP_request_onereq_count(OCSP_REQUEST * req) (a0)
OCSP_ONEREQ * OCSP_request_onereq_get0(OCSP_REQUEST * req, int i) (a0,d0)
OCSP_CERTID * OCSP_onereq_get0_id(OCSP_ONEREQ * one) (a0)
int OCSP_id_get0_info(ASN1_OCTET_STRING ** piNameHash, ASN1_OBJECT ** pmd, ASN1_OCTET_STRING ** pikeyHash, ASN1_INTEGER ** pserial, OCSP_CERTID * cid) (a0,a1,a2,a3,d0)
int OCSP_request_is_signed(OCSP_REQUEST * req) (a0)
OCSP_RESPONSE * OCSP_response_create(int status, OCSP_BASICRESP * bs) (d0,a0)
OCSP_SINGLERESP * OCSP_basic_add1_status(OCSP_BASICRESP * rsp, OCSP_CERTID * cid, int status, int reason, ASN1_TIME * revtime, ASN1_TIME * thisupd, ASN1_TIME * nextupd) (a0,a1,d0,d1,a2,a3,d2)
int OCSP_basic_add1_cert(OCSP_BASICRESP * resp, X509 * cert) (a0,a1)
int OCSP_basic_sign(OCSP_BASICRESP * brsp, X509 * signer, EVP_PKEY * key, const EVP_MD * dgst, STACK_OF(X509) * certs, unsigned long flags) (a0,a1,a2,a3,d0,d1)
==reserve 1
X509_EXTENSION * OCSP_crlID_new(const char * url, long * n, char * tim) (a0,a1,a2)
X509_EXTENSION * OCSP_accept_responses_new(char ** oids) (a0)
X509_EXTENSION * OCSP_archive_cutoff_new(char * tim) (a0)
X509_EXTENSION * OCSP_url_svcloc_new(const X509_NAME * issuer, const char ** urls) (a0,a1)
int OCSP_REQUEST_get_ext_count(OCSP_REQUEST * x) (a0)
int OCSP_REQUEST_get_ext_by_NID(OCSP_REQUEST * x, int nid, int lastpos) (a0,d0,d1)
int OCSP_REQUEST_get_ext_by_OBJ(OCSP_REQUEST * x, const ASN1_OBJECT * obj, int lastpos) (a0,a1,d0)
int OCSP_REQUEST_get_ext_by_critical(OCSP_REQUEST * x, int crit, int lastpos) (a0,d0,d1)
X509_EXTENSION * OCSP_REQUEST_get_ext(OCSP_REQUEST * x, int loc) (a0,d0)
X509_EXTENSION * OCSP_REQUEST_delete_ext(OCSP_REQUEST * x, int loc) (a0,d0)
void * OCSP_REQUEST_get1_ext_d2i(OCSP_REQUEST * x, int nid, int * crit, int * idx) (a0,d0,a1,a2)
int OCSP_REQUEST_add1_ext_i2d(OCSP_REQUEST * x, int nid, void * value, int crit, unsigned long flags) (a0,d0,a1,d1,d2)
int OCSP_REQUEST_add_ext(OCSP_REQUEST * x, X509_EXTENSION * ex, int loc) (a0,a1,d0)
int OCSP_ONEREQ_get_ext_count(OCSP_ONEREQ * x) (a0)
int OCSP_ONEREQ_get_ext_by_NID(OCSP_ONEREQ * x, int nid, int lastpos) (a0,d0,d1)
int OCSP_ONEREQ_get_ext_by_OBJ(OCSP_ONEREQ * x, const ASN1_OBJECT * obj, int lastpos) (a0,a1,d0)
int OCSP_ONEREQ_get_ext_by_critical(OCSP_ONEREQ * x, int crit, int lastpos) (a0,d0,d1)
X509_EXTENSION * OCSP_ONEREQ_get_ext(OCSP_ONEREQ * x, int loc) (a0,d0)
X509_EXTENSION * OCSP_ONEREQ_delete_ext(OCSP_ONEREQ * x, int loc) (a0,d0)
void * OCSP_ONEREQ_get1_ext_d2i(OCSP_ONEREQ * x, int nid, int * crit, int * idx) (a0,d0,a1,a2)
int OCSP_ONEREQ_add1_ext_i2d(OCSP_ONEREQ * x, int nid, void * value, int crit, unsigned long flags) (a0,d0,a1,d1,d2)
int OCSP_ONEREQ_add_ext(OCSP_ONEREQ * x, X509_EXTENSION * ex, int loc) (a0,a1,d0)
int OCSP_BASICRESP_get_ext_count(OCSP_BASICRESP * x) (a0)
int OCSP_BASICRESP_get_ext_by_NID(OCSP_BASICRESP * x, int nid, int lastpos) (a0,d0,d1)
int OCSP_BASICRESP_get_ext_by_OBJ(OCSP_BASICRESP * x, const ASN1_OBJECT * obj, int lastpos) (a0,a1,d0)
int OCSP_BASICRESP_get_ext_by_critical(OCSP_BASICRESP * x, int crit, int lastpos) (a0,d0,d1)
X509_EXTENSION * OCSP_BASICRESP_get_ext(OCSP_BASICRESP * x, int loc) (a0,d0)
X509_EXTENSION * OCSP_BASICRESP_delete_ext(OCSP_BASICRESP * x, int loc) (a0,d0)
void * OCSP_BASICRESP_get1_ext_d2i(OCSP_BASICRESP * x, int nid, int * crit, int * idx) (a0,d0,a1,a2)
int OCSP_BASICRESP_add1_ext_i2d(OCSP_BASICRESP * x, int nid, void * value, int crit, unsigned long flags) (a0,d0,a1,d1,d2)
int OCSP_BASICRESP_add_ext(OCSP_BASICRESP * x, X509_EXTENSION * ex, int loc) (a0,a1,d0)
int OCSP_SINGLERESP_get_ext_count(OCSP_SINGLERESP * x) (a0)
int OCSP_SINGLERESP_get_ext_by_NID(OCSP_SINGLERESP * x, int nid, int lastpos) (a0,d0,d1)
int OCSP_SINGLERESP_get_ext_by_OBJ(OCSP_SINGLERESP * x, const ASN1_OBJECT * obj, int lastpos) (a0,a1,d0)
int OCSP_SINGLERESP_get_ext_by_critical(OCSP_SINGLERESP * x, int crit, int lastpos) (a0,d0,d1)
X509_EXTENSION * OCSP_SINGLERESP_get_ext(OCSP_SINGLERESP * x, int loc) (a0,d0)
X509_EXTENSION * OCSP_SINGLERESP_delete_ext(OCSP_SINGLERESP * x, int loc) (a0,d0)
void * OCSP_SINGLERESP_get1_ext_d2i(OCSP_SINGLERESP * x, int nid, int * crit, int * idx) (a0,d0,a1,a2)
int OCSP_SINGLERESP_add1_ext_i2d(OCSP_SINGLERESP * x, int nid, void * value, int crit, unsigned long flags) (a0,d0,a1,d1,d2)
int OCSP_SINGLERESP_add_ext(OCSP_SINGLERESP * x, X509_EXTENSION * ex, int loc) (a0,a1,d0)
OCSP_SINGLERESP * OCSP_SINGLERESP_new() ()
void OCSP_SINGLERESP_free(OCSP_SINGLERESP * a) (a0)
OCSP_SINGLERESP * d2i_OCSP_SINGLERESP(OCSP_SINGLERESP ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_OCSP_SINGLERESP(const OCSP_SINGLERESP * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * OCSP_SINGLERESP_it() ()
OCSP_CERTSTATUS * OCSP_CERTSTATUS_new() ()
void OCSP_CERTSTATUS_free(OCSP_CERTSTATUS * a) (a0)
OCSP_CERTSTATUS * d2i_OCSP_CERTSTATUS(OCSP_CERTSTATUS ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_OCSP_CERTSTATUS(const OCSP_CERTSTATUS * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * OCSP_CERTSTATUS_it() ()
OCSP_REVOKEDINFO * OCSP_REVOKEDINFO_new() ()
void OCSP_REVOKEDINFO_free(OCSP_REVOKEDINFO * a) (a0)
OCSP_REVOKEDINFO * d2i_OCSP_REVOKEDINFO(OCSP_REVOKEDINFO ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_OCSP_REVOKEDINFO(const OCSP_REVOKEDINFO * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * OCSP_REVOKEDINFO_it() ()
OCSP_BASICRESP * OCSP_BASICRESP_new() ()
void OCSP_BASICRESP_free(OCSP_BASICRESP * a) (a0)
OCSP_BASICRESP * d2i_OCSP_BASICRESP(OCSP_BASICRESP ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_OCSP_BASICRESP(const OCSP_BASICRESP * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * OCSP_BASICRESP_it() ()
OCSP_RESPDATA * OCSP_RESPDATA_new() ()
void OCSP_RESPDATA_free(OCSP_RESPDATA * a) (a0)
OCSP_RESPDATA * d2i_OCSP_RESPDATA(OCSP_RESPDATA ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_OCSP_RESPDATA(const OCSP_RESPDATA * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * OCSP_RESPDATA_it() ()
OCSP_RESPID * OCSP_RESPID_new() ()
void OCSP_RESPID_free(OCSP_RESPID * a) (a0)
OCSP_RESPID * d2i_OCSP_RESPID(OCSP_RESPID ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_OCSP_RESPID(const OCSP_RESPID * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * OCSP_RESPID_it() ()
OCSP_RESPONSE * OCSP_RESPONSE_new() ()
void OCSP_RESPONSE_free(OCSP_RESPONSE * a) (a0)
OCSP_RESPONSE * d2i_OCSP_RESPONSE(OCSP_RESPONSE ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_OCSP_RESPONSE(const OCSP_RESPONSE * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * OCSP_RESPONSE_it() ()
OCSP_RESPBYTES * OCSP_RESPBYTES_new() ()
void OCSP_RESPBYTES_free(OCSP_RESPBYTES * a) (a0)
OCSP_RESPBYTES * d2i_OCSP_RESPBYTES(OCSP_RESPBYTES ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_OCSP_RESPBYTES(const OCSP_RESPBYTES * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * OCSP_RESPBYTES_it() ()
OCSP_ONEREQ * OCSP_ONEREQ_new() ()
void OCSP_ONEREQ_free(OCSP_ONEREQ * a) (a0)
OCSP_ONEREQ * d2i_OCSP_ONEREQ(OCSP_ONEREQ ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_OCSP_ONEREQ(const OCSP_ONEREQ * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * OCSP_ONEREQ_it() ()
OCSP_CERTID * OCSP_CERTID_new() ()
void OCSP_CERTID_free(OCSP_CERTID * a) (a0)
OCSP_CERTID * d2i_OCSP_CERTID(OCSP_CERTID ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_OCSP_CERTID(const OCSP_CERTID * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * OCSP_CERTID_it() ()
OCSP_REQUEST * OCSP_REQUEST_new() ()
void OCSP_REQUEST_free(OCSP_REQUEST * a) (a0)
OCSP_REQUEST * d2i_OCSP_REQUEST(OCSP_REQUEST ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_OCSP_REQUEST(const OCSP_REQUEST * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * OCSP_REQUEST_it() ()
OCSP_SIGNATURE * OCSP_SIGNATURE_new() ()
void OCSP_SIGNATURE_free(OCSP_SIGNATURE * a) (a0)
OCSP_SIGNATURE * d2i_OCSP_SIGNATURE(OCSP_SIGNATURE ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_OCSP_SIGNATURE(const OCSP_SIGNATURE * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * OCSP_SIGNATURE_it() ()
OCSP_REQINFO * OCSP_REQINFO_new() ()
void OCSP_REQINFO_free(OCSP_REQINFO * a) (a0)
OCSP_REQINFO * d2i_OCSP_REQINFO(OCSP_REQINFO ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_OCSP_REQINFO(const OCSP_REQINFO * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * OCSP_REQINFO_it() ()
OCSP_CRLID * OCSP_CRLID_new() ()
void OCSP_CRLID_free(OCSP_CRLID * a) (a0)
OCSP_CRLID * d2i_OCSP_CRLID(OCSP_CRLID ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_OCSP_CRLID(const OCSP_CRLID * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * OCSP_CRLID_it() ()
OCSP_SERVICELOC * OCSP_SERVICELOC_new() ()
void OCSP_SERVICELOC_free(OCSP_SERVICELOC * a) (a0)
OCSP_SERVICELOC * d2i_OCSP_SERVICELOC(OCSP_SERVICELOC ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_OCSP_SERVICELOC(const OCSP_SERVICELOC * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * OCSP_SERVICELOC_it() ()
const char * OCSP_response_status_str(long s) (d0)
const char * OCSP_cert_status_str(long s) (d0)
const char * OCSP_crl_reason_str(long s) (d0)
int OCSP_REQUEST_print(BIO * bp, OCSP_REQUEST * a, unsigned long flags) (a0,a1,d0)
int OCSP_RESPONSE_print(BIO * bp, OCSP_RESPONSE * o, unsigned long flags) (a0,a1,d0)
int OCSP_basic_verify(OCSP_BASICRESP * bs, STACK_OF(X509) * certs, X509_STORE * st, unsigned long flags) (a0,a1,a2,d0)
int ERR_load_OCSP_strings() ()
int PEM_get_EVP_CIPHER_INFO(char * header, EVP_CIPHER_INFO * cipher) (a0,a1)
int PEM_do_header(EVP_CIPHER_INFO * cipher, unsigned char * data, long * len, pem_password_cb * callback, void * u) (a0,a1,a2,a3,d0)
int PEM_read_bio(BIO * bp, char ** name, char ** header, unsigned char ** data, long * len) (a0,a1,a2,a3,d0)
int PEM_write_bio(BIO * bp, const char * name, const char * hdr, const unsigned char * data, long len) (a0,a1,a2,a3,d0)
int PEM_bytes_read_bio(unsigned char ** pdata, long * plen, char ** pnm, const char * name, BIO * bp, pem_password_cb * cb, void * u) (a0,a1,a2,a3,d0,d1,d2)
void * PEM_ASN1_read_bio(d2i_of_void * d2i, const char * name, BIO * bp, void ** x, pem_password_cb * cb, void * u) (a0,a1,a2,a3,d0,d1)
int PEM_ASN1_write_bio(i2d_of_void * i2d, const char * name, BIO * bp, const void * x, const EVP_CIPHER * enc, const unsigned char * kstr, int klen, pem_password_cb * cb, void * u) (a0,a1,a2,a3,d0,d1,d2,d3,d4)
STACK_OF(X509_INFO) * PEM_X509_INFO_read_bio(BIO * bp, STACK_OF(X509_INFO) * sk, pem_password_cb * cb, void * u) (a0,a1,a2,a3)
int PEM_X509_INFO_write_bio(BIO * bp, const X509_INFO * xi, EVP_CIPHER * enc, const unsigned char * kstr, int klen, pem_password_cb * cd, void * u) (a0,a1,a2,a3,d0,d1,d2)
==reserve 3
int PEM_SignInit(EVP_MD_CTX * ctx, EVP_MD * type) (a0,a1)
int PEM_SignUpdate(EVP_MD_CTX * ctx, const unsigned char * d, unsigned int cnt) (a0,a1,d0)
int PEM_SignFinal(EVP_MD_CTX * ctx, unsigned char * sigret, unsigned int * siglen, EVP_PKEY * pkey) (a0,a1,a2,a3)
int PEM_def_callback(char * buf, int num, int w, void * key) (a0,d0,d1,a1)
void PEM_proc_type(char * buf, int type) (a0,d0)
void PEM_dek_info(char * buf, const char * type, int len, const char * str) (a0,a1,d0,a2)
X509 * PEM_read_bio_X509(BIO * bp, X509 ** x, pem_password_cb * cb, void * u) (a0,a1,a2,a3)
int PEM_write_bio_X509(BIO * bp, const X509 * x) (a0,a1)
X509 * PEM_read_bio_X509_AUX(BIO * bp, X509 ** x, pem_password_cb * cb, void * u) (a0,a1,a2,a3)
int PEM_write_bio_X509_AUX(BIO * bp, const X509 * x) (a0,a1)
X509_REQ * PEM_read_bio_X509_REQ(BIO * bp, X509_REQ ** x, pem_password_cb * cb, void * u) (a0,a1,a2,a3)
int PEM_write_bio_X509_REQ(BIO * bp, const X509_REQ * x) (a0,a1)
int PEM_write_bio_X509_REQ_NEW(BIO * bp, const X509_REQ * x) (a0,a1)
X509_CRL * PEM_read_bio_X509_CRL(BIO * bp, X509_CRL ** x, pem_password_cb * cb, void * u) (a0,a1,a2,a3)
int PEM_write_bio_X509_CRL(BIO * bp, const X509_CRL * x) (a0,a1)
PKCS7 * PEM_read_bio_PKCS7(BIO * bp, PKCS7 ** x, pem_password_cb * cb, void * u) (a0,a1,a2,a3)
int PEM_write_bio_PKCS7(BIO * bp, const PKCS7 * x) (a0,a1)
NETSCAPE_CERT_SEQUENCE * PEM_read_bio_NETSCAPE_CERT_SEQUENCE(BIO * bp, NETSCAPE_CERT_SEQUENCE ** x, pem_password_cb * cb, void * u) (a0,a1,a2,a3)
int PEM_write_bio_NETSCAPE_CERT_SEQUENCE(BIO * bp, const NETSCAPE_CERT_SEQUENCE * x) (a0,a1)
X509_SIG * PEM_read_bio_PKCS8(BIO * bp, X509_SIG ** x, pem_password_cb * cb, void * u) (a0,a1,a2,a3)
int PEM_write_bio_PKCS8(BIO * bp, const X509_SIG * x) (a0,a1)
PKCS8_PRIV_KEY_INFO * PEM_read_bio_PKCS8_PRIV_KEY_INFO(BIO * bp, PKCS8_PRIV_KEY_INFO ** x, pem_password_cb * cb, void * u) (a0,a1,a2,a3)
int PEM_write_bio_PKCS8_PRIV_KEY_INFO(BIO * bp, const PKCS8_PRIV_KEY_INFO * x) (a0,a1)
RSA * PEM_read_bio_RSAPrivateKey(BIO * bp, RSA ** x, pem_password_cb * cb, void * u) (a0,a1,a2,a3)
int PEM_write_bio_RSAPrivateKey(BIO * bp, const RSA * x, const EVP_CIPHER * enc, const unsigned char * kstr, int klen, pem_password_cb * cb, void * u) (a0,a1,a2,a3,d0,d1,d2)
RSA * PEM_read_bio_RSAPublicKey(BIO * bp, RSA ** x, pem_password_cb * cb, void * u) (a0,a1,a2,a3)
int PEM_write_bio_RSAPublicKey(BIO * bp, const RSA * x) (a0,a1)
RSA * PEM_read_bio_RSA_PUBKEY(BIO * bp, RSA ** x, pem_password_cb * cb, void * u) (a0,a1,a2,a3)
int PEM_write_bio_RSA_PUBKEY(BIO * bp, const RSA * x) (a0,a1)
DSA * PEM_read_bio_DSAPrivateKey(BIO * bp, DSA ** x, pem_password_cb * cb, void * u) (a0,a1,a2,a3)
int PEM_write_bio_DSAPrivateKey(BIO * bp, const DSA * x, const EVP_CIPHER * enc, const unsigned char * kstr, int klen, pem_password_cb * cb, void * u) (a0,a1,a2,a3,d0,d1,d2)
DSA * PEM_read_bio_DSA_PUBKEY(BIO * bp, DSA ** x, pem_password_cb * cb, void * u) (a0,a1,a2,a3)
int PEM_write_bio_DSA_PUBKEY(BIO * bp, const DSA * x) (a0,a1)
DSA * PEM_read_bio_DSAparams(BIO * bp, DSA ** x, pem_password_cb * cb, void * u) (a0,a1,a2,a3)
int PEM_write_bio_DSAparams(BIO * bp, const DSA * x) (a0,a1)
DH * PEM_read_bio_DHparams(BIO * bp, DH ** x, pem_password_cb * cb, void * u) (a0,a1,a2,a3)
int PEM_write_bio_DHparams(BIO * bp, const DH * x) (a0,a1)
EVP_PKEY * PEM_read_bio_PrivateKey(BIO * bp, EVP_PKEY ** x, pem_password_cb * cb, void * u) (a0,a1,a2,a3)
int PEM_write_bio_PrivateKey(BIO * bp, const EVP_PKEY * x, const EVP_CIPHER * enc, const unsigned char * kstr, int klen, pem_password_cb * cb, void * u) (a0,a1,a2,a3,d0,d1,d2)
EVP_PKEY * PEM_read_bio_PUBKEY(BIO * bp, EVP_PKEY ** x, pem_password_cb * cb, void * u) (a0,a1,a2,a3)
int PEM_write_bio_PUBKEY(BIO * bp, const EVP_PKEY * x) (a0,a1)
int PEM_write_bio_PKCS8PrivateKey_nid(BIO * bp, const EVP_PKEY * x, int nid, const char * kstr, int klen, pem_password_cb * cb, void * u) (a0,a1,d0,a2,d1,a3,d2)
int PEM_write_bio_PKCS8PrivateKey(BIO * bp, const EVP_PKEY * x, const EVP_CIPHER * enc, const char * kstr, int klen, pem_password_cb * cb, void * u) (a0,a1,a2,a3,d0,d1,d2)
int i2d_PKCS8PrivateKey_bio(BIO * bp, const EVP_PKEY * x, const EVP_CIPHER * enc, const char * kstr, int klen, pem_password_cb * cb, void * u) (a0,a1,a2,a3,d0,d1,d2)
int i2d_PKCS8PrivateKey_nid_bio(BIO * bp, const EVP_PKEY * x, int nid, const char * kstr, int klen, pem_password_cb * cb, void * u) (a0,a1,d0,a2,d1,a3,d2)
EVP_PKEY * d2i_PKCS8PrivateKey_bio(BIO * bp, EVP_PKEY ** x, pem_password_cb * cb, void * u) (a0,a1,a2,a3)
int ERR_load_PEM_strings() ()
PKCS12_SAFEBAG * OBSOLETE_PKCS12_x5092certbag(X509 * x509) (a0)
PKCS12_SAFEBAG * OBSOLETE_PKCS12_x509crl2certbag(X509_CRL * crl) (a0)
X509 * OBSOLETE_PKCS12_certbag2x509(PKCS12_SAFEBAG * bag) (a0)
==reserve 1
PKCS12_SAFEBAG * PKCS12_item_pack_safebag(void * obj, const ASN1_ITEM * it, int nid1, int nid2) (a0,a1,d0,d1)
PKCS12_SAFEBAG * OBSOLETE_PKCS12_MAKE_KEYBAG(PKCS8_PRIV_KEY_INFO * p8) (a0)
PKCS8_PRIV_KEY_INFO * PKCS8_decrypt(const X509_SIG * p8, const char * pass, int passlen) (a0,a1,d0)
PKCS8_PRIV_KEY_INFO * PKCS12_decrypt_skey(const PKCS12_SAFEBAG * bag, const char * pass, int passlen) (a0,a1,d0)
X509_SIG * PKCS8_encrypt(int pbe_nid, const EVP_CIPHER * cipher, const char * pass, int passlen, unsigned char * salt, int saltlen, int iter, PKCS8_PRIV_KEY_INFO * p8) (d0,a0,a1,d1,a2,d2,d3,a3)
PKCS12_SAFEBAG * OBSOLETE_PKCS12_MAKE_SHKEYBAG(int pbe_nid, const char * pass, int passlen, unsigned char * salt, int saltlen, int iter, PKCS8_PRIV_KEY_INFO * p8) (d0,a0,d1,a1,d2,d3,a2)
PKCS7 * PKCS12_pack_p7data(STACK_OF(PKCS12_SAFEBAG) * sk) (a0)
STACK_OF(PKCS12_SAFEBAG) * PKCS12_unpack_p7data(PKCS7 * p7) (a0)
PKCS7 * PKCS12_pack_p7encdata(int pbe_nid, const char * pass, int passlen, unsigned char * salt, int saltlen, int iter, STACK_OF(PKCS12_SAFEBAG) * bags) (d0,a0,d1,a1,d2,d3,a2)
STACK_OF(PKCS12_SAFEBAG) * PKCS12_unpack_p7encdata(PKCS7 * p7, const char * pass, int passlen) (a0,a1,d0)
int PKCS12_pack_authsafes(PKCS12 * p12, STACK_OF(PKCS7) * safes) (a0,a1)
STACK_OF(PKCS7) * PKCS12_unpack_authsafes(const PKCS12 * p12) (a0)
int PKCS12_add_localkeyid(PKCS12_SAFEBAG * bag, unsigned char * name, int namelen) (a0,a1,d0)
int PKCS12_add_friendlyname_asc(PKCS12_SAFEBAG * bag, const char * name, int namelen) (a0,a1,d0)
int PKCS12_add_CSPName_asc(PKCS12_SAFEBAG * bag, const char * name, int namelen) (a0,a1,d0)
int PKCS12_add_friendlyname_uni(PKCS12_SAFEBAG * bag, const unsigned char * name, int namelen) (a0,a1,d0)
int PKCS8_add_keyusage(PKCS8_PRIV_KEY_INFO * p8, int usage) (a0,d0)
ASN1_TYPE * PKCS12_get_attr_gen(const STACK_OF(X509_ATTRIBUTE) * attrs, int attr_nid) (a0,d0)
char * PKCS12_get_friendlyname(PKCS12_SAFEBAG * bag) (a0)
unsigned char * PKCS12_pbe_crypt(const X509_ALGOR * algor, const char * pass, int passlen, const unsigned char * in, int inlen, unsigned char ** data, int * datalen, int en_de) (a0,a1,d0,a2,d1,a3,d2,d3)
void * PKCS12_item_decrypt_d2i(const X509_ALGOR * algor, const ASN1_ITEM * it, const char * pass, int passlen, const ASN1_OCTET_STRING * oct, int zbuf) (a0,a1,a2,d0,a3,d1)
ASN1_OCTET_STRING * PKCS12_item_i2d_encrypt(X509_ALGOR * algor, const ASN1_ITEM * it, const char * pass, int passlen, void * obj, int zbuf) (a0,a1,a2,d0,a3,d1)
PKCS12 * PKCS12_init(int mode) (d0)
int PKCS12_key_gen_asc(const char * pass, int passlen, unsigned char * salt, int saltlen, int id, int iter, int n, unsigned char * out, const EVP_MD * md_type) (a0,d0,a1,d1,d2,d3,d4,a2,a3)
int PKCS12_key_gen_uni(unsigned char * pass, int passlen, unsigned char * salt, int saltlen, int id, int iter, int n, unsigned char * out, const EVP_MD * md_type) (a0,d0,a1,d1,d2,d3,d4,a2,a3)
int PKCS12_PBE_keyivgen(EVP_CIPHER_CTX * ctx, const char * pass, int passlen, ASN1_TYPE * param, const EVP_CIPHER * cipher, const EVP_MD * md_type, int en_de) (a0,a1,d0,a2,a3,d1,d2)
int PKCS12_gen_mac(PKCS12 * p12, const char * pass, int passlen, unsigned char * mac, unsigned int * maclen) (a0,a1,d0,a2,a3)
int PKCS12_verify_mac(PKCS12 * p12, const char * pass, int passlen) (a0,a1,d0)
int PKCS12_set_mac(PKCS12 * p12, const char * pass, int passlen, unsigned char * salt, int saltlen, int iter, const EVP_MD * md_type) (a0,a1,d0,a2,d1,d2,a3)
int PKCS12_setup_mac(PKCS12 * p12, int iter, unsigned char * salt, int saltlen, const EVP_MD * md_type) (a0,d0,a1,d1,a2)
unsigned char * OPENSSL_asc2uni(const char * asc, int asclen, unsigned char ** uni, int * unilen) (a0,d0,a1,a2)
char * OPENSSL_uni2asc(const unsigned char * uni, int unilen) (a0,d0)
PKCS12 * PKCS12_new() ()
void PKCS12_free(PKCS12 * a) (a0)
PKCS12 * d2i_PKCS12(PKCS12 ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_PKCS12(const PKCS12 * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * PKCS12_it() ()
PKCS12_MAC_DATA * PKCS12_MAC_DATA_new() ()
void PKCS12_MAC_DATA_free(PKCS12_MAC_DATA * a) (a0)
PKCS12_MAC_DATA * d2i_PKCS12_MAC_DATA(PKCS12_MAC_DATA ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_PKCS12_MAC_DATA(const PKCS12_MAC_DATA * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * PKCS12_MAC_DATA_it() ()
PKCS12_SAFEBAG * PKCS12_SAFEBAG_new() ()
void PKCS12_SAFEBAG_free(PKCS12_SAFEBAG * a) (a0)
PKCS12_SAFEBAG * d2i_PKCS12_SAFEBAG(PKCS12_SAFEBAG ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_PKCS12_SAFEBAG(const PKCS12_SAFEBAG * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * PKCS12_SAFEBAG_it() ()
PKCS12_BAGS * PKCS12_BAGS_new() ()
void PKCS12_BAGS_free(PKCS12_BAGS * a) (a0)
PKCS12_BAGS * d2i_PKCS12_BAGS(PKCS12_BAGS ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_PKCS12_BAGS(const PKCS12_BAGS * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * PKCS12_BAGS_it() ()
const ASN1_ITEM * PKCS12_SAFEBAGS_it() ()
const ASN1_ITEM * PKCS12_AUTHSAFES_it() ()
void PKCS12_PBE_add() ()
int PKCS12_parse(PKCS12 * p12, const char * pass, EVP_PKEY ** pkey, X509 ** cert, STACK_OF(X509) ** ca) (a0,a1,a2,a3,d0)
PKCS12 * PKCS12_create(const char * pass, const char * name, EVP_PKEY * pkey, X509 * cert, STACK_OF(X509) * ca, int nid_key, int nid_cert, int iter, int mac_iter, int keytype) (a0,a1,a2,a3,d0,d1,d2,d3,d4,d5)
int i2d_PKCS12_bio(BIO * bp, const PKCS12 * p12) (a0,a1)
PKCS12 * d2i_PKCS12_bio(BIO * bp, PKCS12 ** p12) (a0,a1)
int PKCS12_newpass(PKCS12 * p12, const char * oldpass, const char * newpass) (a0,a1,a2)
int ERR_load_PKCS12_strings() ()
int PKCS7_ISSUER_AND_SERIAL_digest(PKCS7_ISSUER_AND_SERIAL * data, const EVP_MD * type, unsigned char * md, unsigned int * len) (a0,a1,a2,a3)
PKCS7 * PKCS7_dup(const PKCS7 * p7) (a0)
PKCS7 * d2i_PKCS7_bio(BIO * bp, PKCS7 ** p7) (a0,a1)
int i2d_PKCS7_bio(BIO * bp, const PKCS7 * p7) (a0,a1)
PKCS7_ISSUER_AND_SERIAL * PKCS7_ISSUER_AND_SERIAL_new() ()
void PKCS7_ISSUER_AND_SERIAL_free(PKCS7_ISSUER_AND_SERIAL * a) (a0)
PKCS7_ISSUER_AND_SERIAL * d2i_PKCS7_ISSUER_AND_SERIAL(PKCS7_ISSUER_AND_SERIAL ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_PKCS7_ISSUER_AND_SERIAL(const PKCS7_ISSUER_AND_SERIAL * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * PKCS7_ISSUER_AND_SERIAL_it() ()
PKCS7_SIGNER_INFO * PKCS7_SIGNER_INFO_new() ()
void PKCS7_SIGNER_INFO_free(PKCS7_SIGNER_INFO * a) (a0)
PKCS7_SIGNER_INFO * d2i_PKCS7_SIGNER_INFO(PKCS7_SIGNER_INFO ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_PKCS7_SIGNER_INFO(const PKCS7_SIGNER_INFO * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * PKCS7_SIGNER_INFO_it() ()
PKCS7_RECIP_INFO * PKCS7_RECIP_INFO_new() ()
void PKCS7_RECIP_INFO_free(PKCS7_RECIP_INFO * a) (a0)
PKCS7_RECIP_INFO * d2i_PKCS7_RECIP_INFO(PKCS7_RECIP_INFO ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_PKCS7_RECIP_INFO(const PKCS7_RECIP_INFO * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * PKCS7_RECIP_INFO_it() ()
PKCS7_SIGNED * PKCS7_SIGNED_new() ()
void PKCS7_SIGNED_free(PKCS7_SIGNED * a) (a0)
PKCS7_SIGNED * d2i_PKCS7_SIGNED(PKCS7_SIGNED ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_PKCS7_SIGNED(const PKCS7_SIGNED * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * PKCS7_SIGNED_it() ()
PKCS7_ENC_CONTENT * PKCS7_ENC_CONTENT_new() ()
void PKCS7_ENC_CONTENT_free(PKCS7_ENC_CONTENT * a) (a0)
PKCS7_ENC_CONTENT * d2i_PKCS7_ENC_CONTENT(PKCS7_ENC_CONTENT ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_PKCS7_ENC_CONTENT(const PKCS7_ENC_CONTENT * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * PKCS7_ENC_CONTENT_it() ()
PKCS7_ENVELOPE * PKCS7_ENVELOPE_new() ()
void PKCS7_ENVELOPE_free(PKCS7_ENVELOPE * a) (a0)
PKCS7_ENVELOPE * d2i_PKCS7_ENVELOPE(PKCS7_ENVELOPE ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_PKCS7_ENVELOPE(const PKCS7_ENVELOPE * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * PKCS7_ENVELOPE_it() ()
PKCS7_SIGN_ENVELOPE * PKCS7_SIGN_ENVELOPE_new() ()
void PKCS7_SIGN_ENVELOPE_free(PKCS7_SIGN_ENVELOPE * a) (a0)
PKCS7_SIGN_ENVELOPE * d2i_PKCS7_SIGN_ENVELOPE(PKCS7_SIGN_ENVELOPE ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_PKCS7_SIGN_ENVELOPE(const PKCS7_SIGN_ENVELOPE * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * PKCS7_SIGN_ENVELOPE_it() ()
PKCS7_DIGEST * PKCS7_DIGEST_new() ()
void PKCS7_DIGEST_free(PKCS7_DIGEST * a) (a0)
PKCS7_DIGEST * d2i_PKCS7_DIGEST(PKCS7_DIGEST ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_PKCS7_DIGEST(const PKCS7_DIGEST * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * PKCS7_DIGEST_it() ()
PKCS7_ENCRYPT * PKCS7_ENCRYPT_new() ()
void PKCS7_ENCRYPT_free(PKCS7_ENCRYPT * a) (a0)
PKCS7_ENCRYPT * d2i_PKCS7_ENCRYPT(PKCS7_ENCRYPT ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_PKCS7_ENCRYPT(const PKCS7_ENCRYPT * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * PKCS7_ENCRYPT_it() ()
PKCS7 * PKCS7_new() ()
void PKCS7_free(PKCS7 * a) (a0)
PKCS7 * d2i_PKCS7(PKCS7 ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_PKCS7(const PKCS7 * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * PKCS7_it() ()
const ASN1_ITEM * PKCS7_ATTR_SIGN_it() ()
const ASN1_ITEM * PKCS7_ATTR_VERIFY_it() ()
long PKCS7_ctrl(PKCS7 * p7, int cmd, long larg, char * parg) (a0,d0,d1,a1)
int PKCS7_set_type(PKCS7 * p7, int type) (a0,d0)
int PKCS7_set_content(PKCS7 * p7, PKCS7 * p7_data) (a0,a1)
int PKCS7_SIGNER_INFO_set(PKCS7_SIGNER_INFO * p7i, X509 * x509, EVP_PKEY * pkey, const EVP_MD * dgst) (a0,a1,a2,a3)
int PKCS7_add_signer(PKCS7 * p7, PKCS7_SIGNER_INFO * p7i) (a0,a1)
int PKCS7_add_certificate(PKCS7 * p7, X509 * cert) (a0,a1)
int PKCS7_add_crl(PKCS7 * p7, X509_CRL * crl) (a0,a1)
int PKCS7_content_new(PKCS7 * p7, int nid) (a0,d0)
int PKCS7_dataVerify(X509_STORE * cert_store, X509_STORE_CTX * ctx, BIO * bio, PKCS7 * p7, PKCS7_SIGNER_INFO * si) (a0,a1,a2,a3,d0)
int PKCS7_signatureVerify(BIO * bio, PKCS7 * p7, PKCS7_SIGNER_INFO * si, X509 * signer) (a0,a1,a2,a3)
BIO * PKCS7_dataInit(PKCS7 * p7, BIO * bio) (a0,a1)
int PKCS7_dataFinal(PKCS7 * p7, BIO * bio) (a0,a1)
BIO * PKCS7_dataDecode(PKCS7 * p7, EVP_PKEY * pkey, BIO * in_bio, X509 * pcert) (a0,a1,a2,a3)
PKCS7_SIGNER_INFO * PKCS7_add_signature(PKCS7 * p7, X509 * x509, EVP_PKEY * pkey, const EVP_MD * dgst) (a0,a1,a2,a3)
X509 * PKCS7_cert_from_signer_info(PKCS7 * p7, PKCS7_SIGNER_INFO * si) (a0,a1)
STACK_OF(PKCS7_SIGNER_INFO) * PKCS7_get_signer_info(PKCS7 * p7) (a0)
PKCS7_RECIP_INFO * PKCS7_add_recipient(PKCS7 * p7, X509 * x509) (a0,a1)
int PKCS7_add_recipient_info(PKCS7 * p7, PKCS7_RECIP_INFO * ri) (a0,a1)
int PKCS7_RECIP_INFO_set(PKCS7_RECIP_INFO * p7i, X509 * x509) (a0,a1)
int PKCS7_set_cipher(PKCS7 * p7, const EVP_CIPHER * cipher) (a0,a1)
PKCS7_ISSUER_AND_SERIAL * PKCS7_get_issuer_and_serial(PKCS7 * p7, int idx) (a0,d0)
ASN1_OCTET_STRING * PKCS7_digest_from_attributes(STACK_OF(X509_ATTRIBUTE) * sk) (a0)
int PKCS7_add_signed_attribute(PKCS7_SIGNER_INFO * p7si, int nid, int type, void * data) (a0,d0,d1,a1)
int PKCS7_add_attribute(PKCS7_SIGNER_INFO * p7si, int nid, int atrtype, void * value) (a0,d0,d1,a1)
ASN1_TYPE * PKCS7_get_attribute(const PKCS7_SIGNER_INFO * si, int nid) (a0,d0)
ASN1_TYPE * PKCS7_get_signed_attribute(const PKCS7_SIGNER_INFO * si, int nid) (a0,d0)
int PKCS7_set_signed_attributes(PKCS7_SIGNER_INFO * p7si, STACK_OF(X509_ATTRIBUTE) * sk) (a0,a1)
int PKCS7_set_attributes(PKCS7_SIGNER_INFO * p7si, STACK_OF(X509_ATTRIBUTE) * sk) (a0,a1)
PKCS7 * PKCS7_sign(X509 * signcert, EVP_PKEY * pkey, STACK_OF(X509) * certs, BIO * data, int flags) (a0,a1,a2,a3,d0)
int PKCS7_verify(PKCS7 * p7, STACK_OF(X509) * certs, X509_STORE * store, BIO * indata, BIO * out, int flags) (a0,a1,a2,a3,d0,d1)
STACK_OF(X509) * PKCS7_get0_signers(PKCS7 * p7, STACK_OF(X509) * certs, int flags) (a0,a1,d0)
PKCS7 * PKCS7_encrypt(STACK_OF(X509) * certs, BIO * in, const EVP_CIPHER * cipher, int flags) (a0,a1,a2,d0)
int PKCS7_decrypt(PKCS7 * p7, EVP_PKEY * pkey, X509 * cert, BIO * data, int flags) (a0,a1,a2,a3,d0)
int PKCS7_add_attrib_smimecap(PKCS7_SIGNER_INFO * si, STACK_OF(X509_ALGOR) * cap) (a0,a1)
STACK_OF(X509_ALGOR) * PKCS7_get_smimecap(PKCS7_SIGNER_INFO * si) (a0)
int PKCS7_simple_smimecap(STACK_OF(X509_ALGOR) * sk, int nid, int arg) (a0,d0,d1)
int SMIME_write_PKCS7(BIO * bio, PKCS7 * p7, BIO * data, int flags) (a0,a1,a2,d0)
PKCS7 * SMIME_read_PKCS7(BIO * bio, BIO ** bcont) (a0,a1)
int SMIME_crlf_copy(BIO * in, BIO * out, int flags) (a0,a1,d0)
int SMIME_text(BIO * in, BIO * out) (a0,a1)
int ERR_load_PKCS7_strings() ()
int RAND_set_rand_method(const RAND_METHOD * meth) (a0)
const RAND_METHOD * RAND_get_rand_method() ()
==reserve 2
int RAND_bytes(unsigned char * buf, int num) (a0,d0)
int RAND_pseudo_bytes(unsigned char * buf, int num) (a0,d0)
void RAND_seed(const void * buf, int num) (a0,d0)
void RAND_add(const void * buf, int num, double randomness) (a0,d2,d0-d1)
int RAND_load_file(const char * file, long max_bytes) (a0,d0)
int RAND_write_file(const char * file) (a0)
const char * RAND_file_name(char * file, size_t num) (a0,d0)
int RAND_status() ()
==reserve 3
int RAND_poll() ()
int ERR_load_RAND_strings() ()
void SSL_CTX_set_msg_callback(SSL_CTX * ctx, void (*cb)(int write_p, int version, int content_type, const void *buf, size_t len, SSL *ssl, void *arg)) (a0,a1)
void SSL_set_msg_callback(SSL * ssl, void (*cb)(int write_p, int version, int content_type, const void *buf, size_t len, SSL *ssl, void *arg)) (a0,a1)
LHASH_OF(SSL_SESSION) * SSL_CTX_sessions(SSL_CTX * ctx) (a0)
size_t SSL_get_finished(const SSL * s, void * buf, size_t count) (a0,a1,d0)
size_t SSL_get_peer_finished(const SSL * s, void * buf, size_t count) (a0,a1,d0)
const BIO_METHOD * BIO_f_ssl() ()
BIO * BIO_new_ssl(SSL_CTX * ctx, int client) (a0,d0)
BIO * BIO_new_ssl_connect(SSL_CTX * ctx) (a0)
BIO * BIO_new_buffer_ssl_connect(SSL_CTX * ctx) (a0)
int BIO_ssl_copy_session_id(BIO * to, BIO * from) (a0,a1)
void BIO_ssl_shutdown(BIO * ssl_bio) (a0)
int SSL_CTX_set_cipher_list(SSL_CTX * a, const char * str) (a0,a1)
SSL_CTX * SSL_CTX_new(const SSL_METHOD * meth) (a0)
void SSL_CTX_free(SSL_CTX * a) (a0)
long SSL_CTX_set_timeout(SSL_CTX * ctx, long t) (a0,d0)
long SSL_CTX_get_timeout(const SSL_CTX * ctx) (a0)
X509_STORE * SSL_CTX_get_cert_store(const SSL_CTX * a) (a0)
void SSL_CTX_set_cert_store(SSL_CTX * a, X509_STORE * b) (a0,a1)
int SSL_want(const SSL * s) (a0)
int SSL_clear(SSL * s) (a0)
void SSL_CTX_flush_sessions(SSL_CTX * ctx, long tm) (a0,d0)
const SSL_CIPHER * SSL_get_current_cipher(const SSL * s) (a0)
int SSL_CIPHER_get_bits(const SSL_CIPHER * c, int * alg_bits) (a0,a1)
const char * SSL_CIPHER_get_version(const SSL_CIPHER * c) (a0)
const char * SSL_CIPHER_get_name(const SSL_CIPHER * c) (a0)
const char * SSL_CIPHER_get_mac(const SSL_CIPHER * cipher) (a0)
const char * SSL_CIPHER_get_encryption(const SSL_CIPHER * cipher) (a0)
const char * SSL_CIPHER_get_authentication(const SSL_CIPHER * cipher) (a0)
const char * SSL_CIPHER_get_key_exchange(const SSL_CIPHER * cipher) (a0)
==reserve 1
int SSL_get_fd(const SSL * s) (a0)
int SSL_get_rfd(const SSL * s) (a0)
int SSL_get_wfd(const SSL * s) (a0)
const char * SSL_get_cipher_list(const SSL * s, int n) (a0,d0)
char * SSL_get_shared_ciphers(const SSL * s, char * buf, int size) (a0,a1,d0)
int SSL_get_read_ahead(const SSL * s) (a0)
int SSL_pending(const SSL * s) (a0)
int SSL_set_fd(SSL * s, int fd) (a0,d0)
int SSL_set_rfd(SSL * s, int fd) (a0,d0)
int SSL_set_wfd(SSL * s, int fd) (a0,d0)
void SSL_set_bio(SSL * s, BIO * rbio, BIO * wbio) (a0,a1,a2)
BIO * SSL_get_rbio(const SSL * s) (a0)
BIO * SSL_get_wbio(const SSL * s) (a0)
int SSL_set_cipher_list(SSL * s, const char * str) (a0,a1)
void SSL_set_read_ahead(SSL * s, int yes) (a0,d0)
int SSL_get_verify_mode(const SSL * s) (a0)
int SSL_get_verify_depth(const SSL * s) (a0)
int (*)(int, X509_STORE_CTX *) SSL_get_verify_callback(const SSL * s) (a0)
void SSL_set_verify(SSL * s, int mode, int (*callback)(int, X509_STORE_CTX *)) (a0,d0,a1)
void SSL_set_verify_depth(SSL * s, int depth) (a0,d0)
int SSL_use_RSAPrivateKey(SSL * ssl, RSA * rsa) (a0,a1)
int SSL_use_RSAPrivateKey_ASN1(SSL * ssl, const unsigned char * d, long len) (a0,a1,d0)
int SSL_use_PrivateKey(SSL * ssl, EVP_PKEY * pkey) (a0,a1)
int SSL_use_PrivateKey_ASN1(int pk, SSL * ssl, const unsigned char * d, long len) (d0,a0,a1,d1)
int SSL_use_certificate(SSL * ssl, X509 * x) (a0,a1)
int SSL_use_certificate_ASN1(SSL * ssl, const unsigned char * d, int len) (a0,a1,d0)
int SSL_use_RSAPrivateKey_file(SSL * ssl, const char * file, int type) (a0,a1,d0)
int SSL_use_PrivateKey_file(SSL * ssl, const char * file, int type) (a0,a1,d0)
int SSL_use_certificate_file(SSL * ssl, const char * file, int type) (a0,a1,d0)
int SSL_CTX_use_RSAPrivateKey_file(SSL_CTX * ctx, const char * file, int type) (a0,a1,d0)
int SSL_CTX_use_PrivateKey_file(SSL_CTX * ctx, const char * file, int type) (a0,a1,d0)
int SSL_CTX_use_certificate_file(SSL_CTX * ctx, const char * file, int type) (a0,a1,d0)
int SSL_CTX_use_certificate_chain_file(SSL_CTX * ctx, const char * file) (a0,a1)
STACK_OF(X509_NAME) * SSL_load_client_CA_file(const char * file) (a0)
int SSL_add_file_cert_subjects_to_stack(STACK_OF(X509_NAME) * stackCAs, const char * file) (a0,a1)
int SSL_add_dir_cert_subjects_to_stack(STACK_OF(X509_NAME) * stackCAs, const char * dir) (a0,a1)
void OBSOLETE_SSL_load_error_strings() ()
const char * SSL_state_string(const SSL * s) (a0)
const char * SSL_rstate_string(const SSL * s) (a0)
const char * SSL_state_string_long(const SSL * s) (a0)
const char * SSL_rstate_string_long(const SSL * s) (a0)
long SSL_SESSION_get_time(const SSL_SESSION * s) (a0)
long SSL_SESSION_set_time(SSL_SESSION * s, long t) (a0,d0)
long SSL_SESSION_get_timeout(const SSL_SESSION * s) (a0)
long SSL_SESSION_set_timeout(SSL_SESSION * s, long t) (a0,d0)
int SSL_copy_session_id(SSL * to, const SSL * from) (a0,a1)
SSL_SESSION * SSL_SESSION_new() ()
==reserve 2
int SSL_SESSION_print(BIO * fp, const SSL_SESSION * ses) (a0,a1)
void SSL_SESSION_free(SSL_SESSION * ses) (a0)
int i2d_SSL_SESSION(const SSL_SESSION * in, unsigned char ** pp) (a0,a1)
int SSL_set_session(SSL * to, SSL_SESSION * session) (a0,a1)
int SSL_CTX_add_session(SSL_CTX * ctx, SSL_SESSION * session) (a0,a1)
int SSL_CTX_remove_session(SSL_CTX * ctx, SSL_SESSION * session) (a0,a1)
int SSL_CTX_set_generate_session_id(SSL_CTX * ctx, GEN_SESSION_CB cb) (a0,d0)
int SSL_set_generate_session_id(SSL * s, GEN_SESSION_CB cb) (a0,d0)
int SSL_has_matching_session_id(const SSL * s, const unsigned char * id, unsigned int id_len) (a0,a1,d0)
SSL_SESSION * d2i_SSL_SESSION(SSL_SESSION ** a, const unsigned char ** pp, long length) (a0,a1,d0)
X509 * SSL_get1_peer_certificate(const SSL * s) (a0)
STACK_OF(X509) * SSL_get_peer_cert_chain(const SSL * s) (a0)
int SSL_CTX_get_verify_mode(const SSL_CTX * ctx) (a0)
int SSL_CTX_get_verify_depth(const SSL_CTX * ctx) (a0)
int (*)(int, X509_STORE_CTX *) SSL_CTX_get_verify_callback(const SSL_CTX * ctx) (a0)
void SSL_CTX_set_verify(SSL_CTX * ctx, int mode, int (*callback)(int, X509_STORE_CTX *)) (a0,d0,a1)
void SSL_CTX_set_verify_depth(SSL_CTX * ctx, int depth) (a0,d0)
void SSL_CTX_set_cert_verify_callback(SSL_CTX * ctx, int (*cb)(X509_STORE_CTX *, void *), void * arg) (a0,a1,a2)
int SSL_CTX_use_RSAPrivateKey(SSL_CTX * ctx, RSA * rsa) (a0,a1)
int SSL_CTX_use_RSAPrivateKey_ASN1(SSL_CTX * ctx, const unsigned char * d, long len) (a0,a1,d0)
int SSL_CTX_use_PrivateKey(SSL_CTX * ctx, EVP_PKEY * pkey) (a0,a1)
int SSL_CTX_use_PrivateKey_ASN1(int pk, SSL_CTX * ctx, const unsigned char * d, long len) (d0,a0,a1,d1)
int SSL_CTX_use_certificate(SSL_CTX * ctx, X509 * x) (a0,a1)
int SSL_CTX_use_certificate_ASN1(SSL_CTX * ctx, int len, const unsigned char * d) (a0,d0,a1)
void SSL_CTX_set_default_passwd_cb(SSL_CTX * ctx, pem_password_cb * cb) (a0,a1)
void SSL_CTX_set_default_passwd_cb_userdata(SSL_CTX * ctx, void * u) (a0,a1)
int SSL_CTX_check_private_key(const SSL_CTX * ctx) (a0)
int SSL_check_private_key(const SSL * ctx) (a0)
int SSL_CTX_set_session_id_context(SSL_CTX * ctx, const unsigned char * sid_ctx, unsigned int sid_ctx_len) (a0,a1,d0)
SSL * SSL_new(SSL_CTX * ctx) (a0)
int SSL_set_session_id_context(SSL * ssl, const unsigned char * sid_ctx, unsigned int sid_ctx_len) (a0,a1,d0)
int SSL_CTX_set_purpose(SSL_CTX * ctx, int purpose) (a0,d0)
int SSL_set_purpose(SSL * ssl, int purpose) (a0,d0)
int SSL_CTX_set_trust(SSL_CTX * ctx, int trust) (a0,d0)
int SSL_set_trust(SSL * ssl, int trust) (a0,d0)
void SSL_free(SSL * ssl) (a0)
int SSL_accept(SSL * ssl) (a0)
int SSL_connect(SSL * ssl) (a0)
int SSL_read(SSL * ssl, void * buf, int num) (a0,a1,d0)
int SSL_peek(SSL * ssl, void * buf, int num) (a0,a1,d0)
int SSL_write(SSL * ssl, const void * buf, int num) (a0,a1,d0)
long SSL_ctrl(SSL * ssl, int cmd, long larg, void * parg) (a0,d0,d1,a1)
long SSL_callback_ctrl(SSL * a, int a1, void (*b)()) (a0,d0,a1)
long SSL_CTX_ctrl(SSL_CTX * ctx, int cmd, long larg, void * parg) (a0,d0,d1,a1)
long SSL_CTX_callback_ctrl(SSL_CTX * a1, int a2, void (*a3)(void)) (a0,d0,a1)
int SSL_get_error(const SSL * s, int ret_code) (a0,d0)
const char * SSL_get_version(const SSL * s) (a0)
int SSL_CTX_set_ssl_version(SSL_CTX * ctx, const SSL_METHOD * meth) (a0,a1)
==reserve 9
const SSL_METHOD * TLSv1_method() ()
const SSL_METHOD * TLSv1_server_method() ()
const SSL_METHOD * TLSv1_client_method() ()
STACK_OF(SSL_CIPHER) * SSL_get_ciphers(const SSL * s) (a0)
int SSL_do_handshake(SSL * s) (a0)
int SSL_renegotiate(SSL * s) (a0)
int SSL_renegotiate_pending(const SSL * s) (a0)
int SSL_shutdown(SSL * s) (a0)
const SSL_METHOD * SSL_get_ssl_method(const SSL * s) (a0)
int SSL_set_ssl_method(SSL * s, const SSL_METHOD * method) (a0,a1)
const char * SSL_alert_type_string_long(int value) (d0)
const char * SSL_alert_type_string(int value) (d0)
const char * SSL_alert_desc_string_long(int value) (d0)
const char * SSL_alert_desc_string(int value) (d0)
void SSL_set_client_CA_list(SSL * s, STACK_OF(X509_NAME) * name_list) (a0,a1)
void SSL_CTX_set_client_CA_list(SSL_CTX * ctx, STACK_OF(X509_NAME) * name_list) (a0,a1)
STACK_OF(X509_NAME) * SSL_get_client_CA_list(const SSL * s) (a0)
STACK_OF(X509_NAME) * SSL_CTX_get_client_CA_list(const SSL_CTX * s) (a0)
int SSL_add_client_CA(SSL * ssl, X509 * x) (a0,a1)
int SSL_CTX_add_client_CA(SSL_CTX * ctx, X509 * x) (a0,a1)
void SSL_set_connect_state(SSL * s) (a0)
void SSL_set_accept_state(SSL * s) (a0)
long SSL_get_default_timeout(const SSL * s) (a0)
int OBSOLETE_SSL_library_init() ()
char * SSL_CIPHER_description(const SSL_CIPHER * a1, char * buf, int size) (a0,a1,d0)
STACK_OF(X509_NAME) * SSL_dup_CA_list(const STACK_OF(X509_NAME) * sk) (a0)
SSL * SSL_dup(SSL * ssl) (a0)
X509 * SSL_get_certificate(const SSL * ssl) (a0)
struct evp_pkey_st * SSL_get_privatekey(const SSL * ssl) (a0)
void SSL_CTX_set_quiet_shutdown(SSL_CTX * ctx, int mode) (a0,d0)
int SSL_CTX_get_quiet_shutdown(const SSL_CTX * ctx) (a0)
void SSL_set_quiet_shutdown(SSL * ssl, int mode) (a0,d0)
int SSL_get_quiet_shutdown(const SSL * ssl) (a0)
void SSL_set_shutdown(SSL * ssl, int mode) (a0,d0)
int SSL_get_shutdown(const SSL * ssl) (a0)
int SSL_version(const SSL * ssl) (a0)
int SSL_CTX_set_default_verify_paths(SSL_CTX * ctx) (a0)
int SSL_CTX_load_verify_locations(SSL_CTX * ctx, const char * CAfile, const char * CApath) (a0,a1,a2)
SSL_SESSION * SSL_get_session(const SSL * ssl) (a0)
SSL_SESSION * SSL_get1_session(SSL * ssl) (a0)
SSL_CTX * SSL_get_SSL_CTX(const SSL * ssl) (a0)
void SSL_set_info_callback(SSL * ssl, void (*cb)(const SSL *ssl, int type, int val)) (a0,a1)
void (*)(const SSL *ssl, int type, int val) SSL_get_info_callback(const SSL * ssl) (a0)
==reserve 1
void SSL_set_verify_result(SSL * ssl, long v) (a0,d0)
long SSL_get_verify_result(const SSL * ssl) (a0)
int SSL_set_ex_data(SSL * ssl, int idx, void * data) (a0,d0,a1)
void * SSL_get_ex_data(const SSL * ssl, int idx) (a0,d0)
int OBSOLETE_SSL_get_ex_new_index(long argl, void * argp, CRYPTO_EX_new * new_func, CRYPTO_EX_dup * dup_func, CRYPTO_EX_free * free_func) (d0,a0,a1,a2,a3)
int SSL_SESSION_set_ex_data(SSL_SESSION * ss, int idx, void * data) (a0,d0,a1)
void * SSL_SESSION_get_ex_data(const SSL_SESSION * ss, int idx) (a0,d0)
int OBSOLETE_SSL_SESSION_get_ex_new_index(long argl, void * argp, CRYPTO_EX_new * new_func, CRYPTO_EX_dup * dup_func, CRYPTO_EX_free * free_func) (d0,a0,a1,a2,a3)
int SSL_CTX_set_ex_data(SSL_CTX * ssl, int idx, void * data) (a0,d0,a1)
void * SSL_CTX_get_ex_data(const SSL_CTX * ssl, int idx) (a0,d0)
int OBSOLETE_SSL_CTX_get_ex_new_index(long argl, void * argp, CRYPTO_EX_new * new_func, CRYPTO_EX_dup * dup_func, CRYPTO_EX_free * free_func) (d0,a0,a1,a2,a3)
int SSL_get_ex_data_X509_STORE_CTX_idx() ()
==reserve 2
void SSL_CTX_set_tmp_dh_callback(SSL_CTX * ctx, DH * (*dh)(SSL *ssl, int is_export, int keylength)) (a0,a1)
void SSL_set_tmp_dh_callback(SSL * ssl, DH * (*dh)(SSL *ssl, int is_export, int keylength)) (a0,a1)
int SSL_COMP_add_compression_method(int id, COMP_METHOD * cm) (d0,a0)
int ERR_load_SSL_strings() ()
int OPENSSL_sk_num(const OPENSSL_STACK * a) (a0)
void * OPENSSL_sk_value(const OPENSSL_STACK * a, int b) (a0,d0)
void * OPENSSL_sk_set(OPENSSL_STACK * a, int b, const void * c) (a0,d0,a1)
OPENSSL_STACK * OPENSSL_sk_new(int (*cmp)(const void *, const void *)) (a0)
OPENSSL_STACK * OPENSSL_sk_new_null() ()
void OPENSSL_sk_free(OPENSSL_STACK * a) (a0)
void OPENSSL_sk_pop_free(OPENSSL_STACK * st, void (*func)(void *)) (a0,a1)
int OPENSSL_sk_insert(OPENSSL_STACK * sk, const void * data, int where) (a0,a1,d0)
void * OPENSSL_sk_delete(OPENSSL_STACK * st, int loc) (a0,d0)
void * OPENSSL_sk_delete_ptr(OPENSSL_STACK * st, const void * p) (a0,a1)
int OPENSSL_sk_find(OPENSSL_STACK * st, const void * data) (a0,a1)
int OPENSSL_sk_push(OPENSSL_STACK * st, const void * data) (a0,a1)
int OPENSSL_sk_unshift(OPENSSL_STACK * st, const void * data) (a0,a1)
void * OPENSSL_sk_shift(OPENSSL_STACK * st) (a0)
void * OPENSSL_sk_pop(OPENSSL_STACK * st) (a0)
void OPENSSL_sk_zero(OPENSSL_STACK * st) (a0)
int (*)(const void *, const void *) OPENSSL_sk_set_cmp_func(OPENSSL_STACK * sk, int (*c)(const void *, const void *)) (a0,a1)
OPENSSL_STACK * OPENSSL_sk_dup(const OPENSSL_STACK * st) (a0)
void OPENSSL_sk_sort(OPENSSL_STACK * st) (a0)
int OPENSSL_sk_is_sorted(const OPENSSL_STACK * st) (a0)
==reserve 5
TXT_DB * TXT_DB_read(BIO * in, int num) (a0,d0)
long TXT_DB_write(BIO * out, TXT_DB * db) (a0,a1)
int TXT_DB_create_index(TXT_DB * db, int field, int (*qual)(OPENSSL_STRING *), OPENSSL_LH_HASHFUNC hash, OPENSSL_LH_COMPFUNC cmp) (a0,d0,a1,d1,d2)
void TXT_DB_free(TXT_DB * db) (a0)
char ** TXT_DB_get_by_index(TXT_DB * db, int idx, char ** value) (a0,d0,a1)
int TXT_DB_insert(TXT_DB * db, char ** value) (a0,a1)
UI * UI_new() ()
UI * UI_new_method(const UI_METHOD * method) (a0)
void UI_free(UI * ui) (a0)
int UI_add_input_string(UI * ui, const char * prompt, int flags, char * result_buf, int minsize, int maxsize) (a0,a1,d0,a2,d1,d2)
int UI_dup_input_string(UI * ui, const char * prompt, int flags, char * result_buf, int minsize, int maxsize) (a0,a1,d0,a2,d1,d2)
int UI_add_verify_string(UI * ui, const char * prompt, int flags, char * result_buf, int minsize, int maxsize, const char * test_buf) (a0,a1,d0,a2,d1,d2,a3)
int UI_dup_verify_string(UI * ui, const char * prompt, int flags, char * result_buf, int minsize, int maxsize, const char * test_buf) (a0,a1,d0,a2,d1,d2,a3)
int UI_add_input_boolean(UI * ui, const char * prompt, const char * action_desc, const char * ok_chars, const char * cancel_chars, int flags, char * result_buf) (a0,a1,a2,a3,d0,d1,d2)
int UI_dup_input_boolean(UI * ui, const char * prompt, const char * action_desc, const char * ok_chars, const char * cancel_chars, int flags, char * result_buf) (a0,a1,a2,a3,d0,d1,d2)
int UI_add_info_string(UI * ui, const char * text) (a0,a1)
int UI_dup_info_string(UI * ui, const char * text) (a0,a1)
int UI_add_error_string(UI * ui, const char * text) (a0,a1)
int UI_dup_error_string(UI * ui, const char * text) (a0,a1)
char * UI_construct_prompt(UI * ui_method, const char * object_desc, const char * object_name) (a0,a1,a2)
void * UI_add_user_data(UI * ui, void * user_data) (a0,a1)
void * UI_get0_user_data(UI * ui) (a0)
const char * UI_get0_result(UI * ui, int i) (a0,d0)
int UI_process(UI * ui) (a0)
int UI_ctrl(UI * ui, int cmd, long i, void * p, void (*f)()) (a0,d0,d1,a1,a2)
int OBSOLETE_UI_get_ex_new_index(long argl, void * argp, CRYPTO_EX_new * new_func, CRYPTO_EX_dup * dup_func, CRYPTO_EX_free * free_func) (d0,a0,a1,a2,a3)
int UI_set_ex_data(UI * r, int idx, void * arg) (a0,d0,a1)
void * UI_get_ex_data(const UI * r, int idx) (a0,d0)
void UI_set_default_method(const UI_METHOD * meth) (a0)
const UI_METHOD * UI_get_default_method() ()
const UI_METHOD * UI_get_method(UI * ui) (a0)
const UI_METHOD * UI_set_method(UI * ui, const UI_METHOD * meth) (a0,a1)
UI_METHOD * UI_OpenSSL() ()
UI_METHOD * UI_create_method(const char * name) (a0)
void UI_destroy_method(UI_METHOD * ui_method) (a0)
int UI_method_set_opener(UI_METHOD * method, int (*opener)(UI *ui)) (a0,a1)
int UI_method_set_writer(UI_METHOD * method, int (*writer)(UI *ui, UI_STRING *uis)) (a0,a1)
int UI_method_set_flusher(UI_METHOD * method, int (*flusher)(UI *ui)) (a0,a1)
int UI_method_set_reader(UI_METHOD * method, int (*reader)(UI *ui, UI_STRING *uis)) (a0,a1)
int UI_method_set_closer(UI_METHOD * method, int (*closer)(UI *ui)) (a0,a1)
int (*)(UI *) UI_method_get_opener(const UI_METHOD * method) (a0)
int (*)(UI *, UI_STRING *) UI_method_get_writer(const UI_METHOD * method) (a0)
int (*)(UI *) UI_method_get_flusher(const UI_METHOD * method) (a0)
int (*)(UI *, UI_STRING *) UI_method_get_reader(const UI_METHOD * method) (a0)
int (*)(UI *) UI_method_get_closer(const UI_METHOD * method) (a0)
enum UI_string_types UI_get_string_type(UI_STRING * uis) (a0)
int UI_get_input_flags(UI_STRING * uis) (a0)
const char * UI_get0_output_string(UI_STRING * uis) (a0)
const char * UI_get0_action_string(UI_STRING * uis) (a0)
const char * UI_get0_result_string(UI_STRING * uis) (a0)
const char * UI_get0_test_string(UI_STRING * uis) (a0)
int UI_get_result_minsize(UI_STRING * uis) (a0)
int UI_get_result_maxsize(UI_STRING * uis) (a0)
int UI_set_result(UI * ui, UI_STRING * uis, const char * result) (a0,a1,a2)
int UI_UTIL_read_pw_string(char * buf, int length, const char * prompt, int verify) (a0,d0,a1,d1)
int UI_UTIL_read_pw(char * buf, char * buff, int size, const char * prompt, int verify) (a0,a1,d0,a2,d1)
int ERR_load_UI_strings() ()
==reserve 2
const char * X509_verify_cert_error_string(long n) (d0)
int X509_verify(X509 * a, EVP_PKEY * r) (a0,a1)
int X509_REQ_verify(X509_REQ * a, EVP_PKEY * r) (a0,a1)
int X509_CRL_verify(X509_CRL * a, EVP_PKEY * r) (a0,a1)
int NETSCAPE_SPKI_verify(NETSCAPE_SPKI * a, EVP_PKEY * r) (a0,a1)
NETSCAPE_SPKI * NETSCAPE_SPKI_b64_decode(const char * str, int len) (a0,d0)
char * NETSCAPE_SPKI_b64_encode(NETSCAPE_SPKI * x) (a0)
EVP_PKEY * NETSCAPE_SPKI_get_pubkey(NETSCAPE_SPKI * x) (a0)
int NETSCAPE_SPKI_set_pubkey(NETSCAPE_SPKI * x, EVP_PKEY * pkey) (a0,a1)
int NETSCAPE_SPKI_print(BIO * out, NETSCAPE_SPKI * spki) (a0,a1)
int X509_signature_print(BIO * bp, const X509_ALGOR * alg, const ASN1_STRING * sig) (a0,a1,a2)
int X509_sign(X509 * x, EVP_PKEY * pkey, const EVP_MD * md) (a0,a1,a2)
int X509_REQ_sign(X509_REQ * x, EVP_PKEY * pkey, const EVP_MD * md) (a0,a1,a2)
int X509_CRL_sign(X509_CRL * x, EVP_PKEY * pkey, const EVP_MD * md) (a0,a1,a2)
int NETSCAPE_SPKI_sign(NETSCAPE_SPKI * x, EVP_PKEY * pkey, const EVP_MD * md) (a0,a1,a2)
int X509_pubkey_digest(const X509 * data, const EVP_MD * type, unsigned char * md, unsigned int * len) (a0,a1,a2,a3)
int X509_digest(const X509 * data, const EVP_MD * type, unsigned char * md, unsigned int * len) (a0,a1,a2,a3)
int X509_CRL_digest(const X509_CRL * data, const EVP_MD * type, unsigned char * md, unsigned int * len) (a0,a1,a2,a3)
int X509_REQ_digest(const X509_REQ * data, const EVP_MD * type, unsigned char * md, unsigned int * len) (a0,a1,a2,a3)
int X509_NAME_digest(const X509_NAME * data, const EVP_MD * type, unsigned char * md, unsigned int * len) (a0,a1,a2,a3)
X509 * d2i_X509_bio(BIO * bp, X509 ** x509) (a0,a1)
int i2d_X509_bio(BIO * bp, const X509 * x509) (a0,a1)
X509_CRL * d2i_X509_CRL_bio(BIO * bp, X509_CRL ** crl) (a0,a1)
int i2d_X509_CRL_bio(BIO * bp, const X509_CRL * crl) (a0,a1)
X509_REQ * d2i_X509_REQ_bio(BIO * bp, X509_REQ ** req) (a0,a1)
int i2d_X509_REQ_bio(BIO * bp, const X509_REQ * req) (a0,a1)
RSA * d2i_RSAPrivateKey_bio(BIO * bp, RSA ** rsa) (a0,a1)
int i2d_RSAPrivateKey_bio(BIO * bp, const RSA * rsa) (a0,a1)
RSA * d2i_RSAPublicKey_bio(BIO * bp, RSA ** rsa) (a0,a1)
int i2d_RSAPublicKey_bio(BIO * bp, const RSA * rsa) (a0,a1)
RSA * d2i_RSA_PUBKEY_bio(BIO * bp, RSA ** rsa) (a0,a1)
int i2d_RSA_PUBKEY_bio(BIO * bp, const RSA * rsa) (a0,a1)
DSA * d2i_DSA_PUBKEY_bio(BIO * bp, DSA ** dsa) (a0,a1)
int i2d_DSA_PUBKEY_bio(BIO * bp, const DSA * dsa) (a0,a1)
DSA * d2i_DSAPrivateKey_bio(BIO * bp, DSA ** dsa) (a0,a1)
int i2d_DSAPrivateKey_bio(BIO * bp, const DSA * dsa) (a0,a1)
X509_SIG * d2i_PKCS8_bio(BIO * bp, X509_SIG ** p8) (a0,a1)
int i2d_PKCS8_bio(BIO * bp, const X509_SIG * p8) (a0,a1)
PKCS8_PRIV_KEY_INFO * d2i_PKCS8_PRIV_KEY_INFO_bio(BIO * bp, PKCS8_PRIV_KEY_INFO ** p8inf) (a0,a1)
int i2d_PKCS8_PRIV_KEY_INFO_bio(BIO * bp, const PKCS8_PRIV_KEY_INFO * p8inf) (a0,a1)
int i2d_PKCS8PrivateKeyInfo_bio(BIO * bp, const EVP_PKEY * key) (a0,a1)
int i2d_PrivateKey_bio(BIO * bp, const EVP_PKEY * pkey) (a0,a1)
EVP_PKEY * d2i_PrivateKey_bio(BIO * bp, EVP_PKEY ** a) (a0,a1)
int i2d_PUBKEY_bio(BIO * bp, const EVP_PKEY * pkey) (a0,a1)
EVP_PKEY * d2i_PUBKEY_bio(BIO * bp, EVP_PKEY ** a) (a0,a1)
X509 * X509_dup(const X509 * x509) (a0)
X509_ATTRIBUTE * X509_ATTRIBUTE_dup(const X509_ATTRIBUTE * xa) (a0)
X509_EXTENSION * X509_EXTENSION_dup(const X509_EXTENSION * ex) (a0)
X509_CRL * X509_CRL_dup(const X509_CRL * crl) (a0)
X509_REQ * X509_REQ_dup(const X509_REQ * req) (a0)
X509_ALGOR * X509_ALGOR_dup(const X509_ALGOR * xn) (a0)
X509_NAME * X509_NAME_dup(const X509_NAME * xn) (a0)
X509_NAME_ENTRY * X509_NAME_ENTRY_dup(const X509_NAME_ENTRY * ne) (a0)
int X509_cmp_time(const ASN1_TIME * s, time_t * t) (a0,a1)
int X509_cmp_current_time(const ASN1_TIME * s) (a0)
ASN1_TIME * X509_time_adj(ASN1_TIME * s, long adj, time_t * t) (a0,d0,a1)
ASN1_TIME * X509_gmtime_adj(ASN1_TIME * s, long adj) (a0,d0)
const char * X509_get_default_cert_area() ()
const char * X509_get_default_cert_dir() ()
const char * X509_get_default_cert_file() ()
const char * X509_get_default_cert_dir_env() ()
const char * X509_get_default_cert_file_env() ()
const char * X509_get_default_private_dir() ()
X509_REQ * X509_to_X509_REQ(X509 * x, EVP_PKEY * pkey, const EVP_MD * md) (a0,a1,a2)
X509 * X509_REQ_to_X509(X509_REQ * r, int days, EVP_PKEY * pkey) (a0,d0,a1)
X509_ALGOR * X509_ALGOR_new() ()
void X509_ALGOR_free(X509_ALGOR * a) (a0)
X509_ALGOR * d2i_X509_ALGOR(X509_ALGOR ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_X509_ALGOR(const X509_ALGOR * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * X509_ALGOR_it() ()
X509_VAL * X509_VAL_new() ()
void X509_VAL_free(X509_VAL * a) (a0)
X509_VAL * d2i_X509_VAL(X509_VAL ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_X509_VAL(const X509_VAL * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * X509_VAL_it() ()
X509_PUBKEY * X509_PUBKEY_new() ()
void X509_PUBKEY_free(X509_PUBKEY * a) (a0)
X509_PUBKEY * d2i_X509_PUBKEY(X509_PUBKEY ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_X509_PUBKEY(const X509_PUBKEY * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * X509_PUBKEY_it() ()
int X509_PUBKEY_set(X509_PUBKEY ** x, EVP_PKEY * pkey) (a0,a1)
EVP_PKEY * X509_PUBKEY_get(const X509_PUBKEY * key) (a0)
int X509_get_pubkey_parameters(EVP_PKEY * pkey, STACK_OF(X509) * chain) (a0,a1)
int i2d_PUBKEY(const EVP_PKEY * a, unsigned char ** pp) (a0,a1)
EVP_PKEY * d2i_PUBKEY(EVP_PKEY ** a, const unsigned char ** pp, long length) (a0,a1,d0)
int i2d_RSA_PUBKEY(const RSA * a, unsigned char ** pp) (a0,a1)
RSA * d2i_RSA_PUBKEY(RSA ** a, const unsigned char ** pp, long length) (a0,a1,d0)
int i2d_DSA_PUBKEY(const DSA * a, unsigned char ** pp) (a0,a1)
DSA * d2i_DSA_PUBKEY(DSA ** a, const unsigned char ** pp, long length) (a0,a1,d0)
X509_SIG * X509_SIG_new() ()
void X509_SIG_free(X509_SIG * a) (a0)
X509_SIG * d2i_X509_SIG(X509_SIG ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_X509_SIG(const X509_SIG * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * X509_SIG_it() ()
X509_REQ_INFO * X509_REQ_INFO_new() ()
void X509_REQ_INFO_free(X509_REQ_INFO * a) (a0)
X509_REQ_INFO * d2i_X509_REQ_INFO(X509_REQ_INFO ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_X509_REQ_INFO(const X509_REQ_INFO * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * X509_REQ_INFO_it() ()
X509_REQ * X509_REQ_new() ()
void X509_REQ_free(X509_REQ * a) (a0)
X509_REQ * d2i_X509_REQ(X509_REQ ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_X509_REQ(const X509_REQ * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * X509_REQ_it() ()
X509_ATTRIBUTE * X509_ATTRIBUTE_new() ()
void X509_ATTRIBUTE_free(X509_ATTRIBUTE * a) (a0)
X509_ATTRIBUTE * d2i_X509_ATTRIBUTE(X509_ATTRIBUTE ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_X509_ATTRIBUTE(const X509_ATTRIBUTE * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * X509_ATTRIBUTE_it() ()
X509_ATTRIBUTE * X509_ATTRIBUTE_create(int nid, int atrtype, void * value) (d0,d1,a0)
X509_EXTENSION * X509_EXTENSION_new() ()
void X509_EXTENSION_free(X509_EXTENSION * a) (a0)
X509_EXTENSION * d2i_X509_EXTENSION(X509_EXTENSION ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_X509_EXTENSION(const X509_EXTENSION * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * X509_EXTENSION_it() ()
X509_NAME_ENTRY * X509_NAME_ENTRY_new() ()
void X509_NAME_ENTRY_free(X509_NAME_ENTRY * a) (a0)
X509_NAME_ENTRY * d2i_X509_NAME_ENTRY(X509_NAME_ENTRY ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_X509_NAME_ENTRY(const X509_NAME_ENTRY * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * X509_NAME_ENTRY_it() ()
X509_NAME * X509_NAME_new() ()
void X509_NAME_free(X509_NAME * a) (a0)
X509_NAME * d2i_X509_NAME(X509_NAME ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_X509_NAME(const X509_NAME * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * X509_NAME_it() ()
int X509_NAME_set(X509_NAME ** xn, const X509_NAME * name) (a0,a1)
X509_CINF * X509_CINF_new() ()
void X509_CINF_free(X509_CINF * a) (a0)
X509_CINF * d2i_X509_CINF(X509_CINF ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_X509_CINF(const X509_CINF * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * X509_CINF_it() ()
X509 * X509_new() ()
void X509_free(X509 * a) (a0)
X509 * d2i_X509(X509 ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_X509(const X509 * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * X509_it() ()
X509_CERT_AUX * X509_CERT_AUX_new() ()
void X509_CERT_AUX_free(X509_CERT_AUX * a) (a0)
X509_CERT_AUX * d2i_X509_CERT_AUX(X509_CERT_AUX ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_X509_CERT_AUX(const X509_CERT_AUX * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * X509_CERT_AUX_it() ()
int OBSOLETE_X509_get_ex_new_index(long argl, void * argp, CRYPTO_EX_new * new_func, CRYPTO_EX_dup * dup_func, CRYPTO_EX_free * free_func) (d0,a0,a1,a2,a3)
int X509_set_ex_data(X509 * r, int idx, void * arg) (a0,d0,a1)
void * X509_get_ex_data(const X509 * r, int idx) (a0,d0)
int i2d_X509_AUX(const X509 * a, unsigned char ** pp) (a0,a1)
X509 * d2i_X509_AUX(X509 ** a, const unsigned char ** pp, long length) (a0,a1,d0)
int X509_alias_set1(X509 * x, const unsigned char * name, int len) (a0,a1,d0)
int X509_keyid_set1(X509 * x, const unsigned char * id, int len) (a0,a1,d0)
unsigned char * X509_alias_get0(X509 * x, int * len) (a0,a1)
int (*)(int, X509 *, int) X509_TRUST_set_default(int (*trust)(int, X509 *, int)) (a0)
int X509_TRUST_set(int * t, int trust) (a0,d0)
int X509_add1_trust_object(X509 * x, const ASN1_OBJECT * obj) (a0,a1)
int X509_add1_reject_object(X509 * x, const ASN1_OBJECT * obj) (a0,a1)
void X509_trust_clear(X509 * x) (a0)
void X509_reject_clear(X509 * x) (a0)
X509_REVOKED * X509_REVOKED_new() ()
void X509_REVOKED_free(X509_REVOKED * a) (a0)
X509_REVOKED * d2i_X509_REVOKED(X509_REVOKED ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_X509_REVOKED(const X509_REVOKED * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * X509_REVOKED_it() ()
X509_CRL_INFO * X509_CRL_INFO_new() ()
void X509_CRL_INFO_free(X509_CRL_INFO * a) (a0)
X509_CRL_INFO * d2i_X509_CRL_INFO(X509_CRL_INFO ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_X509_CRL_INFO(const X509_CRL_INFO * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * X509_CRL_INFO_it() ()
X509_CRL * X509_CRL_new() ()
void X509_CRL_free(X509_CRL * a) (a0)
X509_CRL * d2i_X509_CRL(X509_CRL ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_X509_CRL(const X509_CRL * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * X509_CRL_it() ()
int X509_CRL_add0_revoked(X509_CRL * crl, X509_REVOKED * rev) (a0,a1)
X509_PKEY * X509_PKEY_new() ()
void X509_PKEY_free(X509_PKEY * a) (a0)
==reserve 2
NETSCAPE_SPKI * NETSCAPE_SPKI_new() ()
void NETSCAPE_SPKI_free(NETSCAPE_SPKI * a) (a0)
NETSCAPE_SPKI * d2i_NETSCAPE_SPKI(NETSCAPE_SPKI ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_NETSCAPE_SPKI(const NETSCAPE_SPKI * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * NETSCAPE_SPKI_it() ()
NETSCAPE_SPKAC * NETSCAPE_SPKAC_new() ()
void NETSCAPE_SPKAC_free(NETSCAPE_SPKAC * a) (a0)
NETSCAPE_SPKAC * d2i_NETSCAPE_SPKAC(NETSCAPE_SPKAC ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_NETSCAPE_SPKAC(const NETSCAPE_SPKAC * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * NETSCAPE_SPKAC_it() ()
NETSCAPE_CERT_SEQUENCE * NETSCAPE_CERT_SEQUENCE_new() ()
void NETSCAPE_CERT_SEQUENCE_free(NETSCAPE_CERT_SEQUENCE * a) (a0)
NETSCAPE_CERT_SEQUENCE * d2i_NETSCAPE_CERT_SEQUENCE(NETSCAPE_CERT_SEQUENCE ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_NETSCAPE_CERT_SEQUENCE(const NETSCAPE_CERT_SEQUENCE * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * NETSCAPE_CERT_SEQUENCE_it() ()
X509_INFO * X509_INFO_new() ()
void X509_INFO_free(X509_INFO * a) (a0)
char * X509_NAME_oneline(const X509_NAME * a, char * buf, int size) (a0,a1,d0)
int ASN1_verify(int (*i2d)(), X509_ALGOR * algor1, ASN1_BIT_STRING * signature, char * data, EVP_PKEY * pkey) (a0,a1,a2,a3,d0)
int ASN1_digest(int (*i2d)(), const EVP_MD * type, char * data, unsigned char * md, unsigned int * len) (a0,a1,a2,a3,d0)
int ASN1_sign(int (*i2d)(), X509_ALGOR * algor1, X509_ALGOR * algor2, ASN1_BIT_STRING * signature, char * data, EVP_PKEY * pkey, const EVP_MD * type) (a0,a1,a2,a3,d0,d1,d2)
int ASN1_item_digest(const ASN1_ITEM * it, const EVP_MD * type, void * data, unsigned char * md, unsigned int * len) (a0,a1,a2,a3,d0)
int ASN1_item_verify(const ASN1_ITEM * it, const X509_ALGOR * alg, const ASN1_BIT_STRING * signature, const void * data, EVP_PKEY * pkey) (a0,a1,a2,a3,d0)
int ASN1_item_sign(const ASN1_ITEM * it, X509_ALGOR * algor1, X509_ALGOR * algor2, ASN1_BIT_STRING * signature, const void * data, EVP_PKEY * pkey, const EVP_MD * type) (a0,a1,a2,a3,d0,d1,d2)
int X509_set_version(X509 * x, long version) (a0,d0)
int X509_set_serialNumber(X509 * x, ASN1_INTEGER * serial) (a0,a1)
ASN1_INTEGER * X509_get_serialNumber(X509 * x) (a0)
int X509_set_issuer_name(X509 * x, const X509_NAME * name) (a0,a1)
X509_NAME * X509_get_issuer_name(const X509 * a) (a0)
int X509_set_subject_name(X509 * x, const X509_NAME * name) (a0,a1)
X509_NAME * X509_get_subject_name(const X509 * a) (a0)
int X509_set1_notBefore(X509 * x, const ASN1_TIME * tm) (a0,a1)
int X509_set1_notAfter(X509 * x, const ASN1_TIME * tm) (a0,a1)
int X509_set_pubkey(X509 * x, EVP_PKEY * pkey) (a0,a1)
EVP_PKEY * X509_get_pubkey(X509 * x) (a0)
ASN1_BIT_STRING * X509_get0_pubkey_bitstr(const X509 * x) (a0)
int X509_certificate_type(const X509 * x, const EVP_PKEY * pubkey) (a0,a1)
int X509_REQ_set_version(X509_REQ * x, long version) (a0,d0)
int X509_REQ_set_subject_name(X509_REQ * req, const X509_NAME * name) (a0,a1)
int X509_REQ_set_pubkey(X509_REQ * x, EVP_PKEY * pkey) (a0,a1)
EVP_PKEY * X509_REQ_get_pubkey(X509_REQ * req) (a0)
int X509_REQ_extension_nid(int nid) (d0)
int * X509_REQ_get_extension_nids() ()
void X509_REQ_set_extension_nids(int * nids) (a0)
STACK_OF(X509_EXTENSION) * X509_REQ_get_extensions(X509_REQ * req) (a0)
int X509_REQ_add_extensions_nid(X509_REQ * req, const STACK_OF(X509_EXTENSION) * exts, int nid) (a0,a1,d0)
int X509_REQ_add_extensions(X509_REQ * req, const STACK_OF(X509_EXTENSION) * exts) (a0,a1)
int X509_REQ_get_attr_count(const X509_REQ * req) (a0)
int X509_REQ_get_attr_by_NID(const X509_REQ * req, int nid, int lastpos) (a0,d0,d1)
int X509_REQ_get_attr_by_OBJ(const X509_REQ * req, const ASN1_OBJECT * obj, int lastpos) (a0,a1,d0)
X509_ATTRIBUTE * X509_REQ_get_attr(const X509_REQ * req, int loc) (a0,d0)
X509_ATTRIBUTE * X509_REQ_delete_attr(X509_REQ * req, int loc) (a0,d0)
int X509_REQ_add1_attr(X509_REQ * req, X509_ATTRIBUTE * attr) (a0,a1)
int X509_REQ_add1_attr_by_OBJ(X509_REQ * req, const ASN1_OBJECT * obj, int type, const unsigned char * bytes, int len) (a0,a1,d0,a2,d1)
int X509_REQ_add1_attr_by_NID(X509_REQ * req, int nid, int type, const unsigned char * bytes, int len) (a0,d0,d1,a1,d2)
int X509_REQ_add1_attr_by_txt(X509_REQ * req, const char * attrname, int type, const unsigned char * bytes, int len) (a0,a1,d0,a2,d1)
int X509_CRL_set_version(X509_CRL * x, long version) (a0,d0)
int X509_CRL_set_issuer_name(X509_CRL * x, const X509_NAME * name) (a0,a1)
int X509_CRL_set1_lastUpdate(X509_CRL * x, const ASN1_TIME * tm) (a0,a1)
int X509_CRL_set1_nextUpdate(X509_CRL * x, const ASN1_TIME * tm) (a0,a1)
int X509_CRL_sort(X509_CRL * crl) (a0)
int X509_REVOKED_set_serialNumber(X509_REVOKED * x, ASN1_INTEGER * serial) (a0,a1)
int X509_REVOKED_set_revocationDate(X509_REVOKED * r, ASN1_TIME * tm) (a0,a1)
int X509_check_private_key(const X509 * cert, const EVP_PKEY * pkey) (a0,a1)
int X509_issuer_and_serial_cmp(const X509 * a, const X509 * b) (a0,a1)
unsigned long X509_issuer_and_serial_hash(X509 * a) (a0)
int X509_issuer_name_cmp(const X509 * a, const X509 * b) (a0,a1)
unsigned long X509_issuer_name_hash(X509 * a) (a0)
int X509_subject_name_cmp(const X509 * a, const X509 * b) (a0,a1)
unsigned long X509_subject_name_hash(X509 * x) (a0)
int X509_cmp(const X509 * a, const X509 * b) (a0,a1)
int X509_NAME_cmp(const X509_NAME * a, const X509_NAME * b) (a0,a1)
unsigned long OBSOLETE_X509_NAME_hash(X509_NAME * x) (a0)
int X509_CRL_cmp(const X509_CRL * a, const X509_CRL * b) (a0,a1)
int X509_NAME_print(BIO * bp, const X509_NAME * name, int obase) (a0,a1,d0)
int X509_NAME_print_ex(BIO * out, const X509_NAME * nm, int indent, unsigned long flags) (a0,a1,d0,d1)
int X509_print_ex(BIO * bp, X509 * x, unsigned long nmflag, unsigned long cflag) (a0,a1,d0,d1)
int X509_print(BIO * bp, X509 * x) (a0,a1)
int X509_ocspid_print(BIO * bp, X509 * x) (a0,a1)
==reserve 1
int X509_CRL_print(BIO * bp, X509_CRL * x) (a0,a1)
int X509_REQ_print_ex(BIO * bp, X509_REQ * x, unsigned long nmflag, unsigned long cflag) (a0,a1,d0,d1)
int X509_REQ_print(BIO * bp, X509_REQ * req) (a0,a1)
int X509_NAME_entry_count(const X509_NAME * name) (a0)
int X509_NAME_get_text_by_NID(const X509_NAME * name, int nid, char * buf, int len) (a0,d0,a1,d1)
int X509_NAME_get_text_by_OBJ(const X509_NAME * name, const ASN1_OBJECT * obj, char * buf, int len) (a0,a1,a2,d0)
int X509_NAME_get_index_by_NID(const X509_NAME * name, int nid, int lastpos) (a0,d0,d1)
int X509_NAME_get_index_by_OBJ(const X509_NAME * name, const ASN1_OBJECT * obj, int lastpos) (a0,a1,d0)
X509_NAME_ENTRY * X509_NAME_get_entry(const X509_NAME * name, int loc) (a0,d0)
X509_NAME_ENTRY * X509_NAME_delete_entry(X509_NAME * name, int loc) (a0,d0)
int X509_NAME_add_entry(X509_NAME * name, const X509_NAME_ENTRY * ne, int loc, int set) (a0,a1,d0,d1)
int X509_NAME_add_entry_by_OBJ(X509_NAME * name, const ASN1_OBJECT * obj, int type, const unsigned char * bytes, int len, int loc, int set) (a0,a1,d0,a2,d1,d2,d3)
int X509_NAME_add_entry_by_NID(X509_NAME * name, int nid, int type, const unsigned char * bytes, int len, int loc, int set) (a0,d0,d1,a1,d2,d3,d4)
X509_NAME_ENTRY * X509_NAME_ENTRY_create_by_txt(X509_NAME_ENTRY ** ne, const char * field, int type, const unsigned char * bytes, int len) (a0,a1,d0,a2,d1)
X509_NAME_ENTRY * X509_NAME_ENTRY_create_by_NID(X509_NAME_ENTRY ** ne, int nid, int type, const unsigned char * bytes, int len) (a0,d0,d1,a1,d2)
int X509_NAME_add_entry_by_txt(X509_NAME * name, const char * field, int type, const unsigned char * bytes, int len, int loc, int set) (a0,a1,d0,a2,d1,d2,d3)
X509_NAME_ENTRY * X509_NAME_ENTRY_create_by_OBJ(X509_NAME_ENTRY ** ne, const ASN1_OBJECT * obj, int type, const unsigned char * bytes, int len) (a0,a1,d0,a2,d1)
int X509_NAME_ENTRY_set_object(X509_NAME_ENTRY * ne, const ASN1_OBJECT * obj) (a0,a1)
int X509_NAME_ENTRY_set_data(X509_NAME_ENTRY * ne, int type, const unsigned char * bytes, int len) (a0,d0,a1,d1)
ASN1_OBJECT * X509_NAME_ENTRY_get_object(const X509_NAME_ENTRY * ne) (a0)
ASN1_STRING * X509_NAME_ENTRY_get_data(const X509_NAME_ENTRY * ne) (a0)
int X509v3_get_ext_count(const STACK_OF(X509_EXTENSION) * x) (a0)
int X509v3_get_ext_by_NID(const STACK_OF(X509_EXTENSION) * x, int nid, int lastpos) (a0,d0,d1)
int X509v3_get_ext_by_OBJ(const STACK_OF(X509_EXTENSION) * x, const ASN1_OBJECT * obj, int lastpos) (a0,a1,d0)
int X509v3_get_ext_by_critical(const STACK_OF(X509_EXTENSION) * x, int crit, int lastpos) (a0,d0,d1)
X509_EXTENSION * X509v3_get_ext(const STACK_OF(X509_EXTENSION) * x, int loc) (a0,d0)
X509_EXTENSION * X509v3_delete_ext(STACK_OF(X509_EXTENSION) * x, int loc) (a0,d0)
STACK_OF(X509_EXTENSION) * X509v3_add_ext(STACK_OF(X509_EXTENSION) ** x, X509_EXTENSION * ex, int loc) (a0,a1,d0)
int X509_get_ext_count(const X509 * x) (a0)
int X509_get_ext_by_NID(const X509 * x, int nid, int lastpos) (a0,d0,d1)
int X509_get_ext_by_OBJ(const X509 * x, const ASN1_OBJECT * obj, int lastpos) (a0,a1,d0)
int X509_get_ext_by_critical(const X509 * x, int crit, int lastpos) (a0,d0,d1)
X509_EXTENSION * X509_get_ext(const X509 * x, int loc) (a0,d0)
X509_EXTENSION * X509_delete_ext(X509 * x, int loc) (a0,d0)
int X509_add_ext(X509 * x, X509_EXTENSION * ex, int loc) (a0,a1,d0)
void * X509_get_ext_d2i(const X509 * x, int nid, int * crit, int * idx) (a0,d0,a1,a2)
int X509_add1_ext_i2d(X509 * x, int nid, void * value, int crit, unsigned long flags) (a0,d0,a1,d1,d2)
int X509_CRL_get_ext_count(const X509_CRL * x) (a0)
int X509_CRL_get_ext_by_NID(const X509_CRL * x, int nid, int lastpos) (a0,d0,d1)
int X509_CRL_get_ext_by_OBJ(const X509_CRL * x, const ASN1_OBJECT * obj, int lastpos) (a0,a1,d0)
int X509_CRL_get_ext_by_critical(const X509_CRL * x, int crit, int lastpos) (a0,d0,d1)
X509_EXTENSION * X509_CRL_get_ext(const X509_CRL * x, int loc) (a0,d0)
X509_EXTENSION * X509_CRL_delete_ext(X509_CRL * x, int loc) (a0,d0)
int X509_CRL_add_ext(X509_CRL * x, X509_EXTENSION * ex, int loc) (a0,a1,d0)
void * X509_CRL_get_ext_d2i(const X509_CRL * x, int nid, int * crit, int * idx) (a0,d0,a1,a2)
int X509_CRL_add1_ext_i2d(X509_CRL * x, int nid, void * value, int crit, unsigned long flags) (a0,d0,a1,d1,d2)
int X509_REVOKED_get_ext_count(const X509_REVOKED * x) (a0)
int X509_REVOKED_get_ext_by_NID(const X509_REVOKED * x, int nid, int lastpos) (a0,d0,d1)
int X509_REVOKED_get_ext_by_OBJ(const X509_REVOKED * x, const ASN1_OBJECT * obj, int lastpos) (a0,a1,d0)
int X509_REVOKED_get_ext_by_critical(const X509_REVOKED * x, int crit, int lastpos) (a0,d0,d1)
X509_EXTENSION * X509_REVOKED_get_ext(const X509_REVOKED * x, int loc) (a0,d0)
X509_EXTENSION * X509_REVOKED_delete_ext(X509_REVOKED * x, int loc) (a0,d0)
int X509_REVOKED_add_ext(X509_REVOKED * x, X509_EXTENSION * ex, int loc) (a0,a1,d0)
void * X509_REVOKED_get_ext_d2i(const X509_REVOKED * x, int nid, int * crit, int * idx) (a0,d0,a1,a2)
int X509_REVOKED_add1_ext_i2d(X509_REVOKED * x, int nid, void * value, int crit, unsigned long flags) (a0,d0,a1,d1,d2)
X509_EXTENSION * X509_EXTENSION_create_by_NID(X509_EXTENSION ** ex, int nid, int crit, ASN1_OCTET_STRING * data) (a0,d0,d1,a1)
X509_EXTENSION * X509_EXTENSION_create_by_OBJ(X509_EXTENSION ** ex, const ASN1_OBJECT * obj, int crit, ASN1_OCTET_STRING * data) (a0,a1,d0,a2)
int X509_EXTENSION_set_object(X509_EXTENSION * ex, const ASN1_OBJECT * obj) (a0,a1)
int X509_EXTENSION_set_critical(X509_EXTENSION * ex, int crit) (a0,d0)
int X509_EXTENSION_set_data(X509_EXTENSION * ex, ASN1_OCTET_STRING * data) (a0,a1)
ASN1_OBJECT * X509_EXTENSION_get_object(X509_EXTENSION * ex) (a0)
ASN1_OCTET_STRING * X509_EXTENSION_get_data(X509_EXTENSION * ne) (a0)
int X509_EXTENSION_get_critical(const X509_EXTENSION * ex) (a0)
int X509at_get_attr_count(const STACK_OF(X509_ATTRIBUTE) * x) (a0)
int X509at_get_attr_by_NID(const STACK_OF(X509_ATTRIBUTE) * x, int nid, int lastpos) (a0,d0,d1)
int X509at_get_attr_by_OBJ(const STACK_OF(X509_ATTRIBUTE) * sk, const ASN1_OBJECT * obj, int lastpos) (a0,a1,d0)
X509_ATTRIBUTE * X509at_get_attr(const STACK_OF(X509_ATTRIBUTE) * x, int loc) (a0,d0)
X509_ATTRIBUTE * X509at_delete_attr(STACK_OF(X509_ATTRIBUTE) * x, int loc) (a0,d0)
STACK_OF(X509_ATTRIBUTE) * X509at_add1_attr(STACK_OF(X509_ATTRIBUTE) ** x, X509_ATTRIBUTE * attr) (a0,a1)
STACK_OF(X509_ATTRIBUTE) * X509at_add1_attr_by_OBJ(STACK_OF(X509_ATTRIBUTE) ** x, const ASN1_OBJECT * obj, int type, const unsigned char * bytes, int len) (a0,a1,d0,a2,d1)
STACK_OF(X509_ATTRIBUTE) * X509at_add1_attr_by_NID(STACK_OF(X509_ATTRIBUTE) ** x, int nid, int type, const unsigned char * bytes, int len) (a0,d0,d1,a1,d2)
STACK_OF(X509_ATTRIBUTE) * X509at_add1_attr_by_txt(STACK_OF(X509_ATTRIBUTE) ** x, const char * attrname, int type, const unsigned char * bytes, int len) (a0,a1,d0,a2,d1)
X509_ATTRIBUTE * X509_ATTRIBUTE_create_by_NID(X509_ATTRIBUTE ** attr, int nid, int atrtype, const void * data, int len) (a0,d0,d1,a1,d2)
X509_ATTRIBUTE * X509_ATTRIBUTE_create_by_OBJ(X509_ATTRIBUTE ** attr, const ASN1_OBJECT * obj, int atrtype, const void * data, int len) (a0,a1,d0,a2,d1)
X509_ATTRIBUTE * X509_ATTRIBUTE_create_by_txt(X509_ATTRIBUTE ** attr, const char * atrname, int type, const unsigned char * bytes, int len) (a0,a1,d0,a2,d1)
int X509_ATTRIBUTE_set1_object(X509_ATTRIBUTE * attr, const ASN1_OBJECT * obj) (a0,a1)
int X509_ATTRIBUTE_set1_data(X509_ATTRIBUTE * attr, int attrtype, const void * data, int len) (a0,d0,a1,d1)
void * X509_ATTRIBUTE_get0_data(X509_ATTRIBUTE * attr, int idx, int atrtype, void * data) (a0,d0,d1,a1)
int X509_ATTRIBUTE_count(const X509_ATTRIBUTE * attr) (a0)
ASN1_OBJECT * X509_ATTRIBUTE_get0_object(X509_ATTRIBUTE * attr) (a0)
ASN1_TYPE * X509_ATTRIBUTE_get0_type(X509_ATTRIBUTE * attr, int idx) (a0,d0)
int X509_verify_cert(X509_STORE_CTX * ctx) (a0)
X509 * X509_find_by_issuer_and_serial(STACK_OF(X509) * sk, const X509_NAME * name, const ASN1_INTEGER * serial) (a0,a1,a2)
X509 * X509_find_by_subject(STACK_OF(X509) * sk, const X509_NAME * name) (a0,a1)
PBEPARAM * PBEPARAM_new() ()
void PBEPARAM_free(PBEPARAM * a) (a0)
PBEPARAM * d2i_PBEPARAM(PBEPARAM ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_PBEPARAM(const PBEPARAM * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * PBEPARAM_it() ()
PBE2PARAM * PBE2PARAM_new() ()
void PBE2PARAM_free(PBE2PARAM * a) (a0)
PBE2PARAM * d2i_PBE2PARAM(PBE2PARAM ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_PBE2PARAM(const PBE2PARAM * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * PBE2PARAM_it() ()
PBKDF2PARAM * PBKDF2PARAM_new() ()
void PBKDF2PARAM_free(PBKDF2PARAM * a) (a0)
PBKDF2PARAM * d2i_PBKDF2PARAM(PBKDF2PARAM ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_PBKDF2PARAM(const PBKDF2PARAM * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * PBKDF2PARAM_it() ()
X509_ALGOR * PKCS5_pbe_set(int alg, int iter, const unsigned char * salt, int saltlen) (d0,d1,a0,d2)
X509_ALGOR * PKCS5_pbe2_set(const EVP_CIPHER * cipher, int iter, unsigned char * salt, int saltlen) (a0,d0,a1,d1)
PKCS8_PRIV_KEY_INFO * PKCS8_PRIV_KEY_INFO_new() ()
void PKCS8_PRIV_KEY_INFO_free(PKCS8_PRIV_KEY_INFO * a) (a0)
PKCS8_PRIV_KEY_INFO * d2i_PKCS8_PRIV_KEY_INFO(PKCS8_PRIV_KEY_INFO ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_PKCS8_PRIV_KEY_INFO(const PKCS8_PRIV_KEY_INFO * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * PKCS8_PRIV_KEY_INFO_it() ()
EVP_PKEY * EVP_PKCS82PKEY(const PKCS8_PRIV_KEY_INFO * p8) (a0)
PKCS8_PRIV_KEY_INFO * EVP_PKEY2PKCS8(const EVP_PKEY * pkey) (a0)
==reserve 2
int X509_check_trust(X509 * x, int id, int flags) (a0,d0,d1)
int X509_TRUST_get_count() ()
X509_TRUST * X509_TRUST_get0(int idx) (d0)
int X509_TRUST_get_by_id(int id) (d0)
int X509_TRUST_add(int id, int flags, int (*ck)(X509_TRUST *, X509 *, int), const char * name, int arg1, void * arg2) (d0,d1,a0,a1,d2,a2)
void X509_TRUST_cleanup() ()
int X509_TRUST_get_flags(const X509_TRUST * xp) (a0)
char * X509_TRUST_get0_name(const X509_TRUST * xp) (a0)
int X509_TRUST_get_trust(const X509_TRUST * xp) (a0)
int ERR_load_X509_strings() ()
int X509_OBJECT_idx_by_subject(STACK_OF(X509_OBJECT) * h, X509_LOOKUP_TYPE type, const X509_NAME * name) (a0,d0,a1)
X509_OBJECT * X509_OBJECT_retrieve_by_subject(STACK_OF(X509_OBJECT) * h, X509_LOOKUP_TYPE type, const X509_NAME * name) (a0,d0,a1)
X509_OBJECT * X509_OBJECT_retrieve_match(STACK_OF(X509_OBJECT) * h, X509_OBJECT * x) (a0,a1)
int X509_OBJECT_up_ref_count(X509_OBJECT * a) (a0)
X509_STORE * X509_STORE_new() ()
void X509_STORE_free(X509_STORE * xs) (a0)
int X509_STORE_set_flags(X509_STORE * xs, unsigned long flags) (a0,d0)
int X509_STORE_set_purpose(X509_STORE * xs, int purpose) (a0,d0)
int X509_STORE_set_trust(X509_STORE * xs, int trust) (a0,d0)
X509_STORE_CTX * X509_STORE_CTX_new() ()
int X509_STORE_CTX_get1_issuer(X509 ** issuer, X509_STORE_CTX * ctx, X509 * x) (a0,a1,a2)
void X509_STORE_CTX_free(X509_STORE_CTX * ctx) (a0)
int X509_STORE_CTX_init(X509_STORE_CTX * ctx, X509_STORE * trust_store, X509 * target, STACK_OF(X509) * untrusted) (a0,a1,a2,a3)
void X509_STORE_CTX_set0_trusted_stack(X509_STORE_CTX * ctx, STACK_OF(X509) * sk) (a0,a1)
void X509_STORE_CTX_cleanup(X509_STORE_CTX * ctx) (a0)
X509_LOOKUP * X509_STORE_add_lookup(X509_STORE * xs, X509_LOOKUP_METHOD * m) (a0,a1)
X509_LOOKUP_METHOD * X509_LOOKUP_hash_dir() ()
X509_LOOKUP_METHOD * X509_LOOKUP_file() ()
int X509_STORE_add_cert(X509_STORE * xs, X509 * x) (a0,a1)
int X509_STORE_add_crl(X509_STORE * xs, X509_CRL * x) (a0,a1)
int X509_STORE_CTX_get_by_subject(const X509_STORE_CTX * vs, X509_LOOKUP_TYPE type, const X509_NAME * name, X509_OBJECT * ret) (a0,d0,a1,a2)
int X509_LOOKUP_ctrl(X509_LOOKUP * ctx, int cmd, const char * argc, long argl, char ** ret) (a0,d0,a1,d1,a2)
int X509_load_cert_file(X509_LOOKUP * ctx, const char * file, int type) (a0,a1,d0)
int X509_load_crl_file(X509_LOOKUP * ctx, const char * file, int type) (a0,a1,d0)
int X509_load_cert_crl_file(X509_LOOKUP * ctx, const char * file, int type) (a0,a1,d0)
X509_LOOKUP * X509_LOOKUP_new(X509_LOOKUP_METHOD * method) (a0)
void X509_LOOKUP_free(X509_LOOKUP * ctx) (a0)
int X509_LOOKUP_init(X509_LOOKUP * ctx) (a0)
int X509_LOOKUP_by_subject(X509_LOOKUP * ctx, X509_LOOKUP_TYPE type, const X509_NAME * name, X509_OBJECT * ret) (a0,d0,a1,a2)
int X509_LOOKUP_by_issuer_serial(X509_LOOKUP * ctx, X509_LOOKUP_TYPE type, const X509_NAME * name, const ASN1_INTEGER * serial, X509_OBJECT * ret) (a0,d0,a1,a2,a3)
int X509_LOOKUP_by_fingerprint(X509_LOOKUP * ctx, X509_LOOKUP_TYPE type, const unsigned char * bytes, int len, X509_OBJECT * ret) (a0,d0,a1,d1,a2)
int X509_LOOKUP_by_alias(X509_LOOKUP * ctx, X509_LOOKUP_TYPE type, const char * str, int len, X509_OBJECT * ret) (a0,d0,a1,d1,a2)
int X509_LOOKUP_shutdown(X509_LOOKUP * ctx) (a0)
int X509_STORE_load_locations(X509_STORE * xs, const char * file, const char * dir) (a0,a1,a2)
int X509_STORE_set_default_paths(X509_STORE * xs) (a0)
int OBSOLETE_X509_STORE_CTX_get_ex_new_index(long argl, void * argp, CRYPTO_EX_new * new_func, CRYPTO_EX_dup * dup_func, CRYPTO_EX_free * free_func) (d0,a0,a1,a2,a3)
int X509_STORE_CTX_set_ex_data(X509_STORE_CTX * ctx, int idx, void * data) (a0,d0,a1)
void * X509_STORE_CTX_get_ex_data(const X509_STORE_CTX * ctx, int idx) (a0,d0)
int X509_STORE_CTX_get_error(const X509_STORE_CTX * ctx) (a0)
void X509_STORE_CTX_set_error(X509_STORE_CTX * ctx, int s) (a0,d0)
int X509_STORE_CTX_get_error_depth(const X509_STORE_CTX * ctx) (a0)
X509 * X509_STORE_CTX_get_current_cert(const X509_STORE_CTX * ctx) (a0)
STACK_OF(X509) * X509_STORE_CTX_get0_chain(const X509_STORE_CTX * ctx) (a0)
STACK_OF(X509) * X509_STORE_CTX_get1_chain(const X509_STORE_CTX * ctx) (a0)
void X509_STORE_CTX_set_cert(X509_STORE_CTX * c, X509 * x) (a0,a1)
int X509_STORE_CTX_set_purpose(X509_STORE_CTX * ctx, int purpose) (a0,d0)
int X509_STORE_CTX_set_trust(X509_STORE_CTX * ctx, int trust) (a0,d0)
int X509_STORE_CTX_purpose_inherit(X509_STORE_CTX * ctx, int def_purpose, int purpose, int trust) (a0,d0,d1,d2)
void X509_STORE_CTX_set_flags(X509_STORE_CTX * ctx, unsigned long flags) (a0,d0)
void X509_STORE_CTX_set_time(X509_STORE_CTX * ctx, unsigned long flags, time_t t) (a0,d0,d1)
void X509_STORE_CTX_set_verify_cb(X509_STORE_CTX * ctx, int (*verify_cb)(int, X509_STORE_CTX *)) (a0,a1)
BASIC_CONSTRAINTS * BASIC_CONSTRAINTS_new() ()
void BASIC_CONSTRAINTS_free(BASIC_CONSTRAINTS * a) (a0)
BASIC_CONSTRAINTS * d2i_BASIC_CONSTRAINTS(BASIC_CONSTRAINTS ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_BASIC_CONSTRAINTS(const BASIC_CONSTRAINTS * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * BASIC_CONSTRAINTS_it() ()
SXNET * SXNET_new() ()
void SXNET_free(SXNET * a) (a0)
SXNET * d2i_SXNET(SXNET ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_SXNET(const SXNET * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * SXNET_it() ()
SXNETID * SXNETID_new() ()
void SXNETID_free(SXNETID * a) (a0)
SXNETID * d2i_SXNETID(SXNETID ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_SXNETID(const SXNETID * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * SXNETID_it() ()
int SXNET_add_id_asc(SXNET ** psx, const char * zone, const char * user, int userlen) (a0,a1,a2,d0)
int SXNET_add_id_ulong(SXNET ** psx, unsigned long lzone, const char * user, int userlen) (a0,d0,a1,d1)
int SXNET_add_id_INTEGER(SXNET ** psx, ASN1_INTEGER * izone, const char * user, int userlen) (a0,a1,a2,d0)
ASN1_OCTET_STRING * SXNET_get_id_asc(SXNET * sx, const char * zone) (a0,a1)
ASN1_OCTET_STRING * SXNET_get_id_ulong(SXNET * sx, unsigned long lzone) (a0,d0)
ASN1_OCTET_STRING * SXNET_get_id_INTEGER(SXNET * sx, ASN1_INTEGER * zone) (a0,a1)
AUTHORITY_KEYID * AUTHORITY_KEYID_new() ()
void AUTHORITY_KEYID_free(AUTHORITY_KEYID * a) (a0)
AUTHORITY_KEYID * d2i_AUTHORITY_KEYID(AUTHORITY_KEYID ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_AUTHORITY_KEYID(const AUTHORITY_KEYID * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * AUTHORITY_KEYID_it() ()
PKEY_USAGE_PERIOD * PKEY_USAGE_PERIOD_new() ()
void PKEY_USAGE_PERIOD_free(PKEY_USAGE_PERIOD * a) (a0)
PKEY_USAGE_PERIOD * d2i_PKEY_USAGE_PERIOD(PKEY_USAGE_PERIOD ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_PKEY_USAGE_PERIOD(const PKEY_USAGE_PERIOD * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * PKEY_USAGE_PERIOD_it() ()
GENERAL_NAME * GENERAL_NAME_new() ()
void GENERAL_NAME_free(GENERAL_NAME * a) (a0)
GENERAL_NAME * d2i_GENERAL_NAME(GENERAL_NAME ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_GENERAL_NAME(const GENERAL_NAME * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * GENERAL_NAME_it() ()
STACK_OF(CONF_VALUE) * i2v_GENERAL_NAME(X509V3_EXT_METHOD * method, GENERAL_NAME * gen, STACK_OF(CONF_VALUE) * ret) (a0,a1,a2)
int GENERAL_NAME_print(BIO * out, GENERAL_NAME * gen) (a0,a1)
GENERAL_NAMES * GENERAL_NAMES_new() ()
void GENERAL_NAMES_free(GENERAL_NAMES * a) (a0)
GENERAL_NAMES * d2i_GENERAL_NAMES(GENERAL_NAMES ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_GENERAL_NAMES(const GENERAL_NAMES * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * GENERAL_NAMES_it() ()
STACK_OF(CONF_VALUE) * i2v_GENERAL_NAMES(X509V3_EXT_METHOD * method, GENERAL_NAMES * gen, STACK_OF(CONF_VALUE) * extlist) (a0,a1,a2)
GENERAL_NAMES * v2i_GENERAL_NAMES(const X509V3_EXT_METHOD * method, X509V3_CTX * ctx, STACK_OF(CONF_VALUE) * nval) (a0,a1,a2)
OTHERNAME * OTHERNAME_new() ()
void OTHERNAME_free(OTHERNAME * a) (a0)
OTHERNAME * d2i_OTHERNAME(OTHERNAME ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_OTHERNAME(const OTHERNAME * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * OTHERNAME_it() ()
EDIPARTYNAME * EDIPARTYNAME_new() ()
void EDIPARTYNAME_free(EDIPARTYNAME * a) (a0)
EDIPARTYNAME * d2i_EDIPARTYNAME(EDIPARTYNAME ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_EDIPARTYNAME(const EDIPARTYNAME * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * EDIPARTYNAME_it() ()
char * i2s_ASN1_OCTET_STRING(X509V3_EXT_METHOD * method, const ASN1_OCTET_STRING * ia5) (a0,a1)
ASN1_OCTET_STRING * s2i_ASN1_OCTET_STRING(X509V3_EXT_METHOD * method, X509V3_CTX * ctx, const char * str) (a0,a1,a2)
EXTENDED_KEY_USAGE * EXTENDED_KEY_USAGE_new() ()
void EXTENDED_KEY_USAGE_free(EXTENDED_KEY_USAGE * a) (a0)
EXTENDED_KEY_USAGE * d2i_EXTENDED_KEY_USAGE(EXTENDED_KEY_USAGE ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_EXTENDED_KEY_USAGE(const EXTENDED_KEY_USAGE * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * EXTENDED_KEY_USAGE_it() ()
int i2a_ACCESS_DESCRIPTION(BIO * bp, const ACCESS_DESCRIPTION * a) (a0,a1)
CERTIFICATEPOLICIES * CERTIFICATEPOLICIES_new() ()
void CERTIFICATEPOLICIES_free(CERTIFICATEPOLICIES * a) (a0)
CERTIFICATEPOLICIES * d2i_CERTIFICATEPOLICIES(CERTIFICATEPOLICIES ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_CERTIFICATEPOLICIES(const CERTIFICATEPOLICIES * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * CERTIFICATEPOLICIES_it() ()
POLICYINFO * POLICYINFO_new() ()
void POLICYINFO_free(POLICYINFO * a) (a0)
POLICYINFO * d2i_POLICYINFO(POLICYINFO ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_POLICYINFO(const POLICYINFO * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * POLICYINFO_it() ()
POLICYQUALINFO * POLICYQUALINFO_new() ()
void POLICYQUALINFO_free(POLICYQUALINFO * a) (a0)
POLICYQUALINFO * d2i_POLICYQUALINFO(POLICYQUALINFO ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_POLICYQUALINFO(const POLICYQUALINFO * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * POLICYQUALINFO_it() ()
USERNOTICE * USERNOTICE_new() ()
void USERNOTICE_free(USERNOTICE * a) (a0)
USERNOTICE * d2i_USERNOTICE(USERNOTICE ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_USERNOTICE(const USERNOTICE * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * USERNOTICE_it() ()
NOTICEREF * NOTICEREF_new() ()
void NOTICEREF_free(NOTICEREF * a) (a0)
NOTICEREF * d2i_NOTICEREF(NOTICEREF ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_NOTICEREF(const NOTICEREF * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * NOTICEREF_it() ()
CRL_DIST_POINTS * CRL_DIST_POINTS_new() ()
void CRL_DIST_POINTS_free(CRL_DIST_POINTS * a) (a0)
CRL_DIST_POINTS * d2i_CRL_DIST_POINTS(CRL_DIST_POINTS ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_CRL_DIST_POINTS(const CRL_DIST_POINTS * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * CRL_DIST_POINTS_it() ()
DIST_POINT * DIST_POINT_new() ()
void DIST_POINT_free(DIST_POINT * a) (a0)
DIST_POINT * d2i_DIST_POINT(DIST_POINT ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_DIST_POINT(const DIST_POINT * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * DIST_POINT_it() ()
DIST_POINT_NAME * DIST_POINT_NAME_new() ()
void DIST_POINT_NAME_free(DIST_POINT_NAME * a) (a0)
DIST_POINT_NAME * d2i_DIST_POINT_NAME(DIST_POINT_NAME ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_DIST_POINT_NAME(const DIST_POINT_NAME * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * DIST_POINT_NAME_it() ()
ACCESS_DESCRIPTION * ACCESS_DESCRIPTION_new() ()
void ACCESS_DESCRIPTION_free(ACCESS_DESCRIPTION * a) (a0)
ACCESS_DESCRIPTION * d2i_ACCESS_DESCRIPTION(ACCESS_DESCRIPTION ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_ACCESS_DESCRIPTION(const ACCESS_DESCRIPTION * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * ACCESS_DESCRIPTION_it() ()
AUTHORITY_INFO_ACCESS * AUTHORITY_INFO_ACCESS_new() ()
void AUTHORITY_INFO_ACCESS_free(AUTHORITY_INFO_ACCESS * a) (a0)
AUTHORITY_INFO_ACCESS * d2i_AUTHORITY_INFO_ACCESS(AUTHORITY_INFO_ACCESS ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_AUTHORITY_INFO_ACCESS(const AUTHORITY_INFO_ACCESS * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * AUTHORITY_INFO_ACCESS_it() ()
GENERAL_NAME * v2i_GENERAL_NAME(const X509V3_EXT_METHOD * method, X509V3_CTX * ctx, CONF_VALUE * cnf) (a0,a1,a2)
void X509V3_conf_free(CONF_VALUE * val) (a0)
X509_EXTENSION * X509V3_EXT_nconf_nid(CONF * conf, X509V3_CTX * ctx, int ext_nid, const char * value) (a0,a1,d0,a2)
X509_EXTENSION * X509V3_EXT_nconf(CONF * conf, X509V3_CTX * ctx, const char * name, const char * value) (a0,a1,a2,a3)
int X509V3_EXT_add_nconf_sk(CONF * conf, X509V3_CTX * ctx, const char * section, STACK_OF(X509_EXTENSION) ** sk) (a0,a1,a2,a3)
int X509V3_EXT_add_nconf(CONF * conf, X509V3_CTX * ctx, const char * section, X509 * cert) (a0,a1,a2,a3)
int X509V3_EXT_REQ_add_nconf(CONF * conf, X509V3_CTX * ctx, const char * section, X509_REQ * req) (a0,a1,a2,a3)
int X509V3_EXT_CRL_add_nconf(CONF * conf, X509V3_CTX * ctx, const char * section, X509_CRL * crl) (a0,a1,a2,a3)
X509_EXTENSION * X509V3_EXT_conf_nid(LHASH_OF(CONF_VALUE) * conf, X509V3_CTX * ctx, int ext_nid, const char * value) (a0,a1,d0,a2)
X509_EXTENSION * X509V3_EXT_conf(LHASH_OF(CONF_VALUE) * conf, X509V3_CTX * ctx, const char * name, const char * value) (a0,a1,a2,a3)
int X509V3_EXT_add_conf(LHASH_OF(CONF_VALUE) * conf, X509V3_CTX * ctx, const char * section, X509 * cert) (a0,a1,a2,a3)
int X509V3_EXT_REQ_add_conf(LHASH_OF(CONF_VALUE) * conf, X509V3_CTX * ctx, const char * section, X509_REQ * req) (a0,a1,a2,a3)
int X509V3_EXT_CRL_add_conf(LHASH_OF(CONF_VALUE) * conf, X509V3_CTX * ctx, const char * section, X509_CRL * crl) (a0,a1,a2,a3)
int X509V3_add_value_bool_nf(const char * name, int asn1_bool, STACK_OF(CONF_VALUE) ** extlist) (a0,d0,a1)
int X509V3_get_value_bool(const CONF_VALUE * value, int * asn1_bool) (a0,a1)
int X509V3_get_value_int(const CONF_VALUE * value, ASN1_INTEGER ** aint) (a0,a1)
void X509V3_set_nconf(X509V3_CTX * ctx, CONF * conf) (a0,a1)
void X509V3_set_conf_lhash(X509V3_CTX * ctx, LHASH_OF(CONF_VALUE) * lhash) (a0,a1)
char * X509V3_get_string(X509V3_CTX * ctx, const char * name, const char * section) (a0,a1,a2)
STACK_OF(CONF_VALUE) * X509V3_get_section(X509V3_CTX * ctx, const char * section) (a0,a1)
void X509V3_string_free(X509V3_CTX * ctx, char * str) (a0,a1)
void X509V3_section_free(X509V3_CTX * ctx, STACK_OF(CONF_VALUE) * section) (a0,a1)
void X509V3_set_ctx(X509V3_CTX * ctx, X509 * issuer, X509 * subject, X509_REQ * req, X509_CRL * crl, int flags) (a0,a1,a2,a3,d0,d1)
int X509V3_add_value(const char * name, const char * value, STACK_OF(CONF_VALUE) ** extlist) (a0,a1,a2)
int X509V3_add_value_uchar(const char * name, const unsigned char * value, STACK_OF(CONF_VALUE) ** extlist) (a0,a1,a2)
int X509V3_add_value_bool(const char * name, int asn1_bool, STACK_OF(CONF_VALUE) ** extlist) (a0,d0,a1)
int X509V3_add_value_int(const char * name, const ASN1_INTEGER * aint, STACK_OF(CONF_VALUE) ** extlist) (a0,a1,a2)
char * i2s_ASN1_INTEGER(X509V3_EXT_METHOD * meth, const ASN1_INTEGER * aint) (a0,a1)
ASN1_INTEGER * s2i_ASN1_INTEGER(X509V3_EXT_METHOD * meth, const char * value) (a0,a1)
char * i2s_ASN1_ENUMERATED(X509V3_EXT_METHOD * meth, const ASN1_ENUMERATED * aint) (a0,a1)
char * i2s_ASN1_ENUMERATED_TABLE(X509V3_EXT_METHOD * meth, const ASN1_ENUMERATED * aint) (a0,a1)
int X509V3_EXT_add(X509V3_EXT_METHOD * ext) (a0)
int X509V3_EXT_add_list(X509V3_EXT_METHOD * extlist) (a0)
int X509V3_EXT_add_alias(int nid_to, int nid_from) (d0,d1)
void X509V3_EXT_cleanup() ()
const X509V3_EXT_METHOD * X509V3_EXT_get(X509_EXTENSION * ext) (a0)
const X509V3_EXT_METHOD * X509V3_EXT_get_nid(int nid) (d0)
int X509V3_add_standard_extensions() ()
STACK_OF(CONF_VALUE) * X509V3_parse_list(const char * line) (a0)
void * X509V3_EXT_d2i(X509_EXTENSION * ext) (a0)
void * X509V3_get_d2i(const STACK_OF(X509_EXTENSION) * x, int nid, int * crit, int * idx) (a0,d0,a1,a2)
X509_EXTENSION * X509V3_EXT_i2d(int ext_nid, int crit, void * ext_struc) (d0,d1,a0)
int X509V3_add1_i2d(STACK_OF(X509_EXTENSION) ** x, int nid, void * value, int crit, unsigned long flags) (a0,d0,a1,d1,d2)
char * OPENSSL_buf2hexstr(const unsigned char * buffer, long len) (a0,d0)
unsigned char * OPENSSL_hexstr2buf(const char * str, long * len) (a0,a1)
void X509V3_EXT_val_prn(BIO * out, STACK_OF(CONF_VALUE) * val, int indent, int ml) (a0,a1,d0,d1)
int X509V3_EXT_print(BIO * out, X509_EXTENSION * ext, unsigned long flag, int indent) (a0,a1,d0,d1)
int X509V3_extensions_print(BIO * out, const char * title, const STACK_OF(X509_EXTENSION) * exts, unsigned long flag, int indent) (a0,a1,a2,d0,d1)
int X509_check_purpose(X509 * x, int id, int ca) (a0,d0,d1)
int X509_supported_extension(X509_EXTENSION * ex) (a0)
int X509_PURPOSE_set(int * p, int purpose) (a0,d0)
int X509_check_issued(X509 * issuer, X509 * subject) (a0,a1)
int X509_PURPOSE_get_count() ()
X509_PURPOSE * X509_PURPOSE_get0(int idx) (d0)
int X509_PURPOSE_get_by_sname(const char * sname) (a0)
int X509_PURPOSE_get_by_id(int id) (d0)
int X509_PURPOSE_add(int id, int trust, int flags, int (*ck)(const X509_PURPOSE *, const X509 *, int), const char * name, const char * sname, void * arg) (d0,d1,d2,a0,a1,a2,a3)
char * X509_PURPOSE_get0_name(const X509_PURPOSE * xp) (a0)
char * X509_PURPOSE_get0_sname(const X509_PURPOSE * xp) (a0)
int X509_PURPOSE_get_trust(const X509_PURPOSE * xp) (a0)
void X509_PURPOSE_cleanup() ()
int X509_PURPOSE_get_id(const X509_PURPOSE * a) (a0)
STACK_OF(OPENSSL_STRING) * X509_get1_email(X509 * x) (a0)
STACK_OF(OPENSSL_STRING) * X509_REQ_get1_email(X509_REQ * x) (a0)
void X509_email_free(STACK_OF(OPENSSL_STRING) * sk) (a0)
int ERR_load_X509V3_strings() ()
const char * AES_options() ()
int AES_set_encrypt_key(const unsigned char * userKey, const int bits, AES_KEY * key) (a0,d0,a1)
int AES_set_decrypt_key(const unsigned char * userKey, const int bits, AES_KEY * key) (a0,d0,a1)
void AES_encrypt(const unsigned char * in, unsigned char * out, const AES_KEY * key) (a0,a1,a2)
void AES_decrypt(const unsigned char * in, unsigned char * out, const AES_KEY * key) (a0,a1,a2)
void AES_ecb_encrypt(const unsigned char * in, unsigned char * out, const AES_KEY * key, const int enc) (a0,a1,a2,d0)
void AES_cbc_encrypt(const unsigned char * in, unsigned char * out, size_t length, const AES_KEY * key, unsigned char * ivec, const int enc) (a0,a1,d0,a2,a3,d1)
void AES_cfb128_encrypt(const unsigned char * in, unsigned char * out, size_t length, const AES_KEY * key, unsigned char * ivec, int * num, const int enc) (a0,a1,d0,a2,a3,d1,d2)
void AES_cfb1_encrypt(const unsigned char * in, unsigned char * out, size_t length, const AES_KEY * key, unsigned char * ivec, int * num, const int enc) (a0,a1,d0,a2,a3,d1,d2)
void AES_cfb8_encrypt(const unsigned char * in, unsigned char * out, size_t length, const AES_KEY * key, unsigned char * ivec, int * num, const int enc) (a0,a1,d0,a2,a3,d1,d2)
==reserve 1
void AES_ofb128_encrypt(const unsigned char * in, unsigned char * out, size_t length, const AES_KEY * key, unsigned char * ivec, int * num) (a0,a1,d0,a2,a3,d1)
==reserve 1
void BF_set_key(BF_KEY * key, int len, const unsigned char * data) (a0,d0,a1)
void BF_encrypt(BF_LONG * data, const BF_KEY * key) (a0,a1)
void BF_decrypt(BF_LONG * data, const BF_KEY * key) (a0,a1)
void BF_ecb_encrypt(const unsigned char * in, unsigned char * out, const BF_KEY * key, int enc) (a0,a1,a2,d0)
void BF_cbc_encrypt(const unsigned char * in, unsigned char * out, long length, const BF_KEY * schedule, unsigned char * ivec, int enc) (a0,a1,d0,a2,a3,d1)
void BF_cfb64_encrypt(const unsigned char * in, unsigned char * out, long length, const BF_KEY * schedule, unsigned char * ivec, int * num, int enc) (a0,a1,d0,a2,a3,d1,d2)
void BF_ofb64_encrypt(const unsigned char * in, unsigned char * out, long length, const BF_KEY * schedule, unsigned char * ivec, int * num) (a0,a1,d0,a2,a3,d1)
const char * BF_options() ()
void CAST_set_key(CAST_KEY * key, int len, const unsigned char * data) (a0,d0,a1)
void CAST_ecb_encrypt(const unsigned char * in, unsigned char * out, const CAST_KEY * key, int enc) (a0,a1,a2,d0)
void CAST_encrypt(CAST_LONG * data, const CAST_KEY * key) (a0,a1)
void CAST_decrypt(CAST_LONG * data, const CAST_KEY * key) (a0,a1)
void CAST_cbc_encrypt(const unsigned char * in, unsigned char * out, long length, const CAST_KEY * ks, unsigned char * iv, int enc) (a0,a1,d0,a2,a3,d1)
void CAST_cfb64_encrypt(const unsigned char * in, unsigned char * out, long length, const CAST_KEY * schedule, unsigned char * ivec, int * num, int enc) (a0,a1,d0,a2,a3,d1,d2)
void CAST_ofb64_encrypt(const unsigned char * in, unsigned char * out, long length, const CAST_KEY * schedule, unsigned char * ivec, int * num) (a0,a1,d0,a2,a3,d1)
==reserve 1
const char * DES_options() ()
void DES_ecb3_encrypt(const_DES_cblock * input, DES_cblock * output, DES_key_schedule * ks1, DES_key_schedule * ks2, DES_key_schedule * ks3, int enc) (a0,a1,a2,a3,d0,d1)
DES_LONG DES_cbc_cksum(const unsigned char * input, DES_cblock * output, long length, DES_key_schedule * schedule, const_DES_cblock * ivec) (a0,a1,d0,a2,a3)
void DES_cbc_encrypt(const unsigned char * input, unsigned char * output, long length, DES_key_schedule * schedule, DES_cblock * ivec, int enc) (a0,a1,d0,a2,a3,d1)
void DES_ncbc_encrypt(const unsigned char * input, unsigned char * output, long length, DES_key_schedule * schedule, DES_cblock * ivec, int enc) (a0,a1,d0,a2,a3,d1)
void DES_xcbc_encrypt(const unsigned char * input, unsigned char * output, long length, DES_key_schedule * schedule, DES_cblock * ivec, const_DES_cblock * inw, const_DES_cblock * outw, int enc) (a0,a1,d0,a2,a3,d1,d2,d3)
void DES_cfb_encrypt(const unsigned char * in, unsigned char * out, int numbits, long length, DES_key_schedule * schedule, DES_cblock * ivec, int enc) (a0,a1,d0,d1,a2,a3,d2)
void DES_ecb_encrypt(const_DES_cblock * input, DES_cblock * output, DES_key_schedule * ks, int enc) (a0,a1,a2,d0)
void DES_encrypt1(DES_LONG * data, DES_key_schedule * ks, int enc) (a0,a1,d0)
void DES_encrypt2(DES_LONG * data, DES_key_schedule * ks, int enc) (a0,a1,d0)
void DES_encrypt3(DES_LONG * data, DES_key_schedule * ks1, DES_key_schedule * ks2, DES_key_schedule * ks3) (a0,a1,a2,a3)
void DES_decrypt3(DES_LONG * data, DES_key_schedule * ks1, DES_key_schedule * ks2, DES_key_schedule * ks3) (a0,a1,a2,a3)
void DES_ede3_cbc_encrypt(const unsigned char * input, unsigned char * output, long length, DES_key_schedule * ks1, DES_key_schedule * ks2, DES_key_schedule * ks3, DES_cblock * ivec, int enc) (a0,a1,d0,a2,a3,d1,d2,d3)
==reserve 1
void DES_ede3_cfb64_encrypt(const unsigned char * in, unsigned char * out, long length, DES_key_schedule * ks1, DES_key_schedule * ks2, DES_key_schedule * ks3, DES_cblock * ivec, int * num, int enc) (a0,a1,d0,a2,a3,d1,d2,d3,d4)
void DES_ede3_cfb_encrypt(const unsigned char * in, unsigned char * out, int numbits, long length, DES_key_schedule * ks1, DES_key_schedule * ks2, DES_key_schedule * ks3, DES_cblock * ivec, int enc) (a0,a1,d0,d1,a2,a3,d2,d3,d4)
void DES_ede3_ofb64_encrypt(const unsigned char * in, unsigned char * out, long length, DES_key_schedule * ks1, DES_key_schedule * ks2, DES_key_schedule * ks3, DES_cblock * ivec, int * num) (a0,a1,d0,a2,a3,d1,d2,d3)
==reserve 1
char * DES_fcrypt(const char * buf, const char * salt, char * ret) (a0,a1,a2)
char * DES_crypt(const char * buf, const char * salt) (a0,a1)
void DES_ofb_encrypt(const unsigned char * in, unsigned char * out, int numbits, long length, DES_key_schedule * schedule, DES_cblock * ivec) (a0,a1,d0,d1,a2,a3)
void DES_pcbc_encrypt(const unsigned char * input, unsigned char * output, long length, DES_key_schedule * schedule, DES_cblock * ivec, int enc) (a0,a1,d0,a2,a3,d1)
DES_LONG DES_quad_cksum(const unsigned char * input, DES_cblock * output, long length, int out_count, DES_cblock * seed) (a0,a1,d0,d1,a2)
int DES_random_key(DES_cblock * ret) (a0)
void DES_set_odd_parity(DES_cblock * key) (a0)
int DES_check_key_parity(const_DES_cblock * key) (a0)
int DES_is_weak_key(const_DES_cblock * key) (a0)
int DES_set_key(const_DES_cblock * key, DES_key_schedule * schedule) (a0,a1)
int DES_key_sched(const_DES_cblock * key, DES_key_schedule * schedule) (a0,a1)
int DES_set_key_checked(const_DES_cblock * key, DES_key_schedule * schedule) (a0,a1)
void DES_set_key_unchecked(const_DES_cblock * key, DES_key_schedule * schedule) (a0,a1)
void DES_string_to_key(const char * str, DES_cblock * key) (a0,a1)
void DES_string_to_2keys(const char * str, DES_cblock * key1, DES_cblock * key2) (a0,a1,a2)
void DES_cfb64_encrypt(const unsigned char * in, unsigned char * out, long length, DES_key_schedule * schedule, DES_cblock * ivec, int * num, int enc) (a0,a1,d0,a2,a3,d1,d2)
void DES_ofb64_encrypt(const unsigned char * in, unsigned char * out, long length, DES_key_schedule * schedule, DES_cblock * ivec, int * num) (a0,a1,d0,a2,a3,d1)
==reserve 37
const DH_METHOD * DH_OpenSSL() ()
void DH_set_default_method(const DH_METHOD * meth) (a0)
const DH_METHOD * DH_get_default_method() ()
int DH_set_method(DH * dh, const DH_METHOD * meth) (a0,a1)
DH * DH_new_method(ENGINE * engine) (a0)
DH * DH_new() ()
void DH_free(DH * dh) (a0)
int DH_up_ref(DH * dh) (a0)
int DH_size(const DH * dh) (a0)
int OBSOLETE_DH_get_ex_new_index(long argl, void * argp, CRYPTO_EX_new * new_func, CRYPTO_EX_dup * dup_func, CRYPTO_EX_free * free_func) (d0,a0,a1,a2,a3)
int DH_set_ex_data(DH * d, int idx, void * arg) (a0,d0,a1)
void * DH_get_ex_data(const DH * d, int idx) (a0,d0)
DH * DH_generate_parameters(int prime_len, int generator, void (*callback)(int, int, void *), void * cb_arg) (d0,d1,a0,a1)
int DH_check(const DH * dh, int * codes) (a0,a1)
int DH_generate_key(DH * dh) (a0)
int DH_compute_key(unsigned char * key, const BIGNUM * pub_key, DH * dh) (a0,a1,a2)
DH * d2i_DHparams(DH ** a, const unsigned char ** pp, long length) (a0,a1,d0)
int i2d_DHparams(const DH * a, unsigned char ** pp) (a0,a1)
int DHparams_print(BIO * bp, const DH * x) (a0,a1)
int ERR_load_DH_strings() ()
DSA_SIG * DSA_SIG_new() ()
void DSA_SIG_free(DSA_SIG * a) (a0)
int i2d_DSA_SIG(const DSA_SIG * a, unsigned char ** pp) (a0,a1)
DSA_SIG * d2i_DSA_SIG(DSA_SIG ** v, const unsigned char ** pp, long length) (a0,a1,d0)
DSA_SIG * DSA_do_sign(const unsigned char * dgst, int dlen, DSA * dsa) (a0,d0,a1)
int DSA_do_verify(const unsigned char * dgst, int dgst_len, DSA_SIG * sig, DSA * dsa) (a0,d0,a1,a2)
const DSA_METHOD * DSA_OpenSSL() ()
void DSA_set_default_method(const DSA_METHOD * a) (a0)
const DSA_METHOD * DSA_get_default_method() ()
int DSA_set_method(DSA * dsa, const DSA_METHOD * a) (a0,a1)
DSA * DSA_new() ()
DSA * DSA_new_method(ENGINE * engine) (a0)
void DSA_free(DSA * r) (a0)
int DSA_up_ref(DSA * r) (a0)
int DSA_size(const DSA * a) (a0)
int DSA_sign_setup(DSA * dsa, BN_CTX * ctx_in, BIGNUM ** kinvp, BIGNUM ** rp) (a0,a1,a2,a3)
int DSA_sign(int type, const unsigned char * dgst, int dlen, unsigned char * sig, unsigned int * siglen, DSA * dsa) (d0,a0,d1,a1,a2,a3)
int DSA_verify(int type, const unsigned char * dgst, int dgst_len, const unsigned char * sigbuf, int siglen, DSA * dsa) (d0,a0,d1,a1,d2,a2)
int OBSOLETE_DSA_get_ex_new_index(long argl, void * argp, CRYPTO_EX_new * new_func, CRYPTO_EX_dup * dup_func, CRYPTO_EX_free * free_func) (d0,a0,a1,a2,a3)
int DSA_set_ex_data(DSA * d, int idx, void * arg) (a0,d0,a1)
void * DSA_get_ex_data(const DSA * d, int idx) (a0,d0)
DSA * d2i_DSAPublicKey(DSA ** a, const unsigned char ** pp, long length) (a0,a1,d0)
DSA * d2i_DSAPrivateKey(DSA ** a, const unsigned char ** pp, long length) (a0,a1,d0)
DSA * d2i_DSAparams(DSA ** a, const unsigned char ** pp, long length) (a0,a1,d0)
DSA * DSA_generate_parameters(int bits, unsigned char * seed, int seed_len, int * counter_ret, unsigned long * h_ret, void (*callback)(int, int, void *), void * cb_arg) (d0,a0,d1,a1,a2,a3,d2)
int DSA_generate_key(DSA * a) (a0)
int i2d_DSAPublicKey(const DSA * a, unsigned char ** pp) (a0,a1)
int i2d_DSAPrivateKey(const DSA * a, unsigned char ** pp) (a0,a1)
int i2d_DSAparams(const DSA * a, unsigned char ** pp) (a0,a1)
int DSAparams_print(BIO * bp, const DSA * x) (a0,a1)
int DSA_print(BIO * bp, const DSA * x, int off) (a0,a1,d0)
DH * DSA_dup_DH(const DSA * r) (a0)
int ERR_load_DSA_strings() ()
const char * IDEA_options() ()
void IDEA_ecb_encrypt(const unsigned char * in, unsigned char * out, IDEA_KEY_SCHEDULE * ks) (a0,a1,a2)
void IDEA_set_encrypt_key(const unsigned char * key, IDEA_KEY_SCHEDULE * ks) (a0,a1)
void IDEA_set_decrypt_key(IDEA_KEY_SCHEDULE * ek, IDEA_KEY_SCHEDULE * dk) (a0,a1)
void IDEA_cbc_encrypt(const unsigned char * in, unsigned char * out, long length, IDEA_KEY_SCHEDULE * ks, unsigned char * iv, int enc) (a0,a1,d0,a2,a3,d1)
void IDEA_cfb64_encrypt(const unsigned char * in, unsigned char * out, long length, IDEA_KEY_SCHEDULE * ks, unsigned char * iv, int * num, int enc) (a0,a1,d0,a2,a3,d1,d2)
void IDEA_ofb64_encrypt(const unsigned char * in, unsigned char * out, long length, IDEA_KEY_SCHEDULE * ks, unsigned char * iv, int * num) (a0,a1,d0,a2,a3,d1)
void IDEA_encrypt(unsigned long * in, IDEA_KEY_SCHEDULE * ks) (a0,a1)
const char * MD2_options() ()
int MD2_Init(MD2_CTX * c) (a0)
int MD2_Update(MD2_CTX * c, const unsigned char * data, size_t len) (a0,a1,d0)
int MD2_Final(unsigned char * md, MD2_CTX * c) (a0,a1)
unsigned char * MD2(const unsigned char * d, size_t n, unsigned char * md) (a0,d0,a1)
int MD4_Init(MD4_CTX * c) (a0)
int MD4_Update(MD4_CTX * c, const void * data, size_t len) (a0,a1,d0)
int MD4_Final(unsigned char * md, MD4_CTX * c) (a0,a1)
unsigned char * MD4(const unsigned char * d, size_t n, unsigned char * md) (a0,d0,a1)
void MD4_Transform(MD4_CTX * c, const unsigned char * b) (a0,a1)
int MD5_Init(MD5_CTX * c) (a0)
int MD5_Update(MD5_CTX * c, const void * data, size_t len) (a0,a1,d0)
int MD5_Final(unsigned char * md, MD5_CTX * c) (a0,a1)
unsigned char * MD5(const unsigned char * d, size_t n, unsigned char * md) (a0,d0,a1)
void MD5_Transform(MD5_CTX * c, const unsigned char * b) (a0,a1)
int MDC2_Init(MDC2_CTX * c) (a0)
int MDC2_Update(MDC2_CTX * c, const unsigned char * data, size_t len) (a0,a1,d0)
int MDC2_Final(unsigned char * md, MDC2_CTX * c) (a0,a1)
unsigned char * MDC2(const unsigned char * d, size_t n, unsigned char * md) (a0,d0,a1)
void RC2_set_key(RC2_KEY * key, int len, const unsigned char * data, int bits) (a0,d0,a1,d1)
void RC2_ecb_encrypt(const unsigned char * in, unsigned char * out, RC2_KEY * key, int enc) (a0,a1,a2,d0)
void RC2_encrypt(unsigned long * data, RC2_KEY * key) (a0,a1)
void RC2_decrypt(unsigned long * data, RC2_KEY * key) (a0,a1)
void RC2_cbc_encrypt(const unsigned char * in, unsigned char * out, long length, RC2_KEY * ks, unsigned char * iv, int enc) (a0,a1,d0,a2,a3,d1)
void RC2_cfb64_encrypt(const unsigned char * in, unsigned char * out, long length, RC2_KEY * schedule, unsigned char * ivec, int * num, int enc) (a0,a1,d0,a2,a3,d1,d2)
void RC2_ofb64_encrypt(const unsigned char * in, unsigned char * out, long length, RC2_KEY * schedule, unsigned char * ivec, int * num) (a0,a1,d0,a2,a3,d1)
const char * RC4_options() ()
void RC4_set_key(RC4_KEY * key, int len, const unsigned char * data) (a0,d0,a1)
void RC4(RC4_KEY * key, size_t len, const unsigned char * indata, unsigned char * outdata) (a0,d0,a1,a2)
int RC5_32_set_key(RC5_32_KEY * key, int len, const unsigned char * data, int rounds) (a0,d0,a1,d1)
void RC5_32_ecb_encrypt(const unsigned char * in, unsigned char * out, RC5_32_KEY * key, int enc) (a0,a1,a2,d0)
void RC5_32_encrypt(unsigned long * data, RC5_32_KEY * key) (a0,a1)
void RC5_32_decrypt(unsigned long * data, RC5_32_KEY * key) (a0,a1)
void RC5_32_cbc_encrypt(const unsigned char * in, unsigned char * out, long length, RC5_32_KEY * ks, unsigned char * iv, int enc) (a0,a1,d0,a2,a3,d1)
void RC5_32_cfb64_encrypt(const unsigned char * in, unsigned char * out, long length, RC5_32_KEY * schedule, unsigned char * ivec, int * num, int enc) (a0,a1,d0,a2,a3,d1,d2)
void RC5_32_ofb64_encrypt(const unsigned char * in, unsigned char * out, long length, RC5_32_KEY * schedule, unsigned char * ivec, int * num) (a0,a1,d0,a2,a3,d1)
int RIPEMD160_Init(RIPEMD160_CTX * c) (a0)
int RIPEMD160_Update(RIPEMD160_CTX * c, const void * data, size_t len) (a0,a1,d0)
int RIPEMD160_Final(unsigned char * md, RIPEMD160_CTX * c) (a0,a1)
unsigned char * RIPEMD160(const unsigned char * d, size_t n, unsigned char * md) (a0,d0,a1)
void RIPEMD160_Transform(RIPEMD160_CTX * c, const unsigned char * b) (a0,a1)
RSA * RSA_new() ()
RSA * RSA_new_method(ENGINE * engine) (a0)
int RSA_size(const RSA * a) (a0)
RSA * RSA_generate_key(int bits, unsigned long e, void (*callback)(int, int, void *), void * cb_arg) (d0,d1,a0,a1)
int RSA_check_key(const RSA * a) (a0)
int RSA_public_encrypt(int flen, const unsigned char * from, unsigned char * to, RSA * rsa, int padding) (d0,a0,a1,a2,d1)
int RSA_private_encrypt(int flen, const unsigned char * from, unsigned char * to, RSA * rsa, int padding) (d0,a0,a1,a2,d1)
int RSA_public_decrypt(int flen, const unsigned char * from, unsigned char * to, RSA * rsa, int padding) (d0,a0,a1,a2,d1)
int RSA_private_decrypt(int flen, const unsigned char * from, unsigned char * to, RSA * rsa, int padding) (d0,a0,a1,a2,d1)
void RSA_free(RSA * r) (a0)
int RSA_up_ref(RSA * r) (a0)
int RSA_flags(const RSA * r) (a0)
void RSA_set_default_method(const RSA_METHOD * meth) (a0)
const RSA_METHOD * RSA_get_default_method() ()
const RSA_METHOD * RSA_get_method(const RSA * rsa) (a0)
int RSA_set_method(RSA * rsa, const RSA_METHOD * meth) (a0,a1)
==reserve 1
const RSA_METHOD * RSA_null_method() ()
RSA * d2i_RSAPublicKey(RSA ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_RSAPublicKey(const RSA * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * RSAPublicKey_it() ()
RSA * d2i_RSAPrivateKey(RSA ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_RSAPrivateKey(const RSA * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * RSAPrivateKey_it() ()
int RSA_print(BIO * bp, const RSA * r, int offset) (a0,a1,d0)
==reserve 4
int RSA_sign(int type, const unsigned char * m, unsigned int m_length, unsigned char * sigret, unsigned int * siglen, RSA * rsa) (d0,a0,d1,a1,a2,a3)
int RSA_verify(int type, const unsigned char * m, unsigned int m_length, const unsigned char * sigbuf, unsigned int siglen, RSA * rsa) (d0,a0,d1,a1,d2,a2)
int RSA_sign_ASN1_OCTET_STRING(int type, const unsigned char * m, unsigned int m_length, unsigned char * sigret, unsigned int * siglen, RSA * rsa) (d0,a0,d1,a1,a2,a3)
int RSA_verify_ASN1_OCTET_STRING(int type, const unsigned char * m, unsigned int m_length, unsigned char * sigbuf, unsigned int siglen, RSA * rsa) (d0,a0,d1,a1,d2,a2)
int RSA_blinding_on(RSA * rsa, BN_CTX * ctx) (a0,a1)
void RSA_blinding_off(RSA * rsa) (a0)
int RSA_padding_add_PKCS1_type_1(unsigned char * to, int tlen, const unsigned char * f, int fl) (a0,d0,a1,d1)
int RSA_padding_check_PKCS1_type_1(unsigned char * to, int tlen, const unsigned char * f, int fl, int rsa_len) (a0,d0,a1,d1,d2)
int RSA_padding_add_PKCS1_type_2(unsigned char * to, int tlen, const unsigned char * f, int fl) (a0,d0,a1,d1)
int RSA_padding_check_PKCS1_type_2(unsigned char * to, int tlen, const unsigned char * f, int fl, int rsa_len) (a0,d0,a1,d1,d2)
int RSA_padding_add_PKCS1_OAEP(unsigned char * to, int tlen, const unsigned char * f, int fl, const unsigned char * p, int pl) (a0,d0,a1,d1,a2,d2)
int RSA_padding_check_PKCS1_OAEP(unsigned char * to, int tlen, const unsigned char * f, int fl, int rsa_len, const unsigned char * p, int pl) (a0,d0,a1,d1,d2,a2,d3)
==reserve 2
int RSA_padding_add_none(unsigned char * to, int tlen, const unsigned char * f, int fl) (a0,d0,a1,d1)
int RSA_padding_check_none(unsigned char * to, int tlen, const unsigned char * f, int fl, int rsa_len) (a0,d0,a1,d1,d2)
int OBSOLETE_RSA_get_ex_new_index(long argl, void * argp, CRYPTO_EX_new * new_func, CRYPTO_EX_dup * dup_func, CRYPTO_EX_free * free_func) (d0,a0,a1,a2,a3)
int RSA_set_ex_data(RSA * r, int idx, void * arg) (a0,d0,a1)
void * RSA_get_ex_data(const RSA * r, int idx) (a0,d0)
RSA * RSAPublicKey_dup(const RSA * rsa) (a0)
RSA * RSAPrivateKey_dup(const RSA * rsa) (a0)
int ERR_load_RSA_strings() ()
==reserve 5
int SHA1_Init(SHA_CTX * c) (a0)
int SHA1_Update(SHA_CTX * c, const void * data, size_t len) (a0,a1,d0)
int SHA1_Final(unsigned char * md, SHA_CTX * c) (a0,a1)
unsigned char * SHA1(const unsigned char * d, size_t n, unsigned char * md) (a0,d0,a1)
void SHA1_Transform(SHA_CTX * c, const unsigned char * data) (a0,a1)
==private
int UI_read_string_lib(UI * ui, UI_STRING * uis) (a0,a1)
==private
int UI_write_string_lib(UI * ui, UI_STRING * uis) (a0,a1)
==public
void HMAC_CTX_set_flags(HMAC_CTX * ctx, unsigned long flags) (a0,d0)
int X509_check_ca(X509 * x) (a0)
PROXY_POLICY * PROXY_POLICY_new() ()
void PROXY_POLICY_free(PROXY_POLICY * a) (a0)
PROXY_POLICY * d2i_PROXY_POLICY(PROXY_POLICY ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_PROXY_POLICY(const PROXY_POLICY * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * PROXY_POLICY_it() ()
PROXY_CERT_INFO_EXTENSION * PROXY_CERT_INFO_EXTENSION_new() ()
void PROXY_CERT_INFO_EXTENSION_free(PROXY_CERT_INFO_EXTENSION * a) (a0)
PROXY_CERT_INFO_EXTENSION * d2i_PROXY_CERT_INFO_EXTENSION(PROXY_CERT_INFO_EXTENSION ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_PROXY_CERT_INFO_EXTENSION(const PROXY_CERT_INFO_EXTENSION * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * PROXY_CERT_INFO_EXTENSION_it() ()
==reserve 2
int BN_mod_exp_mont_consttime(BIGNUM * rr, const BIGNUM * a, const BIGNUM * p, const BIGNUM * m, BN_CTX * ctx, BN_MONT_CTX * in_mont) (a0,a1,a2,a3,d0,d1)
BN_MONT_CTX * BN_MONT_CTX_set_locked(BN_MONT_CTX ** pmont, CRYPTO_RWLOCK * lock, const BIGNUM * mod, BN_CTX * ctx) (a0,a1,a2,a3)
int PKCS1_MGF1(unsigned char * mask, long len, const unsigned char * seed, long seedlen, const EVP_MD * dgst) (a0,d0,a1,d1,a2)
int RSA_padding_add_X931(unsigned char * to, int tlen, const unsigned char * from, int flen) (a0,d0,a1,d1)
int RSA_padding_check_X931(unsigned char * to, int tlen, const unsigned char * from, int flen, int num) (a0,d0,a1,d1,d2)
int RSA_X931_hash_id(int nid) (d0)
int RSA_verify_PKCS1_PSS(RSA * rsa, const unsigned char * mHash, const EVP_MD * Hash, const unsigned char * EM, int sLen) (a0,a1,a2,a3,d0)
int RSA_padding_add_PKCS1_PSS(RSA * rsa, unsigned char * EM, const unsigned char * mHash, const EVP_MD * Hash, int sLen) (a0,a1,a2,a3,d0)
const EVP_MD * EVP_sha224() ()
const EVP_MD * EVP_sha256() ()
const EVP_MD * EVP_sha384() ()
const EVP_MD * EVP_sha512() ()
int BN_GF2m_add(BIGNUM * r, const BIGNUM * a, const BIGNUM * b) (a0,a1,a2)
int BN_GF2m_arr2poly(const int * p, BIGNUM * a) (a0,a1)
int BN_GF2m_mod(BIGNUM * r, const BIGNUM * a, const BIGNUM * p) (a0,a1,a2)
int BN_GF2m_mod_mul(BIGNUM * r, const BIGNUM * a, const BIGNUM * b, const BIGNUM * p, BN_CTX * ctx) (a0,a1,a2,a3,d0)
int BN_GF2m_mod_sqr(BIGNUM * r, const BIGNUM * a, const BIGNUM * p, BN_CTX * ctx) (a0,a1,a2,a3)
int BN_GF2m_mod_inv(BIGNUM * r, const BIGNUM * b, const BIGNUM * p, BN_CTX * ctx) (a0,a1,a2,a3)
int BN_GF2m_mod_div(BIGNUM * r, const BIGNUM * a, const BIGNUM * b, const BIGNUM * p, BN_CTX * ctx) (a0,a1,a2,a3,d0)
int BN_GF2m_mod_exp(BIGNUM * r, const BIGNUM * a, const BIGNUM * b, const BIGNUM * p, BN_CTX * ctx) (a0,a1,a2,a3,d0)
int BN_GF2m_mod_sqrt(BIGNUM * r, const BIGNUM * a, const BIGNUM * p, BN_CTX * ctx) (a0,a1,a2,a3)
int BN_GF2m_mod_solve_quad(BIGNUM * r, const BIGNUM * a, const BIGNUM * p, BN_CTX * ctx) (a0,a1,a2,a3)
int BN_generate_prime_ex(BIGNUM * ret, int bits, int safe, const BIGNUM * add, const BIGNUM * rem, BN_GENCB * cb) (a0,d0,d1,a1,a2,a3)
int BN_is_prime_ex(const BIGNUM * p, int nchecks, BN_CTX * ctx, BN_GENCB * cb) (a0,d0,a1,a2)
void BN_set_negative(BIGNUM * b, int n) (a0,d0)
int EC_GROUP_get_degree(const EC_GROUP * group) (a0)
const EC_METHOD * EC_GF2m_simple_method() ()
int EC_GROUP_set_curve_GF2m(EC_GROUP * group, const BIGNUM * p, const BIGNUM * a, const BIGNUM * b, BN_CTX * ctx) (a0,a1,a2,a3,d0)
int EC_GROUP_get_curve_GF2m(const EC_GROUP * group, BIGNUM * p, BIGNUM * a, BIGNUM * b, BN_CTX * ctx) (a0,a1,a2,a3,d0)
int EC_POINT_set_affine_coordinates_GF2m(const EC_GROUP * group, EC_POINT * point, const BIGNUM * x, const BIGNUM * y, BN_CTX * ctx) (a0,a1,a2,a3,d0)
int EC_POINT_get_affine_coordinates_GF2m(const EC_GROUP * group, const EC_POINT * point, BIGNUM * x, BIGNUM * y, BN_CTX * ctx) (a0,a1,a2,a3,d0)
size_t EC_get_builtin_curves(EC_builtin_curve * r, size_t nitems) (a0,d0)
EC_GROUP * EC_GROUP_new_by_curve_name(int nid) (d0)
int EC_GROUP_check(const EC_GROUP * group, BN_CTX * ctx) (a0,a1)
==reserve 1
int DSA_generate_parameters_ex(DSA * dsa, int bits, const unsigned char * seed, int seed_len, int * counter_ret, unsigned long * h_ret, BN_GENCB * cb) (a0,d0,a1,d1,a2,a3,d2)
==reserve 1
EC_KEY * EC_KEY_new_by_curve_name(int nid) (d0)
int EC_KEY_generate_key(EC_KEY * key) (a0)
void EC_KEY_free(EC_KEY * key) (a0)
void ECDSA_SIG_free(ECDSA_SIG * a) (a0)
ECDSA_SIG * ECDSA_do_sign(const unsigned char * dgst, int dlen, EC_KEY * eckey) (a0,d0,a1)
int ECDSA_do_verify(const unsigned char * dgst, int dgst_len, const ECDSA_SIG * sig, EC_KEY * eckey) (a0,d0,a1,a2)
EC_KEY * EC_KEY_new() ()
int EC_KEY_set_group(EC_KEY * eckey, const EC_GROUP * group) (a0,a1)
const EC_GROUP * EC_KEY_get0_group(const EC_KEY * key) (a0)
int EC_KEY_check_key(const EC_KEY * eckey) (a0)
int ECDSA_size(const EC_KEY * eckey) (a0)
int ECDSA_sign(int type, const unsigned char * dgst, int dgstlen, unsigned char * sig, unsigned int * siglen, EC_KEY * eckey) (d0,a0,d1,a1,a2,a3)
int ECDSA_verify(int type, const unsigned char * dgst, int dgstlen, const unsigned char * sig, int siglen, EC_KEY * eckey) (d0,a0,d1,a1,d2,a2)
ECDSA_SIG * d2i_ECDSA_SIG(ECDSA_SIG ** v, const unsigned char ** pp, long len) (a0,a1,a2)
int i2d_ECDSA_SIG(const ECDSA_SIG * a, unsigned char ** pp) (a0,a1)
int DH_generate_parameters_ex(DH * ret, int prime_len, int generator, BN_GENCB * cb) (a0,d0,d1,a1)
int EC_METHOD_get_field_type(const EC_METHOD * meth) (a0)
const EC_POINT * EC_KEY_get0_public_key(const EC_KEY * eckey) (a0)
int ECDH_compute_key(void * out, size_t outlen, const EC_POINT * pub_key, const EC_KEY * eckey, void *(*KDF)(const void *, size_t, void *, size_t *)) (a0,d0,a1,a2,a3)
const BIGNUM * EC_KEY_get0_private_key(const EC_KEY * eckey) (a0)
ENGINE * ENGINE_get_first() ()
const char * ENGINE_get_id(const ENGINE * e) (a0)
const char * ENGINE_get_name(const ENGINE * e) (a0)
ENGINE * ENGINE_get_next(ENGINE * e) (a0)
int ENGINE_free(ENGINE * e) (a0)
ENGINE * ENGINE_new() ()
int ENGINE_set_id(ENGINE * e, const char * id) (a0,a1)
int ENGINE_set_name(ENGINE * e, const char * name) (a0,a1)
int ENGINE_add(ENGINE * e) (a0)
int ENGINE_remove(ENGINE * e) (a0)
void ENGINE_load_builtin_engines() ()
void ENGINE_register_all_ciphers() ()
int EVP_CIPHER_get_nid(const EVP_CIPHER * cipher) (a0)
int EVP_MD_get_type(const EVP_MD * md) (a0)
void ENGINE_register_all_digests() ()
int BIO_test_flags(const BIO * b, int flags) (a0,d0)
STACK_OF(SSL_COMP) * SSL_COMP_get_compression_methods() ()
int RSA_generate_key_ex(RSA * rsa, int bits, BIGNUM * e, BN_GENCB * cb) (a0,d0,a1,a2)
void X509_VERIFY_PARAM_free(X509_VERIFY_PARAM * param) (a0)
int X509_STORE_set1_param(X509_STORE * xs, const X509_VERIFY_PARAM * pm) (a0,a1)
ASN1_TYPE * ASN1_generate_nconf(const char * str, CONF * nconf) (a0,a1)
EC_GROUP * PEM_read_bio_ECPKParameters(BIO * bp, EC_GROUP ** x, pem_password_cb * cb, void * u) (a0,a1,a2,a3)
EC_KEY * EC_KEY_dup(const EC_KEY * ec_key) (a0)
void BIO_set_callback(BIO * b, BIO_callback_fn callback) (a0,a1)
void BIO_set_callback_arg(BIO * b, char * arg) (a0,a1)
void EVP_MD_CTX_set_flags(EVP_MD_CTX * ctx, int flags) (a0,d0)
void BIO_set_flags(BIO * b, int flags) (a0,d0)
void EVP_CIPHER_CTX_set_flags(EVP_CIPHER_CTX * ctx, int flags) (a0,d0)
int EVP_CIPHER_get_iv_length(const EVP_CIPHER * cipher) (a0)
int X509_REQ_check_private_key(const X509_REQ * req, EVP_PKEY * pkey) (a0,a1)
EC_KEY * PEM_read_bio_EC_PUBKEY(BIO * bp, EC_KEY ** x, pem_password_cb * cb, void * u) (a0,a1,a2,a3)
EC_KEY * PEM_read_bio_ECPrivateKey(BIO * bp, EC_KEY ** x, pem_password_cb * cb, void * u) (a0,a1,a2,a3)
int PEM_write_bio_EC_PUBKEY(BIO * bp, const EC_KEY * x) (a0,a1)
EC_KEY * d2i_EC_PUBKEY_bio(BIO * bp, EC_KEY ** eckey) (a0,a1)
void EC_KEY_set_asn1_flag(EC_KEY * key, int flag) (a0,d0)
void EC_KEY_set_conv_form(EC_KEY * key, point_conversion_form_t cform) (a0,d0)
int EC_KEY_print(BIO * bp, const EC_KEY * x, int off) (a0,a1,d0)
EC_KEY * d2i_ECPrivateKey_bio(BIO * bp, EC_KEY ** eckey) (a0,a1)
int i2d_EC_PUBKEY_bio(BIO * bp, const EC_KEY * eckey) (a0,a1)
int PEM_write_bio_ECPrivateKey(BIO * bp, const EC_KEY * x, const EVP_CIPHER * enc, const unsigned char * kstr, int klen, pem_password_cb * cb, void * u) (a0,a1,a2,a3,d0,d1,d2)
int PEM_write_bio_ECPKParameters(BIO * bp, const EC_GROUP * x) (a0,a1)
int i2d_ECPrivateKey_bio(BIO * bp, const EC_KEY * eckey) (a0,a1)
int i2d_ECPKParameters(const EC_GROUP * a, unsigned char ** out) (a0,a1)
void EC_GROUP_set_asn1_flag(EC_GROUP * group, int flag) (a0,d0)
void EC_GROUP_set_point_conversion_form(EC_GROUP * group, point_conversion_form_t form) (a0,d0)
point_conversion_form_t EC_GROUP_get_point_conversion_form(const EC_GROUP * group) (a0)
int ECPKParameters_print(BIO * bp, const EC_GROUP * x, int off) (a0,a1,d0)
size_t EC_GROUP_set_seed(EC_GROUP * group, const unsigned char * p, size_t len) (a0,a1,d0)
EC_GROUP * d2i_ECPKParameters(EC_GROUP ** a, const unsigned char ** in, long len) (a0,a1,d0)
BIGNUM * EC_POINT_point2bn(const EC_GROUP * group, const EC_POINT * point, point_conversion_form_t form, BIGNUM * ret, BN_CTX * ctx) (a0,a1,d0,a2,a3)
STACK_OF(OPENSSL_STRING) * X509_get1_ocsp(X509 * x) (a0)
const char * SSL_get_servername(const SSL * s, const int type) (a0,d0)
SSL_CTX * SSL_set_SSL_CTX(SSL * ssl, SSL_CTX * ctx) (a0,a1)
void SSL_CTX_set_cookie_generate_cb(SSL_CTX * ctx, int (*app_gen_cookie_cb)(SSL *ssl, unsigned char *cookie, unsigned int *cookie_len)) (a0,a1)
void SSL_CTX_set_cookie_verify_cb(SSL_CTX * ctx, int (*app_verify_cookie_cb)(SSL *, const unsigned char *, unsigned int)) (a0,a1)
void SSL_CTX_set_info_callback(SSL_CTX * ctx, void (*cb)(const SSL *ssl, int type, int val)) (a0,a1)
==reserve 1
BIO * BIO_new_dgram(int fd, int close_flag) (d0,d1)
int SSL_get_servername_type(const SSL * s) (a0)
const COMP_METHOD * SSL_get_current_compression(const SSL * s) (a0)
const COMP_METHOD * SSL_get_current_expansion(const SSL * s) (a0)
const char * SSL_COMP_get_name(const COMP_METHOD * comp) (a0)
ENGINE * ENGINE_by_id(const char * id) (a0)
int SSL_CTX_set_client_cert_engine(SSL_CTX * ctx, ENGINE * e) (a0,a1)
==reserve 2
unsigned char * SHA256(const unsigned char * d, size_t n, unsigned char * md) (a0,d0,a1)
unsigned char * SHA512(const unsigned char * d, size_t n, unsigned char * md) (a0,d0,a1)
void AES_ige_encrypt(const unsigned char * in, unsigned char * out, size_t length, const AES_KEY * key, unsigned char * ivec, const int enc) (a0,a1,d0,a2,a3,d1)
int EC_KEY_precompute_mult(EC_KEY * key, BN_CTX * ctx) (a0,a1)
EVP_PKEY * ENGINE_load_private_key(ENGINE * e, const char * key_id, UI_METHOD * ui_method, void * callback_data) (a0,a1,a2,a3)
EVP_PKEY * ENGINE_load_public_key(ENGINE * e, const char * key_id, UI_METHOD * ui_method, void * callback_data) (a0,a1,a2,a3)
int ENGINE_ctrl_cmd(ENGINE * e, const char * cmd_name, long i, void * p, void (*f)(void), int cmd_optional) (a0,a1,a2,a3,d0,d1)
int ENGINE_set_default(ENGINE * e, unsigned int flags) (a0,d0)
int ENGINE_ctrl(ENGINE * e, int cmd, long i, void * p, void (*f)(void)) (a0,d0,d1,a1,a2)
int ENGINE_register_all_complete() ()
int ENGINE_ctrl_cmd_string(ENGINE * e, const char * cmd_name, const char * arg, int cmd_optional) (a0,a1,a2,d0)
int X509_VERIFY_PARAM_add0_policy(X509_VERIFY_PARAM * param, ASN1_OBJECT * policy) (a0,a1)
int X509_VERIFY_PARAM_set_purpose(X509_VERIFY_PARAM * param, int purpose) (a0,d0)
int X509_VERIFY_PARAM_set_flags(X509_VERIFY_PARAM * param, unsigned long flags) (a0,d0)
X509_VERIFY_PARAM * X509_VERIFY_PARAM_new() ()
void X509_POLICY_NODE_print(BIO * out, X509_POLICY_NODE * node, int indent) (a0,a1,d0)
X509_POLICY_TREE * X509_STORE_CTX_get0_policy_tree(const X509_STORE_CTX * ctx) (a0)
int X509_STORE_CTX_get_explicit_policy(const X509_STORE_CTX * ctx) (a0)
STACK_OF(X509_POLICY_NODE) * X509_policy_tree_get0_policies(const X509_POLICY_TREE * tree) (a0)
STACK_OF(X509_POLICY_NODE) * X509_policy_tree_get0_user_policies(const X509_POLICY_TREE * tree) (a0)
char * BIO_get_callback_arg(const BIO * b) (a0)
int EVP_PKEY_add1_attr_by_NID(EVP_PKEY * key, int nid, int type, const unsigned char * bytes, int len) (a0,d0,d1,a1,d2)
const RSA_METHOD * ENGINE_get_RSA(const ENGINE * e) (a0)
const DSA_METHOD * ENGINE_get_DSA(const ENGINE * e) (a0)
const DH_METHOD * ENGINE_get_DH(const ENGINE * e) (a0)
const RAND_METHOD * ENGINE_get_RAND(const ENGINE * e) (a0)
ENGINE_CIPHERS_PTR ENGINE_get_ciphers(const ENGINE * e) (a0)
ENGINE_DIGESTS_PTR ENGINE_get_digests(const ENGINE * e) (a0)
int ENGINE_init(ENGINE * e) (a0)
int ENGINE_finish(ENGINE * e) (a0)
OSSL_HTTP_REQ_CTX * OCSP_sendreq_new(BIO * io, const char * path, const OCSP_REQUEST * req, int maxline) (a0,a1,a2,a3)
int OBSOLETE_OCSP_sendreq_nbio(OCSP_RESPONSE ** presp, OSSL_HTTP_REQ_CTX * rctx) (a0,a1)
void OSSL_HTTP_REQ_CTX_free(OSSL_HTTP_REQ_CTX * rctx) (a0)
int SSL_CTX_use_psk_identity_hint(SSL_CTX * ctx, const char * identity_hint) (a0,a1)
void SSL_CTX_set_psk_client_callback(SSL_CTX * ctx, SSL_psk_client_cb_func cb) (a0,a1)
const char * SSL_get_psk_identity_hint(const SSL * s) (a0)
void SSL_set_psk_server_callback(SSL * ssl, SSL_psk_server_cb_func cb) (a0,a1)
int SSL_use_psk_identity_hint(SSL * s, const char * identity_hint) (a0,a1)
void SSL_set_psk_client_callback(SSL * ssl, SSL_psk_client_cb_func cb) (a0,a1)
void SSL_CTX_set_psk_server_callback(SSL_CTX * ctx, SSL_psk_server_cb_func cb) (a0,a1)
const char * SSL_get_psk_identity(const SSL * s) (a0)
int SSL_set_session_ticket_ext(SSL * s, void * ext_data, int ext_len) (a0,a1,d0)
int SSL_set_session_secret_cb(SSL * s, int (*tls_session_secret_cb)(SSL *, void *, int *, STACK_OF(SSL_CIPHER) *, const SSL_CIPHER **, void *), void * arg) (a0,a1,a2)
int SSL_set_session_ticket_ext_cb(SSL * s, tls_session_ticket_ext_cb_fn cb, void * arg) (a0,a1,a2)
int SSL_set1_param(SSL * ssl, X509_VERIFY_PARAM * vpm) (a0,a1)
int SSL_CTX_set1_param(SSL_CTX * ctx, X509_VERIFY_PARAM * vpm) (a0,a1)
int SSL_renegotiate_abbreviated(SSL * s) (a0)
==reserve 3
int SSL_CTX_set_srp_client_pwd_callback(SSL_CTX * ctx, char * (*cb)(SSL *, void *)) (a0,a1)
BIGNUM * SSL_get_srp_g(SSL * s) (a0)
int SSL_CTX_set_srp_username_callback(SSL_CTX * ctx, int (*cb)(SSL *, int *, void *)) (a0,a1)
char * SSL_get_srp_userinfo(SSL * s) (a0)
int SSL_set_srp_server_param(SSL * s, const BIGNUM * N, const BIGNUM * g, BIGNUM * sa, BIGNUM * v, char * info) (a0,a1,a2,a3,d0,d1)
int SSL_set_srp_server_param_pw(SSL * s, const char * user, const char * pass, const char * grp) (a0,a1,a2,a3)
BIGNUM * SSL_get_srp_N(SSL * s) (a0)
char * SSL_get_srp_username(SSL * s) (a0)
int SSL_CTX_set_srp_password(SSL_CTX * ctx, char * password) (a0,a1)
int SSL_CTX_set_srp_strength(SSL_CTX * ctx, int strength) (a0,d0)
int SSL_CTX_set_srp_verify_param_callback(SSL_CTX * ctx, int (*cb)(SSL *, void *)) (a0,a1)
int SSL_CTX_set_srp_cb_arg(SSL_CTX * ctx, void * arg) (a0,a1)
int SSL_CTX_set_srp_username(SSL_CTX * ctx, char * name) (a0,a1)
int SSL_CTX_SRP_CTX_init(SSL_CTX * ctx) (a0)
int SRP_Calc_A_param(SSL * s) (a0)
==reserve 1
int SSL_CTX_SRP_CTX_free(SSL_CTX * ctx) (a0)
==reserve 1
int SSL_srp_server_param_with_username(SSL * s, int * ad) (a0,a1)
int SSL_SRP_CTX_free(SSL * ctx) (a0)
void SSL_set_debug(SSL * s, int debug) (a0,d0)
X509 * SSL_SESSION_get0_peer(SSL_SESSION * s) (a0)
==reserve 1
int SSL_SESSION_set1_id_context(SSL_SESSION * s, const unsigned char * sid_ctx, unsigned int sid_ctx_len) (a0,a1,d0)
==reserve 1
int OBSOLETE_SSL_cache_hit(SSL * s) (a0)
==reserve 1
uint32_t SSL_CIPHER_get_id(const SSL_CIPHER * c) (a0)
==reserve 1
int SSL_export_keying_material(SSL * s, unsigned char * out, size_t olen, const char * label, size_t llen, const unsigned char * context, size_t contextlen, int use_context) (a0,a1,d0,a2,d1,a3,d2,d3)
int SSL_set_tlsext_use_srtp(SSL * ssl, const char * profiles) (a0,a1)
void SSL_CTX_set_next_protos_advertised_cb(SSL_CTX * s, SSL_CTX_npn_advertised_cb_func cb, void * arg) (a0,a1,a2)
void SSL_get0_next_proto_negotiated(const SSL * s, const unsigned char ** data, unsigned * len) (a0,a1,a2)
SRTP_PROTECTION_PROFILE * SSL_get_selected_srtp_profile(SSL * s) (a0)
int SSL_CTX_set_tlsext_use_srtp(SSL_CTX * ctx, const char * profiles) (a0,a1)
int SSL_select_next_proto(unsigned char ** out, unsigned char * outlen, const unsigned char * in, unsigned int inlen, const unsigned char * client, unsigned int client_len) (a0,a1,a2,d0,a3,d1)
STACK_OF(SRTP_PROTECTION_PROFILE) * SSL_get_srtp_profiles(SSL * s) (a0)
void SSL_CTX_set_next_proto_select_cb(SSL_CTX * s, SSL_CTX_npn_select_cb_func cb, void * arg) (a0,a1,a2)
unsigned int SSL_SESSION_get_compress_id(const SSL_SESSION * s) (a0)
==reserve 2
int SSL_SRP_CTX_init(SSL * s) (a0)
==reserve 55
int ERR_load_ENGINE_strings() ()
int ENGINE_set_DSA(ENGINE * e, const DSA_METHOD * dsa_meth) (a0,a1)
ENGINE_GEN_INT_FUNC_PTR ENGINE_get_finish_function(const ENGINE * e) (a0)
ENGINE * ENGINE_get_default_RSA() ()
int ENGINE_set_DH(ENGINE * e, const DH_METHOD * dh_meth) (a0,a1)
ENGINE_GEN_INT_FUNC_PTR ENGINE_get_init_function(const ENGINE * e) (a0)
int ENGINE_set_init_function(ENGINE * e, ENGINE_GEN_INT_FUNC_PTR init_f) (a0,a1)
int ENGINE_set_default_DSA(ENGINE * e) (a0)
ENGINE * ENGINE_get_last() ()
ENGINE * ENGINE_get_prev(ENGINE * e) (a0)
ENGINE * ENGINE_get_default_DH() ()
int ENGINE_set_finish_function(ENGINE * e, ENGINE_GEN_INT_FUNC_PTR finish_f) (a0,a1)
int ENGINE_set_RSA(ENGINE * e, const RSA_METHOD * rsa_meth) (a0,a1)
int ENGINE_set_default_RAND(ENGINE * e) (a0)
ENGINE * ENGINE_get_default_DSA() ()
int ENGINE_set_default_RSA(ENGINE * e) (a0)
ENGINE * ENGINE_get_default_RAND() ()
int ENGINE_set_RAND(ENGINE * e, const RAND_METHOD * rand_meth) (a0,a1)
int ENGINE_set_default_DH(ENGINE * e) (a0)
ENGINE_CTRL_FUNC_PTR ENGINE_get_ctrl_function(const ENGINE * e) (a0)
int ENGINE_set_ctrl_function(ENGINE * e, ENGINE_CTRL_FUNC_PTR ctrl_f) (a0,a1)
void ENGINE_unregister_ciphers(ENGINE * e) (a0)
void ENGINE_unregister_RSA(ENGINE * e) (a0)
void ENGINE_register_all_RAND() ()
void OBSOLETE_ENGINE_load_dynamic() ()
ENGINE * ENGINE_get_digest_engine(int nid) (d0)
int ENGINE_register_DH(ENGINE * e) (a0)
int ENGINE_register_RAND(ENGINE * e) (a0)
void OBSOLETE_ENGINE_load_cryptodev() ()
int ENGINE_register_ciphers(ENGINE * e) (a0)
==reserve 1
void OBSOLETE_ENGINE_load_openssl() ()
const ENGINE_CMD_DEFN * ENGINE_get_cmd_defns(const ENGINE * e) (a0)
int ENGINE_set_load_privkey_function(ENGINE * e, ENGINE_LOAD_KEY_PTR loadpriv_f) (a0,a1)
int ENGINE_set_default_digests(ENGINE * e) (a0)
int ENGINE_register_RSA(ENGINE * e) (a0)
void ENGINE_unregister_DSA(ENGINE * e) (a0)
int ENGINE_set_ciphers(ENGINE * e, ENGINE_CIPHERS_PTR f) (a0,a1)
int RAND_set_rand_engine(ENGINE * engine) (a0)
const EVP_MD * ENGINE_get_digest(ENGINE * e, int nid) (a0,d0)
const EVP_CIPHER * ENGINE_get_cipher(ENGINE * e, int nid) (a0,d0)
int ENGINE_cmd_is_executable(ENGINE * e, int cmd) (a0,d0)
int ENGINE_register_DSA(ENGINE * e) (a0)
int ENGINE_set_load_pubkey_function(ENGINE * e, ENGINE_LOAD_KEY_PTR loadpub_f) (a0,a1)
ENGINE_LOAD_KEY_PTR ENGINE_get_load_pubkey_function(const ENGINE * e) (a0)
void ENGINE_register_all_RSA() ()
void ENGINE_unregister_digests(ENGINE * e) (a0)
int OBSOLETE_ENGINE_get_ex_new_index(long argl, void * argp, CRYPTO_EX_new * new_func, CRYPTO_EX_dup * dep_func, CRYPTO_EX_free * free_func) (d0,a0,a1,a2,a3)
void * ENGINE_get_ex_data(const ENGINE * e, int idx) (a0,d0)
==reserve 1
int ENGINE_set_cmd_defns(ENGINE * e, const ENGINE_CMD_DEFN * defns) (a0,a1)
int ENGINE_register_digests(ENGINE * e) (a0)
void ENGINE_register_all_DH() ()
int ENGINE_get_flags(const ENGINE * e) (a0)
void ENGINE_unregister_DH(ENGINE * e) (a0)
void ENGINE_register_all_DSA() ()
int ENGINE_set_digests(ENGINE * e, ENGINE_DIGESTS_PTR f) (a0,a1)
int ENGINE_register_complete(ENGINE * e) (a0)
int ENGINE_set_ex_data(ENGINE * e, int idx, void * arg) (a0,d0,a1)
int ENGINE_set_destroy_function(ENGINE * e, ENGINE_GEN_INT_FUNC_PTR destroy_f) (a0,a1)
ENGINE * ENGINE_get_cipher_engine(int nid) (d0)
==reserve 2
int ENGINE_set_default_ciphers(ENGINE * e) (a0)
void ENGINE_unregister_RAND(ENGINE * e) (a0)
==reserve 1
void ENGINE_set_table_flags(unsigned int flags) (d0)
==reserve 1
ENGINE_GEN_INT_FUNC_PTR ENGINE_get_destroy_function(const ENGINE * e) (a0)
==reserve 2
unsigned int ENGINE_get_table_flags() ()
int ENGINE_set_flags(ENGINE * e, int flags) (a0,d0)
ENGINE_LOAD_KEY_PTR ENGINE_get_load_privkey_function(const ENGINE * e) (a0)
int ENGINE_set_default_string(ENGINE * e, const char * def_list) (a0,a1)
void ENGINE_add_conf_module() ()
==reserve 3
int ENGINE_up_ref(ENGINE * e) (a0)
==reserve 3
int EC_GROUP_get_trinomial_basis(const EC_GROUP * eg, unsigned int * k) (a0,a1)
==reserve 2
int SHA512_Update(SHA512_CTX * c, const void * data, size_t len) (a0,a1,d0)
int i2d_ECPrivateKey(const EC_KEY * key, unsigned char ** out) (a0,a1)
int BN_GF2m_mod_exp_arr(BIGNUM * r, const BIGNUM * a, const BIGNUM * b, const int * p, BN_CTX * ctx) (a0,a1,a2,a3,d0)
int BN_GF2m_mod_mul_arr(BIGNUM * r, const BIGNUM * a, const BIGNUM * b, const int * p, BN_CTX * ctx) (a0,a1,a2,a3,d0)
EC_KEY * o2i_ECPublicKey(EC_KEY ** key, const unsigned char ** in, long len) (a0,a1,d0)
EC_KEY * EC_KEY_copy(EC_KEY * dst, const EC_KEY * src) (a0,a1)
==reserve 1
int EC_GROUP_check_discriminant(const EC_GROUP * group, BN_CTX * ctx) (a0,a1)
int i2o_ECPublicKey(const EC_KEY * key, unsigned char ** out) (a0,a1)
EC_GROUP * EC_GROUP_new_curve_GF2m(const BIGNUM * p, const BIGNUM * a, const BIGNUM * b, BN_CTX * ctx) (a0,a1,a2,a3)
==reserve 1
struct ec_key_st * EVP_PKEY_get1_EC_KEY(EVP_PKEY * pkey) (a0)
==reserve 1
point_conversion_form_t EC_KEY_get_conv_form(const EC_KEY * key) (a0)
void * ENGINE_get_static_state() ()
ECDSA_SIG * ECDSA_SIG_new() ()
EC_POINT * EC_POINT_bn2point(const EC_GROUP * g, const BIGNUM * b, EC_POINT * p, BN_CTX * ctx) (a0,a1,a2,a3)
==reserve 1
int ECDSA_sign_ex(int type, const unsigned char * dgst, int dgstlen, unsigned char * sig, unsigned int * siglen, const BIGNUM * kinv, const BIGNUM * rp, EC_KEY * eckey) (d0,a0,d1,a1,a2,a3,d2,d3)
int EC_GROUP_get_pentanomial_basis(const EC_GROUP * ecgroup, unsigned int * k1, unsigned int * k2, unsigned int * k3) (a0,a1,a2,a3)
int ECDSA_sign_setup(EC_KEY * eckey, BN_CTX * ctx, BIGNUM ** kinv, BIGNUM ** rp) (a0,a1,a2,a3)
int BN_GF2m_mod_solve_quad_arr(BIGNUM * r, const BIGNUM * a, const int * p, BN_CTX * ctx) (a0,a1,a2,a3)
int EC_KEY_up_ref(EC_KEY * key) (a0)
EC_KEY * d2i_EC_PUBKEY(EC_KEY ** a, const unsigned char ** pp, long length) (a0,a1,a2)
int EC_GROUP_have_precompute_mult(const EC_GROUP * group) (a0)
==reserve 1
int BN_GF2m_mod_arr(BIGNUM * r, const BIGNUM * a, const int * p) (a0,a1,a2)
==reserve 3
EC_POINT * EC_POINT_dup(const EC_POINT * src, const EC_GROUP * group) (a0,a1)
int EVP_PKEY_set1_EC_KEY(EVP_PKEY * pkey, struct ec_key_st * key) (a0,a1)
int BN_GF2m_mod_sqrt_arr(BIGNUM * r, const BIGNUM * a, const int * p, BN_CTX * ctx) (a0,a1,a2,a3)
==reserve 1
int EC_KEY_set_private_key(EC_KEY * key, const BIGNUM * prv) (a0,a1)
int BN_GF2m_poly2arr(const BIGNUM * a, int * p, int max) (a0,a1,d0)
int i2d_ECParameters(const EC_KEY * key, unsigned char ** out) (a0,a1)
==reserve 1
int SHA256_Init(SHA256_CTX * c) (a0)
==reserve 1
unsigned char * SHA224(const unsigned char * d, size_t n, unsigned char * md) (a0,d0,a1)
==reserve 1
size_t EC_GROUP_get_seed_len(const EC_GROUP * ecgroup) (a0)
int i2d_EC_PUBKEY(const EC_KEY * a, unsigned char ** pp) (a0,a1)
==reserve 1
const EC_METHOD * EC_GFp_nist_method() ()
void OBSOLETE_ENGINE_load_padlock() ()
void EC_GROUP_set_curve_name(EC_GROUP * group, int nid) (a0,d0)
int BN_GF2m_mod_sqr_arr(BIGNUM * r, const BIGNUM * a, const int * p, BN_CTX * ctx) (a0,a1,a2,a3)
const BIO_METHOD * BIO_s_datagram() ()
==reserve 2
int SHA384_Update(SHA512_CTX * c, const void * data, size_t len) (a0,a1,d0)
==reserve 1
int SHA224_Final(unsigned char * md, SHA256_CTX * c) (a0,a1)
int SHA224_Update(SHA256_CTX * c, const void * data, size_t len) (a0,a1,d0)
EC_KEY * d2i_ECPrivateKey(EC_KEY ** key, const unsigned char ** in, long len) (a0,a1,d0)
==reserve 1
int SHA512_Final(unsigned char * md, SHA512_CTX * c) (a0,a1)
int EC_GROUP_get_asn1_flag(const EC_GROUP * group) (a0)
==reserve 1
unsigned char * EC_GROUP_get0_seed(const EC_GROUP * x) (a0)
int BN_GF2m_mod_div_arr(BIGNUM * r, const BIGNUM * a, const BIGNUM * b, const int * p, BN_CTX * ctx) (a0,a1,a2,a3,d0)
==reserve 6
unsigned EC_KEY_get_enc_flags(const EC_KEY * key) (a0)
==reserve 1
int EC_POINT_set_compressed_coordinates_GF2m(const EC_GROUP * group, EC_POINT * p, const BIGNUM * x, int y_bit, BN_CTX * ctx) (a0,a1,a2,d0,a3)
int EC_GROUP_cmp(const EC_GROUP * a, const EC_GROUP * b, BN_CTX * ctx) (a0,a1,a2)
int SHA224_Init(SHA256_CTX * c) (a0)
==reserve 1
int SHA512_Init(SHA512_CTX * c) (a0)
==reserve 1
int EC_GROUP_get_basis_type(const EC_GROUP * group) (a0)
==reserve 4
EC_GROUP * EC_GROUP_dup(const EC_GROUP * src) (a0)
==reserve 1
void SHA256_Transform(SHA256_CTX * c, const unsigned char * data) (a0,a1)
void EC_KEY_set_enc_flags(EC_KEY * eckey, unsigned int flags) (a0,d0)
char * EC_POINT_point2hex(const EC_GROUP * group, const EC_POINT * point, point_conversion_form_t form, BN_CTX * ctx) (a0,a1,d0,a2)
==reserve 1
ECDSA_SIG * ECDSA_do_sign_ex(const unsigned char * dgst, int dgstlen, const BIGNUM * kinv, const BIGNUM * rp, EC_KEY * eckey) (a0,d0,a1,a2,a3)
==reserve 1
void SHA512_Transform(SHA512_CTX * c, const unsigned char * data) (a0,a1)
==reserve 1
int EC_KEY_set_public_key(EC_KEY * key, const EC_POINT * pub) (a0,a1)
==reserve 3
int EC_GROUP_get_curve_name(const EC_GROUP * group) (a0)
==reserve 1
int SHA256_Final(unsigned char * md, SHA256_CTX * c) (a0,a1)
==reserve 4
EC_KEY * d2i_ECParameters(EC_KEY ** key, const unsigned char ** in, long len) (a0,a1,d0)
int SHA384_Init(SHA512_CTX * c) (a0)
==reserve 1
int SHA384_Final(unsigned char * md, SHA512_CTX * c) (a0,a1)
==reserve 1
unsigned char * SHA384(const unsigned char * d, size_t n, unsigned char * md) (a0,d0,a1)
==reserve 2
EC_POINT * EC_POINT_hex2point(const EC_GROUP * group, const char * c, EC_POINT * p, BN_CTX * ctx) (a0,a1,a2,a3)
int SHA256_Update(SHA256_CTX * c, const void * data, size_t len) (a0,a1,d0)
int BN_GF2m_mod_inv_arr(BIGNUM * r, const BIGNUM * b, const int * p, BN_CTX * ctx) (a0,a1,a2,a3)
==reserve 2
int DH_check_pub_key(const DH * dh, const BIGNUM * pub_key, int * codes) (a0,a1,a2)
void Camellia_cbc_encrypt(const unsigned char * in, unsigned char * out, size_t length, const CAMELLIA_KEY * key, unsigned char * ivec, const int enc) (a0,a1,d0,a2,a3,d1)
void Camellia_cfb128_encrypt(const unsigned char * in, unsigned char * out, size_t length, const CAMELLIA_KEY * key, unsigned char * ivec, int * num, const int enc) (a0,a1,d0,a2,a3,d1,d2)
void Camellia_cfb1_encrypt(const unsigned char * in, unsigned char * out, size_t length, const CAMELLIA_KEY * key, unsigned char * ivec, int * num, const int enc) (a0,a1,d0,a2,a3,d1,d2)
void Camellia_cfb8_encrypt(const unsigned char * in, unsigned char * out, size_t length, const CAMELLIA_KEY * key, unsigned char * ivec, int * num, const int enc) (a0,a1,d0,a2,a3,d1,d2)
void Camellia_ctr128_encrypt(const unsigned char * in, unsigned char * out, size_t length, const CAMELLIA_KEY * key, unsigned char * ivec, unsigned char * ecount_buf, unsigned int * num) (a0,a1,d0,a2,a3,d1,d2)
void Camellia_decrypt(const unsigned char * in, unsigned char * out, const CAMELLIA_KEY * key) (a0,a1,a2)
void Camellia_ecb_encrypt(const unsigned char * in, unsigned char * out, const CAMELLIA_KEY * key, const int enc) (a0,a1,a2,d0)
void Camellia_encrypt(const unsigned char * in, unsigned char * out, const CAMELLIA_KEY * key) (a0,a1,a2)
void Camellia_ofb128_encrypt(const unsigned char * in, unsigned char * out, size_t length, const CAMELLIA_KEY * key, unsigned char * ivec, int * num) (a0,a1,d0,a2,a3,d1)
int Camellia_set_key(const unsigned char * userKey, const int bits, CAMELLIA_KEY * key) (a0,d0,a1)
const EVP_CIPHER * EVP_camellia_128_cbc() ()
const EVP_CIPHER * EVP_camellia_128_cfb128() ()
const EVP_CIPHER * EVP_camellia_128_cfb1() ()
const EVP_CIPHER * EVP_camellia_128_cfb8() ()
const EVP_CIPHER * EVP_camellia_128_ecb() ()
const EVP_CIPHER * EVP_camellia_128_ofb() ()
const EVP_CIPHER * EVP_camellia_192_cbc() ()
const EVP_CIPHER * EVP_camellia_192_cfb128() ()
const EVP_CIPHER * EVP_camellia_192_cfb1() ()
const EVP_CIPHER * EVP_camellia_192_cfb8() ()
const EVP_CIPHER * EVP_camellia_192_ecb() ()
const EVP_CIPHER * EVP_camellia_192_ofb() ()
const EVP_CIPHER * EVP_camellia_256_cbc() ()
const EVP_CIPHER * EVP_camellia_256_cfb128() ()
const EVP_CIPHER * EVP_camellia_256_cfb1() ()
const EVP_CIPHER * EVP_camellia_256_cfb8() ()
const EVP_CIPHER * EVP_camellia_256_ecb() ()
const EVP_CIPHER * EVP_camellia_256_ofb() ()
void AES_bi_ige_encrypt(const unsigned char * in, unsigned char * out, size_t length, const AES_KEY * key, const AES_KEY * key2, const unsigned char * ivec, const int enc) (a0,a1,d0,a2,a3,d1,d2)
void SEED_decrypt(const unsigned char * s, unsigned char * d, const SEED_KEY_SCHEDULE * ks) (a0,a1,a2)
void SEED_encrypt(const unsigned char * s, unsigned char * d, const SEED_KEY_SCHEDULE * ks) (a0,a1,a2)
void SEED_cbc_encrypt(const unsigned char * in, unsigned char * out, size_t len, const SEED_KEY_SCHEDULE * ks, unsigned char * ivec, int enc) (a0,a1,d0,a2,a3,d1)
const EVP_CIPHER * EVP_seed_ofb() ()
void SEED_cfb128_encrypt(const unsigned char * in, unsigned char * out, size_t len, const SEED_KEY_SCHEDULE * ks, unsigned char * ivec, int * num, int enc) (a0,a1,d0,a2,a3,d1,d2)
void SEED_ofb128_encrypt(const unsigned char * in, unsigned char * out, size_t len, const SEED_KEY_SCHEDULE * ks, unsigned char * ivec, int * num) (a0,a1,d0,a2,a3,d1)
const EVP_CIPHER * EVP_seed_cbc() ()
void SEED_ecb_encrypt(const unsigned char * in, unsigned char * out, const SEED_KEY_SCHEDULE * ks, int enc) (a0,a1,a2,d0)
const EVP_CIPHER * EVP_seed_ecb() ()
void SEED_set_key(const unsigned char * rawkey, SEED_KEY_SCHEDULE * ks) (a0,a1)
const EVP_CIPHER * EVP_seed_cfb128() ()
int AES_unwrap_key(AES_KEY * key, const unsigned char * iv, unsigned char * out, const unsigned char * in, unsigned int inlen) (a0,a1,a2,a3,d0)
int AES_wrap_key(AES_KEY * key, const unsigned char * iv, unsigned char * out, const unsigned char * in, unsigned int inlen) (a0,a1,a2,a3,d0)
void CMS_ReceiptRequest_free(CMS_ReceiptRequest * rr) (a0)
==reserve 1
CMS_CertificateChoices * CMS_add0_CertificateChoices(CMS_ContentInfo * cms) (a0)
int CMS_unsigned_add1_attr_by_OBJ(CMS_SignerInfo * si, const ASN1_OBJECT * obj, int type, const void * bytes, int len) (a0,a1,d0,a2,d1)
int ERR_load_CMS_strings() ()
CMS_ContentInfo * CMS_sign_receipt(CMS_SignerInfo * si, X509 * signcert, EVP_PKEY * pkey, STACK_OF(X509) * certs, unsigned int flags) (a0,a1,a2,a3,d0)
int i2d_CMS_ContentInfo(const CMS_ContentInfo * a, unsigned char ** out) (a0,a1)
X509_ATTRIBUTE * CMS_signed_delete_attr(CMS_SignerInfo * si, int loc) (a0,d0)
CMS_ContentInfo * d2i_CMS_bio(BIO * bp, CMS_ContentInfo ** cms) (a0,a1)
int CMS_unsigned_get_attr_by_NID(const CMS_SignerInfo * si, int nid, int lastpos) (a0,d0,d1)
int CMS_verify(CMS_ContentInfo * cms, STACK_OF(X509) * certs, X509_STORE * store, BIO * dcont, BIO * out, unsigned int flags) (a0,a1,a2,a3,d0,d1)
CMS_ContentInfo * SMIME_read_CMS(BIO * bio, BIO ** biocont) (a0,a1)
int CMS_decrypt_set1_key(CMS_ContentInfo * cms, unsigned char * key, size_t keylen, const unsigned char * id, size_t idlen) (a0,a1,d0,a2,d1)
void CMS_SignerInfo_get0_algs(CMS_SignerInfo * si, EVP_PKEY ** pk, X509 ** signer, X509_ALGOR ** pdig, X509_ALGOR ** psig) (a0,a1,a2,a3,d0)
int CMS_add1_cert(CMS_ContentInfo * cms, X509 * cert) (a0,a1)
int CMS_set_detached(CMS_ContentInfo * cms, int detached) (a0,d0)
CMS_ContentInfo * CMS_encrypt(STACK_OF(X509) * certs, BIO * in, const EVP_CIPHER * cipher, unsigned int flags) (a0,a1,a2,d0)
CMS_ContentInfo * CMS_EnvelopedData_create(const EVP_CIPHER * cipher) (a0)
int CMS_uncompress(CMS_ContentInfo * cms, BIO * dcont, BIO * out, unsigned int flags) (a0,a1,a2,d0)
int CMS_add0_crl(CMS_ContentInfo * cms, X509_CRL * crl) (a0,a1)
int CMS_SignerInfo_verify_content(CMS_SignerInfo * si, BIO * chain) (a0,a1)
void * CMS_unsigned_get0_data_by_OBJ(CMS_SignerInfo * si, ASN1_OBJECT * oid, int lastpos, int type) (a0,a1,d0,d1)
int PEM_write_bio_CMS(BIO * out, const CMS_ContentInfo * cms) (a0,a1)
X509_ATTRIBUTE * CMS_unsigned_get_attr(const CMS_SignerInfo * si, int loc) (a0,d0)
int CMS_RecipientInfo_ktri_cert_cmp(CMS_RecipientInfo * ri, X509 * cert) (a0,a1)
int CMS_RecipientInfo_ktri_get0_algs(CMS_RecipientInfo * ri, EVP_PKEY ** pk, X509 ** recip, X509_ALGOR ** palg) (a0,a1,a2,a3)
void CMS_ContentInfo_free(CMS_ContentInfo * cms) (a0)
int CMS_final(CMS_ContentInfo * cms, BIO * data, BIO * dcont, unsigned int flags) (a0,a1,a2,d0)
int CMS_add_simple_smimecap(STACK_OF(X509_ALGOR) ** algs, int algnid, int keysize) (a0,d0,d1)
int CMS_SignerInfo_verify(CMS_SignerInfo * si) (a0)
int CMS_data(CMS_ContentInfo * cms, BIO * out, unsigned int flags) (a0,a1,d0)
CMS_ReceiptRequest * d2i_CMS_ReceiptRequest(CMS_ReceiptRequest ** a, unsigned char const ** in, long len) (a0,a1,a2)
CMS_ContentInfo * CMS_compress(BIO * in, int comp_nid, unsigned int flags) (a0,d0,d1)
CMS_ContentInfo * CMS_digest_create(BIO * in, const EVP_MD * md, unsigned int flags) (a0,a1,d0)
int CMS_SignerInfo_cert_cmp(CMS_SignerInfo * si, X509 * cert) (a0,a1)
int CMS_SignerInfo_sign(CMS_SignerInfo * si) (a0)
CMS_ContentInfo * CMS_data_create(BIO * in, unsigned int flags) (a0,d0)
int i2d_CMS_bio(BIO * bp, CMS_ContentInfo * cms) (a0,a1)
int CMS_EncryptedData_set1_key(CMS_ContentInfo * cms, const EVP_CIPHER * ciph, const unsigned char * key, size_t keylen) (a0,a1,a2,d0)
int CMS_decrypt(CMS_ContentInfo * cms, EVP_PKEY * pkey, X509 * cert, BIO * dcont, BIO * out, unsigned int flags) (a0,a1,a2,a3,d0,d1)
X509_ATTRIBUTE * CMS_unsigned_delete_attr(CMS_SignerInfo * si, int loc) (a0,d0)
int CMS_unsigned_get_attr_count(const CMS_SignerInfo * si) (a0)
int CMS_add_smimecap(CMS_SignerInfo * si, STACK_OF(X509_ALGOR) * algs) (a0,a1)
==reserve 1
int CMS_signed_get_attr_by_OBJ(const CMS_SignerInfo * si, const ASN1_OBJECT * obj, int lastpos) (a0,a1,d0)
CMS_ContentInfo * d2i_CMS_ContentInfo(CMS_ContentInfo ** a, unsigned char const ** in, long len) (a0,a1,a2)
int CMS_add_standard_smimecap(STACK_OF(X509_ALGOR) ** smcap) (a0)
CMS_ContentInfo * CMS_ContentInfo_new() ()
int CMS_RecipientInfo_type(CMS_RecipientInfo * ri) (a0)
const ASN1_OBJECT * CMS_get0_type(const CMS_ContentInfo * cms) (a0)
int CMS_is_detached(CMS_ContentInfo * cms) (a0)
CMS_ContentInfo * CMS_sign(X509 * signcert, EVP_PKEY * pkey, STACK_OF(X509) * certs, BIO * data, unsigned int flags) (a0,a1,a2,a3,d0)
int CMS_signed_add1_attr(CMS_SignerInfo * si, X509_ATTRIBUTE * attr) (a0,a1)
int CMS_unsigned_get_attr_by_OBJ(const CMS_SignerInfo * si, const ASN1_OBJECT * obj, int lastpos) (a0,a1,d0)
int SMIME_write_CMS(BIO * bio, CMS_ContentInfo * cms, BIO * data, int flags) (a0,a1,a2,d0)
int CMS_EncryptedData_decrypt(CMS_ContentInfo * cms, const unsigned char * key, size_t keylen, BIO * dcont, BIO * out, unsigned int flags) (a0,a1,d0,a2,a3,d1)
STACK_OF(CMS_RecipientInfo) * CMS_get0_RecipientInfos(CMS_ContentInfo * cms) (a0)
CMS_RevocationInfoChoice * CMS_add0_RevocationInfoChoice(CMS_ContentInfo * cms) (a0)
int CMS_decrypt_set1_pkey(CMS_ContentInfo * cms, EVP_PKEY * pk, X509 * cert) (a0,a1,a2)
void CMS_SignerInfo_set1_signer_cert(CMS_SignerInfo * si, X509 * signer) (a0,a1)
STACK_OF(X509) * CMS_get0_signers(CMS_ContentInfo * cms) (a0)
void CMS_ReceiptRequest_get0_values(CMS_ReceiptRequest * rr, ASN1_STRING ** pcid, int * pallorfirst, STACK_OF(GENERAL_NAMES) ** plist, STACK_OF(GENERAL_NAMES) ** prto) (a0,a1,a2,a3,d0)
void * CMS_signed_get0_data_by_OBJ(const CMS_SignerInfo * si, const ASN1_OBJECT * oid, int lastpos, int type) (a0,a1,d0,d1)
STACK_OF(CMS_SignerInfo) * CMS_get0_SignerInfos(CMS_ContentInfo * cms) (a0)
int CMS_add0_cert(CMS_ContentInfo * cms, X509 * cert) (a0,a1)
CMS_ContentInfo * CMS_EncryptedData_encrypt(BIO * in, const EVP_CIPHER * cipher, const unsigned char * key, size_t keylen, unsigned int flags) (a0,a1,a2,d0,d1)
int CMS_digest_verify(CMS_ContentInfo * cms, BIO * dcont, BIO * out, unsigned int flags) (a0,a1,a2,d0)
int CMS_set1_signers_certs(CMS_ContentInfo * cms, STACK_OF(X509) * certs, unsigned int flags) (a0,a1,d0)
X509_ATTRIBUTE * CMS_signed_get_attr(const CMS_SignerInfo * si, int loc) (a0,d0)
int CMS_RecipientInfo_set0_key(CMS_RecipientInfo * ri, unsigned char * key, size_t keylen) (a0,a1,d0)
int CMS_SignedData_init(CMS_ContentInfo * cms) (a0)
int CMS_RecipientInfo_kekri_get0_id(CMS_RecipientInfo * ri, X509_ALGOR ** palg, ASN1_OCTET_STRING ** pid, ASN1_GENERALIZEDTIME ** pdate, ASN1_OBJECT ** potherid, ASN1_TYPE ** pothertype) (a0,a1,a2,a3,d0,d1)
int CMS_verify_receipt(CMS_ContentInfo * rcms, CMS_ContentInfo * ocms, STACK_OF(X509) * certs, X509_STORE * store, unsigned int flags) (a0,a1,a2,a3,d0)
CMS_ContentInfo * PEM_read_bio_CMS(BIO * bp, CMS_ContentInfo ** x, pem_password_cb * cb, void * u) (a0,a1,a2,a3)
STACK_OF(X509_CRL) * CMS_get1_crls(CMS_ContentInfo * cms) (a0)
CMS_RecipientInfo * CMS_add0_recipient_key(CMS_ContentInfo * cms, int nid, unsigned char * key, size_t keylen, unsigned char * id, size_t idlen, ASN1_GENERALIZEDTIME * date, ASN1_OBJECT * otherTypeId, ASN1_TYPE * otherType) (a0,d0,a1,d1,a2,d2,a3,d3,d4)
CMS_ReceiptRequest * CMS_ReceiptRequest_new() ()
ASN1_OCTET_STRING ** CMS_get0_content(CMS_ContentInfo * cms) (a0)
int CMS_get1_ReceiptRequest(CMS_SignerInfo * si, CMS_ReceiptRequest ** prr) (a0,a1)
int CMS_signed_add1_attr_by_OBJ(CMS_SignerInfo * si, const ASN1_OBJECT * obj, int type, const void * bytes, int len) (a0,a1,d0,a2,d1)
int CMS_RecipientInfo_kekri_id_cmp(CMS_RecipientInfo * ri, const unsigned char * id, size_t idlen) (a0,a1,d0)
int CMS_add1_ReceiptRequest(CMS_SignerInfo * si, CMS_ReceiptRequest * rr) (a0,a1)
int CMS_SignerInfo_get0_signer_id(CMS_SignerInfo * si, ASN1_OCTET_STRING ** keyid, X509_NAME ** issuer, ASN1_INTEGER ** sno) (a0,a1,a2,a3)
int CMS_unsigned_add1_attr_by_NID(CMS_SignerInfo * si, int nid, int type, const void * bytes, int len) (a0,d0,d1,a1,d2)
int CMS_unsigned_add1_attr(CMS_SignerInfo * si, X509_ATTRIBUTE * attr) (a0,a1)
int CMS_signed_get_attr_by_NID(const CMS_SignerInfo * si, int nid, int lastpos) (a0,d0,d1)
STACK_OF(X509) * CMS_get1_certs(CMS_ContentInfo * cms) (a0)
int CMS_signed_add1_attr_by_NID(CMS_SignerInfo * si, int nid, int type, const void * bytes, int len) (a0,d0,d1,a1,d2)
int CMS_unsigned_add1_attr_by_txt(CMS_SignerInfo * si, const char * attrname, int type, const void * bytes, int len) (a0,a1,d0,a2,d1)
int CMS_dataFinal(CMS_ContentInfo * cms, BIO * bio) (a0,a1)
int CMS_RecipientInfo_ktri_get0_signer_id(CMS_RecipientInfo * ri, ASN1_OCTET_STRING ** keyid, X509_NAME ** issuer, ASN1_INTEGER ** sno) (a0,a1,a2,a3)
int i2d_CMS_ReceiptRequest(const CMS_ReceiptRequest * a, unsigned char ** out) (a0,a1)
CMS_RecipientInfo * CMS_add1_recipient_cert(CMS_ContentInfo * cms, X509 * recip, unsigned int flags) (a0,a1,d0)
BIO * CMS_dataInit(CMS_ContentInfo * cms, BIO * icont) (a0,a1)
int CMS_signed_add1_attr_by_txt(CMS_SignerInfo * si, const char * attrname, int type, const void * bytes, int len) (a0,a1,d0,a2,d1)
int CMS_RecipientInfo_decrypt(CMS_ContentInfo * cms, CMS_RecipientInfo * ri) (a0,a1)
int CMS_signed_get_attr_count(const CMS_SignerInfo * si) (a0)
const ASN1_OBJECT * CMS_get0_eContentType(CMS_ContentInfo * cms) (a0)
int CMS_set1_eContentType(CMS_ContentInfo * cms, const ASN1_OBJECT * oid) (a0,a1)
CMS_ReceiptRequest * CMS_ReceiptRequest_create0(unsigned char * id, int idlen, int allorfirst, STACK_OF(GENERAL_NAMES) * receiptList, STACK_OF(GENERAL_NAMES) * receiptsTo) (a0,d0,d1,a1,a2)
CMS_SignerInfo * CMS_add1_signer(CMS_ContentInfo * cms, X509 * signer, EVP_PKEY * pk, const EVP_MD * md, unsigned int flags) (a0,a1,a2,a3,d0)
int CMS_RecipientInfo_set0_pkey(CMS_RecipientInfo * ri, EVP_PKEY * pkey) (a0,a1)
int ENGINE_set_load_ssl_client_cert_function(ENGINE * e, ENGINE_SSL_CLIENT_CERT_PTR loadssl_f) (a0,a1)
ENGINE_SSL_CLIENT_CERT_PTR ENGINE_get_ssl_client_cert_function(const ENGINE * e) (a0)
int ENGINE_load_ssl_client_cert(ENGINE * e, SSL * s, STACK_OF(X509_NAME) * ca_dn, X509 ** pcert, EVP_PKEY ** ppkey, STACK_OF(X509) ** pother, UI_METHOD * ui_method, void * callback_data) (a0,a1,a2,a3,d0,d1,d2,d3)
void OBSOLETE_ENGINE_load_capi() ()
int ENGINE_register_pkey_meths(ENGINE * e) (a0)
ENGINE * ENGINE_get_pkey_asn1_meth_engine(int nid) (d0)
int WHIRLPOOL_Init(WHIRLPOOL_CTX * c) (a0)
unsigned char * WHIRLPOOL(const void * inp, size_t bytes, unsigned char * md) (a0,d0,a1)
const EVP_PKEY_ASN1_METHOD * ENGINE_get_pkey_asn1_meth(ENGINE * e, int nid) (a0,d0)
const EVP_PKEY_METHOD * ENGINE_get_pkey_meth(ENGINE * e, int nid) (a0,d0)
BIO * BIO_new_CMS(BIO * out, CMS_ContentInfo * cms) (a0,a1)
int ENGINE_set_default_pkey_asn1_meths(ENGINE * e) (a0)
void WHIRLPOOL_BitUpdate(WHIRLPOOL_CTX * ctx, const void * inp, size_t bits) (a0,a1,d0)
int i2d_CMS_bio_stream(BIO * out, CMS_ContentInfo * cms, BIO * in, int flags) (a0,a1,a2,d0)
int CMS_stream(unsigned char *** boundary, CMS_ContentInfo * cms) (a0,a1)
const EVP_PKEY_ASN1_METHOD * ENGINE_pkey_asn1_find_str(ENGINE ** pe, const char * str, int len) (a0,a1,d0)
ENGINE_PKEY_METHS_PTR ENGINE_get_pkey_meths(const ENGINE * e) (a0)
int ENGINE_register_pkey_asn1_meths(ENGINE * e) (a0)
int ENGINE_set_default_pkey_meths(ENGINE * e) (a0)
int HMAC_CTX_copy(HMAC_CTX * dctx, HMAC_CTX * sctx) (a0,a1)
ENGINE_PKEY_ASN1_METHS_PTR ENGINE_get_pkey_asn1_meths(const ENGINE * e) (a0)
const EVP_MD * EVP_whirlpool() ()
void ENGINE_register_all_pkey_meths() ()
int WHIRLPOOL_Final(unsigned char * md, WHIRLPOOL_CTX * c) (a0,a1)
const EVP_PKEY_ASN1_METHOD * ENGINE_get_pkey_asn1_meth_str(ENGINE * e, const char * str, int len) (a0,a1,d0)
void ENGINE_register_all_pkey_asn1_meths() ()
int CMS_ContentInfo_print_ctx(BIO * out, const CMS_ContentInfo * x, int indent, const ASN1_PCTX * pctx) (a0,a1,d0,a2)
int CMS_add1_crl(CMS_ContentInfo * cms, X509_CRL * crl) (a0,a1)
int ENGINE_set_pkey_asn1_meths(ENGINE * e, ENGINE_PKEY_ASN1_METHS_PTR f) (a0,a1)
ENGINE * ENGINE_get_pkey_meth_engine(int nid) (d0)
int WHIRLPOOL_Update(WHIRLPOOL_CTX * c, const void * inp, size_t bytes) (a0,a1,d0)
int PEM_write_bio_CMS_stream(BIO * out, CMS_ContentInfo * cms, BIO * in, int flags) (a0,a1,a2,d0)
void ENGINE_unregister_pkey_meths(ENGINE * e) (a0)
void ENGINE_unregister_pkey_asn1_meths(ENGINE * e) (a0)
int ENGINE_set_pkey_meths(ENGINE * e, ENGINE_PKEY_METHS_PTR f) (a0,a1)
DSA * DSAparams_dup(const DSA * x) (a0)
DH * DHparams_dup(const DH * d) (a0)
unsigned long X509_issuer_name_hash_old(X509 * a) (a0)
unsigned long X509_subject_name_hash_old(X509 * x) (a0)
SRP_user_pwd * SRP_VBASE_get_by_user(SRP_VBASE * vb, char * username) (a0,a1)
BIGNUM * SRP_Calc_server_key(const BIGNUM * A, const BIGNUM * v, const BIGNUM * u, const BIGNUM * b, const BIGNUM * N) (a0,a1,a2,a3,d0)
char * SRP_create_verifier(const char * user, const char * pass, char ** salt, char ** verifier, const char * N, const char * g) (a0,a1,a2,a3,d0,d1)
int SRP_create_verifier_BN(const char * user, const char * pass, BIGNUM ** salt, BIGNUM ** verifier, const BIGNUM * N, const BIGNUM * g) (a0,a1,a2,a3,d0,d1)
BIGNUM * SRP_Calc_u(const BIGNUM * A, const BIGNUM * B, const BIGNUM * N) (a0,a1,a2)
void SRP_VBASE_free(SRP_VBASE * vb) (a0)
BIGNUM * SRP_Calc_client_key(const BIGNUM * N, const BIGNUM * B, const BIGNUM * g, const BIGNUM * x, const BIGNUM * a, const BIGNUM * u) (a0,a1,a2,a3,d0,d1)
SRP_gN * SRP_get_default_gN(const char * id) (a0)
BIGNUM * SRP_Calc_x(const BIGNUM * s, const char * user, const char * pass) (a0,a1,a2)
BIGNUM * SRP_Calc_B(const BIGNUM * b, const BIGNUM * N, const BIGNUM * g, const BIGNUM * v) (a0,a1,a2,a3)
SRP_VBASE * SRP_VBASE_new(char * seed_key) (a0)
char * SRP_check_known_gN_param(const BIGNUM * g, const BIGNUM * N) (a0,a1)
BIGNUM * SRP_Calc_A(const BIGNUM * a, const BIGNUM * N, const BIGNUM * g) (a0,a1,a2)
int SRP_Verify_A_mod_N(const BIGNUM * A, const BIGNUM * N) (a0,a1)
int SRP_VBASE_init(SRP_VBASE * vb, char * verifier_file) (a0,a1)
int SRP_Verify_B_mod_N(const BIGNUM * B, const BIGNUM * N) (a0,a1)
int EC_KEY_set_public_key_affine_coordinates(EC_KEY * key, BIGNUM * x, BIGNUM * y) (a0,a1,a2)
const EVP_CIPHER * EVP_aes_192_ctr() ()
const EVP_CIPHER * EVP_aes_128_ctr() ()
const EVP_CIPHER * EVP_aes_256_ctr() ()
int EC_KEY_get_flags(const EC_KEY * key) (a0)
const EVP_CIPHER * EVP_aes_128_xts() ()
==reserve 1
const EVP_CIPHER * EVP_aes_256_xts() ()
const EVP_CIPHER * EVP_aes_128_gcm() ()
void EC_KEY_clear_flags(EC_KEY * key, int flags) (a0,d0)
void EC_KEY_set_flags(EC_KEY * key, int flags) (a0,d0)
const EVP_CIPHER * EVP_aes_256_ccm() ()
==reserve 1
const EVP_CIPHER * EVP_aes_128_ccm() ()
const EVP_CIPHER * EVP_aes_192_gcm() ()
const EVP_CIPHER * EVP_aes_256_gcm() ()
const EVP_CIPHER * EVP_aes_192_ccm() ()
const EVP_CIPHER * EVP_rc4_hmac_md5() ()
const EVP_CIPHER * EVP_aes_128_cbc_hmac_sha1() ()
void OBSOLETE_ENGINE_load_rdrand() ()
==reserve 1
const EVP_CIPHER * EVP_aes_256_cbc_hmac_sha1() ()
CMS_RecipientInfo * CMS_add0_recipient_password(CMS_ContentInfo * cms, int iter, int wrap_nid, int pbe_nid, unsigned char * pass, ossl_ssize_t passlen, const EVP_CIPHER * kekciph) (a0,d0,d1,d2,a1,d3,a2)
int CMS_decrypt_set1_password(CMS_ContentInfo * cms, unsigned char * pass, ossl_ssize_t passlen) (a0,a1,d0)
int CMS_RecipientInfo_set0_password(CMS_RecipientInfo * ri, unsigned char * pass, ossl_ssize_t passlen) (a0,a1,d0)
int X509_REQ_sign_ctx(X509_REQ * x, EVP_MD_CTX * ctx) (a0,a1)
int X509_CRL_sign_ctx(X509_CRL * x, EVP_MD_CTX * ctx) (a0,a1)
int X509_signature_dump(BIO * bp, const ASN1_STRING * sig, int indent) (a0,a1,d0)
int X509_sign_ctx(X509 * x, EVP_MD_CTX * ctx) (a0,a1)
int ASN1_item_sign_ctx(const ASN1_ITEM * it, X509_ALGOR * algor1, X509_ALGOR * algor2, ASN1_BIT_STRING * signature, const void * data, EVP_MD_CTX * ctx) (a0,a1,a2,a3,d0,d1)
==reserve 2
void X509_STORE_CTX_set0_crls(X509_STORE_CTX * ctx, STACK_OF(X509_CRL) * sk) (a0,a1)
const unsigned char * SSL_SESSION_get_id(const SSL_SESSION * s, unsigned int * len) (a0,a1)
void SSL_CTX_sess_set_new_cb(SSL_CTX * ctx, int (*new_session_cb)(struct ssl_st *ssl, SSL_SESSION *sess)) (a0,a1)
SSL_SESSION *(*)(SSL *, const unsigned char *, int, int *) SSL_CTX_sess_get_get_cb(SSL_CTX * ctx) (a0)
void SSL_CTX_sess_set_get_cb(SSL_CTX * ctx, SSL_SESSION *(*get_session_cb)(SSL *, const unsigned char *, int, int *)) (a0,a1)
void (*)(const SSL *ssl,int type,int val) SSL_CTX_get_info_callback(SSL_CTX * ctx) (a0)
void SSL_CTX_set_client_cert_cb(SSL_CTX * ctx, int (*client_cert_cb)(SSL *ssl, X509 **x509, EVP_PKEY **pkey)) (a0,a1)
void SSL_CTX_sess_set_remove_cb(SSL_CTX * ctx, void (*remove_session_cb)(struct ssl_ctx_st *ctx,SSL_SESSION *sess)) (a0,a1)
int (*)(struct ssl_st *ssl, SSL_SESSION *sess) SSL_CTX_sess_get_new_cb(SSL_CTX * ctx) (a0)
int (*)(SSL *ssl, X509 **x509, EVP_PKEY **pkey) SSL_CTX_get_client_cert_cb(SSL_CTX * ctx) (a0)
void (*)(struct ssl_ctx_st *ctx, SSL_SESSION *sess) SSL_CTX_sess_get_remove_cb(SSL_CTX * ctx) (a0)
int PEM_write_bio_SSL_SESSION(BIO * bp, const SSL_SESSION * x) (a0,a1)
==reserve 1
SSL_SESSION * PEM_read_bio_SSL_SESSION(BIO * bp, SSL_SESSION ** x, pem_password_cb * cb, void * u) (a0,a1,a2,a3)
==reserve 39
int BN_X931_generate_Xpq(BIGNUM * Xp, BIGNUM * Xq, int nbits, BN_CTX * ctx) (a0,a1,d0,a2)
const BIGNUM * BN_get0_nist_prime_384() ()
int ERR_set_mark() ()
int BN_BLINDING_invert_ex(BIGNUM * n, const BIGNUM * r, BN_BLINDING * b, BN_CTX * ctx) (a0,a1,a2,a3)
void NAME_CONSTRAINTS_free(NAME_CONSTRAINTS * ncons) (a0)
void X509_STORE_CTX_set0_param(X509_STORE_CTX * ctx, X509_VERIFY_PARAM * param) (a0,a1)
void POLICY_CONSTRAINTS_free(POLICY_CONSTRAINTS * pcons) (a0)
int BN_nist_mod_192(BIGNUM * r, const BIGNUM * a, const BIGNUM * p, BN_CTX * ctx) (a0,a1,a2,a3)
void GENERAL_SUBTREE_free(GENERAL_SUBTREE * sub) (a0)
int PKCS12_add_safe(STACK_OF(PKCS7) ** psafes, STACK_OF(PKCS12_SAFEBAG) * bags, int safe_nid, int iter, const char * pass) (a0,a1,d0,d1,a2)
const BIGNUM * BN_get0_nist_prime_192() ()
unsigned char * X509_keyid_get0(X509 * x, int * len) (a0,a1)
==reserve 1
const X509_POLICY_NODE * X509_policy_node_get0_parent(const X509_POLICY_NODE * node) (a0)
ASN1_OCTET_STRING * a2i_IPADDRESS(const char * ipasc) (a0)
void X509_STORE_CTX_set_depth(X509_STORE_CTX * ctx, int depth) (a0,d0)
int X509_VERIFY_PARAM_inherit(X509_VERIFY_PARAM * to, const X509_VERIFY_PARAM * from) (a0,a1)
==reserve 1
void X509_VERIFY_PARAM_set_depth(X509_VERIFY_PARAM * param, int depth) (a0,d0)
int EVP_PKEY_add1_attr_by_txt(EVP_PKEY * key, const char * attrname, int type, const unsigned char * bytes, int len) (a0,a1,d0,a2,d1)
void BN_BLINDING_set_flags(BN_BLINDING * b, unsigned long l) (a0,d0)
int X509_VERIFY_PARAM_set1_policies(X509_VERIFY_PARAM * param, STACK_OF(ASN1_OBJECT) * policies) (a0,a1)
int X509_VERIFY_PARAM_set1_name(X509_VERIFY_PARAM * param, const char * name) (a0,a1)
void POLICY_MAPPING_free(POLICY_MAPPING * pmap) (a0)
==reserve 2
int EVP_PKEY_cmp(const EVP_PKEY * a, const EVP_PKEY * b) (a0,a1)
int X509_policy_level_node_count(X509_POLICY_LEVEL * level) (a0)
X509_ATTRIBUTE * EVP_PKEY_get_attr(const EVP_PKEY * key, int loc) (a0,d0)
GENERAL_SUBTREE * GENERAL_SUBTREE_new() ()
STACK_OF(POLICYQUALINFO) * X509_policy_node_get0_qualifiers(const X509_POLICY_NODE * node) (a0)
==reserve 2
const ASN1_OBJECT * X509_policy_node_get0_policy(const X509_POLICY_NODE * node) (a0)
PKCS12 * PKCS12_add_safes(STACK_OF(PKCS7) * safes, int p7_nid) (a0,d0)
int BN_BLINDING_convert_ex(BIGNUM * n, BIGNUM * r, BN_BLINDING * b, BN_CTX * ctx) (a0,a1,a2,a3)
void X509_policy_tree_free(X509_POLICY_TREE * tree) (a0)
==reserve 1
const BIGNUM * BN_get0_nist_prime_224() ()
int BN_GENCB_call(BN_GENCB * cb, int a, int b) (a0,d0,d1)
NAME_CONSTRAINTS * NAME_CONSTRAINTS_new() ()
int ECParameters_print(BIO * bp, const EC_KEY * key) (a0,a1)
void * OBSOLETE_BUF_memdup(const void * data, size_t siz) (a0,d0)
int X509_VERIFY_PARAM_set_trust(X509_VERIFY_PARAM * param, int trust) (a0,d0)
int EVP_PKEY_get_attr_count(const EVP_PKEY * key) (a0)
X509_VERIFY_PARAM * X509_STORE_CTX_get0_param(const X509_STORE_CTX * ctx) (a0)
==reserve 1
int X509_STORE_set_depth(X509_STORE * store, int depth) (a0,d0)
char * OBSOLETE_BUF_strndup(const char * str, size_t siz) (a0,d0)
int ASN1_put_eoc(unsigned char ** pp) (a0)
void X509_VERIFY_PARAM_table_cleanup() ()
BN_BLINDING * RSA_setup_blinding(RSA * rsa, BN_CTX * ctx) (a0,a1)
int OPENSSL_sk_find_ex(OPENSSL_STACK * st, const void * data) (a0,a1)
POLICY_CONSTRAINTS * POLICY_CONSTRAINTS_new() ()
int X509_VERIFY_PARAM_get_depth(const X509_VERIFY_PARAM * param) (a0)
int ASN1_item_ndef_i2d(const ASN1_VALUE * val, unsigned char ** out, const ASN1_ITEM * it) (a0,a1,a2)
int ERR_pop_to_mark() ()
X509_POLICY_NODE * X509_policy_level_get0_node(const X509_POLICY_LEVEL * level, int i) (a0,d0)
int i2d_PKCS7_NDEF(const PKCS7 * a, unsigned char ** out) (a0,a1)
ASN1_TYPE * ASN1_generate_v3(const char * str, X509V3_CTX * cnf) (a0,a1)
int X509_policy_tree_level_count(const X509_POLICY_TREE * tree) (a0)
==reserve 1
int BN_nist_mod_224(BIGNUM * r, const BIGNUM * a, const BIGNUM * p, BN_CTX * ctx) (a0,a1,a2,a3)
int BIO_dgram_non_fatal_error(int error) (d0)
ASN1_BIT_STRING * v2i_ASN1_BIT_STRING(X509V3_EXT_METHOD * method, X509V3_CTX * ctx, STACK_OF(CONF_VALUE) * nval) (a0,a1,a2)
int X509_STORE_CTX_set_default(X509_STORE_CTX * ctx, const char * name) (a0,a1)
int X509_VERIFY_PARAM_set1(X509_VERIFY_PARAM * to, const X509_VERIFY_PARAM * from) (a0,a1)
GENERAL_NAME * v2i_GENERAL_NAME_ex(GENERAL_NAME * out, const X509V3_EXT_METHOD * method, X509V3_CTX * ctx, CONF_VALUE * cnf, int is_nc) (a0,a1,a2,a3,d0)
int BN_nist_mod_521(BIGNUM * r, const BIGNUM * a, const BIGNUM * p, BN_CTX * ctx) (a0,a1,a2,a3)
X509_POLICY_LEVEL * X509_policy_tree_get0_level(const X509_POLICY_TREE * tree, int i) (a0,d0)
int ASN1_const_check_infinite_end(const unsigned char ** p, long len) (a0,d0)
X509_ATTRIBUTE * EVP_PKEY_delete_attr(EVP_PKEY * key, int loc) (a0,d0)
const BIGNUM * BN_get0_nist_prime_256() ()
STACK_OF(CONF_VALUE) * i2v_ASN1_BIT_STRING(X509V3_EXT_METHOD * method, ASN1_BIT_STRING * bits, STACK_OF(CONF_VALUE) * extlist) (a0,a1,a2)
int BN_nist_mod_384(BIGNUM * r, const BIGNUM * a, const BIGNUM * p, BN_CTX * ctx) (a0,a1,a2,a3)
==reserve 2
int EVP_PKEY_get_attr_by_OBJ(const EVP_PKEY * key, const ASN1_OBJECT * obj, int lastpos) (a0,a1,d0)
const X509_VERIFY_PARAM * X509_VERIFY_PARAM_lookup(const char * name) (a0)
==reserve 1
int X509V3_NAME_from_section(X509_NAME * nm, STACK_OF(CONF_VALUE) * dn_sk, unsigned long chtype) (a0,a1,a2)
int EVP_PKEY_add1_attr(EVP_PKEY * key, X509_ATTRIBUTE * attr) (a0,a1)
==reserve 1
int BIO_dump_indent_cb(int (*cb)(const void *data, size_t len, void *u), void * u, const void * s, int len, int indent) (a0,a1,a2,d0,d1)
==reserve 2
int BN_nist_mod_256(BIGNUM * r, const BIGNUM * a, const BIGNUM * p, BN_CTX * ctx) (a0,a1,a2,a3)
int X509_VERIFY_PARAM_add0_table(X509_VERIFY_PARAM * param) (a0)
==reserve 1
BN_BLINDING * BN_BLINDING_create_param(BN_BLINDING * b, const BIGNUM * e, BIGNUM * m, BN_CTX * ctx, int (*bn_mod_exp)(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, const BIGNUM *m, BN_CTX *ctx, BN_MONT_CTX *m_ctx), BN_MONT_CTX * m_ctx) (a0,a1,a2,a3,d0,d1)
const BIGNUM * BN_get0_nist_prime_521() ()
int BN_is_prime_fasttest_ex(const BIGNUM * p, int nchecks, BN_CTX * ctx, int do_trial_devision, BN_GENCB * cb) (a0,d0,a1,d1,a2)
int X509_policy_check(X509_POLICY_TREE ** ptree, int * pexplicit_policy, STACK_OF(X509) * certs, STACK_OF(ASN1_OBJECT) * policy_oids, unsigned int flags) (a0,a1,a2,a3,d0)
int EVP_PKEY_get_attr_by_NID(const EVP_PKEY * key, int nid, int lastpos) (a0,d0,d1)
unsigned long BN_BLINDING_get_flags(const BN_BLINDING * b) (a0)
PKCS12_SAFEBAG * PKCS12_add_cert(STACK_OF(PKCS12_SAFEBAG) ** pbags, X509 * cert) (a0,a1)
int EVP_CIPHER_CTX_rand_key(EVP_CIPHER_CTX * ctx, unsigned char * key) (a0,a1)
ASN1_OCTET_STRING * a2i_IPADDRESS_NC(const char * ipasc) (a0)
int PKCS7_set_digest(PKCS7 * p7, const EVP_MD * md) (a0,a1)
POLICY_MAPPING * POLICY_MAPPING_new() ()
int PKCS7_set0_type_other(PKCS7 * p7, int type, ASN1_TYPE * other) (a0,d0,a1)
==reserve 2
int EVP_PKEY_add1_attr_by_OBJ(EVP_PKEY * key, const ASN1_OBJECT * obj, int type, const unsigned char * bytes, int len) (a0,a1,d0,a2,d1)
void X509_VERIFY_PARAM_set_time(X509_VERIFY_PARAM * param, time_t t) (a0,d0)
==reserve 1
PKCS12_SAFEBAG * PKCS12_add_key(STACK_OF(PKCS12_SAFEBAG) ** pbags, EVP_PKEY * key, int key_usage, int iter, int key_nid, const char * pass) (a0,a1,d0,d1,d2,a2)
==reserve 1
int BIO_dump_cb(int (*cb)(const void *data, size_t len, void *u), void * u, const void * s, int len) (a0,a1,a2,a3)
==reserve 2
BIGNUM * BN_get_rfc3526_prime_8192(BIGNUM * bn) (a0)
int X509_VERIFY_PARAM_clear_flags(X509_VERIFY_PARAM * param, unsigned long flags) (a0,d0)
BIGNUM * BN_get_rfc2409_prime_1024(BIGNUM * bn) (a0)
BIGNUM * BN_get_rfc3526_prime_2048(BIGNUM * bn) (a0)
BIGNUM * BN_get_rfc3526_prime_6144(BIGNUM * bn) (a0)
BIGNUM * BN_get_rfc3526_prime_1536(BIGNUM * bn) (a0)
BIGNUM * BN_get_rfc3526_prime_3072(BIGNUM * bn) (a0)
BIGNUM * BN_get_rfc3526_prime_4096(BIGNUM * bn) (a0)
BIGNUM * BN_get_rfc2409_prime_768(BIGNUM * bn) (a0)
unsigned long X509_VERIFY_PARAM_get_flags(const X509_VERIFY_PARAM * param) (a0)
EVP_CIPHER_CTX * EVP_CIPHER_CTX_new() ()
void EVP_CIPHER_CTX_free(EVP_CIPHER_CTX * a) (a0)
int EVP_CIPHER_get_block_size(const EVP_CIPHER * cipher) (a0)
void EVP_CIPHER_CTX_set_app_data(EVP_CIPHER_CTX * ctx, void * data) (a0,a1)
int BIO_method_type(const BIO * b) (a0)
int EVP_CIPHER_CTX_get_nid(const EVP_CIPHER_CTX * ctx) (a0)
int EVP_CIPHER_CTX_get_key_length(const EVP_CIPHER_CTX * ctx) (a0)
int EVP_MD_get_size(const EVP_MD * md) (a0)
int EVP_MD_CTX_test_flags(const EVP_MD_CTX * ctx, int flags) (a0,d0)
void BIO_clear_flags(BIO * b, int flags) (a0,d0)
int EVP_MD_get_pkey_type(const EVP_MD * md) (a0)
void EVP_MD_CTX_clear_flags(EVP_MD_CTX * ctx, int flags) (a0,d0)
unsigned long EVP_CIPHER_get_flags(const EVP_CIPHER * cipher) (a0)
BIO_callback_fn BIO_get_callback(const BIO * b) (a0)
int EVP_CIPHER_get_key_length(const EVP_CIPHER * cipher) (a0)
int EVP_Cipher(EVP_CIPHER_CTX * c, unsigned char * out, const unsigned char * in, unsigned int inl) (a0,a1,a2,d0)
int EVP_CIPHER_CTX_get_block_size(const EVP_CIPHER_CTX * ctx) (a0)
const EVP_CIPHER * EVP_CIPHER_CTX_cipher(const EVP_CIPHER_CTX * ctx) (a0)
void * EVP_CIPHER_CTX_get_app_data(const EVP_CIPHER_CTX * ctx) (a0)
int EVP_MD_get_block_size(const EVP_MD * md) (a0)
unsigned long OBSOLETE_EVP_CIPHER_CTX_flags(const EVP_CIPHER_CTX * ctx) (a0)
const EVP_MD * EVP_MD_CTX_md(const EVP_MD_CTX * ctx) (a0)
const char * BIO_method_name(const BIO * b) (a0)
int EVP_CIPHER_CTX_get_iv_length(const EVP_CIPHER_CTX * ctx) (a0)
int CRYPTO_memcmp(const void * in_a, const void * in_b, size_t len) (a0,a1,d0)
void BN_consttime_swap(BN_ULONG swap, BIGNUM * a, BIGNUM * b, int nwords) (d0,a0,a1,d1)
int i2d_X509_EXTENSIONS(const X509_EXTENSIONS * a, unsigned char ** out) (a0,a1)
X509_EXTENSIONS * d2i_X509_EXTENSIONS(X509_EXTENSIONS ** a, const unsigned char ** in, long len) (a0,a1,d0)
void X509_ALGOR_get0(const ASN1_OBJECT ** pobj, int * pptype, const void ** ppval, const X509_ALGOR * algor) (a0,a1,a2,a3)
int X509_ALGOR_set0(X509_ALGOR * alg, ASN1_OBJECT * aobj, int ptype, void * pval) (a0,a1,d0,a2)
void * X509at_get0_data_by_OBJ(const STACK_OF(X509_ATTRIBUTE) * x, const ASN1_OBJECT * obj, int lastpos, int type) (a0,a1,d0,d1)
int ASN1_TYPE_set1(ASN1_TYPE * a, int type, const void * value) (a0,d0,a1)
void ASN1_STRING_set0(ASN1_STRING * str, void * data, int len) (a0,a1,d0)
int i2d_X509_ALGORS(const X509_ALGORS * a, unsigned char ** out) (a0,a1)
==reserve 1
X509_ALGORS * d2i_X509_ALGORS(X509_ALGORS ** a, const unsigned char ** in, long len) (a0,a1,d0)
ASN1_VALUE * SMIME_read_ASN1(BIO * bio, BIO ** bcont, const ASN1_ITEM * it) (a0,a1,a2)
int OPENSSL_isservice() ()
void EVP_CIPHER_CTX_clear_flags(EVP_CIPHER_CTX * ctx, int flags) (a0,d0)
int BN_X931_generate_prime_ex(BIGNUM * p, BIGNUM * p1, BIGNUM * p2, BIGNUM * Xp1, BIGNUM * Xp2, const BIGNUM * Xp, const BIGNUM * e, BN_CTX * ctx, BN_GENCB * cb) (a0,a1,a2,a3,d0,d1,d2,d3,d4)
int EVP_CIPHER_CTX_test_flags(const EVP_CIPHER_CTX * ctx, int flags) (a0,d0)
void EVP_add_alg_module() ()
int BN_X931_derive_prime_ex(BIGNUM * p, BIGNUM * p1, BIGNUM * p2, const BIGNUM * Xp, const BIGNUM * Xp1, const BIGNUM * Xp2, const BIGNUM * e, BN_CTX * ctx, BN_GENCB * cb) (a0,a1,a2,d0,a3,d1,d2,d3,d4)
void OPENSSL_init() ()
char * CRYPTO_strdup(const char * str, const char * file, int line) (a0,a1,d0)
==reserve 1
int i2d_TS_ACCURACY(const TS_ACCURACY * a, unsigned char ** pp) (a0,a1)
==reserve 1
int i2d_TS_MSG_IMPRINT(const TS_MSG_IMPRINT * a, unsigned char ** pp) (a0,a1)
int EVP_PKEY_print_public(BIO * out, const EVP_PKEY * pkey, int indent, ASN1_PCTX * pctx) (a0,a1,d0,a2)
EVP_PKEY_CTX * EVP_PKEY_CTX_new(EVP_PKEY * pkey, ENGINE * e) (a0,a1)
int i2d_TS_TST_INFO(const TS_TST_INFO * a, unsigned char ** pp) (a0,a1)
const EVP_PKEY_ASN1_METHOD * EVP_PKEY_asn1_find(ENGINE ** pe, int type) (a0,a1)
==reserve 1
X509 * TS_CONF_load_cert(const char * file) (a0)
X509_EXTENSION * TS_REQ_get_ext(TS_REQ * a, int loc) (a0,d0)
int EVP_PKEY_sign_init(EVP_PKEY_CTX * ctx) (a0)
int ASN1_item_print(BIO * out, const ASN1_VALUE * ifld, int indent, const ASN1_ITEM * it, const ASN1_PCTX * ctx) (a0,a1,d0,a2,a3)
int TS_TST_INFO_set_nonce(TS_TST_INFO * a, const ASN1_INTEGER * nonce) (a0,a1)
TS_RESP * TS_RESP_dup(const TS_RESP * a) (a0)
int EVP_PKEY_asn1_add0(const EVP_PKEY_ASN1_METHOD * ameth) (a0)
int PKCS7_add0_attrib_signing_time(PKCS7_SIGNER_INFO * si, ASN1_TIME * t) (a0,a1)
==reserve 1
int BIO_asn1_get_prefix(BIO * b, asn1_ps_func ** pprefix, asn1_ps_func ** pprefix_free) (a0,a1,a2)
int TS_TST_INFO_set_time(TS_TST_INFO * a, const ASN1_GENERALIZEDTIME * gtime) (a0,a1)
void EVP_PKEY_meth_set_decrypt(EVP_PKEY_METHOD * pmeth, int (*decrypt_init)(EVP_PKEY_CTX *ctx), int (*decrypt)(EVP_PKEY_CTX *ctx, unsigned char *out, size_t *outlen, const unsigned char *in, size_t inlen)) (a0,a1,a2)
int EVP_PKEY_set_type_str(EVP_PKEY * pkey, const char * str, int len) (a0,a1,d0)
int EVP_PKEY_CTX_get_keygen_info(EVP_PKEY_CTX * ctx, int idx) (a0,d0)
int TS_REQ_set_policy_id(TS_REQ * a, const ASN1_OBJECT * policy) (a0,a1)
==reserve 1
int TS_RESP_set_status_info(TS_RESP * a, TS_STATUS_INFO * info) (a0,a1)
int EVP_PKEY_keygen(EVP_PKEY_CTX * ctx, EVP_PKEY ** ppkey) (a0,a1)
int EVP_DigestSignInit(EVP_MD_CTX * ctx, EVP_PKEY_CTX ** pctx, const EVP_MD * type, ENGINE * e, EVP_PKEY * pkey) (a0,a1,a2,a3,d0)
int TS_ACCURACY_set_millis(TS_ACCURACY * a, const ASN1_INTEGER * millis) (a0,a1)
TS_REQ * TS_REQ_dup(const TS_REQ * a) (a0)
GENERAL_NAME * GENERAL_NAME_dup(const GENERAL_NAME * a) (a0)
STACK_OF(X509_CRL) * X509_STORE_CTX_get1_crls(const X509_STORE_CTX * st, const X509_NAME * nm) (a0,a1)
EVP_PKEY_ASN1_METHOD * EVP_PKEY_asn1_new(int id, int flags, const char * pem_str, const char * info) (d0,d1,a0,a1)
BIO * BIO_new_NDEF(BIO * out, ASN1_VALUE * val, const ASN1_ITEM * it) (a0,a1,a2)
int TS_MSG_IMPRINT_set_algo(TS_MSG_IMPRINT * a, X509_ALGOR * alg) (a0,a1)
int i2d_TS_TST_INFO_bio(BIO * fp, const TS_TST_INFO * a) (a0,a1)
int TS_TST_INFO_set_ordering(TS_TST_INFO * a, int ordering) (a0,d0)
int TS_TST_INFO_get_ext_by_OBJ(TS_TST_INFO * a, const ASN1_OBJECT * obj, int lastpos) (a0,a1,d0)
==reserve 1
const char * TS_CONF_get_tsa_section(CONF * conf, const char * section) (a0,a1)
int SMIME_write_ASN1(BIO * bio, ASN1_VALUE * val, BIO * data, int flags, int ctype_nid, int econt_nid, STACK_OF(X509_ALGOR) * mdalgs, const ASN1_ITEM * it) (a0,a1,a2,a3,d0,d1,d2,d3)
int TS_RESP_CTX_set_signer_key(TS_RESP_CTX * ctx, EVP_PKEY * key) (a0,a1)
int EVP_PKEY_encrypt_old(unsigned char * enc_key, const unsigned char * key, int key_len, EVP_PKEY * pub_key) (a0,a1,d0,a2)
int EVP_PKEY_encrypt_init(EVP_PKEY_CTX * ctx) (a0)
==reserve 1
unsigned long ASN1_PCTX_get_cert_flags(const ASN1_PCTX * p) (a0)
int i2d_ESS_SIGNING_CERT(const ESS_SIGNING_CERT * a, unsigned char ** pp) (a0,a1)
EVP_PKEY * TS_CONF_load_key(const char * file, const char * pass) (a0,a1)
int i2d_ASN1_SEQUENCE_ANY(const ASN1_SEQUENCE_ANY * a, unsigned char ** pp) (a0,a1)
TS_MSG_IMPRINT * d2i_TS_MSG_IMPRINT_bio(BIO * fp, TS_MSG_IMPRINT ** a) (a0,a1)
void EVP_PKEY_asn1_set_public(EVP_PKEY_ASN1_METHOD * ameth, int (*pub_decode)(EVP_PKEY *pk, const X509_PUBKEY *pub), int (*pub_encode)(X509_PUBKEY *pub, const EVP_PKEY *pk), int (*pub_cmp)(const EVP_PKEY *a, const EVP_PKEY *b), int (*pub_print)(BIO *out, const EVP_PKEY *pkey, int indent, ASN1_PCTX *pctx), int (*pkey_size)(const EVP_PKEY *pk), int (*pkey_bits)(const EVP_PKEY *pk)) (a0,a1,a2,a3,d0,d1,d2)
EVP_PKEY * b2i_PublicKey_bio(BIO * in) (a0)
int BIO_asn1_set_prefix(BIO * b, asn1_ps_func * prefix, asn1_ps_func * prefix_free) (a0,a1,a2)
EVP_PKEY * EVP_PKEY_new_mac_key(int type, ENGINE * e, const unsigned char * key, int keylen) (a0,a1,a2,d0)
==reserve 1
void TS_REQ_ext_free(TS_REQ * a) (a0)
void EVP_PKEY_asn1_set_free(EVP_PKEY_ASN1_METHOD * ameth, void (*pkey_free)(EVP_PKEY *pkey)) (a0,a1)
const EVP_PKEY_ASN1_METHOD * EVP_PKEY_get0_asn1(const EVP_PKEY * pkey) (a0)
==reserve 1
int EVP_PKEY_verify_recover_init(EVP_PKEY_CTX * ctx) (a0)
void EVP_PKEY_CTX_set_data(EVP_PKEY_CTX * ctx, void * data) (a0,a1)
int EVP_PKEY_keygen_init(EVP_PKEY_CTX * ctx) (a0)
int TS_RESP_CTX_set_status_info(TS_RESP_CTX * ctx, int status, const char * text) (a0,d0,a1)
X509_ALGOR * TS_MSG_IMPRINT_get_algo(TS_MSG_IMPRINT * a) (a0)
int TS_REQ_print_bio(BIO * bio, TS_REQ * a) (a0,a1)
int EVP_PKEY_CTX_ctrl_str(EVP_PKEY_CTX * ctx, const char * type, const char * value) (a0,a1,a2)
int EVP_PKEY_get_default_digest_nid(EVP_PKEY * pkey, int * pnid) (a0,a1)
int PEM_write_bio_PKCS7_stream(BIO * out, PKCS7 * p7, BIO * in, int flags) (a0,a1,a2,d0)
int TS_MSG_IMPRINT_print_bio(BIO * bio, TS_MSG_IMPRINT * msg) (a0,a1)
int BN_asc2bn(BIGNUM ** a, const char * str) (a0,a1)
ASN1_OBJECT * TS_REQ_get_policy_id(TS_REQ * a) (a0)
TS_ACCURACY * d2i_TS_ACCURACY(TS_ACCURACY ** a, const unsigned char ** pp, long length) (a0,a1,d0)
void * DSO_global_lookup(const char * name) (a0)
int TS_CONF_set_tsa_name(CONF * conf, const char * section, TS_RESP_CTX * ctx) (a0,a1,a2)
int i2d_ASN1_SET_ANY(const ASN1_SEQUENCE_ANY * a, unsigned char ** pp) (a0,a1)
unsigned long ASN1_PCTX_get_flags(const ASN1_PCTX * p) (a0)
int TS_TST_INFO_get_ext_by_NID(TS_TST_INFO * a, int nid, int lastpos) (a0,d0,d1)
TS_RESP * TS_RESP_new() ()
ESS_CERT_ID * ESS_CERT_ID_dup(const ESS_CERT_ID * a) (a0)
TS_STATUS_INFO * TS_STATUS_INFO_dup(const TS_STATUS_INFO * a) (a0)
X509_EXTENSION * TS_REQ_delete_ext(TS_REQ * a, int loc) (a0,d0)
int EVP_DigestVerifyFinal(EVP_MD_CTX * ctx, const unsigned char * sig, size_t siglen) (a0,a1,d0)
int EVP_PKEY_print_params(BIO * out, const EVP_PKEY * pkey, int inden, ASN1_PCTX * pctx) (a0,a1,d0,a2)
TS_MSG_IMPRINT * TS_REQ_get_msg_imprint(TS_REQ * a) (a0)
int OBJ_find_sigid_by_algs(int * psignid, int dig_nid, int pkey_nid) (a0,d0,d1)
const ASN1_INTEGER * TS_TST_INFO_get_serial(const TS_TST_INFO * a) (a0)
const ASN1_INTEGER * TS_REQ_get_nonce(const TS_REQ * a) (a0)
int X509_PUBKEY_set0_param(X509_PUBKEY * pub, ASN1_OBJECT * aobj, int ptype, void * pval, unsigned char * penc, int penclen) (a0,a1,d0,a2,a3,d1)
void EVP_PKEY_CTX_set0_keygen_info(EVP_PKEY_CTX * ctx, int * dat, int datlen) (a0,a1,d0)
int DIST_POINT_set_dpname(DIST_POINT_NAME * dpn, const X509_NAME * iname) (a0,a1)
int i2d_ISSUING_DIST_POINT(const ISSUING_DIST_POINT * a, unsigned char ** pp) (a0,a1)
void * EVP_PKEY_CTX_get_data(const EVP_PKEY_CTX * ctx) (a0)
int TS_STATUS_INFO_print_bio(BIO * bio, TS_STATUS_INFO * a) (a0,a1)
int EVP_PKEY_derive_init(EVP_PKEY_CTX * ctx) (a0)
TS_TST_INFO * d2i_TS_TST_INFO(TS_TST_INFO ** a, const unsigned char ** pp, long length) (a0,a1,d0)
int EVP_PKEY_asn1_add_alias(int to, int from) (d0,d1)
TS_RESP * d2i_TS_RESP_bio(BIO * fp, TS_RESP ** a) (a0,a1)
int OTHERNAME_cmp(OTHERNAME * a, OTHERNAME * b) (a0,a1)
void GENERAL_NAME_set0_value(GENERAL_NAME * a, int type, void * value) (a0,d0,a1)
void PKCS7_RECIP_INFO_get0_alg(PKCS7_RECIP_INFO * ri, X509_ALGOR ** penc) (a0,a1)
TS_RESP_CTX * TS_RESP_CTX_new() ()
void TS_RESP_set_tst_info(TS_RESP * a, PKCS7 * p7, TS_TST_INFO * tst_info) (a0,a1,a2)
int PKCS7_final(PKCS7 * p7, BIO * data, int flags) (a0,a1,d0)
int EVP_PKEY_get_base_id(const EVP_PKEY * pkey) (a0)
int TS_RESP_CTX_set_signer_cert(TS_RESP_CTX * ctx, X509 * signer) (a0,a1)
int TS_REQ_set_msg_imprint(TS_REQ * a, TS_MSG_IMPRINT * msg_imprint) (a0,a1)
int EVP_PKEY_CTX_ctrl(EVP_PKEY_CTX * ctx, int keytype, int optype, int cmd, int p1, void * p2) (a0,d0,d1,d2,d3,a1)
int TS_CONF_set_digests(CONF * conf, const char * section, TS_RESP_CTX * ctx) (a0,a1,a2)
TS_MSG_IMPRINT * d2i_TS_MSG_IMPRINT(TS_MSG_IMPRINT ** a, const unsigned char ** pp, long length) (a0,a1,d0)
void EVP_PKEY_meth_set_ctrl(EVP_PKEY_METHOD * pmeth, int (*ctrl)(EVP_PKEY_CTX *ctx, int type, int p1, void *p2), int (*ctrl_str)(EVP_PKEY_CTX *ctx, const char *type, const char *value)) (a0,a1,a2)
int TS_REQ_get_ext_by_NID(TS_REQ * a, int nid, int lastpos) (a0,d0,d1)
int PKCS5_pbe_set0_algor(X509_ALGOR * algor, int alg, int iter, const unsigned char * salt, int saltlen) (a0,d0,d1,a1,d2)
==reserve 1
TS_ACCURACY * TS_ACCURACY_new() ()
void X509_CRL_METHOD_free(X509_CRL_METHOD * m) (a0)
unsigned long ASN1_PCTX_get_nm_flags(const ASN1_PCTX * p) (a0)
void EVP_PKEY_meth_set_sign(EVP_PKEY_METHOD * pmeth, int (*sign_init)(EVP_PKEY_CTX *ctx), int (*sign)(EVP_PKEY_CTX *ctx, unsigned char *sig, size_t *siglen, const unsigned char *tbs, size_t tbslen)) (a0,a1,a2)
==reserve 1
int EVP_PKEY_decrypt_init(EVP_PKEY_CTX * ctx) (a0)
==reserve 1
int i2b_PVK_bio(BIO * out, const EVP_PKEY * pk, int enclevel, pem_password_cb * cb, void * u) (a0,a1,d0,a2,a3)
int EVP_PKEY_print_private(BIO * out, const EVP_PKEY * pkey, int indent, ASN1_PCTX * pctx) (a0,a1,d0,a2)
void * GENERAL_NAME_get0_value(const GENERAL_NAME * a, int * ptype) (a0,a1)
EVP_PKEY * b2i_PVK_bio(BIO * in, pem_password_cb * cb, void * u) (a0,a1,a2)
ASN1_UTCTIME * ASN1_UTCTIME_adj(ASN1_UTCTIME * s, time_t t, int offset_day, long offset_sec) (a0,d0,d1,d2)
TS_TST_INFO * TS_TST_INFO_new() ()
void EVP_MD_do_all_sorted(void (*fn)(const EVP_MD *ciph, const char *from, const char *to, void *x), void * arg) (a0,a1)
int TS_CONF_set_default_engine(const char * name) (a0)
int TS_ACCURACY_set_seconds(TS_ACCURACY * a, const ASN1_INTEGER * seconds) (a0,a1)
const ASN1_GENERALIZEDTIME * TS_TST_INFO_get_time(const TS_TST_INFO * a) (a0)
int PKCS8_pkey_get0(const ASN1_OBJECT ** ppkalg, const unsigned char ** pk, int * ppklen, const X509_ALGOR ** pa, const PKCS8_PRIV_KEY_INFO * p8) (a0,a1,a2,a3,d0)
const EVP_PKEY_ASN1_METHOD * EVP_PKEY_asn1_get0(int idx) (d0)
int OBJ_add_sigid(int signid, int dig_id, int pkey_id) (d0,d1,d2)
int PKCS7_SIGNER_INFO_sign(PKCS7_SIGNER_INFO * si) (a0)
int EVP_PKEY_paramgen_init(EVP_PKEY_CTX * ctx) (a0)
int EVP_PKEY_sign(EVP_PKEY_CTX * ctx, unsigned char * sig, size_t * siglen, const unsigned char * tbs, size_t tbslen) (a0,a1,d0,a2,d1)
void OBJ_sigid_free() ()
void EVP_PKEY_meth_set_init(EVP_PKEY_METHOD * pmeth, int (*init)(EVP_PKEY_CTX *ctx)) (a0,a1)
ESS_ISSUER_SERIAL * d2i_ESS_ISSUER_SERIAL(ESS_ISSUER_SERIAL ** a, const unsigned char ** pp, long length) (a0,a1,d0)
ISSUING_DIST_POINT * ISSUING_DIST_POINT_new() ()
ASN1_TIME * ASN1_TIME_adj(ASN1_TIME * s, time_t t, int offset_day, long offset_sec) (a0,d0,d1,d2)
int TS_OBJ_print_bio(BIO * bio, const ASN1_OBJECT * obj) (a0,a1)
void EVP_PKEY_meth_set_verify_recover(EVP_PKEY_METHOD * pmeth, int (*verify_recover_init)(EVP_PKEY_CTX *ctx), int (*verify_recover)(EVP_PKEY_CTX *ctx, unsigned char *sig, size_t *siglen, const unsigned char *tbs, size_t tbslen)) (a0,a1,a2)
TS_STATUS_INFO * TS_RESP_get_status_info(TS_RESP * g) (a0)
void EVP_PKEY_CTX_set_cb(EVP_PKEY_CTX * ctx, EVP_PKEY_gen_cb * cb) (a0,a1)
TS_TST_INFO * PKCS7_to_TS_TST_INFO(PKCS7 * token) (a0)
unsigned long ASN1_PCTX_get_oid_flags(const ASN1_PCTX * p) (a0)
int TS_TST_INFO_add_ext(TS_TST_INFO * a, X509_EXTENSION * ex, int loc) (a0,a1,d0)
void EVP_PKEY_meth_set_derive(EVP_PKEY_METHOD * pmeth, int (*derive_init)(EVP_PKEY_CTX *ctx), int (*derive)(EVP_PKEY_CTX *ctx, unsigned char *key, size_t *keylen)) (a0,a1,a2)
==reserve 1
int i2d_TS_MSG_IMPRINT_bio(BIO * fp, const TS_MSG_IMPRINT * a) (a0,a1)
int TS_RESP_CTX_set_accuracy(TS_RESP_CTX * ctx, int secs, int millis, int micros) (a0,d0,d1,d2)
int TS_REQ_set_nonce(TS_REQ * a, const ASN1_INTEGER * nonce) (a0,a1)
ESS_CERT_ID * ESS_CERT_ID_new() ()
int TS_REQ_get_ext_count(TS_REQ * a) (a0)
void BUF_reverse(unsigned char * out, const unsigned char * in, size_t siz) (a0,a1,d0)
int TS_TST_INFO_print_bio(BIO * bio, TS_TST_INFO * a) (a0,a1)
ISSUING_DIST_POINT * d2i_ISSUING_DIST_POINT(ISSUING_DIST_POINT ** a, const unsigned char ** pp, long length) (a0,a1,d0)
int i2b_PrivateKey_bio(BIO * out, const EVP_PKEY * pk) (a0,a1)
int i2d_TS_RESP(const TS_RESP * a, unsigned char ** pp) (a0,a1)
EVP_PKEY * b2i_PublicKey(const unsigned char ** in, long length) (a0,d0)
void TS_VERIFY_CTX_cleanup(TS_VERIFY_CTX * ctx) (a0)
void TS_STATUS_INFO_free(TS_STATUS_INFO * a) (a0)
int TS_RESP_verify_token(TS_VERIFY_CTX * ctx, PKCS7 * token) (a0,a1)
const void * OBJ_bsearch_ex_(const void * key, const void * base, int num, int size, int (*cmp)(const void *, const void *), int flags) (a0,a1,d0,d1,a2,d2)
int ASN1_bn_print(BIO * bp, const char * number, const BIGNUM * num, unsigned char * ign, int indent) (a0,a1,a2,a3,d0)
int EVP_PKEY_asn1_get_count() ()
void ASN1_PCTX_set_nm_flags(ASN1_PCTX * p, unsigned long flags) (a0,d0)
int EVP_DigestVerifyInit(EVP_MD_CTX * ctx, EVP_PKEY_CTX ** pctx, const EVP_MD * type, ENGINE * e, EVP_PKEY * pkey) (a0,a1,a2,a3,d0)
ASN1_OBJECT * TS_TST_INFO_get_policy_id(TS_TST_INFO * a) (a0)
int TS_REQ_get_cert_req(const TS_REQ * a) (a0)
void X509_CRL_set_meth_data(X509_CRL * crl, void * dat) (a0,a1)
int PKCS8_pkey_set0(PKCS8_PRIV_KEY_INFO * priv, ASN1_OBJECT * aobj, int version, int ptype, void * pval, unsigned char * penc, int penclen) (a0,a1,d0,d1,a2,a3,d2)
int ASN1_STRING_copy(ASN1_STRING * dst, const ASN1_STRING * str) (a0,a1)
==reserve 1
int X509_CRL_match(const X509_CRL * a, const X509_CRL * b) (a0,a1)
void EVP_PKEY_asn1_set_private(EVP_PKEY_ASN1_METHOD * ameth, int (*priv_decode)(EVP_PKEY *pk, const PKCS8_PRIV_KEY_INFO *p8inf), int (*priv_encode)(PKCS8_PRIV_KEY_INFO *p8, const EVP_PKEY *pk), int (*priv_print)(BIO *out, const EVP_PKEY *pkey, int indent, ASN1_PCTX *pctx)) (a0,a1,a2,a3)
void * TS_TST_INFO_get_ext_d2i(TS_TST_INFO * a, int nid, int * crit, int * idx) (a0,d0,a1,a2)
int TS_RESP_CTX_add_policy(TS_RESP_CTX * ctx, const ASN1_OBJECT * policy) (a0,a1)
TS_RESP * d2i_TS_RESP(TS_RESP ** a, const unsigned char ** pp, long length) (a0,a1,d0)
STACK_OF(X509) * TS_CONF_load_certs(const char * file) (a0)
TS_MSG_IMPRINT * TS_TST_INFO_get_msg_imprint(TS_TST_INFO * a) (a0)
int ERR_load_TS_strings() ()
long TS_TST_INFO_get_version(const TS_TST_INFO * a) (a0)
EVP_PKEY_CTX * EVP_PKEY_CTX_dup(const EVP_PKEY_CTX * ctx) (a0)
void EVP_PKEY_meth_set_verify(EVP_PKEY_METHOD * pmeth, int (*verify_init)(EVP_PKEY_CTX *ctx), int (*verify)(EVP_PKEY_CTX *ctx, const unsigned char *sig, size_t siglen, const unsigned char *tbs, size_t tbslen)) (a0,a1,a2)
int i2b_PublicKey_bio(BIO * out, const EVP_PKEY * pk) (a0,a1)
int TS_CONF_set_certs(CONF * conf, const char * section, const char * certs, TS_RESP_CTX * ctx) (a0,a1,a2,a3)
int EVP_PKEY_asn1_get0_info(int * ppkey_id, int * ppkey_base_id, int * ppkey_flags, const char ** pinfo, const char ** ppem_str, const EVP_PKEY_ASN1_METHOD * ameth) (a0,a1,a2,a3,d0,d1)
void TS_VERIFY_CTX_free(TS_VERIFY_CTX * ctx) (a0)
int TS_REQ_get_ext_by_critical(TS_REQ * a, int crit, int lastpos) (a0,d0,d1)
void TS_RESP_CTX_set_serial_cb(TS_RESP_CTX * ctx, TS_serial_cb cb, void * data) (a0,d0,a1)
void * X509_CRL_get_meth_data(X509_CRL * crl) (a0)
void TS_RESP_CTX_set_time_cb(TS_RESP_CTX * ctx, TS_time_cb cb, void * data) (a0,d0,a1)
ASN1_OCTET_STRING * TS_MSG_IMPRINT_get_msg(TS_MSG_IMPRINT * a) (a0)
void TS_TST_INFO_ext_free(TS_TST_INFO * a) (a0)
long TS_REQ_get_version(const TS_REQ * a) (a0)
int TS_REQ_add_ext(TS_REQ * a, X509_EXTENSION * ex, int loc) (a0,a1,d0)
void EVP_PKEY_CTX_set_app_data(EVP_PKEY_CTX * ctx, void * data) (a0,a1)
const void * OBJ_bsearch_(const void * key, const void * base, int num, int size, int (*cmp)(const void *, const void *)) (a0,a1,d0,d1,a2)
void EVP_PKEY_meth_set_verifyctx(EVP_PKEY_METHOD * pmeth, int (*verifyctx_init)(EVP_PKEY_CTX *ctx, EVP_MD_CTX *mctx), int (*verifyctx)(EVP_PKEY_CTX *ctx, const unsigned char *sig,int siglen, EVP_MD_CTX *mctx)) (a0,a1,a2)
int i2d_PKCS7_bio_stream(BIO * out, PKCS7 * p7, BIO * in, int flags) (a0,a1,a2,d0)
==reserve 1
PKCS7_SIGNER_INFO * PKCS7_sign_add_signer(PKCS7 * p7, X509 * signcert, EVP_PKEY * pkey, const EVP_MD * md, int flags) (a0,a1,a2,a3,d0)
TS_TST_INFO * d2i_TS_TST_INFO_bio(BIO * bp, TS_TST_INFO ** a) (a0,a1)
int TS_TST_INFO_get_ordering(const TS_TST_INFO * a) (a0)
int TS_RESP_print_bio(BIO * bio, TS_RESP * a) (a0,a1)
STACK_OF(X509_EXTENSION) * TS_TST_INFO_get_exts(TS_TST_INFO * a) (a0)
X509_ALGOR * PKCS5_pbe2_set_iv(const EVP_CIPHER * cipher, int iter, unsigned char * salt, int saltlen, unsigned char * aiv, int prf_nid) (a0,d0,a1,d1,a2,d2)
EVP_PKEY * b2i_PrivateKey(const unsigned char ** in, long length) (a0,d0)
void * EVP_PKEY_CTX_get_app_data(EVP_PKEY_CTX * ctx) (a0)
int TS_REQ_set_cert_req(TS_REQ * a, int cert_req) (a0,d0)
==reserve 1
int TS_CONF_set_serial(CONF * conf, const char * section, TS_serial_cb cb, TS_RESP_CTX * ctx) (a0,a1,a2,a3)
void TS_TST_INFO_free(TS_TST_INFO * a) (a0)
==reserve 1
int TS_RESP_verify_response(TS_VERIFY_CTX * ctx, TS_RESP * response) (a0,a1)
int i2d_ESS_ISSUER_SERIAL(const ESS_ISSUER_SERIAL * a, unsigned char ** pp) (a0,a1)
const ASN1_INTEGER * TS_ACCURACY_get_seconds(const TS_ACCURACY * a) (a0)
void EVP_CIPHER_do_all(void (*fn)(const EVP_CIPHER *ciph, const char *from, const char *to, void *x), void * arg) (a0,a1)
EVP_PKEY * b2i_PrivateKey_bio(BIO * in) (a0)
OCSP_CERTID * OCSP_CERTID_dup(const OCSP_CERTID * a) (a0)
int X509_PUBKEY_get0_param(ASN1_OBJECT ** ppkalg, const unsigned char ** pk, int * ppklen, X509_ALGOR ** pa, const X509_PUBKEY * pub) (a0,a1,a2,a3,d0)
TS_MSG_IMPRINT * TS_MSG_IMPRINT_dup(const TS_MSG_IMPRINT * a) (a0)
int PKCS7_print_ctx(BIO * out, const PKCS7 * x, int indent, const ASN1_PCTX * pctx) (a0,a1,d0,a2)
int i2d_TS_REQ_bio(BIO * fp, const TS_REQ * a) (a0,a1)
void EVP_PKEY_asn1_set_param(EVP_PKEY_ASN1_METHOD * ameth, int (*param_decode)(EVP_PKEY *pkey, const unsigned char **pder, int derlen), int (*param_encode)(const EVP_PKEY *pkey, unsigned char **pder), int (*param_missing)(const EVP_PKEY *pk), int (*param_copy)(EVP_PKEY *to, const EVP_PKEY *from), int (*param_cmp)(const EVP_PKEY *a, const EVP_PKEY *b), int (*param_print)(BIO *out, const EVP_PKEY *pkey, int indent, ASN1_PCTX *pctx)) (a0,a1,a2,a3,d0,d1,d2)
void EVP_PKEY_meth_set_encrypt(EVP_PKEY_METHOD * pmeth, int (*encrypt_init)(EVP_PKEY_CTX *ctx), int (*encryptfn)(EVP_PKEY_CTX *ctx, unsigned char *out, size_t *outlen, const unsigned char *in, size_t inlen)) (a0,a1,a2)
void ASN1_PCTX_set_flags(ASN1_PCTX * p, unsigned long flags) (a0,d0)
int i2d_ESS_CERT_ID(const ESS_CERT_ID * a, unsigned char ** pp) (a0,a1)
TS_VERIFY_CTX * TS_VERIFY_CTX_new() ()
void TS_RESP_CTX_set_extension_cb(TS_RESP_CTX * ctx, TS_extension_cb cb, void * data) (a0,a1,a2)
int TS_RESP_CTX_set_status_info_cond(TS_RESP_CTX * ctx, int status, const char * text) (a0,d0,a1)
int EVP_PKEY_verify(EVP_PKEY_CTX * ctx, const unsigned char * sig, size_t siglen, const unsigned char * tbs, size_t tbslen) (a0,a1,d0,a2,d1)
X509_CRL_METHOD * X509_CRL_METHOD_new(int (*crl_init)(X509_CRL *crl), int (*crl_free)(X509_CRL *crl), int (*crl_lookup)(X509_CRL *crl, X509_REVOKED **ret, const ASN1_INTEGER *serial, const X509_NAME *issuer), int (*crl_verify)(X509_CRL *crl, EVP_PKEY *pk)) (a0,a1,a2,a3)
int EVP_DigestSignFinal(EVP_MD_CTX * ctx, unsigned char * sigret, size_t * siglen) (a0,a1,a2)
int TS_RESP_CTX_set_def_policy(TS_RESP_CTX * ctx, const ASN1_OBJECT * def_policy) (a0,a1)
TS_RESP * TS_RESP_create_response(TS_RESP_CTX * ctx, BIO * req_bio) (a0,a1)
void PKCS7_SIGNER_INFO_get0_algs(PKCS7_SIGNER_INFO * si, EVP_PKEY ** pk, X509_ALGOR ** pdig, X509_ALGOR ** psig) (a0,a1,a2,a3)
const ASN1_INTEGER * TS_TST_INFO_get_nonce(const TS_TST_INFO * a) (a0)
int EVP_PKEY_decrypt_old(unsigned char * dec_key, const unsigned char * enc_key, int enc_key_len, EVP_PKEY * private_key) (a0,a1,d0,a2)
int TS_TST_INFO_set_policy_id(TS_TST_INFO * a, ASN1_OBJECT * policy_id) (a0,a1)
int TS_CONF_set_ess_cert_id_chain(CONF * conf, const char * section, TS_RESP_CTX * ctx) (a0,a1,a2)
EVP_PKEY * EVP_PKEY_CTX_get0_pkey(EVP_PKEY_CTX * ctx) (a0)
TS_REQ * d2i_TS_REQ(TS_REQ ** a, const unsigned char ** pp, long length) (a0,a1,d0)
const EVP_PKEY_ASN1_METHOD * EVP_PKEY_asn1_find_str(ENGINE ** pe, const char * str, int len) (a0,a1,d0)
const BIO_METHOD * BIO_f_asn1() ()
ESS_SIGNING_CERT * ESS_SIGNING_CERT_new() ()
int EVP_PBE_find(int type, int pbe_nid, int * pcnid, int * pmnid, EVP_PBE_KEYGEN ** pkeygen) (d0,d1,a0,a1,a2)
int X509_CRL_get0_by_cert(X509_CRL * crl, X509_REVOKED ** ret, X509 * x) (a0,a1,a2)
int EVP_PKEY_derive(EVP_PKEY_CTX * ctx, unsigned char * key, size_t * keylen) (a0,a1,a2)
int i2d_TS_REQ(const TS_REQ * a, unsigned char ** pp) (a0,a1)
X509_EXTENSION * TS_TST_INFO_delete_ext(TS_TST_INFO * a, int loc) (a0,d0)
void ESS_ISSUER_SERIAL_free(ESS_ISSUER_SERIAL * a) (a0)
void ASN1_PCTX_set_str_flags(ASN1_PCTX * p, unsigned long flags) (a0,d0)
int TS_CONF_set_signer_key(CONF * conf, const char * section, const char * key, const char * pass, TS_RESP_CTX * ctx) (a0,a1,a2,a3,d0)
const ASN1_INTEGER * TS_ACCURACY_get_millis(const TS_ACCURACY * a) (a0)
PKCS7 * TS_RESP_get_token(TS_RESP * a) (a0)
TS_ACCURACY * TS_ACCURACY_dup(const TS_ACCURACY * a) (a0)
void X509_CRL_set_default_method(const X509_CRL_METHOD * meth) (a0)
==reserve 1
void TS_RESP_free(TS_RESP * a) (a0)
void ISSUING_DIST_POINT_free(ISSUING_DIST_POINT * a) (a0)
ESS_ISSUER_SERIAL * ESS_ISSUER_SERIAL_new() ()
int PKCS7_add1_attrib_digest(PKCS7_SIGNER_INFO * si, const unsigned char * md, int mdlen) (a0,a1,d0)
int TS_RESP_CTX_add_md(TS_RESP_CTX * ctx, const EVP_MD * md) (a0,a1)
TS_TST_INFO * TS_TST_INFO_dup(const TS_TST_INFO * a) (a0)
int PEM_write_bio_Parameters(BIO * bp, const EVP_PKEY * x) (a0,a1)
TS_ACCURACY * TS_TST_INFO_get_accuracy(TS_TST_INFO * a) (a0)
int X509_CRL_get0_by_serial(X509_CRL * crl, X509_REVOKED ** ret, const ASN1_INTEGER * serial) (a0,a1,a2)
int TS_TST_INFO_set_version(TS_TST_INFO * a, long version) (a0,d0)
TS_TST_INFO * TS_RESP_CTX_get_tst_info(TS_RESP_CTX * ctx) (a0)
int TS_RESP_verify_signature(PKCS7 * token, STACK_OF(X509) * certs, X509_STORE * store, X509 ** signer_out) (a0,a1,a2,a3)
==reserve 1
GENERAL_NAME * TS_TST_INFO_get_tsa(TS_TST_INFO * a) (a0)
TS_STATUS_INFO * TS_STATUS_INFO_new() ()
int (*)(EVP_PKEY_CTX *ctx) EVP_PKEY_CTX_get_cb(EVP_PKEY_CTX * ctx) (a0)
void * TS_REQ_get_ext_d2i(TS_REQ * a, int nid, int * crit, int * idx) (a0,d0,a1,d1)
int GENERAL_NAME_set0_othername(GENERAL_NAME * gen, ASN1_OBJECT * oid, ASN1_TYPE * value) (a0,a1,a2)
int TS_TST_INFO_get_ext_count(TS_TST_INFO * a) (a0)
TS_REQ * TS_RESP_CTX_get_request(TS_RESP_CTX * ctx) (a0)
==reserve 1
void EVP_PKEY_meth_set_signctx(EVP_PKEY_METHOD * pmeth, int (*signctx_init)(EVP_PKEY_CTX *ctx, EVP_MD_CTX *mctx), int (*signctx)(EVP_PKEY_CTX *ctx, unsigned char *sig, size_t *siglen, EVP_MD_CTX *mctx)) (a0,a1,a2)
void EVP_PKEY_asn1_copy(EVP_PKEY_ASN1_METHOD * dst, const EVP_PKEY_ASN1_METHOD * src) (a0,a1)
int ASN1_TYPE_cmp(const ASN1_TYPE * a, const ASN1_TYPE * b) (a0,a1)
void EVP_CIPHER_do_all_sorted(void (*fn)(const EVP_CIPHER *ciph, const char *from, const char *to, void *x), void * arg) (a0,a1)
void EVP_PKEY_CTX_free(EVP_PKEY_CTX * ctx) (a0)
==reserve 1
STACK_OF(X509) * X509_STORE_CTX_get1_certs(X509_STORE_CTX * xs, const X509_NAME * nm) (a0,a1)
int EVP_PKEY_CTX_get_operation(EVP_PKEY_CTX * ctx) (a0)
ESS_SIGNING_CERT * d2i_ESS_SIGNING_CERT(ESS_SIGNING_CERT ** a, const unsigned char ** pp, long length) (a0,a1,d0)
int TS_CONF_set_ordering(CONF * conf, const char * section, TS_RESP_CTX * ctx) (a0,a1,a2)
int EVP_PBE_alg_add_type(int pbe_type, int pbe_nid, int cipher_nid, int md_nid, EVP_PBE_KEYGEN * keygen) (d0,d1,d2,d3,a0)
int TS_REQ_set_version(TS_REQ * a, long version) (a0,d0)
void * EVP_PKEY_get0(const EVP_PKEY * pkey) (a0)
int BIO_asn1_set_suffix(BIO * b, asn1_ps_func * suffix, asn1_ps_func * suffix_free) (a0,a1,a2)
int i2d_TS_STATUS_INFO(const TS_STATUS_INFO * a, unsigned char ** pp) (a0,a1)
void EVP_MD_do_all(void (*fn)(const EVP_MD *ciph, const char *from, const char *to, void *x), void * arg) (a0,a1)
int TS_TST_INFO_set_accuracy(TS_TST_INFO * a, TS_ACCURACY * accuracy) (a0,a1)
int PKCS7_add_attrib_content_type(PKCS7_SIGNER_INFO * si, ASN1_OBJECT * coid) (a0,a1)
int EVP_PKEY_meth_add0(const EVP_PKEY_METHOD * pmeth) (a0)
int TS_TST_INFO_set_tsa(TS_TST_INFO * a, GENERAL_NAME * tsa) (a0,a1)
EVP_PKEY_METHOD * EVP_PKEY_meth_new(int id, int flags) (d0,d1)
int TS_CONF_set_accuracy(CONF * conf, const char * section, TS_RESP_CTX * ctx) (a0,a1,a2)
void ASN1_PCTX_set_oid_flags(ASN1_PCTX * p, unsigned long flags) (a0,d0)
ESS_SIGNING_CERT * ESS_SIGNING_CERT_dup(const ESS_SIGNING_CERT * a) (a0)
TS_REQ * d2i_TS_REQ_bio(BIO * fp, TS_REQ ** a) (a0,a1)
ASN1_TIME * X509_time_adj_ex(ASN1_TIME * s, int offset_day, long offset_sec, time_t * t) (a0,d0,d1,a1)
void TS_RESP_CTX_add_flags(TS_RESP_CTX * ctx, int flags) (a0,d0)
TS_STATUS_INFO * d2i_TS_STATUS_INFO(TS_STATUS_INFO ** a, const unsigned char ** pp, long length) (a0,a1,d0)
int TS_MSG_IMPRINT_set_msg(TS_MSG_IMPRINT * a, unsigned char * d, int len) (a0,a1,d0)
int BIO_asn1_get_suffix(BIO * b, asn1_ps_func ** psuffix, asn1_ps_func ** psuffix_free) (a0,a1,a2)
void TS_REQ_free(TS_REQ * a) (a0)
void EVP_PKEY_meth_free(EVP_PKEY_METHOD * pmeth) (a0)
STACK_OF(X509_EXTENSION) * TS_REQ_get_exts(TS_REQ * a) (a0)
int TS_RESP_CTX_set_clock_precision_digits(TS_RESP_CTX * ctx, unsigned clock_precision_digits) (a0,d0)
int TS_RESP_CTX_add_failure_info(TS_RESP_CTX * ctx, int failure) (a0,d0)
int i2d_TS_RESP_bio(BIO * fp, const TS_RESP * a) (a0,a1)
EVP_PKEY * EVP_PKEY_CTX_get0_peerkey(EVP_PKEY_CTX * ctx) (a0)
TS_REQ * TS_REQ_new() ()
TS_MSG_IMPRINT * TS_MSG_IMPRINT_new() ()
const EVP_PKEY_METHOD * EVP_PKEY_meth_find(int type) (a0)
int EVP_PKEY_get_id(const EVP_PKEY * pkey) (a0)
int TS_TST_INFO_set_serial(TS_TST_INFO * a, const ASN1_INTEGER * serial) (a0,a1)
GENERAL_NAME * a2i_GENERAL_NAME(GENERAL_NAME * out, const X509V3_EXT_METHOD * method, X509V3_CTX * ctx, int gen_type, const char * value, int is_nc) (a0,a1,a2,d0,a3,d1)
int TS_CONF_set_crypto_device(CONF * conf, const char * section, const char * device) (a0,a1,a2)
int EVP_PKEY_verify_init(EVP_PKEY_CTX * ctx) (a0)
int TS_CONF_set_policies(CONF * conf, const char * section, TS_RESP_CTX * ctx) (a0,a1,a2)
ASN1_PCTX * ASN1_PCTX_new() ()
void ESS_CERT_ID_free(ESS_CERT_ID * a) (a0)
void TS_MSG_IMPRINT_free(TS_MSG_IMPRINT * a) (a0)
void TS_VERIFY_CTX_init(TS_VERIFY_CTX * ctx) (a0)
int PKCS7_stream(unsigned char *** boundary, PKCS7 * p7) (a0,a1)
int TS_RESP_CTX_set_certs(TS_RESP_CTX * ctx, STACK_OF(X509) * certs) (a0,a1)
int TS_CONF_set_def_policy(CONF * conf, const char * section, const char * policy, TS_RESP_CTX * ctx) (a0,a1,a2,a3)
ASN1_GENERALIZEDTIME * ASN1_GENERALIZEDTIME_adj(ASN1_GENERALIZEDTIME * s, time_t t, int offset_day, long offset_sec) (a0,d0,d1,d2)
==reserve 1
void TS_ACCURACY_free(TS_ACCURACY * a) (a0)
TS_TST_INFO * TS_RESP_get_tst_info(TS_RESP * a) (a0)
int EVP_PKEY_derive_set_peer(EVP_PKEY_CTX * ctx, EVP_PKEY * peer) (a0,a1)
EVP_PKEY * PEM_read_bio_Parameters(BIO * bp, EVP_PKEY ** x) (a0,a1)
int TS_CONF_set_clock_precision_digits(const CONF * conf, const char * section, TS_RESP_CTX * ctx) (a0,a1,a2)
ESS_ISSUER_SERIAL * ESS_ISSUER_SERIAL_dup(const ESS_ISSUER_SERIAL * a) (a0)
const ASN1_INTEGER * TS_ACCURACY_get_micros(const TS_ACCURACY * a) (a0)
unsigned long ASN1_PCTX_get_str_flags(const ASN1_PCTX * p) (a0)
int NAME_CONSTRAINTS_check(X509 * x, NAME_CONSTRAINTS * nc) (a0,a1)
int ASN1_BIT_STRING_check(const ASN1_BIT_STRING * a, const unsigned char * flags, int flags_len) (a0,a1,d0)
int X509_check_akid(const X509 * issuer, const AUTHORITY_KEYID * akid) (a0,a1)
void ASN1_PCTX_free(ASN1_PCTX * p) (a0)
int PEM_write_bio_ASN1_stream(BIO * out, ASN1_VALUE * val, BIO * in, int flags, const char * hdr, const ASN1_ITEM * it) (a0,a1,a2,d0,a3,d1)
int i2d_ASN1_bio_stream(BIO * out, ASN1_VALUE * val, BIO * in, int flags, const ASN1_ITEM * it) (a0,a1,a2,d0,a3)
int TS_X509_ALGOR_print_bio(BIO * bio, const X509_ALGOR * alg) (a0,a1)
void EVP_PKEY_meth_set_cleanup(EVP_PKEY_METHOD * pmeth, void (*cleanup)(EVP_PKEY_CTX *ctx)) (a0,a1)
void EVP_PKEY_asn1_free(EVP_PKEY_ASN1_METHOD * ameth) (a0)
void ESS_SIGNING_CERT_free(ESS_SIGNING_CERT * a) (a0)
int TS_TST_INFO_set_msg_imprint(TS_TST_INFO * a, TS_MSG_IMPRINT * msg_imprint) (a0,a1)
int GENERAL_NAME_cmp(GENERAL_NAME * a, GENERAL_NAME * b) (a0,a1)
ASN1_SEQUENCE_ANY * d2i_ASN1_SET_ANY(ASN1_SEQUENCE_ANY ** a, const unsigned char ** pp, long length) (a0,a1,d0)
==reserve 1
ASN1_SEQUENCE_ANY * d2i_ASN1_SEQUENCE_ANY(ASN1_SEQUENCE_ANY ** a, const unsigned char ** pp, long length) (a0,a1,d0)
int GENERAL_NAME_get0_otherName(const GENERAL_NAME * gen, ASN1_OBJECT ** poid, ASN1_TYPE ** pvalue) (a0,a1,a2)
ESS_CERT_ID * d2i_ESS_CERT_ID(ESS_CERT_ID ** a, const unsigned char ** pp, long length) (a0,a1,d0)
int OBJ_find_sigid_algs(int signid, int * pdig_nid, int * ppkey_nid) (d0,a0,a1)
void EVP_PKEY_meth_set_keygen(EVP_PKEY_METHOD * pmeth, int (*keygen_init)(EVP_PKEY_CTX *ctx), int (*keygen)(EVP_PKEY_CTX *ctx, EVP_PKEY *pkey)) (a0,a1,a2)
int PKCS5_PBKDF2_HMAC(const char * pass, int passlen, const unsigned char * salt, int saltlen, int iter, const EVP_MD * digest, int keylen, unsigned char * out) (a0,d0,a1,d1,d2,a2,d3,a3)
int EVP_PKEY_paramgen(EVP_PKEY_CTX * ctx, EVP_PKEY ** ppkey) (a0,a1)
void EVP_PKEY_meth_set_paramgen(EVP_PKEY_METHOD * pmeth, int (*paramgen_init)(EVP_PKEY_CTX *ctx), int (*paramgen)(EVP_PKEY_CTX *ctx, EVP_PKEY *pkey)) (a0,a1,a2)
BIO * BIO_new_PKCS7(BIO * out, PKCS7 * p7) (a0,a1)
int EVP_PKEY_verify_recover(EVP_PKEY_CTX * ctx, unsigned char * rout, size_t * routlen, const unsigned char * sig, size_t siglen) (a0,a1,a2,a3,d0)
int TS_ext_print_bio(BIO * bio, const STACK_OF(X509_EXTENSION) * extensions) (a0,a1)
int TS_ASN1_INTEGER_print_bio(BIO * bio, const ASN1_INTEGER * num) (a0,a1)
==reserve 2
int EVP_PKEY_set_type(EVP_PKEY * pkey, int type) (a0,d0)
int TS_ACCURACY_set_micros(TS_ACCURACY * a, const ASN1_INTEGER * micros) (a0,a1)
TS_VERIFY_CTX * TS_REQ_to_TS_VERIFY_CTX(TS_REQ * req, TS_VERIFY_CTX * ctx) (a0,a1)
void EVP_PKEY_meth_set_copy(EVP_PKEY_METHOD * pmeth, int (*copy)(EVP_PKEY_CTX *dst, const EVP_PKEY_CTX *src)) (a0,a1)
void ASN1_PCTX_set_cert_flags(ASN1_PCTX * p, unsigned long flags) (a0,d0)
X509_EXTENSION * TS_TST_INFO_get_ext(TS_TST_INFO * a, int loc) (a0,d0)
void EVP_PKEY_asn1_set_ctrl(EVP_PKEY_ASN1_METHOD * ameth, int (*pkey_ctrl)(EVP_PKEY *pkey, int op, long arg1, void *arg2)) (a0,a1)
int TS_TST_INFO_get_ext_by_critical(TS_TST_INFO * a, int crit, int lastpos) (a0,d0,d1)
EVP_PKEY_CTX * EVP_PKEY_CTX_new_id(int id, ENGINE * e) (d0,a0)
int TS_REQ_get_ext_by_OBJ(TS_REQ * a, const ASN1_OBJECT * obj, int lastpos) (a0,a1,d0)
int TS_CONF_set_signer_cert(CONF * conf, const char * section, const char * cert, TS_RESP_CTX * ctx) (a0,a1,a2,a3)
unsigned long X509_NAME_hash_old(const X509_NAME * x) (a0)
int ASN1_TIME_set_string(ASN1_TIME * s, const char * str) (a0,a1)
unsigned long EVP_MD_get_flags(const EVP_MD * md) (a0)
void TS_RESP_CTX_free(TS_RESP_CTX * ctx) (a0)
int OSSL_HTTP_REQ_CTX_add1_header(OSSL_HTTP_REQ_CTX * rctx, const char * name, const char * value) (a0,a1,a2)
int OBSOLETE_OCSP_REQ_CTX_set1_req(OSSL_HTTP_REQ_CTX * rctx, OCSP_REQUEST * req) (a0,a1)
void X509_STORE_set_verify_cb(X509_STORE * xs, X509_STORE_CTX_verify_cb verify_cb) (a0,a1)
X509_CRL * X509_STORE_CTX_get0_current_crl(const X509_STORE_CTX * ctx) (a0)
X509_STORE_CTX * X509_STORE_CTX_get0_parent_ctx(const X509_STORE_CTX * ctx) (a0)
X509 * X509_STORE_CTX_get0_current_issuer(const X509_STORE_CTX * ctx) (a0)
int EVP_CIPHER_CTX_copy(EVP_CIPHER_CTX * out, const EVP_CIPHER_CTX * in) (a0,a1)
char *(*)(UI*, const char*, const char*) UI_method_get_prompt_constructor(const UI_METHOD * method) (a0)
int UI_method_set_prompt_constructor(UI_METHOD * method, char *(*prompt_constructor)(UI* ui, const char* object_desc, const char* object_name)) (a0,a1)
int EVP_read_pw_string_min(char * buf, int minlen, int maxlen, const char * prompt, int verify) (a0,d0,d1,a1,d2)
size_t CRYPTO_cts128_encrypt(const unsigned char * in, unsigned char * out, size_t len, const void * key, unsigned char * ivec, cbc128_f cbc) (a0,a1,d0,a2,a3,d1)
size_t CRYPTO_cts128_decrypt_block(const unsigned char * in, unsigned char * out, size_t len, const void * key, unsigned char * ivec, block128_f block) (a0,a1,d0,a2,a3,d1)
void CRYPTO_cfb128_1_encrypt(const unsigned char * in, unsigned char * out, size_t bits, const void * key, unsigned char * ivec, int * num, int enc, block128_f block) (a0,a1,d0,a2,a3,d1,d2,d3)
void CRYPTO_cbc128_encrypt(const unsigned char * in, unsigned char * out, size_t len, const void * key, unsigned char * ivec, block128_f block) (a0,a1,d0,a2,a3,d1)
void CRYPTO_ctr128_encrypt(const unsigned char * in, unsigned char * out, size_t len, const void * key, unsigned char * ivec, unsigned char * ecount_buf, unsigned int * num, block128_f block) (a0,a1,d0,a2,a3,d1,d2,d3)
void CRYPTO_ofb128_encrypt(const unsigned char * in, unsigned char * out, size_t len, const void * key, unsigned char * ivec, int * num, block128_f block) (a0,a1,d0,a2,a3,d1,d2)
size_t CRYPTO_cts128_decrypt(const unsigned char * in, unsigned char * out, size_t len, const void * key, unsigned char * ivec, cbc128_f cbc) (a0,a1,d0,a2,a3,d1)
size_t CRYPTO_cts128_encrypt_block(const unsigned char * in, unsigned char * out, size_t len, const void * key, unsigned char * ivec, block128_f block) (a0,a1,d0,a2,a3,d1)
void CRYPTO_cbc128_decrypt(const unsigned char * in, unsigned char * out, size_t len, const void * key, unsigned char * ivec, block128_f block) (a0,a1,d0,a2,a3,d1)
void CRYPTO_cfb128_encrypt(const unsigned char * in, unsigned char * out, size_t len, const void * key, unsigned char * ivec, int * num, int enc, block128_f block) (a0,a1,d0,a2,a3,d1,d2,d3)
void CRYPTO_cfb128_8_encrypt(const unsigned char * in, unsigned char * out, size_t length, const void * key, unsigned char * ivec, int * num, int enc, block128_f block) (a0,a1,d0,a2,a3,d1,d2,d3)
==reserve 1
struct tm * OPENSSL_gmtime(const time_t * timer, struct tm * result) (a0,a1)
int OPENSSL_gmtime_adj(struct tm * tm, int offset_day, long offset_sec) (a0,d0,d1)
int OPENSSL_gmtime_diff(int * pday, int * psec, const struct tm * from, const struct tm * to) (a0,a1,a2,a3)
void EVP_PKEY_meth_get0_info(int * ppkey_id, int * pflags, const EVP_PKEY_METHOD * meth) (a0,a1,a2)
void EVP_PKEY_meth_copy(EVP_PKEY_METHOD * dst, const EVP_PKEY_METHOD * src) (a0,a1)
int RSA_padding_add_PKCS1_PSS_mgf1(RSA * rsa, unsigned char * EM, const unsigned char * mHash, const EVP_MD * Hash, const EVP_MD * mgf1Hash, int sLen) (a0,a1,a2,a3,d0,d1)
int RSA_verify_PKCS1_PSS_mgf1(RSA * rsa, const unsigned char * mHash, const EVP_MD * Hash, const EVP_MD * mgf1Hash, const unsigned char * EM, int sLen) (a0,a1,a2,a3,d0,d1)
void X509_ALGOR_set_md(X509_ALGOR * alg, const EVP_MD * md) (a0,a1)
int CMAC_CTX_copy(CMAC_CTX * out, const CMAC_CTX * in) (a0,a1)
void CMAC_CTX_free(CMAC_CTX * ctx) (a0)
EVP_CIPHER_CTX * CMAC_CTX_get0_cipher_ctx(CMAC_CTX * ctx) (a0)
void CMAC_CTX_cleanup(CMAC_CTX * ctx) (a0)
int CMAC_Init(CMAC_CTX * ctx, const void * key, size_t keylen, const EVP_CIPHER * cipher, ENGINE * impl) (a0,a1,d0,a2,a3)
int CMAC_Update(CMAC_CTX * ctx, const void * data, size_t dlen) (a0,a1,d0)
int CMAC_resume(CMAC_CTX * ctx) (a0)
CMAC_CTX * CMAC_CTX_new() ()
int CMAC_Final(CMAC_CTX * ctx, unsigned char * out, size_t * poutlen) (a0,a1,a2)
void CRYPTO_ctr128_encrypt_ctr32(const unsigned char * in, unsigned char * out, size_t len, const void * key, unsigned char * ivec, unsigned char * ecount_buf, unsigned int * num, ctr128_f ctr) (a0,a1,d0,a2,a3,d1,d2,d3)
void CRYPTO_gcm128_release(GCM128_CONTEXT * ctx) (a0)
int CRYPTO_ccm128_decrypt_ccm64(CCM128_CONTEXT * ctx, const unsigned char * inp, unsigned char * out, size_t len, ccm128_f stream) (a0,a1,a2,d0,a3)
int CRYPTO_ccm128_encrypt(CCM128_CONTEXT * ctx, const unsigned char * inp, unsigned char * out, size_t len) (a0,a1,a2,d0)
int CRYPTO_gcm128_encrypt(GCM128_CONTEXT * ctx, const unsigned char * in, unsigned char * out, size_t len) (a0,a1,a2,d0)
int CRYPTO_xts128_encrypt(const XTS128_CONTEXT * ctx, const unsigned char * iv, const unsigned char * inp, unsigned char * out, size_t len, int enc) (a0,a1,a2,a3,d0,d1)
size_t CRYPTO_nistcts128_decrypt_block(const unsigned char * in, unsigned char * out, size_t len, const void * key, unsigned char * ivec, block128_f block) (a0,a1,d0,a2,d1,a3)
void CRYPTO_gcm128_setiv(GCM128_CONTEXT * ctx, const unsigned char * iv, size_t len) (a0,a1,d0)
size_t CRYPTO_nistcts128_encrypt(const unsigned char * in, unsigned char * out, size_t len, const void * key, unsigned char * ivec, cbc128_f cbc) (a0,a1,d0,a2,a3,d1)
void CRYPTO_gcm128_tag(GCM128_CONTEXT * ctx, unsigned char * tag, size_t len) (a0,a1,d0)
int CRYPTO_ccm128_encrypt_ccm64(CCM128_CONTEXT * ctx, const unsigned char * inp, unsigned char * out, size_t len, ccm128_f stream) (a0,a1,a2,d0,a3)
int CRYPTO_ccm128_setiv(CCM128_CONTEXT * ctx, const unsigned char * nonce, size_t nlen, size_t mlen) (a0,a1,d0,d1)
size_t CRYPTO_nistcts128_encrypt_block(const unsigned char * in, unsigned char * out, size_t len, const void * key, unsigned char * ivec, block128_f block) (a0,a1,d0,a2,a3,d1)
int CRYPTO_gcm128_aad(GCM128_CONTEXT * ctx, const unsigned char * aad, size_t len) (a0,a1,d0)
void CRYPTO_ccm128_init(CCM128_CONTEXT * ctx, unsigned int M, unsigned int L, void * key, block128_f block) (a0,d0,d1,a1,a2)
size_t CRYPTO_nistcts128_decrypt(const unsigned char * in, unsigned char * out, size_t len, const void * key, unsigned char * ivec, cbc128_f cbc) (a0,a1,d0,a2,a3,d1)
GCM128_CONTEXT * CRYPTO_gcm128_new(void * key, block128_f block) (a0,a1)
size_t CRYPTO_ccm128_tag(CCM128_CONTEXT * ctx, unsigned char * tag, size_t len) (a0,a1,d0)
int CRYPTO_ccm128_decrypt(CCM128_CONTEXT * ctx, const unsigned char * inp, unsigned char * out, size_t len) (a0,a1,a2,d0)
void CRYPTO_ccm128_aad(CCM128_CONTEXT * ctx, const unsigned char * aad, size_t alen) (a0,a1,d0)
void CRYPTO_gcm128_init(GCM128_CONTEXT * ctx, void * key, block128_f block) (a0,a1,a2)
int CRYPTO_gcm128_decrypt(GCM128_CONTEXT * ctx, const unsigned char * in, unsigned char * out, size_t len) (a0,a1,a2,d0)
int CRYPTO_gcm128_decrypt_ctr32(GCM128_CONTEXT * ctx, const unsigned char * in, unsigned char * out, size_t len, ctr128_f stream) (a0,a1,a2,d0,a3)
int CRYPTO_gcm128_encrypt_ctr32(GCM128_CONTEXT * ctx, const unsigned char * in, unsigned char * out, size_t len, ctr128_f stream) (a0,a1,a2,d0,a3)
int CRYPTO_gcm128_finish(GCM128_CONTEXT * ctx, const unsigned char * tag, size_t len) (a0,a1,d0)
X509_ALGOR * PKCS5_pbkdf2_set(int iter, unsigned char * salt, int saltlen, int prf_nid, int keylen) (d0,a0,d1,d2,d3)
RSA_PSS_PARAMS * RSA_PSS_PARAMS_new() ()
RSA_PSS_PARAMS * d2i_RSA_PSS_PARAMS(RSA_PSS_PARAMS ** a, const unsigned char ** pp, long length) (a0,a1,d0)
void RSA_PSS_PARAMS_free(RSA_PSS_PARAMS * a) (a0)
int i2d_RSA_PSS_PARAMS(const RSA_PSS_PARAMS * a, unsigned char ** out) (a0,a1)
==reserve 1
const ASN1_ITEM * POLICY_MAPPING_it() ()
const ASN1_ITEM * NAME_CONSTRAINTS_it() ()
const ASN1_ITEM * ASN1_OCTET_STRING_NDEF_it() ()
==reserve 1
const ASN1_ITEM * POLICY_CONSTRAINTS_it() ()
const ASN1_ITEM * POLICY_MAPPINGS_it() ()
const ASN1_ITEM * GENERAL_SUBTREE_it() ()
const ASN1_ITEM * X509_EXTENSIONS_it() ()
const ASN1_ITEM * X509_ALGORS_it() ()
const ASN1_ITEM * CMS_ContentInfo_it() ()
const ASN1_ITEM * CMS_ReceiptRequest_it() ()
const ASN1_ITEM * ASN1_SEQUENCE_ANY_it() ()
const ASN1_ITEM * ASN1_SET_ANY_it() ()
==reserve 1
const ASN1_ITEM * ISSUING_DIST_POINT_it() ()
const ASN1_ITEM * RSA_PSS_PARAMS_it() ()
==reserve 1
int PEM_write_bio_DHxparams(BIO * bp, const DH * x) (a0,a1)
int X509_ALGOR_cmp(const X509_ALGOR * a, const X509_ALGOR * b) (a0,a1)
void ASN1_STRING_clear_free(ASN1_STRING * a) (a0)
int ASN1_TIME_diff(int * pday, int * psec, const ASN1_TIME * from, const ASN1_TIME * to) (a0,a1,a2,a3)
int BIO_hex_string(BIO * out, int indent, int width, const void * data, int datalen) (a0,d0,d1,a1,d2)
size_t OBSOLETE_BUF_strnlen(const char * str, size_t maxlen) (a0,d0)
int CMS_RecipientEncryptedKey_cert_cmp(CMS_RecipientEncryptedKey * rek, X509 * cert) (a0,a1)
int CMS_RecipientEncryptedKey_get0_id(CMS_RecipientEncryptedKey * rek, ASN1_OCTET_STRING ** keyid, ASN1_GENERALIZEDTIME ** tm, CMS_OtherKeyAttribute ** other, X509_NAME ** issuer, ASN1_INTEGER ** sno) (a0,a1,a2,a3,d0,d1)
int CMS_RecipientInfo_encrypt(const CMS_ContentInfo * cms, CMS_RecipientInfo * ri) (a0,a1)
EVP_PKEY_CTX * CMS_RecipientInfo_get0_pkey_ctx(CMS_RecipientInfo * ri) (a0)
int CMS_RecipientInfo_kari_decrypt(CMS_ContentInfo * cms, CMS_RecipientInfo * ri, CMS_RecipientEncryptedKey * rek) (a0,a1,a2)
int CMS_RecipientInfo_kari_get0_alg(CMS_RecipientInfo * ri, X509_ALGOR ** palg, ASN1_OCTET_STRING ** pukm) (a0,a1,a2)
EVP_CIPHER_CTX * CMS_RecipientInfo_kari_get0_ctx(CMS_RecipientInfo * ri) (a0)
int CMS_RecipientInfo_kari_get0_orig_id(CMS_RecipientInfo * ri, X509_ALGOR ** pubalg, ASN1_BIT_STRING ** pubkey, ASN1_OCTET_STRING ** keyid, X509_NAME ** issuer, ASN1_INTEGER ** sno) (a0,a1,a2,a3,d0,d1)
STACK_OF(CMS_RecipientEncryptedKey) * CMS_RecipientInfo_kari_get0_reks(CMS_RecipientInfo * ri) (a0)
int CMS_RecipientInfo_kari_orig_id_cmp(CMS_RecipientInfo * ri, X509 * cert) (a0,a1)
int CMS_RecipientInfo_kari_set0_pkey(CMS_RecipientInfo * ri, EVP_PKEY * pk) (a0,a1)
int CMS_SharedInfo_encode(unsigned char ** pder, X509_ALGOR * kekalg, ASN1_OCTET_STRING * ukm, int keylen) (a0,a1,a2,d0)
EVP_MD_CTX * CMS_SignerInfo_get0_md_ctx(CMS_SignerInfo * si) (a0)
EVP_PKEY_CTX * CMS_SignerInfo_get0_pkey_ctx(CMS_SignerInfo * si) (a0)
ASN1_OCTET_STRING * CMS_SignerInfo_get0_signature(CMS_SignerInfo * si) (a0)
DH * d2i_DHxparams(DH ** a, const unsigned char ** pp, long length) (a0,a1,d0)
int i2d_DHxparams(const DH * dh, unsigned char ** pp) (a0,a1)
int DH_compute_key_padded(unsigned char * key, const BIGNUM * pub_key, DH * dh) (a0,a1,a2)
DH * DH_get_1024_160() ()
DH * DH_get_2048_224() ()
DH * DH_get_2048_256() ()
int DH_KDF_X9_42(unsigned char * out, size_t outlen, const unsigned char * Z, size_t Zlen, ASN1_OBJECT * key_oid, const unsigned char * ukm, size_t ukmlen, const EVP_MD * md) (a0,d0,a1,d1,a2,a3,d2,d3)
const char * EC_curve_nid2nist(int nid) (d0)
int EC_curve_nist2nid(const char * name) (a0)
BN_MONT_CTX * EC_GROUP_get_mont_data(const EC_GROUP * group) (a0)
int ECDH_KDF_X9_62(unsigned char * out, size_t outlen, const unsigned char * Z, size_t Zlen, const unsigned char * sinfo, size_t sinfolen, const EVP_MD * md) (a0,d0,a1,d1,a2,d2,d3)
==reserve 9
const EVP_CIPHER * EVP_aes_128_cbc_hmac_sha256() ()
const EVP_CIPHER * EVP_aes_128_wrap() ()
const EVP_CIPHER * EVP_aes_192_wrap() ()
const EVP_CIPHER * EVP_aes_256_cbc_hmac_sha256() ()
const EVP_CIPHER * EVP_aes_256_wrap() ()
const EVP_CIPHER * EVP_des_ede3_wrap() ()
size_t CRYPTO_128_unwrap(void * key, const unsigned char * iv, unsigned char * out, const unsigned char * in, size_t inlen, block128_f block) (a0,a1,a2,a3,d0,d1)
size_t CRYPTO_128_wrap(void * key, const unsigned char * iv, unsigned char * out, const unsigned char * in, size_t inlen, block128_f block) (a0,a1,a2,a3,d0,d1)
BIO * OSSL_HTTP_REQ_CTX_get0_mem_bio(const OSSL_HTTP_REQ_CTX * rctx) (a0)
int OBSOLETE_OCSP_REQ_CTX_http(OSSL_HTTP_REQ_CTX * rctx, const char * op, const char * path) (a0,a1,a2)
int OBSOLETE_OCSP_REQ_CTX_i2d(OSSL_HTTP_REQ_CTX * rctx, const ASN1_ITEM * it, ASN1_VALUE * val) (a0,a1,a2)
int OSSL_HTTP_REQ_CTX_nbio(OSSL_HTTP_REQ_CTX * rctx) (a0)
int OSSL_HTTP_REQ_CTX_nbio_d2i(OSSL_HTTP_REQ_CTX * rctx, ASN1_VALUE ** pval, const ASN1_ITEM * it) (a0,a1,a2)
OSSL_HTTP_REQ_CTX * OBSOLETE_OCSP_REQ_CTX_new(BIO * io, int maxline) (a0,d0)
void OSSL_HTTP_REQ_CTX_set_max_response_length(OSSL_HTTP_REQ_CTX * rctx, unsigned long len) (a0,d0)
RSA_OAEP_PARAMS * d2i_RSA_OAEP_PARAMS(RSA_OAEP_PARAMS ** a, const unsigned char ** in, long len) (a0,a1,d0)
void RSA_OAEP_PARAMS_free(RSA_OAEP_PARAMS * a) (a0)
const ASN1_ITEM * RSA_OAEP_PARAMS_it() ()
RSA_OAEP_PARAMS * RSA_OAEP_PARAMS_new() ()
int RSA_padding_add_PKCS1_OAEP_mgf1(unsigned char * to, int tlen, const unsigned char * from, int flen, const unsigned char * param, int plen, const EVP_MD * md, const EVP_MD * mgf1md) (a0,d0,a1,d1,a2,d2,a3,d3)
int RSA_padding_check_PKCS1_OAEP_mgf1(unsigned char * to, int tlen, const unsigned char * from, int flen, int num, const unsigned char * param, int plen, const EVP_MD * md, const EVP_MD * mgf1md) (a0,d0,a1,d1,d2,a2,d3,a3,d4)
OPENSSL_STACK * OPENSSL_sk_deep_copy(const OPENSSL_STACK * sk, OPENSSL_sk_copyfunc c, OPENSSL_sk_freefunc f) (a0,a1,a2)
int i2d_re_X509_tbs(X509 * x, unsigned char ** pp) (a0,a1)
int X509_chain_check_suiteb(int * perror_depth, X509 * x, STACK_OF(X509) * chain, unsigned long flags) (a0,a1,a2,d0)
STACK_OF(X509) * X509_chain_up_ref(STACK_OF(X509) * chain) (a0)
int X509_CRL_check_suiteb(X509_CRL * crl, EVP_PKEY * pk, unsigned long flags) (a0,a1,d0)
X509_CRL * X509_CRL_diff(X509_CRL * base, X509_CRL * newer, EVP_PKEY * skey, const EVP_MD * md, unsigned int flags) (a0,a1,a2,a3,d0)
int OBSOLETE_X509_CRL_http_nbio(OSSL_HTTP_REQ_CTX * rctx, X509_CRL ** pcrl) (a0,a1)
void X509_get0_signature(const ASN1_BIT_STRING ** psig, const X509_ALGOR ** palg, const X509 * x) (a0,a1,a2)
int X509_get_signature_nid(const X509 * x) (a0)
int OBSOLETE_X509_http_nbio(OSSL_HTTP_REQ_CTX * rctx, X509 ** pcert) (a0,a1)
X509_REVOKED * X509_REVOKED_dup(const X509_REVOKED * rev) (a0)
X509_STORE * X509_STORE_CTX_get0_store(const X509_STORE_CTX * ctx) (a0)
int X509_VERIFY_PARAM_add1_host(X509_VERIFY_PARAM * param, const char * name, size_t namelen) (a0,a1,d0)
const X509_VERIFY_PARAM * X509_VERIFY_PARAM_get0(int id) (d0)
const char * X509_VERIFY_PARAM_get0_name(const X509_VERIFY_PARAM * param) (a0)
char * X509_VERIFY_PARAM_get0_peername(const X509_VERIFY_PARAM * param) (a0)
int X509_VERIFY_PARAM_get_count() ()
int X509_VERIFY_PARAM_set1_email(X509_VERIFY_PARAM * param, const char * email, size_t emaillen) (a0,a1,d0)
int X509_VERIFY_PARAM_set1_host(X509_VERIFY_PARAM * param, const char * name, size_t namelen) (a0,a1,d0)
int X509_VERIFY_PARAM_set1_ip(X509_VERIFY_PARAM * param, const unsigned char * ip, size_t iplen) (a0,a1,d0)
int X509_VERIFY_PARAM_set1_ip_asc(X509_VERIFY_PARAM * param, const char * ipasc) (a0,a1)
void X509_VERIFY_PARAM_set_hostflags(X509_VERIFY_PARAM * param, unsigned int flags) (a0,d0)
int X509_check_email(X509 * x, const char * chk, size_t chklen, unsigned int flags) (a0,a1,d0,d1)
int X509_check_host(X509 * x, const char * chk, size_t chklen, unsigned int flags, char ** peername) (a0,a1,d0,d1,a2)
int X509_check_ip(X509 * x, const unsigned char * chk, size_t chklen, unsigned int flags) (a0,a1,d0,d1)
int X509_check_ip_asc(X509 * x, const char * ipasc, unsigned int flags) (a0,a1,d1)
==reserve 1
void EVP_PKEY_asn1_set_item(EVP_PKEY_ASN1_METHOD * ameth, int (*item_verify)(EVP_MD_CTX *, const ASN1_ITEM *, const void *, const X509_ALGOR *, const ASN1_BIT_STRING *, EVP_PKEY *), int (*item_sign)(EVP_MD_CTX *, const ASN1_ITEM *, const void *, X509_ALGOR *, X509_ALGOR *, ASN1_BIT_STRING *)) (a0,a1,a2)
const SSL_METHOD * DTLS_client_method() ()
const SSL_METHOD * DTLS_method() ()
const SSL_METHOD * DTLS_server_method() ()
==reserve 3
void SSL_certs_clear(SSL * s) (a0)
const SSL_CIPHER * SSL_CIPHER_find(SSL * ssl, const unsigned char * ptr) (a0,a1)
==reserve 1
int SSL_CONF_cmd(SSL_CONF_CTX * ctx, const char * cmd, const char * value) (a0,a1,a2)
int SSL_CONF_cmd_argv(SSL_CONF_CTX * cctx, int * pargc, char *** pargv) (a0,a1,a2)
int SSL_CONF_cmd_value_type(SSL_CONF_CTX * cctx, const char * cmd) (a0,a1)
unsigned int SSL_CONF_CTX_clear_flags(SSL_CONF_CTX * cctx, unsigned int flags) (a0,a1)
int SSL_CONF_CTX_finish(SSL_CONF_CTX * cctx) (a0)
void SSL_CONF_CTX_free(SSL_CONF_CTX * cctx) (a0)
SSL_CONF_CTX * SSL_CONF_CTX_new() ()
int SSL_CONF_CTX_set1_prefix(SSL_CONF_CTX * cctx, const char * pre) (a0,a1)
unsigned int SSL_CONF_CTX_set_flags(SSL_CONF_CTX * cctx, unsigned int flags) (a0,a1)
void SSL_CONF_CTX_set_ssl(SSL_CONF_CTX * cctx, SSL * ssl) (a0,a1)
void SSL_CONF_CTX_set_ssl_ctx(SSL_CONF_CTX * cctx, SSL_CTX * ctx) (a0,a1)
int SSL_CTX_add_client_custom_ext(SSL_CTX * ctx, unsigned int ext_type, custom_ext_add_cb add_cb, custom_ext_free_cb free_cb, void * add_arg, custom_ext_parse_cb parse_cb, void * parse_arg) (a0,d0,d1,d2,a1,d3,a2)
int SSL_CTX_add_server_custom_ext(SSL_CTX * ctx, unsigned int ext_type, custom_ext_add_cb add_cb, custom_ext_free_cb free_cb, void * add_arg, custom_ext_parse_cb parse_cb, void * parse_arg) (a0,d0,d1,d2,a1,d3,a2)
X509 * SSL_CTX_get0_certificate(const SSL_CTX * ctx) (a0)
X509_VERIFY_PARAM * SSL_CTX_get0_param(SSL_CTX * ctx) (a0)
EVP_PKEY * SSL_CTX_get0_privatekey(const SSL_CTX * ctx) (a0)
const SSL_METHOD * SSL_CTX_get_ssl_method(const SSL_CTX * ctx) (a0)
int SSL_CTX_set_alpn_protos(SSL_CTX * ctx, const unsigned char * protos, unsigned int protos_len) (a0,a1,d0)
void SSL_CTX_set_alpn_select_cb(SSL_CTX * ctx, SSL_CTX_alpn_select_cb_func cb, void * arg) (a0,a1,a2)
void SSL_CTX_set_cert_cb(SSL_CTX * c, int (*cb)(SSL *ssl, void *arg), void * arg) (a0,a1,a2)
int SSL_CTX_use_serverinfo(SSL_CTX * ctx, const unsigned char * serverinfo, size_t serverinfo_length) (a0,a1,d0)
int SSL_CTX_use_serverinfo_file(SSL_CTX * ctx, const char * file) (a0,a1)
int SSL_extension_supported(unsigned int ext_type) (d0)
void SSL_get0_alpn_selected(const SSL * ssl, const unsigned char ** data, unsigned int * len) (a0,a1,a2)
X509_VERIFY_PARAM * SSL_get0_param(SSL * ssl) (a0)
int SSL_is_server(const SSL * s) (a0)
int SSL_set_alpn_protos(SSL * ssl, const unsigned char * protos, unsigned int protos_len) (a0,a1,a2)
void SSL_set_cert_cb(SSL * s, int (*cb)(SSL *ssl, void *arg), void * arg) (a0,a1,a2)
int SSL_check_chain(SSL * s, X509 * x, EVP_PKEY * pk, STACK_OF(X509) * chain) (a0,a1,a2,a3)
int SSL_get_shared_sigalgs(SSL * s, int idx, int * psign, int * phash, int * psignandhash, unsigned char * rsig, unsigned char * rhash) (a0,d0,a1,a2,a3,d1,d2)
int SSL_get_sigalgs(SSL * s, int idx, int * psign, int * phash, int * psignandhash, unsigned char * rsig, unsigned char * rhash) (a0,d0,a1,a2,a3,d1,d2)
void ASN1_add_stable_module() ()
int ASN1_buf_print(BIO * bp, const unsigned char * buf, size_t buflen, int off) (a0,a1,a2,d0)
int ASN1_ENUMERATED_get_int64(int64_t * pr, const ASN1_ENUMERATED * a) (a0,a1)
int ASN1_ENUMERATED_set_int64(ASN1_ENUMERATED * a, int64_t r) (a0,d0-d1)
int ASN1_INTEGER_get_int64(int64_t * pr, const ASN1_INTEGER * a) (a0,a1)
int ASN1_INTEGER_get_uint64(uint64_t * pr, const ASN1_INTEGER * a) (a0,a1)
int ASN1_INTEGER_set_int64(ASN1_INTEGER * a, int64_t r) (a0,d0-d1)
int ASN1_INTEGER_set_uint64(ASN1_INTEGER * a, uint64_t r) (a0,d0-d1)
void ASN1_SCTX_free(ASN1_SCTX * p) (a0)
void * ASN1_SCTX_get_app_data(ASN1_SCTX * p) (a0)
unsigned long ASN1_SCTX_get_flags(ASN1_SCTX * p) (a0)
const ASN1_ITEM * ASN1_SCTX_get_item(ASN1_SCTX * p) (a0)
const ASN1_TEMPLATE * ASN1_SCTX_get_template(ASN1_SCTX * p) (a0)
ASN1_SCTX * ASN1_SCTX_new(int (*scan_cb)(ASN1_SCTX *)) (a0)
void ASN1_SCTX_set_app_data(ASN1_SCTX * p, void * data) (a0,a1)
int ASN1_str2mask(const char * str, unsigned long * pmask) (a0,a1)
ASN1_TYPE * ASN1_TYPE_pack_sequence(const ASN1_ITEM * it, void * s, ASN1_TYPE ** t) (a0,a1,a2)
void * ASN1_TYPE_unpack_sequence(const ASN1_ITEM * it, const ASN1_TYPE * t) (a0,a1)
void ASYNC_block_pause() ()
void ASYNC_cleanup_thread() ()
==reserve 1
ASYNC_JOB * ASYNC_get_current_job() ()
==reserve 1
int ASYNC_init_thread(size_t max_size, size_t init_size) (d0,d1)
int ASYNC_pause_job() ()
int ASYNC_start_job(ASYNC_JOB ** job, ASYNC_WAIT_CTX * ctx, int * ret, int (*func)(void *), void * args, size_t size) (a0,a1,a2,a3,d0,d1)
void ASYNC_unblock_pause() ()
==reserve 1
int ERR_load_ASYNC_strings() ()
int BIO_accept_ex(int accept_sock, BIO_ADDR * addr, int options) (d0,a0,d1)
void BIO_ADDR_clear(BIO_ADDR * ap) (a0)
int BIO_ADDR_family(const BIO_ADDR * ap) (a0)
void BIO_ADDR_free(BIO_ADDR * ap) (a0)
char * BIO_ADDR_hostname_string(const BIO_ADDR * ap, int numeric) (a0,a1)
BIO_ADDR * BIO_ADDR_new() ()
char * BIO_ADDR_path_string(const BIO_ADDR * ap) (a0)
int BIO_ADDR_rawaddress(const BIO_ADDR * ap, void * p, size_t * l) (a0,a1,a2)
int BIO_ADDR_rawmake(BIO_ADDR * ap, int family, const void * where, size_t wherelen, unsigned short port) (a0,d0,a1,d1,d2)
unsigned short BIO_ADDR_rawport(const BIO_ADDR * ap) (a0)
char * BIO_ADDR_service_string(const BIO_ADDR * ap, int numeric) (a0,d0)
const BIO_ADDR * BIO_ADDRINFO_address(const BIO_ADDRINFO * bai) (a0)
int BIO_ADDRINFO_family(const BIO_ADDRINFO * bai) (a0)
void BIO_ADDRINFO_free(BIO_ADDRINFO * bai) (a0)
const BIO_ADDRINFO * BIO_ADDRINFO_next(const BIO_ADDRINFO * bai) (a0)
int BIO_ADDRINFO_protocol(const BIO_ADDRINFO * bai) (a0)
int BIO_ADDRINFO_socktype(const BIO_ADDRINFO * bai) (a0)
int BIO_closesocket(int sock) (d0)
int BIO_connect(int sock, const BIO_ADDR * addr, int options) (d0,a0,d1)
int BIO_listen(int sock, const BIO_ADDR * addr, int options) (d0,a0,d1)
int BIO_lookup(const char * host, const char * service, enum BIO_lookup_type lookup_type, int family, int socktype, BIO_ADDRINFO ** res) (a0,a1,d0,d1,d2,a2)
int BIO_parse_hostserv(const char * hostserv, char ** host, char ** service, enum BIO_hostserv_priorities hostserv_prio) (a0,a1,a2,d0)
const BIO_METHOD * BIO_s_secmem() ()
int BIO_sock_info(int sock, enum BIO_sock_info_type type, union BIO_sock_info_u * info) (d0,d1,a0)
int BIO_socket(int domain, int socktype, int protocol, int options) (d0,d1,d2,d3)
int BN_abs_is_word(const BIGNUM * a, const BN_ULONG w) (a0,d0)
int BN_bn2binpad(const BIGNUM * a, unsigned char * to, int tolen) (a0,a1,d0)
int BN_bn2lebinpad(const BIGNUM * a, unsigned char * to, int tolen) (a0,a1,d0)
BN_CTX * BN_CTX_secure_new() ()
void BN_GENCB_free(BN_GENCB * cb) (a0)
void * BN_GENCB_get_arg(BN_GENCB * cb) (a0)
BN_GENCB * BN_GENCB_new() ()
void BN_GENCB_set(BN_GENCB * gencb, int (*callback)(int, int, BN_GENCB *), void * cb_arg) (a0,a1,a2)
void BN_GENCB_set_old(BN_GENCB * gencb, void (*callback)(int, int, void *), void * cb_arg) (a0,a1,a2)
int BN_generate_dsa_nonce(BIGNUM * out, const BIGNUM * range, const BIGNUM * priv, const unsigned char * message, size_t message_len, BN_CTX * ctx) (a0,a1,a2,a3,d0,d1)
int BN_get_flags(const BIGNUM * b, int n) (a0,d0)
int BN_is_negative(const BIGNUM * a) (a0)
int BN_is_odd(const BIGNUM * a) (a0)
int BN_is_one(const BIGNUM * a) (a0)
int BN_is_word(const BIGNUM * a, const BN_ULONG w) (a0,d0)
int BN_is_zero(const BIGNUM * a) (a0)
BIGNUM * BN_lebin2bn(const unsigned char * s, int len, BIGNUM * ret) (a0,d0,a1)
int (*)(BIGNUM *, const BIGNUM *, const BIGNUM *, BN_CTX *) BN_nist_mod_func(const BIGNUM * p) (a0)
BIGNUM * BN_secure_new() ()
int BN_security_bits(int L, int N) (d0,d1)
void BN_set_flags(BIGNUM * b, int n) (a0,d0)
int BN_to_montgomery(BIGNUM * r, const BIGNUM * a, BN_MONT_CTX * mont, BN_CTX * ctx) (a0,a1,a2,a3)
void BN_with_flags(BIGNUM * dest, const BIGNUM * b, int flags) (a0,a1,d0)
void BN_zero_ex(BIGNUM * a) (a0)
BUF_MEM * BUF_MEM_new_ex(unsigned long flags) (d0)
const COMP_METHOD * COMP_CTX_get_method(const COMP_CTX * ctx) (a0)
int COMP_CTX_get_type(const COMP_CTX * ctx) (a0)
const char * COMP_get_name(const COMP_METHOD * meth) (a0)
int COMP_get_type(const COMP_METHOD * meth) (a0)
void CRYPTO_clear_free(void * str, size_t num, const char * file, int line) (a0,d0,a1,d1)
void * CRYPTO_clear_realloc(void * str, size_t old_len, size_t num, const char * file, int line) (a0,d0,d1,a1,d2)
int CRYPTO_free_ex_index(int class_index, int idx) (d0,d1)
void * CRYPTO_memdup(const void * data, size_t siz, const char * file, int line) (a0,d0,a1,d1)
size_t CRYPTO_secure_actual_size(void * ptr) (a0)
int CRYPTO_secure_allocated(const void * ptr) (a0)
void CRYPTO_secure_free(void * ptr, const char * file, int line) (a0,a1,d0)
void * CRYPTO_secure_malloc(size_t num, const char * file, int line) (d0,a0,d1)
int CRYPTO_secure_malloc_done() ()
int CRYPTO_secure_malloc_init(size_t sz, size_t minsize) (d0,d1)
int CRYPTO_secure_malloc_initialized() ()
size_t CRYPTO_secure_used() ()
void * CRYPTO_secure_zalloc(size_t num, const char * file, int line) (d0,a0,d1)
==reserve 1
char * CRYPTO_strndup(const char * str, size_t s, const char * file, int line) (a0,d0,a1,d1)
void * CRYPTO_zalloc(size_t num, const char * file, int line) (d0,a0,d1)
int OPENSSL_atexit(void (*handler)(void)) (a0)
void OPENSSL_cleanup() ()
int OPENSSL_init_crypto(uint64_t opts, const OPENSSL_INIT_SETTINGS * settings) (d0-d1,a0)
void OPENSSL_INIT_free(OPENSSL_INIT_SETTINGS * settings) (a0)
OPENSSL_INIT_SETTINGS * OPENSSL_INIT_new() ()
==reserve 1
size_t OPENSSL_strlcat(char * dst, const char * src, size_t size) (a0,a1,d0)
size_t OPENSSL_strlcpy(char * dst, const char * src, size_t size) (a0,a1,d0)
size_t OPENSSL_strnlen(const char * str, size_t maxlen) (a0,d0)
void OPENSSL_thread_stop() ()
const char * OpenSSL_version(int type) (d0)
unsigned long OpenSSL_version_num() ()
int DH_bits(const DH * dh) (a0)
int DH_security_bits(const DH * dh) (a0)
int DSA_security_bits(const DSA * d) (a0)
const BIGNUM * EC_GROUP_get0_cofactor(const EC_GROUP * group) (a0)
const BIGNUM * EC_GROUP_get0_order(const EC_GROUP * group) (a0)
int EC_GROUP_order_bits(const EC_GROUP * group) (a0)
const EC_KEY_METHOD * EC_KEY_get_default_method() ()
void * EC_KEY_get_ex_data(const EC_KEY * key, int idx) (a0,d0)
const EC_KEY_METHOD * EC_KEY_get_method(const EC_KEY * key) (a0)
size_t EC_KEY_key2buf(const EC_KEY * key, point_conversion_form_t form, unsigned char ** pbuf, BN_CTX * ctx) (a0,d0,a1,a2)
void EC_KEY_METHOD_free(EC_KEY_METHOD * meth) (a0)
void EC_KEY_METHOD_get_compute_key(const EC_KEY_METHOD * meth, int (**pck)(unsigned char **, size_t *, const EC_POINT *, const EC_KEY *)) (a0,a1)
void EC_KEY_METHOD_get_init(const EC_KEY_METHOD * meth, int (**pinit)(EC_KEY *), void (**pfinish)(EC_KEY *), int (**pcopy)(EC_KEY *, const EC_KEY *), int (**pset_group)(EC_KEY *, const EC_GROUP *), int (**pset_private)(EC_KEY *, const BIGNUM *), int (**pset_public)(EC_KEY *, const EC_POINT *)) (a0,a1,a2,a3,d0,d1,d2)
void EC_KEY_METHOD_get_keygen(const EC_KEY_METHOD * meth, int (**pkeygen)(EC_KEY *)) (a0,a1)
void EC_KEY_METHOD_get_sign(const EC_KEY_METHOD * meth, int (**psign)(int, const unsigned char *, int, unsigned char *, unsigned int *, const BIGNUM *, const BIGNUM *, EC_KEY *), int (**psign_setup)(EC_KEY *, BN_CTX *, BIGNUM **, BIGNUM **), ECDSA_SIG * (**psign_sig)(const unsigned char *, int, const BIGNUM *, const BIGNUM *, EC_KEY *)) (a0,a1,a2,a3)
void EC_KEY_METHOD_get_verify(const EC_KEY_METHOD * meth, int (**pverify)(int, const unsigned char *, int, const unsigned char *, int, EC_KEY *), int (**pverify_sig)(const unsigned char *, int, const ECDSA_SIG *, EC_KEY *)) (a0,a1,a2)
EC_KEY_METHOD * EC_KEY_METHOD_new(const EC_KEY_METHOD * meth) (a0)
void EC_KEY_METHOD_set_compute_key(EC_KEY_METHOD * meth, int (*ckey)(unsigned char **, size_t *, const EC_POINT *, const EC_KEY *)) (a0,a1)
void EC_KEY_METHOD_set_init(EC_KEY_METHOD * meth, int (*init)(EC_KEY *), void (*finish)(EC_KEY *), int (*copy)(EC_KEY *, const EC_KEY *), int (*set_group)(EC_KEY *, const EC_GROUP *), int (*set_private)(EC_KEY *, const BIGNUM *), int (*set_public)(EC_KEY *, const EC_POINT *)) (a0,a1,a2,a3,d0,d1,d2)
void EC_KEY_METHOD_set_keygen(EC_KEY_METHOD * meth, int (*keygen)(EC_KEY *)) (a0,a1)
void EC_KEY_METHOD_set_sign(EC_KEY_METHOD * meth, int (*sign)(int, const unsigned char *, int, unsigned char *, unsigned int *, const BIGNUM *, const BIGNUM *, EC_KEY *), int (*sign_setup)(EC_KEY *, BN_CTX *, BIGNUM **, BIGNUM **), ECDSA_SIG * (*sign_sig)(const unsigned char *, int, const BIGNUM *, const BIGNUM *, EC_KEY *)) (a0,a1,a2,a3)
void EC_KEY_METHOD_set_verify(EC_KEY_METHOD * meth, int (*verify)(int, const unsigned char *, int, const unsigned char *, int, EC_KEY *), int (*verify_sig)(const unsigned char *, int, const ECDSA_SIG *, EC_KEY *)) (a0,a1,a2)
EC_KEY * EC_KEY_new_method(ENGINE * engine) (a0)
int EC_KEY_oct2key(EC_KEY * key, const unsigned char * buf, size_t len, BN_CTX * ctx) (a0,a1,d0,a2)
int EC_KEY_oct2priv(EC_KEY * key, const unsigned char * buf, size_t len) (a0,a1,d0)
const EC_KEY_METHOD * EC_KEY_OpenSSL() ()
size_t EC_KEY_priv2buf(const EC_KEY * eckey, unsigned char ** pbuf) (a0,a1)
size_t EC_KEY_priv2oct(const EC_KEY * eckey, unsigned char * buf, size_t len) (a0,a1,d0)
void EC_KEY_set_default_method(const EC_KEY_METHOD * meth) (a0)
int EC_KEY_set_ex_data(EC_KEY * key, int idx, void * arg) (a0,d0,a1)
int EC_KEY_set_method(EC_KEY * key, const EC_KEY_METHOD * meth) (a0,a1)
size_t EC_POINT_point2buf(const EC_GROUP * group, const EC_POINT * point, point_conversion_form_t form, unsigned char ** pbuf, BN_CTX * ctx) (a0,a1,d0,a2,a3)
void ECDSA_SIG_get0(const ECDSA_SIG * sig, const BIGNUM ** pr, const BIGNUM ** ps) (a0,a1,a2)
ENGINE * ENGINE_get_default_EC() ()
const EC_KEY_METHOD * ENGINE_get_EC(const ENGINE * e) (a0)
void ENGINE_register_all_EC() ()
int ENGINE_register_EC(ENGINE * e) (a0)
int ENGINE_set_default_EC(ENGINE * e) (a0)
int ENGINE_set_EC(ENGINE * e, const EC_KEY_METHOD * ecdsa_meth) (a0,a1)
void ENGINE_unregister_EC(ENGINE * e) (a0)
const EVP_CIPHER * EVP_aes_128_ocb() ()
const EVP_CIPHER * EVP_aes_128_wrap_pad() ()
const EVP_CIPHER * EVP_aes_192_ocb() ()
const EVP_CIPHER * EVP_aes_192_wrap_pad() ()
const EVP_CIPHER * EVP_aes_256_ocb() ()
const EVP_CIPHER * EVP_aes_256_wrap_pad() ()
const EVP_CIPHER * EVP_camellia_128_ctr() ()
const EVP_CIPHER * EVP_camellia_192_ctr() ()
const EVP_CIPHER * EVP_camellia_256_ctr() ()
const EVP_CIPHER * EVP_chacha20() ()
const EVP_CIPHER * EVP_chacha20_poly1305() ()
unsigned char * EVP_CIPHER_CTX_buf_noconst(EVP_CIPHER_CTX * ctx) (a0)
void * EVP_CIPHER_CTX_get_cipher_data(const EVP_CIPHER_CTX * ctx) (a0)
void * EVP_CIPHER_CTX_set_cipher_data(EVP_CIPHER_CTX * ctx, void * cipher_data) (a0,a1)
int EVP_CIPHER_CTX_is_encrypting(const EVP_CIPHER_CTX * ctx) (a0)
const unsigned char * EVP_CIPHER_CTX_iv(const EVP_CIPHER_CTX * ctx) (a0)
unsigned char * EVP_CIPHER_CTX_iv_noconst(EVP_CIPHER_CTX * ctx) (a0)
int EVP_CIPHER_CTX_get_num(const EVP_CIPHER_CTX * ctx) (a0)
const unsigned char * EVP_CIPHER_CTX_original_iv(const EVP_CIPHER_CTX * ctx) (a0)
int EVP_CIPHER_CTX_reset(EVP_CIPHER_CTX * ctx) (a0)
int EVP_CIPHER_CTX_set_num(EVP_CIPHER_CTX * ctx, int num) (a0,d0)
int EVP_CIPHER_impl_ctx_size(const EVP_CIPHER * cipher) (a0)
EVP_CIPHER * EVP_CIPHER_meth_dup(const EVP_CIPHER * cipher) (a0)
void EVP_CIPHER_meth_free(EVP_CIPHER * cipher) (a0)
int (*)(EVP_CIPHER_CTX *) EVP_CIPHER_meth_get_cleanup(const EVP_CIPHER * cipher) (a0)
int (*)(EVP_CIPHER_CTX *, int, int, void *) EVP_CIPHER_meth_get_ctrl(const EVP_CIPHER * cipher) (a0)
int (*)(EVP_CIPHER_CTX *, unsigned char *, const unsigned char *, size_t) EVP_CIPHER_meth_get_do_cipher(const EVP_CIPHER * cipher) (a0)
int (*)(EVP_CIPHER_CTX *, ASN1_TYPE *) EVP_CIPHER_meth_get_get_asn1_params(const EVP_CIPHER * cipher) (a0)
int (*)(EVP_CIPHER_CTX *, const unsigned char *, const unsigned char *, int) EVP_CIPHER_meth_get_init(const EVP_CIPHER * cipher) (a0)
int (*)(EVP_CIPHER_CTX *, ASN1_TYPE *) EVP_CIPHER_meth_get_set_asn1_params(const EVP_CIPHER * cipher) (a0)
EVP_CIPHER * EVP_CIPHER_meth_new(int cipher_type, int block_size, int key_len) (d0,d1,d2)
int EVP_CIPHER_meth_set_cleanup(EVP_CIPHER * cipher, int (*cleanup)(EVP_CIPHER_CTX *)) (a0,a1)
int EVP_CIPHER_meth_set_ctrl(EVP_CIPHER * cipher, int (*ctrl)(EVP_CIPHER_CTX *, int, int, void *)) (a0,a1)
int EVP_CIPHER_meth_set_do_cipher(EVP_CIPHER * cipher, int (*do_cipher)(EVP_CIPHER_CTX *, unsigned char *, const unsigned char *, size_t)) (a0,a1)
int EVP_CIPHER_meth_set_flags(EVP_CIPHER * cipher, unsigned long flags) (a0,d0)
int EVP_CIPHER_meth_set_get_asn1_params(EVP_CIPHER * cipher, int (*get_asn1_parameters)(EVP_CIPHER_CTX *, ASN1_TYPE *)) (a0,a1)
int EVP_CIPHER_meth_set_impl_ctx_size(EVP_CIPHER * cipher, int ctx_size) (a0,d0)
int EVP_CIPHER_meth_set_init(EVP_CIPHER * cipher, int (*init)(EVP_CIPHER_CTX *, const unsigned char *, const unsigned char *, int)) (a0,a1)
int EVP_CIPHER_meth_set_iv_length(EVP_CIPHER * cipher, int iv_len) (a0,d0)
int EVP_CIPHER_meth_set_set_asn1_params(EVP_CIPHER * cipher, int (*set_asn1_parameters)(EVP_CIPHER_CTX *, ASN1_TYPE *)) (a0,a1)
void EVP_ENCODE_CTX_free(EVP_ENCODE_CTX * ctx) (a0)
EVP_ENCODE_CTX * EVP_ENCODE_CTX_new() ()
int EVP_ENCODE_CTX_num(EVP_ENCODE_CTX * ctx) (a0)
const EVP_MD * EVP_md5_sha1() ()
int EVP_MD_CTX_ctrl(EVP_MD_CTX * ctx, int cmd, int p1, void * p2) (a0,d0,d1,a1)
void EVP_MD_CTX_free(EVP_MD_CTX * ctx) (a0)
void * EVP_MD_CTX_get0_md_data(const EVP_MD_CTX * ctx) (a0)
EVP_MD_CTX * EVP_MD_CTX_new() ()
EVP_PKEY_CTX * EVP_MD_CTX_get_pkey_ctx(const EVP_MD_CTX * ctx) (a0)
int EVP_MD_CTX_reset(EVP_MD_CTX * ctx) (a0)
void EVP_MD_CTX_set_update_fn(EVP_MD_CTX * ctx, int (*update)(EVP_MD_CTX *, const void *, size_t)) (a0,a1)
int (*)(EVP_MD_CTX *, const void *, size_t) EVP_MD_CTX_update_fn(EVP_MD_CTX * ctx) (a0)
EVP_MD * EVP_MD_meth_dup(const EVP_MD * md) (a0)
void EVP_MD_meth_free(EVP_MD * md) (a0)
int EVP_MD_meth_get_app_datasize(const EVP_MD * md) (a0)
int (*)(EVP_MD_CTX *) EVP_MD_meth_get_cleanup(const EVP_MD * md) (a0)
int (*)(EVP_MD_CTX *, const EVP_MD_CTX *) EVP_MD_meth_get_copy(const EVP_MD * md) (a0)
int (*)(EVP_MD_CTX *, int, int, void *) EVP_MD_meth_get_ctrl(const EVP_MD * md) (a0)
int (*)(EVP_MD_CTX *, unsigned char *) EVP_MD_meth_get_final(const EVP_MD * md) (a0)
unsigned long EVP_MD_meth_get_flags(const EVP_MD * md) (a0)
int (*)(EVP_MD_CTX *) EVP_MD_meth_get_init(const EVP_MD * md) (a0)
int EVP_MD_meth_get_input_blocksize(const EVP_MD * md) (a0)
int EVP_MD_meth_get_result_size(const EVP_MD * md) (a0)
int (*)(EVP_MD_CTX *, const void *, size_t) EVP_MD_meth_get_update(const EVP_MD * md) (a0)
EVP_MD * EVP_MD_meth_new(int md_type, int pkey_type) (d0,d1)
int EVP_MD_meth_set_app_datasize(EVP_MD * md, int datasize) (a0,d0)
int EVP_MD_meth_set_cleanup(EVP_MD * md, int (*cleanup)(EVP_MD_CTX *)) (a0,a1)
int EVP_MD_meth_set_copy(EVP_MD * md, int (*copy)(EVP_MD_CTX *, const EVP_MD_CTX *)) (a0,a1)
int EVP_MD_meth_set_ctrl(EVP_MD * md, int (*ctrl)(EVP_MD_CTX *, int, int, void *)) (a0,a1)
int EVP_MD_meth_set_final(EVP_MD * md, int (*final)(EVP_MD_CTX *, unsigned char *)) (a0,a1)
int EVP_MD_meth_set_flags(EVP_MD * md, unsigned long flags) (a0,d0)
int EVP_MD_meth_set_init(EVP_MD * md, int (*init)(EVP_MD_CTX *)) (a0,a1)
int EVP_MD_meth_set_input_blocksize(EVP_MD * md, int blocksize) (a0,d0)
int EVP_MD_meth_set_result_size(EVP_MD * md, int resultsize) (a0,d0)
int EVP_MD_meth_set_update(EVP_MD * md, int (*update)(EVP_MD_CTX *, const void *, size_t)) (a0,a1)
int EVP_PBE_get(int * ptype, int * ppbe_nid, size_t num) (a0,a1,d0)
int OBSOLETE_EVP_PBE_scrypt(const char * pass, size_t passlen, const unsigned char * salt, size_t saltlen, unsigned long N, unsigned long r, unsigned long p, uint64_t maxmem, unsigned char * key, size_t keylen) (a0,d0,a1,d1,d2,d3,d4,d5-d6,a2,a3)
void EVP_PKEY_asn1_set_security_bits(EVP_PKEY_ASN1_METHOD * ameth, int (*pkey_security_bits)(const EVP_PKEY *)) (a0,a1)
const DH * EVP_PKEY_get0_DH(const EVP_PKEY * pkey) (a0)
const DSA * EVP_PKEY_get0_DSA(const EVP_PKEY * pkey) (a0)
const EC_KEY * EVP_PKEY_get0_EC_KEY(const EVP_PKEY * pkey) (a0)
const RSA * EVP_PKEY_get0_RSA(const EVP_PKEY * pkey) (a0)
void EVP_PKEY_meth_get_cleanup(const EVP_PKEY_METHOD * pmeth, void (**pcleanup)(EVP_PKEY_CTX *)) (a0,a1)
void EVP_PKEY_meth_get_copy(const EVP_PKEY_METHOD * pmeth, int (**pcopy)(EVP_PKEY_CTX *, const EVP_PKEY_CTX *)) (a0,a1)
void EVP_PKEY_meth_get_ctrl(const EVP_PKEY_METHOD * pmeth, int (**pctrl)(EVP_PKEY_CTX *, int, int, void *), int (**pctrl_str)(EVP_PKEY_CTX *, const char *, const char *)) (a0,a1,a2)
void EVP_PKEY_meth_get_decrypt(const EVP_PKEY_METHOD * pmeth, int (**pdecrypt_init)(EVP_PKEY_CTX *), int (**pdecrypt)(EVP_PKEY_CTX *, unsigned char *, size_t *, const unsigned char *, size_t)) (a0,a1,a2)
void EVP_PKEY_meth_get_derive(const EVP_PKEY_METHOD * pmeth, int (**pderive_init)(EVP_PKEY_CTX *), int (**pderive)(EVP_PKEY_CTX *, unsigned char *, size_t *)) (a0,a1,a2)
void EVP_PKEY_meth_get_encrypt(const EVP_PKEY_METHOD * pmeth, int (**pencrypt_init)(EVP_PKEY_CTX *), int (**pencryptfn)(EVP_PKEY_CTX *, unsigned char *, size_t *, const unsigned char *, size_t)) (a0,a1,a2)
void EVP_PKEY_meth_get_init(const EVP_PKEY_METHOD * pmeth, int (**pinit)(EVP_PKEY_CTX *)) (a0,a1)
void EVP_PKEY_meth_get_keygen(const EVP_PKEY_METHOD * pmeth, int (**pkeygen_init)(EVP_PKEY_CTX *), int (**pkeygen)(EVP_PKEY_CTX *, EVP_PKEY *)) (a0,a1,a2)
void EVP_PKEY_meth_get_paramgen(const EVP_PKEY_METHOD * pmeth, int (**pparamgen_init)(EVP_PKEY_CTX *), int (**pparamgen)(EVP_PKEY_CTX *, EVP_PKEY *)) (a0,a1,a2)
void EVP_PKEY_meth_get_sign(const EVP_PKEY_METHOD * pmeth, int (**psign_init)(EVP_PKEY_CTX *), int (**psign)(EVP_PKEY_CTX *, unsigned char *, size_t *, const unsigned char *, size_t)) (a0,a1,a2)
void EVP_PKEY_meth_get_signctx(const EVP_PKEY_METHOD * pmeth, int (**psignctx_init)(EVP_PKEY_CTX *, EVP_MD_CTX *), int (**psignctx)(EVP_PKEY_CTX *, unsigned char *, size_t *, EVP_MD_CTX *)) (a0,a1,a2)
void EVP_PKEY_meth_get_verify(const EVP_PKEY_METHOD * pmeth, int (**pverify_init)(EVP_PKEY_CTX *), int (**pverify)(EVP_PKEY_CTX *, const unsigned char *, size_t, const unsigned char *, size_t)) (a0,a1,a2)
void EVP_PKEY_meth_get_verify_recover(const EVP_PKEY_METHOD * pmeth, int (**pverify_recover_init)(EVP_PKEY_CTX *), int (**pverify_recover)(EVP_PKEY_CTX *, unsigned char *, size_t *, const unsigned char *, size_t)) (a0,a1,a2)
void EVP_PKEY_meth_get_verifyctx(const EVP_PKEY_METHOD * pmeth, int (**pverifyctx_init)(EVP_PKEY_CTX *, EVP_MD_CTX *), int (**pverifyctx)(EVP_PKEY_CTX *, const unsigned char *, int, EVP_MD_CTX *)) (a0,a1,a2)
int EVP_PKEY_get_security_bits(const EVP_PKEY * pkey) (a0)
int EVP_PKEY_up_ref(EVP_PKEY * pkey) (a0)
int PKCS5_v2_scrypt_keyivgen(EVP_CIPHER_CTX * ctx, const char * pass, int passlen, ASN1_TYPE * param, const EVP_CIPHER * c, const EVP_MD * md, int en_de) (a0,a1,d0,a2,a3,d1,d2)
void HMAC_CTX_free(HMAC_CTX * ctx) (a0)
HMAC_CTX * HMAC_CTX_new() ()
int HMAC_CTX_reset(HMAC_CTX * ctx) (a0)
size_t HMAC_size(const HMAC_CTX * ctx) (a0)
int OPENSSL_LH_error(OPENSSL_LHASH * lh) (a0)
unsigned long OPENSSL_LH_get_down_load(const OPENSSL_LHASH * lh) (a0)
void OPENSSL_LH_set_down_load(OPENSSL_LHASH * lh, unsigned long down_load) (a0,d0)
size_t CRYPTO_128_unwrap_pad(void * key, const unsigned char * icv, unsigned char * out, const unsigned char * in, size_t inlen, block128_f block) (a0,a1,a2,a3,d0,d1)
size_t CRYPTO_128_wrap_pad(void * key, const unsigned char * icv, unsigned char * out, const unsigned char * in, size_t inlen, block128_f block) (a0,a1,a2,a3,d0,d1)
int CRYPTO_ocb128_aad(OCB128_CONTEXT * ctx, const unsigned char * aad, size_t len) (a0,a1,d0)
void CRYPTO_ocb128_cleanup(OCB128_CONTEXT * ctx) (a0)
int CRYPTO_ocb128_copy_ctx(OCB128_CONTEXT * dest, OCB128_CONTEXT * src, void * keyenc, void * keydec) (a0,a1,a2,a3)
int CRYPTO_ocb128_decrypt(OCB128_CONTEXT * ctx, const unsigned char * in, unsigned char * out, size_t len) (a0,a1,a2,d0)
int CRYPTO_ocb128_encrypt(OCB128_CONTEXT * ctx, const unsigned char * in, unsigned char * out, size_t len) (a0,a1,a2,d0)
int CRYPTO_ocb128_finish(OCB128_CONTEXT * ctx, const unsigned char * tag, size_t len) (a0,a1,d0)
int CRYPTO_ocb128_init(OCB128_CONTEXT * ctx, void * keyenc, void * keydec, block128_f encrypt, block128_f decrypt, ocb128_f stream) (a0,a1,a2,d0,d1,d2)
OCB128_CONTEXT * CRYPTO_ocb128_new(void * keyenc, void * keydec, block128_f encrypt, block128_f decrypt, ocb128_f stream) (a0,a1,d0,d1,d2)
int CRYPTO_ocb128_setiv(OCB128_CONTEXT * ctx, const unsigned char * iv, size_t len, size_t taglen) (a0,a1,d0,d1)
int CRYPTO_ocb128_tag(OCB128_CONTEXT * ctx, unsigned char * tag, size_t len) (a0,a1,d0)
const unsigned char * OBJ_get0_data(const ASN1_OBJECT * obj) (a0)
size_t OBJ_length(const ASN1_OBJECT * obj) (a0)
const ASN1_GENERALIZEDTIME * OCSP_resp_get0_produced_at(const OCSP_BASICRESP * bs) (a0)
const ASN1_OCTET_STRING * OCSP_resp_get0_signature(const OCSP_BASICRESP * bs) (a0)
const OCSP_CERTID * OCSP_SINGLERESP_get0_id(const OCSP_SINGLERESP * bs) (a0)
void PKCS12_get0_mac(const ASN1_OCTET_STRING ** pmac, const X509_ALGOR ** pmacalg, const ASN1_OCTET_STRING ** psalt, const ASN1_INTEGER ** piter, const PKCS12 * p12) (a0,a1,a2,a3,d0)
int PKCS12_mac_present(const PKCS12 * p12) (a0)
PKCS12_SAFEBAG * PKCS12_SAFEBAG_create0_p8inf(PKCS8_PRIV_KEY_INFO * p8) (a0)
PKCS12_SAFEBAG * PKCS12_SAFEBAG_create0_pkcs8(X509_SIG * p8) (a0)
PKCS12_SAFEBAG * PKCS12_SAFEBAG_create_cert(X509 * x509) (a0)
PKCS12_SAFEBAG * PKCS12_SAFEBAG_create_crl(X509_CRL * crl) (a0)
PKCS12_SAFEBAG * PKCS12_SAFEBAG_create_pkcs8_encrypt(int pbe_nid, const char * pass, int passlen, unsigned char * salt, int saltlen, int iter, PKCS8_PRIV_KEY_INFO * p8inf) (d0,a0,d1,a1,d2,d3,a2)
const ASN1_TYPE * PKCS12_SAFEBAG_get0_attr(const PKCS12_SAFEBAG * bag, int attr_nid) (a0,d0)
const STACK_OF(X509_ATTRIBUTE) * PKCS12_SAFEBAG_get0_attrs(const PKCS12_SAFEBAG * bag) (a0)
const PKCS8_PRIV_KEY_INFO * PKCS12_SAFEBAG_get0_p8inf(const PKCS12_SAFEBAG * bag) (a0)
const X509_SIG * PKCS12_SAFEBAG_get0_pkcs8(const PKCS12_SAFEBAG * bag) (a0)
const STACK_OF(PKCS12_SAFEBAG) * PKCS12_SAFEBAG_get0_safes(const PKCS12_SAFEBAG * bag) (a0)
const ASN1_OBJECT * PKCS12_SAFEBAG_get0_type(const PKCS12_SAFEBAG * bag) (a0)
X509 * PKCS12_SAFEBAG_get1_cert(const PKCS12_SAFEBAG * bag) (a0)
X509_CRL * PKCS12_SAFEBAG_get1_crl(const PKCS12_SAFEBAG * bag) (a0)
int PKCS12_SAFEBAG_get_bag_nid(const PKCS12_SAFEBAG * bag) (a0)
int PKCS12_SAFEBAG_get_nid(const PKCS12_SAFEBAG * bag) (a0)
ASN1_TYPE * PKCS8_get_attr(PKCS8_PRIV_KEY_INFO * p8, int attr_nid) (a0,d0)
X509_SIG * PKCS8_set0_pbe(const char * pass, int passlen, PKCS8_PRIV_KEY_INFO * p8inf, X509_ALGOR * pbe) (a0,d0,a1,a2)
RAND_METHOD * RAND_OpenSSL() ()
int RSA_bits(const RSA * r) (a0)
int RSA_check_key_ex(const RSA * key, BN_GENCB * cb) (a0,a1)
const RSA_METHOD * RSA_PKCS1_OpenSSL() ()
int RSA_security_bits(const RSA * rsa) (a0)
int OBSOLETE_RSA_X931_derive_ex(RSA * rsa, BIGNUM * p1, BIGNUM * p2, BIGNUM * q1, BIGNUM * q2, const BIGNUM * Xp1, const BIGNUM * Xp2, const BIGNUM * Xp, const BIGNUM * Xq1, const BIGNUM * Xq2, const BIGNUM * Xq, const BIGNUM * e, BN_GENCB * cb) (a0,a1,a2,a3,d0,d1,d2,d3,d4,d5,d6,d7,a4)
int RSA_X931_generate_key_ex(RSA * rsa, int bits, const BIGNUM * e, BN_GENCB * cb) (a0,d0,a1,d1)
int TS_CONF_set_signer_digest(CONF * conf, const char * section, const char * md, TS_RESP_CTX * ctx) (a0,a1,a2,a3)
int TS_RESP_CTX_set_signer_digest(TS_RESP_CTX * ctx, const EVP_MD * md) (a0,a1)
const ASN1_BIT_STRING * TS_STATUS_INFO_get0_failure_info(const TS_STATUS_INFO * a) (a0)
const ASN1_INTEGER * TS_STATUS_INFO_get0_status(const TS_STATUS_INFO * a) (a0)
int TS_STATUS_INFO_set_status(TS_STATUS_INFO * a, int i) (a0,d0)
int TS_VERIFY_CTX_add_flags(TS_VERIFY_CTX * ctx, int f) (a0,d0)
BIO * TS_VERIFY_CTX_set_data(TS_VERIFY_CTX * ctx, BIO * b) (a0,a1)
int TS_VERIFY_CTX_set_flags(TS_VERIFY_CTX * ctx, int f) (a0,d0)
unsigned char * TS_VERIFY_CTX_set_imprint(TS_VERIFY_CTX * ctx, unsigned char * hexstr, long len) (a0,a1,d0)
X509_STORE * TS_VERIFY_CTX_set_store(TS_VERIFY_CTX * ctx, X509_STORE * s) (a0,a1)
STACK_OF(X509) * TS_VERIFY_CTX_set_certs(TS_VERIFY_CTX * ctx, STACK_OF(X509) * certs) (a0,a1)
int i2d_re_X509_CRL_tbs(X509_CRL * req, unsigned char ** pp) (a0,a1)
int i2d_re_X509_REQ_tbs(X509_REQ * req, unsigned char ** pp) (a0,a1)
X509_ALGOR * PKCS5_pbe2_set_scrypt(const EVP_CIPHER * cipher, const unsigned char * salt, int saltlen, unsigned char * aiv, uint64_t N, uint64_t r, uint64_t p) (a0,a1,d0,a2,d2-d3,d4-d5,d6-d7)
==reserve 1
const STACK_OF(X509_EXTENSION) * X509_CRL_get0_extensions(const X509_CRL * crl) (a0)
void X509_CRL_get0_signature(const X509_CRL * crl, const ASN1_BIT_STRING ** psig, const X509_ALGOR ** palg) (a0,a1,a2)
X509_NAME * X509_CRL_get_issuer(const X509_CRL * crl) (a0)
ASN1_TIME * X509_CRL_get_lastUpdate(X509_CRL * crl) (a0)
ASN1_TIME * X509_CRL_get_nextUpdate(X509_CRL * crl) (a0)
STACK_OF(X509_REVOKED) * X509_CRL_get_REVOKED(X509_CRL * crl) (a0)
int X509_CRL_get_signature_nid(const X509_CRL * crl) (a0)
long X509_CRL_get_version(const X509_CRL * crl) (a0)
int X509_CRL_up_ref(X509_CRL * crl) (a0)
const STACK_OF(X509_EXTENSION) * X509_get0_extensions(const X509 * x) (a0)
EVP_PKEY * X509_get0_pubkey(const X509 * x) (a0)
STACK_OF(ASN1_OBJECT) * X509_get0_reject_objects(X509 * x) (a0)
const X509_ALGOR * X509_get0_tbs_sigalg(const X509 * x) (a0)
STACK_OF(ASN1_OBJECT) * X509_get0_trust_objects(X509 * x) (a0)
void X509_get0_uids(const X509 * x, const ASN1_BIT_STRING ** piuid, const ASN1_BIT_STRING ** psuid) (a0,a1,a2)
ASN1_TIME * X509_getm_notAfter(const X509 * x) (a0)
ASN1_TIME * X509_getm_notBefore(const X509 * x) (a0)
int X509_get_signature_type(const X509 * x) (a0)
long X509_get_version(const X509 * x) (a0)
X509_PUBKEY * X509_get_X509_PUBKEY(const X509 * x) (a0)
int X509_NAME_ENTRY_set(const X509_NAME_ENTRY * ne) (a0)
int X509_NAME_get0_der(const X509_NAME * nm, const unsigned char ** pder, size_t * pderlen) (a0,a1,a2)
EVP_PKEY * X509_PUBKEY_get0(const X509_PUBKEY * key) (a0)
void X509_REQ_get0_signature(const X509_REQ * req, const ASN1_BIT_STRING ** psig, const X509_ALGOR ** palg) (a0,a1,a2)
int X509_REQ_get_signature_nid(const X509_REQ * req) (a0)
X509_NAME * X509_REQ_get_subject_name(const X509_REQ * req) (a0)
long X509_REQ_get_version(const X509_REQ * req) (a0)
X509_PUBKEY * X509_REQ_get_X509_PUBKEY(X509_REQ * req) (a0)
const STACK_OF(X509_EXTENSION) * X509_REVOKED_get0_extensions(const X509_REVOKED * r) (a0)
const ASN1_TIME * X509_REVOKED_get0_revocationDate(const X509_REVOKED * x) (a0)
const ASN1_INTEGER * X509_REVOKED_get0_serialNumber(const X509_REVOKED * x) (a0)
int X509_trusted(const X509 * x) (a0)
int X509_up_ref(X509 * x) (a0)
int X509_STORE_CTX_get_num_untrusted(const X509_STORE_CTX * ctx) (a0)
void X509_STORE_CTX_set0_dane(X509_STORE_CTX * ctx, SSL_DANE * dane) (a0,a1)
void X509_VERIFY_PARAM_move_peername(X509_VERIFY_PARAM * to, X509_VERIFY_PARAM * from) (a0,a1)
char * i2s_ASN1_IA5STRING(X509V3_EXT_METHOD * method, ASN1_IA5STRING * ia5) (a0,a1)
ASN1_IA5STRING * s2i_ASN1_IA5STRING(X509V3_EXT_METHOD * method, X509V3_CTX * ctx, const char * str) (a0,a1,a2)
int X509v3_addr_add_inherit(IPAddrBlocks * addr, const unsigned afi, const unsigned * safi) (a0,d0,a1)
int X509v3_addr_add_prefix(IPAddrBlocks * addr, const unsigned afi, const unsigned * safi, unsigned char * a, const int prefixlen) (a0,d0,a1,a2,d1)
int X509v3_addr_add_range(IPAddrBlocks * addr, const unsigned afi, const unsigned * safi, unsigned char * min, unsigned char * max) (a0,d0,a1,a2,a3)
int X509v3_addr_canonize(IPAddrBlocks * addr) (a0)
unsigned X509v3_addr_get_afi(const IPAddressFamily * f) (a0)
int X509v3_addr_get_range(IPAddressOrRange * aor, const unsigned afi, unsigned char * min, unsigned char * max, const int length) (a0,d0,a1,a2,d1)
int X509v3_addr_inherits(IPAddrBlocks * addr) (a0)
int X509v3_addr_is_canonical(IPAddrBlocks * addr) (a0)
int X509v3_addr_subset(IPAddrBlocks * a, IPAddrBlocks * b) (a0,a1)
int X509v3_addr_validate_path(X509_STORE_CTX * ctx) (a0)
int X509v3_addr_validate_resource_set(STACK_OF(X509) * chain, IPAddrBlocks * ext, int allow_inheritance) (a0,a1,d0)
int X509v3_asid_add_inherit(ASIdentifiers * asid, int which) (a0,d0)
int X509v3_asid_add_id_or_range(ASIdentifiers * asid, int which, ASN1_INTEGER * min, ASN1_INTEGER * max) (a0,d0,a1,a2)
int X509v3_asid_canonize(ASIdentifiers * asid) (a0)
int X509v3_asid_inherits(ASIdentifiers * asid) (a0)
int X509v3_asid_is_canonical(ASIdentifiers * asid) (a0)
int X509v3_asid_subset(ASIdentifiers * a, ASIdentifiers * b) (a0,a1)
int X509v3_asid_validate_path(X509_STORE_CTX * ctx) (a0)
int X509v3_asid_validate_resource_set(STACK_OF(X509) * chain, ASIdentifiers * ext, int allow_inheritance) (a0,a1,d0)
const ASN1_OCTET_STRING * X509_get0_subject_key_id(X509 * x) (a0)
uint32_t X509_get_extended_key_usage(X509 * x) (a0)
uint32_t X509_get_extension_flags(X509 * x) (a0)
uint32_t X509_get_key_usage(X509 * x) (a0)
int DTLSv1_listen(SSL * s, BIO_ADDR * client) (a0,a1)
int OPENSSL_init_ssl(uint64_t opts, const OPENSSL_INIT_SETTINGS * settings) (d0-d1,a0)
int SSL_add1_host(SSL * s, const char * host) (a0,a1)
void SSL_add_ssl_module() ()
int SSL_CIPHER_get_cipher_nid(const SSL_CIPHER * c) (a0)
int SSL_CIPHER_get_digest_nid(const SSL_CIPHER * c) (a0)
uint64_t SSL_clear_options(SSL * s, uint64_t op) (a0,d0-d1)
int SSL_config(SSL * s, const char * name) (a0,a1)
uint64_t SSL_CTX_clear_options(SSL_CTX * ctx, uint64_t op) (a0,d0-d1)
int SSL_CTX_config(SSL_CTX * ctx, const char * name) (a0,a1)
int SSL_CTX_dane_enable(SSL_CTX * ctx) (a0)
int SSL_CTX_dane_mtype_set(SSL_CTX * ctx, const EVP_MD * md, uint8_t mtype, uint8_t ord) (a0,a1,d0,d1)
void * SSL_CTX_get0_security_ex_data(const SSL_CTX * ctx) (a0)
uint64_t SSL_CTX_get_options(const SSL_CTX * ctx) (a0)
int (*)(const SSL *, const SSL_CTX *, int, int, int, void *, void *) SSL_CTX_get_security_callback(const SSL_CTX * ctx) (a0)
int SSL_CTX_get_security_level(const SSL_CTX * ctx) (a0)
void SSL_CTX_set0_security_ex_data(SSL_CTX * ctx, void * ex) (a0,a1)
int SSL_CTX_set_default_verify_dir(SSL_CTX * ctx) (a0)
int SSL_CTX_set_default_verify_file(SSL_CTX * ctx) (a0)
void SSL_CTX_set_not_resumable_session_callback(SSL_CTX * ctx, int (*cb)(SSL *, int)) (a0,a1)
uint64_t SSL_CTX_set_options(SSL_CTX * ctx, uint64_t op) (a0,d0-d1)
void SSL_CTX_set_security_callback(SSL_CTX * ctx, int (*cb)(const SSL *, const SSL_CTX *, int, int, int, void *, void *)) (a0,a1)
void SSL_CTX_set_security_level(SSL_CTX * ctx, int level) (a0,d0)
int SSL_CTX_up_ref(SSL_CTX * ctx) (a0)
int SSL_dane_enable(SSL * s, const char * basedomain) (a0,a1)
int SSL_dane_tlsa_add(SSL * s, uint8_t usage, uint8_t selector, uint8_t mtype, unsigned const char * data, size_t dlen) (a0,d0,d1,d2,a1,d3)
SSL_DANE * SSL_get0_dane(SSL * ssl) (a0)
int SSL_get0_dane_authority(SSL * s, X509 ** mcert, EVP_PKEY ** mspki) (a0,a1,a2)
int SSL_get0_dane_tlsa(SSL * s, uint8_t * usage, uint8_t * selector, uint8_t * mtype, unsigned const char ** data, size_t * dlen) (a0,a1,a2,a3,d0,d1)
const char * SSL_get0_peername(SSL * s) (a0)
void * SSL_get0_security_ex_data(const SSL * s) (a0)
STACK_OF(SSL_CIPHER) * SSL_get1_supported_ciphers(SSL * s) (a0)
==reserve 1
size_t SSL_get_client_random(const SSL * s, unsigned char * out, size_t outlen) (a0,a1,d0)
uint64_t SSL_get_options(const SSL * s) (a0)
int (*)(const SSL *, const SSL_CTX *, int, int, int, void *, void *) SSL_get_security_callback(const SSL * s) (a0)
int SSL_get_security_level(const SSL * s) (a0)
size_t SSL_get_server_random(const SSL * s, unsigned char * out, size_t outlen) (a0,a1,d0)
OSSL_HANDSHAKE_STATE SSL_get_state(const SSL * ssl) (a0)
int SSL_in_before(const SSL * s) (a0)
int SSL_in_init(const SSL * s) (a0)
int SSL_is_init_finished(const SSL * s) (a0)
void SSL_SESSION_get0_ticket(const SSL_SESSION * s, const unsigned char ** tick, size_t * len) (a0,a1,a2)
size_t SSL_SESSION_get_master_key(const SSL_SESSION * sess, unsigned char * out, size_t outlen) (a0,a1,d0)
unsigned long SSL_SESSION_get_ticket_lifetime_hint(const SSL_SESSION * s) (a0)
int SSL_SESSION_has_ticket(const SSL_SESSION * s) (a0)
int SSL_SESSION_print_keylog(BIO * bp, const SSL_SESSION * x) (a0,a1)
int SSL_session_reused(const SSL * s) (a0)
void SSL_set0_security_ex_data(SSL * s, void * ex) (a0,a1)
int SSL_set1_host(SSL * s, const char * host) (a0,a1)
void SSL_set_default_passwd_cb(SSL * s, pem_password_cb * cb) (a0,a1)
void SSL_set_default_passwd_cb_userdata(SSL * s, void * u) (a0,a1)
void SSL_set_hostflags(SSL * s, unsigned int flags) (a0,d0)
void SSL_set_not_resumable_session_callback(SSL * ssl, int (*cb)(SSL *, int)) (a0,a1)
uint64_t SSL_set_options(SSL * s, uint64_t op) (a0,d0-d1)
void SSL_set0_rbio(SSL * s, BIO * rbio) (a0,a1)
void SSL_set_security_callback(SSL * s, int (*cb)(const SSL *, const SSL_CTX *, int, int, int, void *, void *)) (a0,a1)
void SSL_set_security_level(SSL * s, int level) (a0,d0)
void SSL_set0_wbio(SSL * s, BIO * wbio) (a0,a1)
int SSL_up_ref(SSL * s) (a0)
int SSL_use_certificate_chain_file(SSL * ssl, const char * file) (a0,a1)
int SSL_waiting_for_async(SSL * s) (a0)
const SSL_METHOD * TLS_client_method() ()
const SSL_METHOD * TLS_method() ()
const SSL_METHOD * TLS_server_method() ()
ASYNC_WAIT_CTX * ASYNC_WAIT_CTX_new() ()
void ASYNC_WAIT_CTX_free(ASYNC_WAIT_CTX * ctx) (a0)
int ASYNC_WAIT_CTX_set_wait_fd(ASYNC_WAIT_CTX * ctx, const void * key, OSSL_ASYNC_FD fd, void * custom_data, void (*cleanup)(ASYNC_WAIT_CTX *, const void *, OSSL_ASYNC_FD, void *)) (a0,a1,d0,a2,a3)
int ASYNC_WAIT_CTX_get_fd(ASYNC_WAIT_CTX * ctx, const void * key, OSSL_ASYNC_FD * fd, void ** custom_data) (a0,a1,a2,a3)
int ASYNC_WAIT_CTX_get_all_fds(ASYNC_WAIT_CTX * ctx, OSSL_ASYNC_FD * fd, size_t * numfds) (a0,a1,a2)
int ASYNC_WAIT_CTX_get_changed_fds(ASYNC_WAIT_CTX * ctx, OSSL_ASYNC_FD * addfd, size_t * numaddfds, OSSL_ASYNC_FD * delfd, size_t * numdelfds) (a0,a1,a2,a3,d0)
int ASYNC_WAIT_CTX_clear_fd(ASYNC_WAIT_CTX * ctx, const void * key) (a0,a1)
int ASYNC_is_capable() ()
ASYNC_WAIT_CTX * ASYNC_get_wait_ctx(ASYNC_JOB * job) (a0)
int BIO_up_ref(BIO * a) (a0)
int BN_BLINDING_is_current_thread(BN_BLINDING * b) (a0)
void BN_BLINDING_set_current_thread(BN_BLINDING * b) (a0)
int BN_BLINDING_lock(BN_BLINDING * b) (a0)
int BN_BLINDING_unlock(BN_BLINDING * b) (a0)
int CRYPTO_THREAD_run_once(CRYPTO_ONCE * once, void (*init)(void)) (a0,a1)
int CRYPTO_THREAD_init_local(CRYPTO_THREAD_LOCAL * key, void (*cleanup)(void *)) (a0,a1)
void * CRYPTO_THREAD_get_local(CRYPTO_THREAD_LOCAL * key) (a0)
int CRYPTO_THREAD_set_local(CRYPTO_THREAD_LOCAL * key, void * val) (a0,a1)
int CRYPTO_THREAD_cleanup_local(CRYPTO_THREAD_LOCAL * key) (a0)
CRYPTO_THREAD_ID CRYPTO_THREAD_get_current_id() ()
int CRYPTO_THREAD_compare_id(CRYPTO_THREAD_ID a, CRYPTO_THREAD_ID b) (d0,d1)
CRYPTO_RWLOCK * CRYPTO_THREAD_lock_new() ()
int CRYPTO_THREAD_read_lock(CRYPTO_RWLOCK * lock) (a0)
int CRYPTO_THREAD_write_lock(CRYPTO_RWLOCK * lock) (a0)
int CRYPTO_THREAD_unlock(CRYPTO_RWLOCK * lock) (a0)
void CRYPTO_THREAD_lock_free(CRYPTO_RWLOCK * lock) (a0)
int CRYPTO_atomic_add(int * val, int amount, int * ret, CRYPTO_RWLOCK * lock) (a0,d0,a1,a2)
void OPENSSL_die(const char * assertion, const char * file, int line) (a0,a1,d0)
CT_POLICY_EVAL_CTX * CT_POLICY_EVAL_CTX_new() ()
void CT_POLICY_EVAL_CTX_free(CT_POLICY_EVAL_CTX * ctx) (a0)
X509 * CT_POLICY_EVAL_CTX_get0_cert(const CT_POLICY_EVAL_CTX * ctx) (a0)
X509 * CT_POLICY_EVAL_CTX_get0_issuer(const CT_POLICY_EVAL_CTX * ctx) (a0)
const CTLOG_STORE * CT_POLICY_EVAL_CTX_get0_log_store(const CT_POLICY_EVAL_CTX * ctx) (a0)
SCT * SCT_new() ()
SCT * SCT_new_from_base64(unsigned char version, const char * logid_base64, ct_log_entry_type_t entry_type, uint64_t timestamp, const char * extensions_base64, const char * signature_base64) (d0,a0,d1,d2-d3,a1,a2)
void SCT_free(SCT * sct) (a0)
void SCT_LIST_free(STACK_OF(SCT) * a) (a0)
sct_version_t SCT_get_version(const SCT * sct) (a0)
int SCT_set_version(SCT * sct, sct_version_t version) (a0,d0)
ct_log_entry_type_t SCT_get_log_entry_type(const SCT * sct) (a0)
int SCT_set_log_entry_type(SCT * sct, ct_log_entry_type_t entry_type) (a0,d0)
size_t SCT_get0_log_id(const SCT * sct, unsigned char ** log_id) (a0,a1)
int SCT_set0_log_id(SCT * sct, unsigned char * log_id, size_t log_id_len) (a0,a1,d0)
int SCT_set1_log_id(SCT * sct, const unsigned char * log_id, size_t log_id_len) (a0,a1,d0)
uint64_t SCT_get_timestamp(const SCT * sct) (a0)
void SCT_set_timestamp(SCT * sct, uint64_t timestamp) (a0,d0-d1)
int SCT_get_signature_nid(const SCT * sct) (a0)
int SCT_set_signature_nid(SCT * sct, int nid) (a0,d0)
size_t SCT_get0_extensions(const SCT * sct, unsigned char ** ext) (a0,a1)
void SCT_set0_extensions(SCT * sct, unsigned char * ext, size_t ext_len) (a0,a1,d0)
int SCT_set1_extensions(SCT * sct, const unsigned char * ext, size_t ext_len) (a0,a1,d0)
size_t SCT_get0_signature(const SCT * sct, unsigned char ** sig) (a0,a1)
void SCT_set0_signature(SCT * sct, unsigned char * sig, size_t sig_len) (a0,a1,d0)
int SCT_set1_signature(SCT * sct, const unsigned char * sig, size_t sig_len) (a0,a1,d0)
sct_source_t SCT_get_source(const SCT * sct) (a0)
int SCT_set_source(SCT * sct, sct_source_t source) (a0,d0)
void SCT_print(const SCT * sct, BIO * out, int indent, const CTLOG_STORE * logs) (a0,a1,d0,a2)
void SCT_LIST_print(const STACK_OF(SCT) * sct_list, BIO * out, int indent, const char * separator, const CTLOG_STORE * logs) (a0,a1,d0,a2,a3)
sct_validation_status_t SCT_get_validation_status(const SCT * sct) (a0)
int SCT_validate(SCT * sct, const CT_POLICY_EVAL_CTX * ctx) (a0,a1)
int SCT_LIST_validate(const STACK_OF(SCT) * scts, CT_POLICY_EVAL_CTX * ctx) (a0,a1)
int i2o_SCT_LIST(const STACK_OF(SCT) * a, unsigned char ** pp) (a0,a1)
STACK_OF(SCT) * o2i_SCT_LIST(STACK_OF(SCT) ** a, const unsigned char ** pp, size_t len) (a0,a1,d0)
int i2d_SCT_LIST(const STACK_OF(SCT) * a, unsigned char ** pp) (a0,a1)
STACK_OF(SCT) * d2i_SCT_LIST(STACK_OF(SCT) ** a, const unsigned char ** pp, long len) (a0,a1,d0)
int i2o_SCT(const SCT * sct, unsigned char ** out) (a0,a1)
SCT * o2i_SCT(SCT ** psct, const unsigned char ** in, size_t len) (a0,a1,d0)
CTLOG * CTLOG_new(EVP_PKEY * public_key, const char * name) (a0,a1)
int CTLOG_new_from_base64(CTLOG ** ct_log, const char * pkey_base64, const char * name) (a0,a1,a2)
void CTLOG_free(CTLOG * log) (a0)
const char * CTLOG_get0_name(const CTLOG * log) (a0)
void CTLOG_get0_log_id(const CTLOG * log, const uint8_t ** log_id, size_t * log_id_len) (a0,a1,a2)
EVP_PKEY * CTLOG_get0_public_key(const CTLOG * log) (a0)
CTLOG_STORE * CTLOG_STORE_new() ()
void CTLOG_STORE_free(CTLOG_STORE * store) (a0)
const CTLOG * CTLOG_STORE_get0_log_by_id(const CTLOG_STORE * store, const uint8_t * log_id, size_t log_id_len) (a0,a1,d0)
int CTLOG_STORE_load_file(CTLOG_STORE * store, const char * file) (a0,a1)
int CTLOG_STORE_load_default_file(CTLOG_STORE * store) (a0)
int ERR_load_CT_strings() ()
const ASN1_ITEM * DHparams_it() ()
void DSA_SIG_get0(const DSA_SIG * sig, const BIGNUM ** pr, const BIGNUM ** ps) (a0,a1,a2)
EC_GROUP * EC_GROUP_new_from_ecparameters(const ECPARAMETERS * params) (a0)
ECPARAMETERS * EC_GROUP_get_ecparameters(const EC_GROUP * group, ECPARAMETERS * params) (a0,a1)
EC_GROUP * EC_GROUP_new_from_ecpkparameters(const ECPKPARAMETERS * params) (a0)
ECPKPARAMETERS * EC_GROUP_get_ecpkparameters(const EC_GROUP * group, ECPKPARAMETERS * params) (a0,a1)
const ASN1_ITEM * ECPKPARAMETERS_it() ()
const ASN1_ITEM * ECPARAMETERS_it() ()
int EC_KEY_can_sign(const EC_KEY * eckey) (a0)
const EVP_MD * EVP_blake2b512() ()
const EVP_MD * EVP_blake2s256() ()
int EVP_PKEY_CTX_str2ctrl(EVP_PKEY_CTX * ctx, int cmd, const char * str) (a0,d0,a1)
int EVP_PKEY_CTX_hex2ctrl(EVP_PKEY_CTX * ctx, int cmd, const char * hex) (a0,d0,a1)
int ERR_load_KDF_strings() ()
void SRP_user_pwd_free(SRP_user_pwd * user_pwd) (a0)
SRP_user_pwd * SRP_VBASE_get1_by_user(SRP_VBASE * vb, char * username) (a0,a1)
int SSL_CTX_has_client_custom_ext(const SSL_CTX * ctx, unsigned int ext_type) (a0,d0)
int SSL_CIPHER_get_kx_nid(const SSL_CIPHER * c) (a0)
int SSL_CIPHER_get_auth_nid(const SSL_CIPHER * c) (a0)
int SSL_CIPHER_is_aead(const SSL_CIPHER * c) (a0)
int SSL_has_pending(const SSL * s) (a0)
int SSL_SESSION_up_ref(SSL_SESSION * ses) (a0)
int (*)(char *, int, int, void *) SSL_CTX_get_default_passwd_cb(SSL_CTX * ctx) (a0)
void * SSL_CTX_get_default_passwd_cb_userdata(SSL_CTX * ctx) (a0)
int (*)(char *, int, int, void *) SSL_get_default_passwd_cb(SSL * ctx) (a0)
void * SSL_get_default_passwd_cb_userdata(SSL * ctx) (a0)
int SSL_get_all_async_fds(SSL * s, OSSL_ASYNC_FD * fds, size_t * numfds) (a0,a1,a2)
int SSL_get_changed_async_fds(SSL * s, OSSL_ASYNC_FD * addfd, size_t * numaddfds, OSSL_ASYNC_FD * delfd, size_t * numdelfds) (a0,a1,a2,a3,d0)
void SSL_CTX_set_default_read_buffer_len(SSL_CTX * ctx, size_t len) (a0,d0)
void SSL_set_default_read_buffer_len(SSL * s, size_t len) (a0,d0)
int SSL_set_ct_validation_callback(SSL * s, ssl_ct_validation_cb callback, void * arg) (a0,a1,a2)
int SSL_CTX_set_ct_validation_callback(SSL_CTX * ctx, ssl_ct_validation_cb callback, void * arg) (a0,a1,a2)
int SSL_ct_is_enabled(const SSL * s) (a0)
int SSL_CTX_ct_is_enabled(const SSL_CTX * ctx) (a0)
const STACK_OF(SCT) * SSL_get0_peer_scts(SSL * s) (a0)
int SSL_CTX_set_default_ctlog_list_file(SSL_CTX * ctx) (a0)
int SSL_CTX_set_ctlog_list_file(SSL_CTX * ctx, const char * path) (a0,a1)
void SSL_CTX_set0_ctlog_store(SSL_CTX * ctx, CTLOG_STORE * logs) (a0,a1)
const CTLOG_STORE * SSL_CTX_get0_ctlog_store(const SSL_CTX * ctx) (a0)
void X509_SIG_get0(const X509_SIG * sig, const X509_ALGOR ** palg, const ASN1_OCTET_STRING ** pdigest) (a0,a1,a2)
const STACK_OF(X509_ATTRIBUTE) * PKCS8_pkey_get0_attrs(const PKCS8_PRIV_KEY_INFO * p8) (a0)
int PKCS8_pkey_add1_attr_by_NID(PKCS8_PRIV_KEY_INFO * p8, int nid, int type, const unsigned char * bytes, int len) (a0,d0,d1,a1,d2)
int X509_STORE_up_ref(X509_STORE * xs) (a0)
int SSL_enable_ct(SSL * s, int validation_mode) (a0,d0)
int SSL_CTX_enable_ct(SSL_CTX * ctx, int validation_mode) (a0,d0)
STACK_OF(SSL_CIPHER) * SSL_CTX_get_ciphers(const SSL_CTX * ctx) (a0)
const char * SSL_SESSION_get0_hostname(const SSL_SESSION * s) (a0)
const char * SCT_validation_status_string(const SCT * sct) (a0)
BIO_METHOD * BIO_meth_new(int type, const char * name) (d0,a0)
int (*)(BIO *, const char *) BIO_meth_get_puts(const BIO_METHOD * biom) (a0)
long (*)(BIO *, int, long, void *) BIO_meth_get_ctrl(const BIO_METHOD * biom) (a0)
int (*)(BIO *, char *, int) BIO_meth_get_gets(const BIO_METHOD * biom) (a0)
void * BIO_get_data(BIO * a) (a0)
void BIO_set_init(BIO * a, int init) (a0,d0)
int BIO_meth_set_puts(BIO_METHOD * biom, int (*func)(BIO *, const char *)) (a0,a1)
int BIO_get_shutdown(BIO * a) (a0)
int BIO_get_init(BIO * a) (a0)
int BIO_meth_set_ctrl(BIO_METHOD * biom, long (*ctrl)(BIO *, int, long, void *)) (a0,a1)
int BIO_meth_set_read(BIO_METHOD * biom, int (*read)(BIO *, char *, int)) (a0,a1)
void BIO_set_shutdown(BIO * a, int shut) (a0,d0)
int BIO_meth_set_create(BIO_METHOD * biom, int (*create)(BIO *)) (a0,a1)
int (*)(BIO *, const char *, int) BIO_meth_get_write(const BIO_METHOD * biom) (a0)
int BIO_meth_set_callback_ctrl(BIO_METHOD * biom, long (*callback_ctrl)(BIO *, int, BIO_info_cb *)) (a0,a1)
int (*)(BIO *) BIO_meth_get_create(const BIO_METHOD * biom) (a0)
void BIO_set_next(BIO * b, BIO * next) (a0,a1)
void BIO_set_data(BIO * a, void * ptr) (a0,a1)
int BIO_meth_set_write(BIO_METHOD * biom, int (*write)(BIO *, const char *, int)) (a0,a1)
int BIO_meth_set_destroy(BIO_METHOD * biom, int (*destroy)(BIO *)) (a0,a1)
int BIO_meth_set_gets(BIO_METHOD * biom, int (*ossl_gets)(BIO *, char *, int)) (a0,a1)
long (*)(BIO *, int, BIO_info_cb *) BIO_meth_get_callback_ctrl(const BIO_METHOD * biom) (a0)
int (*)(BIO *) BIO_meth_get_destroy(const BIO_METHOD * biom) (a0)
int (*)(BIO *, char *, int) BIO_meth_get_read(const BIO_METHOD * biom) (a0)
void BIO_set_retry_reason(BIO * bio, int reason) (a0,d0)
void BIO_meth_free(BIO_METHOD * biom) (a0)
int DSA_meth_set_bn_mod_exp(DSA_METHOD * dsam, int (*bn_mod_exp)(DSA *, BIGNUM *, const BIGNUM *, const BIGNUM *, const BIGNUM *, BN_CTX *, BN_MONT_CTX *)) (a0,a1)
int DSA_meth_set_init(DSA_METHOD * dsam, int (*init)(DSA *)) (a0,a1)
void DSA_meth_free(DSA_METHOD * dsam) (a0)
int DSA_meth_set_mod_exp(DSA_METHOD * dsam, int (*mod_exp)(DSA *, BIGNUM *, const BIGNUM *, const BIGNUM *, const BIGNUM *, const BIGNUM *, const BIGNUM *, BN_CTX *, BN_MONT_CTX *)) (a0,a1)
int DSA_meth_set_sign(DSA_METHOD * dsam, DSA_SIG * (*sign)(const unsigned char *, int, DSA *)) (a0,a1)
int (*)(DSA *) DSA_meth_get_finish(const DSA_METHOD * dsam) (a0)
void DSA_set_flags(DSA * d, int flags) (a0,d0)
void DSA_get0_pqg(const DSA * d, const BIGNUM ** p, const BIGNUM ** q, const BIGNUM ** g) (a0,a1,a2,a3)
void * DSA_meth_get0_app_data(const DSA_METHOD * dsam) (a0)
int (*)(DSA *) DSA_meth_get_keygen(const DSA_METHOD * dsam) (a0)
void DSA_clear_flags(DSA * d, int flags) (a0,d0)
const char * DSA_meth_get0_name(const DSA_METHOD * dsam) (a0)
int (*)(DSA *, int, const unsigned char *, int, int *, unsigned long *, BN_GENCB *) DSA_meth_get_paramgen(const DSA_METHOD * dsam) (a0)
DSA_SIG * (*)(const unsigned char *, int, DSA *) DSA_meth_get_sign(const DSA_METHOD * dsam) (a0)
int DSA_meth_set_paramgen(DSA_METHOD * dsam, int (*paramgen)(DSA *, int, const unsigned char *, int, int *, unsigned long *, BN_GENCB *)) (a0,a1)
int DSA_test_flags(const DSA * d, int flags) (a0,d0)
int DSA_meth_set0_app_data(DSA_METHOD * dsam, void * app_data) (a0,a1)
int DSA_meth_set1_name(DSA_METHOD * dsam, const char * name) (a0,a1)
void DSA_get0_key(const DSA * d, const BIGNUM ** pub_key, const BIGNUM ** priv_key) (a0,a1,a2)
int (*)(DSA *, BIGNUM *, const BIGNUM *, const BIGNUM *, const BIGNUM *, const BIGNUM *, const BIGNUM *, BN_CTX *, BN_MONT_CTX *) DSA_meth_get_mod_exp(const DSA_METHOD * dsam) (a0)
int DSA_set0_pqg(DSA * d, BIGNUM * p, BIGNUM * q, BIGNUM * g) (a0,a1,a2,a3)
int DSA_meth_get_flags(const DSA_METHOD * dsam) (a0)
int (*)(const unsigned char *, int, DSA_SIG *, DSA *) DSA_meth_get_verify(const DSA_METHOD * dsam) (a0)
int DSA_meth_set_verify(DSA_METHOD * dsam, int (*verify)(const unsigned char *, int, DSA_SIG *, DSA *)) (a0,a1)
int DSA_meth_set_finish(DSA_METHOD * dsam, int (*finish)(DSA *)) (a0,a1)
int DSA_meth_set_keygen(DSA_METHOD * dsam, int (*keygen)(DSA *)) (a0,a1)
DSA_METHOD * DSA_meth_dup(const DSA_METHOD * dsam) (a0)
int DSA_set0_key(DSA * d, BIGNUM * pub_key, BIGNUM * priv_key) (a0,a1,a2)
int (*)(DSA *) DSA_meth_get_init(const DSA_METHOD * dsam) (a0)
int DSA_meth_set_sign_setup(DSA_METHOD * dsam, int (*sign_setup)(DSA *, BN_CTX *, BIGNUM **, BIGNUM **)) (a0,a1)
int (*)(DSA *, BIGNUM *, const BIGNUM *, const BIGNUM *, const BIGNUM *, BN_CTX *, BN_MONT_CTX *) DSA_meth_get_bn_mod_exp(const DSA_METHOD * dsam) (a0)
const DSA_METHOD * DSA_get_method(DSA * d) (a0)
DSA_METHOD * DSA_meth_new(const char * name, int flags) (a0,d0)
int DSA_meth_set_flags(DSA_METHOD * dsam, int flags) (a0,d0)
int (*)(DSA *, BN_CTX *, BIGNUM **, BIGNUM **) DSA_meth_get_sign_setup(const DSA_METHOD * dsam) (a0)
ENGINE * DSA_get0_engine(DSA * d) (a0)
void X509_VERIFY_PARAM_set_auth_level(X509_VERIFY_PARAM * param, int auth_level) (a0,d0)
int X509_VERIFY_PARAM_get_auth_level(const X509_VERIFY_PARAM * param) (a0)
EVP_PKEY * X509_REQ_get0_pubkey(const X509_REQ * req) (a0)
int RSA_set0_key(RSA * r, BIGNUM * n, BIGNUM * e, BIGNUM * d) (a0,a1,a2,a3)
int RSA_meth_get_flags(const RSA_METHOD * meth) (a0)
int RSA_meth_set_finish(RSA_METHOD * rsa, int (*finish)(RSA *)) (a0,a1)
int (*)(int, const unsigned char *, unsigned char *, RSA *, int) RSA_meth_get_priv_dec(const RSA_METHOD * meth) (a0)
int (*)(int, const unsigned char *, unsigned int, unsigned char *, unsigned int *, const RSA *) RSA_meth_get_sign(const RSA_METHOD * meth) (a0)
int (*)(BIGNUM *, const BIGNUM *, const BIGNUM *, const BIGNUM *, BN_CTX *, BN_MONT_CTX *) RSA_meth_get_bn_mod_exp(const RSA_METHOD * meth) (a0)
int RSA_test_flags(const RSA * r, int flags) (a0,d0)
RSA_METHOD * RSA_meth_new(const char * name, int flags) (a0,d0)
void * RSA_meth_get0_app_data(const RSA_METHOD * meth) (a0)
RSA_METHOD * RSA_meth_dup(const RSA_METHOD * meth) (a0)
int RSA_meth_set1_name(RSA_METHOD * meth, const char * name) (a0,a1)
int RSA_meth_set0_app_data(RSA_METHOD * meth, void * app_data) (a0,a1)
void RSA_set_flags(RSA * r, int flags) (a0,d0)
int RSA_meth_set_sign(RSA_METHOD * rsa, int (*sign)(int, const unsigned char *, unsigned int, unsigned char *, unsigned int *, const RSA *)) (a0,d0)
void RSA_clear_flags(RSA * r, int flags) (a0,d0)
int (*)(RSA *, int, BIGNUM *, BN_GENCB *) RSA_meth_get_keygen(const RSA_METHOD * meth) (a0)
int RSA_meth_set_keygen(RSA_METHOD * rsa, int (*keygen)(RSA *, int, BIGNUM *, BN_GENCB *)) (a0,a1)
int RSA_meth_set_pub_dec(RSA_METHOD * rsa, int (*pub_dec)(int, const unsigned char *, unsigned char *, RSA *, int)) (a0,a1)
int (*)(RSA *rsa) RSA_meth_get_finish(const RSA_METHOD * meth) (a0)
void RSA_get0_key(const RSA * r, const BIGNUM ** n, const BIGNUM ** e, const BIGNUM ** d) (a0,a1,a2,a3)
ENGINE * RSA_get0_engine(const RSA * r) (a0)
int RSA_meth_set_priv_enc(RSA_METHOD * rsa, int (*priv_enc)(int, const unsigned char *, unsigned char *, RSA *, int)) (a0,a1)
int RSA_meth_set_verify(RSA_METHOD * rsa, int (*verify)(int, const unsigned char *, unsigned int, const unsigned char *, unsigned int, const RSA *)) (a0,a1)
void RSA_get0_factors(const RSA * r, const BIGNUM ** p, const BIGNUM ** q) (a0,a1,a2)
const char * RSA_meth_get0_name(const RSA_METHOD * meth) (a0)
int (*)(BIGNUM *, const BIGNUM *, RSA *, BN_CTX *) RSA_meth_get_mod_exp(const RSA_METHOD * meth) (a0)
int RSA_meth_set_flags(RSA_METHOD * meth, int flags) (a0,d0)
int (*)(int, const unsigned char *, unsigned char *, RSA *, int) RSA_meth_get_pub_dec(const RSA_METHOD * meth) (a0)
int RSA_meth_set_bn_mod_exp(RSA_METHOD * rsa, int (*bn_mod_exp)(BIGNUM *, const BIGNUM *, const BIGNUM *, const BIGNUM *, BN_CTX *, BN_MONT_CTX *)) (a0,a1)
int (*)(RSA *) RSA_meth_get_init(const RSA_METHOD * meth) (a0)
void RSA_meth_free(RSA_METHOD * meth) (a0)
int (*)(int, const unsigned char *, unsigned char *, RSA *, int) RSA_meth_get_pub_enc(const RSA_METHOD * meth) (a0)
int RSA_meth_set_mod_exp(RSA_METHOD * rsa, int (*mod_exp)(BIGNUM *, const BIGNUM *, RSA *, BN_CTX *)) (a0,a1)
int RSA_set0_factors(RSA * r, BIGNUM * p, BIGNUM * q) (a0,a1,a2)
int RSA_meth_set_pub_enc(RSA_METHOD * rsa, int (*pub_enc)(int, const unsigned char *, unsigned char *, RSA *, int)) (a0,a1)
int RSA_meth_set_priv_dec(RSA_METHOD * rsa, int (*priv_dec)(int, const unsigned char *, unsigned char *, RSA *, int)) (a0,a1)
int (*)(int, const unsigned char *, unsigned int, const unsigned char *, unsigned int, const RSA *) RSA_meth_get_verify(const RSA_METHOD * meth) (a0)
int RSA_meth_set_init(RSA_METHOD * rsa, int (*init)(RSA *)) (a0,a1)
int (*)(int, const unsigned char *, unsigned char *, RSA *, int) RSA_meth_get_priv_enc(const RSA_METHOD * meth) (a0)
int RSA_set0_crt_params(RSA * r, BIGNUM * dmp1, BIGNUM * dmq1, BIGNUM * iqmp) (a0,a1,a2,a3)
void RSA_get0_crt_params(const RSA * r, const BIGNUM ** dmp1, const BIGNUM ** dmq1, const BIGNUM ** iqmp) (a0,a1,a2,a3)
int DH_set0_pqg(DH * dh, BIGNUM * p, BIGNUM * q, BIGNUM * g) (a0,a1,a2,a3)
void DH_clear_flags(DH * dh, int flags) (a0,d0)
void DH_get0_key(const DH * dh, const BIGNUM ** pub_key, const BIGNUM ** priv_key) (a0,a1,a2)
ENGINE * DH_get0_engine(DH * d) (a0)
int DH_set0_key(DH * dh, BIGNUM * pub_key, BIGNUM * priv_key) (a0,a1,a2)
int DH_set_length(DH * dh, long length) (a0,d0)
int DH_test_flags(const DH * dh, int flags) (a0,d0)
long DH_get_length(const DH * dh) (a0)
void DH_get0_pqg(const DH * dh, const BIGNUM ** p, const BIGNUM ** q, const BIGNUM ** g) (a0,a1,a2,a3)
int (*)(unsigned char *, const BIGNUM *, DH *) DH_meth_get_compute_key(const DH_METHOD * dhm) (a0)
int DH_meth_set1_name(DH_METHOD * dhm, const char * name) (a0,a1)
int DH_meth_set_init(DH_METHOD * dhm, int (*init)(DH *)) (a0,a1)
int (*)(DH *) DH_meth_get_finish(const DH_METHOD * dhm) (a0)
const char * DH_meth_get0_name(const DH_METHOD * dhm) (a0)
int DH_meth_set_generate_params(DH_METHOD * dhm, int (*generate_params)(DH *, int, int, BN_GENCB *)) (a0,a1)
int DH_meth_set_compute_key(DH_METHOD * dhm, int (*compute_key)(unsigned char *, const BIGNUM *, DH *)) (a0,a1)
int DH_meth_set_flags(DH_METHOD * dhm, int flags) (a0,d0)
int (*)(DH *, int, int, BN_GENCB *) DH_meth_get_generate_params(const DH_METHOD * dhm) (a0)
int DH_meth_get_flags(const DH_METHOD * dhm) (a0)
int DH_meth_set_finish(DH_METHOD * dhm, int (*finish)(DH *)) (a0,a1)
void * DH_meth_get0_app_data(const DH_METHOD * dhm) (a0)
int DH_meth_set0_app_data(DH_METHOD * dhm, void * app_data) (a0,a1)
int (*)(DH *) DH_meth_get_init(const DH_METHOD * dhm) (a0)
int (*)(const DH *, BIGNUM *, const BIGNUM *, const BIGNUM *, const BIGNUM *, BN_CTX *, BN_MONT_CTX *) DH_meth_get_bn_mod_exp(const DH_METHOD * dhm) (a0)
DH_METHOD * DH_meth_new(const char * name, int flags) (a0,d0)
DH_METHOD * DH_meth_dup(const DH_METHOD * dhm) (a0)
int DH_meth_set_bn_mod_exp(DH_METHOD * dhm, int (*bn_mod_exp)(const DH *, BIGNUM *, const BIGNUM *, const BIGNUM *, const BIGNUM *, BN_CTX *, BN_MONT_CTX *)) (a0,a1)
int DH_meth_set_generate_key(DH_METHOD * dhm, int (*generate_key)(DH *)) (a0,a1)
void DH_meth_free(DH_METHOD * dhm) (a0)
int (*)(DH *) DH_meth_get_generate_key(const DH_METHOD * dhm) (a0)
void DH_set_flags(DH * dh, int flags) (a0,d0)
X509_OBJECT * X509_STORE_CTX_get_obj_by_subject(X509_STORE_CTX * vs, X509_LOOKUP_TYPE type, const X509_NAME * name) (a0,d0,a1)
void X509_OBJECT_free(X509_OBJECT * a) (a0)
X509 * X509_OBJECT_get0_X509(const X509_OBJECT * a) (a0)
STACK_OF(X509) * X509_STORE_CTX_get0_untrusted(const X509_STORE_CTX * ctx) (a0)
X509 * X509_STORE_CTX_get0_cert(const X509_STORE_CTX * ctx) (a0)
void X509_STORE_CTX_set_verify(X509_STORE_CTX * ctx, X509_STORE_CTX_verify_fn verify) (a0,a1)
X509_STORE_CTX_verify_fn X509_STORE_CTX_get_verify(const X509_STORE_CTX * ctx) (a0)
X509_STORE_CTX_verify_cb X509_STORE_CTX_get_verify_cb(const X509_STORE_CTX * ctx) (a0)
void X509_STORE_CTX_set0_verified_chain(X509_STORE_CTX * ctx, STACK_OF(X509) * sk) (a0,a1)
void X509_STORE_CTX_set0_untrusted(X509_STORE_CTX * ctx, STACK_OF(X509) * sk) (a0,a1)
int OPENSSL_hexchar2int(unsigned char c) (d0)
==reserve 5
int DSA_SIG_set0(DSA_SIG * sig, BIGNUM * r, BIGNUM * s) (a0,a1,a2)
int DSA_bits(const DSA * d) (a0)
int ECDSA_SIG_set0(ECDSA_SIG * sig, BIGNUM * r, BIGNUM * s) (a0,a1,a2)
int EVP_ENCODE_CTX_copy(EVP_ENCODE_CTX * dctx, const EVP_ENCODE_CTX * sctx) (a0,a1)
const unsigned char * EVP_PKEY_get0_hmac(const EVP_PKEY * pkey, size_t * len) (a0,a2)
const EVP_MD * HMAC_CTX_get_md(const HMAC_CTX * ctx) (a0)
const STACK_OF(X509) * OCSP_resp_get0_certs(const OCSP_BASICRESP * bs) (a0)
int OCSP_resp_get0_id(const OCSP_BASICRESP * bs, const ASN1_OCTET_STRING ** pid, const X509_NAME ** pname) (a0,a1,a2)
int PEM_write_bio_PrivateKey_traditional(BIO * bp, const EVP_PKEY * x, const EVP_CIPHER * enc, const unsigned char * kstr, int klen, pem_password_cb * cb, void * u) (a0,a1,a2,a3,d0,d1,d2)
int SSL_SESSION_get_protocol_version(const SSL_SESSION * s) (a0)
int SSL_is_dtls(const SSL * s) (a0)
unsigned long SSL_CTX_dane_set_flags(SSL_CTX * ctx, unsigned long flags) (a0,d0)
unsigned long SSL_CTX_dane_clear_flags(SSL_CTX * ctx, unsigned long flags) (a0,d0)
unsigned long SSL_dane_set_flags(SSL * ssl, unsigned long flags) (a0,d0)
unsigned long SSL_dane_clear_flags(SSL * ssl, unsigned long flags) (a0,d0)
int SSL_client_version(const SSL * s) (a0)
long X509_get_pathlen(X509 * x) (a0)
X509_LOOKUP_TYPE X509_OBJECT_get_type(const X509_OBJECT * a) (a0)
X509_CRL * X509_OBJECT_get0_X509_CRL(const X509_OBJECT * a) (a0)
int X509_STORE_lock(X509_STORE * xs) (a0)
int X509_STORE_unlock(X509_STORE * xs) (a0)
STACK_OF(X509_OBJECT) * X509_STORE_get0_objects(const X509_STORE * xs) (a0)
X509_VERIFY_PARAM * X509_STORE_get0_param(const X509_STORE * xs) (a0)
void X509_STORE_set_verify(X509_STORE * xs, X509_STORE_CTX_verify_fn verify) (a0,a1)
X509_STORE_CTX_verify_fn X509_STORE_get_verify(const X509_STORE * xs) (a0)
X509_STORE_CTX_verify_cb X509_STORE_get_verify_cb(const X509_STORE * xs) (a0)
void X509_STORE_set_get_issuer(X509_STORE * xs, X509_STORE_CTX_get_issuer_fn get_issuer) (a0,a1)
X509_STORE_CTX_get_issuer_fn X509_STORE_get_get_issuer(const X509_STORE * xs) (a0)
void X509_STORE_set_check_issued(X509_STORE * xs, X509_STORE_CTX_check_issued_fn check_issued) (a0,a1)
X509_STORE_CTX_check_issued_fn X509_STORE_get_check_issued(const X509_STORE * xs) (a0)
void X509_STORE_set_check_revocation(X509_STORE * xs, X509_STORE_CTX_check_revocation_fn check_revocation) (a0,a1)
X509_STORE_CTX_check_revocation_fn X509_STORE_get_check_revocation(const X509_STORE * xs) (a0)
void X509_STORE_set_get_crl(X509_STORE * xs, X509_STORE_CTX_get_crl_fn get_crl) (a0,a1)
X509_STORE_CTX_get_crl_fn X509_STORE_get_get_crl(const X509_STORE * xs) (a0)
void X509_STORE_set_check_crl(X509_STORE * xs, X509_STORE_CTX_check_crl_fn check_crl) (a0,a1)
X509_STORE_CTX_check_crl_fn X509_STORE_get_check_crl(const X509_STORE * xs) (a0)
void X509_STORE_set_cert_crl(X509_STORE * xs, X509_STORE_CTX_cert_crl_fn cert_crl) (a0,a1)
X509_STORE_CTX_cert_crl_fn X509_STORE_get_cert_crl(const X509_STORE * xs) (a0)
void X509_STORE_set_check_policy(X509_STORE * xs, X509_STORE_CTX_check_policy_fn check_policy) (a0,a1)
X509_STORE_CTX_check_policy_fn X509_STORE_get_check_policy(const X509_STORE * xs) (a0)
void X509_STORE_set_lookup_certs(X509_STORE * xs, X509_STORE_CTX_lookup_certs_fn lookup_certs) (a0,a1)
X509_STORE_CTX_lookup_certs_fn X509_STORE_get_lookup_certs(const X509_STORE * xs) (a0)
void X509_STORE_set_lookup_crls(X509_STORE * xs, X509_STORE_CTX_lookup_crls_fn lookup_crls) (a0,a1)
X509_STORE_CTX_lookup_crls_fn X509_STORE_get_lookup_crls(const X509_STORE * xs) (a0)
void X509_STORE_set_cleanup(X509_STORE * xs, X509_STORE_CTX_cleanup_fn cleanup) (a0,a1)
X509_STORE_CTX_cleanup_fn X509_STORE_get_cleanup(const X509_STORE * xs) (a0)
int X509_STORE_set_ex_data(X509_STORE * xs, int idx, void * data) (a0,d0,a1)
void * X509_STORE_get_ex_data(const X509_STORE * xs, int idx) (a0,d0)
X509_STORE_CTX_get_issuer_fn X509_STORE_CTX_get_get_issuer(const X509_STORE_CTX * ctx) (a0)
X509_STORE_CTX_check_issued_fn X509_STORE_CTX_get_check_issued(const X509_STORE_CTX * ctx) (a0)
X509_STORE_CTX_check_revocation_fn X509_STORE_CTX_get_check_revocation(const X509_STORE_CTX * ctx) (a0)
X509_STORE_CTX_get_crl_fn X509_STORE_CTX_get_get_crl(const X509_STORE_CTX * ctx) (a0)
X509_STORE_CTX_check_crl_fn X509_STORE_CTX_get_check_crl(const X509_STORE_CTX * ctx) (a0)
X509_STORE_CTX_cert_crl_fn X509_STORE_CTX_get_cert_crl(const X509_STORE_CTX * ctx) (a0)
X509_STORE_CTX_check_policy_fn X509_STORE_CTX_get_check_policy(const X509_STORE_CTX * ctx) (a0)
X509_STORE_CTX_lookup_certs_fn X509_STORE_CTX_get_lookup_certs(const X509_STORE_CTX * ctx) (a0)
X509_STORE_CTX_lookup_crls_fn X509_STORE_CTX_get_lookup_crls(const X509_STORE_CTX * ctx) (a0)
X509_STORE_CTX_cleanup_fn X509_STORE_CTX_get_cleanup(const X509_STORE_CTX * ctx) (a0)
void X509_STORE_CTX_set_error_depth(X509_STORE_CTX * ctx, int depth) (a0,d0)
void X509_STORE_CTX_set_current_cert(X509_STORE_CTX * ctx, X509 * x) (a0,a1)
int NAME_CONSTRAINTS_check_CN(X509 * x, NAME_CONSTRAINTS * nc) (a0,a1)
void X509_set_proxy_flag(X509 * x) (a0)
void X509_set_proxy_pathlen(X509 * x, long l) (a0,d0)
long X509_get_proxy_pathlen(X509 * x) (a0)
ASIdentifierChoice * ASIdentifierChoice_new() ()
void ASIdentifierChoice_free(ASIdentifierChoice * a) (a0)
ASIdentifierChoice * d2i_ASIdentifierChoice(ASIdentifierChoice ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_ASIdentifierChoice(const ASIdentifierChoice * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * ASIdentifierChoice_it() ()
ASIdentifiers * ASIdentifiers_new() ()
void ASIdentifiers_free(ASIdentifiers * a) (a0)
ASIdentifiers * d2i_ASIdentifiers(ASIdentifiers ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_ASIdentifiers(const ASIdentifiers * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * ASIdentifiers_it() ()
ASIdOrRange * ASIdOrRange_new() ()
void ASIdOrRange_free(ASIdOrRange * a) (a0)
ASIdOrRange * d2i_ASIdOrRange(ASIdOrRange ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_ASIdOrRange(const ASIdOrRange * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * ASIdOrRange_it() ()
ASRange * ASRange_new() ()
void ASRange_free(ASRange * a) (a0)
ASRange * d2i_ASRange(ASRange ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_ASRange(const ASRange * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * ASRange_it() ()
IPAddressChoice * IPAddressChoice_new() ()
void IPAddressChoice_free(IPAddressChoice * a) (a0)
IPAddressChoice * d2i_IPAddressChoice(IPAddressChoice ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_IPAddressChoice(const IPAddressChoice * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * IPAddressChoice_it() ()
IPAddressFamily * IPAddressFamily_new() ()
void IPAddressFamily_free(IPAddressFamily * a) (a0)
IPAddressFamily * d2i_IPAddressFamily(IPAddressFamily ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_IPAddressFamily(const IPAddressFamily * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * IPAddressFamily_it() ()
IPAddressOrRange * IPAddressOrRange_new() ()
void IPAddressOrRange_free(IPAddressOrRange * a) (a0)
IPAddressOrRange * d2i_IPAddressOrRange(IPAddressOrRange ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_IPAddressOrRange(const IPAddressOrRange * a, unsigned char ** out) (a0,a1)
const ASN1_ITEM * IPAddressOrRange_it() ()
const unsigned char * ASN1_STRING_get0_data(const ASN1_STRING * x) (a0)
const ASN1_TIME * X509_get0_notBefore(const X509 * x) (a0)
const ASN1_TIME * X509_get0_notAfter(const X509 * x) (a0)
const ASN1_TIME * X509_CRL_get0_lastUpdate(const X509_CRL * crl) (a0)
const ASN1_TIME * X509_CRL_get0_nextUpdate(const X509_CRL * crl) (a0)
char * OPENSSL_uni2utf8(const unsigned char * uni, int unilen) (a0,d0)
void CT_POLICY_EVAL_CTX_set_shared_CTLOG_STORE(CT_POLICY_EVAL_CTX * ctx, CTLOG_STORE * log_store) (a0,a1)
int CT_POLICY_EVAL_CTX_set1_cert(CT_POLICY_EVAL_CTX * ctx, X509 * cert) (a0,a1)
int CT_POLICY_EVAL_CTX_set1_issuer(CT_POLICY_EVAL_CTX * ctx, X509 * issuer) (a0,a1)
ECPARAMETERS * ECPARAMETERS_new() ()
void ECPARAMETERS_free(ECPARAMETERS * a) (a0)
int BIO_get_new_index() ()
int EVP_PKEY_set1_encoded_public_key(EVP_PKEY * pkey, const unsigned char * pub, size_t publen) (a0,a1,d0)
size_t EVP_PKEY_get1_encoded_public_key(EVP_PKEY * pkey, unsigned char ** ppub) (a0,a1)
int OCSP_RESPID_set_by_name(OCSP_RESPID * respid, X509 * cert) (a0,a1)
int OCSP_RESPID_set_by_key(OCSP_RESPID * respid, X509 * cert) (a0,a1)
int OCSP_RESPID_match(OCSP_RESPID * respid, X509 * cert) (a0,a1)
int PKCS12_add_friendlyname_utf8(PKCS12_SAFEBAG * bag, const char * name, int namelen) (a0,a1,d0)
int PKCS12_key_gen_utf8(const char * pass, int passlen, unsigned char * salt, int saltlen, int id, int iter, int n, unsigned char * out, const EVP_MD * md_type) (a0,d0,a1,d1,d2,d3,d4,a2,a3)
unsigned char * OPENSSL_utf82uni(const char * asc, int asclen, unsigned char ** uni, int * unilen) (a0,d0,a1,a2)
const SSL_CIPHER * SSL_SESSION_get0_cipher(const SSL_SESSION * s) (a0)
int SSL_SESSION_set1_id(SSL_SESSION * s, const unsigned char * sid, unsigned int sid_len) (a0,a1,d0)
const unsigned char * SSL_SESSION_get0_id_context(const SSL_SESSION * s, unsigned int * len) (a0,a1)
const STACK_OF(ASN1_UTF8STRING) * TS_STATUS_INFO_get0_text(const TS_STATUS_INFO * a) (a0)
void X509_SIG_getm(X509_SIG * sig, X509_ALGOR ** palg, ASN1_OCTET_STRING ** pdigest) (a0,a1,a2)
const ASN1_INTEGER * X509_get0_serialNumber(const X509 * x) (a0)
uint64_t CT_POLICY_EVAL_CTX_get_time(const CT_POLICY_EVAL_CTX * ctx) (a0)
void CT_POLICY_EVAL_CTX_set_time(CT_POLICY_EVAL_CTX * ctx, uint64_t time_in_ms) (a0,d0-d1)
int DH_check_params(const DH * dh, int * ret) (a0,a1)
const char * SSL_COMP_get0_name(const SSL_COMP * comp) (a0)
int SSL_COMP_get_id(const SSL_COMP * comp) (a0)
time_t X509_VERIFY_PARAM_get_time(const X509_VERIFY_PARAM * param) (a0)
int X509_VERIFY_PARAM_set_inh_flags(X509_VERIFY_PARAM * param, uint32_t flags) (a0,d0)
uint32_t X509_VERIFY_PARAM_get_inh_flags(const X509_VERIFY_PARAM * param) (a0)
void CRYPTO_secure_clear_free(void * ptr, size_t num, const char * file, int line) (a0,d0,a1,d1)
int EVP_PKEY_set1_engine(EVP_PKEY * pkey, ENGINE * e) (a0,a1)
STACK_OF(SSL_CIPHER) * SSL_get_client_ciphers(const SSL * s) (a0)
const char * SSL_CIPHER_standard_name(const SSL_CIPHER * c) (a0)
STACK_OF(X509) * SSL_get0_verified_chain(const SSL * s) (a0)
STACK_OF(SSL_COMP) * SSL_COMP_set0_compression_methods(STACK_OF(SSL_COMP) * meths) (a0)
==reserve 1
void SSL_CTX_set1_cert_store(SSL_CTX * a, X509_STORE * b) (a0,a1)
size_t DTLS_get_data_mtu(const SSL * s) (a0)
int SSL_read_ex(SSL * ssl, void * buf, size_t num, size_t * readbytes) (a0,a1,d0,a2)
int SSL_peek_ex(SSL * ssl, void * buf, size_t num, size_t * readbytes) (a0,a1,d0,a2)
int SSL_write_ex(SSL * s, const void * buf, size_t num, size_t * written) (a0,a1,d0,a2)
void SSL_CTX_set_keylog_callback(SSL_CTX * ctx, SSL_CTX_keylog_cb_func cb) (a0,a1)
SSL_CTX_keylog_cb_func SSL_CTX_get_keylog_callback(const SSL_CTX * ctx) (a0)
int SSL_get_peer_signature_type_nid(const SSL * s, int * pnid) (a0,a1)
int SSL_key_update(SSL * s, int updatetype) (a0,d0)
int SSL_get_key_update_type(const SSL * s) (a0)
int SSL_bytes_to_cipher_list(SSL * s, const unsigned char * bytes, size_t len, int isv2format, STACK_OF(SSL_CIPHER) ** sk, STACK_OF(SSL_CIPHER) ** scsvs) (a0,a1,d0,d1,a2,a3)
size_t SSL_client_hello_get0_compression_methods(SSL * s, const unsigned char ** out) (a0,a1)
size_t SSL_client_hello_get0_ciphers(SSL * s, const unsigned char ** out) (a0,a1)
int SSL_client_hello_get0_ext(SSL * s, unsigned int type, const unsigned char ** out, size_t * outlen) (a0,d0,a1,a2)
size_t SSL_client_hello_get0_session_id(SSL * s, const unsigned char ** out) (a0,a1)
size_t SSL_client_hello_get0_random(SSL * s, const unsigned char ** out) (a0,a1)
void SSL_CTX_set_client_hello_cb(SSL_CTX * c, SSL_client_hello_cb_fn cb, void * arg) (a0,a1,a2)
unsigned int SSL_client_hello_get0_legacy_version(SSL * s) (a0)
int SSL_client_hello_isv2(SSL * s) (a0)
int SSL_set_max_early_data(SSL * s, uint32_t max_early_data) (a0,d0)
int SSL_CTX_set_max_early_data(SSL_CTX * ctx, uint32_t max_early_data) (a0,d0)
uint32_t SSL_get_max_early_data(const SSL * s) (a0)
uint32_t SSL_CTX_get_max_early_data(const SSL_CTX * ctx) (a0)
int SSL_write_early_data(SSL * s, const void * buf, size_t num, size_t * written) (a0,a1,d0,a2)
int SSL_read_early_data(SSL * s, void * buf, size_t num, size_t * readbytes) (a0,a1,d0,a2)
int SSL_get_early_data_status(const SSL * s) (a0)
uint32_t SSL_SESSION_get_max_early_data(const SSL_SESSION * s) (a0)
int SSL_add1_to_CA_list(SSL * ssl, const X509 * x) (a0,a1)
void SSL_set0_CA_list(SSL * s, STACK_OF(X509_NAME) * name_list) (a0,a1)
void SSL_CTX_set0_CA_list(SSL_CTX * ctx, STACK_OF(X509_NAME) * name_list) (a0,a1)
const STACK_OF(X509_NAME) * SSL_get0_CA_list(const SSL * s) (a0)
const STACK_OF(X509_NAME) * SSL_get0_peer_CA_list(const SSL * s) (a0)
int SSL_CTX_add1_to_CA_list(SSL_CTX * ctx, const X509 * x) (a0,a1)
const STACK_OF(X509_NAME) * SSL_CTX_get0_CA_list(const SSL_CTX * ctx) (a0)
int SSL_CTX_add_custom_ext(SSL_CTX * ctx, unsigned int ext_type, unsigned int context, SSL_custom_ext_add_cb_ex add_cb, SSL_custom_ext_free_cb_ex free_cb, void * add_arg, SSL_custom_ext_parse_cb_ex parse_cb, void * parse_arg) (a0,d0,d1,a1,a2,a3,d2,d3)
int SSL_SESSION_is_resumable(const SSL_SESSION * s) (a0)
void SSL_CTX_set_record_padding_callback(SSL_CTX * ctx, size_t (*cb)(SSL *ssl, int type, size_t len, void *arg)) (a0,a1)
int SSL_set_record_padding_callback(SSL * ssl, size_t (*cb)(SSL *ssl, int type, size_t len, void *arg)) (a0,a1)
int SSL_CTX_set_block_padding(SSL_CTX * ctx, size_t block_size) (a0,d0)
void * SSL_CTX_get_record_padding_callback_arg(const SSL_CTX * ctx) (a0)
void * SSL_get_record_padding_callback_arg(const SSL * ssl) (a0)
int SSL_set_block_padding(SSL * ssl, size_t block_size) (a0,d0)
void SSL_set_record_padding_callback_arg(SSL * ssl, void * arg) (a0,a1)
void SSL_CTX_set_record_padding_callback_arg(SSL_CTX * ctx, void * arg) (a0,a1)
int SSL_CTX_use_serverinfo_ex(SSL_CTX * ctx, unsigned int version, const unsigned char * serverinfo, size_t serverinfo_length) (a0,d0,a1,d1)
int SSL_client_hello_get1_extensions_present(SSL * s, int ** out, size_t * outlen) (a0,a1,a2)
void SSL_set_psk_find_session_callback(SSL * s, SSL_psk_find_session_cb_func cb) (a0,a1)
void SSL_set_psk_use_session_callback(SSL * s, SSL_psk_use_session_cb_func cb) (a0,a1)
void SSL_CTX_set_psk_use_session_callback(SSL_CTX * ctx, SSL_psk_use_session_cb_func cb) (a0,a1)
void SSL_CTX_set_psk_find_session_callback(SSL_CTX * ctx, SSL_psk_find_session_cb_func cb) (a0,a1)
const EVP_MD * SSL_CIPHER_get_handshake_digest(const SSL_CIPHER * c) (a0)
int SSL_SESSION_set1_master_key(SSL_SESSION * sess, const unsigned char * in, size_t len) (a0,a1,d0)
int SSL_SESSION_set_cipher(SSL_SESSION * s, const SSL_CIPHER * cipher) (a0,a1)
int SSL_SESSION_set_protocol_version(SSL_SESSION * s, int version) (a0,d0)
const char * OPENSSL_cipher_name(const char * rfc_name) (a0)
int SSL_alloc_buffers(SSL * ssl) (a0)
int SSL_free_buffers(SSL * ssl) (a0)
SSL_SESSION * SSL_SESSION_dup(const SSL_SESSION * src) (a0)
const SSL_CIPHER * SSL_get_pending_cipher(const SSL * s) (a0)
uint16_t SSL_CIPHER_get_protocol_id(const SSL_CIPHER * c) (a0)
int SSL_SESSION_set_max_early_data(SSL_SESSION * s, uint32_t max_early_data) (a0,d0)
int SSL_SESSION_set1_alpn_selected(SSL_SESSION * s, const unsigned char * alpn, size_t len) (a0,a1,d0)
int SSL_SESSION_set1_hostname(SSL_SESSION * s, const char * hostname) (a0,a1)
void SSL_SESSION_get0_alpn_selected(const SSL_SESSION * s, const unsigned char ** alpn, size_t * len) (a0,a1,a2)
void DTLS_set_timer_cb(SSL * s, DTLS_timer_cb cb) (a0,a1)
int SSL_CTX_set_tlsext_max_fragment_length(SSL_CTX * ctx, uint8_t mode) (a0,d0)
int SSL_set_tlsext_max_fragment_length(SSL * ssl, uint8_t mode) (a0,d0)
uint8_t SSL_SESSION_get_max_fragment_length(const SSL_SESSION * sess) (a0)
int SSL_stateless(SSL * s) (a0)
int SSL_verify_client_post_handshake(SSL * s) (a0)
void SSL_set_post_handshake_auth(SSL * s, int val) (a0,d0)
int SSL_export_keying_material_early(SSL * s, unsigned char * out, size_t olen, const char * label, size_t llen, const unsigned char * context, size_t contextlen) (a0,a1,d0,a2,d1,a3,d2)
int SSL_CTX_use_cert_and_key(SSL_CTX * ctx, X509 * x509, EVP_PKEY * privatekey, STACK_OF(X509) * chain, int override) (a0,a1,a2,a3,d0)
int SSL_use_cert_and_key(SSL * ssl, X509 * x509, EVP_PKEY * privatekey, STACK_OF(X509) * chain, int override) (a0,a1,a2,a3,d0)
int SSL_SESSION_get0_ticket_appdata(SSL_SESSION * ss, void ** data, size_t * len) (a0,a1,a2)
int SSL_SESSION_set1_ticket_appdata(SSL_SESSION * ss, const void * data, size_t len) (a0,a1,d0)
int SSL_CTX_set_session_ticket_cb(SSL_CTX * ctx, SSL_CTX_generate_session_ticket_fn gen_cb, SSL_CTX_decrypt_session_ticket_fn dec_cb, void * arg) (a0,a1,a2,a3)
void SSL_CTX_set_stateless_cookie_generate_cb(SSL_CTX * ctx, int (*gen_stateless_cookie_cb)(SSL *ssl, unsigned char *cookie, size_t *cookie_len)) (a0,a1)
void SSL_CTX_set_stateless_cookie_verify_cb(SSL_CTX * ctx, int (*verify_stateless_cookie_cb)(SSL *ssl, const unsigned char *cookie, size_t cookie_len)) (a0,a1)
int SSL_CTX_set_ciphersuites(SSL_CTX * ctx, const char * str) (a0,a1)
int SSL_set_ciphersuites(SSL * s, const char * str) (a0,a1)
int SSL_set_num_tickets(SSL * s, size_t num_tickets) (a0,d0)
size_t SSL_CTX_get_num_tickets(const SSL_CTX * ctx) (a0)
size_t SSL_get_num_tickets(const SSL * s) (a0)
int SSL_CTX_set_num_tickets(SSL_CTX * ctx, size_t num_tickets) (a0,d0)
void SSL_CTX_set_allow_early_data_cb(SSL_CTX * ctx, SSL_allow_early_data_cb_fn cb, void * arg) (a0,a1,a2)
void SSL_set_allow_early_data_cb(SSL * s, SSL_allow_early_data_cb_fn cb, void * arg) (a0,a1,a2)
int SSL_set_recv_max_early_data(SSL * s, uint32_t recv_max_early_data) (a0,d0)
uint32_t SSL_get_recv_max_early_data(const SSL * s) (a0)
uint32_t SSL_CTX_get_recv_max_early_data(const SSL_CTX * ctx) (a0)
int SSL_CTX_set_recv_max_early_data(SSL_CTX * ctx, uint32_t recv_max_early_data) (a0,d0)
void SSL_CTX_set_post_handshake_auth(SSL_CTX * ctx, int val) (a0,d0)
int SSL_get_signature_type_nid(const SSL * s, int * pnid) (a0,a1)
void IPAddressRange_free(IPAddressRange * a) (a0)
TLS_FEATURE * TLS_FEATURE_new() ()
==reserve 1
const BIO_METHOD * BIO_f_linebuffer() ()
==reserve 1
IPAddressRange * IPAddressRange_new() ()
const ASN1_ITEM * IPAddressRange_it() ()
==reserve 1
IPAddressRange * d2i_IPAddressRange(IPAddressRange ** a, const unsigned char ** in, long len) (a0,a1,d0)
==reserve 2
void TLS_FEATURE_free(TLS_FEATURE * a) (a0)
int i2d_RSA_OAEP_PARAMS(const RSA_OAEP_PARAMS * a, unsigned char ** out) (a0,a1)
==reserve 1
int i2d_IPAddressRange(const IPAddressRange * a, unsigned char ** out) (a0,a1)
X509_OBJECT * X509_OBJECT_new() ()
ASN1_TYPE * PKCS12_get_attr(const PKCS12_SAFEBAG * bag, int attr_nid) (a0,d0)
void ECPKPARAMETERS_free(ECPKPARAMETERS * a) (a0)
ECPKPARAMETERS * ECPKPARAMETERS_new() ()
const ASN1_ITEM * ASN1_ITEM_lookup(const char * name) (a0)
const ASN1_ITEM * ASN1_ITEM_get(size_t i) (d0)
int BIO_read_ex(BIO * b, void * data, size_t dlen, size_t * readbytes) (a0,a1,d0,a2)
void BIO_set_callback_ex(BIO * b, BIO_callback_fn_ex callback) (a0,a1)
BIO_callback_fn_ex BIO_get_callback_ex(const BIO * b) (a0)
int BIO_meth_set_read_ex(BIO_METHOD * biom, int (*bread)(BIO *, char *, size_t, size_t *)) (a0,a1)
int (*)(BIO *, char *, size_t, size_t *) BIO_meth_get_read_ex(const BIO_METHOD * biom) (a0)
int BIO_write_ex(BIO * b, const void * data, size_t dlen, size_t * written) (a0,a1,d0,a2)
int (*)(BIO *, const char *, size_t, size_t *) BIO_meth_get_write_ex(const BIO_METHOD * biom) (a0)
int BIO_meth_set_write_ex(BIO_METHOD * biom, int (*bwrite)(BIO *, const char *, size_t, size_t *)) (a0,a1)
int EVP_PKEY_CTX_md(EVP_PKEY_CTX * ctx, int optype, int cmd, const char * md) (a0,d0,d1,a1)
int RSA_pkey_ctx_ctrl(EVP_PKEY_CTX * ctx, int optype, int cmd, int p1, void * p2) (a0,d0,d1,d2,a1)
int UI_method_set_ex_data(UI_METHOD * method, int idx, void * data) (a0,d0,a1)
const void * UI_method_get_ex_data(const UI_METHOD * method, int idx) (a0,d0)
UI_METHOD * UI_UTIL_wrap_read_pem_callback(pem_password_cb * cb, int rwflag) (a0,d0)
const unsigned char * EVP_PKEY_get0_poly1305(const EVP_PKEY * pkey, size_t * len) (a0,a1)
const unsigned char * EVP_PKEY_get0_siphash(const EVP_PKEY * pkey, size_t * len) (a0,a1)
const EVP_CIPHER * EVP_aria_256_ofb() ()
const EVP_CIPHER * EVP_aria_256_cfb128() ()
const EVP_CIPHER * EVP_aria_128_cfb1() ()
const EVP_CIPHER * EVP_aria_128_ecb() ()
const EVP_CIPHER * EVP_aria_128_cfb128() ()
const EVP_CIPHER * EVP_aria_192_ecb() ()
const EVP_CIPHER * EVP_aria_128_cbc() ()
const EVP_CIPHER * EVP_aria_192_ofb() ()
const EVP_CIPHER * EVP_aria_192_cbc() ()
const EVP_CIPHER * EVP_aria_192_cfb1() ()
const EVP_CIPHER * EVP_aria_128_cfb8() ()
const EVP_CIPHER * EVP_aria_256_cfb1() ()
const EVP_CIPHER * EVP_aria_192_cfb8() ()
const EVP_CIPHER * EVP_aria_256_cfb8() ()
const EVP_CIPHER * EVP_aria_256_cbc() ()
const EVP_CIPHER * EVP_aria_128_ofb() ()
const EVP_CIPHER * EVP_aria_192_cfb128() ()
const EVP_CIPHER * EVP_aria_256_ecb() ()
const EVP_CIPHER * EVP_aria_256_ctr() ()
const EVP_CIPHER * EVP_aria_128_ctr() ()
const EVP_CIPHER * EVP_aria_192_ctr() ()
const UI_METHOD * UI_null() ()
ENGINE * EC_KEY_get0_engine(const EC_KEY * eckey) (a0)
const ASN1_ITEM * INT32_it() ()
const ASN1_ITEM * UINT64_it() ()
const ASN1_ITEM * ZINT32_it() ()
const ASN1_ITEM * ZUINT64_it() ()
const ASN1_ITEM * INT64_it() ()
const ASN1_ITEM * ZUINT32_it() ()
const ASN1_ITEM * UINT32_it() ()
const ASN1_ITEM * ZINT64_it() ()
int BIO_lookup_ex(const char * host, const char * service, int lookup_type, int family, int socktype, int protocol, BIO_ADDRINFO ** res) (a0,a1,d0,d1,d2,d3,a2)
int X509_CRL_print_ex(BIO * out, X509_CRL * x, unsigned long nmflag) (a0,a1,d0)
int X509_SIG_INFO_get(const X509_SIG_INFO * siginf, int * mdnid, int * pknid, int * secbits, uint32_t * flags) (a0,a1,a2,a3,d0)
int X509_get_signature_info(X509 * x, int * mdnid, int * pknid, int * secbits, uint32_t * flags) (a0,a1,a2,a3,d0)
void X509_SIG_INFO_set(X509_SIG_INFO * siginf, int mdnid, int pknid, int secbits, uint32_t flags) (a0,d0,d1,d2,d3)
void ESS_CERT_ID_V2_free(ESS_CERT_ID_V2 * a) (a0)
ESS_SIGNING_CERT_V2 * ESS_SIGNING_CERT_V2_new() ()
ESS_SIGNING_CERT_V2 * d2i_ESS_SIGNING_CERT_V2(ESS_SIGNING_CERT_V2 ** a, const unsigned char ** pp, long length) (a0,a1,d0)
int i2d_ESS_CERT_ID_V2(const ESS_CERT_ID_V2 * a, unsigned char ** pp) (a0,a1)
ESS_CERT_ID_V2 * ESS_CERT_ID_V2_dup(const ESS_CERT_ID_V2 * a) (a0)
int TS_RESP_CTX_set_ess_cert_id_digest(TS_RESP_CTX * ctx, const EVP_MD * md) (a0,a1)
ESS_CERT_ID_V2 * d2i_ESS_CERT_ID_V2(ESS_CERT_ID_V2 ** a, const unsigned char ** pp, long length) (a0,a1,d0)
int i2d_ESS_SIGNING_CERT_V2(const ESS_SIGNING_CERT_V2 * a, unsigned char ** pp) (a0,a1)
int TS_CONF_set_ess_cert_id_digest(CONF * conf, const char * section, TS_RESP_CTX * ctx) (a0,a1,a2)
void ESS_SIGNING_CERT_V2_free(ESS_SIGNING_CERT_V2 * a) (a0)
ESS_SIGNING_CERT_V2 * ESS_SIGNING_CERT_V2_dup(const ESS_SIGNING_CERT_V2 * a) (a0)
ESS_CERT_ID_V2 * ESS_CERT_ID_V2_new() ()
int PEM_read_bio_ex(BIO * bp, char ** name, char ** header, unsigned char ** data, long * len, unsigned int flags) (a0,a1,a2,a3,d0,d1)
int PEM_bytes_read_bio_secmem(unsigned char ** pdata, long * plen, char ** pnm, const char * name, BIO * bp, pem_password_cb * cb, void * u) (a0,a1,a2,a3,d0,d1,d2)
int EVP_DigestSign(EVP_MD_CTX * ctx, unsigned char * sigret, size_t * siglen, const unsigned char * tbs, size_t tbslen) (a0,a1,a2,a3,d0)
int EVP_DigestVerify(EVP_MD_CTX * ctx, const unsigned char * sigret, size_t siglen, const unsigned char * tbs, size_t tbslen) (a0,a1,d0,a2,d1)
void *(*)(UI *, void *) UI_method_get_data_duplicator(const UI_METHOD * method) (a0)
int UI_method_set_data_duplicator(UI_METHOD * method, void *(*duplicator)(UI *ui, void *ui_data), void (*destructor)(UI *ui, void *ui_data)) (a0,a1,a2)
int UI_dup_user_data(UI * ui, void * user_data) (a0,a1)
void (*)(UI *, void *) UI_method_get_data_destructor(const UI_METHOD * method) (a0)
int ERR_load_strings_const(const ERR_STRING_DATA * str) (a0)
int ASN1_TIME_to_tm(const ASN1_TIME * s, struct tm * tm) (a0,a1)
int ASN1_TIME_set_string_X509(ASN1_TIME * s, const char * str) (a0,a1)
int OCSP_resp_get1_id(const OCSP_BASICRESP * bs, ASN1_OCTET_STRING ** pid, X509_NAME ** pname) (a0,a1,a2)
int OSSL_STORE_register_loader(OSSL_STORE_LOADER * loader) (a0)
int OSSL_STORE_LOADER_set_error(OSSL_STORE_LOADER * loader, OSSL_STORE_error_fn error_function) (a0,a1)
EVP_PKEY * OSSL_STORE_INFO_get0_PKEY(const OSSL_STORE_INFO * info) (a0)
int OSSL_STORE_INFO_get_type(const OSSL_STORE_INFO * info) (a0)
int ERR_load_OSSL_STORE_strings() ()
void OSSL_STORE_LOADER_free(OSSL_STORE_LOADER * loader) (a0)
EVP_PKEY * OSSL_STORE_INFO_get1_PKEY(const OSSL_STORE_INFO * info) (a0)
void OSSL_STORE_INFO_free(OSSL_STORE_INFO * info) (a0)
int OSSL_STORE_LOADER_set_eof(OSSL_STORE_LOADER * loader, OSSL_STORE_eof_fn eof_function) (a0,a1)
OSSL_STORE_LOADER * OSSL_STORE_LOADER_new(ENGINE * e, const char * scheme) (a0,a1)
X509 * OSSL_STORE_INFO_get0_CERT(const OSSL_STORE_INFO * info) (a0)
int OSSL_STORE_LOADER_set_close(OSSL_STORE_LOADER * loader, OSSL_STORE_close_fn close_function) (a0,a1)
OSSL_STORE_INFO * OSSL_STORE_INFO_new_PARAMS(EVP_PKEY * params) (a0)
OSSL_STORE_INFO * OSSL_STORE_INFO_new_PKEY(EVP_PKEY * pkey) (a0)
EVP_PKEY * OSSL_STORE_INFO_get1_PARAMS(const OSSL_STORE_INFO * info) (a0)
X509_CRL * OSSL_STORE_INFO_get1_CRL(const OSSL_STORE_INFO * info) (a0)
int OSSL_STORE_error(OSSL_STORE_CTX * ctx) (a0)
X509 * OSSL_STORE_INFO_get1_CERT(const OSSL_STORE_INFO * info) (a0)
EVP_PKEY * OSSL_STORE_INFO_get0_PARAMS(const OSSL_STORE_INFO * info) (a0)
const char * OSSL_STORE_INFO_type_string(int type) (d0)
char * OSSL_STORE_INFO_get1_NAME(const OSSL_STORE_INFO * info) (a0)
int OSSL_STORE_LOADER_set_load(OSSL_STORE_LOADER * loader, OSSL_STORE_load_fn load_function) (a0,a1)
const char * OSSL_STORE_LOADER_get0_scheme(const OSSL_STORE_LOADER * loader) (a0)
OSSL_STORE_CTX * OSSL_STORE_open(const char * uri, const UI_METHOD * ui_method, void * ui_data, OSSL_STORE_post_process_info_fn post_process, void * post_process_data) (a0,a1,a2,a3,d0)
int OSSL_STORE_close(OSSL_STORE_CTX * ctx) (a0)
OSSL_STORE_INFO * OSSL_STORE_INFO_new_CERT(X509 * x509) (a0)
X509_CRL * OSSL_STORE_INFO_get0_CRL(const OSSL_STORE_INFO * info) (a0)
OSSL_STORE_INFO * OSSL_STORE_load(OSSL_STORE_CTX * ctx) (a0)
const char * OSSL_STORE_INFO_get0_NAME(const OSSL_STORE_INFO * info) (a0)
OSSL_STORE_LOADER * OSSL_STORE_unregister_loader(const char * scheme) (a0)
OSSL_STORE_INFO * OSSL_STORE_INFO_new_CRL(X509_CRL * crl) (a0)
OSSL_STORE_INFO * OSSL_STORE_INFO_new_NAME(char * name) (a0)
int OSSL_STORE_eof(OSSL_STORE_CTX * ctx) (a0)
int OSSL_STORE_LOADER_set_open(OSSL_STORE_LOADER * loader, OSSL_STORE_open_fn open_function) (a0,a1)
int OSSL_STORE_LOADER_set_ctrl(OSSL_STORE_LOADER * loader, OSSL_STORE_ctrl_fn ctrl_function) (a0,a1)
int OSSL_STORE_vctrl(OSSL_STORE_CTX * ctx, int cmd, va_list args) (a0,d0,a1)
==varargs
int OSSL_STORE_ctrl(OSSL_STORE_CTX * ctx, int cmd, long dummy, ...) (a0,d0,a1)
const char * OSSL_STORE_INFO_get0_NAME_description(const OSSL_STORE_INFO * info) (a0)
int OSSL_STORE_INFO_set0_NAME_description(OSSL_STORE_INFO * info, char * desc) (a0,a1)
char * OSSL_STORE_INFO_get1_NAME_description(const OSSL_STORE_INFO * info) (a0)
int OSSL_STORE_do_all_loaders(void (*do_function)(const OSSL_STORE_LOADER *loader, void *do_arg), void * do_arg) (a0,a1)
const ENGINE * OSSL_STORE_LOADER_get0_engine(const OSSL_STORE_LOADER * loader) (a0)
==reserve 11
const EVP_MD * EVP_sha3_224() ()
const EVP_MD * EVP_sha3_256() ()
const EVP_MD * EVP_sha3_384() ()
const EVP_MD * EVP_sha3_512() ()
const EVP_MD * EVP_shake128() ()
const EVP_MD * EVP_shake256() ()
SCRYPT_PARAMS * SCRYPT_PARAMS_new() ()
void SCRYPT_PARAMS_free(SCRYPT_PARAMS * a) (a0)
int i2d_SCRYPT_PARAMS(const SCRYPT_PARAMS * a, unsigned char ** out) (a0,a1)
SCRYPT_PARAMS * d2i_SCRYPT_PARAMS(SCRYPT_PARAMS ** a, const unsigned char ** in, long len) (a0,a1,d0)
const ASN1_ITEM * SCRYPT_PARAMS_it() ()
const EVP_PKEY_METHOD * EVP_PKEY_meth_get0(size_t idx) (d0)
size_t EVP_PKEY_meth_get_count() ()
==reserve 1
int RAND_priv_bytes(unsigned char * buf, int num) (a0,d0)
int BN_priv_rand(BIGNUM * rnd, int bits, int top, int bottom) (a0,d0,d1,d2)
int BN_priv_rand_range(BIGNUM * rnd, const BIGNUM * range) (a0,a1)
int ASN1_TIME_normalize(ASN1_TIME * s) (a0)
int ASN1_TIME_cmp_time_t(const ASN1_TIME * s, time_t t) (a0,d0)
int ASN1_TIME_compare(const ASN1_TIME * a, const ASN1_TIME * b) (a0,a1)
int EVP_PKEY_CTX_ctrl_uint64(EVP_PKEY_CTX * ctx, int keytype, int optype, int cmd, uint64_t value) (a0,d0,d1,d4,d2-d3)
int EVP_DigestFinalXOF(EVP_MD_CTX * ctx, unsigned char * md, size_t len) (a0,a1,d0)
int ERR_clear_last_mark() ()
==reserve 1
const EVP_CIPHER * EVP_aria_192_ccm() ()
const EVP_CIPHER * EVP_aria_256_gcm() ()
const EVP_CIPHER * EVP_aria_256_ccm() ()
const EVP_CIPHER * EVP_aria_128_gcm() ()
const EVP_CIPHER * EVP_aria_128_ccm() ()
const EVP_CIPHER * EVP_aria_192_gcm() ()
int UI_get_result_length(UI * ui, int i) (a0,d0)
int UI_set_result_ex(UI * ui, UI_STRING * uis, const char * result, int len) (a0,a1,a2,d0)
int UI_get_result_string_length(UI_STRING * uis) (a0)
int EVP_PKEY_check(EVP_PKEY_CTX * ctx) (a0)
void EVP_PKEY_meth_set_check(EVP_PKEY_METHOD * pmeth, int (*check)(EVP_PKEY *pkey)) (a0,a1)
void EVP_PKEY_meth_get_check(const EVP_PKEY_METHOD * pmeth, int (**pcheck)(EVP_PKEY *pkey)) (a0,a1)
int EVP_PKEY_meth_remove(const EVP_PKEY_METHOD * pmeth) (a0)
int OPENSSL_sk_reserve(OPENSSL_STACK * st, int n) (a0,d0)
DH * DH_new_by_nid(int nid) (d0)
int DH_get_nid(const DH * dh) (a0)
OPENSSL_STACK * OPENSSL_sk_new_reserve(OPENSSL_sk_compfunc c, int n) (a0,d0)
void EVP_PKEY_asn1_set_check(EVP_PKEY_ASN1_METHOD * ameth, int (*pkey_check)(const EVP_PKEY *pk)) (a0,a1)
void EVP_PKEY_asn1_set_siginf(EVP_PKEY_ASN1_METHOD * ameth, int (*siginf_set)(X509_SIG_INFO *siginf, const X509_ALGOR *alg, const ASN1_STRING *sig)) (a0,a1)
const EVP_CIPHER * EVP_sm4_ctr() ()
const EVP_CIPHER * EVP_sm4_cbc() ()
const EVP_CIPHER * EVP_sm4_ofb() ()
const EVP_CIPHER * EVP_sm4_ecb() ()
const EVP_CIPHER * EVP_sm4_cfb128() ()
const EVP_MD * EVP_sm3() ()
int RSA_get0_multi_prime_factors(const RSA * r, const BIGNUM ** primes) (a0,a1)
int EVP_PKEY_public_check(EVP_PKEY_CTX * ctx) (a0)
int EVP_PKEY_param_check(EVP_PKEY_CTX * ctx) (a0)
void EVP_PKEY_meth_set_public_check(EVP_PKEY_METHOD * pmeth, int (*check)(EVP_PKEY *pkey)) (a0,a1)
void EVP_PKEY_meth_set_param_check(EVP_PKEY_METHOD * pmeth, int (*check)(EVP_PKEY *pkey)) (a0,a1)
void EVP_PKEY_meth_get_public_check(const EVP_PKEY_METHOD * pmeth, int (**pcheck)(EVP_PKEY *pkey)) (a0,a1)
void EVP_PKEY_meth_get_param_check(const EVP_PKEY_METHOD * pmeth, int (**pcheck)(EVP_PKEY *pkey)) (a0,a1)
void EVP_PKEY_asn1_set_public_check(EVP_PKEY_ASN1_METHOD * ameth, int (*pkey_pub_check)(const EVP_PKEY *pk)) (a0,a1)
void EVP_PKEY_asn1_set_param_check(EVP_PKEY_ASN1_METHOD * ameth, int (*pkey_param_check)(const EVP_PKEY *pk)) (a0,a1)
int DH_check_ex(const DH * dh) (a0)
int DH_check_pub_key_ex(const DH * dh, const BIGNUM * pub_key) (a0,a1)
int DH_check_params_ex(const DH * dh) (a0)
int RSA_generate_multi_prime_key(RSA * rsa, int bits, int primes, BIGNUM * e, BN_GENCB * cb) (a0,d0,d1,a1,a2)
int RSA_get_multi_prime_extra_count(const RSA * r) (a0)
int OCSP_resp_get0_signer(OCSP_BASICRESP * bs, X509 ** signer, STACK_OF(X509) * extra_certs) (a0,a1,a2)
int RSA_get0_multi_prime_crt_params(const RSA * r, const BIGNUM ** exps, const BIGNUM ** coeffs) (a0,a1,a2)
int RSA_set0_multi_prime_params(RSA * r, BIGNUM ** primes, BIGNUM ** exps, BIGNUM ** coeffs, int pnum) (a0,a1,a2,a3,d0)
int RSA_get_version(RSA * r) (a0)
int (*)(RSA *rsa, int bits, int primes, BIGNUM *e, BN_GENCB *cb) RSA_meth_get_multi_prime_keygen(const RSA_METHOD * meth) (a0)
int RSA_meth_set_multi_prime_keygen(RSA_METHOD * meth, int (*keygen)(RSA *rsa, int bits, int primes, BIGNUM *e, BN_GENCB *cb)) (a0,a1)
==reserve 2
const ASN1_OCTET_STRING * PROFESSION_INFO_get0_addProfessionInfo(const PROFESSION_INFO * pi) (a0)
void ADMISSION_SYNTAX_free(ADMISSION_SYNTAX * a) (a0)
ADMISSION_SYNTAX * d2i_ADMISSION_SYNTAX(ADMISSION_SYNTAX ** a, const unsigned char ** in, long len) (a0,a1,d0)
void NAMING_AUTHORITY_set0_authorityId(NAMING_AUTHORITY * n, ASN1_OBJECT* namingAuthorityId) (a0,a1)
void NAMING_AUTHORITY_set0_authorityURL(NAMING_AUTHORITY * n, ASN1_IA5STRING* namingAuthorityUrl) (a0,a1)
PROFESSION_INFO * d2i_PROFESSION_INFO(PROFESSION_INFO ** a, const unsigned char ** in, long len) (a0,a1,d0)
const ASN1_ITEM * NAMING_AUTHORITY_it() ()
const STACK_OF(ADMISSIONS) * ADMISSION_SYNTAX_get0_contentsOfAdmissions(const ADMISSION_SYNTAX * as) (a0)
void PROFESSION_INFO_set0_professionItems(PROFESSION_INFO * pi, STACK_OF(ASN1_STRING) * as) (a0,a1)
NAMING_AUTHORITY * NAMING_AUTHORITY_new() ()
const ASN1_IA5STRING * NAMING_AUTHORITY_get0_authorityURL(const NAMING_AUTHORITY * n) (a0)
const GENERAL_NAME * ADMISSION_SYNTAX_get0_admissionAuthority(const ADMISSION_SYNTAX * as) (a0)
PROFESSION_INFO * PROFESSION_INFO_new() ()
ADMISSIONS * ADMISSIONS_new() ()
void ADMISSION_SYNTAX_set0_admissionAuthority(ADMISSION_SYNTAX * as, GENERAL_NAME * aa) (a0,a1)
const STACK_OF(ASN1_OBJECT) * PROFESSION_INFO_get0_professionOIDs(const PROFESSION_INFO * pi) (a0)
const ASN1_ITEM * PROFESSION_INFO_it() ()
int i2d_PROFESSION_INFO(const PROFESSION_INFO * a, unsigned char ** out) (a0,a1)
void ADMISSIONS_set0_professionInfos(ADMISSIONS * a, PROFESSION_INFOS * pi) (a0,a1)
const NAMING_AUTHORITY * PROFESSION_INFO_get0_namingAuthority(const PROFESSION_INFO * pi) (a0)
void PROFESSION_INFO_free(PROFESSION_INFO * a) (a0)
void PROFESSION_INFO_set0_addProfessionInfo(PROFESSION_INFO * pi, ASN1_OCTET_STRING * aos) (a0,a1)
void PROFESSION_INFO_set0_registrationNumber(PROFESSION_INFO * pi, ASN1_PRINTABLESTRING * rn) (a0,a1)
void ADMISSION_SYNTAX_set0_contentsOfAdmissions(ADMISSION_SYNTAX * as, STACK_OF(ADMISSIONS) * a) (a0,a1)
const ASN1_OBJECT * NAMING_AUTHORITY_get0_authorityId(const NAMING_AUTHORITY * n) (a0)
const ASN1_ITEM * ADMISSION_SYNTAX_it() ()
int i2d_ADMISSION_SYNTAX(const ADMISSION_SYNTAX * a, unsigned char ** out) (a0,a1)
const ASN1_STRING * NAMING_AUTHORITY_get0_authorityText(const NAMING_AUTHORITY * n) (a0)
void PROFESSION_INFO_set0_namingAuthority(PROFESSION_INFO * pi, NAMING_AUTHORITY * na) (a0,a1)
int i2d_NAMING_AUTHORITY(const NAMING_AUTHORITY * a, unsigned char ** out) (a0,a1)
void NAMING_AUTHORITY_free(NAMING_AUTHORITY * a) (a0)
void ADMISSIONS_set0_admissionAuthority(ADMISSIONS * a, GENERAL_NAME * aa) (a0,a1)
void ADMISSIONS_free(ADMISSIONS * a) (a0)
const ASN1_PRINTABLESTRING * PROFESSION_INFO_get0_registrationNumber(const PROFESSION_INFO * pi) (a0)
ADMISSIONS * d2i_ADMISSIONS(ADMISSIONS ** a, const unsigned char ** in, long len) (a0,a1,d0)
int i2d_ADMISSIONS(const ADMISSIONS * a, unsigned char ** out) (a0,a1)
const STACK_OF(ASN1_STRING) * PROFESSION_INFO_get0_professionItems(const PROFESSION_INFO * pi) (a0)
const GENERAL_NAME * ADMISSIONS_get0_admissionAuthority(const ADMISSIONS * a) (a0)
void PROFESSION_INFO_set0_professionOIDs(PROFESSION_INFO * pi, STACK_OF(ASN1_OBJECT) * po) (a0,a1)
NAMING_AUTHORITY * d2i_NAMING_AUTHORITY(NAMING_AUTHORITY ** a, const unsigned char ** in, long len) (a0,a1,d0)
const ASN1_ITEM * ADMISSIONS_it() ()
const NAMING_AUTHORITY * ADMISSIONS_get0_namingAuthority(const ADMISSIONS * a) (a0)
void NAMING_AUTHORITY_set0_authorityText(NAMING_AUTHORITY * n, ASN1_STRING* namingAuthorityText) (a0,a1)
void ADMISSIONS_set0_namingAuthority(ADMISSIONS * a, NAMING_AUTHORITY * na) (a0,a1)
const PROFESSION_INFOS * ADMISSIONS_get0_professionInfos(const ADMISSIONS * a) (a0)
ADMISSION_SYNTAX * ADMISSION_SYNTAX_new() ()
const EVP_MD * EVP_sha512_256() ()
const EVP_MD * EVP_sha512_224() ()
int OCSP_basic_sign_ctx(OCSP_BASICRESP * brsp, X509 * signer, EVP_MD_CTX * ctx, STACK_OF(X509) * certs, unsigned long flags) (a0,a1,a2,a3,d0)
==reserve 2
OSSL_STORE_SEARCH * OSSL_STORE_SEARCH_by_alias(const char * alias) (a0)
int BIO_bind(int sock, const BIO_ADDR * addr, int options) (d0,a0,d1)
int OSSL_STORE_LOADER_set_expect(OSSL_STORE_LOADER * loader, OSSL_STORE_expect_fn expect_function) (a0,a1)
int OSSL_STORE_expect(OSSL_STORE_CTX * ctx, int expected_type) (a0,d0)
OSSL_STORE_SEARCH * OSSL_STORE_SEARCH_by_key_fingerprint(const EVP_MD * digest, const unsigned char * bytes, size_t len) (a0,a1,d0)
const ASN1_INTEGER * OSSL_STORE_SEARCH_get0_serial(const OSSL_STORE_SEARCH * criterion) (a0)
OSSL_STORE_SEARCH * OSSL_STORE_SEARCH_by_name(X509_NAME * name) (a0)
int OSSL_STORE_supports_search(OSSL_STORE_CTX * ctx, int search_type) (a0,d0)
int OSSL_STORE_find(OSSL_STORE_CTX * ctx, const OSSL_STORE_SEARCH * search) (a0,a1)
int OSSL_STORE_SEARCH_get_type(const OSSL_STORE_SEARCH * criterion) (a0)
const unsigned char * OSSL_STORE_SEARCH_get0_bytes(const OSSL_STORE_SEARCH * criterion, size_t * length) (a0,a1)
const char * OSSL_STORE_SEARCH_get0_string(const OSSL_STORE_SEARCH * criterion) (a0)
OSSL_STORE_SEARCH * OSSL_STORE_SEARCH_by_issuer_serial(X509_NAME * name, const ASN1_INTEGER * serial) (a0,a1)
X509_NAME * OSSL_STORE_SEARCH_get0_name(const OSSL_STORE_SEARCH * criterion) (a0)
const ASN1_OCTET_STRING * X509_get0_authority_key_id(X509 * x) (a0)
int OSSL_STORE_LOADER_set_find(OSSL_STORE_LOADER * loader, OSSL_STORE_find_fn find_function) (a0,a1)
void OSSL_STORE_SEARCH_free(OSSL_STORE_SEARCH * search) (a0)
const EVP_MD * OSSL_STORE_SEARCH_get0_digest(const OSSL_STORE_SEARCH * criterion) (a0)
==reserve 1
EVP_PKEY * EVP_PKEY_new_raw_private_key(int type, ENGINE * e, const unsigned char * priv, size_t len) (d0,a0,a1,d1)
EVP_PKEY * EVP_PKEY_new_raw_public_key(int type, ENGINE * e, const unsigned char * pub, size_t len) (d0,a0,a1,d1)
EVP_PKEY * EVP_PKEY_new_CMAC_key(ENGINE * e, const unsigned char * priv, size_t len, const EVP_CIPHER * cipher) (a0,a1,d0,a2)
void EVP_PKEY_asn1_set_set_priv_key(EVP_PKEY_ASN1_METHOD * ameth, int (*set_priv_key)(EVP_PKEY *pk, const unsigned char *priv, size_t len)) (a0,a1)
void EVP_PKEY_asn1_set_set_pub_key(EVP_PKEY_ASN1_METHOD * ameth, int (*set_pub_key)(EVP_PKEY *pk, const unsigned char *pub, size_t len)) (a0,a1)
==reserve 1
unsigned int X509_VERIFY_PARAM_get_hostflags(const X509_VERIFY_PARAM * param) (a0)
const BIGNUM * DH_get0_p(const DH * dh) (a0)
const BIGNUM * DH_get0_q(const DH * dh) (a0)
const BIGNUM * DH_get0_g(const DH * dh) (a0)
const BIGNUM * DH_get0_priv_key(const DH * dh) (a0)
const BIGNUM * DH_get0_pub_key(const DH * dh) (a0)
const BIGNUM * DSA_get0_priv_key(const DSA * d) (a0)
const BIGNUM * DSA_get0_pub_key(const DSA * d) (a0)
const BIGNUM * DSA_get0_q(const DSA * d) (a0)
const BIGNUM * DSA_get0_p(const DSA * d) (a0)
const BIGNUM * DSA_get0_g(const DSA * d) (a0)
const BIGNUM * RSA_get0_dmp1(const RSA * r) (a0)
const BIGNUM * RSA_get0_d(const RSA * d) (a0)
const BIGNUM * RSA_get0_n(const RSA * d) (a0)
const BIGNUM * RSA_get0_dmq1(const RSA * r) (a0)
const BIGNUM * RSA_get0_e(const RSA * d) (a0)
const BIGNUM * RSA_get0_q(const RSA * d) (a0)
const BIGNUM * RSA_get0_p(const RSA * d) (a0)
const BIGNUM * RSA_get0_iqmp(const RSA * r) (a0)
const BIGNUM * ECDSA_SIG_get0_r(const ECDSA_SIG * sig) (a0)
const BIGNUM * ECDSA_SIG_get0_s(const ECDSA_SIG * sig) (a0)
X509_LOOKUP_get_by_fingerprint_fn X509_LOOKUP_meth_get_get_by_fingerprint(const X509_LOOKUP_METHOD * method) (a0)
X509_LOOKUP_METHOD * X509_LOOKUP_meth_new(const char * name) (a0)
int (*)(X509_LOOKUP *ctx) X509_LOOKUP_meth_get_init(const X509_LOOKUP_METHOD* method) (a0)
X509_LOOKUP_get_by_alias_fn X509_LOOKUP_meth_get_get_by_alias(const X509_LOOKUP_METHOD * method) (a0)
int X509_LOOKUP_meth_set_new_item(X509_LOOKUP_METHOD * method, int (*new_item)(X509_LOOKUP *ctx)) (a0,a1)
int X509_LOOKUP_meth_set_shutdown(X509_LOOKUP_METHOD * method, int (*__shutdown)(X509_LOOKUP *ctx)) (a0,a1)
int (*)(X509_LOOKUP *ctx) X509_LOOKUP_meth_get_new_item(const X509_LOOKUP_METHOD* method) (a0)
int X509_LOOKUP_meth_set_ctrl(X509_LOOKUP_METHOD * method, X509_LOOKUP_ctrl_fn ctrl_fn) (a0,a1)
int X509_LOOKUP_meth_set_get_by_issuer_serial(X509_LOOKUP_METHOD * method, X509_LOOKUP_get_by_issuer_serial_fn fn) (a0,a1)
X509_STORE * X509_LOOKUP_get_store(const X509_LOOKUP * ctx) (a0)
X509_LOOKUP_ctrl_fn X509_LOOKUP_meth_get_ctrl(const X509_LOOKUP_METHOD * method) (a0)
int X509_LOOKUP_meth_set_get_by_alias(X509_LOOKUP_METHOD * method, X509_LOOKUP_get_by_alias_fn fn) (a0,a1)
X509_LOOKUP_get_by_subject_fn X509_LOOKUP_meth_get_get_by_subject(const X509_LOOKUP_METHOD * method) (a0)
void (*)(X509_LOOKUP *ctx) X509_LOOKUP_meth_get_free(const X509_LOOKUP_METHOD* method) (a0)
int X509_LOOKUP_meth_set_get_by_subject(X509_LOOKUP_METHOD * method, X509_LOOKUP_get_by_subject_fn fn) (a0,a1)
int X509_LOOKUP_meth_set_free(X509_LOOKUP_METHOD * method, void (*free_fn)(X509_LOOKUP *ctx)) (a0,a1)
int (*)(X509_LOOKUP *ctx) X509_LOOKUP_meth_get_shutdown(const X509_LOOKUP_METHOD* method) (a0)
int X509_LOOKUP_set_method_data(X509_LOOKUP * ctx, void * data) (a0,a1)
void * X509_LOOKUP_get_method_data(const X509_LOOKUP * ctx) (a0)
int X509_LOOKUP_meth_set_get_by_fingerprint(X509_LOOKUP_METHOD * method, X509_LOOKUP_get_by_fingerprint_fn fn) (a0,a1)
void X509_LOOKUP_meth_free(X509_LOOKUP_METHOD * method) (a0)
int X509_OBJECT_set1_X509(X509_OBJECT * a, X509 * obj) (a0,a1)
X509_LOOKUP_get_by_issuer_serial_fn X509_LOOKUP_meth_get_get_by_issuer_serial(const X509_LOOKUP_METHOD * method) (a0)
int X509_LOOKUP_meth_set_init(X509_LOOKUP_METHOD * method, int (*init)(X509_LOOKUP *ctx)) (a0,a1)
int X509_OBJECT_set1_X509_CRL(X509_OBJECT * a, X509_CRL * obj) (a0,a1)
int EVP_PKEY_get_raw_public_key(const EVP_PKEY * pkey, unsigned char * pub, size_t * len) (a0,a1,a2)
int EVP_PKEY_get_raw_private_key(const EVP_PKEY * pkey, unsigned char * priv, size_t * len) (a0,a1,a2)
void EVP_PKEY_asn1_set_get_priv_key(EVP_PKEY_ASN1_METHOD * ameth, int (*get_priv_key)(const EVP_PKEY *pk, unsigned char *priv, size_t *len)) (a0,a1)
void EVP_PKEY_asn1_set_get_pub_key(EVP_PKEY_ASN1_METHOD * ameth, int (*get_pub_key)(const EVP_PKEY *pk, unsigned char *pub, size_t *len)) (a0,a1)
==reserve 1
void RAND_keep_random_devices_open(int keep) (d0)
int EC_POINT_set_compressed_coordinates(const EC_GROUP * group, EC_POINT * p, const BIGNUM * x, int y_bit, BN_CTX * ctx) (a0,a1,a2,d0,a3)
int EC_POINT_set_affine_coordinates(const EC_GROUP * group, EC_POINT * p, const BIGNUM * x, const BIGNUM * y, BN_CTX * ctx) (a0,a1,a2,a3,d0)
int EC_POINT_get_affine_coordinates(const EC_GROUP * group, const EC_POINT * p, BIGNUM * x, BIGNUM * y, BN_CTX * ctx) (a0,a1,a2,a3,d0)
int EC_GROUP_set_curve(EC_GROUP * group, const BIGNUM * p, const BIGNUM * a, const BIGNUM * b, BN_CTX * ctx) (a0,a1,a2,a3,d0)
int EC_GROUP_get_curve(const EC_GROUP * group, BIGNUM * p, BIGNUM * a, BIGNUM * b, BN_CTX * ctx) (a0,a1,a2,a3,d0)
const X509_ALGOR * OCSP_resp_get0_tbs_sigalg(const OCSP_BASICRESP * bs) (a0)
const OCSP_RESPDATA * OCSP_resp_get0_respdata(const OCSP_BASICRESP * bs) (a0)
void EVP_MD_CTX_set_pkey_ctx(EVP_MD_CTX * ctx, EVP_PKEY_CTX * pctx) (a0,a1)
void EVP_PKEY_meth_set_digest_custom(EVP_PKEY_METHOD * pmeth, int (*digest_custom)(EVP_PKEY_CTX *ctx, EVP_MD_CTX *mctx)) (a0,a1)
void EVP_PKEY_meth_get_digest_custom(const EVP_PKEY_METHOD * pmeth, int (**pdigest_custom)(EVP_PKEY_CTX *ctx, EVP_MD_CTX *mctx)) (a0,a1)
const char * OPENSSL_DIR_read(OPENSSL_DIR_CTX ** ctx, const char * directory) (a0,a1)
int OPENSSL_DIR_end(OPENSSL_DIR_CTX ** ctx) (a0)
==reserve 2
ENGINE * EVP_PKEY_get0_engine(const EVP_PKEY * pkey) (a0)
const ASN1_INTEGER * X509_get0_authority_serial(X509 * x) (a0)
const GENERAL_NAMES * X509_get0_authority_issuer(X509 * x) (a0)
void EVP_PKEY_meth_set_digestsign(EVP_PKEY_METHOD * pmeth, int (*digestsign)(EVP_MD_CTX *ctx, unsigned char *sig, size_t *siglen, const unsigned char *tbs, size_t tbslen)) (a0,a1)
void EVP_PKEY_meth_set_digestverify(EVP_PKEY_METHOD * pmeth, int (*digestverify)(EVP_MD_CTX *ctx, const unsigned char *sig, size_t siglen, const unsigned char *tbs, size_t tbslen)) (a0,a1)
void EVP_PKEY_meth_get_digestverify(const EVP_PKEY_METHOD * pmeth, int (**digestverify)(EVP_MD_CTX *ctx, const unsigned char *sig, size_t siglen, const unsigned char *tbs, size_t tbslen)) (a0,a1)
void EVP_PKEY_meth_get_digestsign(const EVP_PKEY_METHOD * pmeth, int (**digestsign)(EVP_MD_CTX *ctx, unsigned char *sig, size_t *siglen, const unsigned char *tbs, size_t tbslen)) (a0,a1)
const RSA_PSS_PARAMS * RSA_get0_pss_params(const RSA * r) (a0)
int X509_ALGOR_copy(X509_ALGOR * dest, const X509_ALGOR * src) (a0,a1)
void X509_REQ_set0_signature(X509_REQ * req, ASN1_BIT_STRING * psig) (a0,a1)
int X509_REQ_set1_signature_algo(X509_REQ * req, X509_ALGOR * palg) (a0,a1)
int EC_KEY_decoded_from_explicit_params(const EC_KEY * key) (a0)
int RSA_X931_derive_ex_amiga_1(RSA * rsa, BIGNUM * p1, BIGNUM * p2, BIGNUM * q1, BIGNUM * q2, const BIGNUM * Xp1, void * moreargs) (a0,a1,a2,d0,d1,d2,a3)
void * RSA_X931_derive_ex_amiga_2(const BIGNUM * Xp2, const BIGNUM * Xp, const BIGNUM * Xq1, const BIGNUM * Xq2, const BIGNUM * Xq, const BIGNUM * e, BN_GENCB * cb) (a0,a1,a2,d0,d1,d2,a3)
==reserve 1
int SSL_CTX_set_async_callback(SSL_CTX * ctx, SSL_async_callback_fn callback) (a0,a1)
int SSL_CTX_set_async_callback_arg(SSL_CTX * ctx, void * arg) (a0,a1)
int SSL_set_async_callback(SSL * s, SSL_async_callback_fn callback) (a0,a1)
int SSL_set_async_callback_arg(SSL * s, void * arg) (a0,a1)
int SSL_get_async_status(SSL * s, int * status) (a0,a1)
int SSL_sendfile(SSL * s, int fd, off_t offset, size_t size, int flags) (a0,d0,d1,d2,d3)
const char * OSSL_default_cipher_list() ()
const char * OSSL_default_ciphersuites() ()
int SSL_add_store_cert_subjects_to_stack(STACK_OF(X509_NAME) * stackCAs, const char * uri) (a0,a1)
int SSL_CTX_set_default_verify_store(SSL_CTX * ctx) (a0)
int SSL_CTX_load_verify_file(SSL_CTX * ctx, const char * CAfile) (a0,a1)
int SSL_CTX_load_verify_dir(SSL_CTX * ctx, const char * CApath) (a0,a1)
int SSL_CTX_load_verify_store(SSL_CTX * ctx, const char * CAstore) (a0,a1)
int SSL_CTX_set_tlsext_ticket_key_evp_cb(SSL_CTX * ctx, int (*fp)(SSL *, unsigned char *, unsigned char *, EVP_CIPHER_CTX *, EVP_MAC_CTX *, int)) (a0,a1)
SSL_CTX * SSL_CTX_new_ex(OSSL_LIB_CTX * libctx, const char * propq, const SSL_METHOD * meth) (a0,a1,a2)
int SSL_new_session_ticket(SSL * s) (a0)
X509 * SSL_get0_peer_certificate(const SSL * s) (a0)
STACK_OF(X509_NAME) * SSL_load_client_CA_file_ex(const char * file, OSSL_LIB_CTX * libctx, const char * propq) (a0,a1,a2)
int SSL_set0_tmp_dh_pkey(SSL * s, EVP_PKEY * dhpkey) (a0,a1)
int SSL_CTX_set0_tmp_dh_pkey(SSL_CTX * ctx, EVP_PKEY * dhpkey) (a0,a1)
const char * SSL_group_to_name(SSL * s, int id) (a0,d0)
X509_CRL * X509_CRL_load_http(const char * url, BIO * bio, BIO * rbio, int timeout) (a0,a1,a2,d0)
int OSSL_HTTP_parse_url(const char * url, int * pssl, char ** puser, char ** phost, char ** pport, int * pport_num, char ** ppath, char ** pquery, char ** pfrag) (a0,a1,a2,a3,d0,d1,d2,d3,d4)
BIO * OSSL_HTTP_REQ_CTX_exchange(OSSL_HTTP_REQ_CTX * rctx) (a0)
OSSL_HTTP_REQ_CTX * OSSL_HTTP_REQ_CTX_new(BIO * wbio, BIO * rbio, int buf_size) (a0,a1,d0)
X509 * X509_load_http(const char * url, BIO * bio, BIO * rbio, int timeout) (a0,a1,a2,d0)
unsigned long X509_NAME_hash_ex(const X509_NAME * x, OSSL_LIB_CTX * libctx, const char * propq, int * ok) (a0,a1,a2,a3)
int OSSL_HTTP_REQ_CTX_set_request_line(OSSL_HTTP_REQ_CTX * rctx, int method_POST, const char * server, const char * port, const char * path) (a0,d0,a1,a2,a3)
int OSSL_HTTP_REQ_CTX_set1_req(OSSL_HTTP_REQ_CTX * rctx, const char * content_type, const ASN1_ITEM * it, const ASN1_VALUE * req) (a0,a1,a2,a3)
EVP_MAC_CTX * EVP_MAC_CTX_new(EVP_MAC * mac) (a0)
void EVP_MAC_CTX_free(EVP_MAC_CTX * ctx) (a0)
EVP_MAC_CTX * EVP_MAC_CTX_dup(const EVP_MAC_CTX * src) (a0)
EVP_MAC * EVP_MAC_CTX_get0_mac(EVP_MAC_CTX * ctx) (a0)
size_t EVP_MAC_CTX_get_mac_size(EVP_MAC_CTX * ctx) (a0)
unsigned char * EVP_Q_mac(OSSL_LIB_CTX * libctx, const char * name, const char * propq, const char * subalg, const OSSL_PARAM * params, const void * key, size_t keylen, const unsigned char * data, size_t datalen, unsigned char * out, size_t outsize, size_t * outlen) (a0,a1,a2,a3,d0,d1,d2,d3,d4,d5,d6,d7)
int EVP_MAC_init(EVP_MAC_CTX * ctx, const unsigned char * key, size_t keylen, const OSSL_PARAM * params) (a0,a1,d0,a2)
int EVP_MAC_update(EVP_MAC_CTX * ctx, const unsigned char * data, size_t datalen) (a0,a1,d0)
int EVP_MAC_final(EVP_MAC_CTX * ctx, unsigned char * out, size_t * outl, size_t outsize) (a0,a1,a2,d0)
int EVP_MAC_finalXOF(EVP_MAC_CTX * ctx, unsigned char * out, size_t outsize) (a0,a1,d0)
const char * OSSL_EC_curve_nid2name(int nid) (d0)
int EVP_PKEY_digestsign_supports_digest(EVP_PKEY * pkey, OSSL_LIB_CTX * libctx, const char * name, const char * propq) (a0,a1,a2,a3)
int SRP_VBASE_add0_user(SRP_VBASE * vb, SRP_user_pwd * user_pwd) (a0,a1)
SRP_user_pwd * SRP_user_pwd_new() ()
void SRP_user_pwd_set_gN(SRP_user_pwd * user_pwd, const BIGNUM * g, const BIGNUM * N) (a0,a1,a2)
int SRP_user_pwd_set1_ids(SRP_user_pwd * user_pwd, const char * id, const char * info) (a0,a1,a2)
int SRP_user_pwd_set0_sv(SRP_user_pwd * user_pwd, BIGNUM * s, BIGNUM * v) (a0,a1,a2)
unsigned int OPENSSL_version_major() ()
unsigned int OPENSSL_version_minor() ()
unsigned int OPENSSL_version_patch() ()
const char * OPENSSL_version_pre_release() ()
const char * OPENSSL_version_build_metadata() ()
int ASYNC_WAIT_CTX_get_callback(ASYNC_WAIT_CTX * ctx, ASYNC_callback_fn * callback, void ** callback_arg) (a0,a1,a2)
int ASYNC_WAIT_CTX_set_callback(ASYNC_WAIT_CTX * ctx, ASYNC_callback_fn callback, void * callback_arg) (a0,a1,a2)
int ASYNC_WAIT_CTX_set_status(ASYNC_WAIT_CTX * ctx, int status) (a0,d0)
int ASYNC_WAIT_CTX_get_status(ASYNC_WAIT_CTX * ctx) (a0)
void EVP_KDF_CTX_free(EVP_KDF_CTX * ctx) (a0)
void EVP_KDF_CTX_reset(EVP_KDF_CTX * ctx) (a0)
size_t EVP_KDF_CTX_get_kdf_size(EVP_KDF_CTX * ctx) (a0)
int EVP_KDF_derive(EVP_KDF_CTX * ctx, unsigned char * key, size_t keylen, const OSSL_PARAM * params) (a0,a1,d0,a2)
const char * EVP_KDF_get0_name(const EVP_KDF * kdf) (a0)
const BIGNUM * EC_GROUP_get0_field(const EC_GROUP * group) (a0)
int CRYPTO_alloc_ex_data(int class_index, void * obj, CRYPTO_EX_DATA * ad, int idx) (d0,a0,a1,d1)
OSSL_LIB_CTX * OSSL_LIB_CTX_new() ()
void OSSL_LIB_CTX_free(OSSL_LIB_CTX * a) (a0)
void OPENSSL_LH_flush(OPENSSL_LHASH * lh) (a0)
BIGNUM * BN_native2bn(const unsigned char * s, int len, BIGNUM * ret) (a0,d0,a1)
int BN_bn2nativepad(const BIGNUM * a, unsigned char * to, int tolen) (a0,a1,d0)
int OSSL_trace_get_category_num(const char * name) (a0)
const char * OSSL_trace_get_category_name(int num) (d0)
int OSSL_trace_set_channel(int category, BIO* channel) (d0,a0)
int OSSL_trace_set_prefix(int category, const char * prefix) (d0,a0)
int OSSL_trace_set_suffix(int category, const char * suffix) (d0,a0)
int OSSL_trace_set_callback(int category, OSSL_trace_cb callback, void * data) (d0,a0,a1)
==end
