<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE library SYSTEM "library.dtd">
<library name="amissl" basename="AmiSSLBase" openname="amissl.library">
  <include>exec/types.h</include>
  <include>dos/dos.h</include>
  <include>amissl/amissl.h</include>
  <interface name="main" version="1.0" struct="AmiSSLIFace" prefix="LIB_" asmprefix="IAmiSSL" global="IAmiSSL" m68ksupport="yes">
    <method name="Obtain" result="ULONG"/>
    <method name="Release" result="ULONG"/>
    <method name="Expunge" result="void" status="unimplemented"/>
    <method name="Clone" result="struct Interface *" status="unimplemented"/>
    <method name="InternalInitAmiSSL" result="void" status="private">
      <arg name="amisslinit" type="void *" m68kreg="a0"/>
    </method>
    <method name="InitAmiSSLA" result="long">
      <arg name="tagList" type="struct TagItem *" m68kreg="a0"/>
    </method>
    <method name="InitAmiSSL" result="long">
      <vararg name="tag" type="Tag" m68kreg="a0"/>
    </method>
    <method name="CleanupAmiSSLA" result="long">
      <arg name="tagList" type="struct TagItem *" m68kreg="a0"/>
    </method>
    <method name="CleanupAmiSSL" result="long">
      <vararg name="tag" type="Tag" m68kreg="a0"/>
    </method>
    <method name="IsCipherAvailable" result="long" status="unimplemented">
      <arg name="cipher" type="long" m68kreg="d0"/>
    </method>
    <method name="Reserved1" result="void" status="unimplemented"/>
    <method name="Reserved2" result="void" status="unimplemented"/>
    <method name="Reserved3" result="void" status="unimplemented"/>
    <method name="Reserved4" result="void" status="unimplemented"/>
    <method name="Reserved5" result="void" status="unimplemented"/>
    <method name="Reserved6" result="void" status="unimplemented"/>
    <method name="Reserved7" result="void" status="unimplemented"/>
    <method name="Reserved8" result="void" status="unimplemented"/>

    <!-- AmiSSL v3.6/3.7 - OpenSSL 0.9.7g -->

    <method name="ASN1_TYPE_new" result="ASN1_TYPE *">
    </method>
    <method name="ASN1_TYPE_free" result="void">
      <arg name="a" type="ASN1_TYPE *" m68kreg="a0"/>
    </method>
    <method name="d2i_ASN1_TYPE" result="ASN1_TYPE *">
      <arg name="a" type="ASN1_TYPE **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_ASN1_TYPE" result="int">
      <arg name="a" type="ASN1_TYPE *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="ASN1_ANY_it" result="const ASN1_ITEM *">
    </method>
    <method name="ASN1_TYPE_get" result="int">
      <arg name="a" type="const ASN1_TYPE *" m68kreg="a0"/>
    </method>
    <method name="ASN1_TYPE_set" result="void">
      <arg name="a" type="ASN1_TYPE *" m68kreg="a0"/>
      <arg name="type" type="int" m68kreg="d0"/>
      <arg name="value" type="void *" m68kreg="a1"/>
    </method>
    <method name="ASN1_OBJECT_new" result="ASN1_OBJECT *">
    </method>
    <method name="ASN1_OBJECT_free" result="void">
      <arg name="a" type="ASN1_OBJECT *" m68kreg="a0"/>
    </method>
    <method name="i2d_ASN1_OBJECT" result="int">
      <arg name="a" type="const ASN1_OBJECT *" m68kreg="a0"/>
      <arg name="pp" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="c2i_ASN1_OBJECT" result="ASN1_OBJECT *" status="unimplemented">
      <arg name="a" type="ASN1_OBJECT **" m68kreg="a0"/>
      <arg name="pp" type="const unsigned char **" m68kreg="a1"/>
      <arg name="length" type="long" m68kreg="d0"/>
    </method>
    <method name="d2i_ASN1_OBJECT" result="ASN1_OBJECT *">
      <arg name="a" type="ASN1_OBJECT **" m68kreg="a0"/>
      <arg name="pp" type="const unsigned char **" m68kreg="a1"/>
      <arg name="length" type="long" m68kreg="d0"/>
    </method>
    <method name="ASN1_OBJECT_it" result="const ASN1_ITEM *">
    </method>
    <method name="ASN1_STRING_new" result="ASN1_STRING *">
    </method>
    <method name="ASN1_STRING_free" result="void">
      <arg name="a" type="ASN1_STRING *" m68kreg="a0"/>
    </method>
    <method name="ASN1_STRING_dup" result="ASN1_STRING *">
      <arg name="a" type="ASN1_STRING *" m68kreg="a0"/>
    </method>
    <method name="ASN1_STRING_type_new" result="ASN1_STRING *">
      <arg name="type" type="int" m68kreg="d0"/>
    </method>
    <method name="ASN1_STRING_cmp" result="int">
      <arg name="a" type="ASN1_STRING *" m68kreg="a0"/>
      <arg name="b" type="ASN1_STRING *" m68kreg="a1"/>
    </method>
    <method name="ASN1_STRING_set" result="int">
      <arg name="str" type="ASN1_STRING *" m68kreg="a0"/>
      <arg name="data" type="const void *" m68kreg="a1"/>
      <arg name="len" type="int" m68kreg="d0"/>
    </method>
    <method name="ASN1_STRING_length" result="int">
      <arg name="x" type="const ASN1_STRING *" m68kreg="a0"/>
    </method>
    <method name="ASN1_STRING_length_set" result="void">
      <arg name="x" type="ASN1_STRING *" m68kreg="a0"/>
      <arg name="n" type="int" m68kreg="d0"/>
    </method>
    <method name="ASN1_STRING_type" result="int">
      <arg name="x" type="const ASN1_STRING *" m68kreg="a0"/>
    </method>
    <method name="ASN1_STRING_data" result="unsigned char *">
      <arg name="x" type="ASN1_STRING *" m68kreg="a0"/>
    </method>
    <method name="ASN1_BIT_STRING_new" result="ASN1_BIT_STRING *">
    </method>
    <method name="ASN1_BIT_STRING_free" result="void">
      <arg name="x" type="ASN1_BIT_STRING *" m68kreg="a0"/>
    </method>
    <method name="d2i_ASN1_BIT_STRING" result="ASN1_BIT_STRING *">
      <arg name="a" type="ASN1_BIT_STRING **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_ASN1_BIT_STRING" result="int">
      <arg name="a" type="ASN1_BIT_STRING *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="ASN1_BIT_STRING_it" result="const ASN1_ITEM *">
    </method>
    <method name="i2c_ASN1_BIT_STRING" result="int" status="unimplemented">
      <arg name="a" type="ASN1_BIT_STRING *" m68kreg="a0"/>
      <arg name="pp" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="c2i_ASN1_BIT_STRING" result="ASN1_BIT_STRING *" status="unimplemented">
      <arg name="a" type="ASN1_BIT_STRING **" m68kreg="a0"/>
      <arg name="pp" type="const unsigned char **" m68kreg="a1"/>
      <arg name="length" type="long" m68kreg="d0"/>
    </method>
    <method name="ASN1_BIT_STRING_set" result="int">
      <arg name="a" type="ASN1_BIT_STRING *" m68kreg="a0"/>
      <arg name="d" type="unsigned char *" m68kreg="a1"/>
      <arg name="length" type="int" m68kreg="d0"/>
    </method>
    <method name="ASN1_BIT_STRING_set_bit" result="int">
      <arg name="a" type="ASN1_BIT_STRING *" m68kreg="a0"/>
      <arg name="n" type="int" m68kreg="d0"/>
      <arg name="value" type="int" m68kreg="d1"/>
    </method>
    <method name="ASN1_BIT_STRING_get_bit" result="int">
      <arg name="a" type="const ASN1_BIT_STRING *" m68kreg="a0"/>
      <arg name="n" type="int" m68kreg="d0"/>
    </method>
    <method name="ASN1_BIT_STRING_name_print" result="int">
      <arg name="out" type="BIO *" m68kreg="a0"/>
      <arg name="bs" type="ASN1_BIT_STRING *" m68kreg="a1"/>
      <arg name="tbl" type="BIT_STRING_BITNAME *" m68kreg="a2"/>
      <arg name="indent" type="int" m68kreg="d0"/>
    </method>
    <method name="ASN1_BIT_STRING_num_asc" result="int">
      <arg name="name" type="const char *" m68kreg="a0"/>
      <arg name="tbl" type="BIT_STRING_BITNAME *" m68kreg="a1"/>
    </method>
    <method name="ASN1_BIT_STRING_set_asc" result="int">
      <arg name="bs" type="ASN1_BIT_STRING *" m68kreg="a0"/>
      <arg name="name" type="const char *" m68kreg="a1"/>
      <arg name="value" type="int" m68kreg="d0"/>
      <arg name="tbl" type="BIT_STRING_BITNAME *" m68kreg="a2"/>
    </method>
    <method name="i2d_ASN1_BOOLEAN" result="int" status="unimplemented">
      <arg name="a" type="int" m68kreg="d0"/>
      <arg name="pp" type="unsigned char **" m68kreg="a0"/>
    </method>
    <method name="d2i_ASN1_BOOLEAN" result="int" status="unimplemented">
      <arg name="a" type="int *" m68kreg="a0"/>
      <arg name="pp" type="const unsigned char **" m68kreg="a1"/>
      <arg name="length" type="long" m68kreg="d0"/>
    </method>
    <method name="ASN1_INTEGER_new" result="ASN1_INTEGER *">
    </method>
    <method name="ASN1_INTEGER_free" result="void">
      <arg name="x" type="ASN1_INTEGER *" m68kreg="a0"/>
    </method>
    <method name="d2i_ASN1_INTEGER" result="ASN1_INTEGER *">
      <arg name="a" type="ASN1_INTEGER **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_ASN1_INTEGER" result="int">
      <arg name="a" type="ASN1_INTEGER *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="ASN1_INTEGER_it" result="const ASN1_ITEM *">
    </method>
    <method name="i2c_ASN1_INTEGER" result="int" status="unimplemented">
      <arg name="a" type="ASN1_INTEGER *" m68kreg="a0"/>
      <arg name="pp" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="c2i_ASN1_INTEGER" result="ASN1_INTEGER *" status="unimplemented">
      <arg name="a" type="ASN1_INTEGER **" m68kreg="a0"/>
      <arg name="pp" type="const unsigned char **" m68kreg="a1"/>
      <arg name="length" type="long" m68kreg="d0"/>
    </method>
    <method name="d2i_ASN1_UINTEGER" result="ASN1_INTEGER *">
      <arg name="a" type="ASN1_INTEGER **" m68kreg="a0"/>
      <arg name="pp" type="const unsigned char **" m68kreg="a1"/>
      <arg name="length" type="long" m68kreg="d0"/>
    </method>
    <method name="ASN1_INTEGER_dup" result="ASN1_INTEGER *">
      <arg name="x" type="ASN1_INTEGER *" m68kreg="a0"/>
    </method>
    <method name="ASN1_INTEGER_cmp" result="int">
      <arg name="x" type="ASN1_INTEGER *" m68kreg="a0"/>
      <arg name="y" type="ASN1_INTEGER *" m68kreg="a1"/>
    </method>
    <method name="ASN1_ENUMERATED_new" result="ASN1_ENUMERATED *">
    </method>
    <method name="ASN1_ENUMERATED_free" result="void">
      <arg name="x" type="ASN1_ENUMERATED *" m68kreg="a0"/>
    </method>
    <method name="d2i_ASN1_ENUMERATED" result="ASN1_ENUMERATED *">
      <arg name="a" type="ASN1_ENUMERATED **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_ASN1_ENUMERATED" result="int">
      <arg name="a" type="ASN1_ENUMERATED *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="ASN1_ENUMERATED_it" result="const ASN1_ITEM *">
    </method>
    <method name="ASN1_UTCTIME_check" result="int">
      <arg name="a" type="const ASN1_UTCTIME *" m68kreg="a0"/>
    </method>
    <method name="ASN1_UTCTIME_set" result="ASN1_UTCTIME *">
      <arg name="s" type="ASN1_UTCTIME *" m68kreg="a0"/>
      <arg name="t" type="time_t" m68kreg="d0"/>
    </method>
    <method name="ASN1_UTCTIME_set_string" result="int">
      <arg name="s" type="ASN1_UTCTIME *" m68kreg="a0"/>
      <arg name="str" type="char *" m68kreg="a1"/>
    </method>
    <method name="ASN1_UTCTIME_cmp_time_t" result="int">
      <arg name="s" type="const ASN1_UTCTIME *" m68kreg="a0"/>
      <arg name="t" type="time_t" m68kreg="d0"/>
    </method>
    <method name="ASN1_GENERALIZEDTIME_check" result="int">
      <arg name="a" type="const ASN1_GENERALIZEDTIME *" m68kreg="a0"/>
    </method>
    <method name="ASN1_GENERALIZEDTIME_set" result="ASN1_GENERALIZEDTIME *">
      <arg name="s" type="ASN1_GENERALIZEDTIME *" m68kreg="a0"/>
      <arg name="t" type="time_t" m68kreg="d0"/>
    </method>
    <method name="ASN1_GENERALIZEDTIME_set_string" result="int">
      <arg name="s" type="ASN1_GENERALIZEDTIME *" m68kreg="a0"/>
      <arg name="str" type="const char *" m68kreg="a1"/>
    </method>
    <method name="ASN1_OCTET_STRING_new" result="ASN1_OCTET_STRING *">
    </method>
    <method name="ASN1_OCTET_STRING_free" result="void">
      <arg name="x" type="ASN1_OCTET_STRING *" m68kreg="a0"/>
    </method>
    <method name="d2i_ASN1_OCTET_STRING" result="ASN1_OCTET_STRING *">
      <arg name="a" type="ASN1_OCTET_STRING **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_ASN1_OCTET_STRING" result="int">
      <arg name="a" type="ASN1_OCTET_STRING *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="ASN1_OCTET_STRING_it" result="const ASN1_ITEM *">
    </method>
    <method name="ASN1_OCTET_STRING_dup" result="ASN1_OCTET_STRING *">
      <arg name="a" type="ASN1_OCTET_STRING *" m68kreg="a0"/>
    </method>
    <method name="ASN1_OCTET_STRING_cmp" result="int">
      <arg name="a" type="ASN1_OCTET_STRING *" m68kreg="a0"/>
      <arg name="b" type="ASN1_OCTET_STRING *" m68kreg="a1"/>
    </method>
    <method name="ASN1_OCTET_STRING_set" result="int">
      <arg name="str" type="ASN1_OCTET_STRING *" m68kreg="a0"/>
      <arg name="data" type="unsigned char *" m68kreg="a1"/>
      <arg name="len" type="int" m68kreg="d0"/>
    </method>
    <method name="ASN1_VISIBLESTRING_new" result="ASN1_VISIBLESTRING *">
    </method>
    <method name="ASN1_VISIBLESTRING_free" result="void">
      <arg name="a" type="ASN1_VISIBLESTRING *" m68kreg="a0"/>
    </method>
    <method name="d2i_ASN1_VISIBLESTRING" result="ASN1_VISIBLESTRING *">
      <arg name="a" type="ASN1_VISIBLESTRING **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_ASN1_VISIBLESTRING" result="int">
      <arg name="a" type="ASN1_VISIBLESTRING *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="ASN1_VISIBLESTRING_it" result="const ASN1_ITEM *">
    </method>
    <method name="ASN1_UNIVERSALSTRING_new" result="ASN1_UNIVERSALSTRING *">
    </method>
    <method name="ASN1_UNIVERSALSTRING_free" result="void">
      <arg name="a" type="ASN1_UNIVERSALSTRING *" m68kreg="a0"/>
    </method>
    <method name="d2i_ASN1_UNIVERSALSTRING" result="ASN1_UNIVERSALSTRING *">
      <arg name="a" type="ASN1_UNIVERSALSTRING **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_ASN1_UNIVERSALSTRING" result="int">
      <arg name="a" type="ASN1_UNIVERSALSTRING *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="ASN1_UNIVERSALSTRING_it" result="const ASN1_ITEM *">
    </method>
    <method name="ASN1_UTF8STRING_new" result="ASN1_UTF8STRING *">
    </method>
    <method name="ASN1_UTF8STRING_free" result="void">
      <arg name="x" type="ASN1_UTF8STRING *" m68kreg="a0"/>
    </method>
    <method name="d2i_ASN1_UTF8STRING" result="ASN1_UTF8STRING *">
      <arg name="a" type="ASN1_UTF8STRING **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_ASN1_UTF8STRING" result="int">
      <arg name="a" type="ASN1_UTF8STRING *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="ASN1_UTF8STRING_it" result="const ASN1_ITEM *">
    </method>
    <method name="ASN1_NULL_new" result="ASN1_NULL *">
    </method>
    <method name="ASN1_NULL_free" result="void">
      <arg name="a" type="ASN1_NULL *" m68kreg="a0"/>
    </method>
    <method name="d2i_ASN1_NULL" result="ASN1_NULL *">
      <arg name="a" type="ASN1_NULL **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_ASN1_NULL" result="int">
      <arg name="a" type="ASN1_NULL *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="ASN1_NULL_it" result="const ASN1_ITEM *">
    </method>
    <method name="ASN1_BMPSTRING_new" result="ASN1_BMPSTRING *">
    </method>
    <method name="ASN1_BMPSTRING_free" result="void">
      <arg name="a" type="ASN1_BMPSTRING *" m68kreg="a0"/>
    </method>
    <method name="d2i_ASN1_BMPSTRING" result="ASN1_BMPSTRING *">
      <arg name="a" type="ASN1_BMPSTRING **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_ASN1_BMPSTRING" result="int">
      <arg name="a" type="ASN1_BMPSTRING *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="ASN1_BMPSTRING_it" result="const ASN1_ITEM *">
    </method>
    <method name="UTF8_getc" result="int">
      <arg name="str" type="const unsigned char *" m68kreg="a0"/>
      <arg name="len" type="int" m68kreg="d0"/>
      <arg name="val" type="unsigned long *" m68kreg="a1"/>
    </method>
    <method name="UTF8_putc" result="int">
      <arg name="str" type="unsigned char *" m68kreg="a0"/>
      <arg name="len" type="int" m68kreg="d0"/>
      <arg name="value" type="unsigned long" m68kreg="d1"/>
    </method>
    <method name="ASN1_PRINTABLE_new" result="ASN1_STRING *">
    </method>
    <method name="ASN1_PRINTABLE_free" result="void">
      <arg name="a" type="ASN1_STRING *" m68kreg="a0"/>
    </method>
    <method name="d2i_ASN1_PRINTABLE" result="ASN1_STRING *">
      <arg name="a" type="ASN1_STRING **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_ASN1_PRINTABLE" result="int">
      <arg name="a" type="ASN1_STRING *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="ASN1_PRINTABLE_it" result="const ASN1_ITEM *">
    </method>
    <method name="DIRECTORYSTRING_new" result="ASN1_STRING *">
    </method>
    <method name="DIRECTORYSTRING_free" result="void">
      <arg name="a" type="ASN1_STRING *" m68kreg="a0"/>
    </method>
    <method name="d2i_DIRECTORYSTRING" result="ASN1_STRING *">
      <arg name="a" type="ASN1_STRING **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_DIRECTORYSTRING" result="int">
      <arg name="a" type="ASN1_STRING *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="DIRECTORYSTRING_it" result="const ASN1_ITEM *">
    </method>
    <method name="DISPLAYTEXT_new" result="ASN1_STRING *">
    </method>
    <method name="DISPLAYTEXT_free" result="void">
      <arg name="a" type="ASN1_STRING *" m68kreg="a0"/>
    </method>
    <method name="d2i_DISPLAYTEXT" result="ASN1_STRING *">
      <arg name="a" type="ASN1_STRING **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_DISPLAYTEXT" result="int">
      <arg name="a" type="ASN1_STRING *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="DISPLAYTEXT_it" result="const ASN1_ITEM *">
    </method>
    <method name="ASN1_PRINTABLESTRING_new" result="ASN1_PRINTABLESTRING *">
    </method>
    <method name="ASN1_PRINTABLESTRING_free" result="void">
      <arg name="a" type="ASN1_PRINTABLESTRING *" m68kreg="a0"/>
    </method>
    <method name="d2i_ASN1_PRINTABLESTRING" result="ASN1_PRINTABLESTRING *">
      <arg name="a" type="ASN1_PRINTABLESTRING **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_ASN1_PRINTABLESTRING" result="int">
      <arg name="a" type="ASN1_PRINTABLESTRING *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="ASN1_PRINTABLESTRING_it" result="const ASN1_ITEM *">
    </method>
    <method name="ASN1_T61STRING_new" result="ASN1_T61STRING *">
    </method>
    <method name="ASN1_T61STRING_free" result="void">
      <arg name="a" type="ASN1_T61STRING *" m68kreg="a0"/>
    </method>
    <method name="d2i_ASN1_T61STRING" result="ASN1_T61STRING *">
      <arg name="a" type="ASN1_T61STRING **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_ASN1_T61STRING" result="int">
      <arg name="a" type="ASN1_T61STRING *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="ASN1_T61STRING_it" result="const ASN1_ITEM *">
    </method>
    <method name="ASN1_IA5STRING_new" result="ASN1_IA5STRING *">
    </method>
    <method name="ASN1_IA5STRING_free" result="void">
      <arg name="a" type="ASN1_IA5STRING *" m68kreg="a0"/>
    </method>
    <method name="d2i_ASN1_IA5STRING" result="ASN1_IA5STRING *">
      <arg name="a" type="ASN1_IA5STRING **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_ASN1_IA5STRING" result="int">
      <arg name="a" type="ASN1_IA5STRING *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="ASN1_IA5STRING_it" result="const ASN1_ITEM *">
    </method>
    <method name="ASN1_GENERALSTRING_new" result="ASN1_GENERALSTRING *">
    </method>
    <method name="ASN1_GENERALSTRING_free" result="void">
      <arg name="a" type="ASN1_GENERALSTRING *" m68kreg="a0"/>
    </method>
    <method name="d2i_ASN1_GENERALSTRING" result="ASN1_GENERALSTRING *">
      <arg name="a" type="ASN1_GENERALSTRING **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_ASN1_GENERALSTRING" result="int">
      <arg name="a" type="ASN1_GENERALSTRING *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **"  m68kreg="a1"/>
    </method>
    <method name="ASN1_GENERALSTRING_it" result="const ASN1_ITEM *">
    </method>
    <method name="ASN1_UTCTIME_new" result="ASN1_UTCTIME *">
    </method>
    <method name="ASN1_UTCTIME_free" result="void">
      <arg name="a" type="ASN1_UTCTIME *" m68kreg="a0"/>
    </method>
    <method name="d2i_ASN1_UTCTIME" result="ASN1_UTCTIME *">
      <arg name="a" type="ASN1_UTCTIME **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_ASN1_UTCTIME" result="int">
      <arg name="a" type="ASN1_UTCTIME *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="ASN1_UTCTIME_it" result="const ASN1_ITEM *">
    </method>
    <method name="ASN1_GENERALIZEDTIME_new" result="ASN1_GENERALIZEDTIME *">
    </method>
    <method name="ASN1_GENERALIZEDTIME_free" result="void">
      <arg name="x" type="ASN1_GENERALIZEDTIME *" m68kreg="a0"/>
    </method>
    <method name="d2i_ASN1_GENERALIZEDTIME" result="ASN1_GENERALIZEDTIME *">
      <arg name="a" type="ASN1_GENERALIZEDTIME **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_ASN1_GENERALIZEDTIME" result="int">
      <arg name="a" type="ASN1_GENERALIZEDTIME *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="ASN1_GENERALIZEDTIME_it" result="const ASN1_ITEM *">
    </method>
    <method name="ASN1_TIME_new" result="ASN1_TIME *">
    </method>
    <method name="ASN1_TIME_free" result="void">
      <arg name="a" type="ASN1_TIME *" m68kreg="a0"/>
    </method>
    <method name="d2i_ASN1_TIME" result="ASN1_TIME *">
      <arg name="a" type="ASN1_TIME **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_ASN1_TIME" result="int">
      <arg name="a" type="ASN1_TIME *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="ASN1_TIME_it" result="const ASN1_ITEM *">
    </method>
    <method name="ASN1_TIME_set" result="ASN1_TIME *">
      <arg name="s" type="ASN1_TIME *" m68kreg="a0"/>
      <arg name="t" type="time_t" m68kreg="d0"/>
    </method>
    <method name="ASN1_TIME_check" result="int">
      <arg name="t" type="const ASN1_TIME *" m68kreg="a0"/>
    </method>
    <method name="ASN1_TIME_to_generalizedtime" result="ASN1_GENERALIZEDTIME *">
      <arg name="t" type="const ASN1_TIME *" m68kreg="a0"/>
      <arg name="out" type="ASN1_GENERALIZEDTIME **" m68kreg="a1"/>
    </method>
    <method name="i2d_ASN1_SET" result="int" status="unimplemented">
      <arg name="a" type="STACK_OF(OPENSSL_BLOCK) *" m68kreg="a0"/>
      <arg name="pp" type="unsigned char **" m68kreg="a1"/>
      <arg name="i2d" type="i2d_of_void *" m68kreg="a2"/>
      <arg name="ex_tag" type="int" m68kreg="d0"/>
      <arg name="ex_class" type="int" m68kreg="d1"/>
      <arg name="is_set" type="int" m68kreg="d2"/>
    </method>
    <method name="d2i_ASN1_SET" result="STACK_OF(OPENSSL_BLOCK) *" status="unimplemented">
      <arg name="a" type="STACK_OF(OPENSSL_BLOCK) **" m68kreg="a0"/>
      <arg name="pp" type="const unsigned char **" m68kreg="a1"/>
      <arg name="length" type="long" m68kreg="d0"/>
      <arg name="d2i" type="d2i_of_void *" m68kreg="a2"/>
      <arg name="free_func" type="void (*)(OPENSSL_BLOCK)" m68kreg="a3"/>
      <arg name="ex_tag" type="int" m68kreg="d1"/>
      <arg name="ex_class" type="int" m68kreg="d2"/>
    </method>
    <method name="i2a_ASN1_INTEGER" result="int">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="a" type="const ASN1_INTEGER *" m68kreg="a1"/>
    </method>
    <method name="a2i_ASN1_INTEGER" result="int">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="bs" type="ASN1_INTEGER *" m68kreg="a1"/>
      <arg name="buf" type="char *" m68kreg="a2"/>
      <arg name="size" type="int" m68kreg="d0"/>
    </method>
    <method name="i2a_ASN1_ENUMERATED" result="int">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="a" type="const ASN1_ENUMERATED *" m68kreg="a1"/>
    </method>
    <method name="a2i_ASN1_ENUMERATED" result="int">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="bs" type="ASN1_ENUMERATED *" m68kreg="a1"/>
      <arg name="buf" type="char *" m68kreg="a2"/>
      <arg name="size" type="int" m68kreg="d0"/>
    </method>
    <method name="i2a_ASN1_OBJECT" result="int">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="a" type="const ASN1_OBJECT *" m68kreg="a1"/>
    </method>
    <method name="a2i_ASN1_STRING" result="int">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="bs" type="ASN1_STRING *" m68kreg="a1"/>
      <arg name="buf" type="char *" m68kreg="a2"/>
      <arg name="size" type="int" m68kreg="d0"/>
    </method>
    <method name="i2a_ASN1_STRING" result="int">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="a" type="const ASN1_STRING *" m68kreg="a1"/>
      <arg name="type" type="int" m68kreg="d0"/>
    </method>
    <method name="i2t_ASN1_OBJECT" result="int">
      <arg name="buf" type="char *" m68kreg="a0"/>
      <arg name="buf_len" type="int" m68kreg="d0"/>
      <arg name="a" type="const ASN1_OBJECT *" m68kreg="a1"/>
    </method>
    <method name="a2d_ASN1_OBJECT" result="int">
      <arg name="out" type="unsigned char *" m68kreg="a0"/>
      <arg name="olen" type="int" m68kreg="d0"/>
      <arg name="buf" type="const char *" m68kreg="a1"/>
      <arg name="num" type="int" m68kreg="d1"/>
    </method>
    <method name="ASN1_OBJECT_create" result="ASN1_OBJECT *">
      <arg name="nid" type="int" m68kreg="d0"/>
      <arg name="data" type="unsigned char *" m68kreg="a0"/>
      <arg name="len" type="int" m68kreg="d1"/>
      <arg name="sn" type="const char *" m68kreg="a1"/>
      <arg name="ln" type="const char *" m68kreg="a2"/>
    </method>
    <method name="ASN1_INTEGER_set" result="int">
      <arg name="a" type="ASN1_INTEGER *" m68kreg="a0"/>
      <arg name="v" type="long" m68kreg="d0"/>
    </method>
    <method name="ASN1_INTEGER_get" result="long">
      <arg name="a" type="const ASN1_INTEGER *" m68kreg="a0"/>
    </method>
    <method name="BN_to_ASN1_INTEGER" result="ASN1_INTEGER *">
      <arg name="bn" type="const BIGNUM *" m68kreg="a0"/>
      <arg name="ai" type="ASN1_INTEGER *" m68kreg="a1"/>
    </method>
    <method name="ASN1_INTEGER_to_BN" result="BIGNUM *">
      <arg name="ai" type="ASN1_INTEGER *" m68kreg="a0"/>
      <arg name="bn" type="BIGNUM *" m68kreg="a1"/>
    </method>
    <method name="ASN1_ENUMERATED_set" result="int">
      <arg name="a" type="ASN1_ENUMERATED *" m68kreg="a0"/>
      <arg name="v" type="long" m68kreg="d0"/>
    </method>
    <method name="ASN1_ENUMERATED_get" result="long">
      <arg name="a" type="const ASN1_ENUMERATED *" m68kreg="a0"/>
    </method>
    <method name="BN_to_ASN1_ENUMERATED" result="ASN1_ENUMERATED *">
      <arg name="bn" type="const BIGNUM *" m68kreg="a0"/>
      <arg name="ai" type="ASN1_ENUMERATED *" m68kreg="a1"/>
    </method>
    <method name="ASN1_ENUMERATED_to_BN" result="BIGNUM *">
      <arg name="ai" type="const ASN1_ENUMERATED *" m68kreg="a0"/>
      <arg name="bn" type="BIGNUM *" m68kreg="a1"/>
    </method>
    <method name="ASN1_PRINTABLE_type" result="int">
      <arg name="s" type="const unsigned char *" m68kreg="a0"/>
      <arg name="max" type="int" m68kreg="d0"/>
    </method>
    <method name="i2d_ASN1_bytes" result="int" status="unimplemented">
      <arg name="a" type="ASN1_STRING *" m68kreg="a0"/>
      <arg name="pp" type="unsigned char **" m68kreg="a1"/>
      <arg name="tag" type="int" m68kreg="d0"/>
      <arg name="xclass" type="int" m68kreg="d1"/>
    </method>
    <method name="d2i_ASN1_bytes" result="ASN1_STRING *" status="unimplemented">
      <arg name="a" type="ASN1_STRING **" m68kreg="a0"/>
      <arg name="pp" type="const unsigned char **" m68kreg="a1"/>
      <arg name="length" type="long" m68kreg="d0"/>
      <arg name="Ptag" type="int" m68kreg="d1"/>
      <arg name="Pclass" type="int" m68kreg="d2"/>
    </method>
    <method name="ASN1_tag2bit" result="unsigned long">
      <arg name="tag" type="int" m68kreg="d0"/>
    </method>
    <method name="d2i_ASN1_type_bytes" result="ASN1_STRING *" status="unimplemented">
      <arg name="a" type="ASN1_STRING **" m68kreg="a0"/>
      <arg name="pp" type="const unsigned char **" m68kreg="a1"/>
      <arg name="length" type="long" m68kreg="d0"/>
      <arg name="type" type="int" m68kreg="d1"/>
    </method>
    <method name="asn1_Finish" result="int" status="unimplemented">
      <arg name="c" type="ASN1_CTX *" m68kreg="a0"/>
    </method>
    <method name="ASN1_get_object" result="int">
      <arg name="pp" type="const unsigned char **" m68kreg="a0"/>
      <arg name="plength" type="long *" m68kreg="a1"/>
      <arg name="ptag" type="int *" m68kreg="a2"/>
      <arg name="pclass" type="int *" m68kreg="a3"/>
      <arg name="omax" type="long" m68kreg="d0"/>
    </method>
    <method name="ASN1_check_infinite_end" result="int">
      <arg name="p" type="unsigned char **" m68kreg="a0"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="ASN1_put_object" result="void">
      <arg name="pp" type="unsigned char **" m68kreg="a0"/>
      <arg name="constructed" type="int" m68kreg="d0"/>
      <arg name="length" type="int" m68kreg="d1"/>
      <arg name="tag" type="int" m68kreg="d2"/>
      <arg name="xclass" type="int" m68kreg="d3"/>
    </method>
    <method name="ASN1_object_size" result="int">
      <arg name="constructed" type="int" m68kreg="d0"/>
      <arg name="length" type="int" m68kreg="d1"/>
      <arg name="tag" type="int" m68kreg="d2"/>
    </method>
    <method name="ASN1_dup" result="void *">
      <arg name="i2d" type="i2d_of_void *" m68kreg="a0"/>
      <arg name="d2i" type="d2i_of_void *" m68kreg="a1"/>
      <arg name="x" type="char *" m68kreg="a2"/>
    </method>
    <method name="ASN1_item_dup" result="void *">
      <arg name="it" type="const ASN1_ITEM *" m68kreg="a0"/>
      <arg name="x" type="void *" m68kreg="a1"/>
    </method>
    <method name="ASN1_STRING_to_UTF8" result="int">
      <arg name="out" type="unsigned char **" m68kreg="a0"/>
      <arg name="in" type="const ASN1_STRING *" m68kreg="a1"/>
    </method>
    <method name="ASN1_d2i_bio" result="void *">
      <arg name="xnew" type="void * (*)(void)" m68kreg="a0"/>
      <arg name="d2i" type="d2i_of_void *" m68kreg="a1"/>
      <arg name="in" type="BIO *" m68kreg="a2"/>
      <arg name="x" type="void **" m68kreg="a3"/>
    </method>
    <method name="ASN1_item_d2i_bio" result="void *">
      <arg name="it" type="const ASN1_ITEM *" m68kreg="a0"/>
      <arg name="in" type="BIO *" m68kreg="a1"/>
      <arg name="x" type="void *" m68kreg="a2"/>
    </method>
    <method name="ASN1_i2d_bio" result="int">
      <arg name="i2d" type="i2d_of_void *" m68kreg="a0"/>
      <arg name="out" type="BIO *" m68kreg="a1"/>
      <arg name="x" type="unsigned char *" m68kreg="a2"/>
    </method>
    <method name="ASN1_item_i2d_bio" result="int">
      <arg name="it" type="const ASN1_ITEM *" m68kreg="a0"/>
      <arg name="out" type="BIO *" m68kreg="a1"/>
      <arg name="x" type="void *" m68kreg="a2"/>
    </method>
    <method name="ASN1_UTCTIME_print" result="int">
      <arg name="fp" type="BIO *" m68kreg="a0"/>
      <arg name="a" type="ASN1_UTCTIME *" m68kreg="a1"/>
    </method>
    <method name="ASN1_GENERALIZEDTIME_print" result="int">
      <arg name="fp" type="BIO *" m68kreg="a0"/>
      <arg name="a" type="ASN1_GENERALIZEDTIME *" m68kreg="a1"/>
    </method>
    <method name="ASN1_TIME_print" result="int">
      <arg name="fp" type="BIO *" m68kreg="a0"/>
      <arg name="a" type="const ASN1_TIME *" m68kreg="a1"/>
    </method>
    <method name="ASN1_STRING_print" result="int">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="v" type="ASN1_STRING *" m68kreg="a1"/>
    </method>
    <method name="ASN1_STRING_print_ex" result="int">
      <arg name="out" type="BIO *" m68kreg="a0"/>
      <arg name="str" type="const ASN1_STRING *" m68kreg="a1"/>
      <arg name="flags" type="unsigned long" m68kreg="d0"/>
    </method>
    <method name="ASN1_parse" result="int">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="pp" type="unsigned char *" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
      <arg name="indent" type="int" m68kreg="d1"/>
    </method>
    <method name="ASN1_parse_dump" result="int">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="pp" type="const unsigned char *" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
      <arg name="indent" type="int" m68kreg="d1"/>
      <arg name="dump" type="int" m68kreg="d2"/>
    </method>
    <method name="ASN1_tag2str" result="const char *">
      <arg name="tag" type="int" m68kreg="d0"/>
    </method>
    <method name="i2d_ASN1_HEADER" result="int" status="unimplemented">
      <arg name="a" type="ASN1_HEADER *" m68kreg="a0"/>
      <arg name="pp" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="d2i_ASN1_HEADER" result="ASN1_HEADER *" status="unimplemented">
      <arg name="a" type="ASN1_HEADER **" m68kreg="a0"/>
      <arg name="pp" type="unsigned char **" m68kreg="a1"/>
      <arg name="length" type="long" m68kreg="d0"/>
    </method>
    <method name="ASN1_HEADER_new" result="ASN1_HEADER *" status="unimplemented">
    </method>
    <method name="ASN1_HEADER_free" result="void" status="unimplemented">
      <arg name="a" type="ASN1_HEADER *" m68kreg="a0"/>
    </method>
    <method name="ASN1_UNIVERSALSTRING_to_string" result="int">
      <arg name="s" type="ASN1_UNIVERSALSTRING *" m68kreg="a0"/>
    </method>
    <method name="X509_asn1_meth" result="ASN1_METHOD *" status="unimplemented">
    </method>
    <method name="RSAPrivateKey_asn1_meth" result="ASN1_METHOD *" status="unimplemented">
    </method>
    <method name="ASN1_IA5STRING_asn1_meth" result="ASN1_METHOD *" status="unimplemented">
    </method>
    <method name="ASN1_BIT_STRING_asn1_meth" result="ASN1_METHOD *" status="unimplemented">
    </method>
    <method name="ASN1_TYPE_set_octetstring" result="int">
      <arg name="a" type="ASN1_TYPE *" m68kreg="a0"/>
      <arg name="data" type="unsigned char *" m68kreg="a1"/>
      <arg name="len" type="int" m68kreg="d0"/>
    </method>
    <method name="ASN1_TYPE_get_octetstring" result="int">
      <arg name="a" type="const ASN1_TYPE *" m68kreg="a0"/>
      <arg name="data" type="unsigned char *" m68kreg="a1"/>
      <arg name="max_len" type="int" m68kreg="d0"/>
    </method>
    <method name="ASN1_TYPE_set_int_octetstring" result="int">
      <arg name="a" type="ASN1_TYPE *" m68kreg="a0"/>
      <arg name="num" type="long" m68kreg="d0"/>
      <arg name="data" type="unsigned char *" m68kreg="a1"/>
      <arg name="len" type="int" m68kreg="d1"/>
    </method>
    <method name="ASN1_TYPE_get_int_octetstring" result="int">
      <arg name="a" type="const ASN1_TYPE *" m68kreg="a0"/>
      <arg name="num" type="long *" m68kreg="a1"/>
      <arg name="data" type="unsigned char *" m68kreg="a2"/>
      <arg name="max_len" type="int" m68kreg="d0"/>
    </method>
    <method name="ASN1_seq_unpack" result="STACK_OF(OPENSSL_BLOCK) *" status="unimplemented">
      <arg name="buf" type="const unsigned char *" m68kreg="a0"/>
      <arg name="len" type="int" m68kreg="d0"/>
      <arg name="d2i" type="d2i_of_void *" m68kreg="a1"/>
      <arg name="free_func" type="void (*)(OPENSSL_BLOCK)" m68kreg="a2"/>
    </method>
    <method name="ASN1_seq_pack" result="unsigned char *" status="unimplemented">
      <arg name="safes" type="STACK_OF(OPENSSL_BLOCK) *" m68kreg="a0"/>
      <arg name="i2d" type="i2d_of_void *" m68kreg="a1"/>
      <arg name="buf" type="unsigned char **" m68kreg="a2"/>
      <arg name="len" type="int *" m68kreg="a3"/>
    </method>
    <method name="ASN1_unpack_string" result="void *" status="unimplemented">
      <arg name="oct" type="ASN1_STRING *" m68kreg="a0"/>
      <arg name="d2i" type="d2i_of_void *" m68kreg="a1"/>
    </method>
    <method name="ASN1_item_unpack" result="void *">
      <arg name="oct" type="const ASN1_STRING *" m68kreg="a0"/>
      <arg name="it" type="const ASN1_ITEM *" m68kreg="a1"/>
    </method>
    <method name="ASN1_pack_string" result="ASN1_STRING *" status="unimplemented">
      <arg name="obj" type="void *" m68kreg="a0"/>
      <arg name="i2d" type="int (*)()" m68kreg="a1"/>
      <arg name="oct" type="ASN1_OCTET_STRING **" m68kreg="a2"/>
    </method>
    <method name="ASN1_item_pack" result="ASN1_STRING *">
      <arg name="obj" type="void *" m68kreg="a0"/>
      <arg name="it" type="const ASN1_ITEM *" m68kreg="a1"/>
      <arg name="oct" type="ASN1_OCTET_STRING **" m68kreg="a2"/>
    </method>
    <method name="ASN1_STRING_set_default_mask" result="void">
      <arg name="mask" type="unsigned long" m68kreg="d0"/>
    </method>
    <method name="ASN1_STRING_set_default_mask_asc" result="int">
      <arg name="p" type="char *" m68kreg="a0"/>
    </method>
    <method name="ASN1_STRING_get_default_mask" result="unsigned long">
    </method>
    <method name="ASN1_mbstring_copy" result="int">
      <arg name="out" type="ASN1_STRING **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char *" m68kreg="a1"/>
      <arg name="len" type="int" m68kreg="d0"/>
      <arg name="inform" type="int" m68kreg="d1"/>
      <arg name="mask" type="unsigned long" m68kreg="d2"/>
    </method>
    <method name="ASN1_mbstring_ncopy" result="int">
      <arg name="out" type="ASN1_STRING **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char *" m68kreg="a1"/>
      <arg name="len" type="int" m68kreg="d0"/>
      <arg name="inform" type="int" m68kreg="d1"/>
      <arg name="mask" type="unsigned long" m68kreg="d2"/>
      <arg name="minsize" type="long" m68kreg="d3"/>
      <arg name="maxsize" type="long" m68kreg="d4"/>
    </method>
    <method name="ASN1_STRING_set_by_NID" result="ASN1_STRING *">
      <arg name="out" type="ASN1_STRING **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char *" m68kreg="a1"/>
      <arg name="inlen" type="int" m68kreg="d0"/>
      <arg name="inform" type="int" m68kreg="d1"/>
      <arg name="nid" type="int" m68kreg="d2"/>
    </method>
    <method name="ASN1_STRING_TABLE_get" result="ASN1_STRING_TABLE *">
      <arg name="nid" type="int" m68kreg="d0"/>
    </method>
    <method name="ASN1_STRING_TABLE_add" result="int">
      <arg name="a" type="int" m68kreg="d0"/>
      <arg name="b" type="long" m68kreg="d1"/>
      <arg name="c" type="long" m68kreg="d2"/>
      <arg name="d" type="unsigned long" m68kreg="d3"/>
      <arg name="e" type="unsigned long" m68kreg="d4"/>
    </method>
    <method name="ASN1_STRING_TABLE_cleanup" result="void">
    </method>
    <method name="ASN1_item_new" result="ASN1_VALUE *">
      <arg name="it" type="const ASN1_ITEM *" m68kreg="a0"/>
    </method>
    <method name="ASN1_item_free" result="void">
      <arg name="val" type="ASN1_VALUE *" m68kreg="a0"/>
      <arg name="it" type="const ASN1_ITEM *" m68kreg="a1"/>
    </method>
    <method name="ASN1_item_d2i" result="ASN1_VALUE *">
      <arg name="val" type="ASN1_VALUE **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
      <arg name="it" type="const ASN1_ITEM *" m68kreg="a2"/>
    </method>
    <method name="ASN1_item_i2d" result="int">
      <arg name="val" type="ASN1_VALUE *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
      <arg name="it" type="const ASN1_ITEM *" m68kreg="a2"/>
    </method>
    <method name="ASN1_add_oid_module" result="void">
    </method>
    <method name="ERR_load_ASN1_strings" result="int">
    </method>
    <method name="asn1_GetSequence" result="int" status="unimplemented">
      <arg name="c" type="ASN1_const_CTX *" m68kreg="a0"/>
      <arg name="length" type="long *" m68kreg="a1"/>
    </method>
    <method name="asn1_add_error" result="void" status="unimplemented">
      <arg name="address" type="unsigned char *" m68kreg="a0"/>
      <arg name="offset" type="int" m68kreg="d0"/>
    </method>
    <method name="ASN1_BOOLEAN_it" result="const ASN1_ITEM *">
    </method>
    <method name="ASN1_TBOOLEAN_it" result="const ASN1_ITEM *">
    </method>
    <method name="ASN1_FBOOLEAN_it" result="const ASN1_ITEM *">
    </method>
    <method name="ASN1_SEQUENCE_it" result="const ASN1_ITEM *">
    </method>
    <method name="CBIGNUM_it" result="const ASN1_ITEM *">
    </method>
    <method name="BIGNUM_it" result="const ASN1_ITEM *">
    </method>
    <method name="LONG_it" result="const ASN1_ITEM *">
    </method>
    <method name="ZLONG_it" result="const ASN1_ITEM *">
    </method>
    <method name="ASN1_item_ex_new" result="int">
      <arg name="pval" type="ASN1_VALUE **" m68kreg="a0"/>
      <arg name="it" type="const ASN1_ITEM *" m68kreg="a1"/>
    </method>
    <method name="ASN1_item_ex_free" result="void">
      <arg name="pval" type="ASN1_VALUE **" m68kreg="a0"/>
      <arg name="it" type="const ASN1_ITEM *" m68kreg="a1"/>
    </method>
    <method name="ASN1_template_new" result="int" status="unimplemented">
      <arg name="pval" type="ASN1_VALUE **" m68kreg="a0"/>
      <arg name="tt" type="const ASN1_TEMPLATE *" m68kreg="a1"/>
    </method>
    <method name="ASN1_primitive_new" result="int" status="unimplemented">
      <arg name="pval" type="ASN1_VALUE **" m68kreg="a0"/>
      <arg name="it" type="const ASN1_ITEM *" m68kreg="a1"/>
    </method>
    <method name="ASN1_template_free" result="void" status="unimplemented">
      <arg name="pval" type="ASN1_VALUE **" m68kreg="a0"/>
      <arg name="tt" type="const ASN1_TEMPLATE *" m68kreg="a1"/>
    </method>
    <method name="ASN1_template_d2i" result="int" status="unimplemented">
      <arg name="pval" type="ASN1_VALUE **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
      <arg name="tt" type="const ASN1_TEMPLATE *" m68kreg="a2"/>
    </method>
    <method name="ASN1_item_ex_d2i" result="int">
      <arg name="pval" type="ASN1_VALUE **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
      <arg name="it" type="const ASN1_ITEM *" m68kreg="a2"/>
      <arg name="tag" type="int" m68kreg="d1"/>
      <arg name="aclass" type="int" m68kreg="d2"/>
      <arg name="opt" type="char" m68kreg="d3"/>
      <arg name="ctx" type="ASN1_TLC *" m68kreg="a3"/>
    </method>
    <method name="ASN1_item_ex_i2d" result="int">
      <arg name="pval" type="ASN1_VALUE **" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
      <arg name="it" type="const ASN1_ITEM *" m68kreg="a2"/>
      <arg name="tag" type="int" m68kreg="d0"/>
      <arg name="aclass" type="int" m68kreg="d1"/>
    </method>
    <method name="ASN1_template_i2d" result="int" status="unimplemented">
      <arg name="pval" type="ASN1_VALUE **" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
      <arg name="tt" type="const ASN1_TEMPLATE *" m68kreg="a2"/>
    </method>
    <method name="ASN1_primitive_free" result="void" status="unimplemented">
      <arg name="pval" type="ASN1_VALUE **" m68kreg="a0"/>
      <arg name="it" type="const ASN1_ITEM *" m68kreg="a1"/>
    </method>
    <method name="asn1_ex_i2c" result="int" status="unimplemented">
      <arg name="pval" type="ASN1_VALUE **" m68kreg="a0"/>
      <arg name="cont" type="unsigned char *" m68kreg="a1"/>
      <arg name="putype" type="int *" m68kreg="a2"/>
      <arg name="it" type="const ASN1_ITEM *" m68kreg="a3"/>
    </method>
    <method name="asn1_ex_c2i" result="int" status="unimplemented">
      <arg name="pval" type="ASN1_VALUE **" m68kreg="a0"/>
      <arg name="cont" type="unsigned char *" m68kreg="a1"/>
      <arg name="len" type="int" m68kreg="d0"/>
      <arg name="utype" type="int" m68kreg="d1"/>
      <arg name="free_cont" type="char *" m68kreg="a2"/>
      <arg name="it" type="const ASN1_ITEM *" m68kreg="a3"/>
    </method>
    <method name="asn1_get_choice_selector" result="int" status="unimplemented">
      <arg name="pval" type="ASN1_VALUE **" m68kreg="a0"/>
      <arg name="it" type="const ASN1_ITEM *" m68kreg="a1"/>
    </method>
    <method name="asn1_set_choice_selector" result="int" status="unimplemented">
      <arg name="pval" type="ASN1_VALUE **" m68kreg="a0"/>
      <arg name="value" type="int" m68kreg="d0"/>
      <arg name="it" type="const ASN1_ITEM *" m68kreg="a1"/>
    </method>
    <method name="asn1_get_field_ptr" result="ASN1_VALUE **" status="unimplemented">
      <arg name="pval" type="ASN1_VALUE **" m68kreg="a0"/>
      <arg name="tt" type="const ASN1_TEMPLATE *" m68kreg="a1"/>
    </method>
    <method name="asn1_do_adb" result="const ASN1_TEMPLATE *" status="unimplemented">
      <arg name="pval" type="ASN1_VALUE **" m68kreg="a0"/>
      <arg name="tt" type="const ASN1_TEMPLATE *" m68kreg="a1"/>
      <arg name="nullerr" type="int" m68kreg="d0"/>
    </method>
    <method name="asn1_do_lock" result="int" status="unimplemented">
      <arg name="pval" type="ASN1_VALUE **" m68kreg="a0"/>
      <arg name="op" type="int" m68kreg="d0"/>
      <arg name="it" type="const ASN1_ITEM *" m68kreg="a1"/>
    </method>
    <method name="asn1_enc_init" result="void" status="unimplemented">
      <arg name="pval" type="ASN1_VALUE **" m68kreg="a0"/>
      <arg name="it" type="const ASN1_ITEM *" m68kreg="a1"/>
    </method>
    <method name="asn1_enc_free" result="void" status="unimplemented">
      <arg name="pval" type="ASN1_VALUE **" m68kreg="a0"/>
      <arg name="it" type="const ASN1_ITEM *" m68kreg="a1"/>
    </method>
    <method name="asn1_enc_restore" result="int" status="unimplemented">
      <arg name="len" type="int *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
      <arg name="pval" type="ASN1_VALUE **" m68kreg="a2"/>
      <arg name="it" type="const ASN1_ITEM *" m68kreg="a3"/>
    </method>
    <method name="asn1_enc_save" result="int" status="unimplemented">
      <arg name="pval" type="ASN1_VALUE **" m68kreg="a0"/>
      <arg name="in" type="unsigned char *" m68kreg="a1"/>
      <arg name="inlen" type="int" m68kreg="d0"/>
      <arg name="it" type="const ASN1_ITEM *" m68kreg="a2"/>
    </method>
    <method name="BIO_ctrl_pending" result="size_t">
      <arg name="b" type="BIO *" m68kreg="a0"/>
    </method>
    <method name="BIO_ctrl_wpending" result="size_t">
      <arg name="b" type="BIO *" m68kreg="a0"/>
    </method>
    <method name="BIO_ctrl_get_write_guarantee" result="size_t">
      <arg name="b" type="BIO *" m68kreg="a0"/>
    </method>
    <method name="BIO_ctrl_get_read_request" result="size_t">
      <arg name="b" type="BIO *" m68kreg="a0"/>
    </method>
    <method name="BIO_ctrl_reset_read_request" result="int">
      <arg name="b" type="BIO *" m68kreg="a0"/>
    </method>
    <method name="BIO_set_ex_data" result="int">
      <arg name="bio" type="BIO *" m68kreg="a0"/>
      <arg name="idx" type="int" m68kreg="d0"/>
      <arg name="data" type="void *" m68kreg="a1"/>
    </method>
    <method name="BIO_get_ex_data" result="void *">
      <arg name="bio" type="BIO *" m68kreg="a0"/>
      <arg name="idx" type="int" m68kreg="d0"/>
    </method>
    <method name="BIO_get_ex_new_index" result="int" status="unimplemented">
      <arg name="argl" type="long" m68kreg="d0"/>
      <arg name="argp" type="void *" m68kreg="a0"/>
      <arg name="new_func" type="CRYPTO_EX_new *" m68kreg="a1"/>
      <arg name="dup_func" type="CRYPTO_EX_dup *" m68kreg="a2"/>
      <arg name="free_func" type="CRYPTO_EX_free *" m68kreg="a3"/>
    </method>
    <method name="BIO_number_read" result="uint64_t">
      <arg name="bio" type="BIO *" m68kreg="a0"/>
    </method>
    <method name="BIO_number_written" result="uint64_t">
      <arg name="bio" type="BIO *" m68kreg="a0"/>
    </method>
    <method name="BIO_s_file" result="const BIO_METHOD *">
    </method>
    <method name="BIO_new_file" result="BIO *">
      <arg name="filename" type="const char *" m68kreg="a0"/>
      <arg name="mode" type="const char *" m68kreg="a1"/>
    </method>
    <method name="BIO_new_fp_amiga" result="BIO *">
      <arg name="stream" type="BPTR" m68kreg="a0"/>
      <arg name="close_flag" type="int" m68kreg="d0"/>
    </method>
    <method name="BIO_new" result="BIO *">
      <arg name="type" type="const BIO_METHOD *" m68kreg="a0"/>
    </method>
    <method name="BIO_set" result="int" status="unimplemented">
      <arg name="a" type="BIO *" m68kreg="a0"/>
      <arg name="type" type="const BIO_METHOD *" m68kreg="a1"/>
    </method>
    <method name="BIO_free" result="int">
      <arg name="a" type="BIO *" m68kreg="a0"/>
    </method>
    <method name="BIO_vfree" result="void">
      <arg name="a" type="BIO *" m68kreg="a0"/>
    </method>
    <method name="BIO_read" result="int">
      <arg name="b" type="BIO *" m68kreg="a0"/>
      <arg name="data" type="void *" m68kreg="a1"/>
      <arg name="dlen" type="int" m68kreg="d0"/>
    </method>
    <method name="BIO_gets" result="int">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="buf" type="char *" m68kreg="a1"/>
      <arg name="size" type="int" m68kreg="d0"/>
    </method>
    <method name="BIO_write" result="int">
      <arg name="b" type="BIO *" m68kreg="a0"/>
      <arg name="data" type="const void *" m68kreg="a1"/>
      <arg name="dlen" type="int" m68kreg="d0"/>
    </method>
    <method name="BIO_puts" result="int">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="buf" type="const char *" m68kreg="a1"/>
    </method>
    <method name="BIO_indent" result="int">
      <arg name="b" type="BIO *" m68kreg="a0"/>
      <arg name="indent" type="int" m68kreg="d0"/>
      <arg name="max" type="int" m68kreg="d1"/>
    </method>
    <method name="BIO_ctrl" result="long">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="cmd" type="int" m68kreg="d0"/>
      <arg name="larg" type="long" m68kreg="d1"/>
      <arg name="parg" type="void *" m68kreg="a1"/>
    </method>
    <method name="BIO_callback_ctrl" result="long">
      <arg name="b" type="BIO *" m68kreg="a0"/>
      <arg name="cmd" type="int" m68kreg="d0"/>
      <arg name="fp" type="BIO_info_cb *" m68kreg="a1"/>
    </method>
    <method name="BIO_ptr_ctrl" result="void *">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="cmd" type="int" m68kreg="d0"/>
      <arg name="larg" type="long" m68kreg="d1"/>
    </method>
    <method name="BIO_int_ctrl" result="long">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="cmd" type="int" m68kreg="d0"/>
      <arg name="larg" type="long" m68kreg="d1"/>
      <arg name="iarg" type="int" m68kreg="d2"/>
    </method>
    <method name="BIO_push" result="BIO *">
      <arg name="b" type="BIO *" m68kreg="a0"/>
      <arg name="append" type="BIO *" m68kreg="a1"/>
    </method>
    <method name="BIO_pop" result="BIO *">
      <arg name="b" type="BIO *" m68kreg="a0"/>
    </method>
    <method name="BIO_free_all" result="void">
      <arg name="a" type="BIO *" m68kreg="a0"/>
    </method>
    <method name="BIO_find_type" result="BIO *">
      <arg name="b" type="BIO *" m68kreg="a0"/>
      <arg name="bio_type" type="int" m68kreg="d0"/>
    </method>
    <method name="BIO_next" result="BIO *">
      <arg name="b" type="BIO *" m68kreg="a0"/>
    </method>
    <method name="BIO_get_retry_BIO" result="BIO *">
      <arg name="bio" type="BIO *" m68kreg="a0"/>
      <arg name="reason" type="int *" m68kreg="a1"/>
    </method>
    <method name="BIO_get_retry_reason" result="int">
      <arg name="bio" type="BIO *" m68kreg="a0"/>
    </method>
    <method name="BIO_dup_chain" result="BIO *">
      <arg name="in" type="BIO *" m68kreg="a0"/>
    </method>
    <method name="BIO_nread0" result="int">
      <arg name="bio" type="BIO *" m68kreg="a0"/>
      <arg name="buf" type="char **" m68kreg="a1"/>
    </method>
    <method name="BIO_nread" result="int">
      <arg name="bio" type="BIO *" m68kreg="a0"/>
      <arg name="buf" type="char **" m68kreg="a1"/>
      <arg name="num" type="int" m68kreg="d0"/>
    </method>
    <method name="BIO_nwrite0" result="int">
      <arg name="bio" type="BIO *" m68kreg="a0"/>
      <arg name="buf" type="char **" m68kreg="a1"/>
    </method>
    <method name="BIO_nwrite" result="int">
      <arg name="bio" type="BIO *" m68kreg="a0"/>
      <arg name="buf" type="char **" m68kreg="a1"/>
      <arg name="num" type="int" m68kreg="d0"/>
    </method>
    <method name="BIO_debug_callback" result="long">
      <arg name="bio" type="BIO *" m68kreg="a0"/>
      <arg name="cmd" type="int" m68kreg="d0"/>
      <arg name="argp" type="const char *" m68kreg="a1"/>
      <arg name="argi" type="int" m68kreg="d1"/>
      <arg name="argl" type="long" m68kreg="d2"/>
      <arg name="ret" type="long" m68kreg="d3"/>
    </method>
    <method name="BIO_s_mem" result="const BIO_METHOD *">
    </method>
    <method name="BIO_new_mem_buf" result="BIO *">
      <arg name="buf" type="const void *" m68kreg="a0"/>
      <arg name="len" type="int" m68kreg="d0"/>
    </method>
    <method name="BIO_s_socket" result="const BIO_METHOD *">
    </method>
    <method name="BIO_s_connect" result="const BIO_METHOD *">
    </method>
    <method name="BIO_s_accept" result="const BIO_METHOD *">
    </method>
    <method name="BIO_s_fd" result="const BIO_METHOD *">
    </method>
    <method name="BIO_s_log" result="const BIO_METHOD *">
    </method>
    <method name="BIO_s_bio" result="const BIO_METHOD *">
    </method>
    <method name="BIO_s_null" result="const BIO_METHOD *">
    </method>
    <method name="BIO_f_null" result="const BIO_METHOD *">
    </method>
    <method name="BIO_f_buffer" result="const BIO_METHOD *">
    </method>
    <method name="BIO_f_nbio_test" result="const BIO_METHOD *">
    </method>
    <method name="BIO_sock_should_retry" result="int">
      <arg name="i" type="int" m68kreg="d0"/>
    </method>
    <method name="BIO_sock_non_fatal_error" result="int">
      <arg name="error" type="int" m68kreg="d0"/>
    </method>
    <method name="BIO_fd_should_retry" result="int">
      <arg name="i" type="int" m68kreg="d0"/>
    </method>
    <method name="BIO_fd_non_fatal_error" result="int">
      <arg name="error" type="int" m68kreg="d0"/>
    </method>
    <method name="BIO_dump" result="int">
      <arg name="b" type="BIO *" m68kreg="a0"/>
      <arg name="bytes" type="const char *" m68kreg="a1"/>
      <arg name="len" type="int" m68kreg="d0"/>
    </method>
    <method name="BIO_dump_indent" result="int">
      <arg name="b" type="BIO *" m68kreg="a0"/>
      <arg name="bytes" type="const char *" m68kreg="a1"/>
      <arg name="len" type="int" m68kreg="d0"/>
      <arg name="indent" type="int" m68kreg="d1"/>
    </method>
    <method name="BIO_gethostbyname" result="struct hostent *">
      <arg name="name" type="const char *" m68kreg="a0"/>
    </method>
    <method name="BIO_sock_error" result="int">
      <arg name="sock" type="int" m68kreg="d0"/>
    </method>
    <method name="BIO_socket_ioctl" result="int">
      <arg name="fd" type="int" m68kreg="d0"/>
      <arg name="type" type="long" m68kreg="d1"/>
      <arg name="arg" type="void *" m68kreg="a0"/>
    </method>
    <method name="BIO_socket_nbio" result="int">
      <arg name="fd" type="int" m68kreg="d0"/>
      <arg name="mode" type="int" m68kreg="d1"/>
    </method>
    <method name="BIO_get_port" result="int">
      <arg name="str" type="const char *" m68kreg="a0"/>
      <arg name="port_ptr" type="unsigned short *" m68kreg="a1"/>
    </method>
    <method name="BIO_get_host_ip" result="int">
      <arg name="str" type="const char *" m68kreg="a0"/>
      <arg name="ip" type="unsigned char *" m68kreg="a1"/>
    </method>
    <method name="BIO_get_accept_socket" result="int">
      <arg name="host_port" type="char *" m68kreg="a0"/>
      <arg name="mode" type="int" m68kreg="d0"/>
    </method>
    <method name="BIO_accept" result="int">
      <arg name="sock" type="int" m68kreg="d0"/>
      <arg name="ip_port" type="char **" m68kreg="a0"/>
    </method>
    <method name="BIO_sock_init" result="int">
    </method>
    <method name="BIO_sock_cleanup" result="void" status="unimplemented">
    </method>
    <method name="BIO_set_tcp_ndelay" result="int">
      <arg name="sock" type="int" m68kreg="d0"/>
      <arg name="turn_on" type="int" m68kreg="d1"/>
    </method>
    <method name="BIO_new_socket" result="BIO *">
      <arg name="sock" type="int" m68kreg="d0"/>
      <arg name="close_flag" type="int" m68kreg="d1"/>
    </method>
    <method name="BIO_new_fd" result="BIO *">
      <arg name="fd" type="int" m68kreg="d0"/>
      <arg name="close_flag" type="int" m68kreg="d1"/>
    </method>
    <method name="BIO_new_connect" result="BIO *">
      <arg name="host_port" type="const char *" m68kreg="a0"/>
    </method>
    <method name="BIO_new_accept" result="BIO *">
      <arg name="host_port" type="const char *" m68kreg="a0"/>
    </method>
    <method name="BIO_new_bio_pair" result="int">
      <arg name="bio1" type="BIO **" m68kreg="a0"/>
      <arg name="writebuf1" type="size_t" m68kreg="d0"/>
      <arg name="bio2" type="BIO **" m68kreg="a1"/>
      <arg name="writebuf2" type="size_t" m68kreg="d1"/>
    </method>
    <method name="BIO_copy_next_retry" result="void">
      <arg name="b" type="BIO *" m68kreg="a0"/>
    </method>
    <method name="BIO_vprintf" result="int">
      <arg name="bio" type="BIO *" m68kreg="a0"/>
      <arg name="format" type="const char *" m68kreg="a1"/>
      <arg name="args" type="va_list" m68kreg="a2"/>
    </method>
    <method name="BIO_printf" result="int">
      <arg name="bio" type="BIO *" m68kreg="a0"/>
      <arg name="format" type="const char *" m68kreg="a1"/>
      <vararg name="dummy" type="long" m68kreg="a2"/>
    </method>
    <method name="BIO_vsnprintf" result="int">
      <arg name="buf" type="char *" m68kreg="a0"/>
      <arg name="n" type="size_t" m68kreg="d0"/>
      <arg name="format" type="const char *" m68kreg="a1"/>
      <arg name="args" type="va_list" m68kreg="a2"/>
    </method>
    <method name="BIO_snprintf" result="int">
      <arg name="buf" type="char *" m68kreg="a0"/>
      <arg name="n" type="size_t" m68kreg="d0"/>
      <arg name="format" type="const char *" m68kreg="a1"/>
      <vararg name="dummy" type="long" m68kreg="a2"/>
    </method>
    <method name="ERR_load_BIO_strings" result="int">
    </method>
    <method name="BN_value_one" result="const BIGNUM *">
    </method>
    <method name="BN_options" result="char *">
    </method>
    <method name="BN_CTX_new" result="BN_CTX *">
    </method>
    <method name="BN_CTX_init" result="void" status="unimplemented">
      <arg name="c" type="BN_CTX *" m68kreg="a0"/>
    </method>
    <method name="BN_CTX_free" result="void">
      <arg name="c" type="BN_CTX *" m68kreg="a0"/>
    </method>
    <method name="BN_CTX_start" result="void">
      <arg name="ctx" type="BN_CTX *" m68kreg="a0"/>
    </method>
    <method name="BN_CTX_get" result="BIGNUM *">
      <arg name="ctx" type="BN_CTX *" m68kreg="a0"/>
    </method>
    <method name="BN_CTX_end" result="void">
      <arg name="ctx" type="BN_CTX *" m68kreg="a0"/>
    </method>
    <method name="BN_rand" result="int">
      <arg name="rnd" type="BIGNUM *" m68kreg="a0"/>
      <arg name="bits" type="int" m68kreg="d0"/>
      <arg name="top" type="int" m68kreg="d1"/>
      <arg name="bottom" type="int" m68kreg="d2"/>
    </method>
    <method name="BN_pseudo_rand" result="int">
      <arg name="rnd" type="BIGNUM *" m68kreg="a0"/>
      <arg name="bits" type="int" m68kreg="d0"/>
      <arg name="top" type="int" m68kreg="d1"/>
      <arg name="bottom" type="int" m68kreg="d2"/>
    </method>
    <method name="BN_rand_range" result="int">
      <arg name="rnd" type="BIGNUM *" m68kreg="a0"/>
      <arg name="range" type="BIGNUM *" m68kreg="a1"/>
    </method>
    <method name="BN_pseudo_rand_range" result="int">
      <arg name="rnd" type="BIGNUM *" m68kreg="a0"/>
      <arg name="range" type="BIGNUM *" m68kreg="a1"/>
    </method>
    <method name="BN_num_bits" result="int">
      <arg name="a" type="const BIGNUM *" m68kreg="a0"/>
    </method>
    <method name="BN_num_bits_word" result="int">
      <arg name="a" type="BN_ULONG" m68kreg="d0"/>
    </method>
    <method name="BN_new" result="BIGNUM *">
    </method>
    <method name="BN_init" result="void" status="unimplemented">
      <arg name="a" type="BIGNUM *" m68kreg="a0"/>
    </method>
    <method name="BN_clear_free" result="void">
      <arg name="a" type="BIGNUM *" m68kreg="a0"/>
    </method>
    <method name="BN_copy" result="BIGNUM *">
      <arg name="a" type="BIGNUM *" m68kreg="a0"/>
      <arg name="b" type="const BIGNUM *" m68kreg="a1"/>
    </method>
    <method name="BN_swap" result="void">
      <arg name="a" type="BIGNUM *" m68kreg="a0"/>
      <arg name="b" type="BIGNUM *" m68kreg="a1"/>
    </method>
    <method name="BN_bin2bn" result="BIGNUM *">
      <arg name="s" type="const unsigned char *" m68kreg="a0"/>
      <arg name="len" type="int" m68kreg="d0"/>
      <arg name="ret" type="BIGNUM *" m68kreg="a1"/>
    </method>
    <method name="BN_bn2bin" result="int">
      <arg name="a" type="const BIGNUM *" m68kreg="a0"/>
      <arg name="to" type="unsigned char *" m68kreg="a1"/>
    </method>
    <method name="BN_mpi2bn" result="BIGNUM *">
      <arg name="s" type="const unsigned char *" m68kreg="a0"/>
      <arg name="len" type="int" m68kreg="d0"/>
      <arg name="ret" type="BIGNUM *" m68kreg="a1"/>
    </method>
    <method name="BN_bn2mpi" result="int">
      <arg name="a" type="const BIGNUM *" m68kreg="a0"/>
      <arg name="to" type="unsigned char *" m68kreg="a1"/>
    </method>
    <method name="BN_sub" result="int">
      <arg name="r" type="BIGNUM *" m68kreg="a0"/>
      <arg name="a" type="const BIGNUM *" m68kreg="a1"/>
      <arg name="b" type="const BIGNUM *" m68kreg="a2"/>
    </method>
    <method name="BN_usub" result="int">
      <arg name="r" type="BIGNUM *" m68kreg="a0"/>
      <arg name="a" type="const BIGNUM *" m68kreg="a1"/>
      <arg name="b" type="const BIGNUM *" m68kreg="a2"/>
    </method>
    <method name="BN_uadd" result="int">
      <arg name="r" type="BIGNUM *" m68kreg="a0"/>
      <arg name="a" type="const BIGNUM *" m68kreg="a1"/>
      <arg name="b" type="const BIGNUM *" m68kreg="a2"/>
    </method>
    <method name="BN_add" result="int">
      <arg name="r" type="BIGNUM *" m68kreg="a0"/>
      <arg name="a" type="const BIGNUM *" m68kreg="a1"/>
      <arg name="b" type="const BIGNUM *" m68kreg="a2"/>
    </method>
    <method name="BN_mul" result="int">
      <arg name="r" type="BIGNUM *" m68kreg="a0"/>
      <arg name="a" type="const BIGNUM *" m68kreg="a1"/>
      <arg name="b" type="const BIGNUM *" m68kreg="a2"/>
      <arg name="ctx" type="BN_CTX *" m68kreg="a3"/>
    </method>
    <method name="BN_sqr" result="int">
      <arg name="r" type="BIGNUM *" m68kreg="a0"/>
      <arg name="a" type="const BIGNUM *" m68kreg="a1"/>
      <arg name="ctx" type="BN_CTX *" m68kreg="a2"/>
    </method>
    <method name="BN_div" result="int">
      <arg name="dv" type="BIGNUM *" m68kreg="a0"/>
      <arg name="rem" type="BIGNUM *" m68kreg="a1"/>
      <arg name="m" type="const BIGNUM *" m68kreg="a2"/>
      <arg name="d" type="const BIGNUM *" m68kreg="a3"/>
      <arg name="ctx" type="BN_CTX *" m68kreg="d0"/>
    </method>
    <method name="BN_nnmod" result="int">
      <arg name="r" type="BIGNUM *" m68kreg="a0"/>
      <arg name="m" type="const BIGNUM *" m68kreg="a1"/>
      <arg name="d" type="const BIGNUM *" m68kreg="a2"/>
      <arg name="ctx" type="BN_CTX *" m68kreg="a3"/>
    </method>
    <method name="BN_mod_add" result="int">
      <arg name="r" type="BIGNUM *" m68kreg="a0"/>
      <arg name="a" type="const BIGNUM *" m68kreg="a1"/>
      <arg name="b" type="const BIGNUM *" m68kreg="a2"/>
      <arg name="m" type="const BIGNUM *" m68kreg="a3"/>
      <arg name="ctx" type="BN_CTX *" m68kreg="d0"/>
    </method>
    <method name="BN_mod_add_quick" result="int">
      <arg name="r" type="BIGNUM *" m68kreg="a0"/>
      <arg name="a" type="const BIGNUM *" m68kreg="a1"/>
      <arg name="b" type="const BIGNUM *" m68kreg="a2"/>
      <arg name="m" type="const BIGNUM *" m68kreg="a3"/>
    </method>
    <method name="BN_mod_sub" result="int">
      <arg name="r" type="BIGNUM *" m68kreg="a0"/>
      <arg name="a" type="const BIGNUM *" m68kreg="a1"/>
      <arg name="b" type="const BIGNUM *" m68kreg="a2"/>
      <arg name="m" type="const BIGNUM *" m68kreg="a3"/>
      <arg name="ctx" type="BN_CTX *" m68kreg="d0"/>
    </method>
    <method name="BN_mod_sub_quick" result="int">
      <arg name="r" type="BIGNUM *" m68kreg="a0"/>
      <arg name="a" type="const BIGNUM *" m68kreg="a1"/>
      <arg name="b" type="const BIGNUM *" m68kreg="a2"/>
      <arg name="m" type="const BIGNUM *" m68kreg="a3"/>
    </method>
    <method name="BN_mod_mul" result="int">
      <arg name="r" type="BIGNUM *" m68kreg="a0"/>
      <arg name="a" type="const BIGNUM *" m68kreg="a1"/>
      <arg name="b" type="const BIGNUM *" m68kreg="a2"/>
      <arg name="m" type="const BIGNUM *" m68kreg="a3"/>
      <arg name="ctx" type="BN_CTX *" m68kreg="d0"/>
    </method>
    <method name="BN_mod_sqr" result="int">
      <arg name="r" type="BIGNUM *" m68kreg="a0"/>
      <arg name="a" type="const BIGNUM *" m68kreg="a1"/>
      <arg name="m" type="const BIGNUM *" m68kreg="a2"/>
      <arg name="ctx" type="BN_CTX *" m68kreg="a3"/>
    </method>
    <method name="BN_mod_lshift1" result="int">
      <arg name="r" type="BIGNUM *" m68kreg="a0"/>
      <arg name="a" type="const BIGNUM *" m68kreg="a1"/>
      <arg name="m" type="const BIGNUM *" m68kreg="a2"/>
      <arg name="ctx" type="BN_CTX *" m68kreg="a3"/>
    </method>
    <method name="BN_mod_lshift1_quick" result="int">
      <arg name="r" type="BIGNUM *" m68kreg="a0"/>
      <arg name="a" type="const BIGNUM *" m68kreg="a1"/>
      <arg name="m" type="const BIGNUM *" m68kreg="a2"/>
    </method>
    <method name="BN_mod_lshift" result="int">
      <arg name="r" type="BIGNUM *" m68kreg="a0"/>
      <arg name="a" type="const BIGNUM *" m68kreg="a1"/>
      <arg name="n" type="int" m68kreg="d0"/>
      <arg name="m" type="const BIGNUM *" m68kreg="a2"/>
      <arg name="ctx" type="BN_CTX *" m68kreg="a3"/>
    </method>
    <method name="BN_mod_lshift_quick" result="int">
      <arg name="r" type="BIGNUM *" m68kreg="a0"/>
      <arg name="a" type="const BIGNUM *" m68kreg="a1"/>
      <arg name="n" type="int" m68kreg="d0"/>
      <arg name="m" type="const BIGNUM *" m68kreg="a2"/>
    </method>
    <method name="BN_mod_word" result="BN_ULONG">
      <arg name="a" type="const BIGNUM *" m68kreg="a0"/>
      <arg name="w" type="BN_ULONG" m68kreg="d0"/>
    </method>
    <method name="BN_div_word" result="BN_ULONG">
      <arg name="a" type="BIGNUM *" m68kreg="a0"/>
      <arg name="w" type="BN_ULONG" m68kreg="d0"/>
    </method>
    <method name="BN_mul_word" result="int">
      <arg name="a" type="BIGNUM *" m68kreg="a0"/>
      <arg name="w" type="BN_ULONG" m68kreg="d0"/>
    </method>
    <method name="BN_add_word" result="int">
      <arg name="a" type="BIGNUM *" m68kreg="a0"/>
      <arg name="w" type="BN_ULONG" m68kreg="d0"/>
    </method>
    <method name="BN_sub_word" result="int">
      <arg name="a" type="BIGNUM *" m68kreg="a0"/>
      <arg name="w" type="BN_ULONG" m68kreg="d0"/>
    </method>
    <method name="BN_set_word" result="int">
      <arg name="a" type="BIGNUM *" m68kreg="a0"/>
      <arg name="w" type="BN_ULONG" m68kreg="d0"/>
    </method>
    <method name="BN_get_word" result="BN_ULONG">
      <arg name="a" type="const BIGNUM *" m68kreg="a0"/>
    </method>
    <method name="BN_cmp" result="int">
      <arg name="a" type="const BIGNUM *" m68kreg="a0"/>
      <arg name="b" type="const BIGNUM *" m68kreg="a1"/>
    </method>
    <method name="BN_free" result="void">
      <arg name="a" type="BIGNUM *" m68kreg="a0"/>
    </method>
    <method name="BN_is_bit_set" result="int">
      <arg name="a" type="const BIGNUM *" m68kreg="a0"/>
      <arg name="n" type="int" m68kreg="d0"/>
    </method>
    <method name="BN_lshift" result="int">
      <arg name="r" type="BIGNUM *" m68kreg="a0"/>
      <arg name="a" type="const BIGNUM *" m68kreg="a1"/>
      <arg name="n" type="int" m68kreg="d0"/>
    </method>
    <method name="BN_lshift1" result="int">
      <arg name="r" type="BIGNUM *" m68kreg="a0"/>
      <arg name="a" type="const BIGNUM *" m68kreg="a1"/>
    </method>
    <method name="BN_exp" result="int">
      <arg name="r" type="BIGNUM *" m68kreg="a0"/>
      <arg name="a" type="const BIGNUM *" m68kreg="a1"/>
      <arg name="p" type="const BIGNUM *" m68kreg="a2"/>
      <arg name="ctx" type="BN_CTX *" m68kreg="a3"/>
    </method>
    <method name="BN_mod_exp" result="int">
      <arg name="r" type="BIGNUM *" m68kreg="a0"/>
      <arg name="a" type="const BIGNUM *" m68kreg="a1"/>
      <arg name="p" type="const BIGNUM *" m68kreg="a2"/>
      <arg name="m" type="const BIGNUM *" m68kreg="a3"/>
      <arg name="ctx" type="BN_CTX *" m68kreg="d0"/>
    </method>
    <method name="BN_mod_exp_mont" result="int">
      <arg name="r" type="BIGNUM *" m68kreg="a0"/>
      <arg name="a" type="const BIGNUM *" m68kreg="a1"/>
      <arg name="p" type="const BIGNUM *" m68kreg="a2"/>
      <arg name="m" type="const BIGNUM *" m68kreg="a3"/>
      <arg name="ctx" type="BN_CTX *" m68kreg="d0"/>
      <arg name="m_ctx" type="BN_MONT_CTX *" m68kreg="d1"/>
    </method>
    <method name="BN_mod_exp_mont_word" result="int">
      <arg name="r" type="BIGNUM *" m68kreg="a0"/>
      <arg name="a" type="BN_ULONG" m68kreg="d0"/>
      <arg name="p" type="const BIGNUM *" m68kreg="a1"/>
      <arg name="m" type="const BIGNUM *" m68kreg="a2"/>
      <arg name="ctx" type="BN_CTX *" m68kreg="a3"/>
      <arg name="m_ctx" type="BN_MONT_CTX *" m68kreg="d1"/>
    </method>
    <method name="BN_mod_exp2_mont" result="int">
      <arg name="r" type="BIGNUM *" m68kreg="a0"/>
      <arg name="a1" type="const BIGNUM *" m68kreg="a1"/>
      <arg name="p1" type="const BIGNUM *" m68kreg="a2"/>
      <arg name="a2" type="const BIGNUM *" m68kreg="a3"/>
      <arg name="p2" type="const BIGNUM *" m68kreg="d0"/>
      <arg name="m" type="const BIGNUM *" m68kreg="d1"/>
      <arg name="ctx" type="BN_CTX *" m68kreg="d2"/>
      <arg name="m_ctx" type="BN_MONT_CTX *" m68kreg="d3"/>
    </method>
    <method name="BN_mod_exp_simple" result="int">
      <arg name="r" type="BIGNUM *" m68kreg="a0"/>
      <arg name="a" type="const BIGNUM *" m68kreg="a1"/>
      <arg name="p" type="const BIGNUM *" m68kreg="a2"/>
      <arg name="m" type="const BIGNUM *" m68kreg="a3"/>
      <arg name="ctx" type="BN_CTX *" m68kreg="d0"/>
    </method>
    <method name="BN_mask_bits" result="int">
      <arg name="a" type="BIGNUM *" m68kreg="a0"/>
      <arg name="n" type="int" m68kreg="d0"/>
    </method>
    <method name="BN_print" result="int">
      <arg name="fp" type="BIO *" m68kreg="a0"/>
      <arg name="a" type="const BIGNUM *" m68kreg="a1"/>
    </method>
    <method name="BN_reciprocal" result="int">
      <arg name="r" type="BIGNUM *" m68kreg="a0"/>
      <arg name="m" type="const BIGNUM *" m68kreg="a1"/>
      <arg name="len" type="int" m68kreg="d0"/>
      <arg name="ctx" type="BN_CTX *" m68kreg="a2"/>
    </method>
    <method name="BN_rshift" result="int">
      <arg name="r" type="BIGNUM *" m68kreg="a0"/>
      <arg name="a" type="const BIGNUM *" m68kreg="a1"/>
      <arg name="n" type="int" m68kreg="d0"/>
    </method>
    <method name="BN_rshift1" result="int">
      <arg name="r" type="BIGNUM *" m68kreg="a0"/>
      <arg name="a" type="const BIGNUM *" m68kreg="a1"/>
    </method>
    <method name="BN_clear" result="void">
      <arg name="a" type="BIGNUM *" m68kreg="a0"/>
    </method>
    <method name="BN_dup" result="BIGNUM *">
      <arg name="a" type="const BIGNUM *" m68kreg="a0"/>
    </method>
    <method name="BN_ucmp" result="int">
      <arg name="a" type="const BIGNUM *" m68kreg="a0"/>
      <arg name="b" type="const BIGNUM *" m68kreg="a1"/>
    </method>
    <method name="BN_set_bit" result="int">
      <arg name="a" type="BIGNUM *" m68kreg="a0"/>
      <arg name="n" type="int" m68kreg="d0"/>
    </method>
    <method name="BN_clear_bit" result="int">
      <arg name="a" type="BIGNUM *" m68kreg="a0"/>
      <arg name="n" type="int" m68kreg="d0"/>
    </method>
    <method name="BN_bn2hex" result="char *">
      <arg name="a" type="const BIGNUM *" m68kreg="a0"/>
    </method>
    <method name="BN_bn2dec" result="char *">
      <arg name="a" type="const BIGNUM *" m68kreg="a0"/>
    </method>
    <method name="BN_hex2bn" result="int">
      <arg name="a" type="BIGNUM **" m68kreg="a0"/>
      <arg name="str" type="const char *" m68kreg="a1"/>
    </method>
    <method name="BN_dec2bn" result="int">
      <arg name="a" type="BIGNUM **" m68kreg="a0"/>
      <arg name="str" type="const char *" m68kreg="a1"/>
    </method>
    <method name="BN_gcd" result="int">
      <arg name="r" type="BIGNUM *" m68kreg="a0"/>
      <arg name="a" type="const BIGNUM *" m68kreg="a1"/>
      <arg name="b" type="const BIGNUM *" m68kreg="a2"/>
      <arg name="ctx" type="BN_CTX *" m68kreg="a3"/>
    </method>
    <method name="BN_kronecker" result="int">
      <arg name="a" type="const BIGNUM *" m68kreg="a0"/>
      <arg name="b" type="const BIGNUM *" m68kreg="a1"/>
      <arg name="ctx" type="BN_CTX *" m68kreg="a2"/>
    </method>
    <method name="BN_mod_inverse" result="BIGNUM *">
      <arg name="ret" type="BIGNUM *" m68kreg="a0"/>
      <arg name="a" type="const BIGNUM *" m68kreg="a1"/>
      <arg name="n" type="const BIGNUM *" m68kreg="a2"/>
      <arg name="ctx" type="BN_CTX *" m68kreg="a3"/>
    </method>
    <method name="BN_mod_sqrt" result="BIGNUM *">
      <arg name="ret" type="BIGNUM *" m68kreg="a0"/>
      <arg name="a" type="const BIGNUM *" m68kreg="a1"/>
      <arg name="n" type="const BIGNUM *" m68kreg="a2"/>
      <arg name="ctx" type="BN_CTX *" m68kreg="a3"/>
    </method>
    <method name="BN_generate_prime" result="BIGNUM *">
      <arg name="ret" type="BIGNUM *" m68kreg="a0"/>
      <arg name="bits" type="int" m68kreg="d0"/>
      <arg name="safe" type="int" m68kreg="d1"/>
      <arg name="add" type="const BIGNUM *" m68kreg="a1"/>
      <arg name="rem" type="const BIGNUM *" m68kreg="a2"/>
      <arg name="callback" type="void (*)(int, int, void *)" m68kreg="a3"/>
      <arg name="cb_arg" type="void *" m68kreg="d2"/>
    </method>
    <method name="BN_is_prime" result="int">
      <arg name="p" type="const BIGNUM *" m68kreg="a0"/>
      <arg name="nchecks" type="int" m68kreg="d0"/>
      <arg name="callback" type="void (*)(int, int, void *)" m68kreg="a1"/>
      <arg name="ctx" type="BN_CTX *" m68kreg="a2"/>
      <arg name="cb_arg" type="void *" m68kreg="a3"/>
    </method>
    <method name="BN_is_prime_fasttest" result="int">
      <arg name="p" type="const BIGNUM *" m68kreg="a0"/>
      <arg name="nchecks" type="int" m68kreg="d0"/>
      <arg name="callback" type="void (*)(int, int, void *)" m68kreg="a1"/>
      <arg name="ctx" type="BN_CTX *" m68kreg="a2"/>
      <arg name="cb_arg" type="void *" m68kreg="a3"/>
      <arg name="do_trial_division" type="int" m68kreg="d1"/>
    </method>
    <method name="BN_MONT_CTX_new" result="BN_MONT_CTX *">
    </method>
    <method name="BN_MONT_CTX_init" result="void" status="unimplemented">
      <arg name="ctx" type="BN_MONT_CTX *" m68kreg="a0"/>
    </method>
    <method name="BN_mod_mul_montgomery" result="int">
      <arg name="r" type="BIGNUM *" m68kreg="a0"/>
      <arg name="a" type="const BIGNUM *" m68kreg="a1"/>
      <arg name="b" type="const BIGNUM *" m68kreg="a2"/>
      <arg name="mont" type="BN_MONT_CTX *" m68kreg="a3"/>
      <arg name="ctx" type="BN_CTX *" m68kreg="d0"/>
    </method>
    <method name="BN_from_montgomery" result="int">
      <arg name="r" type="BIGNUM *" m68kreg="a0"/>
      <arg name="a" type="const BIGNUM *" m68kreg="a1"/>
      <arg name="mont" type="BN_MONT_CTX *" m68kreg="a2"/>
      <arg name="ctx" type="BN_CTX *" m68kreg="a3"/>
    </method>
    <method name="BN_MONT_CTX_free" result="void">
      <arg name="mont" type="BN_MONT_CTX *" m68kreg="a0"/>
    </method>
    <method name="BN_MONT_CTX_set" result="int">
      <arg name="mont" type="BN_MONT_CTX *" m68kreg="a0"/>
      <arg name="mod" type="const BIGNUM *" m68kreg="a1"/>
      <arg name="ctx" type="BN_CTX *" m68kreg="a2"/>
    </method>
    <method name="BN_MONT_CTX_copy" result="BN_MONT_CTX *">
      <arg name="to" type="BN_MONT_CTX *" m68kreg="a0"/>
      <arg name="from" type="BN_MONT_CTX *" m68kreg="a1"/>
    </method>
    <method name="BN_BLINDING_new" result="BN_BLINDING *">
      <arg name="A" type="BIGNUM *" m68kreg="a0"/>
      <arg name="Ai" type="BIGNUM *" m68kreg="a1"/>
      <arg name="mod" type="BIGNUM *" m68kreg="a2"/>
    </method>
    <method name="BN_BLINDING_free" result="void">
      <arg name="b" type="BN_BLINDING *" m68kreg="a0"/>
    </method>
    <method name="BN_BLINDING_update" result="int">
      <arg name="b" type="BN_BLINDING *" m68kreg="a0"/>
      <arg name="ctx" type="BN_CTX *" m68kreg="a1"/>
    </method>
    <method name="BN_BLINDING_convert" result="int">
      <arg name="n" type="BIGNUM *" m68kreg="a0"/>
      <arg name="r" type="BN_BLINDING *" m68kreg="a1"/>
      <arg name="ctx" type="BN_CTX *" m68kreg="a2"/>
    </method>
    <method name="BN_BLINDING_invert" result="int">
      <arg name="n" type="BIGNUM *" m68kreg="a0"/>
      <arg name="b" type="BN_BLINDING *" m68kreg="a1"/>
      <arg name="ctx" type="BN_CTX *" m68kreg="a2"/>
    </method>
    <method name="BN_set_params" result="void">
      <arg name="mul" type="int" m68kreg="d0"/>
      <arg name="high" type="int" m68kreg="d1"/>
      <arg name="low" type="int" m68kreg="d2"/>
      <arg name="mont" type="int" m68kreg="d3"/>
    </method>
    <method name="BN_get_params" result="int">
      <arg name="which" type="int" m68kreg="d0"/>
    </method>
    <method name="BN_RECP_CTX_init" result="void" status="unimplemented">
      <arg name="recp" type="BN_RECP_CTX *" m68kreg="a0"/>
    </method>
    <method name="BN_RECP_CTX_new" result="BN_RECP_CTX *">
    </method>
    <method name="BN_RECP_CTX_free" result="void">
      <arg name="recp" type="BN_RECP_CTX *" m68kreg="a0"/>
    </method>
    <method name="BN_RECP_CTX_set" result="int">
      <arg name="recp" type="BN_RECP_CTX *" m68kreg="a0"/>
      <arg name="rdiv" type="const BIGNUM *" m68kreg="a1"/>
      <arg name="ctx" type="BN_CTX *" m68kreg="a2"/>
    </method>
    <method name="BN_mod_mul_reciprocal" result="int">
      <arg name="r" type="BIGNUM *" m68kreg="a0"/>
      <arg name="x" type="const BIGNUM *" m68kreg="a1"/>
      <arg name="y" type="const BIGNUM *" m68kreg="a2"/>
      <arg name="recp" type="BN_RECP_CTX *" m68kreg="a3"/>
      <arg name="ctx" type="BN_CTX *" m68kreg="d0"/>
    </method>
    <method name="BN_mod_exp_recp" result="int">
      <arg name="r" type="BIGNUM *" m68kreg="a0"/>
      <arg name="a" type="const BIGNUM *" m68kreg="a1"/>
      <arg name="p" type="const BIGNUM *" m68kreg="a2"/>
      <arg name="m" type="const BIGNUM *" m68kreg="a3"/>
      <arg name="ctx" type="BN_CTX *" m68kreg="d0"/>
    </method>
    <method name="BN_div_recp" result="int">
      <arg name="dv" type="BIGNUM *" m68kreg="a0"/>
      <arg name="rem" type="BIGNUM *" m68kreg="a1"/>
      <arg name="m" type="const BIGNUM *" m68kreg="a2"/>
      <arg name="recp" type="BN_RECP_CTX *" m68kreg="a3"/>
      <arg name="ctx" type="BN_CTX *" m68kreg="d0"/>
    </method>
    <method name="bn_expand2" result="BIGNUM *" status="unimplemented">
      <arg name="a" type="BIGNUM *" m68kreg="a0"/>
      <arg name="words" type="int" m68kreg="d0"/>
    </method>
    <method name="bn_dup_expand" result="BIGNUM *" status="unimplemented">
      <arg name="a" type="const BIGNUM *" m68kreg="a0"/>
      <arg name="words" type="int" m68kreg="d0"/>
    </method>
    <method name="bn_mul_add_words" result="BN_ULONG" status="unimplemented">
      <arg name="rp" type="BN_ULONG *" m68kreg="a0"/>
      <arg name="ap" type="const BN_ULONG *" m68kreg="a1"/>
      <arg name="num" type="int" m68kreg="d0"/>
      <arg name="w" type="BN_ULONG" m68kreg="d1"/>
    </method>
    <method name="bn_mul_words" result="BN_ULONG" status="unimplemented">
      <arg name="rp" type="BN_ULONG *" m68kreg="a0"/>
      <arg name="ap" type="const BN_ULONG *" m68kreg="a1"/>
      <arg name="num" type="int" m68kreg="d0"/>
      <arg name="w" type="BN_ULONG" m68kreg="d1"/>
    </method>
    <method name="bn_sqr_words" result="void" status="unimplemented">
      <arg name="rp" type="BN_ULONG *" m68kreg="a0"/>
      <arg name="ap" type="const BN_ULONG *" m68kreg="a1"/>
      <arg name="num" type="int" m68kreg="d0"/>
    </method>
    <method name="bn_div_words" result="BN_ULONG" status="unimplemented">
      <arg name="h" type="BN_ULONG" m68kreg="d0"/>
      <arg name="l" type="BN_ULONG" m68kreg="d1"/>
      <arg name="d" type="BN_ULONG" m68kreg="d2"/>
    </method>
    <method name="bn_add_words" result="BN_ULONG" status="unimplemented">
      <arg name="rp" type="BN_ULONG *" m68kreg="a0"/>
      <arg name="ap" type="const BN_ULONG *" m68kreg="a1"/>
      <arg name="bp" type="const BN_ULONG *" m68kreg="a2"/>
      <arg name="num" type="int" m68kreg="d0"/>
    </method>
    <method name="bn_sub_words" result="BN_ULONG" status="unimplemented">
      <arg name="rp" type="BN_ULONG *" m68kreg="a0"/>
      <arg name="ap" type="const BN_ULONG *" m68kreg="a1"/>
      <arg name="bp" type="const BN_ULONG *" m68kreg="a2"/>
      <arg name="num" type="int" m68kreg="d0"/>
    </method>
    <method name="BN_bntest_rand" result="int">
      <arg name="rnd" type="BIGNUM *" m68kreg="a0"/>
      <arg name="bits" type="int" m68kreg="d0"/>
      <arg name="top" type="int" m68kreg="d1"/>
      <arg name="bottom" type="int" m68kreg="d2"/>
    </method>
    <method name="ERR_load_BN_strings" result="int">
    </method>
    <method name="BUF_MEM_new" result="BUF_MEM *">
    </method>
    <method name="BUF_MEM_free" result="void">
      <arg name="a" type="BUF_MEM *" m68kreg="a0"/>
    </method>
    <method name="BUF_MEM_grow" result="size_t">
      <arg name="str" type="BUF_MEM *" m68kreg="a0"/>
      <arg name="len" type="size_t" m68kreg="d0"/>
    </method>
    <method name="BUF_MEM_grow_clean" result="size_t">
      <arg name="str" type="BUF_MEM *" m68kreg="a0"/>
      <arg name="len" type="size_t" m68kreg="d0"/>
    </method>
    <method name="BUF_strdup" result="char *" status="unimplemented">
      <arg name="str" type="const char *" m68kreg="a0"/>
    </method>
    <method name="BUF_strlcpy" result="size_t" status="unimplemented">
      <arg name="dst" type="char *" m68kreg="a0"/>
      <arg name="src" type="const char *" m68kreg="a1"/>
      <arg name="siz" type="size_t" m68kreg="d0"/>
    </method>
    <method name="BUF_strlcat" result="size_t" status="unimplemented">
      <arg name="dst" type="char *" m68kreg="a0"/>
      <arg name="src" type="const char *" m68kreg="a1"/>
      <arg name="siz" type="size_t" m68kreg="d0"/>
    </method>
    <method name="ERR_load_BUF_strings" result="int">
    </method>
    <method name="COMP_CTX_new" result="COMP_CTX *">
      <arg name="meth" type="COMP_METHOD *" m68kreg="a0"/>
    </method>
    <method name="COMP_CTX_free" result="void">
      <arg name="ctx" type="COMP_CTX *" m68kreg="a0"/>
    </method>
    <method name="COMP_compress_block" result="int">
      <arg name="ctx" type="COMP_CTX *" m68kreg="a0"/>
      <arg name="out" type="unsigned char *" m68kreg="a1"/>
      <arg name="olen" type="int" m68kreg="d0"/>
      <arg name="in" type="unsigned char *" m68kreg="a2"/>
      <arg name="ilen" type="int" m68kreg="d1"/>
    </method>
    <method name="COMP_expand_block" result="int">
      <arg name="ctx" type="COMP_CTX *" m68kreg="a0"/>
      <arg name="out" type="unsigned char *" m68kreg="a1"/>
      <arg name="olen" type="int" m68kreg="d0"/>
      <arg name="in" type="unsigned char *" m68kreg="a2"/>
      <arg name="ilen" type="int" m68kreg="d1"/>
    </method>
    <method name="COMP_rle" result="COMP_METHOD *" status="unimplemented">
    </method>
    <method name="COMP_zlib" result="COMP_METHOD *">
    </method>
    <method name="ERR_load_COMP_strings" result="int">
    </method>
    <method name="CONF_set_default_method" result="int">
      <arg name="meth" type="CONF_METHOD *" m68kreg="a0"/>
    </method>
    <method name="CONF_set_nconf" result="void">
      <arg name="conf" type="CONF *" m68kreg="a0"/>
      <arg name="hash" type="LHASH_OF(CONF_VALUE) *" m68kreg="a1"/>
    </method>
    <method name="CONF_load" result="LHASH_OF(CONF_VALUE) *">
      <arg name="conf" type="LHASH_OF(CONF_VALUE) *" m68kreg="a0"/>
      <arg name="file" type="const char *" m68kreg="a1"/>
      <arg name="eline" type="long *" m68kreg="a2"/>
    </method>
    <method name="CONF_load_bio" result="LHASH_OF(CONF_VALUE) *">
      <arg name="conf" type="LHASH_OF(CONF_VALUE) *" m68kreg="a0"/>
      <arg name="bp" type="BIO *" m68kreg="a1"/>
      <arg name="eline" type="long *" m68kreg="a2"/>
    </method>
    <method name="CONF_get_section" result="STACK_OF(CONF_VALUE) *">
      <arg name="conf" type="LHASH_OF(CONF_VALUE) *" m68kreg="a0"/>
      <arg name="section" type="const char *" m68kreg="a1"/>
    </method>
    <method name="CONF_get_string" result="char *">
      <arg name="conf" type="LHASH_OF(CONF_VALUE) *" m68kreg="a0"/>
      <arg name="group" type="const char *" m68kreg="a1"/>
      <arg name="name" type="const char *" m68kreg="a2"/>
    </method>
    <method name="CONF_get_number" result="long">
      <arg name="conf" type="LHASH_OF(CONF_VALUE) *" m68kreg="a0"/>
      <arg name="group" type="const char *" m68kreg="a1"/>
      <arg name="name" type="const char *" m68kreg="a2"/>
    </method>
    <method name="CONF_free" result="void">
      <arg name="conf" type="LHASH_OF(CONF_VALUE) *" m68kreg="a0"/>
    </method>
    <method name="CONF_dump_bio" result="int">
      <arg name="conf" type="LHASH_OF(CONF_VALUE) *" m68kreg="a0"/>
      <arg name="out" type="BIO *" m68kreg="a1"/>
    </method>
    <method name="OPENSSL_config" result="void">
      <arg name="config_name" type="const char *" m68kreg="a0"/>
    </method>
    <method name="OPENSSL_no_config" result="void" status="unimplemented">
    </method>
    <method name="NCONF_new" result="CONF *">
      <arg name="meth" type="CONF_METHOD *" m68kreg="a0"/>
    </method>
    <method name="NCONF_default" result="CONF_METHOD *">
    </method>
    <method name="NCONF_WIN32" result="CONF_METHOD *">
    </method>
    <method name="NCONF_free" result="void">
      <arg name="conf" type="CONF *" m68kreg="a0"/>
    </method>
    <method name="NCONF_free_data" result="void">
      <arg name="conf" type="CONF *" m68kreg="a0"/>
    </method>
    <method name="NCONF_load" result="int">
      <arg name="conf" type="CONF *" m68kreg="a0"/>
      <arg name="file" type="const char *" m68kreg="a1"/>
      <arg name="eline" type="long *" m68kreg="a2"/>
    </method>
    <method name="NCONF_load_bio" result="int">
      <arg name="conf" type="CONF *" m68kreg="a0"/>
      <arg name="bp" type="BIO *" m68kreg="a1"/>
      <arg name="eline" type="long *" m68kreg="a2"/>
    </method>
    <method name="NCONF_get_section" result="STACK_OF(CONF_VALUE) *">
      <arg name="conf" type="const CONF *" m68kreg="a0"/>
      <arg name="section" type="const char *" m68kreg="a1"/>
    </method>
    <method name="NCONF_get_string" result="char *">
      <arg name="conf" type="const CONF *" m68kreg="a0"/>
      <arg name="group" type="const char *" m68kreg="a1"/>
      <arg name="name" type="const char *" m68kreg="a2"/>
    </method>
    <method name="NCONF_get_number_e" result="int">
      <arg name="conf" type="const CONF *" m68kreg="a0"/>
      <arg name="group" type="const char *" m68kreg="a1"/>
      <arg name="name" type="const char *" m68kreg="a2"/>
      <arg name="result" type="long *" m68kreg="a3"/>
    </method>
    <method name="NCONF_dump_bio" result="int">
      <arg name="conf" type="const CONF *" m68kreg="a0"/>
      <arg name="out" type="BIO *" m68kreg="a1"/>
    </method>
    <method name="CONF_modules_load" result="int">
      <arg name="cnf" type="const CONF *" m68kreg="a0"/>
      <arg name="appname" type="const char *" m68kreg="a1"/>
      <arg name="flags" type="unsigned long" m68kreg="d0"/>
    </method>
    <method name="CONF_modules_load_file" result="int">
      <arg name="filename" type="const char *" m68kreg="a0"/>
      <arg name="appname" type="const char *" m68kreg="a1"/>
      <arg name="flags" type="unsigned long" m68kreg="d0"/>
    </method>
    <method name="CONF_modules_unload" result="void">
      <arg name="all" type="int" m68kreg="d0"/>
    </method>
    <method name="CONF_modules_finish" result="void">
    </method>
    <method name="CONF_modules_free" result="void" status="unimplemented">
    </method>
    <method name="CONF_module_add" result="int">
      <arg name="name" type="const char *" m68kreg="a0"/>
      <arg name="ifunc" type="conf_init_func *" m68kreg="a1"/>
      <arg name="ffunc" type="conf_finish_func *" m68kreg="a2"/>
    </method>
    <method name="CONF_imodule_get_name" result="const char *">
      <arg name="md" type="const CONF_IMODULE *" m68kreg="a0"/>
    </method>
    <method name="CONF_imodule_get_value" result="const char *">
      <arg name="md" type="const CONF_IMODULE *" m68kreg="a0"/>
    </method>
    <method name="CONF_imodule_get_usr_data" result="void *">
      <arg name="md" type="const CONF_IMODULE *" m68kreg="a0"/>
    </method>
    <method name="CONF_imodule_set_usr_data" result="void">
      <arg name="md" type="CONF_IMODULE *" m68kreg="a0"/>
      <arg name="usr_data" type="void *" m68kreg="a1"/>
    </method>
    <method name="CONF_imodule_get_module" result="CONF_MODULE *">
      <arg name="md" type="const CONF_IMODULE *" m68kreg="a0"/>
    </method>
    <method name="CONF_imodule_get_flags" result="unsigned long">
      <arg name="md" type="const CONF_IMODULE *" m68kreg="a0"/>
    </method>
    <method name="CONF_imodule_set_flags" result="void">
      <arg name="md" type="CONF_IMODULE *" m68kreg="a0"/>
      <arg name="flags" type="unsigned long" m68kreg="d0"/>
    </method>
    <method name="CONF_module_get_usr_data" result="void *">
      <arg name="pmod" type="CONF_MODULE *" m68kreg="a0"/>
    </method>
    <method name="CONF_module_set_usr_data" result="void">
      <arg name="pmod" type="CONF_MODULE *" m68kreg="a0"/>
      <arg name="usr_data" type="void *" m68kreg="a1"/>
    </method>
    <method name="CONF_get1_default_config_file" result="char *">
    </method>
    <method name="CONF_parse_list" result="int">
      <arg name="list" type="const char *" m68kreg="a0"/>
      <arg name="sep" type="int" m68kreg="d0"/>
      <arg name="nospc" type="int" m68kreg="d1"/>
      <arg name="list_cb" type="int (*)(const char *elem, int len, void *usr)" m68kreg="a1"/>
      <arg name="arg" type="void *" m68kreg="a2"/>
    </method>
    <method name="OPENSSL_load_builtin_modules" result="void">
    </method>
    <method name="ERR_load_CONF_strings" result="int">
    </method>
    <method name="_CONF_new_section" result="CONF_VALUE *" status="unimplemented">
      <arg name="conf" type="CONF *" m68kreg="a0"/>
      <arg name="section" type="const char *" m68kreg="a1"/>
    </method>
    <method name="_CONF_get_section" result="CONF_VALUE *" status="unimplemented">
      <arg name="conf" type="const CONF *" m68kreg="a0"/>
      <arg name="section" type="const char *" m68kreg="a1"/>
    </method>
    <method name="_CONF_get_section_values" result="STACK_OF(CONF_VALUE) *" status="unimplemented">
      <arg name="conf" type="const CONF *" m68kreg="a0"/>
      <arg name="section" type="const char *" m68kreg="a1"/>
    </method>
    <method name="_CONF_add_string" result="int" status="unimplemented">
      <arg name="conf" type="CONF *" m68kreg="a0"/>
      <arg name="section" type="CONF_VALUE *" m68kreg="a1"/>
      <arg name="value" type="CONF_VALUE *" m68kreg="a2"/>
    </method>
    <method name="_CONF_get_string" result="char *" status="unimplemented">
      <arg name="conf" type="const CONF *" m68kreg="a0"/>
      <arg name="section" type="const char *" m68kreg="a1"/>
      <arg name="name" type="const char *" m68kreg="a2"/>
    </method>
    <method name="_CONF_new_data" result="int" status="unimplemented">
      <arg name="conf" type="CONF *" m68kreg="a0"/>
    </method>
    <method name="_CONF_free_data" result="void" status="unimplemented">
      <arg name="conf" type="CONF *" m68kreg="a0"/>
    </method>
    <method name="CRYPTO_mem_ctrl" result="int">
      <arg name="mode" type="int" m68kreg="d0"/>
    </method>
    <method name="CRYPTO_is_mem_check_on" result="int" status="unimplemented">
    </method>
    <method name="SSLeay_version" result="const char *" status="unimplemented">
      <arg name="type" type="int" m68kreg="d0"/>
    </method>
    <method name="SSLeay" result="unsigned long" status="unimplemented">
    </method>
    <method name="OPENSSL_issetugid" result="int">
    </method>
    <method name="CRYPTO_get_ex_data_implementation" result="const CRYPTO_EX_DATA_IMPL *" status="unimplemented">
    </method>
    <method name="CRYPTO_set_ex_data_implementation" result="int" status="unimplemented">
      <arg name="i" type="const CRYPTO_EX_DATA_IMPL *" m68kreg="a0"/>
    </method>
    <method name="CRYPTO_ex_data_new_class" result="int" status="unimplemented">
    </method>
    <method name="CRYPTO_get_ex_new_index" result="int">
      <arg name="class_index" type="int" m68kreg="d0"/>
      <arg name="argl" type="long" m68kreg="d1"/>
      <arg name="argp" type="void *" m68kreg="a0"/>
      <arg name="new_func" type="CRYPTO_EX_new *" m68kreg="a1"/>
      <arg name="dup_func" type="CRYPTO_EX_dup *" m68kreg="a2"/>
      <arg name="free_func" type="CRYPTO_EX_free *" m68kreg="a3"/>
    </method>
    <method name="CRYPTO_new_ex_data" result="int">
      <arg name="class_index" type="int" m68kreg="d0"/>
      <arg name="obj" type="void *" m68kreg="a0"/>
      <arg name="ad" type="CRYPTO_EX_DATA *" m68kreg="a1"/>
    </method>
    <method name="CRYPTO_dup_ex_data" result="int">
      <arg name="class_index" type="int" m68kreg="d0"/>
      <arg name="to" type="CRYPTO_EX_DATA *" m68kreg="a0"/>
      <arg name="from" type="const CRYPTO_EX_DATA *" m68kreg="a1"/>
    </method>
    <method name="CRYPTO_free_ex_data" result="void">
      <arg name="class_index" type="int" m68kreg="d0"/>
      <arg name="obj" type="void *" m68kreg="a0"/>
      <arg name="ad" type="CRYPTO_EX_DATA *" m68kreg="a1"/>
    </method>
    <method name="CRYPTO_set_ex_data" result="int">
      <arg name="ad" type="CRYPTO_EX_DATA *" m68kreg="a0"/>
      <arg name="idx" type="int" m68kreg="d0"/>
      <arg name="val" type="void *" m68kreg="a1"/>
    </method>
    <method name="CRYPTO_get_ex_data" result="void *">
      <arg name="ad" type="const CRYPTO_EX_DATA *" m68kreg="a0"/>
      <arg name="idx" type="int" m68kreg="d0"/>
    </method>
    <method name="CRYPTO_cleanup_all_ex_data" result="void" status="unimplemented">
    </method>
    <method name="CRYPTO_get_new_lockid" result="int" status="unimplemented">
      <arg name="name" type="char *" m68kreg="a0"/>
    </method>
    <method name="CRYPTO_num_locks" result="int" status="unimplemented">
    </method>
    <method name="CRYPTO_lock" result="void" status="unimplemented">
      <arg name="mode" type="int" m68kreg="d0"/>
      <arg name="type" type="int" m68kreg="d1"/>
      <arg name="file" type="const char *" m68kreg="a0"/>
      <arg name="line" type="int" m68kreg="d2"/>
    </method>
    <method name="CRYPTO_set_locking_callback" result="void" status="unimplemented">
      <arg name="func" type="void (*)(int mode, int type, const char *file, int line)" m68kreg="a0"/>
    </method>
    <method name="CRYPTO_get_locking_callback" result="void (*)(int mode, int type, const char *file, int line)" status="unimplemented">
    </method>
    <method name="CRYPTO_set_add_lock_callback" result="void" status="unimplemented">
      <arg name="func" type="int (*)(int *num, int mount, int type, const char *file, int line)" m68kreg="a0"/>
    </method>
    <method name="CRYPTO_get_add_lock_callback" result="int (*)(int *num, int mount, int type, const char *file, int line)" status="unimplemented">
    </method>
    <method name="CRYPTO_set_id_callback" result="void" status="unimplemented">
      <arg name="func" type="unsigned long (*)(void)" m68kreg="a0"/>
    </method>
    <method name="CRYPTO_get_id_callback" result="unsigned long (*)(void)" status="unimplemented">
    </method>
    <method name="CRYPTO_thread_id" result="unsigned long" status="unimplemented">
    </method>
    <method name="CRYPTO_get_lock_name" result="const char *" status="unimplemented">
      <arg name="type" type="int" m68kreg="d0"/>
    </method>
    <method name="CRYPTO_add_lock" result="int" status="unimplemented">
      <arg name="pointer" type="int *" m68kreg="a0"/>
      <arg name="amount" type="int" m68kreg="d0"/>
      <arg name="type" type="int" m68kreg="d1"/>
      <arg name="file" type="const char *" m68kreg="a1"/>
      <arg name="line" type="int" m68kreg="d2"/>
    </method>
    <method name="CRYPTO_get_new_dynlockid" result="int" status="unimplemented">
    </method>
    <method name="CRYPTO_destroy_dynlockid" result="void" status="unimplemented">
      <arg name="i" type="int" m68kreg="d0"/>
    </method>
    <method name="CRYPTO_get_dynlock_value" result="struct CRYPTO_dynlock_value *" status="unimplemented">
      <arg name="i" type="int" m68kreg="d0"/>
    </method>
    <method name="CRYPTO_set_dynlock_create_callback" result="void" status="unimplemented">
      <arg name="dyn_create_function" type="struct CRYPTO_dynlock_value * (*)(const char *file, int line)" m68kreg="a0"/>
    </method>
    <method name="CRYPTO_set_dynlock_lock_callback" result="void" status="unimplemented">
      <arg name="dyn_lock_function" type="void (*)(int mode, struct CRYPTO_dynlock_value *l, const char *file, int line)" m68kreg="a0"/>
    </method>
    <method name="CRYPTO_set_dynlock_destroy_callback" result="void" status="unimplemented">
      <arg name="dyn_destroy_function" type="void (*)(struct CRYPTO_dynlock_value *l, const char *file, int line)" m68kreg="a0"/>
    </method>
    <method name="CRYPTO_get_dynlock_create_callback" result="struct CRYPTO_dynlock_value * (*)(const char *file, int line)" status="unimplemented">
    </method>
    <method name="CRYPTO_get_dynlock_lock_callback" result="void (*)(int mode, struct CRYPTO_dynlock_value *l, const char *file, int line)" status="unimplemented">
    </method>
    <method name="CRYPTO_get_dynlock_destroy_callback" result="void (*)(struct CRYPTO_dynlock_value *l, const char *file, int line)" status="unimplemented">
    </method>
    <method name="CRYPTO_set_mem_functions" result="int">
      <arg name="m" type="void * (*)(size_t, const char *, int)" m68kreg="a0"/>
      <arg name="r" type="void * (*)(void *, size_t, const char *, int)" m68kreg="a1"/>
      <arg name="f" type="void (*)(void *, const char *, int)" m68kreg="a2"/>
    </method>
    <method name="CRYPTO_set_locked_mem_functions" result="int" status="unimplemented">
      <arg name="m" type="void * (*)(size_t)" m68kreg="a0"/>
      <arg name="free_func" type="void (*)(void *)" m68kreg="a1"/>
    </method>
    <method name="CRYPTO_set_mem_ex_functions" result="int" status="unimplemented">
      <arg name="m" type="void * (*)(size_t, const char *, int)" m68kreg="a0"/>
      <arg name="r" type="void * (*)(void *, size_t, const char *, int)" m68kreg="a1"/>
      <arg name="f" type="void (*)(void *)" m68kreg="a2"/>
    </method>
    <method name="CRYPTO_set_locked_mem_ex_functions" result="int" status="unimplemented">
      <arg name="m" type="void * (*)(size_t, const char *, int)" m68kreg="a0"/>
      <arg name="free_func" type="void (*)(void *)" m68kreg="a1"/>
    </method>
    <method name="CRYPTO_set_mem_debug_functions" result="int" status="unimplemented">
      <arg name="m" type="void (*)(void *, int, const char *, int, int)" m68kreg="a0"/>
      <arg name="r" type="void (*)(void *, void *, int, const char *, int, int)" m68kreg="a1"/>
      <arg name="f" type="void (*)(void *, int)" m68kreg="a2"/>
      <arg name="so" type="void (*)(long)" m68kreg="a3"/>
      <arg name="go" type="long (*)(void)" m68kreg="d0"/>
    </method>
    <method name="CRYPTO_get_mem_functions" result="void">
      <arg name="m" type="void * (**)(size_t, const char *, int)" m68kreg="a0"/>
      <arg name="r" type="void * (**)(void *, size_t, const char *, int)" m68kreg="a1"/>
      <arg name="f" type="void (**)(void *, const char *, int)" m68kreg="a2"/>
    </method>
    <method name="CRYPTO_get_locked_mem_functions" result="void" status="unimplemented">
      <arg name="m" type="void * (**)(size_t)" m68kreg="a0"/>
      <arg name="f" type="void (**)(void *)" m68kreg="a1"/>
    </method>
    <method name="CRYPTO_get_mem_ex_functions" result="void" status="unimplemented">
      <arg name="m" type="void * (**)(size_t, const char *, int)" m68kreg="a0"/>
      <arg name="r" type="void * (**)(void *, size_t, const char *, int)" m68kreg="a1"/>
      <arg name="f" type="void (**)(void *)" m68kreg="a2"/>
    </method>
    <method name="CRYPTO_get_locked_mem_ex_functions" result="void" status="unimplemented">
      <arg name="m" type="void * (**)(size_t, const char *, int)" m68kreg="a0"/>
      <arg name="f" type="void (**)(void *)" m68kreg="a1"/>
    </method>
    <method name="CRYPTO_get_mem_debug_functions" result="void" status="unimplemented">
      <arg name="m" type="void (**)(void *, int, const char *, int, int)" m68kreg="a0"/>
      <arg name="r" type="void (**)(void *, void *, int, const char *, int, int)" m68kreg="a1"/>
      <arg name="f" type="void (**)(void *, int)" m68kreg="a2"/>
      <arg name="so" type="void (**)(long)" m68kreg="a3"/>
      <arg name="go" type="long (**)(void)" m68kreg="d0"/>
    </method>
    <method name="CRYPTO_malloc_locked" result="void *" status="unimplemented">
      <arg name="num" type="int" m68kreg="d0"/>
      <arg name="file" type="const char *" m68kreg="a0"/>
      <arg name="line" type="int" m68kreg="d1"/>
    </method>
    <method name="CRYPTO_free_locked" result="void" status="unimplemented">
      <arg name="a" type="void *" m68kreg="a0"/>
    </method>
    <method name="CRYPTO_malloc" result="void *">
      <arg name="num" type="size_t" m68kreg="d0"/>
      <arg name="file" type="const char *" m68kreg="a0"/>
      <arg name="line" type="int" m68kreg="d1"/>
    </method>
    <method name="CRYPTO_free" result="void">
      <arg name="str" type="void *" m68kreg="a0"/>
      <arg name="file" type="const char *" m68kreg="a1"/>
      <arg name="line" type="int" m68kreg="d0"/>
    </method>
    <method name="CRYPTO_realloc" result="void *">
      <arg name="addr" type="void *" m68kreg="a0"/>
      <arg name="num" type="size_t" m68kreg="d0"/>
      <arg name="file" type="const char *" m68kreg="a1"/>
      <arg name="line" type="int" m68kreg="d1"/>
    </method>
    <method name="CRYPTO_realloc_clean" result="void *" status="unimplemented">
      <arg name="addr" type="void *" m68kreg="a0"/>
      <arg name="old_num" type="int" m68kreg="d0"/>
      <arg name="num" type="int" m68kreg="d1"/>
      <arg name="file" type="const char *" m68kreg="a1"/>
      <arg name="line" type="int" m68kreg="d2"/>
    </method>
    <method name="CRYPTO_remalloc" result="void *" status="unimplemented">
      <arg name="addr" type="void *" m68kreg="a0"/>
      <arg name="num" type="int" m68kreg="d0"/>
      <arg name="file" type="const char *" m68kreg="a1"/>
      <arg name="line" type="int" m68kreg="d1"/>
    </method>
    <method name="OPENSSL_cleanse" result="void">
      <arg name="ptr" type="void *" m68kreg="a0"/>
      <arg name="len" type="size_t" m68kreg="d0"/>
    </method>
    <method name="CRYPTO_set_mem_debug_options" result="void" status="unimplemented">
      <arg name="bits" type="long" m68kreg="d0"/>
    </method>
    <method name="CRYPTO_get_mem_debug_options" result="long" status="unimplemented">
    </method>
    <method name="CRYPTO_push_info_" result="int" status="unimplemented">
      <arg name="info" type="const char *" m68kreg="a0"/>
      <arg name="file" type="const char *" m68kreg="a1"/>
      <arg name="line" type="int" m68kreg="d0"/>
    </method>
    <method name="CRYPTO_pop_info" result="int" status="unimplemented">
    </method>
    <method name="CRYPTO_remove_all_info" result="int" status="unimplemented">
    </method>
    <method name="CRYPTO_dbg_malloc" result="void" status="unimplemented">
      <arg name="addr" type="void *" m68kreg="a0"/>
      <arg name="num" type="int" m68kreg="d0"/>
      <arg name="file" type="const char *" m68kreg="a1"/>
      <arg name="line" type="int" m68kreg="d1"/>
      <arg name="before_p" type="int" m68kreg="d2"/>
    </method>
    <method name="CRYPTO_dbg_realloc" result="void" status="unimplemented">
      <arg name="addr1" type="void *" m68kreg="a0"/>
      <arg name="addr2" type="void *" m68kreg="a1"/>
      <arg name="num" type="int" m68kreg="d0"/>
      <arg name="file" type="const char *" m68kreg="a2"/>
      <arg name="line" type="int" m68kreg="d1"/>
      <arg name="before_p" type="int" m68kreg="d2"/>
    </method>
    <method name="CRYPTO_dbg_free" result="void" status="unimplemented">
      <arg name="addr" type="void *" m68kreg="a0"/>
      <arg name="before_p" type="int" m68kreg="d0"/>
    </method>
    <method name="CRYPTO_dbg_set_options" result="void" status="unimplemented">
      <arg name="bits" type="long" m68kreg="d0"/>
    </method>
    <method name="CRYPTO_dbg_get_options" result="long" status="unimplemented">
    </method>
    <method name="CRYPTO_mem_leaks" result="int" status="unimplemented">
      <arg name="bio" type="BIO *" m68kreg="a0"/>
    </method>
    <method name="CRYPTO_mem_leaks_cb" result="void" status="unimplemented">
      <arg name="cb" type="CRYPTO_MEM_LEAK_CB *" m68kreg="a0"/>
    </method>
    <method name="OpenSSLDie" result="void" status="unimplemented">
      <arg name="file" type="const char *" m68kreg="a0"/>
      <arg name="line" type="int" m68kreg="d0"/>
      <arg name="assertion" type="const char *" m68kreg="a1"/>
    </method>
    <method name="ERR_load_CRYPTO_strings" result="int">
    </method>
    <method name="DSO_new" result="DSO *" status="unimplemented">
    </method>
    <method name="DSO_new_method" result="DSO *" status="unimplemented">
      <arg name="method" type="DSO_METHOD *" m68kreg="a0"/>
    </method>
    <method name="DSO_free" result="int" status="unimplemented">
      <arg name="dso" type="DSO *" m68kreg="a0"/>
    </method>
    <method name="DSO_flags" result="int" status="unimplemented">
      <arg name="dso" type="DSO *" m68kreg="a0"/>
    </method>
    <method name="DSO_up_ref" result="int" status="unimplemented">
      <arg name="dso" type="DSO *" m68kreg="a0"/>
    </method>
    <method name="DSO_ctrl" result="long" status="unimplemented">
      <arg name="dso" type="DSO *" m68kreg="a0"/>
      <arg name="cmd" type="int" m68kreg="d0"/>
      <arg name="larg" type="long" m68kreg="d1"/>
      <arg name="parg" type="void *" m68kreg="a1"/>
    </method>
    <method name="DSO_set_name_converter" result="int" status="unimplemented">
      <arg name="dso" type="DSO *" m68kreg="a0"/>
      <arg name="cb" type="DSO_NAME_CONVERTER_FUNC" m68kreg="d0"/>
      <arg name="oldcb" type="DSO_NAME_CONVERTER_FUNC *" m68kreg="a1"/>
    </method>
    <method name="DSO_get_filename" result="const char *" status="unimplemented">
      <arg name="dso" type="DSO *" m68kreg="a0"/>
    </method>
    <method name="DSO_set_filename" result="int" status="unimplemented">
      <arg name="dso" type="DSO *" m68kreg="a0"/>
      <arg name="filename" type="const char *" m68kreg="a1"/>
    </method>
    <method name="DSO_convert_filename" result="char *" status="unimplemented">
      <arg name="dso" type="DSO *" m68kreg="a0"/>
      <arg name="filename" type="const char *" m68kreg="a1"/>
    </method>
    <method name="DSO_get_loaded_filename" result="const char *" status="unimplemented">
      <arg name="dso" type="DSO *" m68kreg="a0"/>
    </method>
    <method name="DSO_set_default_method" result="void" status="unimplemented">
      <arg name="meth" type="DSO_METHOD *" m68kreg="a0"/>
    </method>
    <method name="DSO_get_default_method" result="DSO_METHOD *" status="unimplemented">
    </method>
    <method name="DSO_get_method" result="DSO_METHOD *" status="unimplemented">
      <arg name="dso" type="DSO *" m68kreg="a0"/>
    </method>
    <method name="DSO_set_method" result="DSO_METHOD *" status="unimplemented">
      <arg name="dso" type="DSO *" m68kreg="a0"/>
      <arg name="meth" type="DSO_METHOD *" m68kreg="a1"/>
    </method>
    <method name="DSO_load" result="DSO *" status="unimplemented">
      <arg name="dso" type="DSO *" m68kreg="a0"/>
      <arg name="filename" type="const char *" m68kreg="a1"/>
      <arg name="meth" type="DSO_METHOD *" m68kreg="a2"/>
      <arg name="flags" type="int" m68kreg="d0"/>
    </method>
    <method name="DSO_bind_var" result="void *" status="unimplemented">
      <arg name="dso" type="DSO *" m68kreg="a0"/>
      <arg name="symname" type="const char *" m68kreg="a1"/>
    </method>
    <method name="DSO_bind_func" result="DSO_FUNC_TYPE" status="unimplemented">
      <arg name="dso" type="DSO *" m68kreg="a0"/>
      <arg name="symname" type="const char *" m68kreg="a1"/>
    </method>
    <method name="DSO_METHOD_openssl" result="DSO_METHOD *" status="unimplemented">
    </method>
    <method name="DSO_METHOD_null" result="DSO_METHOD *" status="unimplemented">
    </method>
    <method name="DSO_METHOD_dlfcn" result="DSO_METHOD *" status="unimplemented">
    </method>
    <method name="DSO_METHOD_dl" result="DSO_METHOD *" status="unimplemented">
    </method>
    <method name="DSO_METHOD_win32" result="DSO_METHOD *" status="unimplemented">
    </method>
    <method name="DSO_METHOD_vms" result="DSO_METHOD *" status="unimplemented">
    </method>
    <method name="ERR_load_DSO_strings" result="void">
    </method>
    <method name="EC_GFp_simple_method" result="const EC_METHOD *">
    </method>
    <method name="EC_GFp_mont_method" result="const EC_METHOD *">
    </method>
    <method name="EC_GROUP_new" result="EC_GROUP *">
      <arg name="a" type="const EC_METHOD *" m68kreg="a0"/>
    </method>
    <method name="EC_GROUP_free" result="void">
      <arg name="a" type="EC_GROUP *" m68kreg="a0"/>
    </method>
    <method name="EC_GROUP_clear_free" result="void">
      <arg name="a" type="EC_GROUP *" m68kreg="a0"/>
    </method>
    <method name="EC_GROUP_copy" result="int">
      <arg name="a" type="EC_GROUP *" m68kreg="a0"/>
      <arg name="b" type="const EC_GROUP *" m68kreg="a1"/>
    </method>
    <method name="EC_GROUP_method_of" result="const EC_METHOD *">
      <arg name="a" type="const EC_GROUP *" m68kreg="a0"/>
    </method>
    <method name="EC_GROUP_set_curve_GFp" result="int">
      <arg name="a1" type="EC_GROUP *" m68kreg="a0"/>
      <arg name="p" type="const BIGNUM *" m68kreg="a1"/>
      <arg name="a" type="const BIGNUM *" m68kreg="a2"/>
      <arg name="b" type="const BIGNUM *" m68kreg="a3"/>
      <arg name="a2" type="BN_CTX *" m68kreg="d0"/>
    </method>
    <method name="EC_GROUP_get_curve_GFp" result="int">
      <arg name="a1" type="const EC_GROUP *" m68kreg="a0"/>
      <arg name="p" type="BIGNUM *" m68kreg="a1"/>
      <arg name="a" type="BIGNUM *" m68kreg="a2"/>
      <arg name="b" type="BIGNUM *" m68kreg="a3"/>
      <arg name="a2" type="BN_CTX *" m68kreg="d0"/>
    </method>
    <method name="EC_GROUP_new_curve_GFp" result="EC_GROUP *">
      <arg name="p" type="const BIGNUM *" m68kreg="a0"/>
      <arg name="a" type="const BIGNUM *" m68kreg="a1"/>
      <arg name="b" type="const BIGNUM *" m68kreg="a2"/>
      <arg name="a1" type="BN_CTX *" m68kreg="a3"/>
    </method>
    <method name="EC_GROUP_set_generator" result="int">
      <arg name="a1" type="EC_GROUP *" m68kreg="a0"/>
      <arg name="generator" type="const EC_POINT *" m68kreg="a1"/>
      <arg name="order" type="const BIGNUM *" m68kreg="a2"/>
      <arg name="cofactor" type="const BIGNUM *" m68kreg="a3"/>
    </method>
    <method name="EC_GROUP_get0_generator" result="const EC_POINT *">
      <arg name="a1" type="const EC_GROUP *" m68kreg="a0"/>
    </method>
    <method name="EC_GROUP_get_order" result="int">
      <arg name="a1" type="const EC_GROUP *" m68kreg="a0"/>
      <arg name="order" type="BIGNUM *" m68kreg="a1"/>
      <arg name="a2" type="BN_CTX *" m68kreg="a2"/>
    </method>
    <method name="EC_GROUP_get_cofactor" result="int">
      <arg name="a1" type="const EC_GROUP *" m68kreg="a0"/>
      <arg name="cofactor" type="BIGNUM *" m68kreg="a1"/>
      <arg name="a2" type="BN_CTX *" m68kreg="a2"/>
    </method>
    <method name="EC_POINT_new" result="EC_POINT *">
      <arg name="a" type="const EC_GROUP *" m68kreg="a0"/>
    </method>
    <method name="EC_POINT_free" result="void">
      <arg name="a" type="EC_POINT *" m68kreg="a0"/>
    </method>
    <method name="EC_POINT_clear_free" result="void">
      <arg name="a" type="EC_POINT *" m68kreg="a0"/>
    </method>
    <method name="EC_POINT_copy" result="int">
      <arg name="a" type="EC_POINT *" m68kreg="a0"/>
      <arg name="b" type="const EC_POINT *" m68kreg="a1"/>
    </method>
    <method name="EC_POINT_method_of" result="const EC_METHOD *">
      <arg name="a" type="const EC_POINT *" m68kreg="a0"/>
    </method>
    <method name="EC_POINT_set_to_infinity" result="int">
      <arg name="a" type="const EC_GROUP *" m68kreg="a0"/>
      <arg name="b" type="EC_POINT *" m68kreg="a1"/>
    </method>
    <method name="EC_POINT_set_Jprojective_coordinates_GFp" result="int">
      <arg name="a1" type="const EC_GROUP *" m68kreg="a0"/>
      <arg name="a2" type="EC_POINT *" m68kreg="a1"/>
      <arg name="x" type="const BIGNUM *" m68kreg="a2"/>
      <arg name="y" type="const BIGNUM *" m68kreg="a3"/>
      <arg name="z" type="const BIGNUM *" m68kreg="d0"/>
      <arg name="a3" type="BN_CTX *" m68kreg="d1"/>
    </method>
    <method name="EC_POINT_get_Jprojective_coordinates_GFp" result="int">
      <arg name="a1" type="const EC_GROUP *" m68kreg="a0"/>
      <arg name="a2" type="const EC_POINT *" m68kreg="a1"/>
      <arg name="x" type="BIGNUM *" m68kreg="a2"/>
      <arg name="y" type="BIGNUM *" m68kreg="a3"/>
      <arg name="z" type="BIGNUM *" m68kreg="d0"/>
      <arg name="a3" type="BN_CTX *" m68kreg="d1"/>
    </method>
    <method name="EC_POINT_set_affine_coordinates_GFp" result="int">
      <arg name="a1" type="const EC_GROUP *" m68kreg="a0"/>
      <arg name="a2" type="EC_POINT *" m68kreg="a1"/>
      <arg name="x" type="const BIGNUM *" m68kreg="a2"/>
      <arg name="y" type="const BIGNUM *" m68kreg="a3"/>
      <arg name="a3" type="BN_CTX *" m68kreg="d0"/>
    </method>
    <method name="EC_POINT_get_affine_coordinates_GFp" result="int">
      <arg name="a1" type="const EC_GROUP *" m68kreg="a0"/>
      <arg name="a2" type="const EC_POINT *" m68kreg="a1"/>
      <arg name="x" type="BIGNUM *" m68kreg="a2"/>
      <arg name="y" type="BIGNUM *" m68kreg="a3"/>
      <arg name="a3" type="BN_CTX *" m68kreg="d0"/>
    </method>
    <method name="EC_POINT_set_compressed_coordinates_GFp" result="int">
      <arg name="a1" type="const EC_GROUP *" m68kreg="a0"/>
      <arg name="a2" type="EC_POINT *" m68kreg="a1"/>
      <arg name="x" type="const BIGNUM *" m68kreg="a2"/>
      <arg name="y_bit" type="int" m68kreg="d0"/>
      <arg name="a3" type="BN_CTX *" m68kreg="a3"/>
    </method>
    <method name="EC_POINT_point2oct" result="size_t">
      <arg name="a1" type="const EC_GROUP *" m68kreg="a0"/>
      <arg name="a2" type="const EC_POINT *" m68kreg="a1"/>
      <arg name="form" type="point_conversion_form_t" m68kreg="d0"/>
      <arg name="buf" type="unsigned char *" m68kreg="a2"/>
      <arg name="len" type="size_t" m68kreg="d1"/>
      <arg name="a3" type="BN_CTX *" m68kreg="a3"/>
    </method>
    <method name="EC_POINT_oct2point" result="int">
      <arg name="a1" type="const EC_GROUP *" m68kreg="a0"/>
      <arg name="a2" type="EC_POINT *" m68kreg="a1"/>
      <arg name="buf" type="const unsigned char *" m68kreg="a2"/>
      <arg name="len" type="size_t" m68kreg="d0"/>
      <arg name="a3" type="BN_CTX *" m68kreg="a3"/>
    </method>
    <method name="EC_POINT_add" result="int">
      <arg name="a1" type="const EC_GROUP *" m68kreg="a0"/>
      <arg name="r" type="EC_POINT *" m68kreg="a1"/>
      <arg name="a" type="const EC_POINT *" m68kreg="a2"/>
      <arg name="b" type="const EC_POINT *" m68kreg="a3"/>
      <arg name="a2" type="BN_CTX *" m68kreg="d0"/>
    </method>
    <method name="EC_POINT_dbl" result="int">
      <arg name="a1" type="const EC_GROUP *" m68kreg="a0"/>
      <arg name="r" type="EC_POINT *" m68kreg="a1"/>
      <arg name="a" type="const EC_POINT *" m68kreg="a2"/>
      <arg name="a2" type="BN_CTX *" m68kreg="a3"/>
    </method>
    <method name="EC_POINT_invert" result="int">
      <arg name="a1" type="const EC_GROUP *" m68kreg="a0"/>
      <arg name="a2" type="EC_POINT *" m68kreg="a1"/>
      <arg name="a3" type="BN_CTX *" m68kreg="a2"/>
    </method>
    <method name="EC_POINT_is_at_infinity" result="int">
      <arg name="a" type="const EC_GROUP *" m68kreg="a0"/>
      <arg name="b" type="const EC_POINT *" m68kreg="a1"/>
    </method>
    <method name="EC_POINT_is_on_curve" result="int">
      <arg name="a" type="const EC_GROUP *" m68kreg="a0"/>
      <arg name="b" type="const EC_POINT *" m68kreg="a1"/>
      <arg name="c" type="BN_CTX *" m68kreg="a2"/>
    </method>
    <method name="EC_POINT_cmp" result="int">
      <arg name="a1" type="const EC_GROUP *" m68kreg="a0"/>
      <arg name="a" type="const EC_POINT *" m68kreg="a1"/>
      <arg name="b" type="const EC_POINT *" m68kreg="a2"/>
      <arg name="a2" type="BN_CTX *" m68kreg="a3"/>
    </method>
    <method name="EC_POINT_make_affine" result="int">
      <arg name="a" type="const EC_GROUP *" m68kreg="a0"/>
      <arg name="b" type="EC_POINT *" m68kreg="a1"/>
      <arg name="c" type="BN_CTX *" m68kreg="a2"/>
    </method>
    <method name="EC_POINTs_make_affine" result="int">
      <arg name="a1" type="const EC_GROUP *" m68kreg="a0"/>
      <arg name="num" type="size_t" m68kreg="d0"/>
      <arg name="a2" type="EC_POINT **" m68kreg="a1"/>
      <arg name="a3" type="BN_CTX *" m68kreg="a2"/>
    </method>
    <method name="EC_POINTs_mul" result="int">
      <arg name="a1" type="const EC_GROUP *" m68kreg="a0"/>
      <arg name="r" type="EC_POINT *" m68kreg="a1"/>
      <arg name="a2" type="const BIGNUM *" m68kreg="a2"/>
      <arg name="num" type="size_t" m68kreg="d0"/>
      <arg name="a3" type="const EC_POINT **" m68kreg="a3"/>
      <arg name="a4" type="const BIGNUM **" m68kreg="d1"/>
      <arg name="a5" type="BN_CTX *" m68kreg="d2"/>
    </method>
    <method name="EC_POINT_mul" result="int">
      <arg name="a1" type="const EC_GROUP *" m68kreg="a0"/>
      <arg name="r" type="EC_POINT *" m68kreg="a1"/>
      <arg name="a2" type="const BIGNUM *" m68kreg="a2"/>
      <arg name="a3" type="const EC_POINT *" m68kreg="a3"/>
      <arg name="a4" type="const BIGNUM *" m68kreg="d0"/>
      <arg name="a5" type="BN_CTX *" m68kreg="d1"/>
    </method>
    <method name="EC_GROUP_precompute_mult" result="int">
      <arg name="a" type="EC_GROUP *" m68kreg="a0"/>
      <arg name="b" type="BN_CTX *" m68kreg="a1"/>
    </method>
    <method name="ERR_load_EC_strings" result="int">
    </method>
    <method name="ERR_put_error" result="void">
      <arg name="lib" type="int" m68kreg="d0"/>
      <arg name="func" type="int" m68kreg="d1"/>
      <arg name="reason" type="int" m68kreg="d2"/>
      <arg name="file" type="const char *" m68kreg="a0"/>
      <arg name="line" type="int" m68kreg="d3"/>
    </method>
    <method name="ERR_set_error_data" result="void">
      <arg name="data" type="char *" m68kreg="a0"/>
      <arg name="flags" type="int" m68kreg="d0"/>
    </method>
    <method name="ERR_get_error" result="unsigned long">
    </method>
    <method name="ERR_get_error_line" result="unsigned long">
      <arg name="file" type="const char **" m68kreg="a0"/>
      <arg name="line" type="int *" m68kreg="a1"/>
    </method>
    <method name="ERR_get_error_line_data" result="unsigned long">
      <arg name="file" type="const char **" m68kreg="a0"/>
      <arg name="line" type="int *" m68kreg="a1"/>
      <arg name="data" type="const char **" m68kreg="a2"/>
      <arg name="flags" type="int *" m68kreg="a3"/>
    </method>
    <method name="ERR_peek_error" result="unsigned long">
    </method>
    <method name="ERR_peek_error_line" result="unsigned long">
      <arg name="file" type="const char **" m68kreg="a0"/>
      <arg name="line" type="int *" m68kreg="a1"/>
    </method>
    <method name="ERR_peek_error_line_data" result="unsigned long">
      <arg name="file" type="const char **" m68kreg="a0"/>
      <arg name="line" type="int *" m68kreg="a1"/>
      <arg name="data" type="const char **" m68kreg="a2"/>
      <arg name="flags" type="int *" m68kreg="a3"/>
    </method>
    <method name="ERR_peek_last_error" result="unsigned long">
    </method>
    <method name="ERR_peek_last_error_line" result="unsigned long">
      <arg name="file" type="const char **" m68kreg="a0"/>
      <arg name="line" type="int *" m68kreg="a1"/>
    </method>
    <method name="ERR_peek_last_error_line_data" result="unsigned long">
      <arg name="file" type="const char **" m68kreg="a0"/>
      <arg name="line" type="int *" m68kreg="a1"/>
      <arg name="data" type="const char **" m68kreg="a2"/>
      <arg name="flags" type="int *" m68kreg="a3"/>
    </method>
    <method name="ERR_clear_error" result="void">
    </method>
    <method name="ERR_error_string" result="char *">
      <arg name="e" type="unsigned long" m68kreg="d0"/>
      <arg name="buf" type="char *" m68kreg="a0"/>
    </method>
    <method name="ERR_error_string_n" result="void">
      <arg name="e" type="unsigned long" m68kreg="d0"/>
      <arg name="buf" type="char *" m68kreg="a0"/>
      <arg name="len" type="size_t" m68kreg="d1"/>
    </method>
    <method name="ERR_lib_error_string" result="const char *">
      <arg name="e" type="unsigned long" m68kreg="d0"/>
    </method>
    <method name="ERR_func_error_string" result="const char *">
      <arg name="e" type="unsigned long" m68kreg="d0"/>
    </method>
    <method name="ERR_reason_error_string" result="const char *">
      <arg name="e" type="unsigned long" m68kreg="d0"/>
    </method>
    <method name="ERR_print_errors_cb" result="void">
      <arg name="cb" type="int (*)(const char *str, size_t len, void *u)" m68kreg="a0"/>
      <arg name="u" type="void *" m68kreg="a1"/>
    </method>
    <method name="ERR_print_errors" result="void">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
    </method>
    <method name="ERR_add_error_vdata" result="void">
      <arg name="num" type="int" m68kreg="d0"/>
      <arg name="args" type="va_list" m68kreg="a0"/>
    </method>
    <method name="ERR_add_error_data" result="void">
      <arg name="num" type="int" m68kreg="d0"/>
      <vararg name="dummy" type="long" m68kreg="a0"/>
    </method>
    <method name="ERR_load_strings" result="int">
      <arg name="lib" type="int" m68kreg="d0"/>
      <arg name="str" type="ERR_STRING_DATA *" m68kreg="a0"/>
    </method>
    <method name="ERR_unload_strings" result="int">
      <arg name="lib" type="int" m68kreg="d0"/>
      <arg name="str" type="ERR_STRING_DATA *" m68kreg="a0"/>
    </method>
    <method name="ERR_load_ERR_strings" result="int">
    </method>
    <method name="ERR_load_crypto_strings" result="void" status="unimplemented">
    </method>
    <method name="err_free_strings_int" result="void" status="unimplemented">
    </method>
    <method name="ERR_remove_state" result="void" status="unimplemented">
      <arg name="pid" type="unsigned long" m68kreg="d0"/>
    </method>
    <method name="ERR_get_state" result="ERR_STATE *">
    </method>
    <method name="ERR_get_string_table" result="LHASH_OF(ERR_STRING_DATA) *" status="unimplemented">
    </method>
    <method name="ERR_get_err_state_table" result="LHASH_OF(ERR_STATE) *" status="unimplemented">
    </method>
    <method name="ERR_release_err_state_table" result="void" status="unimplemented">
      <arg name="hash" type="LHASH_OF(ERR_STATE) **" m68kreg="a0"/>
    </method>
    <method name="ERR_get_next_error_library" result="int">
    </method>
    <method name="ERR_get_implementation" result="const ERR_FNS *" status="unimplemented">
    </method>
    <method name="ERR_set_implementation" result="int" status="unimplemented">
      <arg name="fns" type="const ERR_FNS *" m68kreg="a0"/>
    </method>
    <method name="EVP_MD_CTX_init" result="void" status="unimplemented">
      <arg name="ctx" type="EVP_MD_CTX *" m68kreg="a0"/>
    </method>
    <method name="EVP_MD_CTX_cleanup" result="int" status="unimplemented">
      <arg name="ctx" type="EVP_MD_CTX *" m68kreg="a0"/>
    </method>
    <method name="EVP_MD_CTX_create" result="EVP_MD_CTX *" status="unimplemented">
    </method>
    <method name="EVP_MD_CTX_destroy" result="void" status="unimplemented">
      <arg name="ctx" type="EVP_MD_CTX *" m68kreg="a0"/>
    </method>
    <method name="EVP_MD_CTX_copy_ex" result="int">
      <arg name="out" type="EVP_MD_CTX *" m68kreg="a0"/>
      <arg name="in" type="const EVP_MD_CTX *" m68kreg="a1"/>
    </method>
    <method name="EVP_DigestInit_ex" result="int">
      <arg name="ctx" type="EVP_MD_CTX *" m68kreg="a0"/>
      <arg name="type" type="const EVP_MD *" m68kreg="a1"/>
      <arg name="impl" type="ENGINE *" m68kreg="a2"/>
    </method>
    <method name="EVP_DigestUpdate" result="int">
      <arg name="ctx" type="EVP_MD_CTX *" m68kreg="a0"/>
      <arg name="d" type="const void *" m68kreg="a1"/>
      <arg name="cnt" type="unsigned int" m68kreg="d0"/>
    </method>
    <method name="EVP_DigestFinal_ex" result="int">
      <arg name="ctx" type="EVP_MD_CTX *" m68kreg="a0"/>
      <arg name="md" type="unsigned char *" m68kreg="a1"/>
      <arg name="s" type="unsigned int *" m68kreg="a2"/>
    </method>
    <method name="EVP_Digest" result="int">
      <arg name="data" type="void *" m68kreg="a0"/>
      <arg name="count" type="unsigned int" m68kreg="d0"/>
      <arg name="md" type="unsigned char *" m68kreg="a1"/>
      <arg name="size" type="unsigned int *" m68kreg="a2"/>
      <arg name="type" type="const EVP_MD *" m68kreg="a3"/>
      <arg name="impl" type="ENGINE *" m68kreg="d1"/>
    </method>
    <method name="EVP_MD_CTX_copy" result="int">
      <arg name="out" type="EVP_MD_CTX *" m68kreg="a0"/>
      <arg name="in" type="const EVP_MD_CTX *" m68kreg="a1"/>
    </method>
    <method name="EVP_DigestInit" result="int">
      <arg name="ctx" type="EVP_MD_CTX *" m68kreg="a0"/>
      <arg name="type" type="const EVP_MD *" m68kreg="a1"/>
    </method>
    <method name="EVP_DigestFinal" result="int">
      <arg name="ctx" type="EVP_MD_CTX *" m68kreg="a0"/>
      <arg name="md" type="unsigned char *" m68kreg="a1"/>
      <arg name="s" type="unsigned int *" m68kreg="a2"/>
    </method>
    <method name="EVP_read_pw_string" result="int">
      <arg name="buf" type="char *" m68kreg="a0"/>
      <arg name="length" type="int" m68kreg="d0"/>
      <arg name="prompt" type="const char *" m68kreg="a1"/>
      <arg name="verify" type="int" m68kreg="d1"/>
    </method>
    <method name="EVP_set_pw_prompt" result="void">
      <arg name="prompt" type="char *" m68kreg="a0"/>
    </method>
    <method name="EVP_get_pw_prompt" result="char *">
    </method>
    <method name="EVP_BytesToKey" result="int">
      <arg name="type" type="const EVP_CIPHER *" m68kreg="a0"/>
      <arg name="md" type="const EVP_MD *" m68kreg="a1"/>
      <arg name="salt" type="const unsigned char *" m68kreg="a2"/>
      <arg name="data" type="const unsigned char *" m68kreg="a3"/>
      <arg name="datal" type="int" m68kreg="d0"/>
      <arg name="count" type="int" m68kreg="d1"/>
      <arg name="key" type="unsigned char *" m68kreg="d2"/>
      <arg name="iv" type="unsigned char *" m68kreg="d3"/>
    </method>
    <method name="EVP_EncryptInit" result="int">
      <arg name="ctx" type="EVP_CIPHER_CTX *" m68kreg="a0"/>
      <arg name="cipher" type="const EVP_CIPHER *" m68kreg="a1"/>
      <arg name="key" type="const unsigned char *" m68kreg="a2"/>
      <arg name="iv" type="const unsigned char *" m68kreg="a3"/>
    </method>
    <method name="EVP_EncryptInit_ex" result="int">
      <arg name="ctx" type="EVP_CIPHER_CTX *" m68kreg="a0"/>
      <arg name="cipher" type="const EVP_CIPHER *" m68kreg="a1"/>
      <arg name="impl" type="ENGINE *" m68kreg="a2"/>
      <arg name="key" type="const unsigned char *" m68kreg="a3"/>
      <arg name="iv" type="const unsigned char *" m68kreg="d0"/>
    </method>
    <method name="EVP_EncryptUpdate" result="int">
      <arg name="ctx" type="EVP_CIPHER_CTX *" m68kreg="a0"/>
      <arg name="out" type="unsigned char *" m68kreg="a1"/>
      <arg name="outl" type="int *" m68kreg="a2"/>
      <arg name="in" type="const unsigned char *" m68kreg="a3"/>
      <arg name="inl" type="int" m68kreg="d0"/>
    </method>
    <method name="EVP_EncryptFinal_ex" result="int">
      <arg name="ctx" type="EVP_CIPHER_CTX *" m68kreg="a0"/>
      <arg name="out" type="unsigned char *" m68kreg="a1"/>
      <arg name="outl" type="int *" m68kreg="a2"/>
    </method>
    <method name="EVP_EncryptFinal" result="int">
      <arg name="ctx" type="EVP_CIPHER_CTX *" m68kreg="a0"/>
      <arg name="out" type="unsigned char *" m68kreg="a1"/>
      <arg name="outl" type="int *" m68kreg="a2"/>
    </method>
    <method name="EVP_DecryptInit" result="int">
      <arg name="ctx" type="EVP_CIPHER_CTX *" m68kreg="a0"/>
      <arg name="cipher" type="const EVP_CIPHER *" m68kreg="a1"/>
      <arg name="key" type="const unsigned char *" m68kreg="a2"/>
      <arg name="iv" type="const unsigned char *" m68kreg="a3"/>
    </method>
    <method name="EVP_DecryptInit_ex" result="int">
      <arg name="ctx" type="EVP_CIPHER_CTX *" m68kreg="a0"/>
      <arg name="cipher" type="const EVP_CIPHER *" m68kreg="a1"/>
      <arg name="impl" type="ENGINE *" m68kreg="a2"/>
      <arg name="key" type="const unsigned char *" m68kreg="a3"/>
      <arg name="iv" type="const unsigned char *" m68kreg="d0"/>
    </method>
    <method name="EVP_DecryptUpdate" result="int">
      <arg name="ctx" type="EVP_CIPHER_CTX *" m68kreg="a0"/>
      <arg name="out" type="unsigned char *" m68kreg="a1"/>
      <arg name="outl" type="int *" m68kreg="a2"/>
      <arg name="in" type="const unsigned char *" m68kreg="a3"/>
      <arg name="inl" type="int" m68kreg="d0"/>
    </method>
    <method name="EVP_DecryptFinal" result="int">
      <arg name="ctx" type="EVP_CIPHER_CTX *" m68kreg="a0"/>
      <arg name="outm" type="unsigned char *" m68kreg="a1"/>
      <arg name="outl" type="int *" m68kreg="a2"/>
    </method>
    <method name="EVP_DecryptFinal_ex" result="int">
      <arg name="ctx" type="EVP_CIPHER_CTX *" m68kreg="a0"/>
      <arg name="outm" type="unsigned char *" m68kreg="a1"/>
      <arg name="outl" type="int *" m68kreg="a2"/>
    </method>
    <method name="EVP_CipherInit" result="int">
      <arg name="ctx" type="EVP_CIPHER_CTX *" m68kreg="a0"/>
      <arg name="cipher" type="const EVP_CIPHER *" m68kreg="a1"/>
      <arg name="key" type="const unsigned char *" m68kreg="a2"/>
      <arg name="iv" type="const unsigned char *" m68kreg="a3"/>
      <arg name="enc" type="int" m68kreg="d0"/>
    </method>
    <method name="EVP_CipherInit_ex" result="int">
      <arg name="ctx" type="EVP_CIPHER_CTX *" m68kreg="a0"/>
      <arg name="cipher" type="const EVP_CIPHER *" m68kreg="a1"/>
      <arg name="impl" type="ENGINE *" m68kreg="a2"/>
      <arg name="key" type="const unsigned char *" m68kreg="a3"/>
      <arg name="iv" type="const unsigned char *" m68kreg="d0"/>
      <arg name="enc" type="int" m68kreg="d1"/>
    </method>
    <method name="EVP_CipherUpdate" result="int">
      <arg name="ctx" type="EVP_CIPHER_CTX *" m68kreg="a0"/>
      <arg name="out" type="unsigned char *" m68kreg="a1"/>
      <arg name="outl" type="int *" m68kreg="a2"/>
      <arg name="in" type="const unsigned char *" m68kreg="a3"/>
      <arg name="inl" type="int" m68kreg="d0"/>
    </method>
    <method name="EVP_CipherFinal" result="int">
      <arg name="ctx" type="EVP_CIPHER_CTX *" m68kreg="a0"/>
      <arg name="outm" type="unsigned char *" m68kreg="a1"/>
      <arg name="outl" type="int *" m68kreg="a2"/>
    </method>
    <method name="EVP_CipherFinal_ex" result="int">
      <arg name="ctx" type="EVP_CIPHER_CTX *" m68kreg="a0"/>
      <arg name="outm" type="unsigned char *" m68kreg="a1"/>
      <arg name="outl" type="int *" m68kreg="a2"/>
    </method>
    <method name="EVP_SignFinal" result="int">
      <arg name="ctx" type="EVP_MD_CTX *" m68kreg="a0"/>
      <arg name="md" type="unsigned char *" m68kreg="a1"/>
      <arg name="s" type="unsigned int *" m68kreg="a2"/>
      <arg name="pkey" type="EVP_PKEY *" m68kreg="a3"/>
    </method>
    <method name="EVP_VerifyFinal" result="int">
      <arg name="ctx" type="EVP_MD_CTX *" m68kreg="a0"/>
      <arg name="sigbuf" type="unsigned char *" m68kreg="a1"/>
      <arg name="siglen" type="unsigned int" m68kreg="d0"/>
      <arg name="pkey" type="EVP_PKEY *" m68kreg="a2"/>
    </method>
    <method name="EVP_OpenInit" result="int">
      <arg name="ctx" type="EVP_CIPHER_CTX *" m68kreg="a0"/>
      <arg name="type" type="const EVP_CIPHER *" m68kreg="a1"/>
      <arg name="ek" type="unsigned char *" m68kreg="a2"/>
      <arg name="ekl" type="int" m68kreg="d0"/>
      <arg name="iv" type="unsigned char *" m68kreg="a3"/>
      <arg name="priv" type="EVP_PKEY *" m68kreg="d1"/>
    </method>
    <method name="EVP_OpenFinal" result="int">
      <arg name="ctx" type="EVP_CIPHER_CTX *" m68kreg="a0"/>
      <arg name="out" type="unsigned char *" m68kreg="a1"/>
      <arg name="outl" type="int *" m68kreg="a2"/>
    </method>
    <method name="EVP_SealInit" result="int">
      <arg name="ctx" type="EVP_CIPHER_CTX *" m68kreg="a0"/>
      <arg name="type" type="const EVP_CIPHER *" m68kreg="a1"/>
      <arg name="ek" type="unsigned char **" m68kreg="a2"/>
      <arg name="ekl" type="int *" m68kreg="a3"/>
      <arg name="iv" type="unsigned char *" m68kreg="d0"/>
      <arg name="pubk" type="EVP_PKEY **" m68kreg="d1"/>
      <arg name="npubk" type="int" m68kreg="d2"/>
    </method>
    <method name="EVP_SealFinal" result="int">
      <arg name="ctx" type="EVP_CIPHER_CTX *" m68kreg="a0"/>
      <arg name="out" type="unsigned char *" m68kreg="a1"/>
      <arg name="outl" type="int *" m68kreg="a2"/>
    </method>
    <method name="EVP_EncodeInit" result="void">
      <arg name="ctx" type="EVP_ENCODE_CTX *" m68kreg="a0"/>
    </method>
    <method name="EVP_EncodeUpdate" result="int">
      <arg name="ctx" type="EVP_ENCODE_CTX *" m68kreg="a0"/>
      <arg name="out" type="unsigned char *" m68kreg="a1"/>
      <arg name="outl" type="int *" m68kreg="a2"/>
      <arg name="in" type="const unsigned char *" m68kreg="a3"/>
      <arg name="inl" type="int" m68kreg="d0"/>
    </method>
    <method name="EVP_EncodeFinal" result="void">
      <arg name="ctx" type="EVP_ENCODE_CTX *" m68kreg="a0"/>
      <arg name="out" type="unsigned char *" m68kreg="a1"/>
      <arg name="outl" type="int *" m68kreg="a2"/>
    </method>
    <method name="EVP_EncodeBlock" result="int">
      <arg name="t" type="unsigned char *" m68kreg="a0"/>
      <arg name="f" type="const unsigned char *" m68kreg="a1"/>
      <arg name="n" type="int" m68kreg="d0"/>
    </method>
    <method name="EVP_DecodeInit" result="void">
      <arg name="ctx" type="EVP_ENCODE_CTX *" m68kreg="a0"/>
    </method>
    <method name="EVP_DecodeUpdate" result="int">
      <arg name="ctx" type="EVP_ENCODE_CTX *" m68kreg="a0"/>
      <arg name="out" type="unsigned char *" m68kreg="a1"/>
      <arg name="outl" type="int *" m68kreg="a2"/>
      <arg name="in" type="unsigned char *" m68kreg="a3"/>
      <arg name="inl" type="int" m68kreg="d0"/>
    </method>
    <method name="EVP_DecodeFinal" result="int">
      <arg name="ctx" type="EVP_ENCODE_CTX *" m68kreg="a0"/>
      <arg name="out" type="unsigned char *" m68kreg="a1"/>
      <arg name="outl" type="int *" m68kreg="a2"/>
    </method>
    <method name="EVP_DecodeBlock" result="int">
      <arg name="t" type="unsigned char *" m68kreg="a0"/>
      <arg name="f" type="const unsigned char *" m68kreg="a1"/>
      <arg name="n" type="int" m68kreg="d0"/>
    </method>
    <method name="EVP_CIPHER_CTX_init" result="void" status="unimplemented">
      <arg name="a" type="EVP_CIPHER_CTX *" m68kreg="a0"/>
    </method>
    <method name="EVP_CIPHER_CTX_cleanup" result="int" status="unimplemented">
      <arg name="a" type="EVP_CIPHER_CTX *" m68kreg="a0"/>
    </method>
    <method name="EVP_CIPHER_CTX_set_key_length" result="int">
      <arg name="x" type="EVP_CIPHER_CTX *" m68kreg="a0"/>
      <arg name="keylen" type="int" m68kreg="d0"/>
    </method>
    <method name="EVP_CIPHER_CTX_set_padding" result="int">
      <arg name="c" type="EVP_CIPHER_CTX *" m68kreg="a0"/>
      <arg name="pad" type="int" m68kreg="d0"/>
    </method>
    <method name="EVP_CIPHER_CTX_ctrl" result="int">
      <arg name="ctx" type="EVP_CIPHER_CTX *" m68kreg="a0"/>
      <arg name="type" type="int" m68kreg="d0"/>
      <arg name="arg" type="int" m68kreg="d1"/>
      <arg name="ptr" type="void *" m68kreg="a1"/>
    </method>
    <method name="BIO_f_md" result="const BIO_METHOD *">
    </method>
    <method name="BIO_f_base64" result="const BIO_METHOD *">
    </method>
    <method name="BIO_f_cipher" result="const BIO_METHOD *">
    </method>
    <method name="BIO_f_reliable" result="const BIO_METHOD *">
    </method>
    <method name="BIO_set_cipher" result="int">
      <arg name="b" type="BIO *" m68kreg="a0"/>
      <arg name="c" type="const EVP_CIPHER *" m68kreg="a1"/>
      <arg name="k" type="const unsigned char *" m68kreg="a2"/>
      <arg name="i" type="const unsigned char *" m68kreg="a3"/>
      <arg name="enc" type="int" m68kreg="d0"/>
    </method>
    <method name="EVP_md_null" result="const EVP_MD *">
    </method>
    <method name="EVP_md2" result="const EVP_MD *">
    </method>
    <method name="EVP_md4" result="const EVP_MD *">
    </method>
    <method name="EVP_md5" result="const EVP_MD *">
    </method>
    <method name="EVP_sha" result="const EVP_MD *" status="unimplemented">
    </method>
    <method name="EVP_sha1" result="const EVP_MD *">
    </method>
    <method name="EVP_dss" result="const EVP_MD *" status="unimplemented">
    </method>
    <method name="EVP_dss1" result="const EVP_MD *" status="unimplemented">
    </method>
    <method name="EVP_mdc2" result="const EVP_MD *">
    </method>
    <method name="EVP_ripemd160" result="const EVP_MD *">
    </method>
    <method name="EVP_enc_null" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_des_ecb" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_des_ede" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_des_ede3" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_des_ede_ecb" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_des_ede3_ecb" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_des_cfb64" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_des_cfb1" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_des_cfb8" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_des_ede_cfb64" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_des_ede3_cfb64" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_des_ede3_cfb1" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_des_ede3_cfb8" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_des_ofb" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_des_ede_ofb" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_des_ede3_ofb" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_des_cbc" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_des_ede_cbc" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_des_ede3_cbc" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_desx_cbc" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_rc4" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_rc4_40" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_idea_ecb" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_idea_cfb64" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_idea_ofb" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_idea_cbc" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_rc2_ecb" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_rc2_cbc" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_rc2_40_cbc" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_rc2_64_cbc" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_rc2_cfb64" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_rc2_ofb" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_bf_ecb" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_bf_cbc" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_bf_cfb64" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_bf_ofb" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_cast5_ecb" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_cast5_cbc" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_cast5_cfb64" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_cast5_ofb" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_rc5_32_12_16_cbc" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_rc5_32_12_16_ecb" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_rc5_32_12_16_cfb64" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_rc5_32_12_16_ofb" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_aes_128_ecb" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_aes_128_cbc" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_aes_128_cfb1" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_aes_128_cfb8" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_aes_128_cfb128" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_aes_128_ofb" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_aes_192_ecb" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_aes_192_cbc" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_aes_192_cfb1" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_aes_192_cfb8" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_aes_192_cfb128" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_aes_192_ofb" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_aes_256_ecb" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_aes_256_cbc" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_aes_256_cfb1" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_aes_256_cfb8" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_aes_256_cfb128" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_aes_256_ofb" result="const EVP_CIPHER *">
    </method>
    <method name="OPENSSL_add_all_algorithms_noconf" result="void" status="unimplemented">
    </method>
    <method name="OPENSSL_add_all_algorithms_conf" result="void" status="unimplemented">
    </method>
    <method name="OpenSSL_add_all_ciphers" result="void" status="unimplemented">
    </method>
    <method name="OpenSSL_add_all_digests" result="void" status="unimplemented">
    </method>
    <method name="EVP_add_cipher" result="int">
      <arg name="cipher" type="const EVP_CIPHER *" m68kreg="a0"/>
    </method>
    <method name="EVP_add_digest" result="int">
      <arg name="digest" type="const EVP_MD *" m68kreg="a0"/>
    </method>
    <method name="EVP_get_cipherbyname" result="const EVP_CIPHER *">
      <arg name="name" type="const char *" m68kreg="a0"/>
    </method>
    <method name="EVP_get_digestbyname" result="const EVP_MD *">
      <arg name="name" type="const char *" m68kreg="a0"/>
    </method>
    <method name="EVP_cleanup" result="void" status="unimplemented">
    </method>
    <method name="EVP_PKEY_decrypt" result="int">
      <arg name="ctx" type="EVP_PKEY_CTX *" m68kreg="a0"/>
      <arg name="out" type="unsigned char *" m68kreg="a1"/>
      <arg name="outlen" type="size_t *" m68kreg="a2"/>
      <arg name="in" type="const unsigned char *" m68kreg="a3"/>
      <arg name="inlen" type="size_t" m68kreg="d0"/>
    </method>
    <method name="EVP_PKEY_encrypt" result="int">
      <arg name="ctx" type="EVP_PKEY_CTX *" m68kreg="a0"/>
      <arg name="out" type="unsigned char *" m68kreg="a1"/>
      <arg name="outlen" type="size_t *" m68kreg="a2"/>
      <arg name="in" type="const unsigned char *" m68kreg="a3"/>
      <arg name="inlen" type="size_t" m68kreg="d0"/>
    </method>
    <method name="EVP_PKEY_type" result="int">
      <arg name="type" type="int" m68kreg="d0"/>
    </method>
    <method name="EVP_PKEY_bits" result="int">
      <arg name="pkey" type="const EVP_PKEY *" m68kreg="a0"/>
    </method>
    <method name="EVP_PKEY_size" result="int">
      <arg name="pkey" type="const EVP_PKEY *" m68kreg="a0"/>
    </method>
    <method name="EVP_PKEY_assign" result="int">
      <arg name="pkey" type="EVP_PKEY *" m68kreg="a0"/>
      <arg name="type" type="int" m68kreg="d0"/>
      <arg name="key" type="char *" m68kreg="a1"/>
    </method>
    <method name="EVP_PKEY_set1_RSA" result="int">
      <arg name="pkey" type="EVP_PKEY *" m68kreg="a0"/>
      <arg name="key" type="struct rsa_st *" m68kreg="a1"/>
    </method>
    <method name="EVP_PKEY_get1_RSA" result="struct rsa_st *">
      <arg name="pkey" type="EVP_PKEY *" m68kreg="a0"/>
    </method>
    <method name="EVP_PKEY_set1_DSA" result="int">
      <arg name="pkey" type="EVP_PKEY *" m68kreg="a0"/>
      <arg name="key" type="struct dsa_st *" m68kreg="a1"/>
    </method>
    <method name="EVP_PKEY_get1_DSA" result="struct dsa_st *">
      <arg name="pkey" type="EVP_PKEY *" m68kreg="a0"/>
    </method>
    <method name="EVP_PKEY_set1_DH" result="int">
      <arg name="pkey" type="EVP_PKEY *" m68kreg="a0"/>
      <arg name="key" type="struct dh_st *" m68kreg="a1"/>
    </method>
    <method name="EVP_PKEY_get1_DH" result="struct dh_st *">
      <arg name="pkey" type="EVP_PKEY *" m68kreg="a0"/>
    </method>
    <method name="EVP_PKEY_new" result="EVP_PKEY *">
    </method>
    <method name="EVP_PKEY_free" result="void">
      <arg name="pkey" type="EVP_PKEY *" m68kreg="a0"/>
    </method>
    <method name="d2i_PublicKey" result="EVP_PKEY *">
      <arg name="type" type="int" m68kreg="d0"/>
      <arg name="a" type="EVP_PKEY **" m68kreg="a0"/>
      <arg name="pp" type="const unsigned char **" m68kreg="a1"/>
      <arg name="length" type="long" m68kreg="d1"/>
    </method>
    <method name="i2d_PublicKey" result="int">
      <arg name="a" type="EVP_PKEY *" m68kreg="a0"/>
      <arg name="pp" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="d2i_PrivateKey" result="EVP_PKEY *">
      <arg name="type" type="int" m68kreg="d0"/>
      <arg name="a" type="EVP_PKEY **" m68kreg="a0"/>
      <arg name="pp" type="const unsigned char **" m68kreg="a1"/>
      <arg name="length" type="long" m68kreg="d1"/>
    </method>
    <method name="d2i_AutoPrivateKey" result="EVP_PKEY *">
      <arg name="a" type="EVP_PKEY **" m68kreg="a0"/>
      <arg name="pp" type="const unsigned char **" m68kreg="a1"/>
      <arg name="length" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_PrivateKey" result="int">
      <arg name="a" type="EVP_PKEY *" m68kreg="a0"/>
      <arg name="pp" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="EVP_PKEY_copy_parameters" result="int">
      <arg name="to" type="EVP_PKEY *" m68kreg="a0"/>
      <arg name="from" type="EVP_PKEY *" m68kreg="a1"/>
    </method>
    <method name="EVP_PKEY_missing_parameters" result="int">
      <arg name="pkey" type="EVP_PKEY *" m68kreg="a0"/>
    </method>
    <method name="EVP_PKEY_save_parameters" result="int">
      <arg name="pkey" type="EVP_PKEY *" m68kreg="a0"/>
      <arg name="mode" type="int" m68kreg="d0"/>
    </method>
    <method name="EVP_PKEY_cmp_parameters" result="int">
      <arg name="a" type="EVP_PKEY *" m68kreg="a0"/>
      <arg name="b" type="EVP_PKEY *" m68kreg="a1"/>
    </method>
    <method name="EVP_CIPHER_type" result="int">
      <arg name="ctx" type="const EVP_CIPHER *" m68kreg="a0"/>
    </method>
    <method name="EVP_CIPHER_param_to_asn1" result="int">
      <arg name="c" type="EVP_CIPHER_CTX *" m68kreg="a0"/>
      <arg name="type" type="ASN1_TYPE *" m68kreg="a1"/>
    </method>
    <method name="EVP_CIPHER_asn1_to_param" result="int">
      <arg name="c" type="EVP_CIPHER_CTX *" m68kreg="a0"/>
      <arg name="type" type="ASN1_TYPE *" m68kreg="a1"/>
    </method>
    <method name="EVP_CIPHER_set_asn1_iv" result="int">
      <arg name="c" type="EVP_CIPHER_CTX *" m68kreg="a0"/>
      <arg name="type" type="ASN1_TYPE *" m68kreg="a1"/>
    </method>
    <method name="EVP_CIPHER_get_asn1_iv" result="int">
      <arg name="c" type="EVP_CIPHER_CTX *" m68kreg="a0"/>
      <arg name="type" type="ASN1_TYPE *" m68kreg="a1"/>
    </method>
    <method name="PKCS5_PBE_keyivgen" result="int">
      <arg name="ctx" type="EVP_CIPHER_CTX *" m68kreg="a0"/>
      <arg name="pass" type="const char *" m68kreg="a1"/>
      <arg name="passlen" type="int" m68kreg="d0"/>
      <arg name="param" type="ASN1_TYPE *" m68kreg="a2"/>
      <arg name="cipher" type="const EVP_CIPHER *" m68kreg="a3"/>
      <arg name="md" type="const EVP_MD *" m68kreg="d1"/>
      <arg name="en_de" type="int" m68kreg="d2"/>
    </method>
    <method name="PKCS5_PBKDF2_HMAC_SHA1" result="int">
      <arg name="pass" type="const char *" m68kreg="a0"/>
      <arg name="passlen" type="int" m68kreg="d0"/>
      <arg name="salt" type="unsigned char *" m68kreg="a1"/>
      <arg name="saltlen" type="int" m68kreg="d1"/>
      <arg name="iter" type="int" m68kreg="d2"/>
      <arg name="keylen" type="int" m68kreg="d3"/>
      <arg name="out" type="unsigned char *" m68kreg="a2"/>
    </method>
    <method name="PKCS5_v2_PBE_keyivgen" result="int">
      <arg name="ctx" type="EVP_CIPHER_CTX *" m68kreg="a0"/>
      <arg name="pass" type="const char *" m68kreg="a1"/>
      <arg name="passlen" type="int" m68kreg="d0"/>
      <arg name="param" type="ASN1_TYPE *" m68kreg="a2"/>
      <arg name="cipher" type="const EVP_CIPHER *" m68kreg="a3"/>
      <arg name="md" type="const EVP_MD *" m68kreg="d1"/>
      <arg name="en_de" type="int" m68kreg="d2"/>
    </method>
    <method name="PKCS5_PBE_add" result="void">
    </method>
    <method name="EVP_PBE_CipherInit" result="int">
      <arg name="pbe_obj" type="ASN1_OBJECT *" m68kreg="a0"/>
      <arg name="pass" type="const char *" m68kreg="a1"/>
      <arg name="passlen" type="int" m68kreg="d0"/>
      <arg name="param" type="ASN1_TYPE *" m68kreg="a2"/>
      <arg name="ctx" type="EVP_CIPHER_CTX *" m68kreg="a3"/>
      <arg name="en_de" type="int" m68kreg="d1"/>
    </method>
    <method name="EVP_PBE_alg_add" result="int">
      <arg name="nid" type="int" m68kreg="d0"/>
      <arg name="cipher" type="const EVP_CIPHER *" m68kreg="a0"/>
      <arg name="md" type="const EVP_MD *" m68kreg="a1"/>
      <arg name="keygen" type="EVP_PBE_KEYGEN *" m68kreg="a2"/>
    </method>
    <method name="EVP_PBE_cleanup" result="void">
    </method>
    <method name="ERR_load_EVP_strings" result="int">
    </method>
    <method name="HMAC_CTX_init" result="void" status="unimplemented">
      <arg name="ctx" type="HMAC_CTX *" m68kreg="a0"/>
    </method>
    <method name="HMAC_CTX_cleanup" result="void" status="unimplemented">
      <arg name="ctx" type="HMAC_CTX *" m68kreg="a0"/>
    </method>
    <method name="HMAC_Init" result="int">
      <arg name="ctx" type="HMAC_CTX *" m68kreg="a0"/>
      <arg name="key" type="const void *" m68kreg="a1"/>
      <arg name="len" type="int" m68kreg="d0"/>
      <arg name="md" type="const EVP_MD *" m68kreg="a2"/>
    </method>
    <method name="HMAC_Init_ex" result="int">
      <arg name="ctx" type="HMAC_CTX *" m68kreg="a0"/>
      <arg name="key" type="const void *" m68kreg="a1"/>
      <arg name="len" type="int" m68kreg="d0"/>
      <arg name="md" type="const EVP_MD *" m68kreg="a2"/>
      <arg name="impl" type="ENGINE *" m68kreg="a3"/>
    </method>
    <method name="HMAC_Update" result="int">
      <arg name="ctx" type="HMAC_CTX *" m68kreg="a0"/>
      <arg name="data" type="const unsigned char *" m68kreg="a1"/>
      <arg name="len" type="size_t" m68kreg="d0"/>
    </method>
    <method name="HMAC_Final" result="int">
      <arg name="ctx" type="HMAC_CTX *" m68kreg="a0"/>
      <arg name="md" type="unsigned char *" m68kreg="a1"/>
      <arg name="len" type="unsigned int *" m68kreg="a2"/>
    </method>
    <method name="HMAC" result="unsigned char *">
      <arg name="evp_md" type="const EVP_MD *" m68kreg="a0"/>
      <arg name="key" type="const void *" m68kreg="a1"/>
      <arg name="key_len" type="int" m68kreg="d0"/>
      <arg name="d" type="const unsigned char *" m68kreg="a2"/>
      <arg name="n" type="int" m68kreg="d1"/>
      <arg name="md" type="unsigned char *" m68kreg="a3"/>
      <arg name="md_len" type="unsigned int *" m68kreg="d2"/>
    </method>
    <method name="KRB5_ENCDATA_new" result="KRB5_ENCDATA *" status="unimplemented">
    </method>
    <method name="KRB5_ENCDATA_free" result="void" status="unimplemented">
      <arg name="a" type="KRB5_ENCDATA *" m68kreg="a0"/>
    </method>
    <method name="d2i_KRB5_ENCDATA" result="KRB5_ENCDATA *" status="unimplemented">
      <arg name="a" type="KRB5_ENCDATA **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_KRB5_ENCDATA" result="int" status="unimplemented">
      <arg name="a" type="KRB5_ENCDATA *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="KRB5_ENCDATA_it" result="const ASN1_ITEM *" status="unimplemented">
    </method>
    <method name="KRB5_PRINCNAME_new" result="KRB5_PRINCNAME *" status="unimplemented">
    </method>
    <method name="KRB5_PRINCNAME_free" result="void" status="unimplemented">
      <arg name="a" type="KRB5_PRINCNAME *" m68kreg="a0"/>
    </method>
    <method name="d2i_KRB5_PRINCNAME" result="KRB5_PRINCNAME *" status="unimplemented">
      <arg name="a" type="KRB5_PRINCNAME **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_KRB5_PRINCNAME" result="int" status="unimplemented">
      <arg name="a" type="KRB5_PRINCNAME *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="KRB5_PRINCNAME_it" result="const ASN1_ITEM *" status="unimplemented">
    </method>
    <method name="KRB5_TKTBODY_new" result="KRB5_TKTBODY *" status="unimplemented">
    </method>
    <method name="KRB5_TKTBODY_free" result="void" status="unimplemented">
      <arg name="a" type="KRB5_TKTBODY *" m68kreg="a0"/>
    </method>
    <method name="d2i_KRB5_TKTBODY" result="KRB5_TKTBODY *" status="unimplemented">
      <arg name="a" type="KRB5_TKTBODY **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_KRB5_TKTBODY" result="int" status="unimplemented">
      <arg name="a" type="KRB5_TKTBODY *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="KRB5_TKTBODY_it" result="const ASN1_ITEM *" status="unimplemented">
    </method>
    <method name="KRB5_APREQBODY_new" result="KRB5_APREQBODY *" status="unimplemented">
    </method>
    <method name="KRB5_APREQBODY_free" result="void" status="unimplemented">
      <arg name="a" type="KRB5_APREQBODY *" m68kreg="a0"/>
    </method>
    <method name="d2i_KRB5_APREQBODY" result="KRB5_APREQBODY *" status="unimplemented">
      <arg name="a" type="KRB5_APREQBODY **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_KRB5_APREQBODY" result="int" status="unimplemented">
      <arg name="a" type="KRB5_APREQBODY *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="KRB5_APREQBODY_it" result="const ASN1_ITEM *" status="unimplemented">
    </method>
    <method name="KRB5_TICKET_new" result="KRB5_TICKET *" status="unimplemented">
    </method>
    <method name="KRB5_TICKET_free" result="void" status="unimplemented">
      <arg name="a" type="KRB5_TICKET *" m68kreg="a0"/>
    </method>
    <method name="d2i_KRB5_TICKET" result="KRB5_TICKET *" status="unimplemented">
      <arg name="a" type="KRB5_TICKET **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_KRB5_TICKET" result="int" status="unimplemented">
      <arg name="a" type="KRB5_TICKET *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="KRB5_TICKET_it" result="const ASN1_ITEM *" status="unimplemented">
    </method>
    <method name="KRB5_APREQ_new" result="KRB5_APREQ *" status="unimplemented">
    </method>
    <method name="KRB5_APREQ_free" result="void" status="unimplemented">
      <arg name="a" type="KRB5_APREQ *" m68kreg="a0"/>
    </method>
    <method name="d2i_KRB5_APREQ" result="KRB5_APREQ *" status="unimplemented">
      <arg name="a" type="KRB5_APREQ **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_KRB5_APREQ" result="int" status="unimplemented">
      <arg name="a" type="KRB5_APREQ *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="KRB5_APREQ_it" result="const ASN1_ITEM *" status="unimplemented">
    </method>
    <method name="KRB5_CHECKSUM_new" result="KRB5_CHECKSUM *" status="unimplemented">
    </method>
    <method name="KRB5_CHECKSUM_free" result="void" status="unimplemented">
      <arg name="a" type="KRB5_CHECKSUM *" m68kreg="a0"/>
    </method>
    <method name="d2i_KRB5_CHECKSUM" result="KRB5_CHECKSUM *" status="unimplemented">
      <arg name="a" type="KRB5_CHECKSUM **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_KRB5_CHECKSUM" result="int" status="unimplemented">
      <arg name="a" type="KRB5_CHECKSUM *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="KRB5_CHECKSUM_it" result="const ASN1_ITEM *" status="unimplemented">
    </method>
    <method name="KRB5_ENCKEY_new" result="KRB5_ENCKEY *" status="unimplemented">
    </method>
    <method name="KRB5_ENCKEY_free" result="void" status="unimplemented">
      <arg name="a" type="KRB5_ENCKEY *" m68kreg="a0"/>
    </method>
    <method name="d2i_KRB5_ENCKEY" result="KRB5_ENCKEY *" status="unimplemented">
      <arg name="a" type="KRB5_ENCKEY **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_KRB5_ENCKEY" result="int" status="unimplemented">
      <arg name="a" type="KRB5_ENCKEY *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="KRB5_ENCKEY_it" result="const ASN1_ITEM *" status="unimplemented">
    </method>
    <method name="KRB5_AUTHDATA_new" result="KRB5_AUTHDATA *" status="unimplemented">
    </method>
    <method name="KRB5_AUTHDATA_free" result="void" status="unimplemented">
      <arg name="a" type="KRB5_AUTHDATA *" m68kreg="a0"/>
    </method>
    <method name="d2i_KRB5_AUTHDATA" result="KRB5_AUTHDATA *" status="unimplemented">
      <arg name="a" type="KRB5_AUTHDATA **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_KRB5_AUTHDATA" result="int" status="unimplemented">
      <arg name="a" type="KRB5_AUTHDATA *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="KRB5_AUTHDATA_it" result="const ASN1_ITEM *" status="unimplemented">
    </method>
    <method name="KRB5_AUTHENTBODY_new" result="KRB5_AUTHENTBODY *" status="unimplemented">
    </method>
    <method name="KRB5_AUTHENTBODY_free" result="void" status="unimplemented">
      <arg name="a" type="KRB5_AUTHENTBODY *" m68kreg="a0"/>
    </method>
    <method name="d2i_KRB5_AUTHENTBODY" result="KRB5_AUTHENTBODY *" status="unimplemented">
      <arg name="a" type="KRB5_AUTHENTBODY **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_KRB5_AUTHENTBODY" result="int" status="unimplemented">
      <arg name="a" type="KRB5_AUTHENTBODY *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="KRB5_AUTHENTBODY_it" result="const ASN1_ITEM *" status="unimplemented">
    </method>
    <method name="KRB5_AUTHENT_new" result="KRB5_AUTHENT *" status="unimplemented">
    </method>
    <method name="KRB5_AUTHENT_free" result="void" status="unimplemented">
      <arg name="a" type="KRB5_AUTHENT *" m68kreg="a0"/>
    </method>
    <method name="d2i_KRB5_AUTHENT" result="KRB5_AUTHENT *" status="unimplemented">
      <arg name="a" type="KRB5_AUTHENT **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_KRB5_AUTHENT" result="int" status="unimplemented">
      <arg name="a" type="KRB5_AUTHENT *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="KRB5_AUTHENT_it" result="const ASN1_ITEM *" status="unimplemented">
    </method>
    <method name="OPENSSL_LH_new" result="OPENSSL_LHASH *">
      <arg name="h" type="OPENSSL_LH_HASHFUNC" m68kreg="a0"/>
      <arg name="c" type="OPENSSL_LH_COMPFUNC" m68kreg="a1"/>
    </method>
    <method name="OPENSSL_LH_free" result="void">
      <arg name="lh" type="OPENSSL_LHASH *" m68kreg="a0"/>
    </method>
    <method name="OPENSSL_LH_insert" result="void *">
      <arg name="lh" type="OPENSSL_LHASH *" m68kreg="a0"/>
      <arg name="data" type="void *" m68kreg="a1"/>
    </method>
    <method name="OPENSSL_LH_delete" result="void *">
      <arg name="lh" type="OPENSSL_LHASH *" m68kreg="a0"/>
      <arg name="data" type="const void *" m68kreg="a1"/>
    </method>
    <method name="OPENSSL_LH_retrieve" result="void *">
      <arg name="lh" type="OPENSSL_LHASH *" m68kreg="a0"/>
      <arg name="data" type="const void *" m68kreg="a1"/>
    </method>
    <method name="OPENSSL_LH_doall" result="void">
      <arg name="lh" type="OPENSSL_LHASH *" m68kreg="a0"/>
      <arg name="func" type="OPENSSL_LH_DOALL_FUNC" m68kreg="a1"/>
    </method>
    <method name="OPENSSL_LH_doall_arg" result="void">
      <arg name="lh" type="OPENSSL_LHASH *" m68kreg="a0"/>
      <arg name="func" type="OPENSSL_LH_DOALL_FUNCARG" m68kreg="a1"/>
      <arg name="arg" type="void *" m68kreg="a2"/>
    </method>
    <method name="OPENSSL_LH_strhash" result="unsigned long">
      <arg name="c" type="const char *" m68kreg="a0"/>
    </method>
    <method name="OPENSSL_LH_num_items" result="unsigned long">
      <arg name="lh" type="const OPENSSL_LHASH *" m68kreg="a0"/>
    </method>
    <method name="OPENSSL_LH_stats_bio" result="void">
      <arg name="lh" type="const OPENSSL_LHASH *" m68kreg="a0"/>
      <arg name="out" type="BIO *" m68kreg="a1"/>
    </method>
    <method name="OPENSSL_LH_node_stats_bio" result="void">
      <arg name="lh" type="const OPENSSL_LHASH *" m68kreg="a0"/>
      <arg name="out" type="BIO *" m68kreg="a1"/>
    </method>
    <method name="OPENSSL_LH_node_usage_stats_bio" result="void">
      <arg name="lh" type="const OPENSSL_LHASH *" m68kreg="a0"/>
      <arg name="out" type="BIO *" m68kreg="a1"/>
    </method>
    <method name="OBJ_NAME_init" result="int">
    </method>
    <method name="OBJ_NAME_new_index" result="int">
      <arg name="hash_func" type="unsigned long (*)(const char *)" m68kreg="a0"/>
      <arg name="cmp_func" type="int (*)(const char *, const char *)" m68kreg="a1"/>
      <arg name="free_func" type="void (*)(const char *, int, const char *)" m68kreg="a2"/>
    </method>
    <method name="OBJ_NAME_get" result="const char *">
      <arg name="name" type="const char *" m68kreg="a0"/>
      <arg name="type" type="int" m68kreg="d0"/>
    </method>
    <method name="OBJ_NAME_add" result="int">
      <arg name="name" type="const char *" m68kreg="a0"/>
      <arg name="type" type="int" m68kreg="d0"/>
      <arg name="data" type="const char *" m68kreg="a1"/>
    </method>
    <method name="OBJ_NAME_remove" result="int">
      <arg name="name" type="const char *" m68kreg="a0"/>
      <arg name="type" type="int" m68kreg="d0"/>
    </method>
    <method name="OBJ_NAME_cleanup" result="void">
      <arg name="type" type="int" m68kreg="d0"/>
    </method>
    <method name="OBJ_NAME_do_all" result="void">
      <arg name="type" type="int" m68kreg="d0"/>
      <arg name="fn" type="void (*)(const OBJ_NAME *, void *arg)" m68kreg="a0"/>
      <arg name="arg" type="void *" m68kreg="a1"/>
    </method>
    <method name="OBJ_NAME_do_all_sorted" result="void">
      <arg name="type" type="int" m68kreg="d0"/>
      <arg name="fn" type="void (*)(const OBJ_NAME *, void *arg)" m68kreg="a0"/>
      <arg name="arg" type="void *" m68kreg="a1"/>
    </method>
    <method name="OBJ_dup" result="ASN1_OBJECT *">
      <arg name="o" type="const ASN1_OBJECT *" m68kreg="a0"/>
    </method>
    <method name="OBJ_nid2obj" result="ASN1_OBJECT *">
      <arg name="n" type="int" m68kreg="d0"/>
    </method>
    <method name="OBJ_nid2ln" result="const char *">
      <arg name="n" type="int" m68kreg="d0"/>
    </method>
    <method name="OBJ_nid2sn" result="const char *">
      <arg name="n" type="int" m68kreg="d0"/>
    </method>
    <method name="OBJ_obj2nid" result="int">
      <arg name="o" type="const ASN1_OBJECT *" m68kreg="a0"/>
    </method>
    <method name="OBJ_txt2obj" result="ASN1_OBJECT *">
      <arg name="s" type="const char *" m68kreg="a0"/>
      <arg name="no_name" type="int" m68kreg="d0"/>
    </method>
    <method name="OBJ_obj2txt" result="int">
      <arg name="buf" type="char *" m68kreg="a0"/>
      <arg name="buf_len" type="int" m68kreg="d0"/>
      <arg name="a" type="const ASN1_OBJECT *" m68kreg="a1"/>
      <arg name="no_name" type="int" m68kreg="d1"/>
    </method>
    <method name="OBJ_txt2nid" result="int">
      <arg name="s" type="const char *" m68kreg="a0"/>
    </method>
    <method name="OBJ_ln2nid" result="int">
      <arg name="s" type="const char *" m68kreg="a0"/>
    </method>
    <method name="OBJ_sn2nid" result="int">
      <arg name="s" type="const char *" m68kreg="a0"/>
    </method>
    <method name="OBJ_cmp" result="int">
      <arg name="a" type="const ASN1_OBJECT *" m68kreg="a0"/>
      <arg name="b" type="const ASN1_OBJECT *" m68kreg="a1"/>
    </method>
    <method name="OBJ_bsearch" result="const char *" status="unimplemented">
      <arg name="key" type="const char *" m68kreg="a0"/>
      <arg name="base" type="const char *" m68kreg="a1"/>
      <arg name="num" type="int" m68kreg="d0"/>
      <arg name="size" type="size" m68kreg="d1"/>
      <arg name="cmp" type="(*)(const void *, const void *)" m68kreg="a2"/>
    </method>
    <method name="OBJ_new_nid" result="int">
      <arg name="num" type="int" m68kreg="d0"/>
    </method>
    <method name="OBJ_add_object" result="int">
      <arg name="obj" type="const ASN1_OBJECT *" m68kreg="a0"/>
    </method>
    <method name="OBJ_create" result="int">
      <arg name="oid" type="const char *" m68kreg="a0"/>
      <arg name="sn" type="const char *" m68kreg="a1"/>
      <arg name="ln" type="const char *" m68kreg="a2"/>
    </method>
    <method name="OBJ_cleanup" result="void" status="unimplemented">
    </method>
    <method name="OBJ_create_objects" result="int">
      <arg name="in" type="BIO *" m68kreg="a0"/>
    </method>
    <method name="ERR_load_OBJ_strings" result="int">
    </method>
    <method name="OCSP_sendreq_bio" result="OCSP_RESPONSE *">
      <arg name="b" type="BIO *" m68kreg="a0"/>
      <arg name="path" type="const char *" m68kreg="a1"/>
      <arg name="req" type="OCSP_REQUEST *" m68kreg="a2"/>
    </method>
    <method name="OCSP_cert_to_id" result="OCSP_CERTID *">
      <arg name="dgst" type="const EVP_MD *" m68kreg="a0"/>
      <arg name="subject" type="const X509 *" m68kreg="a1"/>
      <arg name="issuer" type="const X509 *" m68kreg="a2"/>
    </method>
    <method name="OCSP_cert_id_new" result="OCSP_CERTID *">
      <arg name="dgst" type="const EVP_MD *" m68kreg="a0"/>
      <arg name="issuerName" type="const X509_NAME *" m68kreg="a1"/>
      <arg name="issuerKey" type="const ASN1_BIT_STRING *" m68kreg="a2"/>
      <arg name="serialNumber" type="const ASN1_INTEGER *" m68kreg="a3"/>
    </method>
    <method name="OCSP_request_add0_id" result="OCSP_ONEREQ *">
      <arg name="req" type="OCSP_REQUEST *" m68kreg="a0"/>
      <arg name="cid" type="OCSP_CERTID *" m68kreg="a1"/>
    </method>
    <method name="OCSP_request_add1_nonce" result="int">
      <arg name="req" type="OCSP_REQUEST *" m68kreg="a0"/>
      <arg name="val" type="unsigned char *" m68kreg="a1"/>
      <arg name="len" type="int" m68kreg="d0"/>
    </method>
    <method name="OCSP_basic_add1_nonce" result="int">
      <arg name="resp" type="OCSP_BASICRESP *" m68kreg="a0"/>
      <arg name="val" type="unsigned char *" m68kreg="a1"/>
      <arg name="len" type="int" m68kreg="d0"/>
    </method>
    <method name="OCSP_check_nonce" result="int">
      <arg name="req" type="OCSP_REQUEST *" m68kreg="a0"/>
      <arg name="bs" type="OCSP_BASICRESP *" m68kreg="a1"/>
    </method>
    <method name="OCSP_copy_nonce" result="int">
      <arg name="resp" type="OCSP_BASICRESP *" m68kreg="a0"/>
      <arg name="req" type="OCSP_REQUEST *" m68kreg="a1"/>
    </method>
    <method name="OCSP_request_set1_name" result="int">
      <arg name="req" type="OCSP_REQUEST *" m68kreg="a0"/>
      <arg name="nm" type="X509_NAME *" m68kreg="a1"/>
    </method>
    <method name="OCSP_request_add1_cert" result="int">
      <arg name="req" type="OCSP_REQUEST *" m68kreg="a0"/>
      <arg name="cert" type="X509 *" m68kreg="a1"/>
    </method>
    <method name="OCSP_request_sign" result="int">
      <arg name="req" type="OCSP_REQUEST *" m68kreg="a0"/>
      <arg name="signer" type="X509 *" m68kreg="a1"/>
      <arg name="key" type="EVP_PKEY *" m68kreg="a2"/>
      <arg name="dgst" type="const EVP_MD *" m68kreg="a3"/>
      <arg name="certs" type="STACK_OF(X509) *" m68kreg="d0"/>
      <arg name="flags" type="unsigned long" m68kreg="d1"/>
    </method>
    <method name="OCSP_response_status" result="int">
      <arg name="resp" type="OCSP_RESPONSE *" m68kreg="a0"/>
    </method>
    <method name="OCSP_response_get1_basic" result="OCSP_BASICRESP *">
      <arg name="resp" type="OCSP_RESPONSE *" m68kreg="a0"/>
    </method>
    <method name="OCSP_resp_count" result="int">
      <arg name="bs" type="OCSP_BASICRESP *" m68kreg="a0"/>
    </method>
    <method name="OCSP_resp_get0" result="OCSP_SINGLERESP *">
      <arg name="bs" type="OCSP_BASICRESP *" m68kreg="a0"/>
      <arg name="idx" type="int" m68kreg="d0"/>
    </method>
    <method name="OCSP_resp_find" result="int">
      <arg name="bs" type="OCSP_BASICRESP *" m68kreg="a0"/>
      <arg name="id" type="OCSP_CERTID *" m68kreg="a1"/>
      <arg name="last" type="int" m68kreg="d0"/>
    </method>
    <method name="OCSP_single_get0_status" result="int">
      <arg name="single" type="OCSP_SINGLERESP *" m68kreg="a0"/>
      <arg name="reason" type="int *" m68kreg="a1"/>
      <arg name="revtime" type="ASN1_GENERALIZEDTIME **" m68kreg="a2"/>
      <arg name="thisupd" type="ASN1_GENERALIZEDTIME **" m68kreg="a3"/>
      <arg name="nextupd" type="ASN1_GENERALIZEDTIME **" m68kreg="d0"/>
    </method>
    <method name="OCSP_resp_find_status" result="int">
      <arg name="bs" type="OCSP_BASICRESP *" m68kreg="a0"/>
      <arg name="id" type="OCSP_CERTID *" m68kreg="a1"/>
      <arg name="status" type="int *" m68kreg="a2"/>
      <arg name="reason" type="int *" m68kreg="a3"/>
      <arg name="revtime" type="ASN1_GENERALIZEDTIME **" m68kreg="d0"/>
      <arg name="thisupd" type="ASN1_GENERALIZEDTIME **" m68kreg="d1"/>
      <arg name="nextupd" type="ASN1_GENERALIZEDTIME **" m68kreg="d2"/>
    </method>
    <method name="OCSP_check_validity" result="int">
      <arg name="thisupd" type="ASN1_GENERALIZEDTIME *" m68kreg="a0"/>
      <arg name="nextupd" type="ASN1_GENERALIZEDTIME *" m68kreg="a1"/>
      <arg name="sec" type="long" m68kreg="d0"/>
      <arg name="maxsec" type="long" m68kreg="d1"/>
    </method>
    <method name="OCSP_request_verify" result="int">
      <arg name="req" type="OCSP_REQUEST *" m68kreg="a0"/>
      <arg name="certs" type="STACK_OF(X509) *" m68kreg="a1"/>
      <arg name="store" type="X509_STORE *" m68kreg="a2"/>
      <arg name="flags" type="unsigned long" m68kreg="d0"/>
    </method>
    <method name="OCSP_parse_url" result="int">
      <arg name="url" type="const char *" m68kreg="a0"/>
      <arg name="phost" type="char **" m68kreg="a1"/>
      <arg name="pport" type="char **" m68kreg="a2"/>
      <arg name="ppath" type="char **" m68kreg="a3"/>
      <arg name="pssl" type="int *" m68kreg="d0"/>
    </method>
    <method name="OCSP_id_issuer_cmp" result="int">
      <arg name="a" type="OCSP_CERTID *" m68kreg="a0"/>
      <arg name="b" type="OCSP_CERTID *" m68kreg="a1"/>
    </method>
    <method name="OCSP_id_cmp" result="int">
      <arg name="a" type="OCSP_CERTID *" m68kreg="a0"/>
      <arg name="b" type="OCSP_CERTID *" m68kreg="a1"/>
    </method>
    <method name="OCSP_request_onereq_count" result="int">
      <arg name="req" type="OCSP_REQUEST *" m68kreg="a0"/>
    </method>
    <method name="OCSP_request_onereq_get0" result="OCSP_ONEREQ *">
      <arg name="req" type="OCSP_REQUEST *" m68kreg="a0"/>
      <arg name="i" type="int" m68kreg="d0"/>
    </method>
    <method name="OCSP_onereq_get0_id" result="OCSP_CERTID *">
      <arg name="one" type="OCSP_ONEREQ *" m68kreg="a0"/>
    </method>
    <method name="OCSP_id_get0_info" result="int">
      <arg name="piNameHash" type="ASN1_OCTET_STRING **" m68kreg="a0"/>
      <arg name="pmd" type="ASN1_OBJECT **" m68kreg="a1"/>
      <arg name="pikeyHash" type="ASN1_OCTET_STRING **" m68kreg="a2"/>
      <arg name="pserial" type="ASN1_INTEGER **" m68kreg="a3"/>
      <arg name="cid" type="OCSP_CERTID *" m68kreg="d0"/>
    </method>
    <method name="OCSP_request_is_signed" result="int">
      <arg name="req" type="OCSP_REQUEST *" m68kreg="a0"/>
    </method>
    <method name="OCSP_response_create" result="OCSP_RESPONSE *">
      <arg name="status" type="int" m68kreg="d0"/>
      <arg name="bs" type="OCSP_BASICRESP *" m68kreg="a0"/>
    </method>
    <method name="OCSP_basic_add1_status" result="OCSP_SINGLERESP *">
      <arg name="rsp" type="OCSP_BASICRESP *" m68kreg="a0"/>
      <arg name="cid" type="OCSP_CERTID *" m68kreg="a1"/>
      <arg name="status" type="int" m68kreg="d0"/>
      <arg name="reason" type="int" m68kreg="d1"/>
      <arg name="revtime" type="ASN1_TIME *" m68kreg="a2"/>
      <arg name="thisupd" type="ASN1_TIME *" m68kreg="a3"/>
      <arg name="nextupd" type="ASN1_TIME *" m68kreg="d2"/>
    </method>
    <method name="OCSP_basic_add1_cert" result="int">
      <arg name="resp" type="OCSP_BASICRESP *" m68kreg="a0"/>
      <arg name="cert" type="X509 *" m68kreg="a1"/>
    </method>
    <method name="OCSP_basic_sign" result="int">
      <arg name="brsp" type="OCSP_BASICRESP *" m68kreg="a0"/>
      <arg name="signer" type="X509 *" m68kreg="a1"/>
      <arg name="key" type="EVP_PKEY *" m68kreg="a2"/>
      <arg name="dgst" type="const EVP_MD *" m68kreg="a3"/>
      <arg name="certs" type="STACK_OF(X509) *" m68kreg="d0"/>
      <arg name="flags" type="unsigned long" m68kreg="d1"/>
    </method>
    <method name="ASN1_STRING_encode" result="ASN1_STRING *" status="unimplemented">
      <arg name="s" type="ASN1_STRING *" m68kreg="a0"/>
      <arg name="i2d" type="int (*)(void)" m68kreg="a1"/>
      <arg name="data" type="char *" m68kreg="a2"/>
      <arg name="sk" type="STACK_OF(ASN1_OT) *" m68kreg="a3"/>
    </method>
    <method name="OCSP_crlID_new" result="X509_EXTENSION *">
      <arg name="url" type="const char *" m68kreg="a0"/>
      <arg name="n" type="long *" m68kreg="a1"/>
      <arg name="tim" type="char *" m68kreg="a2"/>
    </method>
    <method name="OCSP_accept_responses_new" result="X509_EXTENSION *">
      <arg name="oids" type="char **" m68kreg="a0"/>
    </method>
    <method name="OCSP_archive_cutoff_new" result="X509_EXTENSION *">
      <arg name="tim" type="char *" m68kreg="a0"/>
    </method>
    <method name="OCSP_url_svcloc_new" result="X509_EXTENSION *">
      <arg name="issuer" type="X509_NAME *" m68kreg="a0"/>
      <arg name="urls" type="const char **" m68kreg="a1"/>
    </method>
    <method name="OCSP_REQUEST_get_ext_count" result="int">
      <arg name="x" type="OCSP_REQUEST *" m68kreg="a0"/>
    </method>
    <method name="OCSP_REQUEST_get_ext_by_NID" result="int">
      <arg name="x" type="OCSP_REQUEST *" m68kreg="a0"/>
      <arg name="nid" type="int" m68kreg="d0"/>
      <arg name="lastpos" type="int" m68kreg="d1"/>
    </method>
    <method name="OCSP_REQUEST_get_ext_by_OBJ" result="int">
      <arg name="x" type="OCSP_REQUEST *" m68kreg="a0"/>
      <arg name="obj" type="const ASN1_OBJECT *" m68kreg="a1"/>
      <arg name="lastpos" type="int" m68kreg="d0"/>
    </method>
    <method name="OCSP_REQUEST_get_ext_by_critical" result="int">
      <arg name="x" type="OCSP_REQUEST *" m68kreg="a0"/>
      <arg name="crit" type="int" m68kreg="d0"/>
      <arg name="lastpos" type="int" m68kreg="d1"/>
    </method>
    <method name="OCSP_REQUEST_get_ext" result="X509_EXTENSION *">
      <arg name="x" type="OCSP_REQUEST *" m68kreg="a0"/>
      <arg name="loc" type="int" m68kreg="d0"/>
    </method>
    <method name="OCSP_REQUEST_delete_ext" result="X509_EXTENSION *">
      <arg name="x" type="OCSP_REQUEST *" m68kreg="a0"/>
      <arg name="loc" type="int" m68kreg="d0"/>
    </method>
    <method name="OCSP_REQUEST_get1_ext_d2i" result="void *">
      <arg name="x" type="OCSP_REQUEST *" m68kreg="a0"/>
      <arg name="nid" type="int" m68kreg="d0"/>
      <arg name="crit" type="int *" m68kreg="a1"/>
      <arg name="idx" type="int *" m68kreg="a2"/>
    </method>
    <method name="OCSP_REQUEST_add1_ext_i2d" result="int">
      <arg name="x" type="OCSP_REQUEST *" m68kreg="a0"/>
      <arg name="nid" type="int" m68kreg="d0"/>
      <arg name="value" type="void *" m68kreg="a1"/>
      <arg name="crit" type="int" m68kreg="d1"/>
      <arg name="flags" type="unsigned long" m68kreg="d2"/>
    </method>
    <method name="OCSP_REQUEST_add_ext" result="int">
      <arg name="x" type="OCSP_REQUEST *" m68kreg="a0"/>
      <arg name="ex" type="X509_EXTENSION *" m68kreg="a1"/>
      <arg name="loc" type="int" m68kreg="d0"/>
    </method>
    <method name="OCSP_ONEREQ_get_ext_count" result="int">
      <arg name="x" type="OCSP_ONEREQ *" m68kreg="a0"/>
    </method>
    <method name="OCSP_ONEREQ_get_ext_by_NID" result="int">
      <arg name="x" type="OCSP_ONEREQ *" m68kreg="a0"/>
      <arg name="nid" type="int" m68kreg="d0"/>
      <arg name="lastpos" type="int" m68kreg="d1"/>
    </method>
    <method name="OCSP_ONEREQ_get_ext_by_OBJ" result="int">
      <arg name="x" type="OCSP_ONEREQ *" m68kreg="a0"/>
      <arg name="obj" type="const ASN1_OBJECT *" m68kreg="a1"/>
      <arg name="lastpos" type="int" m68kreg="d0"/>
    </method>
    <method name="OCSP_ONEREQ_get_ext_by_critical" result="int">
      <arg name="x" type="OCSP_ONEREQ *" m68kreg="a0"/>
      <arg name="crit" type="int" m68kreg="d0"/>
      <arg name="lastpos" type="int" m68kreg="d1"/>
    </method>
    <method name="OCSP_ONEREQ_get_ext" result="X509_EXTENSION *">
      <arg name="x" type="OCSP_ONEREQ *" m68kreg="a0"/>
      <arg name="loc" type="int" m68kreg="d0"/>
    </method>
    <method name="OCSP_ONEREQ_delete_ext" result="X509_EXTENSION *">
      <arg name="x" type="OCSP_ONEREQ *" m68kreg="a0"/>
      <arg name="loc" type="int" m68kreg="d0"/>
    </method>
    <method name="OCSP_ONEREQ_get1_ext_d2i" result="void *">
      <arg name="x" type="OCSP_ONEREQ *" m68kreg="a0"/>
      <arg name="nid" type="int" m68kreg="d0"/>
      <arg name="crit" type="int *" m68kreg="a1"/>
      <arg name="idx" type="int *" m68kreg="a2"/>
    </method>
    <method name="OCSP_ONEREQ_add1_ext_i2d" result="int">
      <arg name="x" type="OCSP_ONEREQ *" m68kreg="a0"/>
      <arg name="nid" type="int" m68kreg="d0"/>
      <arg name="value" type="void *" m68kreg="a1"/>
      <arg name="crit" type="int" m68kreg="d1"/>
      <arg name="flags" type="unsigned long" m68kreg="d2"/>
    </method>
    <method name="OCSP_ONEREQ_add_ext" result="int">
      <arg name="x" type="OCSP_ONEREQ *" m68kreg="a0"/>
      <arg name="ex" type="X509_EXTENSION *" m68kreg="a1"/>
      <arg name="loc" type="int" m68kreg="d0"/>
    </method>
    <method name="OCSP_BASICRESP_get_ext_count" result="int">
      <arg name="x" type="OCSP_BASICRESP *" m68kreg="a0"/>
    </method>
    <method name="OCSP_BASICRESP_get_ext_by_NID" result="int">
      <arg name="x" type="OCSP_BASICRESP *" m68kreg="a0"/>
      <arg name="nid" type="int" m68kreg="d0"/>
      <arg name="lastpos" type="int" m68kreg="d1"/>
    </method>
    <method name="OCSP_BASICRESP_get_ext_by_OBJ" result="int">
      <arg name="x" type="OCSP_BASICRESP *" m68kreg="a0"/>
      <arg name="obj" type="const ASN1_OBJECT *" m68kreg="a1"/>
      <arg name="lastpos" type="int" m68kreg="d0"/>
    </method>
    <method name="OCSP_BASICRESP_get_ext_by_critical" result="int">
      <arg name="x" type="OCSP_BASICRESP *" m68kreg="a0"/>
      <arg name="crit" type="int" m68kreg="d0"/>
      <arg name="lastpos" type="int" m68kreg="d1"/>
    </method>
    <method name="OCSP_BASICRESP_get_ext" result="X509_EXTENSION *">
      <arg name="x" type="OCSP_BASICRESP *" m68kreg="a0"/>
      <arg name="loc" type="int" m68kreg="d0"/>
    </method>
    <method name="OCSP_BASICRESP_delete_ext" result="X509_EXTENSION *">
      <arg name="x" type="OCSP_BASICRESP *" m68kreg="a0"/>
      <arg name="loc" type="int" m68kreg="d0"/>
    </method>
    <method name="OCSP_BASICRESP_get1_ext_d2i" result="void *">
      <arg name="x" type="OCSP_BASICRESP *" m68kreg="a0"/>
      <arg name="nid" type="int" m68kreg="d0"/>
      <arg name="crit" type="int *" m68kreg="a1"/>
      <arg name="idx" type="int *" m68kreg="a2"/>
    </method>
    <method name="OCSP_BASICRESP_add1_ext_i2d" result="int">
      <arg name="x" type="OCSP_BASICRESP *" m68kreg="a0"/>
      <arg name="nid" type="int" m68kreg="d0"/>
      <arg name="value" type="void *" m68kreg="a1"/>
      <arg name="crit" type="int" m68kreg="d1"/>
      <arg name="flags" type="unsigned long" m68kreg="d2"/>
    </method>
    <method name="OCSP_BASICRESP_add_ext" result="int">
      <arg name="x" type="OCSP_BASICRESP *" m68kreg="a0"/>
      <arg name="ex" type="X509_EXTENSION *" m68kreg="a1"/>
      <arg name="loc" type="int" m68kreg="d0"/>
    </method>
    <method name="OCSP_SINGLERESP_get_ext_count" result="int">
      <arg name="x" type="OCSP_SINGLERESP *" m68kreg="a0"/>
    </method>
    <method name="OCSP_SINGLERESP_get_ext_by_NID" result="int">
      <arg name="x" type="OCSP_SINGLERESP *" m68kreg="a0"/>
      <arg name="nid" type="int" m68kreg="d0"/>
      <arg name="lastpos" type="int" m68kreg="d1"/>
    </method>
    <method name="OCSP_SINGLERESP_get_ext_by_OBJ" result="int">
      <arg name="x" type="OCSP_SINGLERESP *" m68kreg="a0"/>
      <arg name="obj" type="const ASN1_OBJECT *" m68kreg="a1"/>
      <arg name="lastpos" type="int" m68kreg="d0"/>
    </method>
    <method name="OCSP_SINGLERESP_get_ext_by_critical" result="int">
      <arg name="x" type="OCSP_SINGLERESP *" m68kreg="a0"/>
      <arg name="crit" type="int" m68kreg="d0"/>
      <arg name="lastpos" type="int" m68kreg="d1"/>
    </method>
    <method name="OCSP_SINGLERESP_get_ext" result="X509_EXTENSION *">
      <arg name="x" type="OCSP_SINGLERESP *" m68kreg="a0"/>
      <arg name="loc" type="int" m68kreg="d0"/>
    </method>
    <method name="OCSP_SINGLERESP_delete_ext" result="X509_EXTENSION *">
      <arg name="x" type="OCSP_SINGLERESP *" m68kreg="a0"/>
      <arg name="loc" type="int" m68kreg="d0"/>
    </method>
    <method name="OCSP_SINGLERESP_get1_ext_d2i" result="void *">
      <arg name="x" type="OCSP_SINGLERESP *" m68kreg="a0"/>
      <arg name="nid" type="int" m68kreg="d0"/>
      <arg name="crit" type="int *" m68kreg="a1"/>
      <arg name="idx" type="int *" m68kreg="a2"/>
    </method>
    <method name="OCSP_SINGLERESP_add1_ext_i2d" result="int">
      <arg name="x" type="OCSP_SINGLERESP *" m68kreg="a0"/>
      <arg name="nid" type="int" m68kreg="d0"/>
      <arg name="value" type="void *" m68kreg="a1"/>
      <arg name="crit" type="int" m68kreg="d1"/>
      <arg name="flags" type="unsigned long" m68kreg="d2"/>
    </method>
    <method name="OCSP_SINGLERESP_add_ext" result="int">
      <arg name="x" type="OCSP_SINGLERESP *" m68kreg="a0"/>
      <arg name="ex" type="X509_EXTENSION *" m68kreg="a1"/>
      <arg name="loc" type="int" m68kreg="d0"/>
    </method>
    <method name="OCSP_SINGLERESP_new" result="OCSP_SINGLERESP *">
    </method>
    <method name="OCSP_SINGLERESP_free" result="void">
      <arg name="a" type="OCSP_SINGLERESP *" m68kreg="a0"/>
    </method>
    <method name="d2i_OCSP_SINGLERESP" result="OCSP_SINGLERESP *">
      <arg name="a" type="OCSP_SINGLERESP **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_OCSP_SINGLERESP" result="int">
      <arg name="a" type="OCSP_SINGLERESP *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="OCSP_SINGLERESP_it" result="const ASN1_ITEM *">
    </method>
    <method name="OCSP_CERTSTATUS_new" result="OCSP_CERTSTATUS *">
    </method>
    <method name="OCSP_CERTSTATUS_free" result="void">
      <arg name="a" type="OCSP_CERTSTATUS *" m68kreg="a0"/>
    </method>
    <method name="d2i_OCSP_CERTSTATUS" result="OCSP_CERTSTATUS *">
      <arg name="a" type="OCSP_CERTSTATUS **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_OCSP_CERTSTATUS" result="int">
      <arg name="a" type="OCSP_CERTSTATUS *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="OCSP_CERTSTATUS_it" result="const ASN1_ITEM *">
    </method>
    <method name="OCSP_REVOKEDINFO_new" result="OCSP_REVOKEDINFO *">
    </method>
    <method name="OCSP_REVOKEDINFO_free" result="void">
      <arg name="a" type="OCSP_REVOKEDINFO *" m68kreg="a0"/>
    </method>
    <method name="d2i_OCSP_REVOKEDINFO" result="OCSP_REVOKEDINFO *">
      <arg name="a" type="OCSP_REVOKEDINFO **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_OCSP_REVOKEDINFO" result="int">
      <arg name="a" type="OCSP_REVOKEDINFO *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="OCSP_REVOKEDINFO_it" result="const ASN1_ITEM *">
    </method>
    <method name="OCSP_BASICRESP_new" result="OCSP_BASICRESP *">
    </method>
    <method name="OCSP_BASICRESP_free" result="void">
      <arg name="a" type="OCSP_BASICRESP *" m68kreg="a0"/>
    </method>
    <method name="d2i_OCSP_BASICRESP" result="OCSP_BASICRESP *">
      <arg name="a" type="OCSP_BASICRESP **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_OCSP_BASICRESP" result="int">
      <arg name="a" type="OCSP_BASICRESP *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="OCSP_BASICRESP_it" result="const ASN1_ITEM *">
    </method>
    <method name="OCSP_RESPDATA_new" result="OCSP_RESPDATA *">
    </method>
    <method name="OCSP_RESPDATA_free" result="void">
      <arg name="a" type="OCSP_RESPDATA *" m68kreg="a0"/>
    </method>
    <method name="d2i_OCSP_RESPDATA" result="OCSP_RESPDATA *">
      <arg name="a" type="OCSP_RESPDATA **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_OCSP_RESPDATA" result="int">
      <arg name="a" type="OCSP_RESPDATA *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="OCSP_RESPDATA_it" result="const ASN1_ITEM *">
    </method>
    <method name="OCSP_RESPID_new" result="OCSP_RESPID *">
    </method>
    <method name="OCSP_RESPID_free" result="void">
      <arg name="a" type="OCSP_RESPID *" m68kreg="a0"/>
    </method>
    <method name="d2i_OCSP_RESPID" result="OCSP_RESPID *">
      <arg name="a" type="OCSP_RESPID **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_OCSP_RESPID" result="int">
      <arg name="a" type="OCSP_RESPID *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="OCSP_RESPID_it" result="const ASN1_ITEM *">
    </method>
    <method name="OCSP_RESPONSE_new" result="OCSP_RESPONSE *">
    </method>
    <method name="OCSP_RESPONSE_free" result="void">
      <arg name="a" type="OCSP_RESPONSE *" m68kreg="a0"/>
    </method>
    <method name="d2i_OCSP_RESPONSE" result="OCSP_RESPONSE *">
      <arg name="a" type="OCSP_RESPONSE **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_OCSP_RESPONSE" result="int">
      <arg name="a" type="OCSP_RESPONSE *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="OCSP_RESPONSE_it" result="const ASN1_ITEM *">
    </method>
    <method name="OCSP_RESPBYTES_new" result="OCSP_RESPBYTES *">
    </method>
    <method name="OCSP_RESPBYTES_free" result="void">
      <arg name="a" type="OCSP_RESPBYTES *" m68kreg="a0"/>
    </method>
    <method name="d2i_OCSP_RESPBYTES" result="OCSP_RESPBYTES *">
      <arg name="a" type="OCSP_RESPBYTES **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_OCSP_RESPBYTES" result="int">
      <arg name="a" type="OCSP_RESPBYTES *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="OCSP_RESPBYTES_it" result="const ASN1_ITEM *">
    </method>
    <method name="OCSP_ONEREQ_new" result="OCSP_ONEREQ *">
    </method>
    <method name="OCSP_ONEREQ_free" result="void">
      <arg name="a" type="OCSP_ONEREQ *" m68kreg="a0"/>
    </method>
    <method name="d2i_OCSP_ONEREQ" result="OCSP_ONEREQ *">
      <arg name="a" type="OCSP_ONEREQ **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_OCSP_ONEREQ" result="int">
      <arg name="a" type="OCSP_ONEREQ *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="OCSP_ONEREQ_it" result="const ASN1_ITEM *">
    </method>
    <method name="OCSP_CERTID_new" result="OCSP_CERTID *">
    </method>
    <method name="OCSP_CERTID_free" result="void">
      <arg name="a" type="OCSP_CERTID *" m68kreg="a0"/>
    </method>
    <method name="d2i_OCSP_CERTID" result="OCSP_CERTID *">
      <arg name="a" type="OCSP_CERTID **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_OCSP_CERTID" result="int">
      <arg name="a" type="OCSP_CERTID *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="OCSP_CERTID_it" result="const ASN1_ITEM *">
    </method>
    <method name="OCSP_REQUEST_new" result="OCSP_REQUEST *">
    </method>
    <method name="OCSP_REQUEST_free" result="void">
      <arg name="a" type="OCSP_REQUEST *" m68kreg="a0"/>
    </method>
    <method name="d2i_OCSP_REQUEST" result="OCSP_REQUEST *">
      <arg name="a" type="OCSP_REQUEST **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_OCSP_REQUEST" result="int">
      <arg name="a" type="OCSP_REQUEST *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="OCSP_REQUEST_it" result="const ASN1_ITEM *">
    </method>
    <method name="OCSP_SIGNATURE_new" result="OCSP_SIGNATURE *">
    </method>
    <method name="OCSP_SIGNATURE_free" result="void">
      <arg name="a" type="OCSP_SIGNATURE *" m68kreg="a0"/>
    </method>
    <method name="d2i_OCSP_SIGNATURE" result="OCSP_SIGNATURE *">
      <arg name="a" type="OCSP_SIGNATURE **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_OCSP_SIGNATURE" result="int">
      <arg name="a" type="OCSP_SIGNATURE *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="OCSP_SIGNATURE_it" result="const ASN1_ITEM *">
    </method>
    <method name="OCSP_REQINFO_new" result="OCSP_REQINFO *">
    </method>
    <method name="OCSP_REQINFO_free" result="void">
      <arg name="a" type="OCSP_REQINFO *" m68kreg="a0"/>
    </method>
    <method name="d2i_OCSP_REQINFO" result="OCSP_REQINFO *">
      <arg name="a" type="OCSP_REQINFO **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_OCSP_REQINFO" result="int">
      <arg name="a" type="OCSP_REQINFO *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="OCSP_REQINFO_it" result="const ASN1_ITEM *">
    </method>
    <method name="OCSP_CRLID_new" result="OCSP_CRLID *">
    </method>
    <method name="OCSP_CRLID_free" result="void">
      <arg name="a" type="OCSP_CRLID *" m68kreg="a0"/>
    </method>
    <method name="d2i_OCSP_CRLID" result="OCSP_CRLID *">
      <arg name="a" type="OCSP_CRLID **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_OCSP_CRLID" result="int">
      <arg name="a" type="OCSP_CRLID *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="OCSP_CRLID_it" result="const ASN1_ITEM *">
    </method>
    <method name="OCSP_SERVICELOC_new" result="OCSP_SERVICELOC *">
    </method>
    <method name="OCSP_SERVICELOC_free" result="void">
      <arg name="a" type="OCSP_SERVICELOC *" m68kreg="a0"/>
    </method>
    <method name="d2i_OCSP_SERVICELOC" result="OCSP_SERVICELOC *">
      <arg name="a" type="OCSP_SERVICELOC **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_OCSP_SERVICELOC" result="int">
      <arg name="a" type="OCSP_SERVICELOC *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="OCSP_SERVICELOC_it" result="const ASN1_ITEM *">
    </method>
    <method name="OCSP_response_status_str" result="const char *">
      <arg name="s" type="long" m68kreg="d0"/>
    </method>
    <method name="OCSP_cert_status_str" result="const char *">
      <arg name="s" type="long" m68kreg="d0"/>
    </method>
    <method name="OCSP_crl_reason_str" result="const char *">
      <arg name="s" type="long" m68kreg="d0"/>
    </method>
    <method name="OCSP_REQUEST_print" result="int">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="a" type="OCSP_REQUEST *" m68kreg="a1"/>
      <arg name="flags" type="unsigned long" m68kreg="d0"/>
    </method>
    <method name="OCSP_RESPONSE_print" result="int">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="o" type="OCSP_RESPONSE *" m68kreg="a1"/>
      <arg name="flags" type="unsigned long" m68kreg="d0"/>
    </method>
    <method name="OCSP_basic_verify" result="int">
      <arg name="bs" type="OCSP_BASICRESP *" m68kreg="a0"/>
      <arg name="certs" type="STACK_OF(X509) *" m68kreg="a1"/>
      <arg name="st" type="X509_STORE *" m68kreg="a2"/>
      <arg name="flags" type="unsigned long" m68kreg="d0"/>
    </method>
    <method name="ERR_load_OCSP_strings" result="int">
    </method>
    <method name="PEM_get_EVP_CIPHER_INFO" result="int">
      <arg name="header" type="char *" m68kreg="a0"/>
      <arg name="cipher" type="EVP_CIPHER_INFO *" m68kreg="a1"/>
    </method>
    <method name="PEM_do_header" result="int">
      <arg name="cipher" type="EVP_CIPHER_INFO *" m68kreg="a0"/>
      <arg name="data" type="unsigned char *" m68kreg="a1"/>
      <arg name="len" type="long *" m68kreg="a2"/>
      <arg name="callback" type="pem_password_cb *" m68kreg="a3"/>
      <arg name="u" type="void *" m68kreg="d0"/>
    </method>
    <method name="PEM_read_bio" result="int">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="name" type="char **" m68kreg="a1"/>
      <arg name="header" type="char **" m68kreg="a2"/>
      <arg name="data" type="unsigned char **" m68kreg="a3"/>
      <arg name="len" type="long *" m68kreg="d0"/>
    </method>
    <method name="PEM_write_bio" result="int">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="name" type="const char *" m68kreg="a1"/>
      <arg name="hdr" type="const char *" m68kreg="a2"/>
      <arg name="data" type="const unsigned char *" m68kreg="a3"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="PEM_bytes_read_bio" result="int">
      <arg name="pdata" type="unsigned char **" m68kreg="a0"/>
      <arg name="plen" type="long *" m68kreg="a1"/>
      <arg name="pnm" type="char **" m68kreg="a2"/>
      <arg name="name" type="const char *" m68kreg="a3"/>
      <arg name="bp" type="BIO *" m68kreg="d0"/>
      <arg name="cb" type="pem_password_cb *" m68kreg="d1"/>
      <arg name="u" type="void *" m68kreg="d2"/>
    </method>
    <method name="PEM_ASN1_read_bio" result="void *">
      <arg name="d2i" type="d2i_of_void *" m68kreg="a0"/>
      <arg name="name" type="const char *" m68kreg="a1"/>
      <arg name="bp" type="BIO *" m68kreg="a2"/>
      <arg name="x" type="void **" m68kreg="a3"/>
      <arg name="cb" type="pem_password_cb *" m68kreg="d0"/>
      <arg name="u" type="void *" m68kreg="d1"/>
    </method>
    <method name="PEM_ASN1_write_bio" result="int">
      <arg name="i2d" type="i2d_of_void *" m68kreg="a0"/>
      <arg name="name" type="const char *" m68kreg="a1"/>
      <arg name="bp" type="BIO *" m68kreg="a2"/>
      <arg name="x" type="char *" m68kreg="a3"/>
      <arg name="enc" type="const EVP_CIPHER *" m68kreg="d0"/>
      <arg name="kstr" type="unsigned char *" m68kreg="d1"/>
      <arg name="klen" type="int" m68kreg="d2"/>
      <arg name="cb" type="pem_password_cb *" m68kreg="d3"/>
      <arg name="u" type="void *" m68kreg="d4"/>
    </method>
    <method name="PEM_X509_INFO_read_bio" result="STACK_OF(X509_INFO) *">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="sk" type="STACK_OF(X509_INFO) *" m68kreg="a1"/>
      <arg name="cb" type="pem_password_cb *" m68kreg="a2"/>
      <arg name="u" type="void *" m68kreg="a3"/>
    </method>
    <method name="PEM_X509_INFO_write_bio" result="int">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="xi" type="X509_INFO *" m68kreg="a1"/>
      <arg name="enc" type="EVP_CIPHER *" m68kreg="a2"/>
      <arg name="kstr" type="unsigned char *" m68kreg="a3"/>
      <arg name="klen" type="int" m68kreg="d0"/>
      <arg name="cd" type="pem_password_cb *" m68kreg="d1"/>
      <arg name="u" type="void *" m68kreg="d2"/>
    </method>
    <method name="PEM_SealInit" result="int" status="unimplemented">
      <arg name="ctx" type="PEM_ENCODE_SEAL_CTX *" m68kreg="a0"/>
      <arg name="type" type="EVP_CIPHER *" m68kreg="a1"/>
      <arg name="md_type" type="EVP_MD *" m68kreg="a2"/>
      <arg name="ek" type="unsigned char **" m68kreg="a3"/>
      <arg name="ekl" type="int *" m68kreg="d0"/>
      <arg name="iv" type="unsigned char *" m68kreg="d1"/>
      <arg name="pubk" type="EVP_PKEY **" m68kreg="d2"/>
      <arg name="npubk" type="int" m68kreg="d3"/>
    </method>
    <method name="PEM_SealUpdate" result="void" status="unimplemented">
      <arg name="ctx" type="PEM_ENCODE_SEAL_CTX *" m68kreg="a0"/>
      <arg name="out" type="unsigned char *" m68kreg="a1"/>
      <arg name="outl" type="int *" m68kreg="a2"/>
      <arg name="in" type="unsigned char *" m68kreg="a3"/>
      <arg name="inl" type="int" m68kreg="d0"/>
    </method>
    <method name="PEM_SealFinal" result="int" status="unimplemented">
      <arg name="ctx" type="PEM_ENCODE_SEAL_CTX *" m68kreg="a0"/>
      <arg name="sig" type="unsigned char *" m68kreg="a1"/>
      <arg name="sigl" type="int *" m68kreg="a2"/>
      <arg name="out" type="unsigned char *" m68kreg="a3"/>
      <arg name="outl" type="int *" m68kreg="d0"/>
      <arg name="priv" type="EVP_PKEY *" m68kreg="d1"/>
    </method>
    <method name="PEM_SignInit" result="int">
      <arg name="ctx" type="EVP_MD_CTX *" m68kreg="a0"/>
      <arg name="type" type="EVP_MD *" m68kreg="a1"/>
    </method>
    <method name="PEM_SignUpdate" result="int">
      <arg name="ctx" type="EVP_MD_CTX *" m68kreg="a0"/>
      <arg name="d" type="unsigned char *" m68kreg="a1"/>
      <arg name="cnt" type="unsigned int" m68kreg="d0"/>
    </method>
    <method name="PEM_SignFinal" result="int">
      <arg name="ctx" type="EVP_MD_CTX *" m68kreg="a0"/>
      <arg name="sigret" type="unsigned char *" m68kreg="a1"/>
      <arg name="siglen" type="unsigned int *" m68kreg="a2"/>
      <arg name="pkey" type="EVP_PKEY *" m68kreg="a3"/>
    </method>
    <method name="PEM_def_callback" result="int">
      <arg name="buf" type="char *" m68kreg="a0"/>
      <arg name="num" type="int" m68kreg="d0"/>
      <arg name="w" type="int" m68kreg="d1"/>
      <arg name="key" type="void *" m68kreg="a1"/>
    </method>
    <method name="PEM_proc_type" result="void">
      <arg name="buf" type="char *" m68kreg="a0"/>
      <arg name="type" type="int" m68kreg="d0"/>
    </method>
    <method name="PEM_dek_info" result="void">
      <arg name="buf" type="char *" m68kreg="a0"/>
      <arg name="type" type="const char *" m68kreg="a1"/>
      <arg name="len" type="int" m68kreg="d0"/>
      <arg name="str" type="char *" m68kreg="a2"/>
    </method>
    <method name="PEM_read_bio_X509" result="X509 *">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="x" type="X509 **" m68kreg="a1"/>
      <arg name="cb" type="pem_password_cb *" m68kreg="a2"/>
      <arg name="u" type="void *" m68kreg="a3"/>
    </method>
    <method name="PEM_write_bio_X509" result="int">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="x" type="X509 *" m68kreg="a1"/>
    </method>
    <method name="PEM_read_bio_X509_AUX" result="X509 *">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="x" type="X509 **" m68kreg="a1"/>
      <arg name="cb" type="pem_password_cb *" m68kreg="a2"/>
      <arg name="u" type="void *" m68kreg="a3"/>
    </method>
    <method name="PEM_write_bio_X509_AUX" result="int">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="x" type="X509 *" m68kreg="a1"/>
    </method>
    <method name="PEM_read_bio_X509_REQ" result="X509_REQ *">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="x" type="X509_REQ **" m68kreg="a1"/>
      <arg name="cb" type="pem_password_cb *" m68kreg="a2"/>
      <arg name="u" type="void *" m68kreg="a3"/>
    </method>
    <method name="PEM_write_bio_X509_REQ" result="int">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="x" type="X509_REQ *" m68kreg="a1"/>
    </method>
    <method name="PEM_write_bio_X509_REQ_NEW" result="int">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="x" type="X509_REQ *" m68kreg="a1"/>
    </method>
    <method name="PEM_read_bio_X509_CRL" result="X509_CRL *">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="x" type="X509_CRL **" m68kreg="a1"/>
      <arg name="cb" type="pem_password_cb *" m68kreg="a2"/>
      <arg name="u" type="void *" m68kreg="a3"/>
    </method>
    <method name="PEM_write_bio_X509_CRL" result="int">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="x" type="X509_CRL *" m68kreg="a1"/>
    </method>
    <method name="PEM_read_bio_PKCS7" result="PKCS7 *">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="x" type="PKCS7 **" m68kreg="a1"/>
      <arg name="cb" type="pem_password_cb *" m68kreg="a2"/>
      <arg name="u" type="void *" m68kreg="a3"/>
    </method>
    <method name="PEM_write_bio_PKCS7" result="int">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="x" type="PKCS7 *" m68kreg="a1"/>
    </method>
    <method name="PEM_read_bio_NETSCAPE_CERT_SEQUENCE" result="NETSCAPE_CERT_SEQUENCE *">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="x" type="NETSCAPE_CERT_SEQUENCE **" m68kreg="a1"/>
      <arg name="cb" type="pem_password_cb *" m68kreg="a2"/>
      <arg name="u" type="void *" m68kreg="a3"/>
    </method>
    <method name="PEM_write_bio_NETSCAPE_CERT_SEQUENCE" result="int">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="x" type="NETSCAPE_CERT_SEQUENCE *" m68kreg="a1"/>
    </method>
    <method name="PEM_read_bio_PKCS8" result="X509_SIG *">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="x" type="X509_SIG **" m68kreg="a1"/>
      <arg name="cb" type="pem_password_cb *" m68kreg="a2"/>
      <arg name="u" type="void *" m68kreg="a3"/>
    </method>
    <method name="PEM_write_bio_PKCS8" result="int">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="x" type="X509_SIG *" m68kreg="a1"/>
    </method>
    <method name="PEM_read_bio_PKCS8_PRIV_KEY_INFO" result="PKCS8_PRIV_KEY_INFO *">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="x" type="PKCS8_PRIV_KEY_INFO **" m68kreg="a1"/>
      <arg name="cb" type="pem_password_cb *" m68kreg="a2"/>
      <arg name="u" type="void *" m68kreg="a3"/>
    </method>
    <method name="PEM_write_bio_PKCS8_PRIV_KEY_INFO" result="int">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="x" type="PKCS8_PRIV_KEY_INFO *" m68kreg="a1"/>
    </method>
    <method name="PEM_read_bio_RSAPrivateKey" result="RSA *">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="x" type="RSA **" m68kreg="a1"/>
      <arg name="cb" type="pem_password_cb *" m68kreg="a2"/>
      <arg name="u" type="void *" m68kreg="a3"/>
    </method>
    <method name="PEM_write_bio_RSAPrivateKey" result="int">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="x" type="RSA *" m68kreg="a1"/>
      <arg name="enc" type="const EVP_CIPHER *" m68kreg="a2"/>
      <arg name="kstr" type="unsigned char *" m68kreg="a3"/>
      <arg name="klen" type="int" m68kreg="d0"/>
      <arg name="cb" type="pem_password_cb *" m68kreg="d1"/>
      <arg name="u" type="void *" m68kreg="d2"/>
    </method>
    <method name="PEM_read_bio_RSAPublicKey" result="RSA *">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="x" type="RSA **" m68kreg="a1"/>
      <arg name="cb" type="pem_password_cb *" m68kreg="a2"/>
      <arg name="u" type="void *" m68kreg="a3"/>
    </method>
    <method name="PEM_write_bio_RSAPublicKey" result="int">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="x" type="RSA *" m68kreg="a1"/>
    </method>
    <method name="PEM_read_bio_RSA_PUBKEY" result="RSA *">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="x" type="RSA **" m68kreg="a1"/>
      <arg name="cb" type="pem_password_cb *" m68kreg="a2"/>
      <arg name="u" type="void *" m68kreg="a3"/>
    </method>
    <method name="PEM_write_bio_RSA_PUBKEY" result="int">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="x" type="RSA *" m68kreg="a1"/>
    </method>
    <method name="PEM_read_bio_DSAPrivateKey" result="DSA *">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="x" type="DSA **" m68kreg="a1"/>
      <arg name="cb" type="pem_password_cb *" m68kreg="a2"/>
      <arg name="u" type="void *" m68kreg="a3"/>
    </method>
    <method name="PEM_write_bio_DSAPrivateKey" result="int">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="x" type="DSA *" m68kreg="a1"/>
      <arg name="enc" type="const EVP_CIPHER *" m68kreg="a2"/>
      <arg name="kstr" type="unsigned char *" m68kreg="a3"/>
      <arg name="klen" type="int" m68kreg="d0"/>
      <arg name="cb" type="pem_password_cb *" m68kreg="d1"/>
      <arg name="u" type="void *" m68kreg="d2"/>
    </method>
    <method name="PEM_read_bio_DSA_PUBKEY" result="DSA *">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="x" type="DSA **" m68kreg="a1"/>
      <arg name="cb" type="pem_password_cb *" m68kreg="a2"/>
      <arg name="u" type="void *" m68kreg="a3"/>
    </method>
    <method name="PEM_write_bio_DSA_PUBKEY" result="int">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="x" type="DSA *" m68kreg="a1"/>
    </method>
    <method name="PEM_read_bio_DSAparams" result="DSA *">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="x" type="DSA **" m68kreg="a1"/>
      <arg name="cb" type="pem_password_cb *" m68kreg="a2"/>
      <arg name="u" type="void *" m68kreg="a3"/>
    </method>
    <method name="PEM_write_bio_DSAparams" result="int">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="x" type="DSA *" m68kreg="a1"/>
    </method>
    <method name="PEM_read_bio_DHparams" result="DH *">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="x" type="DH **" m68kreg="a1"/>
      <arg name="cb" type="pem_password_cb *" m68kreg="a2"/>
      <arg name="u" type="void *" m68kreg="a3"/>
    </method>
    <method name="PEM_write_bio_DHparams" result="int">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="x" type="DH *" m68kreg="a1"/>
    </method>
    <method name="PEM_read_bio_PrivateKey" result="EVP_PKEY *">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="x" type="EVP_PKEY **" m68kreg="a1"/>
      <arg name="cb" type="pem_password_cb *" m68kreg="a2"/>
      <arg name="u" type="void *" m68kreg="a3"/>
    </method>
    <method name="PEM_write_bio_PrivateKey" result="int">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="x" type="EVP_PKEY *" m68kreg="a1"/>
      <arg name="enc" type="const EVP_CIPHER *" m68kreg="a2"/>
      <arg name="kstr" type="unsigned char *" m68kreg="a3"/>
      <arg name="klen" type="int" m68kreg="d0"/>
      <arg name="cb" type="pem_password_cb *" m68kreg="d1"/>
      <arg name="u" type="void *" m68kreg="d2"/>
    </method>
    <method name="PEM_read_bio_PUBKEY" result="EVP_PKEY *">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="x" type="EVP_PKEY **" m68kreg="a1"/>
      <arg name="cb" type="pem_password_cb *" m68kreg="a2"/>
      <arg name="u" type="void *" m68kreg="a3"/>
    </method>
    <method name="PEM_write_bio_PUBKEY" result="int">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="x" type="EVP_PKEY *" m68kreg="a1"/>
    </method>
    <method name="PEM_write_bio_PKCS8PrivateKey_nid" result="int">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="x" type="EVP_PKEY *" m68kreg="a1"/>
      <arg name="nid" type="int" m68kreg="d0"/>
      <arg name="kstr" type="char *" m68kreg="a2"/>
      <arg name="klen" type="int" m68kreg="d1"/>
      <arg name="cb" type="pem_password_cb *" m68kreg="a3"/>
      <arg name="u" type="void *" m68kreg="d2"/>
    </method>
    <method name="PEM_write_bio_PKCS8PrivateKey" result="int">
      <arg name="a" type="BIO *" m68kreg="a0"/>
      <arg name="b" type="EVP_PKEY *" m68kreg="a1"/>
      <arg name="c" type="const EVP_CIPHER *" m68kreg="a2"/>
      <arg name="d" type="char *" m68kreg="a3"/>
      <arg name="a1" type="int" m68kreg="d0"/>
      <arg name="e" type="pem_password_cb *" m68kreg="d1"/>
      <arg name="f" type="void *" m68kreg="d2"/>
    </method>
    <method name="i2d_PKCS8PrivateKey_bio" result="int">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="x" type="EVP_PKEY *" m68kreg="a1"/>
      <arg name="enc" type="const EVP_CIPHER *" m68kreg="a2"/>
      <arg name="kstr" type="char *" m68kreg="a3"/>
      <arg name="klen" type="int" m68kreg="d0"/>
      <arg name="cb" type="pem_password_cb *" m68kreg="d1"/>
      <arg name="u" type="void *" m68kreg="d2"/>
    </method>
    <method name="i2d_PKCS8PrivateKey_nid_bio" result="int">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="x" type="EVP_PKEY *" m68kreg="a1"/>
      <arg name="nid" type="int" m68kreg="d0"/>
      <arg name="kstr" type="char *" m68kreg="a2"/>
      <arg name="klen" type="int" m68kreg="d1"/>
      <arg name="cb" type="pem_password_cb *" m68kreg="a3"/>
      <arg name="u" type="void *" m68kreg="d2"/>
    </method>
    <method name="d2i_PKCS8PrivateKey_bio" result="EVP_PKEY *">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="x" type="EVP_PKEY **" m68kreg="a1"/>
      <arg name="cb" type="pem_password_cb *" m68kreg="a2"/>
      <arg name="u" type="void *" m68kreg="a3"/>
    </method>
    <method name="ERR_load_PEM_strings" result="int">
    </method>
    <method name="PKCS12_x5092certbag" result="PKCS12_SAFEBAG *" status="unimplemented">
      <arg name="x509" type="X509 *" m68kreg="a0"/>
    </method>
    <method name="PKCS12_x509crl2certbag" result="PKCS12_SAFEBAG *" status="unimplemented">
      <arg name="crl" type="X509_CRL *" m68kreg="a0"/>
    </method>
    <method name="PKCS12_certbag2x509" result="X509 *" status="unimplemented">
      <arg name="bag" type="PKCS12_SAFEBAG *" m68kreg="a0"/>
    </method>
    <method name="PKCS12_certbag2x509crl" result="X509_CRL *" status="unimplemented">
      <arg name="bag" type="PKCS12_SAFEBAG *" m68kreg="a0"/>
    </method>
    <method name="PKCS12_item_pack_safebag" result="PKCS12_SAFEBAG *">
      <arg name="obj" type="void *" m68kreg="a0"/>
      <arg name="it" type="const ASN1_ITEM *" m68kreg="a1"/>
      <arg name="nid1" type="int" m68kreg="d0"/>
      <arg name="nid2" type="int" m68kreg="d1"/>
    </method>
    <method name="PKCS12_MAKE_KEYBAG" result="PKCS12_SAFEBAG *" status="unimplemented">
      <arg name="p8" type="PKCS8_PRIV_KEY_INFO *" m68kreg="a0"/>
    </method>
    <method name="PKCS8_decrypt" result="PKCS8_PRIV_KEY_INFO *">
      <arg name="p8" type="const X509_SIG *" m68kreg="a0"/>
      <arg name="pass" type="const char *" m68kreg="a1"/>
      <arg name="passlen" type="int" m68kreg="d0"/>
    </method>
    <method name="PKCS12_decrypt_skey" result="PKCS8_PRIV_KEY_INFO *">
      <arg name="bag" type="const PKCS12_SAFEBAG *" m68kreg="a0"/>
      <arg name="pass" type="const char *" m68kreg="a1"/>
      <arg name="passlen" type="int" m68kreg="d0"/>
    </method>
    <method name="PKCS8_encrypt" result="X509_SIG *">
      <arg name="pbe_nid" type="int" m68kreg="d0"/>
      <arg name="cipher" type="const EVP_CIPHER *" m68kreg="a0"/>
      <arg name="pass" type="const char *" m68kreg="a1"/>
      <arg name="passlen" type="int" m68kreg="d1"/>
      <arg name="salt" type="unsigned char *" m68kreg="a2"/>
      <arg name="saltlen" type="int" m68kreg="d2"/>
      <arg name="iter" type="int" m68kreg="d3"/>
      <arg name="p8" type="PKCS8_PRIV_KEY_INFO *" m68kreg="a3"/>
    </method>
    <method name="PKCS12_MAKE_SHKEYBAG" result="PKCS12_SAFEBAG *" status="unimplemented">
      <arg name="pbe_nid" type="int" m68kreg="d0"/>
      <arg name="pass" type="const char *" m68kreg="a0"/>
      <arg name="passlen" type="int" m68kreg="d1"/>
      <arg name="salt" type="unsigned char *" m68kreg="a1"/>
      <arg name="saltlen" type="int" m68kreg="d2"/>
      <arg name="iter" type="int" m68kreg="d3"/>
      <arg name="p8" type="PKCS8_PRIV_KEY_INFO *" m68kreg="a2"/>
    </method>
    <method name="PKCS12_pack_p7data" result="PKCS7 *">
      <arg name="sk" type="STACK_OF(PKCS12_SAFEBAG) *" m68kreg="a0"/>
    </method>
    <method name="PKCS12_unpack_p7data" result="STACK_OF(PKCS12_SAFEBAG) *">
      <arg name="p7" type="PKCS7 *" m68kreg="a0"/>
    </method>
    <method name="PKCS12_pack_p7encdata" result="PKCS7 *">
      <arg name="pbe_nid" type="int" m68kreg="d0"/>
      <arg name="pass" type="const char *" m68kreg="a0"/>
      <arg name="passlen" type="int" m68kreg="d1"/>
      <arg name="salt" type="unsigned char *" m68kreg="a1"/>
      <arg name="saltlen" type="int" m68kreg="d2"/>
      <arg name="iter" type="int" m68kreg="d3"/>
      <arg name="bags" type="STACK_OF(PKCS12_SAFEBAG) *" m68kreg="a2"/>
    </method>
    <method name="PKCS12_unpack_p7encdata" result="STACK_OF(PKCS12_SAFEBAG) *">
      <arg name="p7" type="PKCS7 *" m68kreg="a0"/>
      <arg name="pass" type="const char *" m68kreg="a1"/>
      <arg name="passlen" type="int" m68kreg="d0"/>
    </method>
    <method name="PKCS12_pack_authsafes" result="int">
      <arg name="p12" type="PKCS12 *" m68kreg="a0"/>
      <arg name="safes" type="STACK_OF(PKCS7) *" m68kreg="a1"/>
    </method>
    <method name="PKCS12_unpack_authsafes" result="STACK_OF(PKCS7) *">
      <arg name="p12" type="const PKCS12 *" m68kreg="a0"/>
    </method>
    <method name="PKCS12_add_localkeyid" result="int">
      <arg name="bag" type="PKCS12_SAFEBAG *" m68kreg="a0"/>
      <arg name="name" type="unsigned char *" m68kreg="a1"/>
      <arg name="namelen" type="int" m68kreg="d0"/>
    </method>
    <method name="PKCS12_add_friendlyname_asc" result="int">
      <arg name="bag" type="PKCS12_SAFEBAG *" m68kreg="a0"/>
      <arg name="name" type="const char *" m68kreg="a1"/>
      <arg name="namelen" type="int" m68kreg="d0"/>
    </method>
    <method name="PKCS12_add_CSPName_asc" result="int">
      <arg name="bag" type="PKCS12_SAFEBAG *" m68kreg="a0"/>
      <arg name="name" type="const char *" m68kreg="a1"/>
      <arg name="namelen" type="int" m68kreg="d0"/>
    </method>
    <method name="PKCS12_add_friendlyname_uni" result="int">
      <arg name="bag" type="PKCS12_SAFEBAG *" m68kreg="a0"/>
      <arg name="name" type="const unsigned char *" m68kreg="a1"/>
      <arg name="namelen" type="int" m68kreg="d0"/>
    </method>
    <method name="PKCS8_add_keyusage" result="int">
      <arg name="p8" type="PKCS8_PRIV_KEY_INFO *" m68kreg="a0"/>
      <arg name="usage" type="int" m68kreg="d0"/>
    </method>
    <method name="PKCS12_get_attr_gen" result="ASN1_TYPE *">
      <arg name="attrs" type="const STACK_OF(X509_ATTRIBUTE) *" m68kreg="a0"/>
      <arg name="attr_nid" type="int" m68kreg="d0"/>
    </method>
    <method name="PKCS12_get_friendlyname" result="char *">
      <arg name="bag" type="PKCS12_SAFEBAG *" m68kreg="a0"/>
    </method>
    <method name="PKCS12_pbe_crypt" result="unsigned char *">
      <arg name="algor" type="const X509_ALGOR *" m68kreg="a0"/>
      <arg name="pass" type="const char *" m68kreg="a1"/>
      <arg name="passlen" type="int" m68kreg="d0"/>
      <arg name="in" type="const unsigned char *" m68kreg="a2"/>
      <arg name="inlen" type="int" m68kreg="d1"/>
      <arg name="data" type="unsigned char **" m68kreg="a3"/>
      <arg name="datalen" type="int *" m68kreg="d2"/>
      <arg name="en_de" type="int" m68kreg="d3"/>
    </method>
    <method name="PKCS12_item_decrypt_d2i" result="void *">
      <arg name="algor" type="const X509_ALGOR *" m68kreg="a0"/>
      <arg name="it" type="const ASN1_ITEM *" m68kreg="a1"/>
      <arg name="pass" type="const char *" m68kreg="a2"/>
      <arg name="passlen" type="int" m68kreg="d0"/>
      <arg name="oct" type="const ASN1_OCTET_STRING *" m68kreg="a3"/>
      <arg name="zbuf" type="int" m68kreg="d1"/>
    </method>
    <method name="PKCS12_item_i2d_encrypt" result="ASN1_OCTET_STRING *">
      <arg name="algor" type="X509_ALGOR *" m68kreg="a0"/>
      <arg name="it" type="const ASN1_ITEM *" m68kreg="a1"/>
      <arg name="pass" type="const char *" m68kreg="a2"/>
      <arg name="passlen" type="int" m68kreg="d0"/>
      <arg name="obj" type="void *" m68kreg="a3"/>
      <arg name="zbuf" type="int" m68kreg="d1"/>
    </method>
    <method name="PKCS12_init" result="PKCS12 *">
      <arg name="mode" type="int" m68kreg="d0"/>
    </method>
    <method name="PKCS12_key_gen_asc" result="int">
      <arg name="pass" type="const char *" m68kreg="a0"/>
      <arg name="passlen" type="int" m68kreg="d0"/>
      <arg name="salt" type="unsigned char *" m68kreg="a1"/>
      <arg name="saltlen" type="int" m68kreg="d1"/>
      <arg name="id" type="int" m68kreg="d2"/>
      <arg name="iter" type="int" m68kreg="d3"/>
      <arg name="n" type="int" m68kreg="d4"/>
      <arg name="out" type="unsigned char *" m68kreg="a2"/>
      <arg name="md_type" type="const EVP_MD *" m68kreg="a3"/>
    </method>
    <method name="PKCS12_key_gen_uni" result="int">
      <arg name="pass" type="unsigned char *" m68kreg="a0"/>
      <arg name="passlen" type="int" m68kreg="d0"/>
      <arg name="salt" type="unsigned char *" m68kreg="a1"/>
      <arg name="saltlen" type="int" m68kreg="d1"/>
      <arg name="id" type="int" m68kreg="d2"/>
      <arg name="iter" type="int" m68kreg="d3"/>
      <arg name="n" type="int" m68kreg="d4"/>
      <arg name="out" type="unsigned char *" m68kreg="a2"/>
      <arg name="md_type" type="const EVP_MD *" m68kreg="a3"/>
    </method>
    <method name="PKCS12_PBE_keyivgen" result="int">
      <arg name="ctx" type="EVP_CIPHER_CTX *" m68kreg="a0"/>
      <arg name="pass" type="const char *" m68kreg="a1"/>
      <arg name="passlen" type="int" m68kreg="d0"/>
      <arg name="param" type="ASN1_TYPE *" m68kreg="a2"/>
      <arg name="cipher" type="const EVP_CIPHER *" m68kreg="a3"/>
      <arg name="md_type" type="const EVP_MD *" m68kreg="d1"/>
      <arg name="en_de" type="int" m68kreg="d2"/>
    </method>
    <method name="PKCS12_gen_mac" result="int">
      <arg name="p12" type="PKCS12 *" m68kreg="a0"/>
      <arg name="pass" type="const char *" m68kreg="a1"/>
      <arg name="passlen" type="int" m68kreg="d0"/>
      <arg name="mac" type="unsigned char *" m68kreg="a2"/>
      <arg name="maclen" type="unsigned int *" m68kreg="a3"/>
    </method>
    <method name="PKCS12_verify_mac" result="int">
      <arg name="p12" type="PKCS12 *" m68kreg="a0"/>
      <arg name="pass" type="const char *" m68kreg="a1"/>
      <arg name="passlen" type="int" m68kreg="d0"/>
    </method>
    <method name="PKCS12_set_mac" result="int">
      <arg name="p12" type="PKCS12 *" m68kreg="a0"/>
      <arg name="pass" type="const char *" m68kreg="a1"/>
      <arg name="passlen" type="int" m68kreg="d0"/>
      <arg name="salt" type="unsigned char *" m68kreg="a2"/>
      <arg name="saltlen" type="int" m68kreg="d1"/>
      <arg name="iter" type="int" m68kreg="d2"/>
      <arg name="md_type" type="const EVP_MD *" m68kreg="a3"/>
    </method>
    <method name="PKCS12_setup_mac" result="int">
      <arg name="p12" type="PKCS12 *" m68kreg="a0"/>
      <arg name="iter" type="int" m68kreg="d0"/>
      <arg name="salt" type="unsigned char *" m68kreg="a1"/>
      <arg name="saltlen" type="int" m68kreg="d1"/>
      <arg name="md_type" type="const EVP_MD *" m68kreg="a2"/>
    </method>
    <method name="OPENSSL_asc2uni" result="unsigned char *">
      <arg name="asc" type="const char *" m68kreg="a0"/>
      <arg name="asclen" type="int" m68kreg="d0"/>
      <arg name="uni" type="unsigned char **" m68kreg="a1"/>
      <arg name="unilen" type="int *" m68kreg="a2"/>
    </method>
    <method name="OPENSSL_uni2asc" result="char *">
      <arg name="uni" type="const unsigned char *" m68kreg="a0"/>
      <arg name="unilen" type="int" m68kreg="d0"/>
    </method>
    <method name="PKCS12_new" result="PKCS12 *">
    </method>
    <method name="PKCS12_free" result="void">
      <arg name="a" type="PKCS12 *" m68kreg="a0"/>
    </method>
    <method name="d2i_PKCS12" result="PKCS12 *">
      <arg name="a" type="PKCS12 **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_PKCS12" result="int">
      <arg name="a" type="PKCS12 *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="PKCS12_it" result="const ASN1_ITEM *">
    </method>
    <method name="PKCS12_MAC_DATA_new" result="PKCS12_MAC_DATA *">
    </method>
    <method name="PKCS12_MAC_DATA_free" result="void">
      <arg name="a" type="PKCS12_MAC_DATA *" m68kreg="a0"/>
    </method>
    <method name="d2i_PKCS12_MAC_DATA" result="PKCS12_MAC_DATA *">
      <arg name="a" type="PKCS12_MAC_DATA **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_PKCS12_MAC_DATA" result="int">
      <arg name="a" type="PKCS12_MAC_DATA *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="PKCS12_MAC_DATA_it" result="const ASN1_ITEM *">
    </method>
    <method name="PKCS12_SAFEBAG_new" result="PKCS12_SAFEBAG *">
    </method>
    <method name="PKCS12_SAFEBAG_free" result="void">
      <arg name="a" type="PKCS12_SAFEBAG *" m68kreg="a0"/>
    </method>
    <method name="d2i_PKCS12_SAFEBAG" result="PKCS12_SAFEBAG *">
      <arg name="a" type="PKCS12_SAFEBAG **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_PKCS12_SAFEBAG" result="int">
      <arg name="a" type="PKCS12_SAFEBAG *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="PKCS12_SAFEBAG_it" result="const ASN1_ITEM *">
    </method>
    <method name="PKCS12_BAGS_new" result="PKCS12_BAGS *">
    </method>
    <method name="PKCS12_BAGS_free" result="void">
      <arg name="a" type="PKCS12_BAGS *" m68kreg="a0"/>
    </method>
    <method name="d2i_PKCS12_BAGS" result="PKCS12_BAGS *">
      <arg name="a" type="PKCS12_BAGS **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_PKCS12_BAGS" result="int">
      <arg name="a" type="PKCS12_BAGS *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="PKCS12_BAGS_it" result="const ASN1_ITEM *">
    </method>
    <method name="PKCS12_SAFEBAGS_it" result="const ASN1_ITEM *">
    </method>
    <method name="PKCS12_AUTHSAFES_it" result="const ASN1_ITEM *">
    </method>
    <method name="PKCS12_PBE_add" result="void">
    </method>
    <method name="PKCS12_parse" result="int">
      <arg name="p12" type="PKCS12 *" m68kreg="a0"/>
      <arg name="pass" type="const char *" m68kreg="a1"/>
      <arg name="pkey" type="EVP_PKEY **" m68kreg="a2"/>
      <arg name="cert" type="X509 **" m68kreg="a3"/>
      <arg name="ca" type="STACK_OF(X509) **" m68kreg="d0"/>
    </method>
    <method name="PKCS12_create" result="PKCS12 *">
      <arg name="pass" type="const char *" m68kreg="a0"/>
      <arg name="name" type="const char *" m68kreg="a1"/>
      <arg name="pkey" type="EVP_PKEY *" m68kreg="a2"/>
      <arg name="cert" type="X509 *" m68kreg="a3"/>
      <arg name="ca" type="STACK_OF(X509) *" m68kreg="d0"/>
      <arg name="nid_key" type="int" m68kreg="d1"/>
      <arg name="nid_cert" type="int" m68kreg="d2"/>
      <arg name="iter" type="int" m68kreg="d3"/>
      <arg name="mac_iter" type="int" m68kreg="d4"/>
      <arg name="keytype" type="int" m68kreg="d5"/>
    </method>
    <method name="i2d_PKCS12_bio" result="int">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="p12" type="PKCS12 *" m68kreg="a1"/>
    </method>
    <method name="d2i_PKCS12_bio" result="PKCS12 *">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="p12" type="PKCS12 **" m68kreg="a1"/>
    </method>
    <method name="PKCS12_newpass" result="int">
      <arg name="p12" type="PKCS12 *" m68kreg="a0"/>
      <arg name="oldpass" type="const char *" m68kreg="a1"/>
      <arg name="newpass" type="const char *" m68kreg="a2"/>
    </method>
    <method name="ERR_load_PKCS12_strings" result="int">
    </method>
    <method name="PKCS7_ISSUER_AND_SERIAL_digest" result="int">
      <arg name="data" type="PKCS7_ISSUER_AND_SERIAL *" m68kreg="a0"/>
      <arg name="type" type="const EVP_MD *" m68kreg="a1"/>
      <arg name="md" type="unsigned char *" m68kreg="a2"/>
      <arg name="len" type="unsigned int *" m68kreg="a3"/>
    </method>
    <method name="PKCS7_dup" result="PKCS7 *">
      <arg name="p7" type="PKCS7 *" m68kreg="a0"/>
    </method>
    <method name="d2i_PKCS7_bio" result="PKCS7 *">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="p7" type="PKCS7 **" m68kreg="a1"/>
    </method>
    <method name="i2d_PKCS7_bio" result="int">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="p7" type="PKCS7 *" m68kreg="a1"/>
    </method>
    <method name="PKCS7_ISSUER_AND_SERIAL_new" result="PKCS7_ISSUER_AND_SERIAL *">
    </method>
    <method name="PKCS7_ISSUER_AND_SERIAL_free" result="void">
      <arg name="a" type="PKCS7_ISSUER_AND_SERIAL *" m68kreg="a0"/>
    </method>
    <method name="d2i_PKCS7_ISSUER_AND_SERIAL" result="PKCS7_ISSUER_AND_SERIAL *">
      <arg name="a" type="PKCS7_ISSUER_AND_SERIAL **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_PKCS7_ISSUER_AND_SERIAL" result="int">
      <arg name="a" type="PKCS7_ISSUER_AND_SERIAL *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="PKCS7_ISSUER_AND_SERIAL_it" result="const ASN1_ITEM *">
    </method>
    <method name="PKCS7_SIGNER_INFO_new" result="PKCS7_SIGNER_INFO *">
    </method>
    <method name="PKCS7_SIGNER_INFO_free" result="void">
      <arg name="a" type="PKCS7_SIGNER_INFO *" m68kreg="a0"/>
    </method>
    <method name="d2i_PKCS7_SIGNER_INFO" result="PKCS7_SIGNER_INFO *">
      <arg name="a" type="PKCS7_SIGNER_INFO **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_PKCS7_SIGNER_INFO" result="int">
      <arg name="a" type="PKCS7_SIGNER_INFO *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="PKCS7_SIGNER_INFO_it" result="const ASN1_ITEM *">
    </method>
    <method name="PKCS7_RECIP_INFO_new" result="PKCS7_RECIP_INFO *">
    </method>
    <method name="PKCS7_RECIP_INFO_free" result="void">
      <arg name="a" type="PKCS7_RECIP_INFO *" m68kreg="a0"/>
    </method>
    <method name="d2i_PKCS7_RECIP_INFO" result="PKCS7_RECIP_INFO *">
      <arg name="a" type="PKCS7_RECIP_INFO **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_PKCS7_RECIP_INFO" result="int">
      <arg name="a" type="PKCS7_RECIP_INFO *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="PKCS7_RECIP_INFO_it" result="const ASN1_ITEM *">
    </method>
    <method name="PKCS7_SIGNED_new" result="PKCS7_SIGNED *">
    </method>
    <method name="PKCS7_SIGNED_free" result="void">
      <arg name="a" type="PKCS7_SIGNED *" m68kreg="a0"/>
    </method>
    <method name="d2i_PKCS7_SIGNED" result="PKCS7_SIGNED *">
      <arg name="a" type="PKCS7_SIGNED **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_PKCS7_SIGNED" result="int">
      <arg name="a" type="PKCS7_SIGNED *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="PKCS7_SIGNED_it" result="const ASN1_ITEM *">
    </method>
    <method name="PKCS7_ENC_CONTENT_new" result="PKCS7_ENC_CONTENT *">
    </method>
    <method name="PKCS7_ENC_CONTENT_free" result="void">
      <arg name="a" type="PKCS7_ENC_CONTENT *" m68kreg="a0"/>
    </method>
    <method name="d2i_PKCS7_ENC_CONTENT" result="PKCS7_ENC_CONTENT *">
      <arg name="a" type="PKCS7_ENC_CONTENT **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_PKCS7_ENC_CONTENT" result="int">
      <arg name="a" type="PKCS7_ENC_CONTENT *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="PKCS7_ENC_CONTENT_it" result="const ASN1_ITEM *">
    </method>
    <method name="PKCS7_ENVELOPE_new" result="PKCS7_ENVELOPE *">
    </method>
    <method name="PKCS7_ENVELOPE_free" result="void">
      <arg name="a" type="PKCS7_ENVELOPE *" m68kreg="a0"/>
    </method>
    <method name="d2i_PKCS7_ENVELOPE" result="PKCS7_ENVELOPE *">
      <arg name="a" type="PKCS7_ENVELOPE **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_PKCS7_ENVELOPE" result="int">
      <arg name="a" type="PKCS7_ENVELOPE *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="PKCS7_ENVELOPE_it" result="const ASN1_ITEM *">
    </method>
    <method name="PKCS7_SIGN_ENVELOPE_new" result="PKCS7_SIGN_ENVELOPE *">
    </method>
    <method name="PKCS7_SIGN_ENVELOPE_free" result="void">
      <arg name="a" type="PKCS7_SIGN_ENVELOPE *" m68kreg="a0"/>
    </method>
    <method name="d2i_PKCS7_SIGN_ENVELOPE" result="PKCS7_SIGN_ENVELOPE *">
      <arg name="a" type="PKCS7_SIGN_ENVELOPE **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_PKCS7_SIGN_ENVELOPE" result="int">
      <arg name="a" type="PKCS7_SIGN_ENVELOPE *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="PKCS7_SIGN_ENVELOPE_it" result="const ASN1_ITEM *">
    </method>
    <method name="PKCS7_DIGEST_new" result="PKCS7_DIGEST *">
    </method>
    <method name="PKCS7_DIGEST_free" result="void">
      <arg name="a" type="PKCS7_DIGEST *" m68kreg="a0"/>
    </method>
    <method name="d2i_PKCS7_DIGEST" result="PKCS7_DIGEST *">
      <arg name="a" type="PKCS7_DIGEST **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_PKCS7_DIGEST" result="int">
      <arg name="a" type="PKCS7_DIGEST *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="PKCS7_DIGEST_it" result="const ASN1_ITEM *">
    </method>
    <method name="PKCS7_ENCRYPT_new" result="PKCS7_ENCRYPT *">
    </method>
    <method name="PKCS7_ENCRYPT_free" result="void">
      <arg name="a" type="PKCS7_ENCRYPT *" m68kreg="a0"/>
    </method>
    <method name="d2i_PKCS7_ENCRYPT" result="PKCS7_ENCRYPT *">
      <arg name="a" type="PKCS7_ENCRYPT **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_PKCS7_ENCRYPT" result="int">
      <arg name="a" type="PKCS7_ENCRYPT *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="PKCS7_ENCRYPT_it" result="const ASN1_ITEM *">
    </method>
    <method name="PKCS7_new" result="PKCS7 *">
    </method>
    <method name="PKCS7_free" result="void">
      <arg name="a" type="PKCS7 *" m68kreg="a0"/>
    </method>
    <method name="d2i_PKCS7" result="PKCS7 *">
      <arg name="a" type="PKCS7 **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_PKCS7" result="int">
      <arg name="a" type="PKCS7 *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="PKCS7_it" result="const ASN1_ITEM *">
    </method>
    <method name="PKCS7_ATTR_SIGN_it" result="const ASN1_ITEM *">
    </method>
    <method name="PKCS7_ATTR_VERIFY_it" result="const ASN1_ITEM *">
    </method>
    <method name="PKCS7_ctrl" result="long">
      <arg name="p7" type="PKCS7 *" m68kreg="a0"/>
      <arg name="cmd" type="int" m68kreg="d0"/>
      <arg name="larg" type="long" m68kreg="d1"/>
      <arg name="parg" type="char *" m68kreg="a1"/>
    </method>
    <method name="PKCS7_set_type" result="int">
      <arg name="p7" type="PKCS7 *" m68kreg="a0"/>
      <arg name="type" type="int" m68kreg="d0"/>
    </method>
    <method name="PKCS7_set_content" result="int">
      <arg name="p7" type="PKCS7 *" m68kreg="a0"/>
      <arg name="p7_data" type="PKCS7 *" m68kreg="a1"/>
    </method>
    <method name="PKCS7_SIGNER_INFO_set" result="int">
      <arg name="p7i" type="PKCS7_SIGNER_INFO *" m68kreg="a0"/>
      <arg name="x509" type="X509 *" m68kreg="a1"/>
      <arg name="pkey" type="EVP_PKEY *" m68kreg="a2"/>
      <arg name="dgst" type="const EVP_MD *" m68kreg="a3"/>
    </method>
    <method name="PKCS7_add_signer" result="int">
      <arg name="p7" type="PKCS7 *" m68kreg="a0"/>
      <arg name="p7i" type="PKCS7_SIGNER_INFO *" m68kreg="a1"/>
    </method>
    <method name="PKCS7_add_certificate" result="int">
      <arg name="p7" type="PKCS7 *" m68kreg="a0"/>
      <arg name="x509" type="X509 *" m68kreg="a1"/>
    </method>
    <method name="PKCS7_add_crl" result="int">
      <arg name="p7" type="PKCS7 *" m68kreg="a0"/>
      <arg name="x509" type="X509_CRL *" m68kreg="a1"/>
    </method>
    <method name="PKCS7_content_new" result="int">
      <arg name="p7" type="PKCS7 *" m68kreg="a0"/>
      <arg name="nid" type="int" m68kreg="d0"/>
    </method>
    <method name="PKCS7_dataVerify" result="int">
      <arg name="cert_store" type="X509_STORE *" m68kreg="a0"/>
      <arg name="ctx" type="X509_STORE_CTX *" m68kreg="a1"/>
      <arg name="bio" type="BIO *" m68kreg="a2"/>
      <arg name="p7" type="PKCS7 *" m68kreg="a3"/>
      <arg name="si" type="PKCS7_SIGNER_INFO *" m68kreg="d0"/>
    </method>
    <method name="PKCS7_signatureVerify" result="int">
      <arg name="bio" type="BIO *" m68kreg="a0"/>
      <arg name="p7" type="PKCS7 *" m68kreg="a1"/>
      <arg name="si" type="PKCS7_SIGNER_INFO *" m68kreg="a2"/>
      <arg name="x509" type="X509 *" m68kreg="a3"/>
    </method>
    <method name="PKCS7_dataInit" result="BIO *">
      <arg name="p7" type="PKCS7 *" m68kreg="a0"/>
      <arg name="bio" type="BIO *" m68kreg="a1"/>
    </method>
    <method name="PKCS7_dataFinal" result="int">
      <arg name="p7" type="PKCS7 *" m68kreg="a0"/>
      <arg name="bio" type="BIO *" m68kreg="a1"/>
    </method>
    <method name="PKCS7_dataDecode" result="BIO *">
      <arg name="p7" type="PKCS7 *" m68kreg="a0"/>
      <arg name="pkey" type="EVP_PKEY *" m68kreg="a1"/>
      <arg name="in_bio" type="BIO *" m68kreg="a2"/>
      <arg name="pcert" type="X509 *" m68kreg="a3"/>
    </method>
    <method name="PKCS7_add_signature" result="PKCS7_SIGNER_INFO *">
      <arg name="p7" type="PKCS7 *" m68kreg="a0"/>
      <arg name="x509" type="X509 *" m68kreg="a1"/>
      <arg name="pkey" type="EVP_PKEY *" m68kreg="a2"/>
      <arg name="dgst" type="const EVP_MD *" m68kreg="a3"/>
    </method>
    <method name="PKCS7_cert_from_signer_info" result="X509 *">
      <arg name="p7" type="PKCS7 *" m68kreg="a0"/>
      <arg name="si" type="PKCS7_SIGNER_INFO *" m68kreg="a1"/>
    </method>
    <method name="PKCS7_get_signer_info" result="STACK_OF(PKCS7_SIGNER_INFO) *">
      <arg name="p7" type="PKCS7 *" m68kreg="a0"/>
    </method>
    <method name="PKCS7_add_recipient" result="PKCS7_RECIP_INFO *">
      <arg name="p7" type="PKCS7 *" m68kreg="a0"/>
      <arg name="x509" type="X509 *" m68kreg="a1"/>
    </method>
    <method name="PKCS7_add_recipient_info" result="int">
      <arg name="p7" type="PKCS7 *" m68kreg="a0"/>
      <arg name="ri" type="PKCS7_RECIP_INFO *" m68kreg="a1"/>
    </method>
    <method name="PKCS7_RECIP_INFO_set" result="int">
      <arg name="p7i" type="PKCS7_RECIP_INFO *" m68kreg="a0"/>
      <arg name="x509" type="X509 *" m68kreg="a1"/>
    </method>
    <method name="PKCS7_set_cipher" result="int">
      <arg name="p7" type="PKCS7 *" m68kreg="a0"/>
      <arg name="cipher" type="const EVP_CIPHER *" m68kreg="a1"/>
    </method>
    <method name="PKCS7_get_issuer_and_serial" result="PKCS7_ISSUER_AND_SERIAL *">
      <arg name="p7" type="PKCS7 *" m68kreg="a0"/>
      <arg name="idx" type="int" m68kreg="d0"/>
    </method>
    <method name="PKCS7_digest_from_attributes" result="ASN1_OCTET_STRING *">
      <arg name="sk" type="STACK_OF(X509_ATTRIBUTE) *" m68kreg="a0"/>
    </method>
    <method name="PKCS7_add_signed_attribute" result="int">
      <arg name="p7si" type="PKCS7_SIGNER_INFO *" m68kreg="a0"/>
      <arg name="nid" type="int" m68kreg="d0"/>
      <arg name="type" type="int" m68kreg="d1"/>
      <arg name="data" type="void *" m68kreg="a1"/>
    </method>
    <method name="PKCS7_add_attribute" result="int">
      <arg name="p7si" type="PKCS7_SIGNER_INFO *" m68kreg="a0"/>
      <arg name="nid" type="int" m68kreg="d0"/>
      <arg name="atrtype" type="int" m68kreg="d1"/>
      <arg name="value" type="void *" m68kreg="a1"/>
    </method>
    <method name="PKCS7_get_attribute" result="ASN1_TYPE *">
      <arg name="si" type="PKCS7_SIGNER_INFO *" m68kreg="a0"/>
      <arg name="nid" type="int" m68kreg="d0"/>
    </method>
    <method name="PKCS7_get_signed_attribute" result="ASN1_TYPE *">
      <arg name="si" type="PKCS7_SIGNER_INFO *" m68kreg="a0"/>
      <arg name="nid" type="int" m68kreg="d0"/>
    </method>
    <method name="PKCS7_set_signed_attributes" result="int">
      <arg name="p7si" type="PKCS7_SIGNER_INFO *" m68kreg="a0"/>
      <arg name="sk" type="STACK_OF(X509_ATTRIBUTE) *" m68kreg="a1"/>
    </method>
    <method name="PKCS7_set_attributes" result="int">
      <arg name="p7si" type="PKCS7_SIGNER_INFO *" m68kreg="a0"/>
      <arg name="sk" type="STACK_OF(X509_ATTRIBUTE) *" m68kreg="a1"/>
    </method>
    <method name="PKCS7_sign" result="PKCS7 *">
      <arg name="signcert" type="X509 *" m68kreg="a0"/>
      <arg name="pkey" type="EVP_PKEY *" m68kreg="a1"/>
      <arg name="certs" type="STACK_OF(X509) *" m68kreg="a2"/>
      <arg name="data" type="BIO *" m68kreg="a3"/>
      <arg name="flags" type="int" m68kreg="d0"/>
    </method>
    <method name="PKCS7_verify" result="int">
      <arg name="p7" type="PKCS7 *" m68kreg="a0"/>
      <arg name="certs" type="STACK_OF(X509) *" m68kreg="a1"/>
      <arg name="store" type="X509_STORE *" m68kreg="a2"/>
      <arg name="indata" type="BIO *" m68kreg="a3"/>
      <arg name="out" type="BIO *" m68kreg="d0"/>
      <arg name="flags" type="int" m68kreg="d1"/>
    </method>
    <method name="PKCS7_get0_signers" result="STACK_OF(X509) *">
      <arg name="p7" type="PKCS7 *" m68kreg="a0"/>
      <arg name="certs" type="STACK_OF(X509) *" m68kreg="a1"/>
      <arg name="flags" type="int" m68kreg="d0"/>
    </method>
    <method name="PKCS7_encrypt" result="PKCS7 *">
      <arg name="certs" type="STACK_OF(X509) *" m68kreg="a0"/>
      <arg name="in" type="BIO *" m68kreg="a1"/>
      <arg name="cipher" type="const EVP_CIPHER *" m68kreg="a2"/>
      <arg name="flags" type="int" m68kreg="d0"/>
    </method>
    <method name="PKCS7_decrypt" result="int">
      <arg name="p7" type="PKCS7 *" m68kreg="a0"/>
      <arg name="pkey" type="EVP_PKEY *" m68kreg="a1"/>
      <arg name="cert" type="X509 *" m68kreg="a2"/>
      <arg name="data" type="BIO *" m68kreg="a3"/>
      <arg name="flags" type="int" m68kreg="d0"/>
    </method>
    <method name="PKCS7_add_attrib_smimecap" result="int">
      <arg name="si" type="PKCS7_SIGNER_INFO *" m68kreg="a0"/>
      <arg name="cap" type="STACK_OF(X509_ALGOR) *" m68kreg="a1"/>
    </method>
    <method name="PKCS7_get_smimecap" result="STACK_OF(X509_ALGOR) *">
      <arg name="si" type="PKCS7_SIGNER_INFO *" m68kreg="a0"/>
    </method>
    <method name="PKCS7_simple_smimecap" result="int">
      <arg name="sk" type="STACK_OF(X509_ALGOR) *" m68kreg="a0"/>
      <arg name="nid" type="int" m68kreg="d0"/>
      <arg name="arg" type="int" m68kreg="d1"/>
    </method>
    <method name="SMIME_write_PKCS7" result="int">
      <arg name="bio" type="BIO *" m68kreg="a0"/>
      <arg name="p7" type="PKCS7 *" m68kreg="a1"/>
      <arg name="data" type="BIO *" m68kreg="a2"/>
      <arg name="flags" type="int" m68kreg="d0"/>
    </method>
    <method name="SMIME_read_PKCS7" result="PKCS7 *">
      <arg name="bio" type="BIO *" m68kreg="a0"/>
      <arg name="bcont" type="BIO **" m68kreg="a1"/>
    </method>
    <method name="SMIME_crlf_copy" result="int">
      <arg name="in" type="BIO *" m68kreg="a0"/>
      <arg name="out" type="BIO *" m68kreg="a1"/>
      <arg name="flags" type="int" m68kreg="d0"/>
    </method>
    <method name="SMIME_text" result="int">
      <arg name="in" type="BIO *" m68kreg="a0"/>
      <arg name="out" type="BIO *" m68kreg="a1"/>
    </method>
    <method name="ERR_load_PKCS7_strings" result="int">
    </method>
    <method name="RAND_set_rand_method" result="int">
      <arg name="meth" type="const RAND_METHOD *" m68kreg="a0"/>
    </method>
    <method name="RAND_get_rand_method" result="const RAND_METHOD *">
    </method>
    <method name="RAND_SSLeay" result="RAND_METHOD *" status="unimplemented">
    </method>
    <method name="RAND_cleanup" result="void" status="unimplemented">
    </method>
    <method name="RAND_bytes" result="int">
      <arg name="buf" type="unsigned char *" m68kreg="a0"/>
      <arg name="num" type="int" m68kreg="d0"/>
    </method>
    <method name="RAND_pseudo_bytes" result="int">
      <arg name="buf" type="unsigned char *" m68kreg="a0"/>
      <arg name="num" type="int" m68kreg="d0"/>
    </method>
    <method name="RAND_seed" result="void">
      <arg name="buf" type="const void *" m68kreg="a0"/>
      <arg name="num" type="int" m68kreg="d0"/>
    </method>
    <method name="RAND_add" result="void">
      <arg name="buf" type="const void *" m68kreg="a0"/>
      <arg name="num" type="int" m68kreg="d0"/>
      <arg name="randomness" type="double" m68kreg="d1-d2"/>
    </method>
    <method name="RAND_load_file" result="int">
      <arg name="file" type="const char *" m68kreg="a0"/>
      <arg name="max_bytes" type="long" m68kreg="d0"/>
    </method>
    <method name="RAND_write_file" result="int">
      <arg name="file" type="const char *" m68kreg="a0"/>
    </method>
    <method name="RAND_file_name" result="const char *">
      <arg name="file" type="char *" m68kreg="a0"/>
      <arg name="num" type="size_t" m68kreg="d0"/>
    </method>
    <method name="RAND_status" result="int">
    </method>
    <method name="RAND_query_egd_bytes" result="int" status="unimplemented">
      <arg name="path" type="const char *" m68kreg="a0"/>
      <arg name="buf" type="unsigned char *" m68kreg="a1"/>
      <arg name="bytes" type="int" m68kreg="d0"/>
    </method>
    <method name="RAND_egd" result="int" status="unimplemented">
      <arg name="path" type="const char *" m68kreg="a0"/>
    </method>
    <method name="RAND_egd_bytes" result="int" status="unimplemented">
      <arg name="path" type="const char *" m68kreg="a0"/>
      <arg name="bytes" type="int" m68kreg="d0"/>
    </method>
    <method name="RAND_poll" result="int">
    </method>
    <method name="ERR_load_RAND_strings" result="int">
    </method>
    <method name="SSL_CTX_set_msg_callback" result="void">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
      <arg name="cb" type="void (*)(int write_p, int version, int content_type, const void *buf, size_t len, SSL *ssl, void *arg)" m68kreg="a1"/>
    </method>
    <method name="SSL_set_msg_callback" result="void">
      <arg name="ssl" type="SSL *" m68kreg="a0"/>
      <arg name="cb" type="void (*)(int write_p, int version, int content_type, const void *buf, size_t len, SSL *ssl, void *arg)" m68kreg="a1"/>
    </method>
    <method name="SSL_CTX_sessions" result="LHASH_OF(SSL_SESSION) *">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
    </method>
    <method name="SSL_get_finished" result="size_t">
      <arg name="s" type="const SSL *" m68kreg="a0"/>
      <arg name="buf" type="void *" m68kreg="a1"/>
      <arg name="count" type="size_t" m68kreg="d0"/>
    </method>
    <method name="SSL_get_peer_finished" result="size_t">
      <arg name="s" type="const SSL *" m68kreg="a0"/>
      <arg name="buf" type="void *" m68kreg="a1"/>
      <arg name="count" type="size_t" m68kreg="d0"/>
    </method>
    <method name="BIO_f_ssl" result="const BIO_METHOD *">
    </method>
    <method name="BIO_new_ssl" result="BIO *">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
      <arg name="client" type="int" m68kreg="d0"/>
    </method>
    <method name="BIO_new_ssl_connect" result="BIO *">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
    </method>
    <method name="BIO_new_buffer_ssl_connect" result="BIO *">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
    </method>
    <method name="BIO_ssl_copy_session_id" result="int">
      <arg name="to" type="BIO *" m68kreg="a0"/>
      <arg name="from" type="BIO *" m68kreg="a1"/>
    </method>
    <method name="BIO_ssl_shutdown" result="void">
      <arg name="ssl_bio" type="BIO *" m68kreg="a0"/>
    </method>
    <method name="SSL_CTX_set_cipher_list" result="int">
      <arg name="a" type="SSL_CTX *" m68kreg="a0"/>
      <arg name="str" type="const char *" m68kreg="a1"/>
    </method>
    <method name="SSL_CTX_new" result="SSL_CTX *">
      <arg name="meth" type="const SSL_METHOD *" m68kreg="a0"/>
    </method>
    <method name="SSL_CTX_free" result="void">
      <arg name="a" type="SSL_CTX *" m68kreg="a0"/>
    </method>
    <method name="SSL_CTX_set_timeout" result="long">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
      <arg name="t" type="long" m68kreg="d0"/>
    </method>
    <method name="SSL_CTX_get_timeout" result="long">
      <arg name="ctx" type="const SSL_CTX *" m68kreg="a0"/>
    </method>
    <method name="SSL_CTX_get_cert_store" result="X509_STORE *">
      <arg name="a" type="const SSL_CTX *" m68kreg="a0"/>
    </method>
    <method name="SSL_CTX_set_cert_store" result="void">
      <arg name="a" type="SSL_CTX *" m68kreg="a0"/>
      <arg name="b" type="X509_STORE *" m68kreg="a1"/>
    </method>
    <method name="SSL_want" result="int">
      <arg name="s" type="const SSL *" m68kreg="a0"/>
    </method>
    <method name="SSL_clear" result="int">
      <arg name="s" type="SSL *" m68kreg="a0"/>
    </method>
    <method name="SSL_CTX_flush_sessions" result="void">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
      <arg name="tm" type="long" m68kreg="d0"/>
    </method>
    <method name="SSL_get_current_cipher" result="const SSL_CIPHER *">
      <arg name="s" type="const SSL *" m68kreg="a0"/>
    </method>
    <method name="SSL_CIPHER_get_bits" result="int">
      <arg name="c" type="const SSL_CIPHER *" m68kreg="a0"/>
      <arg name="alg_bits" type="int *" m68kreg="a1"/>
    </method>
    <method name="SSL_CIPHER_get_version" result="const char *">
      <arg name="c" type="const SSL_CIPHER *" m68kreg="a0"/>
    </method>
    <method name="SSL_CIPHER_get_name" result="const char *">
      <arg name="c" type="const SSL_CIPHER *" m68kreg="a0"/>
    </method>
    <method name="SSL_CIPHER_get_mac" result="const char *">
      <arg name="cipher" type="const SSL_CIPHER *" m68kreg="a0"/>
    </method>
    <method name="SSL_CIPHER_get_encryption" result="const char *">
      <arg name="cipher" type="const SSL_CIPHER *" m68kreg="a0"/>
    </method>
    <method name="SSL_CIPHER_get_authentication" result="const char *">
      <arg name="cipher" type="const SSL_CIPHER *" m68kreg="a0"/>
    </method>
    <method name="SSL_CIPHER_get_key_exchange" result="const char *">
      <arg name="cipher" type="const SSL_CIPHER *" m68kreg="a0"/>
    </method>
    <method name="SSL_CIPHER_get_export" result="const char *" status="unimplemented">
      <arg name="cipher" type="const SSL_CIPHER *" m68kreg="a0"/>
    </method>
    <method name="SSL_get_fd" result="int">
      <arg name="s" type="const SSL *" m68kreg="a0"/>
    </method>
    <method name="SSL_get_rfd" result="int">
      <arg name="s" type="const SSL *" m68kreg="a0"/>
    </method>
    <method name="SSL_get_wfd" result="int">
      <arg name="s" type="const SSL *" m68kreg="a0"/>
    </method>
    <method name="SSL_get_cipher_list" result="const char *">
      <arg name="s" type="const SSL *" m68kreg="a0"/>
      <arg name="n" type="int" m68kreg="d0"/>
    </method>
    <method name="SSL_get_shared_ciphers" result="char *">
      <arg name="s" type="const SSL *" m68kreg="a0"/>
      <arg name="buf" type="char *" m68kreg="a1"/>
      <arg name="size" type="int" m68kreg="d0"/>
    </method>
    <method name="SSL_get_read_ahead" result="int">
      <arg name="s" type="const SSL *" m68kreg="a0"/>
    </method>
    <method name="SSL_pending" result="int">
      <arg name="s" type="const SSL *" m68kreg="a0"/>
    </method>
    <method name="SSL_set_fd" result="int">
      <arg name="s" type="SSL *" m68kreg="a0"/>
      <arg name="fd" type="int" m68kreg="d0"/>
    </method>
    <method name="SSL_set_rfd" result="int">
      <arg name="s" type="SSL *" m68kreg="a0"/>
      <arg name="fd" type="int" m68kreg="d0"/>
    </method>
    <method name="SSL_set_wfd" result="int">
      <arg name="s" type="SSL *" m68kreg="a0"/>
      <arg name="fd" type="int" m68kreg="d0"/>
    </method>
    <method name="SSL_set_bio" result="void">
      <arg name="s" type="SSL *" m68kreg="a0"/>
      <arg name="rbio" type="BIO *" m68kreg="a1"/>
      <arg name="wbio" type="BIO *" m68kreg="a2"/>
    </method>
    <method name="SSL_get_rbio" result="BIO *">
      <arg name="s" type="const SSL *" m68kreg="a0"/>
    </method>
    <method name="SSL_get_wbio" result="BIO *">
      <arg name="s" type="const SSL *" m68kreg="a0"/>
    </method>
    <method name="SSL_set_cipher_list" result="int">
      <arg name="s" type="SSL *" m68kreg="a0"/>
      <arg name="str" type="const char *" m68kreg="a1"/>
    </method>
    <method name="SSL_set_read_ahead" result="void">
      <arg name="s" type="SSL *" m68kreg="a0"/>
      <arg name="yes" type="int" m68kreg="d0"/>
    </method>
    <method name="SSL_get_verify_mode" result="int">
      <arg name="s" type="const SSL *" m68kreg="a0"/>
    </method>
    <method name="SSL_get_verify_depth" result="int">
      <arg name="s" type="const SSL *" m68kreg="a0"/>
    </method>
    <method name="SSL_get_verify_callback" result="int (*)(int, X509_STORE_CTX *)">
      <arg name="s" type="const SSL *" m68kreg="a0"/>
    </method>
    <method name="SSL_set_verify" result="void">
      <arg name="s" type="SSL *" m68kreg="a0"/>
      <arg name="mode" type="int" m68kreg="d0"/>
      <arg name="callback" type="int (*)(int, X509_STORE_CTX *)" m68kreg="a1"/>
    </method>
    <method name="SSL_set_verify_depth" result="void">
      <arg name="s" type="SSL *" m68kreg="a0"/>
      <arg name="depth" type="int" m68kreg="d0"/>
    </method>
    <method name="SSL_use_RSAPrivateKey" result="int">
      <arg name="ssl" type="SSL *" m68kreg="a0"/>
      <arg name="rsa" type="RSA *" m68kreg="a1"/>
    </method>
    <method name="SSL_use_RSAPrivateKey_ASN1" result="int">
      <arg name="ssl" type="SSL *" m68kreg="a0"/>
      <arg name="d" type="const unsigned char *" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="SSL_use_PrivateKey" result="int">
      <arg name="ssl" type="SSL *" m68kreg="a0"/>
      <arg name="pkey" type="EVP_PKEY *" m68kreg="a1"/>
    </method>
    <method name="SSL_use_PrivateKey_ASN1" result="int">
      <arg name="pk" type="int" m68kreg="d0"/>
      <arg name="ssl" type="SSL *" m68kreg="a0"/>
      <arg name="d" type="unsigned char *" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d1"/>
    </method>
    <method name="SSL_use_certificate" result="int">
      <arg name="ssl" type="SSL *" m68kreg="a0"/>
      <arg name="x" type="X509 *" m68kreg="a1"/>
    </method>
    <method name="SSL_use_certificate_ASN1" result="int">
      <arg name="ssl" type="SSL *" m68kreg="a0"/>
      <arg name="d" type="unsigned char *" m68kreg="a1"/>
      <arg name="len" type="int" m68kreg="d0"/>
    </method>
    <method name="SSL_use_RSAPrivateKey_file" result="int">
      <arg name="ssl" type="SSL *" m68kreg="a0"/>
      <arg name="file" type="const char *" m68kreg="a1"/>
      <arg name="type" type="int" m68kreg="d0"/>
    </method>
    <method name="SSL_use_PrivateKey_file" result="int">
      <arg name="ssl" type="SSL *" m68kreg="a0"/>
      <arg name="file" type="const char *" m68kreg="a1"/>
      <arg name="type" type="int" m68kreg="d0"/>
    </method>
    <method name="SSL_use_certificate_file" result="int">
      <arg name="ssl" type="SSL *" m68kreg="a0"/>
      <arg name="file" type="const char *" m68kreg="a1"/>
      <arg name="type" type="int" m68kreg="d0"/>
    </method>
    <method name="SSL_CTX_use_RSAPrivateKey_file" result="int">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
      <arg name="file" type="const char *" m68kreg="a1"/>
      <arg name="type" type="int" m68kreg="d0"/>
    </method>
    <method name="SSL_CTX_use_PrivateKey_file" result="int">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
      <arg name="file" type="const char *" m68kreg="a1"/>
      <arg name="type" type="int" m68kreg="d0"/>
    </method>
    <method name="SSL_CTX_use_certificate_file" result="int">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
      <arg name="file" type="const char *" m68kreg="a1"/>
      <arg name="type" type="int" m68kreg="d0"/>
    </method>
    <method name="SSL_CTX_use_certificate_chain_file" result="int">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
      <arg name="file" type="const char *" m68kreg="a1"/>
    </method>
    <method name="SSL_load_client_CA_file" result="STACK_OF(X509_NAME) *">
      <arg name="file" type="const char *" m68kreg="a0"/>
    </method>
    <method name="SSL_add_file_cert_subjects_to_stack" result="int">
      <arg name="stackCAs" type="STACK_OF(X509_NAME) *" m68kreg="a0"/>
      <arg name="file" type="const char *" m68kreg="a1"/>
    </method>
    <method name="SSL_add_dir_cert_subjects_to_stack" result="int">
      <arg name="stackCAs" type="STACK_OF(X509_NAME) *" m68kreg="a0"/>
      <arg name="dir" type="const char *" m68kreg="a1"/>
    </method>
    <method name="SSL_load_error_strings" result="void" status="unimplemented">
    </method>
    <method name="SSL_state_string" result="const char *">
      <arg name="s" type="const SSL *" m68kreg="a0"/>
    </method>
    <method name="SSL_rstate_string" result="const char *">
      <arg name="s" type="const SSL *" m68kreg="a0"/>
    </method>
    <method name="SSL_state_string_long" result="const char *">
      <arg name="s" type="const SSL *" m68kreg="a0"/>
    </method>
    <method name="SSL_rstate_string_long" result="const char *">
      <arg name="s" type="const SSL *" m68kreg="a0"/>
    </method>
    <method name="SSL_SESSION_get_time" result="long">
      <arg name="s" type="const SSL_SESSION *" m68kreg="a0"/>
    </method>
    <method name="SSL_SESSION_set_time" result="long">
      <arg name="s" type="SSL_SESSION *" m68kreg="a0"/>
      <arg name="t" type="long" m68kreg="d0"/>
    </method>
    <method name="SSL_SESSION_get_timeout" result="long">
      <arg name="s" type="const SSL_SESSION *" m68kreg="a0"/>
    </method>
    <method name="SSL_SESSION_set_timeout" result="long">
      <arg name="s" type="SSL_SESSION *" m68kreg="a0"/>
      <arg name="t" type="long" m68kreg="d0"/>
    </method>
    <method name="SSL_copy_session_id" result="int">
      <arg name="to" type="SSL *" m68kreg="a0"/>
      <arg name="from" type="const SSL *" m68kreg="a1"/>
    </method>
    <method name="SSL_SESSION_new" result="SSL_SESSION *">
    </method>
    <method name="SSL_SESSION_hash" result="unsigned long" status="unimplemented">
      <arg name="a" type="const SSL_SESSION *" m68kreg="a0"/>
    </method>
    <method name="SSL_SESSION_cmp" result="int" status="unimplemented">
      <arg name="a" type="const SSL_SESSION *" m68kreg="a0"/>
      <arg name="b" type="const SSL_SESSION *" m68kreg="a1"/>
    </method>
    <method name="SSL_SESSION_print" result="int">
      <arg name="fp" type="BIO *" m68kreg="a0"/>
      <arg name="ses" type="const SSL_SESSION *" m68kreg="a1"/>
    </method>
    <method name="SSL_SESSION_free" result="void">
      <arg name="ses" type="SSL_SESSION *" m68kreg="a0"/>
    </method>
    <method name="i2d_SSL_SESSION" result="int">
      <arg name="in" type="SSL_SESSION *" m68kreg="a0"/>
      <arg name="pp" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="SSL_set_session" result="int">
      <arg name="to" type="SSL *" m68kreg="a0"/>
      <arg name="session" type="SSL_SESSION *" m68kreg="a1"/>
    </method>
    <method name="SSL_CTX_add_session" result="int">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
      <arg name="session" type="SSL_SESSION *" m68kreg="a1"/>
    </method>
    <method name="SSL_CTX_remove_session" result="int">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
      <arg name="session" type="SSL_SESSION *" m68kreg="a1"/>
    </method>
    <method name="SSL_CTX_set_generate_session_id" result="int">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
      <arg name="cb" type="GEN_SESSION_CB" m68kreg="d0"/>
    </method>
    <method name="SSL_set_generate_session_id" result="int">
      <arg name="s" type="SSL *" m68kreg="a0"/>
      <arg name="cb" type="GEN_SESSION_CB" m68kreg="d0"/>
    </method>
    <method name="SSL_has_matching_session_id" result="int">
      <arg name="s" type="const SSL *" m68kreg="a0"/>
      <arg name="id" type="const unsigned char *" m68kreg="a1"/>
      <arg name="id_len" type="unsigned int" m68kreg="d0"/>
    </method>
    <method name="d2i_SSL_SESSION" result="SSL_SESSION *">
      <arg name="a" type="SSL_SESSION **" m68kreg="a0"/>
      <arg name="pp" type="const unsigned char **" m68kreg="a1"/>
      <arg name="length" type="long" m68kreg="d0"/>
    </method>
    <method name="SSL_get_peer_certificate" result="X509 *">
      <arg name="s" type="const SSL *" m68kreg="a0"/>
    </method>
    <method name="SSL_get_peer_cert_chain" result="STACK_OF(X509) *">
      <arg name="s" type="const SSL *" m68kreg="a0"/>
    </method>
    <method name="SSL_CTX_get_verify_mode" result="int">
      <arg name="ctx" type="const SSL_CTX *" m68kreg="a0"/>
    </method>
    <method name="SSL_CTX_get_verify_depth" result="int">
      <arg name="ctx" type="const SSL_CTX *" m68kreg="a0"/>
    </method>
    <method name="SSL_CTX_get_verify_callback" result="int (*)(int, X509_STORE_CTX *)">
      <arg name="ctx" type="const SSL_CTX *" m68kreg="a0"/>
    </method>
    <method name="SSL_CTX_set_verify" result="void">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
      <arg name="mode" type="int" m68kreg="d0"/>
      <arg name="callback" type="int (*)(int, X509_STORE_CTX *)" m68kreg="a1"/>
    </method>
    <method name="SSL_CTX_set_verify_depth" result="void">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
      <arg name="depth" type="int" m68kreg="d0"/>
    </method>
    <method name="SSL_CTX_set_cert_verify_callback" result="void">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
      <arg name="cb" type="int (*)(X509_STORE_CTX *, void *)" m68kreg="a1"/>
      <arg name="arg" type="void *" m68kreg="a2"/>
    </method>
    <method name="SSL_CTX_use_RSAPrivateKey" result="int">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
      <arg name="rsa" type="RSA *" m68kreg="a1"/>
    </method>
    <method name="SSL_CTX_use_RSAPrivateKey_ASN1" result="int">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
      <arg name="d" type="unsigned char *" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="SSL_CTX_use_PrivateKey" result="int">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
      <arg name="pkey" type="EVP_PKEY *" m68kreg="a1"/>
    </method>
    <method name="SSL_CTX_use_PrivateKey_ASN1" result="int">
      <arg name="pk" type="int" m68kreg="d0"/>
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
      <arg name="d" type="unsigned char *" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d1"/>
    </method>
    <method name="SSL_CTX_use_certificate" result="int">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
      <arg name="x" type="X509 *" m68kreg="a1"/>
    </method>
    <method name="SSL_CTX_use_certificate_ASN1" result="int">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
      <arg name="len" type="int" m68kreg="d0"/>
      <arg name="d" type="unsigned char *" m68kreg="a1"/>
    </method>
    <method name="SSL_CTX_set_default_passwd_cb" result="void">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
      <arg name="cb" type="pem_password_cb *" m68kreg="a1"/>
    </method>
    <method name="SSL_CTX_set_default_passwd_cb_userdata" result="void">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
      <arg name="u" type="void *" m68kreg="a1"/>
    </method>
    <method name="SSL_CTX_check_private_key" result="int">
      <arg name="ctx" type="const SSL_CTX *" m68kreg="a0"/>
    </method>
    <method name="SSL_check_private_key" result="int">
      <arg name="ctx" type="const SSL *" m68kreg="a0"/>
    </method>
    <method name="SSL_CTX_set_session_id_context" result="int">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
      <arg name="sid_ctx" type="const unsigned char *" m68kreg="a1"/>
      <arg name="sid_ctx_len" type="unsigned int" m68kreg="d0"/>
    </method>
    <method name="SSL_new" result="SSL *">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
    </method>
    <method name="SSL_set_session_id_context" result="int">
      <arg name="ssl" type="SSL *" m68kreg="a0"/>
      <arg name="sid_ctx" type="const unsigned char *" m68kreg="a1"/>
      <arg name="sid_ctx_len" type="unsigned int" m68kreg="d0"/>
    </method>
    <method name="SSL_CTX_set_purpose" result="int">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
      <arg name="purpose" type="int" m68kreg="d0"/>
    </method>
    <method name="SSL_set_purpose" result="int">
      <arg name="ssl" type="SSL *" m68kreg="a0"/>
      <arg name="purpose" type="int" m68kreg="d0"/>
    </method>
    <method name="SSL_CTX_set_trust" result="int">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
      <arg name="trust" type="int" m68kreg="d0"/>
    </method>
    <method name="SSL_set_trust" result="int">
      <arg name="ssl" type="SSL *" m68kreg="a0"/>
      <arg name="trust" type="int" m68kreg="d0"/>
    </method>
    <method name="SSL_free" result="void">
      <arg name="ssl" type="SSL *" m68kreg="a0"/>
    </method>
    <method name="SSL_accept" result="int">
      <arg name="ssl" type="SSL *" m68kreg="a0"/>
    </method>
    <method name="SSL_connect" result="int">
      <arg name="ssl" type="SSL *" m68kreg="a0"/>
    </method>
    <method name="SSL_read" result="int">
      <arg name="ssl" type="SSL *" m68kreg="a0"/>
      <arg name="buf" type="void *" m68kreg="a1"/>
      <arg name="num" type="int" m68kreg="d0"/>
    </method>
    <method name="SSL_peek" result="int">
      <arg name="ssl" type="SSL *" m68kreg="a0"/>
      <arg name="buf" type="void *" m68kreg="a1"/>
      <arg name="num" type="int" m68kreg="d0"/>
    </method>
    <method name="SSL_write" result="int">
      <arg name="ssl" type="SSL *" m68kreg="a0"/>
      <arg name="buf" type="const void *" m68kreg="a1"/>
      <arg name="num" type="int" m68kreg="d0"/>
    </method>
    <method name="SSL_ctrl" result="long">
      <arg name="ssl" type="SSL *" m68kreg="a0"/>
      <arg name="cmd" type="int" m68kreg="d0"/>
      <arg name="larg" type="long" m68kreg="d1"/>
      <arg name="parg" type="void *" m68kreg="a1"/>
    </method>
    <method name="SSL_callback_ctrl" result="long">
      <arg name="a" type="SSL *" m68kreg="a0"/>
      <arg name="a1" type="int" m68kreg="d0"/>
      <arg name="b" type="void (*)()" m68kreg="a1"/>
    </method>
    <method name="SSL_CTX_ctrl" result="long">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
      <arg name="cmd" type="int" m68kreg="d0"/>
      <arg name="larg" type="long" m68kreg="d1"/>
      <arg name="parg" type="void *" m68kreg="a1"/>
    </method>
    <method name="SSL_CTX_callback_ctrl" result="long">
      <arg name="a1" type="SSL_CTX *" m68kreg="a0"/>
      <arg name="a2" type="int" m68kreg="d0"/>
      <arg name="a3" type="void (*)(void)" m68kreg="a1"/>
    </method>
    <method name="SSL_get_error" result="int">
      <arg name="s" type="const SSL *" m68kreg="a0"/>
      <arg name="ret_code" type="int" m68kreg="d0"/>
    </method>
    <method name="SSL_get_version" result="const char *">
      <arg name="s" type="const SSL *" m68kreg="a0"/>
    </method>
    <method name="SSL_CTX_set_ssl_version" result="int">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
      <arg name="meth" type="const SSL_METHOD *" m68kreg="a1"/>
    </method>
    <method name="SSLv2_method" result="const SSL_METHOD *" status="unimplemented">
    </method>
    <method name="SSLv2_server_method" result="const SSL_METHOD *" status="unimplemented">
    </method>
    <method name="SSLv2_client_method" result="const SSL_METHOD *" status="unimplemented">
    </method>
    <method name="SSLv3_method" result="const SSL_METHOD *" status="unimplemented">
    </method>
    <method name="SSLv3_server_method" result="const SSL_METHOD *" status="unimplemented">
    </method>
    <method name="SSLv3_client_method" result="const SSL_METHOD *" status="unimplemented">
    </method>
    <method name="SSLv23_method" result="const SSL_METHOD *" status="unimplemented">
    </method>
    <method name="SSLv23_server_method" result="const SSL_METHOD *" status="unimplemented">
    </method>
    <method name="SSLv23_client_method" result="const SSL_METHOD *" status="unimplemented">
    </method>
    <method name="TLSv1_method" result="const SSL_METHOD *">
    </method>
    <method name="TLSv1_server_method" result="const SSL_METHOD *">
    </method>
    <method name="TLSv1_client_method" result="const SSL_METHOD *">
    </method>
    <method name="SSL_get_ciphers" result="STACK_OF(SSL_CIPHER) *">
      <arg name="s" type="const SSL *" m68kreg="a0"/>
    </method>
    <method name="SSL_do_handshake" result="int">
      <arg name="s" type="SSL *" m68kreg="a0"/>
    </method>
    <method name="SSL_renegotiate" result="int">
      <arg name="s" type="SSL *" m68kreg="a0"/>
    </method>
    <method name="SSL_renegotiate_pending" result="int">
      <arg name="s" type="const SSL *" m68kreg="a0"/>
    </method>
    <method name="SSL_shutdown" result="int">
      <arg name="s" type="SSL *" m68kreg="a0"/>
    </method>
    <method name="SSL_get_ssl_method" result="const SSL_METHOD *">
      <arg name="s" type="const SSL *" m68kreg="a0"/>
    </method>
    <method name="SSL_set_ssl_method" result="int">
      <arg name="s" type="SSL *" m68kreg="a0"/>
      <arg name="method" type="SSL_METHOD *" m68kreg="a1"/>
    </method>
    <method name="SSL_alert_type_string_long" result="const char *">
      <arg name="value" type="int" m68kreg="d0"/>
    </method>
    <method name="SSL_alert_type_string" result="const char *">
      <arg name="value" type="int" m68kreg="d0"/>
    </method>
    <method name="SSL_alert_desc_string_long" result="const char *">
      <arg name="value" type="int" m68kreg="d0"/>
    </method>
    <method name="SSL_alert_desc_string" result="const char *">
      <arg name="value" type="int" m68kreg="d0"/>
    </method>
    <method name="SSL_set_client_CA_list" result="void">
      <arg name="s" type="SSL *" m68kreg="a0"/>
      <arg name="name_list" type="STACK_OF(X509_NAME) *" m68kreg="a1"/>
    </method>
    <method name="SSL_CTX_set_client_CA_list" result="void">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
      <arg name="name_list" type="STACK_OF(X509_NAME) *" m68kreg="a1"/>
    </method>
    <method name="SSL_get_client_CA_list" result="STACK_OF(X509_NAME) *">
      <arg name="s" type="const SSL *" m68kreg="a0"/>
    </method>
    <method name="SSL_CTX_get_client_CA_list" result="STACK_OF(X509_NAME) *">
      <arg name="s" type="const SSL_CTX *" m68kreg="a0"/>
    </method>
    <method name="SSL_add_client_CA" result="int">
      <arg name="ssl" type="SSL *" m68kreg="a0"/>
      <arg name="x" type="X509 *" m68kreg="a1"/>
    </method>
    <method name="SSL_CTX_add_client_CA" result="int">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
      <arg name="x" type="X509 *" m68kreg="a1"/>
    </method>
    <method name="SSL_set_connect_state" result="void">
      <arg name="s" type="SSL *" m68kreg="a0"/>
    </method>
    <method name="SSL_set_accept_state" result="void">
      <arg name="s" type="SSL *" m68kreg="a0"/>
    </method>
    <method name="SSL_get_default_timeout" result="long">
      <arg name="s" type="const SSL *" m68kreg="a0"/>
    </method>
    <method name="SSL_library_init" result="int" status="unimplemented">
    </method>
    <method name="SSL_CIPHER_description" result="char *">
      <arg name="a1" type="const SSL_CIPHER *" m68kreg="a0"/>
      <arg name="buf" type="char *" m68kreg="a1"/>
      <arg name="size" type="int" m68kreg="d0"/>
    </method>
    <method name="SSL_dup_CA_list" result="STACK_OF(X509_NAME) *">
      <arg name="sk" type="const STACK_OF(X509_NAME) *" m68kreg="a0"/>
    </method>
    <method name="SSL_dup" result="SSL *">
      <arg name="ssl" type="SSL *" m68kreg="a0"/>
    </method>
    <method name="SSL_get_certificate" result="X509 *">
      <arg name="ssl" type="const SSL *" m68kreg="a0"/>
    </method>
    <method name="SSL_get_privatekey" result="struct evp_pkey_st *">
      <arg name="ssl" type="const SSL *" m68kreg="a0"/>
    </method>
    <method name="SSL_CTX_set_quiet_shutdown" result="void">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
      <arg name="mode" type="int" m68kreg="d0"/>
    </method>
    <method name="SSL_CTX_get_quiet_shutdown" result="int">
      <arg name="ctx" type="const SSL_CTX *" m68kreg="a0"/>
    </method>
    <method name="SSL_set_quiet_shutdown" result="void">
      <arg name="ssl" type="SSL *" m68kreg="a0"/>
      <arg name="mode" type="int" m68kreg="d0"/>
    </method>
    <method name="SSL_get_quiet_shutdown" result="int">
      <arg name="ssl" type="const SSL *" m68kreg="a0"/>
    </method>
    <method name="SSL_set_shutdown" result="void">
      <arg name="ssl" type="SSL *" m68kreg="a0"/>
      <arg name="mode" type="int" m68kreg="d0"/>
    </method>
    <method name="SSL_get_shutdown" result="int">
      <arg name="ssl" type="const SSL *" m68kreg="a0"/>
    </method>
    <method name="SSL_version" result="int">
      <arg name="ssl" type="const SSL *" m68kreg="a0"/>
    </method>
    <method name="SSL_CTX_set_default_verify_paths" result="int">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
    </method>
    <method name="SSL_CTX_load_verify_locations" result="int">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
      <arg name="CAfile" type="const char *" m68kreg="a1"/>
      <arg name="CApath" type="const char *" m68kreg="a2"/>
    </method>
    <method name="SSL_get_session" result="SSL_SESSION *">
      <arg name="ssl" type="const SSL *" m68kreg="a0"/>
    </method>
    <method name="SSL_get1_session" result="SSL_SESSION *">
      <arg name="ssl" type="SSL *" m68kreg="a0"/>
    </method>
    <method name="SSL_get_SSL_CTX" result="SSL_CTX *">
      <arg name="ssl" type="const SSL *" m68kreg="a0"/>
    </method>
    <method name="SSL_set_info_callback" result="void">
      <arg name="ssl" type="SSL *" m68kreg="a0"/>
      <arg name="cb" type="void (*)(const SSL *ssl, int type, int val)" m68kreg="a1"/>
    </method>
    <method name="SSL_get_info_callback" result="void (*)(const SSL *ssl, int type, int val)">
      <arg name="ssl" type="const SSL *" m68kreg="a0"/>
    </method>
    <method name="SSL_state" result="int" status="unimplemented">
      <arg name="ssl" type="const SSL *" m68kreg="a0"/>
    </method>
    <method name="SSL_set_verify_result" result="void">
      <arg name="ssl" type="SSL *" m68kreg="a0"/>
      <arg name="v" type="long" m68kreg="d0"/>
    </method>
    <method name="SSL_get_verify_result" result="long">
      <arg name="ssl" type="const SSL *" m68kreg="a0"/>
    </method>
    <method name="SSL_set_ex_data" result="int">
      <arg name="ssl" type="SSL *" m68kreg="a0"/>
      <arg name="idx" type="int" m68kreg="d0"/>
      <arg name="data" type="void *" m68kreg="a1"/>
    </method>
    <method name="SSL_get_ex_data" result="void *">
      <arg name="ssl" type="const SSL *" m68kreg="a0"/>
      <arg name="idx" type="int" m68kreg="d0"/>
    </method>
    <method name="SSL_get_ex_new_index" result="int" status="unimplemented">
      <arg name="argl" type="long" m68kreg="d0"/>
      <arg name="argp" type="void *" m68kreg="a0"/>
      <arg name="new_func" type="CRYPTO_EX_new *" m68kreg="a1"/>
      <arg name="dup_func" type="CRYPTO_EX_dup *" m68kreg="a2"/>
      <arg name="free_func" type="CRYPTO_EX_free *" m68kreg="a3"/>
    </method>
    <method name="SSL_SESSION_set_ex_data" result="int">
      <arg name="ss" type="SSL_SESSION *" m68kreg="a0"/>
      <arg name="idx" type="int" m68kreg="d0"/>
      <arg name="data" type="void *" m68kreg="a1"/>
    </method>
    <method name="SSL_SESSION_get_ex_data" result="void *">
      <arg name="ss" type="const SSL_SESSION *" m68kreg="a0"/>
      <arg name="idx" type="int" m68kreg="d0"/>
    </method>
    <method name="SSL_SESSION_get_ex_new_index" result="int" status="unimplemented">
      <arg name="argl" type="long" m68kreg="d0"/>
      <arg name="argp" type="void *" m68kreg="a0"/>
      <arg name="new_func" type="CRYPTO_EX_new *" m68kreg="a1"/>
      <arg name="dup_func" type="CRYPTO_EX_dup *" m68kreg="a2"/>
      <arg name="free_func" type="CRYPTO_EX_free *" m68kreg="a3"/>
    </method>
    <method name="SSL_CTX_set_ex_data" result="int">
      <arg name="ssl" type="SSL_CTX *" m68kreg="a0"/>
      <arg name="idx" type="int" m68kreg="d0"/>
      <arg name="data" type="void *" m68kreg="a1"/>
    </method>
    <method name="SSL_CTX_get_ex_data" result="void *">
      <arg name="ssl" type="const SSL_CTX *" m68kreg="a0"/>
      <arg name="idx" type="int" m68kreg="d0"/>
    </method>
    <method name="SSL_CTX_get_ex_new_index" result="int" status="unimplemented">
      <arg name="argl" type="long" m68kreg="d0"/>
      <arg name="argp" type="void *" m68kreg="a0"/>
      <arg name="new_func" type="CRYPTO_EX_new *" m68kreg="a1"/>
      <arg name="dup_func" type="CRYPTO_EX_dup *" m68kreg="a2"/>
      <arg name="free_func" type="CRYPTO_EX_free *" m68kreg="a3"/>
    </method>
    <method name="SSL_get_ex_data_X509_STORE_CTX_idx" result="int">
    </method>
    <method name="SSL_CTX_set_tmp_rsa_callback" result="void" status="unimplemented">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
      <arg name="cb" type="RSA * (*)(SSL *ssl, int is_export, int keylength)" m68kreg="a1"/>
    </method>
    <method name="SSL_set_tmp_rsa_callback" result="void" status="unimplemented">
      <arg name="ssl" type="SSL *" m68kreg="a0"/>
      <arg name="cb" type="RSA * (*)(SSL *ssl, int is_export, int keylength)" m68kreg="a1"/>
    </method>
    <method name="SSL_CTX_set_tmp_dh_callback" result="void">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
      <arg name="dh" type="DH * (*)(SSL *ssl, int is_export, int keylength)" m68kreg="a1"/>
    </method>
    <method name="SSL_set_tmp_dh_callback" result="void">
      <arg name="ssl" type="SSL *" m68kreg="a0"/>
      <arg name="dh" type="DH * (*)(SSL *ssl, int is_export, int keylength)" m68kreg="a1"/>
    </method>
    <method name="SSL_COMP_add_compression_method" result="int">
      <arg name="id" type="int" m68kreg="d0"/>
      <arg name="cm" type="COMP_METHOD *" m68kreg="a0"/>
    </method>
    <method name="ERR_load_SSL_strings" result="int">
    </method>
    <method name="OPENSSL_sk_num" result="int">
      <arg name="a" type="const OPENSSL_STACK *" m68kreg="a0"/>
    </method>
    <method name="OPENSSL_sk_value" result="void *">
      <arg name="a" type="const OPENSSL_STACK *" m68kreg="a0"/>
      <arg name="b" type="int" m68kreg="d0"/>
    </method>
    <method name="OPENSSL_sk_set" result="void *">
      <arg name="a" type="OPENSSL_STACK *" m68kreg="a0"/>
      <arg name="b" type="int" m68kreg="d0"/>
      <arg name="c" type="const void *" m68kreg="a1"/>
    </method>
    <method name="OPENSSL_sk_new" result="OPENSSL_STACK *">
      <arg name="cmp" type="int (*)(const void *, const void *)" m68kreg="a0"/>
    </method>
    <method name="OPENSSL_sk_new_null" result="OPENSSL_STACK *">
    </method>
    <method name="OPENSSL_sk_free" result="void">
      <arg name="a" type="OPENSSL_STACK *" m68kreg="a0"/>
    </method>
    <method name="OPENSSL_sk_pop_free" result="void">
      <arg name="st" type="OPENSSL_STACK *" m68kreg="a0"/>
      <arg name="func" type="void (*)(void *)" m68kreg="a1"/>
    </method>
    <method name="OPENSSL_sk_insert" result="int">
      <arg name="sk" type="OPENSSL_STACK *" m68kreg="a0"/>
      <arg name="data" type="const void *" m68kreg="a1"/>
      <arg name="where" type="int" m68kreg="d0"/>
    </method>
    <method name="OPENSSL_sk_delete" result="void *">
      <arg name="st" type="OPENSSL_STACK *" m68kreg="a0"/>
      <arg name="loc" type="int" m68kreg="d0"/>
    </method>
    <method name="OPENSSL_sk_delete_ptr" result="void *">
      <arg name="st" type="OPENSSL_STACK *" m68kreg="a0"/>
      <arg name="p" type="const void *" m68kreg="a1"/>
    </method>
    <method name="OPENSSL_sk_find" result="int">
      <arg name="st" type="OPENSSL_STACK *" m68kreg="a0"/>
      <arg name="data" type="const void *" m68kreg="a1"/>
    </method>
    <method name="OPENSSL_sk_push" result="int">
      <arg name="st" type="OPENSSL_STACK *" m68kreg="a0"/>
      <arg name="data" type="const void *" m68kreg="a1"/>
    </method>
    <method name="OPENSSL_sk_unshift" result="int">
      <arg name="st" type="OPENSSL_STACK *" m68kreg="a0"/>
      <arg name="data" type="const void *" m68kreg="a1"/>
    </method>
    <method name="OPENSSL_sk_shift" result="void *">
      <arg name="st" type="OPENSSL_STACK *" m68kreg="a0"/>
    </method>
    <method name="OPENSSL_sk_pop" result="void *">
      <arg name="st" type="OPENSSL_STACK *" m68kreg="a0"/>
    </method>
    <method name="OPENSSL_sk_zero" result="void">
      <arg name="st" type="OPENSSL_STACK *" m68kreg="a0"/>
    </method>
    <method name="OPENSSL_sk_set_cmp_func" result="int (*)(const void *, const void *)">
      <arg name="sk" type="OPENSSL_STACK *" m68kreg="a0"/>
      <arg name="c" type="int (*)(const void *, const void *)" m68kreg="a1"/>
    </method>
    <method name="OPENSSL_sk_dup" result="OPENSSL_STACK *">
      <arg name="st" type="const OPENSSL_STACK *" m68kreg="a0"/>
    </method>
    <method name="OPENSSL_sk_sort" result="void">
      <arg name="st" type="OPENSSL_STACK *" m68kreg="a0"/>
    </method>
    <method name="OPENSSL_sk_is_sorted" result="int">
      <arg name="st" type="const OPENSSL_STACK *" m68kreg="a0"/>
    </method>
    <method name="ms_time_new" result="char *" status="unimplemented">
    </method>
    <method name="ms_time_free" result="void" status="unimplemented">
      <arg name="a" type="char *" m68kreg="a0"/>
    </method>
    <method name="ms_time_get" result="void" status="unimplemented">
      <arg name="a" type="char *" m68kreg="a0"/>
    </method>
    <method name="ms_time_diff" result="double" status="unimplemented">
      <arg name="start" type="char *" m68kreg="a0"/>
      <arg name="end" type="char *" m68kreg="a1"/>
    </method>
    <method name="ms_time_cmp" result="int" status="unimplemented">
      <arg name="ap" type="char *" m68kreg="a0"/>
      <arg name="bp" type="char *" m68kreg="a1"/>
    </method>
    <method name="TXT_DB_read" result="TXT_DB *">
      <arg name="in" type="BIO *" m68kreg="a0"/>
      <arg name="num" type="int" m68kreg="d0"/>
    </method>
    <method name="TXT_DB_write" result="long">
      <arg name="out" type="BIO *" m68kreg="a0"/>
      <arg name="db" type="TXT_DB *" m68kreg="a1"/>
    </method>
    <method name="TXT_DB_create_index" result="int">
      <arg name="db" type="TXT_DB *" m68kreg="a0"/>
      <arg name="field" type="int" m68kreg="d0"/>
      <arg name="qual" type="int (*)(OPENSSL_STRING *)" m68kreg="a1"/>
      <arg name="hash" type="OPENSSL_LH_HASHFUNC" m68kreg="d1"/>
      <arg name="cmp" type="OPENSSL_LH_COMPFUNC" m68kreg="d2"/>
    </method>
    <method name="TXT_DB_free" result="void">
      <arg name="db" type="TXT_DB *" m68kreg="a0"/>
    </method>
    <method name="TXT_DB_get_by_index" result="char **">
      <arg name="db" type="TXT_DB *" m68kreg="a0"/>
      <arg name="idx" type="int" m68kreg="d0"/>
      <arg name="value" type="char **" m68kreg="a1"/>
    </method>
    <method name="TXT_DB_insert" result="int">
      <arg name="db" type="TXT_DB *" m68kreg="a0"/>
      <arg name="value" type="char **" m68kreg="a1"/>
    </method>
    <method name="UI_new" result="UI *">
    </method>
    <method name="UI_new_method" result="UI *">
      <arg name="method" type="const UI_METHOD *" m68kreg="a0"/>
    </method>
    <method name="UI_free" result="void">
      <arg name="ui" type="UI *" m68kreg="a0"/>
    </method>
    <method name="UI_add_input_string" result="int">
      <arg name="ui" type="UI *" m68kreg="a0"/>
      <arg name="prompt" type="const char *" m68kreg="a1"/>
      <arg name="flags" type="int" m68kreg="d0"/>
      <arg name="result_buf" type="char *" m68kreg="a2"/>
      <arg name="minsize" type="int" m68kreg="d1"/>
      <arg name="maxsize" type="int" m68kreg="d2"/>
    </method>
    <method name="UI_dup_input_string" result="int">
      <arg name="ui" type="UI *" m68kreg="a0"/>
      <arg name="prompt" type="const char *" m68kreg="a1"/>
      <arg name="flags" type="int" m68kreg="d0"/>
      <arg name="result_buf" type="char *" m68kreg="a2"/>
      <arg name="minsize" type="int" m68kreg="d1"/>
      <arg name="maxsize" type="int" m68kreg="d2"/>
    </method>
    <method name="UI_add_verify_string" result="int">
      <arg name="ui" type="UI *" m68kreg="a0"/>
      <arg name="prompt" type="const char *" m68kreg="a1"/>
      <arg name="flags" type="int" m68kreg="d0"/>
      <arg name="result_buf" type="char *" m68kreg="a2"/>
      <arg name="minsize" type="int" m68kreg="d1"/>
      <arg name="maxsize" type="int" m68kreg="d2"/>
      <arg name="test_buf" type="const char *" m68kreg="a3"/>
    </method>
    <method name="UI_dup_verify_string" result="int">
      <arg name="ui" type="UI *" m68kreg="a0"/>
      <arg name="prompt" type="const char *" m68kreg="a1"/>
      <arg name="flags" type="int" m68kreg="d0"/>
      <arg name="result_buf" type="char *" m68kreg="a2"/>
      <arg name="minsize" type="int" m68kreg="d1"/>
      <arg name="maxsize" type="int" m68kreg="d2"/>
      <arg name="test_buf" type="const char *" m68kreg="a3"/>
    </method>
    <method name="UI_add_input_boolean" result="int">
      <arg name="ui" type="UI *" m68kreg="a0"/>
      <arg name="prompt" type="const char *" m68kreg="a1"/>
      <arg name="action_desc" type="const char *" m68kreg="a2"/>
      <arg name="ok_chars" type="const char *" m68kreg="a3"/>
      <arg name="cancel_chars" type="const char *" m68kreg="d0"/>
      <arg name="flags" type="int" m68kreg="d1"/>
      <arg name="result_buf" type="char *" m68kreg="d2"/>
    </method>
    <method name="UI_dup_input_boolean" result="int">
      <arg name="ui" type="UI *" m68kreg="a0"/>
      <arg name="prompt" type="const char *" m68kreg="a1"/>
      <arg name="action_desc" type="const char *" m68kreg="a2"/>
      <arg name="ok_chars" type="const char *" m68kreg="a3"/>
      <arg name="cancel_chars" type="const char *" m68kreg="d0"/>
      <arg name="flags" type="int" m68kreg="d1"/>
      <arg name="result_buf" type="char *" m68kreg="d2"/>
    </method>
    <method name="UI_add_info_string" result="int">
      <arg name="ui" type="UI *" m68kreg="a0"/>
      <arg name="text" type="const char *" m68kreg="a1"/>
    </method>
    <method name="UI_dup_info_string" result="int">
      <arg name="ui" type="UI *" m68kreg="a0"/>
      <arg name="text" type="const char *" m68kreg="a1"/>
    </method>
    <method name="UI_add_error_string" result="int">
      <arg name="ui" type="UI *" m68kreg="a0"/>
      <arg name="text" type="const char *" m68kreg="a1"/>
    </method>
    <method name="UI_dup_error_string" result="int">
      <arg name="ui" type="UI *" m68kreg="a0"/>
      <arg name="text" type="const char *" m68kreg="a1"/>
    </method>
    <method name="UI_construct_prompt" result="char *">
      <arg name="ui_method" type="UI *" m68kreg="a0"/>
      <arg name="object_desc" type="const char *" m68kreg="a1"/>
      <arg name="object_name" type="const char *" m68kreg="a2"/>
    </method>
    <method name="UI_add_user_data" result="void *">
      <arg name="ui" type="UI *" m68kreg="a0"/>
      <arg name="user_data" type="void *" m68kreg="a1"/>
    </method>
    <method name="UI_get0_user_data" result="void *">
      <arg name="ui" type="UI *" m68kreg="a0"/>
    </method>
    <method name="UI_get0_result" result="const char *">
      <arg name="ui" type="UI *" m68kreg="a0"/>
      <arg name="i" type="int" m68kreg="d0"/>
    </method>
    <method name="UI_process" result="int">
      <arg name="ui" type="UI *" m68kreg="a0"/>
    </method>
    <method name="UI_ctrl" result="int">
      <arg name="ui" type="UI *" m68kreg="a0"/>
      <arg name="cmd" type="int" m68kreg="d0"/>
      <arg name="i" type="long" m68kreg="d1"/>
      <arg name="p" type="void *" m68kreg="a1"/>
      <arg name="f" type="void (*)()" m68kreg="a2"/>
    </method>
    <method name="UI_get_ex_new_index" result="int" status="unimplemented">
      <arg name="argl" type="long" m68kreg="d0"/>
      <arg name="argp" type="void *" m68kreg="a0"/>
      <arg name="new_func" type="CRYPTO_EX_new *" m68kreg="a1"/>
      <arg name="dup_func" type="CRYPTO_EX_dup *" m68kreg="a2"/>
      <arg name="free_func" type="CRYPTO_EX_free *" m68kreg="a3"/>
    </method>
    <method name="UI_set_ex_data" result="int">
      <arg name="r" type="UI *" m68kreg="a0"/>
      <arg name="idx" type="int" m68kreg="d0"/>
      <arg name="arg" type="void *" m68kreg="a1"/>
    </method>
    <method name="UI_get_ex_data" result="void *">
      <arg name="r" type="UI *" m68kreg="a0"/>
      <arg name="idx" type="int" m68kreg="d0"/>
    </method>
    <method name="UI_set_default_method" result="void">
      <arg name="meth" type="const UI_METHOD *" m68kreg="a0"/>
    </method>
    <method name="UI_get_default_method" result="const UI_METHOD *">
    </method>
    <method name="UI_get_method" result="const UI_METHOD *">
      <arg name="ui" type="UI *" m68kreg="a0"/>
    </method>
    <method name="UI_set_method" result="const UI_METHOD *">
      <arg name="ui" type="UI *" m68kreg="a0"/>
      <arg name="meth" type="const UI_METHOD *" m68kreg="a1"/>
    </method>
    <method name="UI_OpenSSL" result="UI_METHOD *">
    </method>
    <method name="UI_create_method" result="UI_METHOD *">
      <arg name="name" type="const char *" m68kreg="a0"/>
    </method>
    <method name="UI_destroy_method" result="void">
      <arg name="ui_method" type="UI_METHOD *" m68kreg="a0"/>
    </method>
    <method name="UI_method_set_opener" result="int">
      <arg name="method" type="UI_METHOD *" m68kreg="a0"/>
      <arg name="opener" type="int (*)(UI *ui)" m68kreg="a1"/>
    </method>
    <method name="UI_method_set_writer" result="int">
      <arg name="method" type="UI_METHOD *" m68kreg="a0"/>
      <arg name="writer" type="int (*)(UI *ui, UI_STRING *uis)" m68kreg="a1"/>
    </method>
    <method name="UI_method_set_flusher" result="int">
      <arg name="method" type="UI_METHOD *" m68kreg="a0"/>
      <arg name="flusher" type="int (*)(UI *ui)" m68kreg="a1"/>
    </method>
    <method name="UI_method_set_reader" result="int">
      <arg name="method" type="UI_METHOD *" m68kreg="a0"/>
      <arg name="reader" type="int (*)(UI *ui, UI_STRING *uis)" m68kreg="a1"/>
    </method>
    <method name="UI_method_set_closer" result="int">
      <arg name="method" type="UI_METHOD *" m68kreg="a0"/>
      <arg name="closer" type="int (*)(UI *ui)" m68kreg="a1"/>
    </method>
    <method name="UI_method_get_opener" result="int (*)(UI *)">
      <arg name="method" type="const UI_METHOD *" m68kreg="a0"/>
    </method>
    <method name="UI_method_get_writer" result="int (*)(UI *, UI_STRING *)">
      <arg name="method" type="const UI_METHOD *" m68kreg="a0"/>
    </method>
    <method name="UI_method_get_flusher" result="int (*)(UI *)">
      <arg name="method" type="const UI_METHOD *" m68kreg="a0"/>
    </method>
    <method name="UI_method_get_reader" result="int (*)(UI *, UI_STRING *)">
      <arg name="method" type="const UI_METHOD *" m68kreg="a0"/>
    </method>
    <method name="UI_method_get_closer" result="int (*)(UI *)">
      <arg name="method" type="const UI_METHOD *" m68kreg="a0"/>
    </method>
    <method name="UI_get_string_type" result="enum UI_string_types">
      <arg name="uis" type="UI_STRING *" m68kreg="a0"/>
    </method>
    <method name="UI_get_input_flags" result="int">
      <arg name="uis" type="UI_STRING *" m68kreg="a0"/>
    </method>
    <method name="UI_get0_output_string" result="const char *">
      <arg name="uis" type="UI_STRING *" m68kreg="a0"/>
    </method>
    <method name="UI_get0_action_string" result="const char *">
      <arg name="uis" type="UI_STRING *" m68kreg="a0"/>
    </method>
    <method name="UI_get0_result_string" result="const char *">
      <arg name="uis" type="UI_STRING *" m68kreg="a0"/>
    </method>
    <method name="UI_get0_test_string" result="const char *">
      <arg name="uis" type="UI_STRING *" m68kreg="a0"/>
    </method>
    <method name="UI_get_result_minsize" result="int">
      <arg name="uis" type="UI_STRING *" m68kreg="a0"/>
    </method>
    <method name="UI_get_result_maxsize" result="int">
      <arg name="uis" type="UI_STRING *" m68kreg="a0"/>
    </method>
    <method name="UI_set_result" result="int">
      <arg name="ui" type="UI *" m68kreg="a0"/>
      <arg name="uis" type="UI_STRING *" m68kreg="a1"/>
      <arg name="result" type="const char *" m68kreg="a2"/>
    </method>
    <method name="UI_UTIL_read_pw_string" result="int">
      <arg name="buf" type="char *" m68kreg="a0"/>
      <arg name="length" type="int" m68kreg="d0"/>
      <arg name="prompt" type="const char *" m68kreg="a1"/>
      <arg name="verify" type="int" m68kreg="d1"/>
    </method>
    <method name="UI_UTIL_read_pw" result="int">
      <arg name="buf" type="char *" m68kreg="a0"/>
      <arg name="buff" type="char *" m68kreg="a1"/>
      <arg name="size" type="int" m68kreg="d0"/>
      <arg name="prompt" type="const char *" m68kreg="a2"/>
      <arg name="verify" type="int" m68kreg="d1"/>
    </method>
    <method name="ERR_load_UI_strings" result="int">
    </method>
    <method name="_ossl_old_des_read_pw_string" result="int" status="unimplemented">
      <arg name="buf" type="char *" m68kreg="a0"/>
      <arg name="length" type="int" m68kreg="d0"/>
      <arg name="prompt" type="const char *" m68kreg="a1"/>
      <arg name="verify" type="int" m68kreg="d1"/>
    </method>
    <method name="_ossl_old_des_read_pw" result="int" status="unimplemented">
      <arg name="buf" type="char *" m68kreg="a0"/>
      <arg name="buff" type="char *" m68kreg="a1"/>
      <arg name="size" type="int" m68kreg="d0"/>
      <arg name="prompt" type="const char *" m68kreg="a2"/>
      <arg name="verify" type="int" m68kreg="d1"/>
    </method>
    <method name="X509_verify_cert_error_string" result="const char *">
      <arg name="n" type="long" m68kreg="d0"/>
    </method>
    <method name="X509_verify" result="int">
      <arg name="a" type="X509 *" m68kreg="a0"/>
      <arg name="r" type="EVP_PKEY *" m68kreg="a1"/>
    </method>
    <method name="X509_REQ_verify" result="int">
      <arg name="a" type="X509_REQ *" m68kreg="a0"/>
      <arg name="r" type="EVP_PKEY *" m68kreg="a1"/>
    </method>
    <method name="X509_CRL_verify" result="int">
      <arg name="a" type="X509_CRL *" m68kreg="a0"/>
      <arg name="r" type="EVP_PKEY *" m68kreg="a1"/>
    </method>
    <method name="NETSCAPE_SPKI_verify" result="int">
      <arg name="a" type="NETSCAPE_SPKI *" m68kreg="a0"/>
      <arg name="r" type="EVP_PKEY *" m68kreg="a1"/>
    </method>
    <method name="NETSCAPE_SPKI_b64_decode" result="NETSCAPE_SPKI *">
      <arg name="str" type="const char *" m68kreg="a0"/>
      <arg name="len" type="int" m68kreg="d0"/>
    </method>
    <method name="NETSCAPE_SPKI_b64_encode" result="char *">
      <arg name="x" type="NETSCAPE_SPKI *" m68kreg="a0"/>
    </method>
    <method name="NETSCAPE_SPKI_get_pubkey" result="EVP_PKEY *">
      <arg name="x" type="NETSCAPE_SPKI *" m68kreg="a0"/>
    </method>
    <method name="NETSCAPE_SPKI_set_pubkey" result="int">
      <arg name="x" type="NETSCAPE_SPKI *" m68kreg="a0"/>
      <arg name="pkey" type="EVP_PKEY *" m68kreg="a1"/>
    </method>
    <method name="NETSCAPE_SPKI_print" result="int">
      <arg name="out" type="BIO *" m68kreg="a0"/>
      <arg name="spki" type="NETSCAPE_SPKI *" m68kreg="a1"/>
    </method>
    <method name="X509_signature_print" result="int">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="alg" type="const X509_ALGOR *" m68kreg="a1"/>
      <arg name="sig" type="const ASN1_STRING *" m68kreg="a2"/>
    </method>
    <method name="X509_sign" result="int">
      <arg name="x" type="X509 *" m68kreg="a0"/>
      <arg name="pkey" type="EVP_PKEY *" m68kreg="a1"/>
      <arg name="md" type="const EVP_MD *" m68kreg="a2"/>
    </method>
    <method name="X509_REQ_sign" result="int">
      <arg name="x" type="X509_REQ *" m68kreg="a0"/>
      <arg name="pkey" type="EVP_PKEY *" m68kreg="a1"/>
      <arg name="md" type="const EVP_MD *" m68kreg="a2"/>
    </method>
    <method name="X509_CRL_sign" result="int">
      <arg name="x" type="X509_CRL *" m68kreg="a0"/>
      <arg name="pkey" type="EVP_PKEY *" m68kreg="a1"/>
      <arg name="md" type="const EVP_MD *" m68kreg="a2"/>
    </method>
    <method name="NETSCAPE_SPKI_sign" result="int">
      <arg name="x" type="NETSCAPE_SPKI *" m68kreg="a0"/>
      <arg name="pkey" type="EVP_PKEY *" m68kreg="a1"/>
      <arg name="md" type="const EVP_MD *" m68kreg="a2"/>
    </method>
    <method name="X509_pubkey_digest" result="int">
      <arg name="data" type="const X509 *" m68kreg="a0"/>
      <arg name="type" type="const EVP_MD *" m68kreg="a1"/>
      <arg name="md" type="unsigned char *" m68kreg="a2"/>
      <arg name="len" type="unsigned int *" m68kreg="a3"/>
    </method>
    <method name="X509_digest" result="int">
      <arg name="data" type="const X509 *" m68kreg="a0"/>
      <arg name="type" type="const EVP_MD *" m68kreg="a1"/>
      <arg name="md" type="unsigned char *" m68kreg="a2"/>
      <arg name="len" type="unsigned int *" m68kreg="a3"/>
    </method>
    <method name="X509_CRL_digest" result="int">
      <arg name="data" type="const X509_CRL *" m68kreg="a0"/>
      <arg name="type" type="const EVP_MD *" m68kreg="a1"/>
      <arg name="md" type="unsigned char *" m68kreg="a2"/>
      <arg name="len" type="unsigned int *" m68kreg="a3"/>
    </method>
    <method name="X509_REQ_digest" result="int">
      <arg name="data" type="const X509_REQ *" m68kreg="a0"/>
      <arg name="type" type="const EVP_MD *" m68kreg="a1"/>
      <arg name="md" type="unsigned char *" m68kreg="a2"/>
      <arg name="len" type="unsigned int *" m68kreg="a3"/>
    </method>
    <method name="X509_NAME_digest" result="int">
      <arg name="data" type="const X509_NAME *" m68kreg="a0"/>
      <arg name="type" type="const EVP_MD *" m68kreg="a1"/>
      <arg name="md" type="unsigned char *" m68kreg="a2"/>
      <arg name="len" type="unsigned int *" m68kreg="a3"/>
    </method>
    <method name="d2i_X509_bio" result="X509 *">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="x509" type="X509 **" m68kreg="a1"/>
    </method>
    <method name="i2d_X509_bio" result="int">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="x509" type="X509 *" m68kreg="a1"/>
    </method>
    <method name="d2i_X509_CRL_bio" result="X509_CRL *">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="crl" type="X509_CRL **" m68kreg="a1"/>
    </method>
    <method name="i2d_X509_CRL_bio" result="int">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="crl" type="X509_CRL *" m68kreg="a1"/>
    </method>
    <method name="d2i_X509_REQ_bio" result="X509_REQ *">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="req" type="X509_REQ **" m68kreg="a1"/>
    </method>
    <method name="i2d_X509_REQ_bio" result="int">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="req" type="X509_REQ *" m68kreg="a1"/>
    </method>
    <method name="d2i_RSAPrivateKey_bio" result="RSA *">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="rsa" type="RSA **" m68kreg="a1"/>
    </method>
    <method name="i2d_RSAPrivateKey_bio" result="int">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="rsa" type="RSA *" m68kreg="a1"/>
    </method>
    <method name="d2i_RSAPublicKey_bio" result="RSA *">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="rsa" type="RSA **" m68kreg="a1"/>
    </method>
    <method name="i2d_RSAPublicKey_bio" result="int">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="rsa" type="RSA *" m68kreg="a1"/>
    </method>
    <method name="d2i_RSA_PUBKEY_bio" result="RSA *">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="rsa" type="RSA **" m68kreg="a1"/>
    </method>
    <method name="i2d_RSA_PUBKEY_bio" result="int">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="rsa" type="RSA *" m68kreg="a1"/>
    </method>
    <method name="d2i_DSA_PUBKEY_bio" result="DSA *">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="dsa" type="DSA **" m68kreg="a1"/>
    </method>
    <method name="i2d_DSA_PUBKEY_bio" result="int">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="dsa" type="DSA *" m68kreg="a1"/>
    </method>
    <method name="d2i_DSAPrivateKey_bio" result="DSA *">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="dsa" type="DSA **" m68kreg="a1"/>
    </method>
    <method name="i2d_DSAPrivateKey_bio" result="int">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="dsa" type="DSA *" m68kreg="a1"/>
    </method>
    <method name="d2i_PKCS8_bio" result="X509_SIG *">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="p8" type="X509_SIG **" m68kreg="a1"/>
    </method>
    <method name="i2d_PKCS8_bio" result="int">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="p8" type="X509_SIG *" m68kreg="a1"/>
    </method>
    <method name="d2i_PKCS8_PRIV_KEY_INFO_bio" result="PKCS8_PRIV_KEY_INFO *">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="p8inf" type="PKCS8_PRIV_KEY_INFO **" m68kreg="a1"/>
    </method>
    <method name="i2d_PKCS8_PRIV_KEY_INFO_bio" result="int">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="p8inf" type="PKCS8_PRIV_KEY_INFO *" m68kreg="a1"/>
    </method>
    <method name="i2d_PKCS8PrivateKeyInfo_bio" result="int">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="key" type="EVP_PKEY *" m68kreg="a1"/>
    </method>
    <method name="i2d_PrivateKey_bio" result="int">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="pkey" type="EVP_PKEY *" m68kreg="a1"/>
    </method>
    <method name="d2i_PrivateKey_bio" result="EVP_PKEY *">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="a" type="EVP_PKEY **" m68kreg="a1"/>
    </method>
    <method name="i2d_PUBKEY_bio" result="int">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="pkey" type="EVP_PKEY *" m68kreg="a1"/>
    </method>
    <method name="d2i_PUBKEY_bio" result="EVP_PKEY *">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="a" type="EVP_PKEY **" m68kreg="a1"/>
    </method>
    <method name="X509_dup" result="X509 *">
      <arg name="x509" type="X509 *" m68kreg="a0"/>
    </method>
    <method name="X509_ATTRIBUTE_dup" result="X509_ATTRIBUTE *">
      <arg name="xa" type="X509_ATTRIBUTE *" m68kreg="a0"/>
    </method>
    <method name="X509_EXTENSION_dup" result="X509_EXTENSION *">
      <arg name="ex" type="X509_EXTENSION *" m68kreg="a0"/>
    </method>
    <method name="X509_CRL_dup" result="X509_CRL *">
      <arg name="crl" type="X509_CRL *" m68kreg="a0"/>
    </method>
    <method name="X509_REQ_dup" result="X509_REQ *">
      <arg name="req" type="X509_REQ *" m68kreg="a0"/>
    </method>
    <method name="X509_ALGOR_dup" result="X509_ALGOR *">
      <arg name="xn" type="X509_ALGOR *" m68kreg="a0"/>
    </method>
    <method name="X509_NAME_dup" result="X509_NAME *">
      <arg name="xn" type="X509_NAME *" m68kreg="a0"/>
    </method>
    <method name="X509_NAME_ENTRY_dup" result="X509_NAME_ENTRY *">
      <arg name="ne" type="X509_NAME_ENTRY *" m68kreg="a0"/>
    </method>
    <method name="X509_cmp_time" result="int">
      <arg name="s" type="const ASN1_TIME *" m68kreg="a0"/>
      <arg name="t" type="time_t *" m68kreg="a1"/>
    </method>
    <method name="X509_cmp_current_time" result="int">
      <arg name="s" type="ASN1_TIME *" m68kreg="a0"/>
    </method>
    <method name="X509_time_adj" result="ASN1_TIME *">
      <arg name="s" type="ASN1_TIME *" m68kreg="a0"/>
      <arg name="adj" type="long" m68kreg="d0"/>
      <arg name="t" type="time_t *" m68kreg="a1"/>
    </method>
    <method name="X509_gmtime_adj" result="ASN1_TIME *">
      <arg name="s" type="ASN1_TIME *" m68kreg="a0"/>
      <arg name="adj" type="long" m68kreg="d0"/>
    </method>
    <method name="X509_get_default_cert_area" result="const char *">
    </method>
    <method name="X509_get_default_cert_dir" result="const char *">
    </method>
    <method name="X509_get_default_cert_file" result="const char *">
    </method>
    <method name="X509_get_default_cert_dir_env" result="const char *">
    </method>
    <method name="X509_get_default_cert_file_env" result="const char *">
    </method>
    <method name="X509_get_default_private_dir" result="const char *">
    </method>
    <method name="X509_to_X509_REQ" result="X509_REQ *">
      <arg name="x" type="X509 *" m68kreg="a0"/>
      <arg name="pkey" type="EVP_PKEY *" m68kreg="a1"/>
      <arg name="md" type="const EVP_MD *" m68kreg="a2"/>
    </method>
    <method name="X509_REQ_to_X509" result="X509 *">
      <arg name="r" type="X509_REQ *" m68kreg="a0"/>
      <arg name="days" type="int" m68kreg="d0"/>
      <arg name="pkey" type="EVP_PKEY *" m68kreg="a1"/>
    </method>
    <method name="X509_ALGOR_new" result="X509_ALGOR *">
    </method>
    <method name="X509_ALGOR_free" result="void">
      <arg name="a" type="X509_ALGOR *" m68kreg="a0"/>
    </method>
    <method name="d2i_X509_ALGOR" result="X509_ALGOR *">
      <arg name="a" type="X509_ALGOR **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_X509_ALGOR" result="int">
      <arg name="a" type="X509_ALGOR *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="X509_ALGOR_it" result="const ASN1_ITEM *">
    </method>
    <method name="X509_VAL_new" result="X509_VAL *">
    </method>
    <method name="X509_VAL_free" result="void">
      <arg name="a" type="X509_VAL *" m68kreg="a0"/>
    </method>
    <method name="d2i_X509_VAL" result="X509_VAL *">
      <arg name="a" type="X509_VAL **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_X509_VAL" result="int">
      <arg name="a" type="X509_VAL *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="X509_VAL_it" result="const ASN1_ITEM *">
    </method>
    <method name="X509_PUBKEY_new" result="X509_PUBKEY *">
    </method>
    <method name="X509_PUBKEY_free" result="void">
      <arg name="a" type="X509_PUBKEY *" m68kreg="a0"/>
    </method>
    <method name="d2i_X509_PUBKEY" result="X509_PUBKEY *">
      <arg name="a" type="X509_PUBKEY **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_X509_PUBKEY" result="int">
      <arg name="a" type="X509_PUBKEY *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="X509_PUBKEY_it" result="const ASN1_ITEM *">
    </method>
    <method name="X509_PUBKEY_set" result="int">
      <arg name="x" type="X509_PUBKEY **" m68kreg="a0"/>
      <arg name="pkey" type="EVP_PKEY *" m68kreg="a1"/>
    </method>
    <method name="X509_PUBKEY_get" result="EVP_PKEY *">
      <arg name="key" type="X509_PUBKEY *" m68kreg="a0"/>
    </method>
    <method name="X509_get_pubkey_parameters" result="int">
      <arg name="pkey" type="EVP_PKEY *" m68kreg="a0"/>
      <arg name="chain" type="STACK_OF(X509) *" m68kreg="a1"/>
    </method>
    <method name="i2d_PUBKEY" result="int">
      <arg name="a" type="EVP_PKEY *" m68kreg="a0"/>
      <arg name="pp" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="d2i_PUBKEY" result="EVP_PKEY *">
      <arg name="a" type="EVP_PKEY **" m68kreg="a0"/>
      <arg name="pp" type="const unsigned char **" m68kreg="a1"/>
      <arg name="length" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_RSA_PUBKEY" result="int">
      <arg name="a" type="RSA *" m68kreg="a0"/>
      <arg name="pp" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="d2i_RSA_PUBKEY" result="RSA *">
      <arg name="a" type="RSA **" m68kreg="a0"/>
      <arg name="pp" type="const unsigned char **" m68kreg="a1"/>
      <arg name="length" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_DSA_PUBKEY" result="int">
      <arg name="a" type="DSA *" m68kreg="a0"/>
      <arg name="pp" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="d2i_DSA_PUBKEY" result="DSA *">
      <arg name="a" type="DSA **" m68kreg="a0"/>
      <arg name="pp" type="const unsigned char **" m68kreg="a1"/>
      <arg name="length" type="long" m68kreg="d0"/>
    </method>
    <method name="X509_SIG_new" result="X509_SIG *">
    </method>
    <method name="X509_SIG_free" result="void">
      <arg name="a" type="X509_SIG *" m68kreg="a0"/>
    </method>
    <method name="d2i_X509_SIG" result="X509_SIG *">
      <arg name="a" type="X509_SIG **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_X509_SIG" result="int">
      <arg name="a" type="X509_SIG *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="X509_SIG_it" result="const ASN1_ITEM *">
    </method>
    <method name="X509_REQ_INFO_new" result="X509_REQ_INFO *">
    </method>
    <method name="X509_REQ_INFO_free" result="void">
      <arg name="a" type="X509_REQ_INFO *" m68kreg="a0"/>
    </method>
    <method name="d2i_X509_REQ_INFO" result="X509_REQ_INFO *">
      <arg name="a" type="X509_REQ_INFO **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_X509_REQ_INFO" result="int">
      <arg name="a" type="X509_REQ_INFO *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="X509_REQ_INFO_it" result="const ASN1_ITEM *">
    </method>
    <method name="X509_REQ_new" result="X509_REQ *">
    </method>
    <method name="X509_REQ_free" result="void">
      <arg name="a" type="X509_REQ *" m68kreg="a0"/>
    </method>
    <method name="d2i_X509_REQ" result="X509_REQ *">
      <arg name="a" type="X509_REQ **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_X509_REQ" result="int">
      <arg name="a" type="X509_REQ *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="X509_REQ_it" result="const ASN1_ITEM *">
    </method>
    <method name="X509_ATTRIBUTE_new" result="X509_ATTRIBUTE *">
    </method>
    <method name="X509_ATTRIBUTE_free" result="void">
      <arg name="a" type="X509_ATTRIBUTE *" m68kreg="a0"/>
    </method>
    <method name="d2i_X509_ATTRIBUTE" result="X509_ATTRIBUTE *">
      <arg name="a" type="X509_ATTRIBUTE **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_X509_ATTRIBUTE" result="int">
      <arg name="a" type="X509_ATTRIBUTE *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="X509_ATTRIBUTE_it" result="const ASN1_ITEM *">
    </method>
    <method name="X509_ATTRIBUTE_create" result="X509_ATTRIBUTE *">
      <arg name="nid" type="int" m68kreg="d0"/>
      <arg name="atrtype" type="int" m68kreg="d1"/>
      <arg name="value" type="void *" m68kreg="a0"/>
    </method>
    <method name="X509_EXTENSION_new" result="X509_EXTENSION *">
    </method>
    <method name="X509_EXTENSION_free" result="void">
      <arg name="a" type="X509_EXTENSION *" m68kreg="a0"/>
    </method>
    <method name="d2i_X509_EXTENSION" result="X509_EXTENSION *">
      <arg name="a" type="X509_EXTENSION **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_X509_EXTENSION" result="int">
      <arg name="a" type="X509_EXTENSION *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="X509_EXTENSION_it" result="const ASN1_ITEM *">
    </method>
    <method name="X509_NAME_ENTRY_new" result="X509_NAME_ENTRY *">
    </method>
    <method name="X509_NAME_ENTRY_free" result="void">
      <arg name="a" type="X509_NAME_ENTRY *" m68kreg="a0"/>
    </method>
    <method name="d2i_X509_NAME_ENTRY" result="X509_NAME_ENTRY *">
      <arg name="a" type="X509_NAME_ENTRY **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_X509_NAME_ENTRY" result="int">
      <arg name="a" type="X509_NAME_ENTRY *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="X509_NAME_ENTRY_it" result="const ASN1_ITEM *">
    </method>
    <method name="X509_NAME_new" result="X509_NAME *">
    </method>
    <method name="X509_NAME_free" result="void">
      <arg name="a" type="X509_NAME *" m68kreg="a0"/>
    </method>
    <method name="d2i_X509_NAME" result="X509_NAME *">
      <arg name="a" type="X509_NAME **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_X509_NAME" result="int">
      <arg name="a" type="X509_NAME *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="X509_NAME_it" result="const ASN1_ITEM *">
    </method>
    <method name="X509_NAME_set" result="int">
      <arg name="xn" type="X509_NAME **" m68kreg="a0"/>
      <arg name="name" type="X509_NAME *" m68kreg="a1"/>
    </method>
    <method name="X509_CINF_new" result="X509_CINF *">
    </method>
    <method name="X509_CINF_free" result="void">
      <arg name="a" type="X509_CINF *" m68kreg="a0"/>
    </method>
    <method name="d2i_X509_CINF" result="X509_CINF *">
      <arg name="a" type="X509_CINF **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_X509_CINF" result="int">
      <arg name="a" type="X509_CINF *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="X509_CINF_it" result="const ASN1_ITEM *">
    </method>
    <method name="X509_new" result="X509 *">
    </method>
    <method name="X509_free" result="void">
      <arg name="a" type="X509 *" m68kreg="a0"/>
    </method>
    <method name="d2i_X509" result="X509 *">
      <arg name="a" type="X509 **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_X509" result="int">
      <arg name="a" type="X509 *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="X509_it" result="const ASN1_ITEM *">
    </method>
    <method name="X509_CERT_AUX_new" result="X509_CERT_AUX *">
    </method>
    <method name="X509_CERT_AUX_free" result="void">
      <arg name="a" type="X509_CERT_AUX *" m68kreg="a0"/>
    </method>
    <method name="d2i_X509_CERT_AUX" result="X509_CERT_AUX *">
      <arg name="a" type="X509_CERT_AUX **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_X509_CERT_AUX" result="int">
      <arg name="a" type="X509_CERT_AUX *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="X509_CERT_AUX_it" result="const ASN1_ITEM *">
    </method>
    <method name="X509_get_ex_new_index" result="int" status="unimplemented">
      <arg name="argl" type="long" m68kreg="d0"/>
      <arg name="argp" type="void *" m68kreg="a0"/>
      <arg name="new_func" type="CRYPTO_EX_new *" m68kreg="a1"/>
      <arg name="dup_func" type="CRYPTO_EX_dup *" m68kreg="a2"/>
      <arg name="free_func" type="CRYPTO_EX_free *" m68kreg="a3"/>
    </method>
    <method name="X509_set_ex_data" result="int">
      <arg name="r" type="X509 *" m68kreg="a0"/>
      <arg name="idx" type="int" m68kreg="d0"/>
      <arg name="arg" type="void *" m68kreg="a1"/>
    </method>
    <method name="X509_get_ex_data" result="void *">
      <arg name="r" type="X509 *" m68kreg="a0"/>
      <arg name="idx" type="int" m68kreg="d0"/>
    </method>
    <method name="i2d_X509_AUX" result="int">
      <arg name="a" type="X509 *" m68kreg="a0"/>
      <arg name="pp" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="d2i_X509_AUX" result="X509 *">
      <arg name="a" type="X509 **" m68kreg="a0"/>
      <arg name="pp" type="const unsigned char **" m68kreg="a1"/>
      <arg name="length" type="long" m68kreg="d0"/>
    </method>
    <method name="X509_alias_set1" result="int">
      <arg name="x" type="X509 *" m68kreg="a0"/>
      <arg name="name" type="const unsigned char *" m68kreg="a1"/>
      <arg name="len" type="int" m68kreg="d0"/>
    </method>
    <method name="X509_keyid_set1" result="int">
      <arg name="x" type="X509 *" m68kreg="a0"/>
      <arg name="id" type="const unsigned char *" m68kreg="a1"/>
      <arg name="len" type="int" m68kreg="d0"/>
    </method>
    <method name="X509_alias_get0" result="unsigned char *">
      <arg name="x" type="X509 *" m68kreg="a0"/>
      <arg name="len" type="int *" m68kreg="a1"/>
    </method>
    <method name="X509_TRUST_set_default" result="int (*)(int, X509 *, int)">
      <arg name="trust" type="int (*)(int, X509 *, int)" m68kreg="a0"/>
    </method>
    <method name="X509_TRUST_set" result="int">
      <arg name="t" type="int *" m68kreg="a0"/>
      <arg name="trust" type="int" m68kreg="d0"/>
    </method>
    <method name="X509_add1_trust_object" result="int">
      <arg name="x" type="X509 *" m68kreg="a0"/>
      <arg name="obj" type="const ASN1_OBJECT *" m68kreg="a1"/>
    </method>
    <method name="X509_add1_reject_object" result="int">
      <arg name="x" type="X509 *" m68kreg="a0"/>
      <arg name="obj" type="const ASN1_OBJECT *" m68kreg="a1"/>
    </method>
    <method name="X509_trust_clear" result="void">
      <arg name="x" type="X509 *" m68kreg="a0"/>
    </method>
    <method name="X509_reject_clear" result="void">
      <arg name="x" type="X509 *" m68kreg="a0"/>
    </method>
    <method name="X509_REVOKED_new" result="X509_REVOKED *">
    </method>
    <method name="X509_REVOKED_free" result="void">
      <arg name="a" type="X509_REVOKED *" m68kreg="a0"/>
    </method>
    <method name="d2i_X509_REVOKED" result="X509_REVOKED *">
      <arg name="a" type="X509_REVOKED **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_X509_REVOKED" result="int">
      <arg name="a" type="X509_REVOKED *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="X509_REVOKED_it" result="const ASN1_ITEM *">
    </method>
    <method name="X509_CRL_INFO_new" result="X509_CRL_INFO *">
    </method>
    <method name="X509_CRL_INFO_free" result="void">
      <arg name="a" type="X509_CRL_INFO *" m68kreg="a0"/>
    </method>
    <method name="d2i_X509_CRL_INFO" result="X509_CRL_INFO *">
      <arg name="a" type="X509_CRL_INFO **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_X509_CRL_INFO" result="int">
      <arg name="a" type="X509_CRL_INFO *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="X509_CRL_INFO_it" result="const ASN1_ITEM *">
    </method>
    <method name="X509_CRL_new" result="X509_CRL *">
    </method>
    <method name="X509_CRL_free" result="void">
      <arg name="a" type="X509_CRL *" m68kreg="a0"/>
    </method>
    <method name="d2i_X509_CRL" result="X509_CRL *">
      <arg name="a" type="X509_CRL **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_X509_CRL" result="int">
      <arg name="a" type="X509_CRL *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="X509_CRL_it" result="const ASN1_ITEM *">
    </method>
    <method name="X509_CRL_add0_revoked" result="int">
      <arg name="crl" type="X509_CRL *" m68kreg="a0"/>
      <arg name="rev" type="X509_REVOKED *" m68kreg="a1"/>
    </method>
    <method name="X509_PKEY_new" result="X509_PKEY *">
    </method>
    <method name="X509_PKEY_free" result="void">
      <arg name="a" type="X509_PKEY *" m68kreg="a0"/>
    </method>
    <method name="i2d_X509_PKEY" result="int" status="unimplemented">
      <arg name="a" type="X509_PKEY *" m68kreg="a0"/>
      <arg name="pp" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="d2i_X509_PKEY" result="X509_PKEY *" status="unimplemented">
      <arg name="a" type="X509_PKEY **" m68kreg="a0"/>
      <arg name="pp" type="const unsigned char **" m68kreg="a1"/>
      <arg name="length" type="long" m68kreg="d0"/>
    </method>
    <method name="NETSCAPE_SPKI_new" result="NETSCAPE_SPKI *">
    </method>
    <method name="NETSCAPE_SPKI_free" result="void">
      <arg name="a" type="NETSCAPE_SPKI *" m68kreg="a0"/>
    </method>
    <method name="d2i_NETSCAPE_SPKI" result="NETSCAPE_SPKI *">
      <arg name="a" type="NETSCAPE_SPKI **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_NETSCAPE_SPKI" result="int">
      <arg name="a" type="NETSCAPE_SPKI *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="NETSCAPE_SPKI_it" result="const ASN1_ITEM *">
    </method>
    <method name="NETSCAPE_SPKAC_new" result="NETSCAPE_SPKAC *">
    </method>
    <method name="NETSCAPE_SPKAC_free" result="void">
      <arg name="a" type="NETSCAPE_SPKAC *" m68kreg="a0"/>
    </method>
    <method name="d2i_NETSCAPE_SPKAC" result="NETSCAPE_SPKAC *">
      <arg name="a" type="NETSCAPE_SPKAC **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_NETSCAPE_SPKAC" result="int">
      <arg name="a" type="NETSCAPE_SPKAC *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="NETSCAPE_SPKAC_it" result="const ASN1_ITEM *">
    </method>
    <method name="NETSCAPE_CERT_SEQUENCE_new" result="NETSCAPE_CERT_SEQUENCE *">
    </method>
    <method name="NETSCAPE_CERT_SEQUENCE_free" result="void">
      <arg name="a" type="NETSCAPE_CERT_SEQUENCE *" m68kreg="a0"/>
    </method>
    <method name="d2i_NETSCAPE_CERT_SEQUENCE" result="NETSCAPE_CERT_SEQUENCE *">
      <arg name="a" type="NETSCAPE_CERT_SEQUENCE **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_NETSCAPE_CERT_SEQUENCE" result="int">
      <arg name="a" type="NETSCAPE_CERT_SEQUENCE *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="NETSCAPE_CERT_SEQUENCE_it" result="const ASN1_ITEM *">
    </method>
    <method name="X509_INFO_new" result="X509_INFO *">
    </method>
    <method name="X509_INFO_free" result="void">
      <arg name="a" type="X509_INFO *" m68kreg="a0"/>
    </method>
    <method name="X509_NAME_oneline" result="char *">
      <arg name="a" type="const X509_NAME *" m68kreg="a0"/>
      <arg name="buf" type="char *" m68kreg="a1"/>
      <arg name="size" type="int" m68kreg="d0"/>
    </method>
    <method name="ASN1_verify" result="int">
      <arg name="i2d" type="int (*)()" m68kreg="a0"/>
      <arg name="algor1" type="X509_ALGOR *" m68kreg="a1"/>
      <arg name="signature" type="ASN1_BIT_STRING *" m68kreg="a2"/>
      <arg name="data" type="char *" m68kreg="a3"/>
      <arg name="pkey" type="EVP_PKEY *" m68kreg="d0"/>
    </method>
    <method name="ASN1_digest" result="int">
      <arg name="i2d" type="int (*)()" m68kreg="a0"/>
      <arg name="type" type="const EVP_MD *" m68kreg="a1"/>
      <arg name="data" type="char *" m68kreg="a2"/>
      <arg name="md" type="unsigned char *" m68kreg="a3"/>
      <arg name="len" type="unsigned int *" m68kreg="d0"/>
    </method>
    <method name="ASN1_sign" result="int">
      <arg name="i2d" type="int (*)()" m68kreg="a0"/>
      <arg name="algor1" type="X509_ALGOR *" m68kreg="a1"/>
      <arg name="algor2" type="X509_ALGOR *" m68kreg="a2"/>
      <arg name="signature" type="ASN1_BIT_STRING *" m68kreg="a3"/>
      <arg name="data" type="char *" m68kreg="d0"/>
      <arg name="pkey" type="EVP_PKEY *" m68kreg="d1"/>
      <arg name="type" type="const EVP_MD *" m68kreg="d2"/>
    </method>
    <method name="ASN1_item_digest" result="int">
      <arg name="it" type="const ASN1_ITEM *" m68kreg="a0"/>
      <arg name="type" type="const EVP_MD *" m68kreg="a1"/>
      <arg name="data" type="void *" m68kreg="a2"/>
      <arg name="md" type="unsigned char *" m68kreg="a3"/>
      <arg name="len" type="unsigned int *" m68kreg="d0"/>
    </method>
    <method name="ASN1_item_verify" result="int">
      <arg name="it" type="const ASN1_ITEM *" m68kreg="a0"/>
      <arg name="algor1" type="X509_ALGOR *" m68kreg="a1"/>
      <arg name="signature" type="ASN1_BIT_STRING *" m68kreg="a2"/>
      <arg name="data" type="void *" m68kreg="a3"/>
      <arg name="pkey" type="EVP_PKEY *" m68kreg="d0"/>
    </method>
    <method name="ASN1_item_sign" result="int">
      <arg name="it" type="const ASN1_ITEM *" m68kreg="a0"/>
      <arg name="algor1" type="X509_ALGOR *" m68kreg="a1"/>
      <arg name="algor2" type="X509_ALGOR *" m68kreg="a2"/>
      <arg name="signature" type="ASN1_BIT_STRING *" m68kreg="a3"/>
      <arg name="data" type="void *" m68kreg="d0"/>
      <arg name="pkey" type="EVP_PKEY *" m68kreg="d1"/>
      <arg name="type" type="const EVP_MD *" m68kreg="d2"/>
    </method>
    <method name="X509_set_version" result="int">
      <arg name="x" type="X509 *" m68kreg="a0"/>
      <arg name="version" type="long" m68kreg="d0"/>
    </method>
    <method name="X509_set_serialNumber" result="int">
      <arg name="x" type="X509 *" m68kreg="a0"/>
      <arg name="serial" type="ASN1_INTEGER *" m68kreg="a1"/>
    </method>
    <method name="X509_get_serialNumber" result="ASN1_INTEGER *">
      <arg name="x" type="X509 *" m68kreg="a0"/>
    </method>
    <method name="X509_set_issuer_name" result="int">
      <arg name="x" type="X509 *" m68kreg="a0"/>
      <arg name="name" type="X509_NAME *" m68kreg="a1"/>
    </method>
    <method name="X509_get_issuer_name" result="X509_NAME *">
      <arg name="a" type="const X509 *" m68kreg="a0"/>
    </method>
    <method name="X509_set_subject_name" result="int">
      <arg name="x" type="X509 *" m68kreg="a0"/>
      <arg name="name" type="X509_NAME *" m68kreg="a1"/>
    </method>
    <method name="X509_get_subject_name" result="X509_NAME *">
      <arg name="a" type="const X509 *" m68kreg="a0"/>
    </method>
    <method name="X509_set1_notBefore" result="int">
      <arg name="x" type="X509 *" m68kreg="a0"/>
      <arg name="tm" type="const ASN1_TIME *" m68kreg="a1"/>
    </method>
    <method name="X509_set1_notAfter" result="int">
      <arg name="x" type="X509 *" m68kreg="a0"/>
      <arg name="tm" type="const ASN1_TIME *" m68kreg="a1"/>
    </method>
    <method name="X509_set_pubkey" result="int">
      <arg name="x" type="X509 *" m68kreg="a0"/>
      <arg name="pkey" type="EVP_PKEY *" m68kreg="a1"/>
    </method>
    <method name="X509_get_pubkey" result="EVP_PKEY *">
      <arg name="x" type="X509 *" m68kreg="a0"/>
    </method>
    <method name="X509_get0_pubkey_bitstr" result="ASN1_BIT_STRING *">
      <arg name="x" type="const X509 *" m68kreg="a0"/>
    </method>
    <method name="X509_certificate_type" result="int">
      <arg name="x" type="const X509 *" m68kreg="a0"/>
      <arg name="pubkey" type="const EVP_PKEY *" m68kreg="a1"/>
    </method>
    <method name="X509_REQ_set_version" result="int">
      <arg name="x" type="X509_REQ *" m68kreg="a0"/>
      <arg name="version" type="long" m68kreg="d0"/>
    </method>
    <method name="X509_REQ_set_subject_name" result="int">
      <arg name="req" type="X509_REQ *" m68kreg="a0"/>
      <arg name="name" type="X509_NAME *" m68kreg="a1"/>
    </method>
    <method name="X509_REQ_set_pubkey" result="int">
      <arg name="x" type="X509_REQ *" m68kreg="a0"/>
      <arg name="pkey" type="EVP_PKEY *" m68kreg="a1"/>
    </method>
    <method name="X509_REQ_get_pubkey" result="EVP_PKEY *">
      <arg name="req" type="X509_REQ *" m68kreg="a0"/>
    </method>
    <method name="X509_REQ_extension_nid" result="int">
      <arg name="nid" type="int" m68kreg="d0"/>
    </method>
    <method name="X509_REQ_get_extension_nids" result="int *">
    </method>
    <method name="X509_REQ_set_extension_nids" result="void">
      <arg name="nids" type="int *" m68kreg="a0"/>
    </method>
    <method name="X509_REQ_get_extensions" result="STACK_OF(X509_EXTENSION) *">
      <arg name="req" type="X509_REQ *" m68kreg="a0"/>
    </method>
    <method name="X509_REQ_add_extensions_nid" result="int">
      <arg name="req" type="X509_REQ *" m68kreg="a0"/>
      <arg name="exts" type="STACK_OF(X509_EXTENSION) *" m68kreg="a1"/>
      <arg name="nid" type="int" m68kreg="d0"/>
    </method>
    <method name="X509_REQ_add_extensions" result="int">
      <arg name="req" type="X509_REQ *" m68kreg="a0"/>
      <arg name="exts" type="STACK_OF(X509_EXTENSION) *" m68kreg="a1"/>
    </method>
    <method name="X509_REQ_get_attr_count" result="int">
      <arg name="req" type="const X509_REQ *" m68kreg="a0"/>
    </method>
    <method name="X509_REQ_get_attr_by_NID" result="int">
      <arg name="req" type="const X509_REQ *" m68kreg="a0"/>
      <arg name="nid" type="int" m68kreg="d0"/>
      <arg name="lastpos" type="int" m68kreg="d1"/>
    </method>
    <method name="X509_REQ_get_attr_by_OBJ" result="int">
      <arg name="req" type="const X509_REQ *" m68kreg="a0"/>
      <arg name="obj" type="const ASN1_OBJECT *" m68kreg="a1"/>
      <arg name="lastpos" type="int" m68kreg="d0"/>
    </method>
    <method name="X509_REQ_get_attr" result="X509_ATTRIBUTE *">
      <arg name="req" type="const X509_REQ *" m68kreg="a0"/>
      <arg name="loc" type="int" m68kreg="d0"/>
    </method>
    <method name="X509_REQ_delete_attr" result="X509_ATTRIBUTE *">
      <arg name="req" type="X509_REQ *" m68kreg="a0"/>
      <arg name="loc" type="int" m68kreg="d0"/>
    </method>
    <method name="X509_REQ_add1_attr" result="int">
      <arg name="req" type="X509_REQ *" m68kreg="a0"/>
      <arg name="attr" type="X509_ATTRIBUTE *" m68kreg="a1"/>
    </method>
    <method name="X509_REQ_add1_attr_by_OBJ" result="int">
      <arg name="req" type="X509_REQ *" m68kreg="a0"/>
      <arg name="obj" type="const ASN1_OBJECT *" m68kreg="a1"/>
      <arg name="type" type="int" m68kreg="d0"/>
      <arg name="bytes" type="const unsigned char *" m68kreg="a2"/>
      <arg name="len" type="int" m68kreg="d1"/>
    </method>
    <method name="X509_REQ_add1_attr_by_NID" result="int">
      <arg name="req" type="X509_REQ *" m68kreg="a0"/>
      <arg name="nid" type="int" m68kreg="d0"/>
      <arg name="type" type="int" m68kreg="d1"/>
      <arg name="bytes" type="const unsigned char *" m68kreg="a1"/>
      <arg name="len" type="int" m68kreg="d2"/>
    </method>
    <method name="X509_REQ_add1_attr_by_txt" result="int">
      <arg name="req" type="X509_REQ *" m68kreg="a0"/>
      <arg name="attrname" type="const char *" m68kreg="a1"/>
      <arg name="type" type="int" m68kreg="d0"/>
      <arg name="bytes" type="const unsigned char *" m68kreg="a2"/>
      <arg name="len" type="int" m68kreg="d1"/>
    </method>
    <method name="X509_CRL_set_version" result="int">
      <arg name="x" type="X509_CRL *" m68kreg="a0"/>
      <arg name="version" type="long" m68kreg="d0"/>
    </method>
    <method name="X509_CRL_set_issuer_name" result="int">
      <arg name="x" type="X509_CRL *" m68kreg="a0"/>
      <arg name="name" type="X509_NAME *" m68kreg="a1"/>
    </method>
    <method name="X509_CRL_set1_lastUpdate" result="int">
      <arg name="x" type="X509_CRL *" m68kreg="a0"/>
      <arg name="tm" type="const ASN1_TIME *" m68kreg="a1"/>
    </method>
    <method name="X509_CRL_set1_nextUpdate" result="int">
      <arg name="x" type="X509_CRL *" m68kreg="a0"/>
      <arg name="tm" type="const ASN1_TIME *" m68kreg="a1"/>
    </method>
    <method name="X509_CRL_sort" result="int">
      <arg name="crl" type="X509_CRL *" m68kreg="a0"/>
    </method>
    <method name="X509_REVOKED_set_serialNumber" result="int">
      <arg name="x" type="X509_REVOKED *" m68kreg="a0"/>
      <arg name="serial" type="ASN1_INTEGER *" m68kreg="a1"/>
    </method>
    <method name="X509_REVOKED_set_revocationDate" result="int">
      <arg name="r" type="X509_REVOKED *" m68kreg="a0"/>
      <arg name="tm" type="ASN1_TIME *" m68kreg="a1"/>
    </method>
    <method name="X509_check_private_key" result="int">
      <arg name="x509" type="const X509 *" m68kreg="a0"/>
      <arg name="pkey" type="const EVP_PKEY *" m68kreg="a1"/>
    </method>
    <method name="X509_issuer_and_serial_cmp" result="int">
      <arg name="a" type="const X509 *" m68kreg="a0"/>
      <arg name="b" type="const X509 *" m68kreg="a1"/>
    </method>
    <method name="X509_issuer_and_serial_hash" result="unsigned long">
      <arg name="a" type="X509 *" m68kreg="a0"/>
    </method>
    <method name="X509_issuer_name_cmp" result="int">
      <arg name="a" type="const X509 *" m68kreg="a0"/>
      <arg name="b" type="const X509 *" m68kreg="a1"/>
    </method>
    <method name="X509_issuer_name_hash" result="unsigned long">
      <arg name="a" type="X509 *" m68kreg="a0"/>
    </method>
    <method name="X509_subject_name_cmp" result="int">
      <arg name="a" type="const X509 *" m68kreg="a0"/>
      <arg name="b" type="const X509 *" m68kreg="a1"/>
    </method>
    <method name="X509_subject_name_hash" result="unsigned long">
      <arg name="x" type="X509 *" m68kreg="a0"/>
    </method>
    <method name="X509_cmp" result="int">
      <arg name="a" type="const X509 *" m68kreg="a0"/>
      <arg name="b" type="const X509 *" m68kreg="a1"/>
    </method>
    <method name="X509_NAME_cmp" result="int">
      <arg name="a" type="const X509_NAME *" m68kreg="a0"/>
      <arg name="b" type="const X509_NAME *" m68kreg="a1"/>
    </method>
    <method name="X509_NAME_hash" result="unsigned long">
      <arg name="x" type="X509_NAME *" m68kreg="a0"/>
    </method>
    <method name="X509_CRL_cmp" result="int">
      <arg name="a" type="const X509_CRL *" m68kreg="a0"/>
      <arg name="b" type="const X509_CRL *" m68kreg="a1"/>
    </method>
    <method name="X509_NAME_print" result="int">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="name" type="const X509_NAME *" m68kreg="a1"/>
      <arg name="obase" type="int" m68kreg="d0"/>
    </method>
    <method name="X509_NAME_print_ex" result="int">
      <arg name="out" type="BIO *" m68kreg="a0"/>
      <arg name="nm" type="const X509_NAME *" m68kreg="a1"/>
      <arg name="indent" type="int" m68kreg="d0"/>
      <arg name="flags" type="unsigned long" m68kreg="d1"/>
    </method>
    <method name="X509_print_ex" result="int">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="x" type="X509 *" m68kreg="a1"/>
      <arg name="nmflag" type="unsigned long" m68kreg="d0"/>
      <arg name="cflag" type="unsigned long" m68kreg="d1"/>
    </method>
    <method name="X509_print" result="int">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="x" type="X509 *" m68kreg="a1"/>
    </method>
    <method name="X509_ocspid_print" result="int">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="x" type="X509 *" m68kreg="a1"/>
    </method>
    <method name="X509_CERT_AUX_print" result="int" status="unimplemented">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="x" type="X509_CERT_AUX *" m68kreg="a1"/>
      <arg name="indent" type="int" m68kreg="d0"/>
    </method>
    <method name="X509_CRL_print" result="int">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="x" type="X509_CRL *" m68kreg="a1"/>
    </method>
    <method name="X509_REQ_print_ex" result="int">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="x" type="X509_REQ *" m68kreg="a1"/>
      <arg name="nmflag" type="unsigned long" m68kreg="d0"/>
      <arg name="cflag" type="unsigned long" m68kreg="d1"/>
    </method>
    <method name="X509_REQ_print" result="int">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="req" type="X509_REQ *" m68kreg="a1"/>
    </method>
    <method name="X509_NAME_entry_count" result="int">
      <arg name="name" type="const X509_NAME *" m68kreg="a0"/>
    </method>
    <method name="X509_NAME_get_text_by_NID" result="int">
      <arg name="name" type="X509_NAME *" m68kreg="a0"/>
      <arg name="nid" type="int" m68kreg="d0"/>
      <arg name="buf" type="char *" m68kreg="a1"/>
      <arg name="len" type="int" m68kreg="d1"/>
    </method>
    <method name="X509_NAME_get_text_by_OBJ" result="int">
      <arg name="name" type="X509_NAME *" m68kreg="a0"/>
      <arg name="obj" type="const ASN1_OBJECT *" m68kreg="a1"/>
      <arg name="buf" type="char *" m68kreg="a2"/>
      <arg name="len" type="int" m68kreg="d0"/>
    </method>
    <method name="X509_NAME_get_index_by_NID" result="int">
      <arg name="name" type="X509_NAME *" m68kreg="a0"/>
      <arg name="nid" type="int" m68kreg="d0"/>
      <arg name="lastpos" type="int" m68kreg="d1"/>
    </method>
    <method name="X509_NAME_get_index_by_OBJ" result="int">
      <arg name="name" type="X509_NAME *" m68kreg="a0"/>
      <arg name="obj" type="const ASN1_OBJECT *" m68kreg="a1"/>
      <arg name="lastpos" type="int" m68kreg="d0"/>
    </method>
    <method name="X509_NAME_get_entry" result="X509_NAME_ENTRY *">
      <arg name="name" type="const X509_NAME *" m68kreg="a0"/>
      <arg name="loc" type="int" m68kreg="d0"/>
    </method>
    <method name="X509_NAME_delete_entry" result="X509_NAME_ENTRY *">
      <arg name="name" type="X509_NAME *" m68kreg="a0"/>
      <arg name="loc" type="int" m68kreg="d0"/>
    </method>
    <method name="X509_NAME_add_entry" result="int">
      <arg name="name" type="X509_NAME *" m68kreg="a0"/>
      <arg name="ne" type="const X509_NAME_ENTRY *" m68kreg="a1"/>
      <arg name="loc" type="int" m68kreg="d0"/>
      <arg name="set" type="int" m68kreg="d1"/>
    </method>
    <method name="X509_NAME_add_entry_by_OBJ" result="int">
      <arg name="name" type="X509_NAME *" m68kreg="a0"/>
      <arg name="obj" type="const ASN1_OBJECT *" m68kreg="a1"/>
      <arg name="type" type="int" m68kreg="d0"/>
      <arg name="bytes" type="const unsigned char *" m68kreg="a2"/>
      <arg name="len" type="int" m68kreg="d1"/>
      <arg name="loc" type="int" m68kreg="d2"/>
      <arg name="set" type="int" m68kreg="d3"/>
    </method>
    <method name="X509_NAME_add_entry_by_NID" result="int">
      <arg name="name" type="X509_NAME *" m68kreg="a0"/>
      <arg name="nid" type="int" m68kreg="d0"/>
      <arg name="type" type="int" m68kreg="d1"/>
      <arg name="bytes" type="const unsigned char *" m68kreg="a1"/>
      <arg name="len" type="int" m68kreg="d2"/>
      <arg name="loc" type="int" m68kreg="d3"/>
      <arg name="set" type="int" m68kreg="d4"/>
    </method>
    <method name="X509_NAME_ENTRY_create_by_txt" result="X509_NAME_ENTRY *">
      <arg name="ne" type="X509_NAME_ENTRY **" m68kreg="a0"/>
      <arg name="field" type="const char *" m68kreg="a1"/>
      <arg name="type" type="int" m68kreg="d0"/>
      <arg name="bytes" type="const unsigned char *" m68kreg="a2"/>
      <arg name="len" type="int" m68kreg="d1"/>
    </method>
    <method name="X509_NAME_ENTRY_create_by_NID" result="X509_NAME_ENTRY *">
      <arg name="ne" type="X509_NAME_ENTRY **" m68kreg="a0"/>
      <arg name="nid" type="int" m68kreg="d0"/>
      <arg name="type" type="int" m68kreg="d1"/>
      <arg name="bytes" type="const unsigned char *" m68kreg="a1"/>
      <arg name="len" type="int" m68kreg="d2"/>
    </method>
    <method name="X509_NAME_add_entry_by_txt" result="int">
      <arg name="name" type="X509_NAME *" m68kreg="a0"/>
      <arg name="field" type="const char *" m68kreg="a1"/>
      <arg name="type" type="int" m68kreg="d0"/>
      <arg name="bytes" type="const unsigned char *" m68kreg="a2"/>
      <arg name="len" type="int" m68kreg="d1"/>
      <arg name="loc" type="int" m68kreg="d2"/>
      <arg name="set" type="int" m68kreg="d3"/>
    </method>
    <method name="X509_NAME_ENTRY_create_by_OBJ" result="X509_NAME_ENTRY *">
      <arg name="ne" type="X509_NAME_ENTRY **" m68kreg="a0"/>
      <arg name="obj" type="const ASN1_OBJECT *" m68kreg="a1"/>
      <arg name="type" type="int" m68kreg="d0"/>
      <arg name="bytes" type="const unsigned char *" m68kreg="a2"/>
      <arg name="len" type="int" m68kreg="d1"/>
    </method>
    <method name="X509_NAME_ENTRY_set_object" result="int">
      <arg name="ne" type="X509_NAME_ENTRY *" m68kreg="a0"/>
      <arg name="obj" type="const ASN1_OBJECT *" m68kreg="a1"/>
    </method>
    <method name="X509_NAME_ENTRY_set_data" result="int">
      <arg name="ne" type="X509_NAME_ENTRY *" m68kreg="a0"/>
      <arg name="type" type="int" m68kreg="d0"/>
      <arg name="bytes" type="const unsigned char *" m68kreg="a1"/>
      <arg name="len" type="int" m68kreg="d1"/>
    </method>
    <method name="X509_NAME_ENTRY_get_object" result="ASN1_OBJECT *">
      <arg name="ne" type="const X509_NAME_ENTRY *" m68kreg="a0"/>
    </method>
    <method name="X509_NAME_ENTRY_get_data" result="ASN1_STRING *">
      <arg name="ne" type="const X509_NAME_ENTRY *" m68kreg="a0"/>
    </method>
    <method name="X509v3_get_ext_count" result="int">
      <arg name="x" type="const STACK_OF(X509_EXTENSION) *" m68kreg="a0"/>
    </method>
    <method name="X509v3_get_ext_by_NID" result="int">
      <arg name="x" type="const STACK_OF(X509_EXTENSION) *" m68kreg="a0"/>
      <arg name="nid" type="int" m68kreg="d0"/>
      <arg name="lastpos" type="int" m68kreg="d1"/>
    </method>
    <method name="X509v3_get_ext_by_OBJ" result="int">
      <arg name="x" type="const STACK_OF(X509_EXTENSION) *" m68kreg="a0"/>
      <arg name="obj" type="const ASN1_OBJECT *" m68kreg="a1"/>
      <arg name="lastpos" type="int" m68kreg="d0"/>
    </method>
    <method name="X509v3_get_ext_by_critical" result="int">
      <arg name="x" type="const STACK_OF(X509_EXTENSION) *" m68kreg="a0"/>
      <arg name="crit" type="int" m68kreg="d0"/>
      <arg name="lastpos" type="int" m68kreg="d1"/>
    </method>
    <method name="X509v3_get_ext" result="X509_EXTENSION *">
      <arg name="x" type="const STACK_OF(X509_EXTENSION) *" m68kreg="a0"/>
      <arg name="loc" type="int" m68kreg="d0"/>
    </method>
    <method name="X509v3_delete_ext" result="X509_EXTENSION *">
      <arg name="x" type="STACK_OF(X509_EXTENSION) *" m68kreg="a0"/>
      <arg name="loc" type="int" m68kreg="d0"/>
    </method>
    <method name="X509v3_add_ext" result="STACK_OF(X509_EXTENSION) *">
      <arg name="x" type="STACK_OF(X509_EXTENSION) **" m68kreg="a0"/>
      <arg name="ex" type="X509_EXTENSION *" m68kreg="a1"/>
      <arg name="loc" type="int" m68kreg="d0"/>
    </method>
    <method name="X509_get_ext_count" result="int">
      <arg name="x" type="const X509 *" m68kreg="a0"/>
    </method>
    <method name="X509_get_ext_by_NID" result="int">
      <arg name="x" type="const X509 *" m68kreg="a0"/>
      <arg name="nid" type="int" m68kreg="d0"/>
      <arg name="lastpos" type="int" m68kreg="d1"/>
    </method>
    <method name="X509_get_ext_by_OBJ" result="int">
      <arg name="x" type="const X509 *" m68kreg="a0"/>
      <arg name="obj" type="const ASN1_OBJECT *" m68kreg="a1"/>
      <arg name="lastpos" type="int" m68kreg="d0"/>
    </method>
    <method name="X509_get_ext_by_critical" result="int">
      <arg name="x" type="const X509 *" m68kreg="a0"/>
      <arg name="crit" type="int" m68kreg="d0"/>
      <arg name="lastpos" type="int" m68kreg="d1"/>
    </method>
    <method name="X509_get_ext" result="X509_EXTENSION *">
      <arg name="x" type="const X509 *" m68kreg="a0"/>
      <arg name="loc" type="int" m68kreg="d0"/>
    </method>
    <method name="X509_delete_ext" result="X509_EXTENSION *">
      <arg name="x" type="X509 *" m68kreg="a0"/>
      <arg name="loc" type="int" m68kreg="d0"/>
    </method>
    <method name="X509_add_ext" result="int">
      <arg name="x" type="X509 *" m68kreg="a0"/>
      <arg name="ex" type="X509_EXTENSION *" m68kreg="a1"/>
      <arg name="loc" type="int" m68kreg="d0"/>
    </method>
    <method name="X509_get_ext_d2i" result="void *">
      <arg name="x" type="const X509 *" m68kreg="a0"/>
      <arg name="nid" type="int" m68kreg="d0"/>
      <arg name="crit" type="int *" m68kreg="a1"/>
      <arg name="idx" type="int *" m68kreg="a2"/>
    </method>
    <method name="X509_add1_ext_i2d" result="int">
      <arg name="x" type="X509 *" m68kreg="a0"/>
      <arg name="nid" type="int" m68kreg="d0"/>
      <arg name="value" type="void *" m68kreg="a1"/>
      <arg name="crit" type="int" m68kreg="d1"/>
      <arg name="flags" type="unsigned long" m68kreg="d2"/>
    </method>
    <method name="X509_CRL_get_ext_count" result="int">
      <arg name="x" type="const X509_CRL *" m68kreg="a0"/>
    </method>
    <method name="X509_CRL_get_ext_by_NID" result="int">
      <arg name="x" type="const X509_CRL *" m68kreg="a0"/>
      <arg name="nid" type="int" m68kreg="d0"/>
      <arg name="lastpos" type="int" m68kreg="d1"/>
    </method>
    <method name="X509_CRL_get_ext_by_OBJ" result="int">
      <arg name="x" type="const X509_CRL *" m68kreg="a0"/>
      <arg name="obj" type="const ASN1_OBJECT *" m68kreg="a1"/>
      <arg name="lastpos" type="int" m68kreg="d0"/>
    </method>
    <method name="X509_CRL_get_ext_by_critical" result="int">
      <arg name="x" type="const X509_CRL *" m68kreg="a0"/>
      <arg name="crit" type="int" m68kreg="d0"/>
      <arg name="lastpos" type="int" m68kreg="d1"/>
    </method>
    <method name="X509_CRL_get_ext" result="X509_EXTENSION *">
      <arg name="x" type="const X509_CRL *" m68kreg="a0"/>
      <arg name="loc" type="int" m68kreg="d0"/>
    </method>
    <method name="X509_CRL_delete_ext" result="X509_EXTENSION *">
      <arg name="x" type="X509_CRL *" m68kreg="a0"/>
      <arg name="loc" type="int" m68kreg="d0"/>
    </method>
    <method name="X509_CRL_add_ext" result="int">
      <arg name="x" type="X509_CRL *" m68kreg="a0"/>
      <arg name="ex" type="X509_EXTENSION *" m68kreg="a1"/>
      <arg name="loc" type="int" m68kreg="d0"/>
    </method>
    <method name="X509_CRL_get_ext_d2i" result="void *">
      <arg name="x" type="const X509_CRL *" m68kreg="a0"/>
      <arg name="nid" type="int" m68kreg="d0"/>
      <arg name="crit" type="int *" m68kreg="a1"/>
      <arg name="idx" type="int *" m68kreg="a2"/>
    </method>
    <method name="X509_CRL_add1_ext_i2d" result="int">
      <arg name="x" type="X509_CRL *" m68kreg="a0"/>
      <arg name="nid" type="int" m68kreg="d0"/>
      <arg name="value" type="void *" m68kreg="a1"/>
      <arg name="crit" type="int" m68kreg="d1"/>
      <arg name="flags" type="unsigned long" m68kreg="d2"/>
    </method>
    <method name="X509_REVOKED_get_ext_count" result="int">
      <arg name="x" type="const X509_REVOKED *" m68kreg="a0"/>
    </method>
    <method name="X509_REVOKED_get_ext_by_NID" result="int">
      <arg name="x" type="const X509_REVOKED *" m68kreg="a0"/>
      <arg name="nid" type="int" m68kreg="d0"/>
      <arg name="lastpos" type="int" m68kreg="d1"/>
    </method>
    <method name="X509_REVOKED_get_ext_by_OBJ" result="int">
      <arg name="x" type="const X509_REVOKED *" m68kreg="a0"/>
      <arg name="obj" type="const ASN1_OBJECT *" m68kreg="a1"/>
      <arg name="lastpos" type="int" m68kreg="d0"/>
    </method>
    <method name="X509_REVOKED_get_ext_by_critical" result="int">
      <arg name="x" type="const X509_REVOKED *" m68kreg="a0"/>
      <arg name="crit" type="int" m68kreg="d0"/>
      <arg name="lastpos" type="int" m68kreg="d1"/>
    </method>
    <method name="X509_REVOKED_get_ext" result="X509_EXTENSION *">
      <arg name="x" type="const X509_REVOKED *" m68kreg="a0"/>
      <arg name="loc" type="int" m68kreg="d0"/>
    </method>
    <method name="X509_REVOKED_delete_ext" result="X509_EXTENSION *">
      <arg name="x" type="X509_REVOKED *" m68kreg="a0"/>
      <arg name="loc" type="int" m68kreg="d0"/>
    </method>
    <method name="X509_REVOKED_add_ext" result="int">
      <arg name="x" type="X509_REVOKED *" m68kreg="a0"/>
      <arg name="ex" type="X509_EXTENSION *" m68kreg="a1"/>
      <arg name="loc" type="int" m68kreg="d0"/>
    </method>
    <method name="X509_REVOKED_get_ext_d2i" result="void *">
      <arg name="x" type="const X509_REVOKED *" m68kreg="a0"/>
      <arg name="nid" type="int" m68kreg="d0"/>
      <arg name="crit" type="int *" m68kreg="a1"/>
      <arg name="idx" type="int *" m68kreg="a2"/>
    </method>
    <method name="X509_REVOKED_add1_ext_i2d" result="int">
      <arg name="x" type="X509_REVOKED *" m68kreg="a0"/>
      <arg name="nid" type="int" m68kreg="d0"/>
      <arg name="value" type="void *" m68kreg="a1"/>
      <arg name="crit" type="int" m68kreg="d1"/>
      <arg name="flags" type="unsigned long" m68kreg="d2"/>
    </method>
    <method name="X509_EXTENSION_create_by_NID" result="X509_EXTENSION *">
      <arg name="ex" type="X509_EXTENSION **" m68kreg="a0"/>
      <arg name="nid" type="int" m68kreg="d0"/>
      <arg name="crit" type="int" m68kreg="d1"/>
      <arg name="data" type="ASN1_OCTET_STRING *" m68kreg="a1"/>
    </method>
    <method name="X509_EXTENSION_create_by_OBJ" result="X509_EXTENSION *">
      <arg name="ex" type="X509_EXTENSION **" m68kreg="a0"/>
      <arg name="obj" type="const ASN1_OBJECT *" m68kreg="a1"/>
      <arg name="crit" type="int" m68kreg="d0"/>
      <arg name="data" type="ASN1_OCTET_STRING *" m68kreg="a2"/>
    </method>
    <method name="X509_EXTENSION_set_object" result="int">
      <arg name="ex" type="X509_EXTENSION *" m68kreg="a0"/>
      <arg name="obj" type="const ASN1_OBJECT *" m68kreg="a1"/>
    </method>
    <method name="X509_EXTENSION_set_critical" result="int">
      <arg name="ex" type="X509_EXTENSION *" m68kreg="a0"/>
      <arg name="crit" type="int" m68kreg="d0"/>
    </method>
    <method name="X509_EXTENSION_set_data" result="int">
      <arg name="ex" type="X509_EXTENSION *" m68kreg="a0"/>
      <arg name="data" type="ASN1_OCTET_STRING *" m68kreg="a1"/>
    </method>
    <method name="X509_EXTENSION_get_object" result="ASN1_OBJECT *">
      <arg name="ex" type="X509_EXTENSION *" m68kreg="a0"/>
    </method>
    <method name="X509_EXTENSION_get_data" result="ASN1_OCTET_STRING *">
      <arg name="ne" type="X509_EXTENSION *" m68kreg="a0"/>
    </method>
    <method name="X509_EXTENSION_get_critical" result="int">
      <arg name="ex" type="const X509_EXTENSION *" m68kreg="a0"/>
    </method>
    <method name="X509at_get_attr_count" result="int">
      <arg name="x" type="const STACK_OF(X509_ATTRIBUTE) *" m68kreg="a0"/>
    </method>
    <method name="X509at_get_attr_by_NID" result="int">
      <arg name="x" type="const STACK_OF(X509_ATTRIBUTE) *" m68kreg="a0"/>
      <arg name="nid" type="int" m68kreg="d0"/>
      <arg name="lastpos" type="int" m68kreg="d1"/>
    </method>
    <method name="X509at_get_attr_by_OBJ" result="int">
      <arg name="sk" type="const STACK_OF(X509_ATTRIBUTE) *" m68kreg="a0"/>
      <arg name="obj" type="const ASN1_OBJECT *" m68kreg="a1"/>
      <arg name="lastpos" type="int" m68kreg="d0"/>
    </method>
    <method name="X509at_get_attr" result="X509_ATTRIBUTE *">
      <arg name="x" type="const STACK_OF(X509_ATTRIBUTE) *" m68kreg="a0"/>
      <arg name="loc" type="int" m68kreg="d0"/>
    </method>
    <method name="X509at_delete_attr" result="X509_ATTRIBUTE *">
      <arg name="x" type="STACK_OF(X509_ATTRIBUTE) *" m68kreg="a0"/>
      <arg name="loc" type="int" m68kreg="d0"/>
    </method>
    <method name="X509at_add1_attr" result="STACK_OF(X509_ATTRIBUTE) *">
      <arg name="x" type="STACK_OF(X509_ATTRIBUTE) **" m68kreg="a0"/>
      <arg name="attr" type="X509_ATTRIBUTE *" m68kreg="a1"/>
    </method>
    <method name="X509at_add1_attr_by_OBJ" result="STACK_OF(X509_ATTRIBUTE) *">
      <arg name="x" type="STACK_OF(X509_ATTRIBUTE) **" m68kreg="a0"/>
      <arg name="obj" type="const ASN1_OBJECT *" m68kreg="a1"/>
      <arg name="type" type="int" m68kreg="d0"/>
      <arg name="bytes" type="const unsigned char *" m68kreg="a2"/>
      <arg name="len" type="int" m68kreg="d1"/>
    </method>
    <method name="X509at_add1_attr_by_NID" result="STACK_OF(X509_ATTRIBUTE) *">
      <arg name="x" type="STACK_OF(X509_ATTRIBUTE) **" m68kreg="a0"/>
      <arg name="nid" type="int" m68kreg="d0"/>
      <arg name="type" type="int" m68kreg="d1"/>
      <arg name="bytes" type="const unsigned char *" m68kreg="a1"/>
      <arg name="len" type="int" m68kreg="d2"/>
    </method>
    <method name="X509at_add1_attr_by_txt" result="STACK_OF(X509_ATTRIBUTE) *">
      <arg name="x" type="STACK_OF(X509_ATTRIBUTE) **" m68kreg="a0"/>
      <arg name="attrname" type="const char *" m68kreg="a1"/>
      <arg name="type" type="int" m68kreg="d0"/>
      <arg name="bytes" type="const unsigned char *" m68kreg="a2"/>
      <arg name="len" type="int" m68kreg="d1"/>
    </method>
    <method name="X509_ATTRIBUTE_create_by_NID" result="X509_ATTRIBUTE *">
      <arg name="attr" type="X509_ATTRIBUTE **" m68kreg="a0"/>
      <arg name="nid" type="int" m68kreg="d0"/>
      <arg name="atrtype" type="int" m68kreg="d1"/>
      <arg name="data" type="const void *" m68kreg="a1"/>
      <arg name="len" type="int" m68kreg="d2"/>
    </method>
    <method name="X509_ATTRIBUTE_create_by_OBJ" result="X509_ATTRIBUTE *">
      <arg name="attr" type="X509_ATTRIBUTE **" m68kreg="a0"/>
      <arg name="obj" type="const ASN1_OBJECT *" m68kreg="a1"/>
      <arg name="atrtype" type="int" m68kreg="d0"/>
      <arg name="data" type="const void *" m68kreg="a2"/>
      <arg name="len" type="int" m68kreg="d1"/>
    </method>
    <method name="X509_ATTRIBUTE_create_by_txt" result="X509_ATTRIBUTE *">
      <arg name="attr" type="X509_ATTRIBUTE **" m68kreg="a0"/>
      <arg name="atrname" type="const char *" m68kreg="a1"/>
      <arg name="type" type="int" m68kreg="d0"/>
      <arg name="bytes" type="const unsigned char *" m68kreg="a2"/>
      <arg name="len" type="int" m68kreg="d1"/>
    </method>
    <method name="X509_ATTRIBUTE_set1_object" result="int">
      <arg name="attr" type="X509_ATTRIBUTE *" m68kreg="a0"/>
      <arg name="obj" type="const ASN1_OBJECT *" m68kreg="a1"/>
    </method>
    <method name="X509_ATTRIBUTE_set1_data" result="int">
      <arg name="attr" type="X509_ATTRIBUTE *" m68kreg="a0"/>
      <arg name="attrtype" type="int" m68kreg="d0"/>
      <arg name="data" type="const void *" m68kreg="a1"/>
      <arg name="len" type="int" m68kreg="d1"/>
    </method>
    <method name="X509_ATTRIBUTE_get0_data" result="void *">
      <arg name="attr" type="X509_ATTRIBUTE *" m68kreg="a0"/>
      <arg name="idx" type="int" m68kreg="d0"/>
      <arg name="atrtype" type="int" m68kreg="d1"/>
      <arg name="data" type="void *" m68kreg="a1"/>
    </method>
    <method name="X509_ATTRIBUTE_count" result="int">
      <arg name="attr" type="const X509_ATTRIBUTE *" m68kreg="a0"/>
    </method>
    <method name="X509_ATTRIBUTE_get0_object" result="ASN1_OBJECT *">
      <arg name="attr" type="X509_ATTRIBUTE *" m68kreg="a0"/>
    </method>
    <method name="X509_ATTRIBUTE_get0_type" result="ASN1_TYPE *">
      <arg name="attr" type="X509_ATTRIBUTE *" m68kreg="a0"/>
      <arg name="idx" type="int" m68kreg="d0"/>
    </method>
    <method name="X509_verify_cert" result="int">
      <arg name="ctx" type="X509_STORE_CTX *" m68kreg="a0"/>
    </method>
    <method name="X509_find_by_issuer_and_serial" result="X509 *">
      <arg name="sk" type="STACK_OF(X509) *" m68kreg="a0"/>
      <arg name="name" type="X509_NAME *" m68kreg="a1"/>
      <arg name="serial" type="ASN1_INTEGER *" m68kreg="a2"/>
    </method>
    <method name="X509_find_by_subject" result="X509 *">
      <arg name="sk" type="STACK_OF(X509) *" m68kreg="a0"/>
      <arg name="name" type="X509_NAME *" m68kreg="a1"/>
    </method>
    <method name="PBEPARAM_new" result="PBEPARAM *">
    </method>
    <method name="PBEPARAM_free" result="void">
      <arg name="a" type="PBEPARAM *" m68kreg="a0"/>
    </method>
    <method name="d2i_PBEPARAM" result="PBEPARAM *">
      <arg name="a" type="PBEPARAM **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_PBEPARAM" result="int">
      <arg name="a" type="PBEPARAM *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="PBEPARAM_it" result="const ASN1_ITEM *">
    </method>
    <method name="PBE2PARAM_new" result="PBE2PARAM *">
    </method>
    <method name="PBE2PARAM_free" result="void">
      <arg name="a" type="PBE2PARAM *" m68kreg="a0"/>
    </method>
    <method name="d2i_PBE2PARAM" result="PBE2PARAM *">
      <arg name="a" type="PBE2PARAM **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_PBE2PARAM" result="int">
      <arg name="a" type="PBE2PARAM *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="PBE2PARAM_it" result="const ASN1_ITEM *">
    </method>
    <method name="PBKDF2PARAM_new" result="PBKDF2PARAM *">
    </method>
    <method name="PBKDF2PARAM_free" result="void">
      <arg name="a" type="PBKDF2PARAM *" m68kreg="a0"/>
    </method>
    <method name="d2i_PBKDF2PARAM" result="PBKDF2PARAM *">
      <arg name="a" type="PBKDF2PARAM **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_PBKDF2PARAM" result="int">
      <arg name="a" type="PBKDF2PARAM *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="PBKDF2PARAM_it" result="const ASN1_ITEM *">
    </method>
    <method name="PKCS5_pbe_set" result="X509_ALGOR *">
      <arg name="alg" type="int" m68kreg="d0"/>
      <arg name="iter" type="int" m68kreg="d1"/>
      <arg name="salt" type="unsigned char *" m68kreg="a0"/>
      <arg name="saltlen" type="int" m68kreg="d2"/>
    </method>
    <method name="PKCS5_pbe2_set" result="X509_ALGOR *">
      <arg name="cipher" type="const EVP_CIPHER *" m68kreg="a0"/>
      <arg name="iter" type="int" m68kreg="d0"/>
      <arg name="salt" type="unsigned char *" m68kreg="a1"/>
      <arg name="saltlen" type="int" m68kreg="d1"/>
    </method>
    <method name="PKCS8_PRIV_KEY_INFO_new" result="PKCS8_PRIV_KEY_INFO *">
    </method>
    <method name="PKCS8_PRIV_KEY_INFO_free" result="void">
      <arg name="a" type="PKCS8_PRIV_KEY_INFO *" m68kreg="a0"/>
    </method>
    <method name="d2i_PKCS8_PRIV_KEY_INFO" result="PKCS8_PRIV_KEY_INFO *">
      <arg name="a" type="PKCS8_PRIV_KEY_INFO **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_PKCS8_PRIV_KEY_INFO" result="int">
      <arg name="a" type="PKCS8_PRIV_KEY_INFO *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="PKCS8_PRIV_KEY_INFO_it" result="const ASN1_ITEM *">
    </method>
    <method name="EVP_PKCS82PKEY" result="EVP_PKEY *">
      <arg name="p8" type="const PKCS8_PRIV_KEY_INFO *" m68kreg="a0"/>
    </method>
    <method name="EVP_PKEY2PKCS8" result="PKCS8_PRIV_KEY_INFO *">
      <arg name="pkey" type="EVP_PKEY *" m68kreg="a0"/>
    </method>
    <method name="EVP_PKEY2PKCS8_broken" result="PKCS8_PRIV_KEY_INFO *" status="unimplemented">
      <arg name="pkey" type="EVP_PKEY *" m68kreg="a0"/>
      <arg name="broken" type="int" m68kreg="d0"/>
    </method>
    <method name="PKCS8_set_broken" result="PKCS8_PRIV_KEY_INFO *" status="unimplemented">
      <arg name="p8" type="PKCS8_PRIV_KEY_INFO *" m68kreg="a0"/>
      <arg name="broken" type="int" m68kreg="d0"/>
    </method>
    <method name="X509_check_trust" result="int">
      <arg name="x" type="X509 *" m68kreg="a0"/>
      <arg name="id" type="int" m68kreg="d0"/>
      <arg name="flags" type="int" m68kreg="d1"/>
    </method>
    <method name="X509_TRUST_get_count" result="int">
    </method>
    <method name="X509_TRUST_get0" result="X509_TRUST *">
      <arg name="idx" type="int" m68kreg="d0"/>
    </method>
    <method name="X509_TRUST_get_by_id" result="int">
      <arg name="id" type="int" m68kreg="d0"/>
    </method>
    <method name="X509_TRUST_add" result="int">
      <arg name="id" type="int" m68kreg="d0"/>
      <arg name="flags" type="int" m68kreg="d1"/>
      <arg name="ck" type="int (*)(X509_TRUST *, X509 *, int)" m68kreg="a0"/>
      <arg name="name" type="const char *" m68kreg="a1"/>
      <arg name="arg1" type="int" m68kreg="d2"/>
      <arg name="arg2" type="void *" m68kreg="a2"/>
    </method>
    <method name="X509_TRUST_cleanup" result="void">
    </method>
    <method name="X509_TRUST_get_flags" result="int">
      <arg name="xp" type="const X509_TRUST *" m68kreg="a0"/>
    </method>
    <method name="X509_TRUST_get0_name" result="char *">
      <arg name="xp" type="const X509_TRUST *" m68kreg="a0"/>
    </method>
    <method name="X509_TRUST_get_trust" result="int">
      <arg name="xp" type="const X509_TRUST *" m68kreg="a0"/>
    </method>
    <method name="ERR_load_X509_strings" result="int">
    </method>
    <method name="X509_OBJECT_idx_by_subject" result="int">
      <arg name="h" type="STACK_OF(X509_OBJECT) *" m68kreg="a0"/>
      <arg name="type" type="X509_LOOKUP_TYPE" m68kreg="d0"/>
      <arg name="name" type="X509_NAME *" m68kreg="a1"/>
    </method>
    <method name="X509_OBJECT_retrieve_by_subject" result="X509_OBJECT *">
      <arg name="h" type="STACK_OF(X509_OBJECT) *" m68kreg="a0"/>
      <arg name="type" type="X509_LOOKUP_TYPE" m68kreg="d0"/>
      <arg name="name" type="X509_NAME *" m68kreg="a1"/>
    </method>
    <method name="X509_OBJECT_retrieve_match" result="X509_OBJECT *">
      <arg name="h" type="STACK_OF(X509_OBJECT) *" m68kreg="a0"/>
      <arg name="x" type="X509_OBJECT *" m68kreg="a1"/>
    </method>
    <method name="X509_OBJECT_up_ref_count" result="int">
      <arg name="a" type="X509_OBJECT *" m68kreg="a0"/>
    </method>
    <method name="X509_STORE_new" result="X509_STORE *">
    </method>
    <method name="X509_STORE_free" result="void">
      <arg name="v" type="X509_STORE *" m68kreg="a0"/>
    </method>
    <method name="X509_STORE_set_flags" result="int">
      <arg name="ctx" type="X509_STORE *" m68kreg="a0"/>
      <arg name="flags" type="unsigned long" m68kreg="d0"/>
    </method>
    <method name="X509_STORE_set_purpose" result="int">
      <arg name="ctx" type="X509_STORE *" m68kreg="a0"/>
      <arg name="purpose" type="int" m68kreg="d0"/>
    </method>
    <method name="X509_STORE_set_trust" result="int">
      <arg name="ctx" type="X509_STORE *" m68kreg="a0"/>
      <arg name="trust" type="int" m68kreg="d0"/>
    </method>
    <method name="X509_STORE_CTX_new" result="X509_STORE_CTX *">
    </method>
    <method name="X509_STORE_CTX_get1_issuer" result="int">
      <arg name="issuer" type="X509 **" m68kreg="a0"/>
      <arg name="ctx" type="X509_STORE_CTX *" m68kreg="a1"/>
      <arg name="x" type="X509 *" m68kreg="a2"/>
    </method>
    <method name="X509_STORE_CTX_free" result="void">
      <arg name="ctx" type="X509_STORE_CTX *" m68kreg="a0"/>
    </method>
    <method name="X509_STORE_CTX_init" result="int">
      <arg name="ctx" type="X509_STORE_CTX *" m68kreg="a0"/>
      <arg name="store" type="X509_STORE *" m68kreg="a1"/>
      <arg name="x509" type="X509 *" m68kreg="a2"/>
      <arg name="chain" type="STACK_OF(X509) *" m68kreg="a3"/>
    </method>
    <method name="X509_STORE_CTX_set0_trusted_stack" result="void">
      <arg name="ctx" type="X509_STORE_CTX *" m68kreg="a0"/>
      <arg name="sk" type="STACK_OF(X509) *" m68kreg="a1"/>
    </method>
    <method name="X509_STORE_CTX_cleanup" result="void">
      <arg name="ctx" type="X509_STORE_CTX *" m68kreg="a0"/>
    </method>
    <method name="X509_STORE_add_lookup" result="X509_LOOKUP *">
      <arg name="v" type="X509_STORE *" m68kreg="a0"/>
      <arg name="m" type="X509_LOOKUP_METHOD *" m68kreg="a1"/>
    </method>
    <method name="X509_LOOKUP_hash_dir" result="X509_LOOKUP_METHOD *">
    </method>
    <method name="X509_LOOKUP_file" result="X509_LOOKUP_METHOD *">
    </method>
    <method name="X509_STORE_add_cert" result="int">
      <arg name="ctx" type="X509_STORE *" m68kreg="a0"/>
      <arg name="x" type="X509 *" m68kreg="a1"/>
    </method>
    <method name="X509_STORE_add_crl" result="int">
      <arg name="ctx" type="X509_STORE *" m68kreg="a0"/>
      <arg name="x" type="X509_CRL *" m68kreg="a1"/>
    </method>
    <method name="X509_STORE_CTX_get_by_subject" result="int">
      <arg name="vs" type="X509_STORE_CTX *" m68kreg="a0"/>
      <arg name="type" type="X509_LOOKUP_TYPE" m68kreg="d0"/>
      <arg name="name" type="X509_NAME *" m68kreg="a1"/>
      <arg name="ret" type="X509_OBJECT *" m68kreg="a2"/>
    </method>
    <method name="X509_LOOKUP_ctrl" result="int">
      <arg name="ctx" type="X509_LOOKUP *" m68kreg="a0"/>
      <arg name="cmd" type="int" m68kreg="d0"/>
      <arg name="argc" type="const char *" m68kreg="a1"/>
      <arg name="argl" type="long" m68kreg="d1"/>
      <arg name="ret" type="char **" m68kreg="a2"/>
    </method>
    <method name="X509_load_cert_file" result="int">
      <arg name="ctx" type="X509_LOOKUP *" m68kreg="a0"/>
      <arg name="file" type="const char *" m68kreg="a1"/>
      <arg name="type" type="int" m68kreg="d0"/>
    </method>
    <method name="X509_load_crl_file" result="int">
      <arg name="ctx" type="X509_LOOKUP *" m68kreg="a0"/>
      <arg name="file" type="const char *" m68kreg="a1"/>
      <arg name="type" type="int" m68kreg="d0"/>
    </method>
    <method name="X509_load_cert_crl_file" result="int">
      <arg name="ctx" type="X509_LOOKUP *" m68kreg="a0"/>
      <arg name="file" type="const char *" m68kreg="a1"/>
      <arg name="type" type="int" m68kreg="d0"/>
    </method>
    <method name="X509_LOOKUP_new" result="X509_LOOKUP *">
      <arg name="method" type="X509_LOOKUP_METHOD *" m68kreg="a0"/>
    </method>
    <method name="X509_LOOKUP_free" result="void">
      <arg name="ctx" type="X509_LOOKUP *" m68kreg="a0"/>
    </method>
    <method name="X509_LOOKUP_init" result="int">
      <arg name="ctx" type="X509_LOOKUP *" m68kreg="a0"/>
    </method>
    <method name="X509_LOOKUP_by_subject" result="int">
      <arg name="ctx" type="X509_LOOKUP *" m68kreg="a0"/>
      <arg name="type" type="X509_LOOKUP_TYPE" m68kreg="d0"/>
      <arg name="name" type="X509_NAME *" m68kreg="a1"/>
      <arg name="ret" type="X509_OBJECT *" m68kreg="a2"/>
    </method>
    <method name="X509_LOOKUP_by_issuer_serial" result="int">
      <arg name="ctx" type="X509_LOOKUP *" m68kreg="a0"/>
      <arg name="type" type="X509_LOOKUP_TYPE" m68kreg="d0"/>
      <arg name="name" type="X509_NAME *" m68kreg="a1"/>
      <arg name="serial" type="ASN1_INTEGER *" m68kreg="a2"/>
      <arg name="ret" type="X509_OBJECT *" m68kreg="a3"/>
    </method>
    <method name="X509_LOOKUP_by_fingerprint" result="int">
      <arg name="ctx" type="X509_LOOKUP *" m68kreg="a0"/>
      <arg name="type" type="X509_LOOKUP_TYPE" m68kreg="d0"/>
      <arg name="bytes" type="const unsigned char *" m68kreg="a1"/>
      <arg name="len" type="int" m68kreg="d1"/>
      <arg name="ret" type="X509_OBJECT *" m68kreg="a2"/>
    </method>
    <method name="X509_LOOKUP_by_alias" result="int">
      <arg name="ctx" type="X509_LOOKUP *" m68kreg="a0"/>
      <arg name="type" type="X509_LOOKUP_TYPE" m68kreg="d0"/>
      <arg name="str" type="const char *" m68kreg="a1"/>
      <arg name="len" type="int" m68kreg="d1"/>
      <arg name="ret" type="X509_OBJECT *" m68kreg="a2"/>
    </method>
    <method name="X509_LOOKUP_shutdown" result="int">
      <arg name="ctx" type="X509_LOOKUP *" m68kreg="a0"/>
    </method>
    <method name="X509_STORE_load_locations" result="int">
      <arg name="ctx" type="X509_STORE *" m68kreg="a0"/>
      <arg name="file" type="const char *" m68kreg="a1"/>
      <arg name="dir" type="const char *" m68kreg="a2"/>
    </method>
    <method name="X509_STORE_set_default_paths" result="int">
      <arg name="ctx" type="X509_STORE *" m68kreg="a0"/>
    </method>
    <method name="X509_STORE_CTX_get_ex_new_index" result="int" status="unimplemented">
      <arg name="argl" type="long" m68kreg="d0"/>
      <arg name="argp" type="void *" m68kreg="a0"/>
      <arg name="new_func" type="CRYPTO_EX_new *" m68kreg="a1"/>
      <arg name="dup_func" type="CRYPTO_EX_dup *" m68kreg="a2"/>
      <arg name="free_func" type="CRYPTO_EX_free *" m68kreg="a3"/>
    </method>
    <method name="X509_STORE_CTX_set_ex_data" result="int">
      <arg name="ctx" type="X509_STORE_CTX *" m68kreg="a0"/>
      <arg name="idx" type="int" m68kreg="d0"/>
      <arg name="data" type="void *" m68kreg="a1"/>
    </method>
    <method name="X509_STORE_CTX_get_ex_data" result="void *">
      <arg name="ctx" type="X509_STORE_CTX *" m68kreg="a0"/>
      <arg name="idx" type="int" m68kreg="d0"/>
    </method>
    <method name="X509_STORE_CTX_get_error" result="int">
      <arg name="ctx" type="X509_STORE_CTX *" m68kreg="a0"/>
    </method>
    <method name="X509_STORE_CTX_set_error" result="void">
      <arg name="ctx" type="X509_STORE_CTX *" m68kreg="a0"/>
      <arg name="s" type="int" m68kreg="d0"/>
    </method>
    <method name="X509_STORE_CTX_get_error_depth" result="int">
      <arg name="ctx" type="X509_STORE_CTX *" m68kreg="a0"/>
    </method>
    <method name="X509_STORE_CTX_get_current_cert" result="X509 *">
      <arg name="ctx" type="X509_STORE_CTX *" m68kreg="a0"/>
    </method>
    <method name="X509_STORE_CTX_get0_chain" result="STACK_OF(X509) *">
      <arg name="ctx" type="X509_STORE_CTX *" m68kreg="a0"/>
    </method>
    <method name="X509_STORE_CTX_get1_chain" result="STACK_OF(X509) *">
      <arg name="ctx" type="X509_STORE_CTX *" m68kreg="a0"/>
    </method>
    <method name="X509_STORE_CTX_set_cert" result="void">
      <arg name="c" type="X509_STORE_CTX *" m68kreg="a0"/>
      <arg name="x" type="X509 *" m68kreg="a1"/>
    </method>
    <method name="X509_STORE_CTX_set_purpose" result="int">
      <arg name="ctx" type="X509_STORE_CTX *" m68kreg="a0"/>
      <arg name="purpose" type="int" m68kreg="d0"/>
    </method>
    <method name="X509_STORE_CTX_set_trust" result="int">
      <arg name="ctx" type="X509_STORE_CTX *" m68kreg="a0"/>
      <arg name="trust" type="int" m68kreg="d0"/>
    </method>
    <method name="X509_STORE_CTX_purpose_inherit" result="int">
      <arg name="ctx" type="X509_STORE_CTX *" m68kreg="a0"/>
      <arg name="def_purpose" type="int" m68kreg="d0"/>
      <arg name="purpose" type="int" m68kreg="d1"/>
      <arg name="trust" type="int" m68kreg="d2"/>
    </method>
    <method name="X509_STORE_CTX_set_flags" result="void">
      <arg name="ctx" type="X509_STORE_CTX *" m68kreg="a0"/>
      <arg name="flags" type="long" m68kreg="d0"/>
    </method>
    <method name="X509_STORE_CTX_set_time" result="void">
      <arg name="ctx" type="X509_STORE_CTX *" m68kreg="a0"/>
      <arg name="flags" type="long" m68kreg="d0"/>
      <arg name="t" type="time_t" m68kreg="d1"/>
    </method>
    <method name="X509_STORE_CTX_set_verify_cb" result="void">
      <arg name="ctx" type="X509_STORE_CTX *" m68kreg="a0"/>
      <arg name="verify_cb" type="int (*)(int, X509_STORE_CTX *)" m68kreg="a1"/>
    </method>
    <method name="BASIC_CONSTRAINTS_new" result="BASIC_CONSTRAINTS *">
    </method>
    <method name="BASIC_CONSTRAINTS_free" result="void">
      <arg name="a" type="BASIC_CONSTRAINTS *" m68kreg="a0"/>
    </method>
    <method name="d2i_BASIC_CONSTRAINTS" result="BASIC_CONSTRAINTS *">
      <arg name="a" type="BASIC_CONSTRAINTS **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_BASIC_CONSTRAINTS" result="int">
      <arg name="a" type="BASIC_CONSTRAINTS *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="BASIC_CONSTRAINTS_it" result="const ASN1_ITEM *">
    </method>
    <method name="SXNET_new" result="SXNET *">
    </method>
    <method name="SXNET_free" result="void">
      <arg name="a" type="SXNET *" m68kreg="a0"/>
    </method>
    <method name="d2i_SXNET" result="SXNET *">
      <arg name="a" type="SXNET **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_SXNET" result="int">
      <arg name="a" type="SXNET *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="SXNET_it" result="const ASN1_ITEM *">
    </method>
    <method name="SXNETID_new" result="SXNETID *">
    </method>
    <method name="SXNETID_free" result="void">
      <arg name="a" type="SXNETID *" m68kreg="a0"/>
    </method>
    <method name="d2i_SXNETID" result="SXNETID *">
      <arg name="a" type="SXNETID **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_SXNETID" result="int">
      <arg name="a" type="SXNETID *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="SXNETID_it" result="const ASN1_ITEM *">
    </method>
    <method name="SXNET_add_id_asc" result="int">
      <arg name="psx" type="SXNET **" m68kreg="a0"/>
      <arg name="zone" type="const char *" m68kreg="a1"/>
      <arg name="user" type="const char *" m68kreg="a2"/>
      <arg name="userlen" type="int" m68kreg="d0"/>
    </method>
    <method name="SXNET_add_id_ulong" result="int">
      <arg name="psx" type="SXNET **" m68kreg="a0"/>
      <arg name="lzone" type="unsigned long" m68kreg="d0"/>
      <arg name="user" type="const char *" m68kreg="a1"/>
      <arg name="userlen" type="int" m68kreg="d1"/>
    </method>
    <method name="SXNET_add_id_INTEGER" result="int">
      <arg name="psx" type="SXNET **" m68kreg="a0"/>
      <arg name="izone" type="ASN1_INTEGER *" m68kreg="a1"/>
      <arg name="user" type="const char *" m68kreg="a2"/>
      <arg name="userlen" type="int" m68kreg="d0"/>
    </method>
    <method name="SXNET_get_id_asc" result="ASN1_OCTET_STRING *">
      <arg name="sx" type="SXNET *" m68kreg="a0"/>
      <arg name="zone" type="const char *" m68kreg="a1"/>
    </method>
    <method name="SXNET_get_id_ulong" result="ASN1_OCTET_STRING *">
      <arg name="sx" type="SXNET *" m68kreg="a0"/>
      <arg name="lzone" type="unsigned long" m68kreg="d0"/>
    </method>
    <method name="SXNET_get_id_INTEGER" result="ASN1_OCTET_STRING *">
      <arg name="sx" type="SXNET *" m68kreg="a0"/>
      <arg name="zone" type="ASN1_INTEGER *" m68kreg="a1"/>
    </method>
    <method name="AUTHORITY_KEYID_new" result="AUTHORITY_KEYID *">
    </method>
    <method name="AUTHORITY_KEYID_free" result="void">
      <arg name="a" type="AUTHORITY_KEYID *" m68kreg="a0"/>
    </method>
    <method name="d2i_AUTHORITY_KEYID" result="AUTHORITY_KEYID *">
      <arg name="a" type="AUTHORITY_KEYID **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_AUTHORITY_KEYID" result="int">
      <arg name="a" type="AUTHORITY_KEYID *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="AUTHORITY_KEYID_it" result="const ASN1_ITEM *">
    </method>
    <method name="PKEY_USAGE_PERIOD_new" result="PKEY_USAGE_PERIOD *">
    </method>
    <method name="PKEY_USAGE_PERIOD_free" result="void">
      <arg name="a" type="PKEY_USAGE_PERIOD *" m68kreg="a0"/>
    </method>
    <method name="d2i_PKEY_USAGE_PERIOD" result="PKEY_USAGE_PERIOD *">
      <arg name="a" type="PKEY_USAGE_PERIOD **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_PKEY_USAGE_PERIOD" result="int">
      <arg name="a" type="PKEY_USAGE_PERIOD *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="PKEY_USAGE_PERIOD_it" result="const ASN1_ITEM *">
    </method>
    <method name="GENERAL_NAME_new" result="GENERAL_NAME *">
    </method>
    <method name="GENERAL_NAME_free" result="void">
      <arg name="a" type="GENERAL_NAME *" m68kreg="a0"/>
    </method>
    <method name="d2i_GENERAL_NAME" result="GENERAL_NAME *">
      <arg name="a" type="GENERAL_NAME **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_GENERAL_NAME" result="int">
      <arg name="a" type="GENERAL_NAME *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="GENERAL_NAME_it" result="const ASN1_ITEM *">
    </method>
    <method name="i2v_GENERAL_NAME" result="STACK_OF(CONF_VALUE) *">
      <arg name="method" type="X509V3_EXT_METHOD *" m68kreg="a0"/>
      <arg name="gen" type="GENERAL_NAME *" m68kreg="a1"/>
      <arg name="ret" type="STACK_OF(CONF_VALUE) *" m68kreg="a2"/>
    </method>
    <method name="GENERAL_NAME_print" result="int">
      <arg name="out" type="BIO *" m68kreg="a0"/>
      <arg name="gen" type="GENERAL_NAME *" m68kreg="a1"/>
    </method>
    <method name="GENERAL_NAMES_new" result="GENERAL_NAMES *">
    </method>
    <method name="GENERAL_NAMES_free" result="void">
      <arg name="a" type="GENERAL_NAMES *" m68kreg="a0"/>
    </method>
    <method name="d2i_GENERAL_NAMES" result="GENERAL_NAMES *">
      <arg name="a" type="GENERAL_NAMES **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_GENERAL_NAMES" result="int">
      <arg name="a" type="GENERAL_NAMES *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="GENERAL_NAMES_it" result="const ASN1_ITEM *">
    </method>
    <method name="i2v_GENERAL_NAMES" result="STACK_OF(CONF_VALUE) *">
      <arg name="method" type="X509V3_EXT_METHOD *" m68kreg="a0"/>
      <arg name="gen" type="GENERAL_NAMES *" m68kreg="a1"/>
      <arg name="extlist" type="STACK_OF(CONF_VALUE) *" m68kreg="a2"/>
    </method>
    <method name="v2i_GENERAL_NAMES" result="GENERAL_NAMES *">
      <arg name="method" type="X509V3_EXT_METHOD *" m68kreg="a0"/>
      <arg name="ctx" type="X509V3_CTX *" m68kreg="a1"/>
      <arg name="nval" type="STACK_OF(CONF_VALUE) *" m68kreg="a2"/>
    </method>
    <method name="OTHERNAME_new" result="OTHERNAME *">
    </method>
    <method name="OTHERNAME_free" result="void">
      <arg name="a" type="OTHERNAME *" m68kreg="a0"/>
    </method>
    <method name="d2i_OTHERNAME" result="OTHERNAME *">
      <arg name="a" type="OTHERNAME **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_OTHERNAME" result="int">
      <arg name="a" type="OTHERNAME *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="OTHERNAME_it" result="const ASN1_ITEM *">
    </method>
    <method name="EDIPARTYNAME_new" result="EDIPARTYNAME *">
    </method>
    <method name="EDIPARTYNAME_free" result="void">
      <arg name="a" type="EDIPARTYNAME *" m68kreg="a0"/>
    </method>
    <method name="d2i_EDIPARTYNAME" result="EDIPARTYNAME *">
      <arg name="a" type="EDIPARTYNAME **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_EDIPARTYNAME" result="int">
      <arg name="a" type="EDIPARTYNAME *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="EDIPARTYNAME_it" result="const ASN1_ITEM *">
    </method>
    <method name="i2s_ASN1_OCTET_STRING" result="char *">
      <arg name="method" type="X509V3_EXT_METHOD *" m68kreg="a0"/>
      <arg name="ia5" type="const ASN1_OCTET_STRING *" m68kreg="a1"/>
    </method>
    <method name="s2i_ASN1_OCTET_STRING" result="ASN1_OCTET_STRING *">
      <arg name="method" type="X509V3_EXT_METHOD *" m68kreg="a0"/>
      <arg name="ctx" type="X509V3_CTX *" m68kreg="a1"/>
      <arg name="str" type="const char *" m68kreg="a2"/>
    </method>
    <method name="EXTENDED_KEY_USAGE_new" result="EXTENDED_KEY_USAGE *">
    </method>
    <method name="EXTENDED_KEY_USAGE_free" result="void">
      <arg name="a" type="EXTENDED_KEY_USAGE *" m68kreg="a0"/>
    </method>
    <method name="d2i_EXTENDED_KEY_USAGE" result="EXTENDED_KEY_USAGE *">
      <arg name="a" type="EXTENDED_KEY_USAGE **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_EXTENDED_KEY_USAGE" result="int">
      <arg name="a" type="EXTENDED_KEY_USAGE *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="EXTENDED_KEY_USAGE_it" result="const ASN1_ITEM *">
    </method>
    <method name="i2a_ACCESS_DESCRIPTION" result="int">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="a" type="const ACCESS_DESCRIPTION *" m68kreg="a1"/>
    </method>
    <method name="CERTIFICATEPOLICIES_new" result="CERTIFICATEPOLICIES *">
    </method>
    <method name="CERTIFICATEPOLICIES_free" result="void">
      <arg name="a" type="CERTIFICATEPOLICIES *" m68kreg="a0"/>
    </method>
    <method name="d2i_CERTIFICATEPOLICIES" result="CERTIFICATEPOLICIES *">
      <arg name="a" type="CERTIFICATEPOLICIES **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_CERTIFICATEPOLICIES" result="int">
      <arg name="a" type="CERTIFICATEPOLICIES *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="CERTIFICATEPOLICIES_it" result="const ASN1_ITEM *">
    </method>
    <method name="POLICYINFO_new" result="POLICYINFO *">
    </method>
    <method name="POLICYINFO_free" result="void">
      <arg name="a" type="POLICYINFO *" m68kreg="a0"/>
    </method>
    <method name="d2i_POLICYINFO" result="POLICYINFO *">
      <arg name="a" type="POLICYINFO **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_POLICYINFO" result="int">
      <arg name="a" type="POLICYINFO *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="POLICYINFO_it" result="const ASN1_ITEM *">
    </method>
    <method name="POLICYQUALINFO_new" result="POLICYQUALINFO *">
    </method>
    <method name="POLICYQUALINFO_free" result="void">
      <arg name="a" type="POLICYQUALINFO *" m68kreg="a0"/>
    </method>
    <method name="d2i_POLICYQUALINFO" result="POLICYQUALINFO *">
      <arg name="a" type="POLICYQUALINFO **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_POLICYQUALINFO" result="int">
      <arg name="a" type="POLICYQUALINFO *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="POLICYQUALINFO_it" result="const ASN1_ITEM *">
    </method>
    <method name="USERNOTICE_new" result="USERNOTICE *">
    </method>
    <method name="USERNOTICE_free" result="void">
      <arg name="a" type="USERNOTICE *" m68kreg="a0"/>
    </method>
    <method name="d2i_USERNOTICE" result="USERNOTICE *">
      <arg name="a" type="USERNOTICE **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_USERNOTICE" result="int">
      <arg name="a" type="USERNOTICE *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="USERNOTICE_it" result="const ASN1_ITEM *">
    </method>
    <method name="NOTICEREF_new" result="NOTICEREF *">
    </method>
    <method name="NOTICEREF_free" result="void">
      <arg name="a" type="NOTICEREF *" m68kreg="a0"/>
    </method>
    <method name="d2i_NOTICEREF" result="NOTICEREF *">
      <arg name="a" type="NOTICEREF **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_NOTICEREF" result="int">
      <arg name="a" type="NOTICEREF *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="NOTICEREF_it" result="const ASN1_ITEM *">
    </method>
    <method name="CRL_DIST_POINTS_new" result="CRL_DIST_POINTS *">
    </method>
    <method name="CRL_DIST_POINTS_free" result="void">
      <arg name="a" type="CRL_DIST_POINTS *" m68kreg="a0"/>
    </method>
    <method name="d2i_CRL_DIST_POINTS" result="CRL_DIST_POINTS *">
      <arg name="a" type="CRL_DIST_POINTS **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_CRL_DIST_POINTS" result="int">
      <arg name="a" type="CRL_DIST_POINTS *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="CRL_DIST_POINTS_it" result="const ASN1_ITEM *">
    </method>
    <method name="DIST_POINT_new" result="DIST_POINT *">
    </method>
    <method name="DIST_POINT_free" result="void">
      <arg name="a" type="DIST_POINT *" m68kreg="a0"/>
    </method>
    <method name="d2i_DIST_POINT" result="DIST_POINT *">
      <arg name="a" type="DIST_POINT **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_DIST_POINT" result="int">
      <arg name="a" type="DIST_POINT *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="DIST_POINT_it" result="const ASN1_ITEM *">
    </method>
    <method name="DIST_POINT_NAME_new" result="DIST_POINT_NAME *">
    </method>
    <method name="DIST_POINT_NAME_free" result="void">
      <arg name="a" type="DIST_POINT_NAME *" m68kreg="a0"/>
    </method>
    <method name="d2i_DIST_POINT_NAME" result="DIST_POINT_NAME *">
      <arg name="a" type="DIST_POINT_NAME **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_DIST_POINT_NAME" result="int">
      <arg name="a" type="DIST_POINT_NAME *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="DIST_POINT_NAME_it" result="const ASN1_ITEM *">
    </method>
    <method name="ACCESS_DESCRIPTION_new" result="ACCESS_DESCRIPTION *">
    </method>
    <method name="ACCESS_DESCRIPTION_free" result="void">
      <arg name="a" type="ACCESS_DESCRIPTION *" m68kreg="a0"/>
    </method>
    <method name="d2i_ACCESS_DESCRIPTION" result="ACCESS_DESCRIPTION *">
      <arg name="a" type="ACCESS_DESCRIPTION **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_ACCESS_DESCRIPTION" result="int">
      <arg name="a" type="ACCESS_DESCRIPTION *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="ACCESS_DESCRIPTION_it" result="const ASN1_ITEM *">
    </method>
    <method name="AUTHORITY_INFO_ACCESS_new" result="AUTHORITY_INFO_ACCESS *">
    </method>
    <method name="AUTHORITY_INFO_ACCESS_free" result="void">
      <arg name="a" type="AUTHORITY_INFO_ACCESS *" m68kreg="a0"/>
    </method>
    <method name="d2i_AUTHORITY_INFO_ACCESS" result="AUTHORITY_INFO_ACCESS *">
      <arg name="a" type="AUTHORITY_INFO_ACCESS **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_AUTHORITY_INFO_ACCESS" result="int">
      <arg name="a" type="AUTHORITY_INFO_ACCESS *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="AUTHORITY_INFO_ACCESS_it" result="const ASN1_ITEM *">
    </method>
    <method name="v2i_GENERAL_NAME" result="GENERAL_NAME *">
      <arg name="method" type="X509V3_EXT_METHOD *" m68kreg="a0"/>
      <arg name="ctx" type="X509V3_CTX *" m68kreg="a1"/>
      <arg name="cnf" type="CONF_VALUE *" m68kreg="a2"/>
    </method>
    <method name="X509V3_conf_free" result="void">
      <arg name="val" type="CONF_VALUE *" m68kreg="a0"/>
    </method>
    <method name="X509V3_EXT_nconf_nid" result="X509_EXTENSION *">
      <arg name="conf" type="CONF *" m68kreg="a0"/>
      <arg name="ctx" type="X509V3_CTX *" m68kreg="a1"/>
      <arg name="ext_nid" type="int" m68kreg="d0"/>
      <arg name="value" type="char *" m68kreg="a2"/>
    </method>
    <method name="X509V3_EXT_nconf" result="X509_EXTENSION *">
      <arg name="conf" type="CONF *" m68kreg="a0"/>
      <arg name="ctx" type="X509V3_CTX *" m68kreg="a1"/>
      <arg name="name" type="const char *" m68kreg="a2"/>
      <arg name="value" type="const char *" m68kreg="a3"/>
    </method>
    <method name="X509V3_EXT_add_nconf_sk" result="int">
      <arg name="conf" type="CONF *" m68kreg="a0"/>
      <arg name="ctx" type="X509V3_CTX *" m68kreg="a1"/>
      <arg name="section" type="const char *" m68kreg="a2"/>
      <arg name="sk" type="STACK_OF(X509_EXTENSION) **" m68kreg="a3"/>
    </method>
    <method name="X509V3_EXT_add_nconf" result="int">
      <arg name="conf" type="CONF *" m68kreg="a0"/>
      <arg name="ctx" type="X509V3_CTX *" m68kreg="a1"/>
      <arg name="section" type="const char *" m68kreg="a2"/>
      <arg name="cert" type="X509 *" m68kreg="a3"/>
    </method>
    <method name="X509V3_EXT_REQ_add_nconf" result="int">
      <arg name="conf" type="CONF *" m68kreg="a0"/>
      <arg name="ctx" type="X509V3_CTX *" m68kreg="a1"/>
      <arg name="section" type="const char *" m68kreg="a2"/>
      <arg name="req" type="X509_REQ *" m68kreg="a3"/>
    </method>
    <method name="X509V3_EXT_CRL_add_nconf" result="int">
      <arg name="conf" type="CONF *" m68kreg="a0"/>
      <arg name="ctx" type="X509V3_CTX *" m68kreg="a1"/>
      <arg name="section" type="const char *" m68kreg="a2"/>
      <arg name="crl" type="X509_CRL *" m68kreg="a3"/>
    </method>
    <method name="X509V3_EXT_conf_nid" result="X509_EXTENSION *">
      <arg name="conf" type="LHASH_OF(CONF_VALUE) *" m68kreg="a0"/>
      <arg name="ctx" type="X509V3_CTX *" m68kreg="a1"/>
      <arg name="ext_nid" type="int" m68kreg="d0"/>
      <arg name="value" type="const char *" m68kreg="a2"/>
    </method>
    <method name="X509V3_EXT_conf" result="X509_EXTENSION *">
      <arg name="conf" type="LHASH_OF(CONF_VALUE) *" m68kreg="a0"/>
      <arg name="ctx" type="X509V3_CTX *" m68kreg="a1"/>
      <arg name="name" type="const char *" m68kreg="a2"/>
      <arg name="value" type="const char *" m68kreg="a3"/>
    </method>
    <method name="X509V3_EXT_add_conf" result="int">
      <arg name="conf" type="LHASH_OF(CONF_VALUE) *" m68kreg="a0"/>
      <arg name="ctx" type="X509V3_CTX *" m68kreg="a1"/>
      <arg name="section" type="const char *" m68kreg="a2"/>
      <arg name="cert" type="X509 *" m68kreg="a3"/>
    </method>
    <method name="X509V3_EXT_REQ_add_conf" result="int">
      <arg name="conf" type="LHASH_OF(CONF_VALUE) *" m68kreg="a0"/>
      <arg name="ctx" type="X509V3_CTX *" m68kreg="a1"/>
      <arg name="section" type="const char *" m68kreg="a2"/>
      <arg name="req" type="X509_REQ *" m68kreg="a3"/>
    </method>
    <method name="X509V3_EXT_CRL_add_conf" result="int">
      <arg name="conf" type="LHASH_OF(CONF_VALUE) *" m68kreg="a0"/>
      <arg name="ctx" type="X509V3_CTX *" m68kreg="a1"/>
      <arg name="section" type="const char *" m68kreg="a2"/>
      <arg name="crl" type="X509_CRL *" m68kreg="a3"/>
    </method>
    <method name="X509V3_add_value_bool_nf" result="int">
      <arg name="name" type="const char *" m68kreg="a0"/>
      <arg name="asn1_bool" type="int" m68kreg="d0"/>
      <arg name="extlist" type="STACK_OF(CONF_VALUE) **" m68kreg="a1"/>
    </method>
    <method name="X509V3_get_value_bool" result="int">
      <arg name="value" type="const CONF_VALUE *" m68kreg="a0"/>
      <arg name="asn1_bool" type="int *" m68kreg="a1"/>
    </method>
    <method name="X509V3_get_value_int" result="int">
      <arg name="value" type="const CONF_VALUE *" m68kreg="a0"/>
      <arg name="aint" type="ASN1_INTEGER **" m68kreg="a1"/>
    </method>
    <method name="X509V3_set_nconf" result="void">
      <arg name="ctx" type="X509V3_CTX *" m68kreg="a0"/>
      <arg name="conf" type="CONF *" m68kreg="a1"/>
    </method>
    <method name="X509V3_set_conf_lhash" result="void">
      <arg name="ctx" type="X509V3_CTX *" m68kreg="a0"/>
      <arg name="lhash" type="LHASH_OF(CONF_VALUE) *" m68kreg="a1"/>
    </method>
    <method name="X509V3_get_string" result="char *">
      <arg name="ctx" type="X509V3_CTX *" m68kreg="a0"/>
      <arg name="name" type="const char *" m68kreg="a1"/>
      <arg name="section" type="const char *" m68kreg="a2"/>
    </method>
    <method name="X509V3_get_section" result="STACK_OF(CONF_VALUE) *">
      <arg name="ctx" type="X509V3_CTX *" m68kreg="a0"/>
      <arg name="section" type="const char *" m68kreg="a1"/>
    </method>
    <method name="X509V3_string_free" result="void">
      <arg name="ctx" type="X509V3_CTX *" m68kreg="a0"/>
      <arg name="str" type="char *" m68kreg="a1"/>
    </method>
    <method name="X509V3_section_free" result="void">
      <arg name="ctx" type="X509V3_CTX *" m68kreg="a0"/>
      <arg name="section" type="STACK_OF(CONF_VALUE) *" m68kreg="a1"/>
    </method>
    <method name="X509V3_set_ctx" result="void">
      <arg name="ctx" type="X509V3_CTX *" m68kreg="a0"/>
      <arg name="issuer" type="X509 *" m68kreg="a1"/>
      <arg name="subject" type="X509 *" m68kreg="a2"/>
      <arg name="req" type="X509_REQ *" m68kreg="a3"/>
      <arg name="crl" type="X509_CRL *" m68kreg="d0"/>
      <arg name="flags" type="int" m68kreg="d1"/>
    </method>
    <method name="X509V3_add_value" result="int">
      <arg name="name" type="const char *" m68kreg="a0"/>
      <arg name="value" type="const char *" m68kreg="a1"/>
      <arg name="extlist" type="STACK_OF(CONF_VALUE) **" m68kreg="a2"/>
    </method>
    <method name="X509V3_add_value_uchar" result="int">
      <arg name="name" type="const char *" m68kreg="a0"/>
      <arg name="value" type="const unsigned char *" m68kreg="a1"/>
      <arg name="extlist" type="STACK_OF(CONF_VALUE) **" m68kreg="a2"/>
    </method>
    <method name="X509V3_add_value_bool" result="int">
      <arg name="name" type="const char *" m68kreg="a0"/>
      <arg name="asn1_bool" type="int" m68kreg="d0"/>
      <arg name="extlist" type="STACK_OF(CONF_VALUE) **" m68kreg="a1"/>
    </method>
    <method name="X509V3_add_value_int" result="int">
      <arg name="name" type="const char *" m68kreg="a0"/>
      <arg name="aint" type="const ASN1_INTEGER *" m68kreg="a1"/>
      <arg name="extlist" type="STACK_OF(CONF_VALUE) **" m68kreg="a2"/>
    </method>
    <method name="i2s_ASN1_INTEGER" result="char *">
      <arg name="meth" type="X509V3_EXT_METHOD *" m68kreg="a0"/>
      <arg name="aint" type="const ASN1_INTEGER *" m68kreg="a1"/>
    </method>
    <method name="s2i_ASN1_INTEGER" result="ASN1_INTEGER *">
      <arg name="meth" type="X509V3_EXT_METHOD *" m68kreg="a0"/>
      <arg name="value" type="const char *" m68kreg="a1"/>
    </method>
    <method name="i2s_ASN1_ENUMERATED" result="char *">
      <arg name="meth" type="X509V3_EXT_METHOD *" m68kreg="a0"/>
      <arg name="aint" type="const ASN1_ENUMERATED *" m68kreg="a1"/>
    </method>
    <method name="i2s_ASN1_ENUMERATED_TABLE" result="char *">
      <arg name="meth" type="X509V3_EXT_METHOD *" m68kreg="a0"/>
      <arg name="aint" type="const ASN1_ENUMERATED *" m68kreg="a1"/>
    </method>
    <method name="X509V3_EXT_add" result="int">
      <arg name="ext" type="X509V3_EXT_METHOD *" m68kreg="a0"/>
    </method>
    <method name="X509V3_EXT_add_list" result="int">
      <arg name="extlist" type="X509V3_EXT_METHOD *" m68kreg="a0"/>
    </method>
    <method name="X509V3_EXT_add_alias" result="int">
      <arg name="nid_to" type="int" m68kreg="d0"/>
      <arg name="nid_from" type="int" m68kreg="d1"/>
    </method>
    <method name="X509V3_EXT_cleanup" result="void">
    </method>
    <method name="X509V3_EXT_get" result="const X509V3_EXT_METHOD *">
      <arg name="ext" type="X509_EXTENSION *" m68kreg="a0"/>
    </method>
    <method name="X509V3_EXT_get_nid" result="const X509V3_EXT_METHOD *">
      <arg name="nid" type="int" m68kreg="d0"/>
    </method>
    <method name="X509V3_add_standard_extensions" result="int">
    </method>
    <method name="X509V3_parse_list" result="STACK_OF(CONF_VALUE) *">
      <arg name="line" type="const char *" m68kreg="a0"/>
    </method>
    <method name="X509V3_EXT_d2i" result="void *">
      <arg name="ext" type="X509_EXTENSION *" m68kreg="a0"/>
    </method>
    <method name="X509V3_get_d2i" result="void *">
      <arg name="x" type="const STACK_OF(X509_EXTENSION) *" m68kreg="a0"/>
      <arg name="nid" type="int" m68kreg="d0"/>
      <arg name="crit" type="int *" m68kreg="a1"/>
      <arg name="idx" type="int *" m68kreg="a2"/>
    </method>
    <method name="X509V3_EXT_i2d" result="X509_EXTENSION *">
      <arg name="ext_nid" type="int" m68kreg="d0"/>
      <arg name="crit" type="int" m68kreg="d1"/>
      <arg name="ext_struc" type="void *" m68kreg="a0"/>
    </method>
    <method name="X509V3_add1_i2d" result="int">
      <arg name="x" type="STACK_OF(X509_EXTENSION) **" m68kreg="a0"/>
      <arg name="nid" type="int" m68kreg="d0"/>
      <arg name="value" type="void *" m68kreg="a1"/>
      <arg name="crit" type="int" m68kreg="d1"/>
      <arg name="flags" type="unsigned long" m68kreg="d2"/>
    </method>
    <method name="OPENSSL_buf2hexstr" result="char *">
      <arg name="buffer" type="const unsigned char *" m68kreg="a0"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="OPENSSL_hexstr2buf" result="unsigned char *">
      <arg name="str" type="const char *" m68kreg="a0"/>
      <arg name="len" type="long *" m68kreg="a1"/>
    </method>
    <method name="X509V3_EXT_val_prn" result="void">
      <arg name="out" type="BIO *" m68kreg="a0"/>
      <arg name="val" type="STACK_OF(CONF_VALUE) *" m68kreg="a1"/>
      <arg name="indent" type="int" m68kreg="d0"/>
      <arg name="ml" type="int" m68kreg="d1"/>
    </method>
    <method name="X509V3_EXT_print" result="int">
      <arg name="out" type="BIO *" m68kreg="a0"/>
      <arg name="ext" type="X509_EXTENSION *" m68kreg="a1"/>
      <arg name="flag" type="unsigned long" m68kreg="d0"/>
      <arg name="indent" type="int" m68kreg="d1"/>
    </method>
    <method name="X509V3_extensions_print" result="int">
      <arg name="out" type="BIO *" m68kreg="a0"/>
      <arg name="title" type="const char *" m68kreg="a1"/>
      <arg name="exts" type="const STACK_OF(X509_EXTENSION) *" m68kreg="a2"/>
      <arg name="flag" type="unsigned long" m68kreg="d0"/>
      <arg name="indent" type="int" m68kreg="d1"/>
    </method>
    <method name="X509_check_purpose" result="int">
      <arg name="x" type="X509 *" m68kreg="a0"/>
      <arg name="id" type="int" m68kreg="d0"/>
      <arg name="ca" type="int" m68kreg="d1"/>
    </method>
    <method name="X509_supported_extension" result="int">
      <arg name="ex" type="X509_EXTENSION *" m68kreg="a0"/>
    </method>
    <method name="X509_PURPOSE_set" result="int">
      <arg name="p" type="int *" m68kreg="a0"/>
      <arg name="purpose" type="int" m68kreg="d0"/>
    </method>
    <method name="X509_check_issued" result="int">
      <arg name="issuer" type="X509 *" m68kreg="a0"/>
      <arg name="subject" type="X509 *" m68kreg="a1"/>
    </method>
    <method name="X509_PURPOSE_get_count" result="int">
    </method>
    <method name="X509_PURPOSE_get0" result="X509_PURPOSE *">
      <arg name="idx" type="int" m68kreg="d0"/>
    </method>
    <method name="X509_PURPOSE_get_by_sname" result="int">
      <arg name="sname" type="const char *" m68kreg="a0"/>
    </method>
    <method name="X509_PURPOSE_get_by_id" result="int">
      <arg name="id" type="int" m68kreg="d0"/>
    </method>
    <method name="X509_PURPOSE_add" result="int">
      <arg name="id" type="int" m68kreg="d0"/>
      <arg name="trust" type="int" m68kreg="d1"/>
      <arg name="flags" type="int" m68kreg="d2"/>
      <arg name="ck" type="int (*)(const X509_PURPOSE *, const X509 *, int)" m68kreg="a0"/>
      <arg name="name" type="const char *" m68kreg="a1"/>
      <arg name="sname" type="const char *" m68kreg="a2"/>
      <arg name="arg" type="void *" m68kreg="a3"/>
    </method>
    <method name="X509_PURPOSE_get0_name" result="char *">
      <arg name="xp" type="const X509_PURPOSE *" m68kreg="a0"/>
    </method>
    <method name="X509_PURPOSE_get0_sname" result="char *">
      <arg name="xp" type="const X509_PURPOSE *" m68kreg="a0"/>
    </method>
    <method name="X509_PURPOSE_get_trust" result="int">
      <arg name="xp" type="const X509_PURPOSE *" m68kreg="a0"/>
    </method>
    <method name="X509_PURPOSE_cleanup" result="void">
    </method>
    <method name="X509_PURPOSE_get_id" result="int">
      <arg name="a" type="const X509_PURPOSE *" m68kreg="a0"/>
    </method>
    <method name="X509_get1_email" result="STACK_OF(OPENSSL_STRING) *">
      <arg name="x" type="X509 *" m68kreg="a0"/>
    </method>
    <method name="X509_REQ_get1_email" result="STACK_OF(OPENSSL_STRING) *">
      <arg name="x" type="X509_REQ *" m68kreg="a0"/>
    </method>
    <method name="X509_email_free" result="void">
      <arg name="sk" type="STACK_OF(OPENSSL_STRING) *" m68kreg="a0"/>
    </method>
    <method name="ERR_load_X509V3_strings" result="int">
    </method>
    <method name="AES_options" result="const char *">
    </method>
    <method name="AES_set_encrypt_key" result="int">
      <arg name="userKey" type="const unsigned char *" m68kreg="a0"/>
      <arg name="bits" type="const int" m68kreg="d0"/>
      <arg name="key" type="AES_KEY *" m68kreg="a1"/>
    </method>
    <method name="AES_set_decrypt_key" result="int">
      <arg name="userKey" type="const unsigned char *" m68kreg="a0"/>
      <arg name="bits" type="const int" m68kreg="d0"/>
      <arg name="key" type="AES_KEY *" m68kreg="a1"/>
    </method>
    <method name="AES_encrypt" result="void">
      <arg name="in" type="const unsigned char *" m68kreg="a0"/>
      <arg name="out" type="unsigned char *" m68kreg="a1"/>
      <arg name="key" type="const AES_KEY *" m68kreg="a2"/>
    </method>
    <method name="AES_decrypt" result="void">
      <arg name="in" type="const unsigned char *" m68kreg="a0"/>
      <arg name="out" type="unsigned char *" m68kreg="a1"/>
      <arg name="key" type="const AES_KEY *" m68kreg="a2"/>
    </method>
    <method name="AES_ecb_encrypt" result="void">
      <arg name="in" type="const unsigned char *" m68kreg="a0"/>
      <arg name="out" type="unsigned char *" m68kreg="a1"/>
      <arg name="key" type="const AES_KEY *" m68kreg="a2"/>
      <arg name="enc" type="const int" m68kreg="d0"/>
    </method>
    <method name="AES_cbc_encrypt" result="void">
      <arg name="in" type="const unsigned char *" m68kreg="a0"/>
      <arg name="out" type="unsigned char *" m68kreg="a1"/>
      <arg name="length" type="const unsigned long" m68kreg="d0"/>
      <arg name="key" type="const AES_KEY *" m68kreg="a2"/>
      <arg name="ivec" type="unsigned char *" m68kreg="a3"/>
      <arg name="enc" type="const int" m68kreg="d1"/>
    </method>
    <method name="AES_cfb128_encrypt" result="void">
      <arg name="in" type="const unsigned char *" m68kreg="a0"/>
      <arg name="out" type="unsigned char *" m68kreg="a1"/>
      <arg name="length" type="const unsigned long" m68kreg="d0"/>
      <arg name="key" type="const AES_KEY *" m68kreg="a2"/>
      <arg name="ivec" type="unsigned char *" m68kreg="a3"/>
      <arg name="num" type="int *" m68kreg="d1"/>
      <arg name="enc" type="const int" m68kreg="d2"/>
    </method>
    <method name="AES_cfb1_encrypt" result="void">
      <arg name="in" type="const unsigned char *" m68kreg="a0"/>
      <arg name="out" type="unsigned char *" m68kreg="a1"/>
      <arg name="length" type="const unsigned long" m68kreg="d0"/>
      <arg name="key" type="const AES_KEY *" m68kreg="a2"/>
      <arg name="ivec" type="unsigned char *" m68kreg="a3"/>
      <arg name="num" type="int *" m68kreg="d1"/>
      <arg name="enc" type="const int" m68kreg="d2"/>
    </method>
    <method name="AES_cfb8_encrypt" result="void">
      <arg name="in" type="const unsigned char *" m68kreg="a0"/>
      <arg name="out" type="unsigned char *" m68kreg="a1"/>
      <arg name="length" type="const unsigned long" m68kreg="d0"/>
      <arg name="key" type="const AES_KEY *" m68kreg="a2"/>
      <arg name="ivec" type="unsigned char *" m68kreg="a3"/>
      <arg name="num" type="int *" m68kreg="d1"/>
      <arg name="enc" type="const int" m68kreg="d2"/>
    </method>
    <method name="AES_cfbr_encrypt_block" result="void" status="unimplemented">
      <arg name="in" type="const unsigned char *" m68kreg="a0"/>
      <arg name="out" type="unsigned char *" m68kreg="a1"/>
      <arg name="nbits" type="const int" m68kreg="d0"/>
      <arg name="key" type="const AES_KEY *" m68kreg="a2"/>
      <arg name="ivec" type="unsigned char *" m68kreg="a3"/>
      <arg name="enc" type="const int" m68kreg="d1"/>
    </method>
    <method name="AES_ofb128_encrypt" result="void">
      <arg name="in" type="const unsigned char *" m68kreg="a0"/>
      <arg name="out" type="unsigned char *" m68kreg="a1"/>
      <arg name="length" type="const unsigned long" m68kreg="d0"/>
      <arg name="key" type="const AES_KEY *" m68kreg="a2"/>
      <arg name="ivec" type="unsigned char *" m68kreg="a3"/>
      <arg name="num" type="int *" m68kreg="d1"/>
    </method>
    <method name="AES_ctr128_encrypt" result="void" status="unimplemented">
      <arg name="in" type="const unsigned char *" m68kreg="a0"/>
      <arg name="out" type="unsigned char *" m68kreg="a1"/>
      <arg name="length" type="const unsigned long" m68kreg="d0"/>
      <arg name="key" type="const AES_KEY *" m68kreg="a2"/>
      <arg name="ivec" type="unsigned char *" m68kreg="d1"/>
      <arg name="ecount_buf" type="unsigned char *" m68kreg="d2"/>
      <arg name="num" type="unsigned int *" m68kreg="a3"/>
    </method>
    <method name="BF_set_key" result="void">
      <arg name="key" type="BF_KEY *" m68kreg="a0"/>
      <arg name="len" type="int" m68kreg="d0"/>
      <arg name="data" type="const unsigned char *" m68kreg="a1"/>
    </method>
    <method name="BF_encrypt" result="void">
      <arg name="data" type="BF_LONG *" m68kreg="a0"/>
      <arg name="key" type="const BF_KEY *" m68kreg="a1"/>
    </method>
    <method name="BF_decrypt" result="void">
      <arg name="data" type="BF_LONG *" m68kreg="a0"/>
      <arg name="key" type="const BF_KEY *" m68kreg="a1"/>
    </method>
    <method name="BF_ecb_encrypt" result="void">
      <arg name="in" type="const unsigned char *" m68kreg="a0"/>
      <arg name="out" type="unsigned char *" m68kreg="a1"/>
      <arg name="key" type="const BF_KEY *" m68kreg="a2"/>
      <arg name="enc" type="int" m68kreg="d0"/>
    </method>
    <method name="BF_cbc_encrypt" result="void">
      <arg name="in" type="const unsigned char *" m68kreg="a0"/>
      <arg name="out" type="unsigned char *" m68kreg="a1"/>
      <arg name="length" type="long" m68kreg="d0"/>
      <arg name="schedule" type="const BF_KEY *" m68kreg="a2"/>
      <arg name="ivec" type="unsigned char *" m68kreg="a3"/>
      <arg name="enc" type="int" m68kreg="d1"/>
    </method>
    <method name="BF_cfb64_encrypt" result="void">
      <arg name="in" type="const unsigned char *" m68kreg="a0"/>
      <arg name="out" type="unsigned char *" m68kreg="a1"/>
      <arg name="length" type="long" m68kreg="d0"/>
      <arg name="schedule" type="const BF_KEY *" m68kreg="a2"/>
      <arg name="ivec" type="unsigned char *" m68kreg="a3"/>
      <arg name="num" type="int *" m68kreg="d1"/>
      <arg name="enc" type="int" m68kreg="d2"/>
    </method>
    <method name="BF_ofb64_encrypt" result="void">
      <arg name="in" type="const unsigned char *" m68kreg="a0"/>
      <arg name="out" type="unsigned char *" m68kreg="a1"/>
      <arg name="length" type="long" m68kreg="d0"/>
      <arg name="schedule" type="const BF_KEY *" m68kreg="a2"/>
      <arg name="ivec" type="unsigned char *" m68kreg="a3"/>
      <arg name="num" type="int *" m68kreg="d1"/>
    </method>
    <method name="BF_options" result="const char *">
    </method>
    <method name="CAST_set_key" result="void">
      <arg name="key" type="CAST_KEY *" m68kreg="a0"/>
      <arg name="len" type="int" m68kreg="d0"/>
      <arg name="data" type="const unsigned char *" m68kreg="a1"/>
    </method>
    <method name="CAST_ecb_encrypt" result="void">
      <arg name="in" type="const unsigned char *" m68kreg="a0"/>
      <arg name="out" type="unsigned char *" m68kreg="a1"/>
      <arg name="key" type="CAST_KEY *" m68kreg="a2"/>
      <arg name="enc" type="int" m68kreg="d0"/>
    </method>
    <method name="CAST_encrypt" result="void">
      <arg name="data" type="CAST_LONG *" m68kreg="a0"/>
      <arg name="key" type="CAST_KEY *" m68kreg="a1"/>
    </method>
    <method name="CAST_decrypt" result="void">
      <arg name="data" type="CAST_LONG *" m68kreg="a0"/>
      <arg name="key" type="CAST_KEY *" m68kreg="a1"/>
    </method>
    <method name="CAST_cbc_encrypt" result="void">
      <arg name="in" type="const unsigned char *" m68kreg="a0"/>
      <arg name="out" type="unsigned char *" m68kreg="a1"/>
      <arg name="length" type="long" m68kreg="d0"/>
      <arg name="ks" type="CAST_KEY *" m68kreg="a2"/>
      <arg name="iv" type="unsigned char *" m68kreg="a3"/>
      <arg name="enc" type="int" m68kreg="d1"/>
    </method>
    <method name="CAST_cfb64_encrypt" result="void">
      <arg name="in" type="const unsigned char *" m68kreg="a0"/>
      <arg name="out" type="unsigned char *" m68kreg="a1"/>
      <arg name="length" type="long" m68kreg="d0"/>
      <arg name="schedule" type="CAST_KEY *" m68kreg="a2"/>
      <arg name="ivec" type="unsigned char *" m68kreg="a3"/>
      <arg name="num" type="int *" m68kreg="d1"/>
      <arg name="enc" type="int" m68kreg="d2"/>
    </method>
    <method name="CAST_ofb64_encrypt" result="void">
      <arg name="in" type="const unsigned char *" m68kreg="a0"/>
      <arg name="out" type="unsigned char *" m68kreg="a1"/>
      <arg name="length" type="long" m68kreg="d0"/>
      <arg name="schedule" type="CAST_KEY *" m68kreg="a2"/>
      <arg name="ivec" type="unsigned char *" m68kreg="a3"/>
      <arg name="num" type="int *" m68kreg="d1"/>
    </method>
    <method name="_shadow_DES_check_key" result="int *">
    </method>
    <method name="DES_options" result="const char *">
    </method>
    <method name="DES_ecb3_encrypt" result="void">
      <arg name="input" type="const_DES_cblock *" m68kreg="a0"/>
      <arg name="output" type="DES_cblock *" m68kreg="a1"/>
      <arg name="ks1" type="DES_key_schedule *" m68kreg="a2"/>
      <arg name="ks2" type="DES_key_schedule *" m68kreg="a3"/>
      <arg name="ks3" type="DES_key_schedule *" m68kreg="d0"/>
      <arg name="enc" type="int" m68kreg="d1"/>
    </method>
    <method name="DES_cbc_cksum" result="DES_LONG">
      <arg name="input" type="const unsigned char *" m68kreg="a0"/>
      <arg name="output" type="DES_cblock *" m68kreg="a1"/>
      <arg name="length" type="long" m68kreg="d0"/>
      <arg name="schedule" type="DES_key_schedule *" m68kreg="a2"/>
      <arg name="ivec" type="const_DES_cblock *" m68kreg="a3"/>
    </method>
    <method name="DES_cbc_encrypt" result="void">
      <arg name="input" type="const unsigned char *" m68kreg="a0"/>
      <arg name="output" type="unsigned char *" m68kreg="a1"/>
      <arg name="length" type="long" m68kreg="d0"/>
      <arg name="schedule" type="DES_key_schedule *" m68kreg="a2"/>
      <arg name="ivec" type="DES_cblock *" m68kreg="a3"/>
      <arg name="enc" type="int" m68kreg="d1"/>
    </method>
    <method name="DES_ncbc_encrypt" result="void">
      <arg name="input" type="const unsigned char *" m68kreg="a0"/>
      <arg name="output" type="unsigned char *" m68kreg="a1"/>
      <arg name="length" type="long" m68kreg="d0"/>
      <arg name="schedule" type="DES_key_schedule *" m68kreg="a2"/>
      <arg name="ivec" type="DES_cblock *" m68kreg="a3"/>
      <arg name="enc" type="int" m68kreg="d1"/>
    </method>
    <method name="DES_xcbc_encrypt" result="void">
      <arg name="input" type="const unsigned char *" m68kreg="a0"/>
      <arg name="output" type="unsigned char *" m68kreg="a1"/>
      <arg name="length" type="long" m68kreg="d0"/>
      <arg name="schedule" type="DES_key_schedule *" m68kreg="a2"/>
      <arg name="ivec" type="DES_cblock *" m68kreg="a3"/>
      <arg name="inw" type="const_DES_cblock *" m68kreg="d1"/>
      <arg name="outw" type="const_DES_cblock *" m68kreg="d2"/>
      <arg name="enc" type="int" m68kreg="d3"/>
    </method>
    <method name="DES_cfb_encrypt" result="void">
      <arg name="in" type="const unsigned char *" m68kreg="a0"/>
      <arg name="out" type="unsigned char *" m68kreg="a1"/>
      <arg name="numbits" type="int" m68kreg="d0"/>
      <arg name="length" type="long" m68kreg="d1"/>
      <arg name="schedule" type="DES_key_schedule *" m68kreg="a2"/>
      <arg name="ivec" type="DES_cblock *" m68kreg="a3"/>
      <arg name="enc" type="int" m68kreg="d2"/>
    </method>
    <method name="DES_ecb_encrypt" result="void">
      <arg name="input" type="const_DES_cblock *" m68kreg="a0"/>
      <arg name="output" type="DES_cblock *" m68kreg="a1"/>
      <arg name="ks" type="DES_key_schedule *" m68kreg="a2"/>
      <arg name="enc" type="int" m68kreg="d0"/>
    </method>
    <method name="DES_encrypt1" result="void">
      <arg name="data" type="DES_LONG *" m68kreg="a0"/>
      <arg name="ks" type="DES_key_schedule *" m68kreg="a1"/>
      <arg name="enc" type="int" m68kreg="d0"/>
    </method>
    <method name="DES_encrypt2" result="void">
      <arg name="data" type="DES_LONG *" m68kreg="a0"/>
      <arg name="ks" type="DES_key_schedule *" m68kreg="a1"/>
      <arg name="enc" type="int" m68kreg="d0"/>
    </method>
    <method name="DES_encrypt3" result="void">
      <arg name="data" type="DES_LONG *" m68kreg="a0"/>
      <arg name="ks1" type="DES_key_schedule *" m68kreg="a1"/>
      <arg name="ks2" type="DES_key_schedule *" m68kreg="a2"/>
      <arg name="ks3" type="DES_key_schedule *" m68kreg="a3"/>
    </method>
    <method name="DES_decrypt3" result="void">
      <arg name="data" type="DES_LONG *" m68kreg="a0"/>
      <arg name="ks1" type="DES_key_schedule *" m68kreg="a1"/>
      <arg name="ks2" type="DES_key_schedule *" m68kreg="a2"/>
      <arg name="ks3" type="DES_key_schedule *" m68kreg="a3"/>
    </method>
    <method name="DES_ede3_cbc_encrypt" result="void">
      <arg name="input" type="const unsigned char *" m68kreg="a0"/>
      <arg name="output" type="unsigned char *" m68kreg="a1"/>
      <arg name="length" type="long" m68kreg="d0"/>
      <arg name="ks1" type="DES_key_schedule *" m68kreg="a2"/>
      <arg name="ks2" type="DES_key_schedule *" m68kreg="a3"/>
      <arg name="ks3" type="DES_key_schedule *" m68kreg="d1"/>
      <arg name="ivec" type="DES_cblock *" m68kreg="d2"/>
      <arg name="enc" type="int" m68kreg="d3"/>
    </method>
    <method name="DES_ede3_cbcm_encrypt" result="void" status="unimplemented">
      <arg name="in" type="const unsigned char *" m68kreg="a0"/>
      <arg name="out" type="unsigned char *" m68kreg="a1"/>
      <arg name="length" type="long" m68kreg="d0"/>
      <arg name="ks1" type="DES_key_schedule *" m68kreg="a2"/>
      <arg name="ks2" type="DES_key_schedule *" m68kreg="a3"/>
      <arg name="ks3" type="DES_key_schedule *" m68kreg="d1"/>
      <arg name="ivec1" type="DES_cblock *" m68kreg="d2"/>
      <arg name="ivec2" type="DES_cblock *" m68kreg="d3"/>
      <arg name="enc" type="int" m68kreg="d4"/>
    </method>
    <method name="DES_ede3_cfb64_encrypt" result="void">
      <arg name="in" type="const unsigned char *" m68kreg="a0"/>
      <arg name="out" type="unsigned char *" m68kreg="a1"/>
      <arg name="length" type="long" m68kreg="d0"/>
      <arg name="ks1" type="DES_key_schedule *" m68kreg="a2"/>
      <arg name="ks2" type="DES_key_schedule *" m68kreg="a3"/>
      <arg name="ks3" type="DES_key_schedule *" m68kreg="d1"/>
      <arg name="ivec" type="DES_cblock *" m68kreg="d2"/>
      <arg name="num" type="int *" m68kreg="d3"/>
      <arg name="enc" type="int" m68kreg="d4"/>
    </method>
    <method name="DES_ede3_cfb_encrypt" result="void">
      <arg name="in" type="const unsigned char *" m68kreg="a0"/>
      <arg name="out" type="unsigned char *" m68kreg="a1"/>
      <arg name="numbits" type="int" m68kreg="d0"/>
      <arg name="length" type="long" m68kreg="d1"/>
      <arg name="ks1" type="DES_key_schedule *" m68kreg="a2"/>
      <arg name="ks2" type="DES_key_schedule *" m68kreg="a3"/>
      <arg name="ks3" type="DES_key_schedule *" m68kreg="d2"/>
      <arg name="ivec" type="DES_cblock *" m68kreg="d3"/>
      <arg name="enc" type="int" m68kreg="d4"/>
    </method>
    <method name="DES_ede3_ofb64_encrypt" result="void">
      <arg name="in" type="const unsigned char *" m68kreg="a0"/>
      <arg name="out" type="unsigned char *" m68kreg="a1"/>
      <arg name="length" type="long" m68kreg="d0"/>
      <arg name="ks1" type="DES_key_schedule *" m68kreg="a2"/>
      <arg name="ks2" type="DES_key_schedule *" m68kreg="a3"/>
      <arg name="ks3" type="DES_key_schedule *" m68kreg="d1"/>
      <arg name="ivec" type="DES_cblock *" m68kreg="d2"/>
      <arg name="num" type="int *" m68kreg="d3"/>
    </method>
    <method name="DES_xwhite_in2out" result="void" status="unimplemented">
      <arg name="DES_key" type="const_DES_cblock *" m68kreg="a0"/>
      <arg name="in_white" type="const_DES_cblock *" m68kreg="a1"/>
      <arg name="out_white" type="const_DES_cblock *" m68kreg="a2"/>
    </method>
    <method name="DES_fcrypt" result="char *">
      <arg name="buf" type="const char *" m68kreg="a0"/>
      <arg name="salt" type="const char *" m68kreg="a1"/>
      <arg name="ret" type="char *" m68kreg="a2"/>
    </method>
    <method name="DES_crypt" result="char *">
      <arg name="buf" type="const char *" m68kreg="a0"/>
      <arg name="salt" type="const char *" m68kreg="a1"/>
    </method>
    <method name="DES_ofb_encrypt" result="void">
      <arg name="in" type="const unsigned char *" m68kreg="a0"/>
      <arg name="out" type="unsigned char *" m68kreg="a1"/>
      <arg name="numbits" type="int" m68kreg="d0"/>
      <arg name="length" type="long" m68kreg="d1"/>
      <arg name="schedule" type="DES_key_schedule *" m68kreg="a2"/>
      <arg name="ivec" type="DES_cblock *" m68kreg="a3"/>
    </method>
    <method name="DES_pcbc_encrypt" result="void">
      <arg name="input" type="const unsigned char *" m68kreg="a0"/>
      <arg name="output" type="unsigned char *" m68kreg="a1"/>
      <arg name="length" type="long" m68kreg="d0"/>
      <arg name="schedule" type="DES_key_schedule *" m68kreg="a2"/>
      <arg name="ivec" type="DES_cblock *" m68kreg="a3"/>
      <arg name="enc" type="int" m68kreg="d1"/>
    </method>
    <method name="DES_quad_cksum" result="DES_LONG">
      <arg name="input" type="const unsigned char *" m68kreg="a0"/>
      <arg name="output" type="DES_cblock *" m68kreg="a1"/>
      <arg name="length" type="long" m68kreg="d0"/>
      <arg name="out_count" type="int" m68kreg="d1"/>
      <arg name="seed" type="DES_cblock *" m68kreg="a2"/>
    </method>
    <method name="DES_random_key" result="int">
      <arg name="ret" type="DES_cblock *" m68kreg="a0"/>
    </method>
    <method name="DES_set_odd_parity" result="void">
      <arg name="key" type="DES_cblock *" m68kreg="a0"/>
    </method>
    <method name="DES_check_key_parity" result="int">
      <arg name="key" type="const_DES_cblock *" m68kreg="a0"/>
    </method>
    <method name="DES_is_weak_key" result="int">
      <arg name="key" type="const_DES_cblock *" m68kreg="a0"/>
    </method>
    <method name="DES_set_key" result="int">
      <arg name="key" type="const_DES_cblock *" m68kreg="a0"/>
      <arg name="schedule" type="DES_key_schedule *" m68kreg="a1"/>
    </method>
    <method name="DES_key_sched" result="int">
      <arg name="key" type="const_DES_cblock *" m68kreg="a0"/>
      <arg name="schedule" type="DES_key_schedule *" m68kreg="a1"/>
    </method>
    <method name="DES_set_key_checked" result="int">
      <arg name="key" type="const_DES_cblock *" m68kreg="a0"/>
      <arg name="schedule" type="DES_key_schedule *" m68kreg="a1"/>
    </method>
    <method name="DES_set_key_unchecked" result="void">
      <arg name="key" type="const_DES_cblock *" m68kreg="a0"/>
      <arg name="schedule" type="DES_key_schedule *" m68kreg="a1"/>
    </method>
    <method name="DES_string_to_key" result="void">
      <arg name="str" type="const char *" m68kreg="a0"/>
      <arg name="key" type="DES_cblock *" m68kreg="a1"/>
    </method>
    <method name="DES_string_to_2keys" result="void">
      <arg name="str" type="const char *" m68kreg="a0"/>
      <arg name="key1" type="DES_cblock *" m68kreg="a1"/>
      <arg name="key2" type="DES_cblock *" m68kreg="a2"/>
    </method>
    <method name="DES_cfb64_encrypt" result="void">
      <arg name="in" type="const unsigned char *" m68kreg="a0"/>
      <arg name="out" type="unsigned char *" m68kreg="a1"/>
      <arg name="length" type="long" m68kreg="d0"/>
      <arg name="schedule" type="DES_key_schedule *" m68kreg="a2"/>
      <arg name="ivec" type="DES_cblock *" m68kreg="a3"/>
      <arg name="num" type="int *" m68kreg="d1"/>
      <arg name="enc" type="int" m68kreg="d2"/>
    </method>
    <method name="DES_ofb64_encrypt" result="void">
      <arg name="in" type="const unsigned char *" m68kreg="a0"/>
      <arg name="out" type="unsigned char *" m68kreg="a1"/>
      <arg name="length" type="long" m68kreg="d0"/>
      <arg name="schedule" type="DES_key_schedule *" m68kreg="a2"/>
      <arg name="ivec" type="DES_cblock *" m68kreg="a3"/>
      <arg name="num" type="int *" m68kreg="d1"/>
    </method>
    <method name="_ossl_old_des_options" result="const char *" status="unimplemented">
    </method>
    <method name="_ossl_old_des_ecb3_encrypt" result="void" status="unimplemented">
      <arg name="input" type="_ossl_old_des_cblock *" m68kreg="a0"/>
      <arg name="output" type="_ossl_old_des_cblock *" m68kreg="a1"/>
      <arg name="ks1" type="_ossl_old_des_key_schedule" m68kreg="d0"/>
      <arg name="ks2" type="_ossl_old_des_key_schedule" m68kreg="d1"/>
      <arg name="ks3" type="_ossl_old_des_key_schedule" m68kreg="d2"/>
      <arg name="enc" type="int" m68kreg="d3"/>
    </method>
    <method name="_ossl_old_des_cbc_cksum" result="DES_LONG" status="unimplemented">
      <arg name="input" type="_ossl_old_des_cblock *" m68kreg="a0"/>
      <arg name="output" type="_ossl_old_des_cblock *" m68kreg="a1"/>
      <arg name="length" type="long" m68kreg="d0"/>
      <arg name="schedule" type="_ossl_old_des_key_schedule" m68kreg="d1"/>
      <arg name="ivec" type="_ossl_old_des_cblock *" m68kreg="a2"/>
    </method>
    <method name="_ossl_old_des_cbc_encrypt" result="void" status="unimplemented">
      <arg name="input" type="_ossl_old_des_cblock *" m68kreg="a0"/>
      <arg name="output" type="_ossl_old_des_cblock *" m68kreg="a1"/>
      <arg name="length" type="long" m68kreg="d0"/>
      <arg name="schedule" type="_ossl_old_des_key_schedule" m68kreg="d1"/>
      <arg name="ivec" type="_ossl_old_des_cblock *" m68kreg="a2"/>
      <arg name="enc" type="int" m68kreg="d2"/>
    </method>
    <method name="_ossl_old_des_ncbc_encrypt" result="void" status="unimplemented">
      <arg name="input" type="_ossl_old_des_cblock *" m68kreg="a0"/>
      <arg name="output" type="_ossl_old_des_cblock *" m68kreg="a1"/>
      <arg name="length" type="long" m68kreg="d0"/>
      <arg name="schedule" type="_ossl_old_des_key_schedule" m68kreg="d1"/>
      <arg name="ivec" type="_ossl_old_des_cblock *" m68kreg="a2"/>
      <arg name="enc" type="int" m68kreg="d2"/>
    </method>
    <method name="_ossl_old_des_xcbc_encrypt" result="void" status="unimplemented">
      <arg name="input" type="_ossl_old_des_cblock *" m68kreg="a0"/>
      <arg name="output" type="_ossl_old_des_cblock *" m68kreg="a1"/>
      <arg name="length" type="long" m68kreg="d0"/>
      <arg name="schedule" type="_ossl_old_des_key_schedule" m68kreg="d1"/>
      <arg name="ivec" type="_ossl_old_des_cblock *" m68kreg="a2"/>
      <arg name="inw" type="_ossl_old_des_cblock *" m68kreg="a3"/>
      <arg name="outw" type="_ossl_old_des_cblock *" m68kreg="d2"/>
      <arg name="enc" type="int" m68kreg="d3"/>
    </method>
    <method name="_ossl_old_des_cfb_encrypt" result="void" status="unimplemented">
      <arg name="in" type="unsigned char *" m68kreg="a0"/>
      <arg name="out" type="unsigned char *" m68kreg="a1"/>
      <arg name="numbits" type="int" m68kreg="d0"/>
      <arg name="length" type="long" m68kreg="d1"/>
      <arg name="schedule" type="_ossl_old_des_key_schedule" m68kreg="d2"/>
      <arg name="ivec" type="_ossl_old_des_cblock *" m68kreg="a2"/>
      <arg name="enc" type="int" m68kreg="d3"/>
    </method>
    <method name="_ossl_old_des_ecb_encrypt" result="void" status="unimplemented">
      <arg name="input" type="_ossl_old_des_cblock *" m68kreg="a0"/>
      <arg name="output" type="_ossl_old_des_cblock *" m68kreg="a1"/>
      <arg name="ks" type="_ossl_old_des_key_schedule" m68kreg="d0"/>
      <arg name="enc" type="int" m68kreg="d1"/>
    </method>
    <method name="_ossl_old_des_encrypt" result="void" status="unimplemented">
      <arg name="data" type="DES_LONG *" m68kreg="a0"/>
      <arg name="ks" type="_ossl_old_des_key_schedule" m68kreg="d0"/>
      <arg name="enc" type="int" m68kreg="d1"/>
    </method>
    <method name="_ossl_old_des_encrypt2" result="void" status="unimplemented">
      <arg name="data" type="DES_LONG *" m68kreg="a0"/>
      <arg name="ks" type="_ossl_old_des_key_schedule" m68kreg="d0"/>
      <arg name="enc" type="int" m68kreg="d1"/>
    </method>
    <method name="_ossl_old_des_encrypt3" result="void" status="unimplemented">
      <arg name="data" type="DES_LONG *" m68kreg="a0"/>
      <arg name="ks1" type="_ossl_old_des_key_schedule" m68kreg="d0"/>
      <arg name="ks2" type="_ossl_old_des_key_schedule" m68kreg="d1"/>
      <arg name="ks3" type="_ossl_old_des_key_schedule" m68kreg="d2"/>
    </method>
    <method name="_ossl_old_des_decrypt3" result="void" status="unimplemented">
      <arg name="data" type="DES_LONG *" m68kreg="a0"/>
      <arg name="ks1" type="_ossl_old_des_key_schedule" m68kreg="d0"/>
      <arg name="ks2" type="_ossl_old_des_key_schedule" m68kreg="d1"/>
      <arg name="ks3" type="_ossl_old_des_key_schedule" m68kreg="d2"/>
    </method>
    <method name="_ossl_old_des_ede3_cbc_encrypt" result="void" status="unimplemented">
      <arg name="input" type="_ossl_old_des_cblock *" m68kreg="a0"/>
      <arg name="output" type="_ossl_old_des_cblock *" m68kreg="a1"/>
      <arg name="length" type="long" m68kreg="d0"/>
      <arg name="ks1" type="_ossl_old_des_key_schedule" m68kreg="d1"/>
      <arg name="ks2" type="_ossl_old_des_key_schedule" m68kreg="d2"/>
      <arg name="ks3" type="_ossl_old_des_key_schedule" m68kreg="d3"/>
      <arg name="ivec" type="_ossl_old_des_cblock *" m68kreg="a2"/>
      <arg name="enc" type="int" m68kreg="d4"/>
    </method>
    <method name="_ossl_old_des_ede3_cfb64_encrypt" result="void" status="unimplemented">
      <arg name="in" type="unsigned char *" m68kreg="a0"/>
      <arg name="out" type="unsigned char *" m68kreg="a1"/>
      <arg name="length" type="long" m68kreg="d0"/>
      <arg name="ks1" type="_ossl_old_des_key_schedule" m68kreg="d1"/>
      <arg name="ks2" type="_ossl_old_des_key_schedule" m68kreg="d2"/>
      <arg name="ks3" type="_ossl_old_des_key_schedule" m68kreg="d3"/>
      <arg name="ivec" type="_ossl_old_des_cblock *" m68kreg="a2"/>
      <arg name="num" type="int *" m68kreg="a3"/>
      <arg name="enc" type="int" m68kreg="d4"/>
    </method>
    <method name="_ossl_old_des_ede3_ofb64_encrypt" result="void" status="unimplemented">
      <arg name="in" type="unsigned char *" m68kreg="a0"/>
      <arg name="out" type="unsigned char *" m68kreg="a1"/>
      <arg name="length" type="long" m68kreg="d0"/>
      <arg name="ks1" type="_ossl_old_des_key_schedule" m68kreg="d1"/>
      <arg name="ks2" type="_ossl_old_des_key_schedule" m68kreg="d2"/>
      <arg name="ks3" type="_ossl_old_des_key_schedule" m68kreg="d3"/>
      <arg name="ivec" type="_ossl_old_des_cblock *" m68kreg="a2"/>
      <arg name="num" type="int *" m68kreg="a3"/>
    </method>
    <method name="_ossl_old_des_xwhite_in2out" result="void" status="unimplemented">
      <arg name="des_key" type="_ossl_old_des_cblock *" m68kreg="a0"/>
      <arg name="in_white" type="_ossl_old_des_cblock *" m68kreg="a1"/>
      <arg name="out_white" type="_ossl_old_des_cblock *" m68kreg="a1"/>
    </method>
    <method name="_ossl_old_des_enc_read" result="int" status="unimplemented">
      <arg name="fd" type="int" m68kreg="d0"/>
      <arg name="buf" type="char *" m68kreg="a0"/>
      <arg name="len" type="int" m68kreg="d1"/>
      <arg name="sched" type="_ossl_old_des_key_schedule" m68kreg="d2"/>
      <arg name="iv" type="_ossl_old_des_cblock *" m68kreg="a1"/>
    </method>
    <method name="_ossl_old_des_enc_write" result="int" status="unimplemented">
      <arg name="fd" type="int" m68kreg="d0"/>
      <arg name="buf" type="char *" m68kreg="a0"/>
      <arg name="len" type="int" m68kreg="d1"/>
      <arg name="sched" type="_ossl_old_des_key_schedule" m68kreg="d2"/>
      <arg name="iv" type="_ossl_old_des_cblock *" m68kreg="a1"/>
    </method>
    <method name="_ossl_old_des_fcrypt" result="char *" status="unimplemented">
      <arg name="buf" type="const char *" m68kreg="a0"/>
      <arg name="salt" type="const char *" m68kreg="a1"/>
      <arg name="ret" type="char *" m68kreg="a2"/>
    </method>
    <method name="_ossl_old_des_crypt" result="char *" status="unimplemented">
      <arg name="buf" type="const char *" m68kreg="a0"/>
      <arg name="salt" type="const char *" m68kreg="a1"/>
    </method>
    <method name="_ossl_old_crypt" result="char *" status="unimplemented">
      <arg name="buf" type="const char *" m68kreg="a0"/>
      <arg name="salt" type="const char *" m68kreg="a1"/>
    </method>
    <method name="_ossl_old_des_ofb_encrypt" result="void" status="unimplemented">
      <arg name="in" type="unsigned char *" m68kreg="a0"/>
      <arg name="out" type="unsigned char *" m68kreg="a1"/>
      <arg name="numbits" type="int" m68kreg="d0"/>
      <arg name="length" type="long" m68kreg="d1"/>
      <arg name="schedule" type="_ossl_old_des_key_schedule" m68kreg="d2"/>
      <arg name="ivec" type="_ossl_old_des_cblock *" m68kreg="a2"/>
    </method>
    <method name="_ossl_old_des_pcbc_encrypt" result="void" status="unimplemented">
      <arg name="input" type="_ossl_old_des_cblock *" m68kreg="a0"/>
      <arg name="output" type="_ossl_old_des_cblock *" m68kreg="a1"/>
      <arg name="length" type="long" m68kreg="d0"/>
      <arg name="schedule" type="_ossl_old_des_key_schedule" m68kreg="d1"/>
      <arg name="ivec" type="_ossl_old_des_cblock *" m68kreg="a2"/>
      <arg name="enc" type="int" m68kreg="d2"/>
    </method>
    <method name="_ossl_old_des_quad_cksum" result="DES_LONG" status="unimplemented">
      <arg name="input" type="_ossl_old_des_cblock *" m68kreg="a0"/>
      <arg name="output" type="_ossl_old_des_cblock *" m68kreg="a1"/>
      <arg name="length" type="long" m68kreg="d0"/>
      <arg name="out_count" type="int" m68kreg="d1"/>
      <arg name="seed" type="_ossl_old_des_cblock *" m68kreg="a2"/>
    </method>
    <method name="_ossl_old_des_random_seed" result="void" status="unimplemented">
      <arg name="key" type="_ossl_old_des_cblock" m68kreg="d0"/>
    </method>
    <method name="_ossl_old_des_random_key" result="void" status="unimplemented">
      <arg name="ret" type="_ossl_old_des_cblock" m68kreg="d0"/>
    </method>
    <method name="_ossl_old_des_read_password" result="int" status="unimplemented">
      <arg name="key" type="_ossl_old_des_cblock *" m68kreg="a0"/>
      <arg name="prompt" type="const char *" m68kreg="a1"/>
      <arg name="verify" type="int" m68kreg="d0"/>
    </method>
    <method name="_ossl_old_des_read_2passwords" result="int" status="unimplemented">
      <arg name="key1" type="_ossl_old_des_cblock *" m68kreg="a0"/>
      <arg name="key2" type="_ossl_old_des_cblock *" m68kreg="a1"/>
      <arg name="prompt" type="const char *" m68kreg="a2"/>
      <arg name="verify" type="int" m68kreg="d0"/>
    </method>
    <method name="_ossl_old_des_set_odd_parity" result="void" status="unimplemented">
      <arg name="key" type="_ossl_old_des_cblock *" m68kreg="a0"/>
    </method>
    <method name="_ossl_old_des_is_weak_key" result="int" status="unimplemented">
      <arg name="key" type="_ossl_old_des_cblock *" m68kreg="a0"/>
    </method>
    <method name="_ossl_old_des_set_key" result="int" status="unimplemented">
      <arg name="key" type="_ossl_old_des_cblock *" m68kreg="a0"/>
      <arg name="schedule" type="_ossl_old_des_key_schedule" m68kreg="d0"/>
    </method>
    <method name="_ossl_old_des_key_sched" result="int" status="unimplemented">
      <arg name="key" type="_ossl_old_des_cblock *" m68kreg="a0"/>
      <arg name="schedule" type="_ossl_old_des_key_schedule" m68kreg="d0"/>
    </method>
    <method name="_ossl_old_des_string_to_key" result="void" status="unimplemented">
      <arg name="str" type="char *" m68kreg="a0"/>
      <arg name="key" type="_ossl_old_des_cblock *" m68kreg="a1"/>
    </method>
    <method name="_ossl_old_des_string_to_2keys" result="void" status="unimplemented">
      <arg name="str" type="char *" m68kreg="a0"/>
      <arg name="key1" type="_ossl_old_des_cblock *" m68kreg="a1"/>
      <arg name="key2" type="_ossl_old_des_cblock *" m68kreg="a2"/>
    </method>
    <method name="_ossl_old_des_cfb64_encrypt" result="void" status="unimplemented">
      <arg name="in" type="unsigned char *" m68kreg="a0"/>
      <arg name="out" type="unsigned char *" m68kreg="a1"/>
      <arg name="length" type="long" m68kreg="d0"/>
      <arg name="schedule" type="_ossl_old_des_key_schedule" m68kreg="d1"/>
      <arg name="ivec" type="_ossl_old_des_cblock *" m68kreg="a2"/>
      <arg name="num" type="int *" m68kreg="a3"/>
      <arg name="enc" type="int" m68kreg="d2"/>
    </method>
    <method name="_ossl_old_des_ofb64_encrypt" result="void" status="unimplemented">
      <arg name="in" type="unsigned char *" m68kreg="a0"/>
      <arg name="out" type="unsigned char *" m68kreg="a1"/>
      <arg name="length" type="long" m68kreg="d0"/>
      <arg name="schedule" type="_ossl_old_des_key_schedule" m68kreg="d1"/>
      <arg name="ivec" type="_ossl_old_des_cblock *" m68kreg="a2"/>
      <arg name="num" type="int *" m68kreg="a3"/>
    </method>
    <method name="_ossl_096_des_random_seed" result="void" status="unimplemented">
      <arg name="key" type="des_cblock *" m68kreg="a0"/>
    </method>
    <method name="DH_OpenSSL" result="const DH_METHOD *">
    </method>
    <method name="DH_set_default_method" result="void">
      <arg name="meth" type="const DH_METHOD *" m68kreg="a0"/>
    </method>
    <method name="DH_get_default_method" result="const DH_METHOD *">
    </method>
    <method name="DH_set_method" result="int">
      <arg name="dh" type="DH *" m68kreg="a0"/>
      <arg name="meth" type="const DH_METHOD *" m68kreg="a1"/>
    </method>
    <method name="DH_new_method" result="DH *">
      <arg name="engine" type="ENGINE *" m68kreg="a0"/>
    </method>
    <method name="DH_new" result="DH *">
    </method>
    <method name="DH_free" result="void">
      <arg name="dh" type="DH *" m68kreg="a0"/>
    </method>
    <method name="DH_up_ref" result="int">
      <arg name="dh" type="DH *" m68kreg="a0"/>
    </method>
    <method name="DH_size" result="int">
      <arg name="dh" type="const DH *" m68kreg="a0"/>
    </method>
    <method name="DH_get_ex_new_index" result="int" status="unimplemented">
      <arg name="argl" type="long" m68kreg="d0"/>
      <arg name="argp" type="void *" m68kreg="a0"/>
      <arg name="new_func" type="CRYPTO_EX_new *" m68kreg="a1"/>
      <arg name="dup_func" type="CRYPTO_EX_dup *" m68kreg="a2"/>
      <arg name="free_func" type="CRYPTO_EX_free *" m68kreg="a3"/>
    </method>
    <method name="DH_set_ex_data" result="int">
      <arg name="d" type="DH *" m68kreg="a0"/>
      <arg name="idx" type="int" m68kreg="d0"/>
      <arg name="arg" type="void *" m68kreg="a1"/>
    </method>
    <method name="DH_get_ex_data" result="void *">
      <arg name="d" type="DH *" m68kreg="a0"/>
      <arg name="idx" type="int" m68kreg="d0"/>
    </method>
    <method name="DH_generate_parameters" result="DH *">
      <arg name="prime_len" type="int" m68kreg="d0"/>
      <arg name="generator" type="int" m68kreg="d1"/>
      <arg name="callback" type="void (*)(int, int, void *)" m68kreg="a0"/>
      <arg name="cb_arg" type="void *" m68kreg="a1"/>
    </method>
    <method name="DH_check" result="int">
      <arg name="dh" type="const DH *" m68kreg="a0"/>
      <arg name="codes" type="int *" m68kreg="a1"/>
    </method>
    <method name="DH_generate_key" result="int">
      <arg name="dh" type="DH *" m68kreg="a0"/>
    </method>
    <method name="DH_compute_key" result="int">
      <arg name="key" type="unsigned char *" m68kreg="a0"/>
      <arg name="pub_key" type="const BIGNUM *" m68kreg="a1"/>
      <arg name="dh" type="DH *" m68kreg="a2"/>
    </method>
    <method name="d2i_DHparams" result="DH *">
      <arg name="a" type="DH **" m68kreg="a0"/>
      <arg name="pp" type="const unsigned char **" m68kreg="a1"/>
      <arg name="length" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_DHparams" result="int">
      <arg name="a" type="const DH *" m68kreg="a0"/>
      <arg name="pp" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="DHparams_print" result="int">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="x" type="const DH *" m68kreg="a1"/>
    </method>
    <method name="ERR_load_DH_strings" result="int">
    </method>
    <method name="DSA_SIG_new" result="DSA_SIG *">
    </method>
    <method name="DSA_SIG_free" result="void">
      <arg name="a" type="DSA_SIG *" m68kreg="a0"/>
    </method>
    <method name="i2d_DSA_SIG" result="int">
      <arg name="a" type="const DSA_SIG *" m68kreg="a0"/>
      <arg name="pp" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="d2i_DSA_SIG" result="DSA_SIG *">
      <arg name="v" type="DSA_SIG **" m68kreg="a0"/>
      <arg name="pp" type="const unsigned char **" m68kreg="a1"/>
      <arg name="length" type="long" m68kreg="d0"/>
    </method>
    <method name="DSA_do_sign" result="DSA_SIG *">
      <arg name="dgst" type="const unsigned char *" m68kreg="a0"/>
      <arg name="dlen" type="int" m68kreg="d0"/>
      <arg name="dsa" type="DSA *" m68kreg="a1"/>
    </method>
    <method name="DSA_do_verify" result="int">
      <arg name="dgst" type="const unsigned char *" m68kreg="a0"/>
      <arg name="dgst_len" type="int" m68kreg="d0"/>
      <arg name="sig" type="DSA_SIG *" m68kreg="a1"/>
      <arg name="dsa" type="DSA *" m68kreg="a2"/>
    </method>
    <method name="DSA_OpenSSL" result="const DSA_METHOD *">
    </method>
    <method name="DSA_set_default_method" result="void">
      <arg name="a" type="const DSA_METHOD *" m68kreg="a0"/>
    </method>
    <method name="DSA_get_default_method" result="const DSA_METHOD *">
    </method>
    <method name="DSA_set_method" result="int">
      <arg name="dsa" type="DSA *" m68kreg="a0"/>
      <arg name="a" type="const DSA_METHOD *" m68kreg="a1"/>
    </method>
    <method name="DSA_new" result="DSA *">
    </method>
    <method name="DSA_new_method" result="DSA *">
      <arg name="engine" type="ENGINE *" m68kreg="a0"/>
    </method>
    <method name="DSA_free" result="void">
      <arg name="r" type="DSA *" m68kreg="a0"/>
    </method>
    <method name="DSA_up_ref" result="int">
      <arg name="r" type="DSA *" m68kreg="a0"/>
    </method>
    <method name="DSA_size" result="int">
      <arg name="a" type="const DSA *" m68kreg="a0"/>
    </method>
    <method name="DSA_sign_setup" result="int">
      <arg name="dsa" type="DSA *" m68kreg="a0"/>
      <arg name="ctx_in" type="BN_CTX *" m68kreg="a1"/>
      <arg name="kinvp" type="BIGNUM **" m68kreg="a2"/>
      <arg name="rp" type="BIGNUM **" m68kreg="a3"/>
    </method>
    <method name="DSA_sign" result="int">
      <arg name="type" type="int" m68kreg="d0"/>
      <arg name="dgst" type="const unsigned char *" m68kreg="a0"/>
      <arg name="dlen" type="int" m68kreg="d1"/>
      <arg name="sig" type="unsigned char *" m68kreg="a1"/>
      <arg name="siglen" type="unsigned int *" m68kreg="a2"/>
      <arg name="dsa" type="DSA *" m68kreg="a3"/>
    </method>
    <method name="DSA_verify" result="int">
      <arg name="type" type="int" m68kreg="d0"/>
      <arg name="dgst" type="const unsigned char *" m68kreg="a0"/>
      <arg name="dgst_len" type="int" m68kreg="d1"/>
      <arg name="sigbuf" type="const unsigned char *" m68kreg="a1"/>
      <arg name="siglen" type="int" m68kreg="d2"/>
      <arg name="dsa" type="DSA *" m68kreg="a2"/>
    </method>
    <method name="DSA_get_ex_new_index" result="int" status="unimplemented">
      <arg name="argl" type="long" m68kreg="d0"/>
      <arg name="argp" type="void *" m68kreg="a0"/>
      <arg name="new_func" type="CRYPTO_EX_new *" m68kreg="a1"/>
      <arg name="dup_func" type="CRYPTO_EX_dup *" m68kreg="a2"/>
      <arg name="free_func" type="CRYPTO_EX_free *" m68kreg="a3"/>
    </method>
    <method name="DSA_set_ex_data" result="int">
      <arg name="d" type="DSA *" m68kreg="a0"/>
      <arg name="idx" type="int" m68kreg="d0"/>
      <arg name="arg" type="void *" m68kreg="a1"/>
    </method>
    <method name="DSA_get_ex_data" result="void *">
      <arg name="d" type="DSA *" m68kreg="a0"/>
      <arg name="idx" type="int" m68kreg="d0"/>
    </method>
    <method name="d2i_DSAPublicKey" result="DSA *">
      <arg name="a" type="DSA **" m68kreg="a0"/>
      <arg name="pp" type="const unsigned char **" m68kreg="a1"/>
      <arg name="length" type="long" m68kreg="d0"/>
    </method>
    <method name="d2i_DSAPrivateKey" result="DSA *">
      <arg name="a" type="DSA **" m68kreg="a0"/>
      <arg name="pp" type="const unsigned char **" m68kreg="a1"/>
      <arg name="length" type="long" m68kreg="d0"/>
    </method>
    <method name="d2i_DSAparams" result="DSA *">
      <arg name="a" type="DSA **" m68kreg="a0"/>
      <arg name="pp" type="const unsigned char **" m68kreg="a1"/>
      <arg name="length" type="long" m68kreg="d0"/>
    </method>
    <method name="DSA_generate_parameters" result="DSA *">
      <arg name="bits" type="int" m68kreg="d0"/>
      <arg name="seed" type="unsigned char *" m68kreg="a0"/>
      <arg name="seed_len" type="int" m68kreg="d1"/>
      <arg name="counter_ret" type="int *" m68kreg="a1"/>
      <arg name="h_ret" type="unsigned long *" m68kreg="a2"/>
      <arg name="callback" type="void (*)(int, int, void *)" m68kreg="a3"/>
      <arg name="cb_arg" type="void *" m68kreg="d2"/>
    </method>
    <method name="DSA_generate_key" result="int">
      <arg name="a" type="DSA *" m68kreg="a0"/>
    </method>
    <method name="i2d_DSAPublicKey" result="int">
      <arg name="a" type="const DSA *" m68kreg="a0"/>
      <arg name="pp" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="i2d_DSAPrivateKey" result="int">
      <arg name="a" type="const DSA *" m68kreg="a0"/>
      <arg name="pp" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="i2d_DSAparams" result="int">
      <arg name="a" type="const DSA *" m68kreg="a0"/>
      <arg name="pp" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="DSAparams_print" result="int">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="x" type="const DSA *" m68kreg="a1"/>
    </method>
    <method name="DSA_print" result="int">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="x" type="const DSA *" m68kreg="a1"/>
      <arg name="off" type="int" m68kreg="d0"/>
    </method>
    <method name="DSA_dup_DH" result="DH *">
      <arg name="r" type="const DSA *" m68kreg="a0"/>
    </method>
    <method name="ERR_load_DSA_strings" result="int">
    </method>
    <method name="IDEA_options" result="const char *">
    </method>
    <method name="IDEA_ecb_encrypt" result="void">
      <arg name="in" type="const unsigned char *" m68kreg="a0"/>
      <arg name="out" type="unsigned char *" m68kreg="a1"/>
      <arg name="ks" type="IDEA_KEY_SCHEDULE *" m68kreg="a2"/>
    </method>
    <method name="IDEA_set_encrypt_key" result="void">
      <arg name="key" type="const unsigned char *" m68kreg="a0"/>
      <arg name="ks" type="IDEA_KEY_SCHEDULE *" m68kreg="a1"/>
    </method>
    <method name="IDEA_set_decrypt_key" result="void">
      <arg name="ek" type="IDEA_KEY_SCHEDULE *" m68kreg="a0"/>
      <arg name="dk" type="IDEA_KEY_SCHEDULE *" m68kreg="a1"/>
    </method>
    <method name="IDEA_cbc_encrypt" result="void">
      <arg name="in" type="const unsigned char *" m68kreg="a0"/>
      <arg name="out" type="unsigned char *" m68kreg="a1"/>
      <arg name="length" type="long" m68kreg="d0"/>
      <arg name="ks" type="IDEA_KEY_SCHEDULE *" m68kreg="a2"/>
      <arg name="iv" type="unsigned char *" m68kreg="a3"/>
      <arg name="enc" type="int" m68kreg="d1"/>
    </method>
    <method name="IDEA_cfb64_encrypt" result="void">
      <arg name="in" type="const unsigned char *" m68kreg="a0"/>
      <arg name="out" type="unsigned char *" m68kreg="a1"/>
      <arg name="length" type="long" m68kreg="d0"/>
      <arg name="ks" type="IDEA_KEY_SCHEDULE *" m68kreg="a2"/>
      <arg name="iv" type="unsigned char *" m68kreg="a3"/>
      <arg name="num" type="int *" m68kreg="d1"/>
      <arg name="enc" type="int" m68kreg="d2"/>
    </method>
    <method name="IDEA_ofb64_encrypt" result="void">
      <arg name="in" type="const unsigned char *" m68kreg="a0"/>
      <arg name="out" type="unsigned char *" m68kreg="a1"/>
      <arg name="length" type="long" m68kreg="d0"/>
      <arg name="ks" type="IDEA_KEY_SCHEDULE *" m68kreg="a2"/>
      <arg name="iv" type="unsigned char *" m68kreg="a3"/>
      <arg name="num" type="int *" m68kreg="d1"/>
    </method>
    <method name="IDEA_encrypt" result="void">
      <arg name="in" type="unsigned long *" m68kreg="a0"/>
      <arg name="ks" type="IDEA_KEY_SCHEDULE *" m68kreg="a1"/>
    </method>
    <method name="MD2_options" result="const char *">
    </method>
    <method name="MD2_Init" result="int">
      <arg name="c" type="MD2_CTX *" m68kreg="a0"/>
    </method>
    <method name="MD2_Update" result="int">
      <arg name="c" type="MD2_CTX *" m68kreg="a0"/>
      <arg name="data" type="const unsigned char *" m68kreg="a1"/>
      <arg name="len" type="unsigned long" m68kreg="d0"/>
    </method>
    <method name="MD2_Final" result="int">
      <arg name="md" type="unsigned char *" m68kreg="a0"/>
      <arg name="c" type="MD2_CTX *" m68kreg="a1"/>
    </method>
    <method name="MD2" result="unsigned char *">
      <arg name="d" type="const unsigned char *" m68kreg="a0"/>
      <arg name="n" type="unsigned long" m68kreg="d0"/>
      <arg name="md" type="unsigned char *" m68kreg="a1"/>
    </method>
    <method name="MD4_Init" result="int">
      <arg name="c" type="MD4_CTX *" m68kreg="a0"/>
    </method>
    <method name="MD4_Update" result="int">
      <arg name="c" type="MD4_CTX *" m68kreg="a0"/>
      <arg name="data" type="const void *" m68kreg="a1"/>
      <arg name="len" type="unsigned long" m68kreg="d0"/>
    </method>
    <method name="MD4_Final" result="int">
      <arg name="md" type="unsigned char *" m68kreg="a0"/>
      <arg name="c" type="MD4_CTX *" m68kreg="a1"/>
    </method>
    <method name="MD4" result="unsigned char *">
      <arg name="d" type="const unsigned char *" m68kreg="a0"/>
      <arg name="n" type="unsigned long" m68kreg="d0"/>
      <arg name="md" type="unsigned char *" m68kreg="a1"/>
    </method>
    <method name="MD4_Transform" result="void">
      <arg name="c" type="MD4_CTX *" m68kreg="a0"/>
      <arg name="b" type="const unsigned char *" m68kreg="a1"/>
    </method>
    <method name="MD5_Init" result="int">
      <arg name="c" type="MD5_CTX *" m68kreg="a0"/>
    </method>
    <method name="MD5_Update" result="int">
      <arg name="c" type="MD5_CTX *" m68kreg="a0"/>
      <arg name="data" type="const void *" m68kreg="a1"/>
      <arg name="len" type="unsigned long" m68kreg="d0"/>
    </method>
    <method name="MD5_Final" result="int">
      <arg name="md" type="unsigned char *" m68kreg="a0"/>
      <arg name="c" type="MD5_CTX *" m68kreg="a1"/>
    </method>
    <method name="MD5" result="unsigned char *">
      <arg name="d" type="const unsigned char *" m68kreg="a0"/>
      <arg name="n" type="unsigned long" m68kreg="d0"/>
      <arg name="md" type="unsigned char *" m68kreg="a1"/>
    </method>
    <method name="MD5_Transform" result="void">
      <arg name="c" type="MD5_CTX *" m68kreg="a0"/>
      <arg name="b" type="const unsigned char *" m68kreg="a1"/>
    </method>
    <method name="MDC2_Init" result="int">
      <arg name="c" type="MDC2_CTX *" m68kreg="a0"/>
    </method>
    <method name="MDC2_Update" result="int">
      <arg name="c" type="MDC2_CTX *" m68kreg="a0"/>
      <arg name="data" type="const unsigned char *" m68kreg="a1"/>
      <arg name="len" type="unsigned long" m68kreg="d0"/>
    </method>
    <method name="MDC2_Final" result="int">
      <arg name="md" type="unsigned char *" m68kreg="a0"/>
      <arg name="c" type="MDC2_CTX *" m68kreg="a1"/>
    </method>
    <method name="MDC2" result="unsigned char *">
      <arg name="d" type="const unsigned char *" m68kreg="a0"/>
      <arg name="n" type="unsigned long" m68kreg="d0"/>
      <arg name="md" type="unsigned char *" m68kreg="a1"/>
    </method>
    <method name="RC2_set_key" result="void">
      <arg name="key" type="RC2_KEY *" m68kreg="a0"/>
      <arg name="len" type="int" m68kreg="d0"/>
      <arg name="data" type="const unsigned char *" m68kreg="a1"/>
      <arg name="bits" type="int" m68kreg="d1"/>
    </method>
    <method name="RC2_ecb_encrypt" result="void">
      <arg name="in" type="const unsigned char *" m68kreg="a0"/>
      <arg name="out" type="unsigned char *" m68kreg="a1"/>
      <arg name="key" type="RC2_KEY *" m68kreg="a2"/>
      <arg name="enc" type="int" m68kreg="d0"/>
    </method>
    <method name="RC2_encrypt" result="void">
      <arg name="data" type="unsigned long *" m68kreg="a0"/>
      <arg name="key" type="RC2_KEY *" m68kreg="a1"/>
    </method>
    <method name="RC2_decrypt" result="void">
      <arg name="data" type="unsigned long *" m68kreg="a0"/>
      <arg name="key" type="RC2_KEY *" m68kreg="a1"/>
    </method>
    <method name="RC2_cbc_encrypt" result="void">
      <arg name="in" type="const unsigned char *" m68kreg="a0"/>
      <arg name="out" type="unsigned char *" m68kreg="a1"/>
      <arg name="length" type="long" m68kreg="d0"/>
      <arg name="ks" type="RC2_KEY *" m68kreg="a2"/>
      <arg name="iv" type="unsigned char *" m68kreg="a3"/>
      <arg name="enc" type="int" m68kreg="d1"/>
    </method>
    <method name="RC2_cfb64_encrypt" result="void">
      <arg name="in" type="const unsigned char *" m68kreg="a0"/>
      <arg name="out" type="unsigned char *" m68kreg="a1"/>
      <arg name="length" type="long" m68kreg="d0"/>
      <arg name="schedule" type="RC2_KEY *" m68kreg="a2"/>
      <arg name="ivec" type="unsigned char *" m68kreg="a3"/>
      <arg name="num" type="int *" m68kreg="d1"/>
      <arg name="enc" type="int" m68kreg="d2"/>
    </method>
    <method name="RC2_ofb64_encrypt" result="void">
      <arg name="in" type="const unsigned char *" m68kreg="a0"/>
      <arg name="out" type="unsigned char *" m68kreg="a1"/>
      <arg name="length" type="long" m68kreg="d0"/>
      <arg name="schedule" type="RC2_KEY *" m68kreg="a2"/>
      <arg name="ivec" type="unsigned char *" m68kreg="a3"/>
      <arg name="num" type="int *" m68kreg="d1"/>
    </method>
    <method name="RC4_options" result="const char *">
    </method>
    <method name="RC4_set_key" result="void">
      <arg name="key" type="RC4_KEY *" m68kreg="a0"/>
      <arg name="len" type="int" m68kreg="d0"/>
      <arg name="data" type="const unsigned char *" m68kreg="a1"/>
    </method>
    <method name="RC4" result="void">
      <arg name="key" type="RC4_KEY *" m68kreg="a0"/>
      <arg name="len" type="unsigned long" m68kreg="d0"/>
      <arg name="indata" type="const unsigned char *" m68kreg="a1"/>
      <arg name="outdata" type="unsigned char *" m68kreg="a2"/>
    </method>
    <method name="RC5_32_set_key" result="void">
      <arg name="key" type="RC5_32_KEY *" m68kreg="a0"/>
      <arg name="len" type="int" m68kreg="d0"/>
      <arg name="data" type="const unsigned char *" m68kreg="a1"/>
      <arg name="rounds" type="int" m68kreg="d1"/>
    </method>
    <method name="RC5_32_ecb_encrypt" result="void">
      <arg name="in" type="const unsigned char *" m68kreg="a0"/>
      <arg name="out" type="unsigned char *" m68kreg="a1"/>
      <arg name="key" type="RC5_32_KEY *" m68kreg="a2"/>
      <arg name="enc" type="int" m68kreg="d0"/>
    </method>
    <method name="RC5_32_encrypt" result="void">
      <arg name="data" type="unsigned long *" m68kreg="a0"/>
      <arg name="key" type="RC5_32_KEY *" m68kreg="a1"/>
    </method>
    <method name="RC5_32_decrypt" result="void">
      <arg name="data" type="unsigned long *" m68kreg="a0"/>
      <arg name="key" type="RC5_32_KEY *" m68kreg="a1"/>
    </method>
    <method name="RC5_32_cbc_encrypt" result="void">
      <arg name="in" type="const unsigned char *" m68kreg="a0"/>
      <arg name="out" type="unsigned char *" m68kreg="a1"/>
      <arg name="length" type="long" m68kreg="d0"/>
      <arg name="ks" type="RC5_32_KEY *" m68kreg="a2"/>
      <arg name="iv" type="unsigned char *" m68kreg="a3"/>
      <arg name="enc" type="int" m68kreg="d1"/>
    </method>
    <method name="RC5_32_cfb64_encrypt" result="void">
      <arg name="in" type="const unsigned char *" m68kreg="a0"/>
      <arg name="out" type="unsigned char *" m68kreg="a1"/>
      <arg name="length" type="long" m68kreg="d0"/>
      <arg name="schedule" type="RC5_32_KEY *" m68kreg="a2"/>
      <arg name="ivec" type="unsigned char *" m68kreg="a3"/>
      <arg name="num" type="int *" m68kreg="d1"/>
      <arg name="enc" type="int" m68kreg="d2"/>
    </method>
    <method name="RC5_32_ofb64_encrypt" result="void">
      <arg name="in" type="const unsigned char *" m68kreg="a0"/>
      <arg name="out" type="unsigned char *" m68kreg="a1"/>
      <arg name="length" type="long" m68kreg="d0"/>
      <arg name="schedule" type="RC5_32_KEY *" m68kreg="a2"/>
      <arg name="ivec" type="unsigned char *" m68kreg="a3"/>
      <arg name="num" type="int *" m68kreg="d1"/>
    </method>
    <method name="RIPEMD160_Init" result="int">
      <arg name="c" type="RIPEMD160_CTX *" m68kreg="a0"/>
    </method>
    <method name="RIPEMD160_Update" result="int">
      <arg name="c" type="RIPEMD160_CTX *" m68kreg="a0"/>
      <arg name="data" type="const void *" m68kreg="a1"/>
      <arg name="len" type="unsigned long" m68kreg="d0"/>
    </method>
    <method name="RIPEMD160_Final" result="int">
      <arg name="md" type="unsigned char *" m68kreg="a0"/>
      <arg name="c" type="RIPEMD160_CTX *" m68kreg="a1"/>
    </method>
    <method name="RIPEMD160" result="unsigned char *">
      <arg name="d" type="const unsigned char *" m68kreg="a0"/>
      <arg name="n" type="unsigned long" m68kreg="d0"/>
      <arg name="md" type="unsigned char *" m68kreg="a1"/>
    </method>
    <method name="RIPEMD160_Transform" result="void">
      <arg name="c" type="RIPEMD160_CTX *" m68kreg="a0"/>
      <arg name="b" type="const unsigned char *" m68kreg="a1"/>
    </method>
    <method name="RSA_new" result="RSA *">
    </method>
    <method name="RSA_new_method" result="RSA *">
      <arg name="engine" type="ENGINE *" m68kreg="a0"/>
    </method>
    <method name="RSA_size" result="int">
      <arg name="a" type="const RSA *" m68kreg="a0"/>
    </method>
    <method name="RSA_generate_key" result="RSA *">
      <arg name="bits" type="int" m68kreg="d0"/>
      <arg name="e" type="unsigned long" m68kreg="d1"/>
      <arg name="callback" type="void (*)(int, int, void *)" m68kreg="a0"/>
      <arg name="cb_arg" type="void *" m68kreg="a1"/>
    </method>
    <method name="RSA_check_key" result="int">
      <arg name="a" type="const RSA *" m68kreg="a0"/>
    </method>
    <method name="RSA_public_encrypt" result="int">
      <arg name="flen" type="int" m68kreg="d0"/>
      <arg name="from" type="const unsigned char *" m68kreg="a0"/>
      <arg name="to" type="unsigned char *" m68kreg="a1"/>
      <arg name="rsa" type="RSA *" m68kreg="a2"/>
      <arg name="padding" type="int" m68kreg="d1"/>
    </method>
    <method name="RSA_private_encrypt" result="int">
      <arg name="flen" type="int" m68kreg="d0"/>
      <arg name="from" type="const unsigned char *" m68kreg="a0"/>
      <arg name="to" type="unsigned char *" m68kreg="a1"/>
      <arg name="rsa" type="RSA *" m68kreg="a2"/>
      <arg name="padding" type="int" m68kreg="d1"/>
    </method>
    <method name="RSA_public_decrypt" result="int">
      <arg name="flen" type="int" m68kreg="d0"/>
      <arg name="from" type="const unsigned char *" m68kreg="a0"/>
      <arg name="to" type="unsigned char *" m68kreg="a1"/>
      <arg name="rsa" type="RSA *" m68kreg="a2"/>
      <arg name="padding" type="int" m68kreg="d1"/>
    </method>
    <method name="RSA_private_decrypt" result="int">
      <arg name="flen" type="int" m68kreg="d0"/>
      <arg name="from" type="const unsigned char *" m68kreg="a0"/>
      <arg name="to" type="unsigned char *" m68kreg="a1"/>
      <arg name="rsa" type="RSA *" m68kreg="a2"/>
      <arg name="padding" type="int" m68kreg="d1"/>
    </method>
    <method name="RSA_free" result="void">
      <arg name="r" type="RSA *" m68kreg="a0"/>
    </method>
    <method name="RSA_up_ref" result="int">
      <arg name="r" type="RSA *" m68kreg="a0"/>
    </method>
    <method name="RSA_flags" result="int">
      <arg name="r" type="const RSA *" m68kreg="a0"/>
    </method>
    <method name="RSA_set_default_method" result="void">
      <arg name="meth" type="const RSA_METHOD *" m68kreg="a0"/>
    </method>
    <method name="RSA_get_default_method" result="const RSA_METHOD *">
    </method>
    <method name="RSA_get_method" result="const RSA_METHOD *">
      <arg name="rsa" type="const RSA *" m68kreg="a0"/>
    </method>
    <method name="RSA_set_method" result="int">
      <arg name="rsa" type="RSA *" m68kreg="a0"/>
      <arg name="meth" type="const RSA_METHOD *" m68kreg="a1"/>
    </method>
    <method name="RSA_PKCS1_SSLeay" result="const RSA_METHOD *" status="unimplemented">
    </method>
    <method name="RSA_null_method" result="const RSA_METHOD *">
    </method>
    <method name="d2i_RSAPublicKey" result="RSA *">
      <arg name="a" type="RSA **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_RSAPublicKey" result="int">
      <arg name="a" type="const RSA *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="RSAPublicKey_it" result="const ASN1_ITEM *">
    </method>
    <method name="d2i_RSAPrivateKey" result="RSA *">
      <arg name="a" type="RSA **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_RSAPrivateKey" result="int">
      <arg name="a" type="const RSA *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="RSAPrivateKey_it" result="const ASN1_ITEM *">
    </method>
    <method name="RSA_print" result="int">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="r" type="const RSA *" m68kreg="a1"/>
      <arg name="offset" type="int" m68kreg="d0"/>
    </method>
    <method name="i2d_RSA_NET" result="int" status="unimplemented">
      <arg name="a" type="const RSA *" m68kreg="a0"/>
      <arg name="pp" type="unsigned char **" m68kreg="a1"/>
      <arg name="cb" type="int (*)()" m68kreg="a2"/>
      <arg name="sgckey" type="int" m68kreg="d0"/>
    </method>
    <method name="d2i_RSA_NET" result="RSA *" status="unimplemented">
      <arg name="a" type="RSA **" m68kreg="a0"/>
      <arg name="pp" type="const unsigned char **" m68kreg="a1"/>
      <arg name="length" type="long" m68kreg="d0"/>
      <arg name="cb" type="int (*)()" m68kreg="a2"/>
      <arg name="sgckey" type="int" m68kreg="d1"/>
    </method>
    <method name="i2d_Netscape_RSA" result="int" status="unimplemented">
      <arg name="a" type="const RSA *" m68kreg="a0"/>
      <arg name="pp" type="unsigned char **" m68kreg="a1"/>
      <arg name="cb" type="int (*)()" m68kreg="a2"/>
    </method>
    <method name="d2i_Netscape_RSA" result="RSA *" status="unimplemented">
      <arg name="a" type="RSA **" m68kreg="a0"/>
      <arg name="pp" type="const unsigned char **" m68kreg="a1"/>
      <arg name="length" type="long" m68kreg="d0"/>
      <arg name="cb" type="int (*)()" m68kreg="a2"/>
    </method>
    <method name="RSA_sign" result="int">
      <arg name="type" type="int" m68kreg="d0"/>
      <arg name="m" type="const unsigned char *" m68kreg="a0"/>
      <arg name="m_length" type="unsigned int" m68kreg="d1"/>
      <arg name="sigret" type="unsigned char *" m68kreg="a1"/>
      <arg name="siglen" type="unsigned int *" m68kreg="a2"/>
      <arg name="rsa" type="RSA *" m68kreg="a3"/>
    </method>
    <method name="RSA_verify" result="int">
      <arg name="type" type="int" m68kreg="d0"/>
      <arg name="m" type="const unsigned char *" m68kreg="a0"/>
      <arg name="m_length" type="unsigned int" m68kreg="d1"/>
      <arg name="sigbuf" type="unsigned char *" m68kreg="a1"/>
      <arg name="siglen" type="unsigned int" m68kreg="d2"/>
      <arg name="rsa" type="RSA *" m68kreg="a2"/>
    </method>
    <method name="RSA_sign_ASN1_OCTET_STRING" result="int">
      <arg name="type" type="int" m68kreg="d0"/>
      <arg name="m" type="const unsigned char *" m68kreg="a0"/>
      <arg name="m_length" type="unsigned int" m68kreg="d1"/>
      <arg name="sigret" type="unsigned char *" m68kreg="a1"/>
      <arg name="siglen" type="unsigned int *" m68kreg="a2"/>
      <arg name="rsa" type="RSA *" m68kreg="a3"/>
    </method>
    <method name="RSA_verify_ASN1_OCTET_STRING" result="int">
      <arg name="type" type="int" m68kreg="d0"/>
      <arg name="m" type="const unsigned char *" m68kreg="a0"/>
      <arg name="m_length" type="unsigned int" m68kreg="d1"/>
      <arg name="sigbuf" type="unsigned char *" m68kreg="a1"/>
      <arg name="siglen" type="unsigned int" m68kreg="d2"/>
      <arg name="rsa" type="RSA *" m68kreg="a2"/>
    </method>
    <method name="RSA_blinding_on" result="int">
      <arg name="rsa" type="RSA *" m68kreg="a0"/>
      <arg name="ctx" type="BN_CTX *" m68kreg="a1"/>
    </method>
    <method name="RSA_blinding_off" result="void">
      <arg name="rsa" type="RSA *" m68kreg="a0"/>
    </method>
    <method name="RSA_padding_add_PKCS1_type_1" result="int">
      <arg name="to" type="unsigned char *" m68kreg="a0"/>
      <arg name="tlen" type="int" m68kreg="d0"/>
      <arg name="f" type="const unsigned char *" m68kreg="a1"/>
      <arg name="fl" type="int" m68kreg="d1"/>
    </method>
    <method name="RSA_padding_check_PKCS1_type_1" result="int">
      <arg name="to" type="unsigned char *" m68kreg="a0"/>
      <arg name="tlen" type="int" m68kreg="d0"/>
      <arg name="f" type="const unsigned char *" m68kreg="a1"/>
      <arg name="fl" type="int" m68kreg="d1"/>
      <arg name="rsa_len" type="int" m68kreg="d2"/>
    </method>
    <method name="RSA_padding_add_PKCS1_type_2" result="int">
      <arg name="to" type="unsigned char *" m68kreg="a0"/>
      <arg name="tlen" type="int" m68kreg="d0"/>
      <arg name="f" type="const unsigned char *" m68kreg="a1"/>
      <arg name="fl" type="int" m68kreg="d1"/>
    </method>
    <method name="RSA_padding_check_PKCS1_type_2" result="int">
      <arg name="to" type="unsigned char *" m68kreg="a0"/>
      <arg name="tlen" type="int" m68kreg="d0"/>
      <arg name="f" type="const unsigned char *" m68kreg="a1"/>
      <arg name="fl" type="int" m68kreg="d1"/>
      <arg name="rsa_len" type="int" m68kreg="d2"/>
    </method>
    <method name="RSA_padding_add_PKCS1_OAEP" result="int">
      <arg name="to" type="unsigned char *" m68kreg="a0"/>
      <arg name="tlen" type="int" m68kreg="d0"/>
      <arg name="f" type="const unsigned char *" m68kreg="a1"/>
      <arg name="fl" type="int" m68kreg="d1"/>
      <arg name="p" type="const unsigned char *" m68kreg="a2"/>
      <arg name="pl" type="int" m68kreg="d2"/>
    </method>
    <method name="RSA_padding_check_PKCS1_OAEP" result="int">
      <arg name="to" type="unsigned char *" m68kreg="a0"/>
      <arg name="tlen" type="int" m68kreg="d0"/>
      <arg name="f" type="const unsigned char *" m68kreg="a1"/>
      <arg name="fl" type="int" m68kreg="d1"/>
      <arg name="rsa_len" type="int" m68kreg="d2"/>
      <arg name="p" type="const unsigned char *" m68kreg="a2"/>
      <arg name="pl" type="int" m68kreg="d3"/>
    </method>
    <method name="RSA_padding_add_SSLv23" result="int">
      <arg name="to" type="unsigned char *" m68kreg="a0"/>
      <arg name="tlen" type="int" m68kreg="d0"/>
      <arg name="f" type="const unsigned char *" m68kreg="a1"/>
      <arg name="fl" type="int" m68kreg="d1"/>
    </method>
    <method name="RSA_padding_check_SSLv23" result="int">
      <arg name="to" type="unsigned char *" m68kreg="a0"/>
      <arg name="tlen" type="int" m68kreg="d0"/>
      <arg name="f" type="const unsigned char *" m68kreg="a1"/>
      <arg name="fl" type="int" m68kreg="d1"/>
      <arg name="rsa_len" type="int" m68kreg="d2"/>
    </method>
    <method name="RSA_padding_add_none" result="int">
      <arg name="to" type="unsigned char *" m68kreg="a0"/>
      <arg name="tlen" type="int" m68kreg="d0"/>
      <arg name="f" type="const unsigned char *" m68kreg="a1"/>
      <arg name="fl" type="int" m68kreg="d1"/>
    </method>
    <method name="RSA_padding_check_none" result="int">
      <arg name="to" type="unsigned char *" m68kreg="a0"/>
      <arg name="tlen" type="int" m68kreg="d0"/>
      <arg name="f" type="const unsigned char *" m68kreg="a1"/>
      <arg name="fl" type="int" m68kreg="d1"/>
      <arg name="rsa_len" type="int" m68kreg="d2"/>
    </method>
    <method name="RSA_get_ex_new_index" result="int" status="unimplemented">
      <arg name="argl" type="long" m68kreg="d0"/>
      <arg name="argp" type="void *" m68kreg="a0"/>
      <arg name="new_func" type="CRYPTO_EX_new *" m68kreg="a1"/>
      <arg name="dup_func" type="CRYPTO_EX_dup *" m68kreg="a2"/>
      <arg name="free_func" type="CRYPTO_EX_free *" m68kreg="a3"/>
    </method>
    <method name="RSA_set_ex_data" result="int">
      <arg name="r" type="RSA *" m68kreg="a0"/>
      <arg name="idx" type="int" m68kreg="d0"/>
      <arg name="arg" type="void *" m68kreg="a1"/>
    </method>
    <method name="RSA_get_ex_data" result="void *">
      <arg name="r" type="const RSA *" m68kreg="a0"/>
      <arg name="idx" type="int" m68kreg="d0"/>
    </method>
    <method name="RSAPublicKey_dup" result="RSA *">
      <arg name="rsa" type="RSA *" m68kreg="a0"/>
    </method>
    <method name="RSAPrivateKey_dup" result="RSA *">
      <arg name="rsa" type="RSA *" m68kreg="a0"/>
    </method>
    <method name="ERR_load_RSA_strings" result="int">
    </method>
    <method name="SHA_Init" result="int" status="unimplemented">
      <arg name="c" type="SHA_CTX *" m68kreg="a0"/>
    </method>
    <method name="SHA_Update" result="int" status="unimplemented">
      <arg name="c" type="SHA_CTX *" m68kreg="a0"/>
      <arg name="data" type="const void *" m68kreg="a1"/>
      <arg name="len" type="unsigned long" m68kreg="d0"/>
    </method>
    <method name="SHA_Final" result="int" status="unimplemented">
      <arg name="md" type="unsigned char *" m68kreg="a0"/>
      <arg name="c" type="SHA_CTX *" m68kreg="a1"/>
    </method>
    <method name="SHA" result="unsigned char *" status="unimplemented">
      <arg name="d" type="const unsigned char *" m68kreg="a0"/>
      <arg name="n" type="unsigned long" m68kreg="d0"/>
      <arg name="md" type="unsigned char *" m68kreg="a1"/>
    </method>
    <method name="SHA_Transform" result="void" status="unimplemented">
      <arg name="c" type="SHA_CTX *" m68kreg="a0"/>
      <arg name="data" type="const unsigned char *" m68kreg="a1"/>
    </method>
    <method name="SHA1_Init" result="int">
      <arg name="c" type="SHA_CTX *" m68kreg="a0"/>
    </method>
    <method name="SHA1_Update" result="int">
      <arg name="c" type="SHA_CTX *" m68kreg="a0"/>
      <arg name="data" type="const void *" m68kreg="a1"/>
      <arg name="len" type="unsigned long" m68kreg="d0"/>
    </method>
    <method name="SHA1_Final" result="int">
      <arg name="md" type="unsigned char *" m68kreg="a0"/>
      <arg name="c" type="SHA_CTX *" m68kreg="a1"/>
    </method>
    <method name="SHA1" result="unsigned char *">
      <arg name="d" type="const unsigned char *" m68kreg="a0"/>
      <arg name="n" type="unsigned long" m68kreg="d0"/>
      <arg name="md" type="unsigned char *" m68kreg="a1"/>
    </method>
    <method name="SHA1_Transform" result="void">
      <arg name="c" type="SHA_CTX *" m68kreg="a0"/>
      <arg name="data" type="const unsigned char *" m68kreg="a1"/>
    </method>
    <method name="UI_read_string_lib" result="int" status="unimplemented">
      <arg name="ui" type="UI *" m68kreg="a0"/>
      <arg name="uis" type="UI_STRING *" m68kreg="a1"/>
    </method>
    <method name="UI_write_string_lib" result="int" status="unimplemented">
      <arg name="ui" type="UI *" m68kreg="a0"/>
      <arg name="uis" type="UI_STRING *" m68kreg="a1"/>
    </method>
    <method name="HMAC_CTX_set_flags" result="void">
      <arg name="ctx" type="HMAC_CTX *" m68kreg="a0"/>
      <arg name="flags" type="unsigned long" m68kreg="d0"/>
    </method>
    <method name="X509_check_ca" result="int">
      <arg name="x" type="X509 *" m68kreg="a0"/>
    </method>
    <method name="PROXY_POLICY_new" result="PROXY_POLICY *">
    </method>
    <method name="PROXY_POLICY_free" result="void">
      <arg name="a" type="PROXY_POLICY *" m68kreg="a0"/>
    </method>
    <method name="d2i_PROXY_POLICY" result="PROXY_POLICY *">
      <arg name="a" type="PROXY_POLICY **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_PROXY_POLICY" result="int">
      <arg name="a" type="PROXY_POLICY *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="PROXY_POLICY_it" result="const ASN1_ITEM *">
    </method>
    <method name="PROXY_CERT_INFO_EXTENSION_new" result="PROXY_CERT_INFO_EXTENSION *">
    </method>
    <method name="PROXY_CERT_INFO_EXTENSION_free" result="void">
      <arg name="a" type="PROXY_CERT_INFO_EXTENSION *" m68kreg="a0"/>
    </method>
    <method name="d2i_PROXY_CERT_INFO_EXTENSION" result="PROXY_CERT_INFO_EXTENSION *">
      <arg name="a" type="PROXY_CERT_INFO_EXTENSION **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_PROXY_CERT_INFO_EXTENSION" result="int">
      <arg name="a" type="PROXY_CERT_INFO_EXTENSION *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="PROXY_CERT_INFO_EXTENSION_it" result="const ASN1_ITEM *">
    </method>

    <!-- AmiSSL v3.x - OpenSSL 0.9.7m -->

    <method name="FIPS_mode" result="int">
    </method>
    <method name="private_RC4_set_key" result="void" status="unimplemented">
      <arg name="key" type="RC4_KEY *" m68kreg="a0"/>
      <arg name="len" type="int" m68kreg="d0"/>
      <arg name="data" type="const unsigned char *" m68kreg="a1"/>
    </method>
    <method name="BN_mod_exp_mont_consttime" result="int">
      <arg name="rr" type="BIGNUM *" m68kreg="a0"/>
      <arg name="a" type="const BIGNUM *" m68kreg="a1"/>
      <arg name="p" type="const BIGNUM *" m68kreg="a2"/>
      <arg name="m" type="const BIGNUM *" m68kreg="a3"/>
      <arg name="ctx" type="BN_CTX *" m68kreg="d0"/>
      <arg name="in_mont" type="BN_MONT_CTX *" m68kreg="d1"/>
    </method>
    <method name="BN_MONT_CTX_set_locked" result="BN_MONT_CTX *">
      <arg name="pmont" type="BN_MONT_CTX **" m68kreg="a0"/>
      <arg name="lock" type="CRYPTO_RWLOCK *" m68kreg="a1"/>
      <arg name="mod" type="const BIGNUM *" m68kreg="a2"/>
      <arg name="ctx" type="BN_CTX *" m68kreg="a3"/>
    </method>
    <method name="PKCS1_MGF1" result="int">
      <arg name="mask" type="unsigned char *" m68kreg="a0"/>
      <arg name="len" type="long" m68kreg="d0"/>
      <arg name="seed" type="const unsigned char *" m68kreg="a1"/>
      <arg name="seedlen" type="long" m68kreg="d1"/>
      <arg name="dgst" type="const EVP_MD *" m68kreg="a2"/>
    </method>
    <method name="RSA_padding_add_X931" result="int">
      <arg name="to" type="unsigned char *" m68kreg="a0"/>
      <arg name="tlen" type="int" m68kreg="d0"/>
      <arg name="from" type="const unsigned char *" m68kreg="a1"/>
      <arg name="flen" type="int" m68kreg="d1"/>
    </method>
    <method name="RSA_padding_check_X931" result="int">
      <arg name="to" type="unsigned char *" m68kreg="a0"/>
      <arg name="tlen" type="int" m68kreg="d0"/>
      <arg name="from" type="const unsigned char *" m68kreg="a1"/>
      <arg name="flen" type="int" m68kreg="d1"/>
      <arg name="num" type="int" m68kreg="d2"/>
    </method>
    <method name="RSA_X931_hash_id" result="int">
      <arg name="nid" type="int" m68kreg="d0"/>
    </method>
    <method name="RSA_verify_PKCS1_PSS" result="int">
      <arg name="rsa" type="RSA *" m68kreg="a0"/>
      <arg name="mHash" type="const unsigned char *" m68kreg="a1"/>
      <arg name="Hash" type="const EVP_MD *" m68kreg="a2"/>
      <arg name="EM" type="const unsigned char *" m68kreg="a3"/>
      <arg name="sLen" type="int" m68kreg="d0"/>
    </method>
    <method name="RSA_padding_add_PKCS1_PSS" result="int">
      <arg name="rsa" type="RSA *" m68kreg="a0"/>
      <arg name="EM" type="unsigned char *" m68kreg="a1"/>
      <arg name="mHash" type="const unsigned char *" m68kreg="a2"/>
      <arg name="Hash" type="const EVP_MD *" m68kreg="a3"/>
      <arg name="sLen" type="int" m68kreg="d0"/>
    </method>

    <!-- AmiSSL v3.x - OpenSSL 0.9.8y -->

    <method name="EVP_sha224" result="const EVP_MD *">
    </method>
    <method name="EVP_sha256" result="const EVP_MD *">
    </method>
    <method name="EVP_sha384" result="const EVP_MD *">
    </method>
    <method name="EVP_sha512" result="const EVP_MD *">
    </method>
    <method name="BN_GF2m_add" result="int">
      <arg name="r" type="BIGNUM *" m68kreg="a0"/>
      <arg name="a" type="const BIGNUM *" m68kreg="a1"/>
      <arg name="b" type="const BIGNUM *" m68kreg="a2"/>
    </method>
    <method name="BN_GF2m_arr2poly" result="int">
      <arg name="p" type="const int *" m68kreg="a0"/>
      <arg name="a" type="BIGNUM *" m68kreg="a1"/>
    </method>
    <method name="BN_GF2m_mod" result="int">
      <arg name="r" type="BIGNUM *" m68kreg="a0"/>
      <arg name="a" type="const BIGNUM *" m68kreg="a1"/>
      <arg name="p" type="const BIGNUM *" m68kreg="a2"/>
    </method>
    <method name="BN_GF2m_mod_mul" result="int">
      <arg name="r" type="BIGNUM *" m68kreg="a0"/>
      <arg name="a" type="const BIGNUM *" m68kreg="a1"/>
      <arg name="b" type="const BIGNUM *" m68kreg="a2"/>
      <arg name="p" type="const BIGNUM *" m68kreg="a3"/>
      <arg name="ctx" type="BN_CTX *" m68kreg="d0"/>
    </method>
    <method name="BN_GF2m_mod_sqr" result="int">
      <arg name="r" type="BIGNUM *" m68kreg="a0"/>
      <arg name="a" type="const BIGNUM *" m68kreg="a1"/>
      <arg name="p" type="const BIGNUM *" m68kreg="a2"/>
      <arg name="ctx" type="BN_CTX *" m68kreg="a3"/>
    </method>
    <method name="BN_GF2m_mod_inv" result="int">
      <arg name="r" type="BIGNUM *" m68kreg="a0"/>
      <arg name="b" type="const BIGNUM *" m68kreg="a1"/>
      <arg name="p" type="const BIGNUM *" m68kreg="a2"/>
      <arg name="ctx" type="BN_CTX *" m68kreg="a3"/>
    </method>
    <method name="BN_GF2m_mod_div" result="int">
      <arg name="r" type="BIGNUM *" m68kreg="a0"/>
      <arg name="a" type="const BIGNUM *" m68kreg="a1"/>
      <arg name="b" type="const BIGNUM *" m68kreg="a2"/>
      <arg name="p" type="const BIGNUM *" m68kreg="a3"/>
      <arg name="ctx" type="BN_CTX *" m68kreg="d0"/>
    </method>
    <method name="BN_GF2m_mod_exp" result="int">
      <arg name="r" type="BIGNUM *" m68kreg="a0"/>
      <arg name="a" type="const BIGNUM *" m68kreg="a1"/>
      <arg name="b" type="const BIGNUM *" m68kreg="a2"/>
      <arg name="p" type="const BIGNUM *" m68kreg="a3"/>
      <arg name="ctx" type="BN_CTX *" m68kreg="d0"/>
    </method>
    <method name="BN_GF2m_mod_sqrt" result="int">
      <arg name="r" type="BIGNUM *" m68kreg="a0"/>
      <arg name="a" type="const BIGNUM *" m68kreg="a1"/>
      <arg name="p" type="const BIGNUM *" m68kreg="a2"/>
      <arg name="ctx" type="BN_CTX *" m68kreg="a3"/>
    </method>
    <method name="BN_GF2m_mod_solve_quad" result="int">
      <arg name="r" type="BIGNUM *" m68kreg="a0"/>
      <arg name="a" type="const BIGNUM *" m68kreg="a1"/>
      <arg name="p" type="const BIGNUM *" m68kreg="a2"/>
      <arg name="ctx" type="BN_CTX *" m68kreg="a3"/>
    </method>
    <method name="BN_generate_prime_ex" result="int">
      <arg name="ret" type="BIGNUM *" m68kreg="a0"/>
      <arg name="bits" type="int" m68kreg="d0"/>
      <arg name="safe" type="int" m68kreg="d1"/>
      <arg name="add" type="const BIGNUM *" m68kreg="a1"/>
      <arg name="rem" type="const BIGNUM *" m68kreg="a2"/>
      <arg name="cb" type="BN_GENCB *" m68kreg="a3"/>
    </method>
    <method name="BN_is_prime_ex" result="int">
      <arg name="p" type="const BIGNUM *" m68kreg="a0"/>
      <arg name="nchecks" type="int" m68kreg="d0"/>
      <arg name="ctx" type="BN_CTX *" m68kreg="a1"/>
      <arg name="cb" type="BN_GENCB *" m68kreg="a2"/>
    </method>
    <method name="BN_set_negative" result="void">
      <arg name="b" type="BIGNUM *" m68kreg="a0"/>
      <arg name="n" type="int" m68kreg="d0"/>
    </method>
    <method name="EC_GROUP_get_degree" result="int">
      <arg name="group" type="const EC_GROUP *" m68kreg="a0"/>
    </method>
    <method name="EC_GF2m_simple_method" result="const EC_METHOD *">
    </method>
    <method name="EC_GROUP_set_curve_GF2m" result="int">
      <arg name="group" type="EC_GROUP *" m68kreg="a0"/>
      <arg name="p" type="const BIGNUM *" m68kreg="a1"/>
      <arg name="a" type="const BIGNUM *" m68kreg="a2"/>
      <arg name="b" type="const BIGNUM *" m68kreg="a3"/>
      <arg name="ctx" type="BN_CTX *" m68kreg="d0"/>
    </method>
    <method name="EC_GROUP_get_curve_GF2m" result="int">
      <arg name="group" type="const EC_GROUP *" m68kreg="a0"/>
      <arg name="p" type="BIGNUM *" m68kreg="a1"/>
      <arg name="a" type="BIGNUM *" m68kreg="a2"/>
      <arg name="b" type="BIGNUM *" m68kreg="a3"/>
      <arg name="ctx" type="BN_CTX *" m68kreg="d0"/>
    </method>
    <method name="EC_POINT_set_affine_coordinates_GF2m" result="int">
      <arg name="group" type="const EC_GROUP *" m68kreg="a0"/>
      <arg name="point" type="EC_POINT *" m68kreg="a1"/>
      <arg name="x" type="const BIGNUM *" m68kreg="a2"/>
      <arg name="y" type="const BIGNUM *" m68kreg="a3"/>
      <arg name="ctx" type="BN_CTX *" m68kreg="d0"/>
    </method>
    <method name="EC_POINT_get_affine_coordinates_GF2m" result="int">
      <arg name="group" type="const EC_GROUP *" m68kreg="a0"/>
      <arg name="point" type="const EC_POINT *" m68kreg="a1"/>
      <arg name="x" type="BIGNUM *" m68kreg="a2"/>
      <arg name="y" type="BIGNUM *" m68kreg="a3"/>
      <arg name="ctx" type="BN_CTX *" m68kreg="d0"/>
    </method>
    <method name="EC_get_builtin_curves" result="size_t">
      <arg name="r" type="EC_builtin_curve *" m68kreg="a0"/>
      <arg name="nitems" type="size_t" m68kreg="d0"/>
    </method>
    <method name="EC_GROUP_new_by_curve_name" result="EC_GROUP *">
      <arg name="nid" type="int" m68kreg="d0"/>
    </method>
    <method name="EC_GROUP_check" result="int">
      <arg name="group" type="const EC_GROUP *" m68kreg="a0"/>
      <arg name="ctx" type="BN_CTX *" m68kreg="a1"/>
    </method>
    <method name="ENGINE_cleanup" result="void" status="unimplemented">
    </method>
    <method name="DSA_generate_parameters_ex" result="int">
      <arg name="dsa" type="DSA *" m68kreg="a0"/>
      <arg name="bits" type="int" m68kreg="d0"/>
      <arg name="seed" type="unsigned char *" m68kreg="a1"/>
      <arg name="seed_len" type="int" m68kreg="d1"/>
      <arg name="counter_ret" type="int *" m68kreg="a2"/>
      <arg name="h_ret" type="unsigned long *" m68kreg="a3"/>
      <arg name="cb" type="BN_GENCB *" m68kreg="d2"/>
    </method>
    <method name="EVP_ecdsa" result="const EVP_MD *" status="unimplemented">
    </method>
    <method name="EC_KEY_new_by_curve_name" result="EC_KEY *">
      <arg name="nid" type="int" m68kreg="d0"/>
    </method>
    <method name="EC_KEY_generate_key" result="int">
      <arg name="key" type="EC_KEY *" m68kreg="a0"/>
    </method>
    <method name="EC_KEY_free" result="void">
      <arg name="key" type="EC_KEY *" m68kreg="a0"/>
    </method>
    <method name="ECDSA_SIG_free" result="void">
      <arg name="a" type="ECDSA_SIG *" m68kreg="a0"/>
    </method>
    <method name="ECDSA_do_sign" result="ECDSA_SIG *">
      <arg name="dgst" type="const unsigned char *" m68kreg="a0"/>
      <arg name="dlen" type="int" m68kreg="d0"/>
      <arg name="eckey" type="EC_KEY *" m68kreg="a1"/>
    </method>
    <method name="ECDSA_do_verify" result="int">
      <arg name="dgst" type="const unsigned char *" m68kreg="a0"/>
      <arg name="dgst_len" type="int" m68kreg="d0"/>
      <arg name="sig" type="const ECDSA_SIG *" m68kreg="a1"/>
      <arg name="eckey" type="EC_KEY *" m68kreg="a2"/>
    </method>
    <method name="EC_KEY_new" result="EC_KEY *">
    </method>
    <method name="EC_KEY_set_group" result="int">
      <arg name="eckey" type="EC_KEY *" m68kreg="a0"/>
      <arg name="group" type="const EC_GROUP *" m68kreg="a1"/>
    </method>
    <method name="EC_KEY_get0_group" result="const EC_GROUP *">
      <arg name="key" type="const EC_KEY *" m68kreg="a0"/>
    </method>
    <method name="EC_KEY_check_key" result="int">
      <arg name="eckey" type="const EC_KEY *" m68kreg="a0"/>
    </method>
    <method name="ECDSA_size" result="int">
      <arg name="eckey" type="const EC_KEY *" m68kreg="a0"/>
    </method>
    <method name="ECDSA_sign" result="int">
      <arg name="type" type="int" m68kreg="d0"/>
      <arg name="dgst" type="const unsigned char *" m68kreg="a0"/>
      <arg name="dgstlen" type="int" m68kreg="d1"/>
      <arg name="sig" type="unsigned char *" m68kreg="a1"/>
      <arg name="siglen" type="unsigned int *" m68kreg="a2"/>
      <arg name="eckey" type="EC_KEY *" m68kreg="a3"/>
    </method>
    <method name="ECDSA_verify" result="int">
      <arg name="type" type="int" m68kreg="d0"/>
      <arg name="dgst" type="const unsigned char *" m68kreg="a0"/>
      <arg name="dgstlen" type="int" m68kreg="d1"/>
      <arg name="sig" type="const unsigned char *" m68kreg="a1"/>
      <arg name="siglen" type="int" m68kreg="d2"/>
      <arg name="eckey" type="EC_KEY *" m68kreg="a2"/>
    </method>
    <method name="d2i_ECDSA_SIG" result="ECDSA_SIG *">
      <arg name="v" type="ECDSA_SIG **" m68kreg="a0"/>
      <arg name="pp" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="a2"/>
    </method>
    <method name="i2d_ECDSA_SIG" result="int">
      <arg name="a" type="const ECDSA_SIG *" m68kreg="a0"/>
      <arg name="pp" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="DH_generate_parameters_ex" result="int">
      <arg name="ret" type="DH *" m68kreg="a0"/>
      <arg name="prime_len" type="int" m68kreg="d0"/>
      <arg name="generator" type="int" m68kreg="d1"/>
      <arg name="cb" type="BN_GENCB *" m68kreg="a1"/>
    </method>
    <method name="EC_METHOD_get_field_type" result="int">
      <arg name="meth" type="const EC_METHOD *" m68kreg="a0"/>
    </method>
    <method name="EC_KEY_get0_public_key" result="const EC_POINT *">
      <arg name="eckey" type="const EC_KEY *" m68kreg="a0"/>
    </method>
    <method name="ECDH_compute_key" result="int">
      <arg name="out" type="void *" m68kreg="a0"/>
      <arg name="outlen" type="size_t" m68kreg="d0"/>
      <arg name="pub_key" type="const EC_POINT *" m68kreg="a1"/>
      <arg name="eckey" type="const EC_KEY *" m68kreg="a2"/>
      <arg name="KDF" type="void *(*)(const void *, size_t, void *, size_t *)" m68kreg="a3"/>
    </method>
    <method name="EC_KEY_get0_private_key" result="const BIGNUM *">
      <arg name="eckey" type="const EC_KEY *" m68kreg="a0"/>
    </method>
    <method name="ENGINE_get_first" result="ENGINE *">
    </method>
    <method name="ENGINE_get_id" result="const char *">
      <arg name="e" type="const ENGINE *" m68kreg="a0"/>
    </method>
    <method name="ENGINE_get_name" result="const char *">
      <arg name="e" type="const ENGINE *" m68kreg="a0"/>
    </method>
    <method name="ENGINE_get_next" result="ENGINE *">
      <arg name="e" type="ENGINE *" m68kreg="a0"/>
    </method>
    <method name="ENGINE_free" result="int">
      <arg name="e" type="ENGINE *" m68kreg="a0"/>
    </method>
    <method name="ENGINE_new" result="ENGINE *">
    </method>
    <method name="ENGINE_set_id" result="int">
      <arg name="e" type="ENGINE *" m68kreg="a0"/>
      <arg name="id" type="const char *" m68kreg="a1"/>
    </method>
    <method name="ENGINE_set_name" result="int">
      <arg name="e" type="ENGINE *" m68kreg="a0"/>
      <arg name="name" type="const char *" m68kreg="a1"/>
    </method>
    <method name="ENGINE_add" result="int">
      <arg name="e" type="ENGINE *" m68kreg="a0"/>
    </method>
    <method name="ENGINE_remove" result="int">
      <arg name="e" type="ENGINE *" m68kreg="a0"/>
    </method>
    <method name="ENGINE_load_builtin_engines" result="void">
    </method>
    <method name="ENGINE_register_all_ciphers" result="void">
    </method>
    <method name="EVP_CIPHER_nid" result="int">
      <arg name="cipher" type="const EVP_CIPHER *" m68kreg="a0"/>
    </method>
    <method name="EVP_MD_type" result="int">
      <arg name="md" type="const EVP_MD *" m68kreg="a0"/>
    </method>
    <method name="ENGINE_register_all_digests" result="void">
    </method>
    <method name="BIO_test_flags" result="int">
      <arg name="b" type="const BIO *" m68kreg="a0"/>
      <arg name="flags" type="int" m68kreg="d0"/>
    </method>
    <method name="SSL_COMP_get_compression_methods" result="STACK_OF(SSL_COMP) *">
    </method>
    <method name="RSA_generate_key_ex" result="int">
      <arg name="rsa" type="RSA *" m68kreg="a0"/>
      <arg name="bits" type="int" m68kreg="d0"/>
      <arg name="e" type="BIGNUM *" m68kreg="a1"/>
      <arg name="cb" type="BN_GENCB *" m68kreg="a2"/>
    </method>
    <method name="X509_VERIFY_PARAM_free" result="void">
      <arg name="param" type="X509_VERIFY_PARAM *" m68kreg="a0"/>
    </method>
    <method name="X509_STORE_set1_param" result="int">
      <arg name="ctx" type="X509_STORE *" m68kreg="a0"/>
      <arg name="pm" type="X509_VERIFY_PARAM *" m68kreg="a1"/>
    </method>
    <method name="ASN1_generate_nconf" result="ASN1_TYPE *">
      <arg name="str" type="const char *" m68kreg="a0"/>
      <arg name="nconf" type="CONF *" m68kreg="a1"/>
    </method>
    <method name="PEM_read_bio_ECPKParameters" result="EC_GROUP *">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="x" type="EC_GROUP **" m68kreg="a1"/>
      <arg name="cb" type="pem_password_cb *" m68kreg="a2"/>
      <arg name="u" type="void *" m68kreg="a3"/>
    </method>
    <method name="EC_KEY_dup" result="EC_KEY *">
      <arg name="ec_key" type="const EC_KEY *" m68kreg="a0"/>
    </method>
    <method name="BIO_set_callback" result="void">
      <arg name="b" type="BIO *" m68kreg="a0"/>
      <arg name="callback" type="BIO_callback_fn" m68kreg="a1"/>
    </method>
    <method name="BIO_set_callback_arg" result="void">
      <arg name="b" type="BIO *" m68kreg="a0"/>
      <arg name="arg" type="char *" m68kreg="a1"/>
    </method>
    <method name="EVP_MD_CTX_set_flags" result="void">
      <arg name="ctx" type="EVP_MD_CTX *" m68kreg="a0"/>
      <arg name="flags" type="int" m68kreg="d0"/>
    </method>
    <method name="BIO_set_flags" result="void">
      <arg name="b" type="BIO *" m68kreg="a0"/>
      <arg name="flags" type="int" m68kreg="d0"/>
    </method>
    <method name="EVP_CIPHER_CTX_set_flags" result="void">
      <arg name="ctx" type="EVP_CIPHER_CTX *" m68kreg="a0"/>
      <arg name="flags" type="int" m68kreg="d0"/>
    </method>
    <method name="EVP_CIPHER_iv_length" result="int">
      <arg name="cipher" type="const EVP_CIPHER *" m68kreg="a0"/>
    </method>
    <method name="X509_REQ_check_private_key" result="int">
      <arg name="x509" type="X509_REQ *" m68kreg="a0"/>
      <arg name="pkey" type="EVP_PKEY *" m68kreg="a1"/>
    </method>
    <method name="PEM_read_bio_EC_PUBKEY" result="EC_KEY *">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="x" type="EC_KEY **" m68kreg="a1"/>
      <arg name="cb" type="pem_password_cb *" m68kreg="a2"/>
      <arg name="u" type="void *" m68kreg="a3"/>
    </method>
    <method name="PEM_read_bio_ECPrivateKey" result="EC_KEY *">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="x" type="EC_KEY **" m68kreg="a1"/>
      <arg name="cb" type="pem_password_cb *" m68kreg="a2"/>
      <arg name="u" type="void *" m68kreg="a3"/>
    </method>
    <method name="PEM_write_bio_EC_PUBKEY" result="int">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="x" type="EC_KEY *" m68kreg="a1"/>
    </method>
    <method name="d2i_EC_PUBKEY_bio" result="EC_KEY *">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="eckey" type="EC_KEY **" m68kreg="a1"/>
    </method>
    <method name="EC_KEY_set_asn1_flag" result="void">
      <arg name="key" type="EC_KEY *" m68kreg="a0"/>
      <arg name="flag" type="int" m68kreg="d0"/>
    </method>
    <method name="EC_KEY_set_conv_form" result="void">
      <arg name="key" type="EC_KEY *" m68kreg="a0"/>
      <arg name="cform" type="point_conversion_form_t" m68kreg="d0"/>
    </method>
    <method name="EC_KEY_print" result="int">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="x" type="const EC_KEY *" m68kreg="a1"/>
      <arg name="off" type="int" m68kreg="d0"/>
    </method>
    <method name="d2i_ECPrivateKey_bio" result="EC_KEY *">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="eckey" type="EC_KEY **" m68kreg="a1"/>
    </method>
    <method name="i2d_EC_PUBKEY_bio" result="int">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="eckey" type="EC_KEY *" m68kreg="a1"/>
    </method>
    <method name="PEM_write_bio_ECPrivateKey" result="int">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="x" type="EC_KEY *" m68kreg="a1"/>
      <arg name="enc" type="const EVP_CIPHER *" m68kreg="a2"/>
      <arg name="kstr" type="unsigned char *" m68kreg="a3"/>
      <arg name="klen" type="int" m68kreg="d0"/>
      <arg name="cb" type="pem_password_cb *" m68kreg="d1"/>
      <arg name="u" type="void *" m68kreg="d2"/>
    </method>
    <method name="PEM_write_bio_ECPKParameters" result="int">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="x" type="const EC_GROUP *" m68kreg="a1"/>
    </method>
    <method name="i2d_ECPrivateKey_bio" result="int">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="eckey" type="EC_KEY *" m68kreg="a1"/>
    </method>
    <method name="i2d_ECPKParameters" result="int">
      <arg name="a" type="const EC_GROUP *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="EC_GROUP_set_asn1_flag" result="void">
      <arg name="group" type="EC_GROUP *" m68kreg="a0"/>
      <arg name="flag" type="int" m68kreg="d0"/>
    </method>
    <method name="EC_GROUP_set_point_conversion_form" result="void">
      <arg name="group" type="EC_GROUP *" m68kreg="a0"/>
      <arg name="form" type="point_conversion_form_t" m68kreg="d0"/>
    </method>
    <method name="EC_GROUP_get_point_conversion_form" result="point_conversion_form_t">
      <arg name="group" type="const EC_GROUP *" m68kreg="a0"/>
    </method>
    <method name="ECPKParameters_print" result="int">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="x" type="const EC_GROUP *" m68kreg="a1"/>
      <arg name="off" type="int" m68kreg="d0"/>
    </method>
    <method name="EC_GROUP_set_seed" result="size_t">
      <arg name="group" type="EC_GROUP *" m68kreg="a0"/>
      <arg name="p" type="const unsigned char *" m68kreg="a1"/>
      <arg name="len" type="size_t" m68kreg="d0"/>
    </method>
    <method name="d2i_ECPKParameters" result="EC_GROUP *">
      <arg name="a" type="EC_GROUP **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="EC_POINT_point2bn" result="BIGNUM *">
      <arg name="group" type="const EC_GROUP *" m68kreg="a0"/>
      <arg name="point" type="const EC_POINT *" m68kreg="a1"/>
      <arg name="form" type="point_conversion_form_t" m68kreg="d0"/>
      <arg name="ret" type="BIGNUM *" m68kreg="a2"/>
      <arg name="ctx" type="BN_CTX *" m68kreg="a3"/>
    </method>
    <method name="X509_get1_ocsp" result="STACK_OF(OPENSSL_STRING) *">
      <arg name="x" type="X509 *" m68kreg="a0"/>
    </method>
    <method name="SSL_get_servername" result="const char *">
      <arg name="s" type="const SSL *" m68kreg="a0"/>
      <arg name="type" type="const int" m68kreg="d0"/>
    </method>
    <method name="SSL_set_SSL_CTX" result="SSL_CTX *">
      <arg name="ssl" type="SSL *" m68kreg="a0"/>
      <arg name="ctx" type="SSL_CTX *" m68kreg="a1"/>
    </method>
    <method name="SSL_CTX_set_cookie_generate_cb" result="void">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
      <arg name="app_gen_cookie_cb" type="int (*)(SSL *ssl, unsigned char *cookie, unsigned int *cookie_len)" m68kreg="a1"/>
    </method>
    <method name="SSL_CTX_set_cookie_verify_cb" result="void">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
      <arg name="app_verify_cookie_cb" type="int (*)(SSL *, const unsigned char *, unsigned int)" m68kreg="a1"/>
    </method>
    <method name="SSL_CTX_set_info_callback" result="void">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
      <arg name="cb" type="void (*)(const SSL *ssl, int type, int val)" m68kreg="a1"/>
    </method>
    <method name="DTLSv1_server_method" result="const SSL_METHOD *" status="unimplemented">
    </method>
    <method name="BIO_new_dgram" result="BIO *">
      <arg name="fd" type="int" m68kreg="d0"/>
      <arg name="close_flag" type="int" m68kreg="d1"/>
    </method>
    <method name="SSL_get_servername_type" result="int">
      <arg name="s" type="const SSL *" m68kreg="a0"/>
    </method>
    <method name="SSL_get_current_compression" result="const COMP_METHOD *">
      <arg name="s" type="const SSL *" m68kreg="a0"/>
    </method>
    <method name="SSL_get_current_expansion" result="const COMP_METHOD *">
      <arg name="s" type="const SSL *" m68kreg="a0"/>
    </method>
    <method name="SSL_COMP_get_name" result="const char *">
      <arg name="comp" type="const COMP_METHOD *" m68kreg="a0"/>
    </method>
    <method name="ENGINE_by_id" result="ENGINE *">
      <arg name="id" type="const char *" m68kreg="a0"/>
    </method>
    <method name="SSL_CTX_set_client_cert_engine" result="int">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
      <arg name="e" type="ENGINE *" m68kreg="a1"/>
    </method>
    <method name="DTLSv1_client_method" result="const SSL_METHOD *" status="unimplemented">
    </method>
    <method name="DTLSv1_method" result="const SSL_METHOD *" status="unimplemented">
    </method>
    <method name="SHA256" result="unsigned char *">
      <arg name="d" type="const unsigned char *" m68kreg="a0"/>
      <arg name="n" type="size_t" m68kreg="d0"/>
      <arg name="md" type="unsigned char *" m68kreg="a1"/>
    </method>
    <method name="SHA512" result="unsigned char *">
      <arg name="d" type="const unsigned char *" m68kreg="a0"/>
      <arg name="n" type="size_t" m68kreg="d0"/>
      <arg name="md" type="unsigned char *" m68kreg="a1"/>
    </method>
    <method name="AES_ige_encrypt" result="void">
      <arg name="in" type="const unsigned char *" m68kreg="a0"/>
      <arg name="out" type="unsigned char *" m68kreg="a1"/>
      <arg name="length" type="const unsigned long" m68kreg="d0"/>
      <arg name="key" type="const AES_KEY *" m68kreg="a2"/>
      <arg name="ivec" type="unsigned char *" m68kreg="a3"/>
      <arg name="enc" type="const int" m68kreg="d1"/>
    </method>
    <method name="EC_KEY_precompute_mult" result="int">
      <arg name="key" type="EC_KEY *" m68kreg="a0"/>
      <arg name="ctx" type="BN_CTX *" m68kreg="a1"/>
    </method>
    <method name="ENGINE_load_private_key" result="EVP_PKEY *">
      <arg name="e" type="ENGINE *" m68kreg="a0"/>
      <arg name="key_id" type="const char *" m68kreg="a1"/>
      <arg name="ui_method" type="UI_METHOD *" m68kreg="a2"/>
      <arg name="callback_data" type="void *" m68kreg="a3"/>
    </method>
    <method name="ENGINE_load_public_key" result="EVP_PKEY *">
      <arg name="e" type="ENGINE *" m68kreg="a0"/>
      <arg name="key_id" type="const char *" m68kreg="a1"/>
      <arg name="ui_method" type="UI_METHOD *" m68kreg="a2"/>
      <arg name="callback_data" type="void *" m68kreg="a3"/>
    </method>
    <method name="ENGINE_ctrl_cmd" result="int">
      <arg name="e" type="ENGINE *" m68kreg="a0"/>
      <arg name="cmd_name" type="const char *" m68kreg="a1"/>
      <arg name="i" type="long" m68kreg="a2"/>
      <arg name="p" type="void *" m68kreg="a3"/>
      <arg name="f" type="void (*)(void)" m68kreg="d0"/>
      <arg name="cmd_optional" type="int" m68kreg="d1"/>
    </method>
    <method name="ENGINE_set_default" result="int">
      <arg name="e" type="ENGINE *" m68kreg="a0"/>
      <arg name="flags" type="unsigned int" m68kreg="d0"/>
    </method>
    <method name="ENGINE_ctrl" result="int">
      <arg name="e" type="ENGINE *" m68kreg="a0"/>
      <arg name="cmd" type="int" m68kreg="d0"/>
      <arg name="i" type="long" m68kreg="d1"/>
      <arg name="p" type="void *" m68kreg="a1"/>
      <arg name="f" type="void (*)(void)" m68kreg="a2"/>
    </method>
    <method name="ENGINE_register_all_complete" result="int">
    </method>
    <method name="ENGINE_ctrl_cmd_string" result="int">
      <arg name="e" type="ENGINE *" m68kreg="a0"/>
      <arg name="cmd_name" type="const char *" m68kreg="a1"/>
      <arg name="arg" type="const char *" m68kreg="a2"/>
      <arg name="cmd_optional" type="int" m68kreg="d0"/>
    </method>
    <method name="X509_VERIFY_PARAM_add0_policy" result="int">
      <arg name="param" type="X509_VERIFY_PARAM *" m68kreg="a0"/>
      <arg name="policy" type="ASN1_OBJECT *" m68kreg="a1"/>
    </method>
    <method name="X509_VERIFY_PARAM_set_purpose" result="int">
      <arg name="param" type="X509_VERIFY_PARAM *" m68kreg="a0"/>
      <arg name="purpose" type="int" m68kreg="d0"/>
    </method>
    <method name="X509_VERIFY_PARAM_set_flags" result="int">
      <arg name="param" type="X509_VERIFY_PARAM *" m68kreg="a0"/>
      <arg name="flags" type="unsigned long" m68kreg="d0"/>
    </method>
    <method name="X509_VERIFY_PARAM_new" result="X509_VERIFY_PARAM *">
    </method>
    <method name="X509_POLICY_NODE_print" result="void">
      <arg name="out" type="BIO *" m68kreg="a0"/>
      <arg name="node" type="X509_POLICY_NODE *" m68kreg="a1"/>
      <arg name="indent" type="int" m68kreg="d0"/>
    </method>
    <method name="X509_STORE_CTX_get0_policy_tree" result="X509_POLICY_TREE *">
      <arg name="ctx" type="X509_STORE_CTX *" m68kreg="a0"/>
    </method>
    <method name="X509_STORE_CTX_get_explicit_policy" result="int">
      <arg name="ctx" type="X509_STORE_CTX *" m68kreg="a0"/>
    </method>
    <method name="X509_policy_tree_get0_policies" result="STACK_OF(X509_POLICY_NODE) *">
      <arg name="tree" type="const X509_POLICY_TREE *" m68kreg="a0"/>
    </method>
    <method name="X509_policy_tree_get0_user_policies" result="STACK_OF(X509_POLICY_NODE) *">
      <arg name="tree" type="const X509_POLICY_TREE *" m68kreg="a0"/>
    </method>
    <method name="BIO_get_callback_arg" result="char *">
      <arg name="b" type="const BIO *" m68kreg="a0"/>
    </method>
    <method name="EVP_PKEY_add1_attr_by_NID" result="int">
      <arg name="key" type="EVP_PKEY *" m68kreg="a0"/>
      <arg name="nid" type="int" m68kreg="d0"/>
      <arg name="type" type="int" m68kreg="d1"/>
      <arg name="bytes" type="const unsigned char *" m68kreg="a1"/>
      <arg name="len" type="int" m68kreg="d2"/>
    </method>
    <method name="ENGINE_get_RSA" result="const RSA_METHOD *">
      <arg name="e" type="const ENGINE *" m68kreg="a0"/>
    </method>
    <method name="ENGINE_get_DSA" result="const DSA_METHOD *">
      <arg name="e" type="const ENGINE *" m68kreg="a0"/>
    </method>
    <method name="ENGINE_get_DH" result="const DH_METHOD *">
      <arg name="e" type="const ENGINE *" m68kreg="a0"/>
    </method>
    <method name="ENGINE_get_RAND" result="const RAND_METHOD *">
      <arg name="e" type="const ENGINE *" m68kreg="a0"/>
    </method>
    <method name="ENGINE_get_ciphers" result="ENGINE_CIPHERS_PTR">
      <arg name="e" type="const ENGINE *" m68kreg="a0"/>
    </method>
    <method name="ENGINE_get_digests" result="ENGINE_DIGESTS_PTR">
      <arg name="e" type="const ENGINE *" m68kreg="a0"/>
    </method>
    <method name="ENGINE_init" result="int">
      <arg name="e" type="ENGINE *" m68kreg="a0"/>
    </method>
    <method name="ENGINE_finish" result="int">
      <arg name="e" type="ENGINE *" m68kreg="a0"/>
    </method>
    <method name="OCSP_sendreq_new" result="OCSP_REQ_CTX *">
      <arg name="io" type="BIO *" m68kreg="a0"/>
      <arg name="path" type="const char *" m68kreg="a1"/>
      <arg name="req" type="OCSP_REQUEST *" m68kreg="a2"/>
      <arg name="maxline" type="int" m68kreg="a3"/>
    </method>
    <method name="OCSP_sendreq_nbio" result="int">
      <arg name="presp" type="OCSP_RESPONSE **" m68kreg="a0"/>
      <arg name="rctx" type="OCSP_REQ_CTX *" m68kreg="a1"/>
    </method>
    <method name="OCSP_REQ_CTX_free" result="void">
      <arg name="rctx" type="OCSP_REQ_CTX *" m68kreg="a0"/>
    </method>
    <method name="SSL_CTX_use_psk_identity_hint" result="int">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
      <arg name="identity_hint" type="const char *" m68kreg="a1"/>
    </method>
    <method name="SSL_CTX_set_psk_client_callback" result="void">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
      <arg name="cb" type="SSL_psk_client_cb_func" m68kreg="a1"/>
    </method>
    <method name="SSL_get_psk_identity_hint" result="const char *">
      <arg name="s" type="const SSL *" m68kreg="a0"/>
    </method>
    <method name="SSL_set_psk_server_callback" result="void">
      <arg name="ssl" type="SSL *" m68kreg="a0"/>
      <arg name="cb" type="SSL_psk_server_cb_func" m68kreg="a1"/>
    </method>
    <method name="SSL_use_psk_identity_hint" result="int">
      <arg name="s" type="SSL *" m68kreg="a0"/>
      <arg name="identity_hint" type="const char *" m68kreg="a1"/>
    </method>
    <method name="SSL_set_psk_client_callback" result="void">
      <arg name="ssl" type="SSL *" m68kreg="a0"/>
      <arg name="cb" type="SSL_psk_client_cb_func" m68kreg="a1"/>
    </method>
    <method name="SSL_CTX_set_psk_server_callback" result="void">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
      <arg name="cb" type="SSL_psk_server_cb_func" m68kreg="a1"/>
    </method>
    <method name="SSL_get_psk_identity" result="const char *">
      <arg name="s" type="const SSL *" m68kreg="a0"/>
    </method>
    <method name="SSL_set_session_ticket_ext" result="int">
      <arg name="s" type="SSL *" m68kreg="a0"/>
      <arg name="ext_data" type="void *" m68kreg="a1"/>
      <arg name="ext_len" type="int" m68kreg="d0"/>
    </method>
    <method name="SSL_set_session_secret_cb" result="int">
      <arg name="s" type="SSL *" m68kreg="a0"/>
      <arg name="tls_session_secret_cb" type="int (*)(SSL *, void *, int *, STACK_OF(SSL_CIPHER) *, const SSL_CIPHER **, void *)" m68kreg="a1"/>
      <arg name="arg" type="void *" m68kreg="a2"/>
    </method>
    <method name="SSL_set_session_ticket_ext_cb" result="int">
      <arg name="s" type="SSL *" m68kreg="a0"/>
      <arg name="cb" type="tls_session_ticket_ext_cb_fn" m68kreg="a1"/>
      <arg name="arg" type="void *" m68kreg="a2"/>
    </method>
    <method name="SSL_set1_param" result="int">
      <arg name="ssl" type="SSL *" m68kreg="a0"/>
      <arg name="vpm" type="X509_VERIFY_PARAM *" m68kreg="a1"/>
    </method>
    <method name="SSL_CTX_set1_param" result="int">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
      <arg name="vpm" type="X509_VERIFY_PARAM *" m68kreg="a1"/>
    </method>
    <method name="SSL_renegotiate_abbreviated" result="int">
      <arg name="s" type="SSL *" m68kreg="a0"/>
    </method>
    <method name="TLSv1_1_method" result="const SSL_METHOD *" status="unimplemented">
    </method>
    <method name="TLSv1_1_client_method" result="const SSL_METHOD *" status="unimplemented">
    </method>
    <method name="TLSv1_1_server_method" result="const SSL_METHOD *" status="unimplemented">
    </method>
    <method name="SSL_CTX_set_srp_client_pwd_callback" result="int">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
      <arg name="cb" type="char * (*)(SSL *, void *)" m68kreg="a1"/>
    </method>
    <method name="SSL_get_srp_g" result="BIGNUM *">
      <arg name="s" type="SSL *" m68kreg="a0"/>
    </method>
    <method name="SSL_CTX_set_srp_username_callback" result="int">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
      <arg name="cb" type="int (*)(SSL *, int *, void *)" m68kreg="a1"/>
    </method>
    <method name="SSL_get_srp_userinfo" result="char *">
      <arg name="s" type="SSL *" m68kreg="a0"/>
    </method>
    <method name="SSL_set_srp_server_param" result="int">
      <arg name="s" type="SSL *" m68kreg="a0"/>
      <arg name="N" type="const BIGNUM *" m68kreg="a1"/>
      <arg name="g" type="const BIGNUM *" m68kreg="a2"/>
      <arg name="sa" type="BIGNUM *" m68kreg="a3"/>
      <arg name="v" type="BIGNUM *" m68kreg="d0"/>
      <arg name="info" type="char *" m68kreg="d1"/>
    </method>
    <method name="SSL_set_srp_server_param_pw" result="int">
      <arg name="s" type="SSL *" m68kreg="a0"/>
      <arg name="user" type="const char *" m68kreg="a1"/>
      <arg name="pass" type="const char *" m68kreg="a2"/>
      <arg name="grp" type="const char *" m68kreg="a3"/>
    </method>
    <method name="SSL_get_srp_N" result="BIGNUM *">
      <arg name="s" type="SSL *" m68kreg="a0"/>
    </method>
    <method name="SSL_get_srp_username" result="char *">
      <arg name="s" type="SSL *" m68kreg="a0"/>
    </method>
    <method name="SSL_CTX_set_srp_password" result="int">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
      <arg name="password" type="char *" m68kreg="a1"/>
    </method>
    <method name="SSL_CTX_set_srp_strength" result="int">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
      <arg name="strength" type="int" m68kreg="d0"/>
    </method>
    <method name="SSL_CTX_set_srp_verify_param_callback" result="int">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
      <arg name="cb" type="int (*)(SSL *, void *)" m68kreg="a1"/>
    </method>
    <method name="SSL_CTX_set_srp_cb_arg" result="int">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
      <arg name="arg" type="void *" m68kreg="a1"/>
    </method>
    <method name="SSL_CTX_set_srp_username" result="int">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
      <arg name="name" type="char *" m68kreg="a1"/>
    </method>
    <method name="SSL_CTX_SRP_CTX_init" result="int">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
    </method>
    <method name="SRP_Calc_A_param" result="int">
      <arg name="s" type="SSL *" m68kreg="a0"/>
    </method>
    <method name="SRP_generate_server_master_secret" result="int" status="unimplemented">
      <arg name="s" type="SSL *" m68kreg="a0"/>
      <arg name="master_key" type="unsigned char *" m68kreg="a1"/>
    </method>
    <method name="SSL_CTX_SRP_CTX_free" result="int">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
    </method>
    <method name="SRP_generate_client_master_secret" result="int" status="unimplemented">
      <arg name="s" type="SSL *" m68kreg="a0"/>
      <arg name="master_key" type="unsigned char *" m68kreg="a1"/>
    </method>
    <method name="SSL_srp_server_param_with_username" result="int">
      <arg name="s" type="SSL *" m68kreg="a0"/>
      <arg name="ad" type="int *" m68kreg="a1"/>
    </method>
    <method name="SSL_SRP_CTX_free" result="int">
      <arg name="ctx" type="SSL *" m68kreg="a0"/>
    </method>
    <method name="SSL_set_debug" result="void">
      <arg name="s" type="SSL *" m68kreg="a0"/>
      <arg name="debug" type="int" m68kreg="d0"/>
    </method>
    <method name="SSL_SESSION_get0_peer" result="X509 *">
      <arg name="s" type="SSL_SESSION *" m68kreg="a0"/>
    </method>
    <method name="TLSv1_2_client_method" result="const SSL_METHOD *" status="unimplemented">
    </method>
    <method name="SSL_SESSION_set1_id_context" result="int">
      <arg name="s" type="SSL_SESSION *" m68kreg="a0"/>
      <arg name="sid_ctx" type="const unsigned char *" m68kreg="a1"/>
      <arg name="sid_ctx_len" type="unsigned int" m68kreg="d0"/>
    </method>
    <method name="TLSv1_2_server_method" result="const SSL_METHOD *" status="unimplemented">
    </method>
    <method name="SSL_cache_hit" result="int" status="unimplemented">
      <arg name="s" type="SSL *" m68kreg="a0"/>
    </method>
    <method name="SSL_set_state" result="void" status="unimplemented">
      <arg name="ssl" type="SSL *" m68kreg="a0"/>
      <arg name="state" type="int" m68kreg="d0"/>
    </method>
    <method name="SSL_CIPHER_get_id" result="uint32_t">
      <arg name="c" type="const SSL_CIPHER *" m68kreg="a0"/>
    </method>
    <method name="TLSv1_2_method" result="const SSL_METHOD *" status="unimplemented">
    </method>
    <method name="SSL_export_keying_material" result="int">
      <arg name="s" type="SSL *" m68kreg="a0"/>
      <arg name="out" type="unsigned char *" m68kreg="a1"/>
      <arg name="olen" type="size_t" m68kreg="d0"/>
      <arg name="label" type="const char *" m68kreg="a2"/>
      <arg name="llen" type="size_t" m68kreg="d1"/>
      <arg name="context" type="const unsigned char *" m68kreg="a3"/>
      <arg name="contextlen" type="size_t" m68kreg="d2"/>
      <arg name="use_context" type="int" m68kreg="d3"/>
    </method>
    <method name="SSL_set_tlsext_use_srtp" result="int">
      <arg name="ssl" type="SSL *" m68kreg="a0"/>
      <arg name="profiles" type="const char *" m68kreg="a1"/>
    </method>
    <method name="SSL_CTX_set_next_protos_advertised_cb" result="void">
      <arg name="s" type="SSL_CTX *" m68kreg="a0"/>
      <arg name="cb" type="SSL_CTX_npn_advertised_cb_func" m68kreg="a1"/>
      <arg name="arg" type="void *" m68kreg="a2"/>
    </method>
    <method name="SSL_get0_next_proto_negotiated" result="void">
      <arg name="s" type="const SSL *" m68kreg="a0"/>
      <arg name="data" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="unsigned *" m68kreg="a2"/>
    </method>
    <method name="SSL_get_selected_srtp_profile" result="SRTP_PROTECTION_PROFILE *">
      <arg name="s" type="SSL *" m68kreg="a0"/>
    </method>
    <method name="SSL_CTX_set_tlsext_use_srtp" result="int">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
      <arg name="profiles" type="const char *" m68kreg="a1"/>
    </method>
    <method name="SSL_select_next_proto" result="int">
      <arg name="out" type="unsigned char **" m68kreg="a0"/>
      <arg name="outlen" type="unsigned char *" m68kreg="a1"/>
      <arg name="in" type="const unsigned char *" m68kreg="a2"/>
      <arg name="inlen" type="unsigned int" m68kreg="d0"/>
      <arg name="client" type="const unsigned char *" m68kreg="a3"/>
      <arg name="client_len" type="unsigned int" m68kreg="d1"/>
    </method>
    <method name="SSL_get_srtp_profiles" result="STACK_OF(SRTP_PROTECTION_PROFILE) *">
      <arg name="s" type="SSL *" m68kreg="a0"/>
    </method>
    <method name="SSL_CTX_set_next_proto_select_cb" result="void">
      <arg name="s" type="SSL_CTX *" m68kreg="a0"/>
      <arg name="cb" type="SSL_CTX_npn_select_cb_func" m68kreg="a1"/>
      <arg name="arg" type="void *" m68kreg="a2"/>
    </method>
    <method name="SSL_SESSION_get_compress_id" result="unsigned int">
      <arg name="s" type="const SSL_SESSION *" m68kreg="a0"/>
    </method>
    <method name="SSL_CTX_set_tmp_ecdh_callback" result="void" status="unimplemented">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
      <arg name="ecdh" type="EC_KEY *(*)(SSL *ssl, int is_export, int keylength)" m68kreg="a1"/>
    </method>
    <method name="SSL_set_tmp_ecdh_callback" result="void" status="unimplemented">
      <arg name="ssl" type="SSL *" m68kreg="a0"/>
      <arg name="ecdh" type="EC_KEY *(*)(SSL *ssl, int is_export, int keylength)" m68kreg="a1"/>
    </method>
    <method name="SSL_SRP_CTX_init" result="int">
      <arg name="s" type="SSL *" m68kreg="a0"/>
    </method>
    <method name="ASN1_d2i_fp" result="void *" status="unimplemented">
      <arg name="xnew" type="void *(*)(void)" m68kreg="a0"/>
      <arg name="d2i" type="d2i_of_void *" m68kreg="a1"/>
      <arg name="in" type="FILE *" m68kreg="a2"/>
      <arg name="x" type="void **" m68kreg="a3"/>
    </method>
    <method name="ASN1_i2d_fp" result="int" status="unimplemented">
      <arg name="i2d" type="i2d_of_void *" m68kreg="a0"/>
      <arg name="out" type="FILE *" m68kreg="a1"/>
      <arg name="x" type="void *" m68kreg="a2"/>
    </method>
    <method name="BIO_new_fp" result="BIO *" status="unimplemented">
      <arg name="stream" type="FILE *" m68kreg="a0"/>
      <arg name="close_flag" type="int" m68kreg="a1"/>
    </method>
    <method name="BN_print_fp" result="int" status="unimplemented">
      <arg name="fp" type="FILE *" m68kreg="a0"/>
      <arg name="a" type="const BIGNUM *" m68kreg="a1"/>
    </method>
    <method name="CRYPTO_mem_leaks_fp" result="int" status="unimplemented">
      <arg name="fp" type="FILE *" m68kreg="a0"/>
    </method>
    <method name="DHparams_print_fp" result="int" status="unimplemented">
      <arg name="fp" type="FILE *" m68kreg="a0"/>
      <arg name="x" type="const DH *" m68kreg="a1"/>
    </method>
    <method name="DSA_print_fp" result="int" status="unimplemented">
      <arg name="bp" type="FILE *" m68kreg="a0"/>
      <arg name="x" type="const DSA *" m68kreg="a1"/>
      <arg name="off" type="int" m68kreg="d0"/>
    </method>
    <method name="DSAparams_print_fp" result="int" status="unimplemented">
      <arg name="fp" type="FILE *" m68kreg="a0"/>
      <arg name="x" type="const DSA *" m68kreg="a1"/>
    </method>
    <method name="ERR_print_errors_fp" result="void" status="unimplemented">
      <arg name="fp" type="FILE *" m68kreg="a0"/>
    </method>
    <method name="PEM_read_DHparams" result="DH *" status="unimplemented">
      <arg name="fp" type="FILE *" m68kreg="a0"/>
      <arg name="x" type="DH **" m68kreg="a1"/>
      <arg name="cb" type="pem_password_cb *" m68kreg="a2"/>
      <arg name="u" type="void *" m68kreg="a3"/>
    </method>
    <method name="PEM_read_DSAPrivateKey" result="DSA *" status="unimplemented">
      <arg name="fp" type="FILE *" m68kreg="a0"/>
      <arg name="x" type="DSA **" m68kreg="a1"/>
      <arg name="cb" type="pem_password_cb *" m68kreg="a2"/>
      <arg name="u" type="void *" m68kreg="a3"/>
    </method>
    <method name="PEM_read_DSAparams" result="DSA *" status="unimplemented">
      <arg name="fp" type="FILE *" m68kreg="a0"/>
      <arg name="x" type="DSA **" m68kreg="a1"/>
      <arg name="cb" type="pem_password_cb *" m68kreg="a2"/>
      <arg name="u" type="void *" m68kreg="a3"/>
    </method>
    <method name="PEM_write_DHparams" result="int" status="unimplemented">
      <arg name="fp" type="FILE *" m68kreg="a0"/>
      <arg name="x" type="DH *" m68kreg="a1"/>
    </method>
    <method name="PEM_write_DSAPrivateKey" result="int" status="unimplemented">
      <arg name="fp" type="FILE *" m68kreg="a0"/>
      <arg name="x" type="DSA *" m68kreg="a1"/>
      <arg name="enc" type="const EVP_CIPHER *" m68kreg="a2"/>
      <arg name="kstr" type="unsigned char *" m68kreg="a3"/>
      <arg name="klen" type="int" m68kreg="d0"/>
      <arg name="cb" type="pem_password_cb *" m68kreg="d1"/>
      <arg name="u" type="void *" m68kreg="d2"/>
    </method>
    <method name="PEM_write_DSAparams" result="int" status="unimplemented">
      <arg name="fp" type="FILE *" m68kreg="a0"/>
      <arg name="x" type="DSA *" m68kreg="a1"/>
    </method>
    <method name="RSA_print_fp" result="int" status="unimplemented">
      <arg name="fp" type="FILE *" m68kreg="a0"/>
      <arg name="r" type="const RSA *" m68kreg="a1"/>
      <arg name="offset" type="int" m68kreg="d0"/>
    </method>
    <method name="X509_REQ_print_fp" result="int" status="unimplemented">
      <arg name="bp" type="FILE *" m68kreg="a0"/>
      <arg name="req" type="X509_REQ *" m68kreg="a1"/>
    </method>
    <method name="X509_print_fp" result="int" status="unimplemented">
      <arg name="bp" type="FILE *" m68kreg="a0"/>
      <arg name="x" type="X509 *" m68kreg="a1"/>
    </method>
    <method name="d2i_DSAPrivateKey_fp" result="DSA *" status="unimplemented">
      <arg name="fp" type="FILE *" m68kreg="a0"/>
      <arg name="dsa" type="DSA **" m68kreg="a1"/>
    </method>
    <method name="d2i_PKCS7_fp" result="PKCS7 *" status="unimplemented">
      <arg name="fp" type="FILE *" m68kreg="a0"/>
      <arg name="p7" type="PKCS7 **" m68kreg="a1"/>
    </method>
    <method name="d2i_RSAPrivateKey_fp" result="RSA *" status="unimplemented">
      <arg name="fp" type="FILE *" m68kreg="a0"/>
      <arg name="rsa" type="RSA **" m68kreg="a1"/>
    </method>
    <method name="d2i_X509_CRL_fp" result="X509_CRL *" status="unimplemented">
      <arg name="fp" type="FILE *" m68kreg="a0"/>
      <arg name="crl" type="X509_CRL **" m68kreg="a1"/>
    </method>
    <method name="d2i_X509_REQ_fp" result="X509_REQ *" status="unimplemented">
      <arg name="fp" type="FILE *" m68kreg="a0"/>
      <arg name="req" type="X509_REQ **" m68kreg="a1"/>
    </method>
    <method name="d2i_X509_fp" result="X509 *" status="unimplemented">
      <arg name="fp" type="FILE *" m68kreg="a0"/>
      <arg name="x509" type="X509 **" m68kreg="a1"/>
    </method>
    <method name="i2d_DSAPrivateKey_fp" result="int" status="unimplemented">
      <arg name="fp" type="FILE *" m68kreg="a0"/>
      <arg name="dsa" type="DSA *" m68kreg="a1"/>
    </method>
    <method name="i2d_PKCS7_fp" result="int" status="unimplemented">
      <arg name="fp" type="FILE *" m68kreg="a0"/>
      <arg name="p7" type="PKCS7 *" m68kreg="a1"/>
    </method>
    <method name="i2d_RSAPrivateKey_fp" result="int" status="unimplemented">
      <arg name="fp" type="FILE *" m68kreg="a0"/>
      <arg name="rsa" type="RSA *" m68kreg="a1"/>
    </method>
    <method name="i2d_X509_CRL_fp" result="int" status="unimplemented">
      <arg name="fp" type="FILE *" m68kreg="a0"/>
      <arg name="crl" type="X509_CRL *" m68kreg="a1"/>
    </method>
    <method name="i2d_X509_REQ_fp" result="int" status="unimplemented">
      <arg name="fp" type="FILE *" m68kreg="a0"/>
      <arg name="req" type="X509_REQ *" m68kreg="a1"/>
    </method>
    <method name="i2d_X509_fp" result="int" status="unimplemented">
      <arg name="fp" type="FILE *" m68kreg="a0"/>
      <arg name="x509" type="X509 *" m68kreg="a1"/>
    </method>
    <method name="OPENSSL_LH_node_stats" result="void" status="unimplemented">
      <arg name="lh" type="const OPENSSL_LHASH *" m68kreg="a0"/>
      <arg name="fp" type="FILE *" m68kreg="a1"/>
    </method>
    <method name="OPENSSL_LH_node_usage_stats" result="void" status="unimplemented">
      <arg name="lh" type="const OPENSSL_LHASH *" m68kreg="a0"/>
      <arg name="fp" type="FILE *" m68kreg="a1"/>
    </method>
    <method name="OPENSSL_LH_stats" result="void" status="unimplemented">
      <arg name="lh" type="const OPENSSL_LHASH *" m68kreg="a0"/>
      <arg namea="fp" type="FILE *" m68kreg="a1"/>
    </method>
    <method name="d2i_RSAPublicKey_fp" result="RSA *" status="unimplemented">
      <arg name="fp" type="FILE *" m68kreg="a0"/>
      <arg name="rsa" type="RSA **" m68kreg="a1"/>
    </method>
    <method name="i2d_RSAPublicKey_fp" result="int" status="unimplemented">
      <arg name="fp" type="FILE *" m68kreg="a0"/>
      <arg name="rsa" type="RSA *" m68kreg="a1"/>
    </method>
    <method name="X509_CRL_print_fp" result="int" status="unimplemented">
      <arg name="fp" type="FILE *" m68kreg="a0"/>
      <arg name="x" type="X509_CRL *" m68kreg="a1"/>
    </method>
    <method name="i2d_PKCS8_fp" result="int" status="unimplemented">
      <arg name="fp" type="FILE *" m68kreg="a0"/>
      <arg name="p8" type="X509_SIG *" m68kreg="a1"/>
    </method>
    <method name="d2i_PKCS8_PRIV_KEY_INFO_fp" result="PKCS8_PRIV_KEY_INFO *" status="unimplemented">
      <arg name="fp" type="FILE *" m68kreg="a0"/>
      <arg name="p8inf" type="PKCS8_PRIV_KEY_INFO **" m68kreg="a1"/>
    </method>
    <method name="d2i_PKCS8_fp" result="X509_SIG *" status="unimplemented">
      <arg name="fp" type="FILE *" m68kreg="a0"/>
      <arg name="p8" type="X509_SIG **" m68kreg="a1"/>
    </method>
    <method name="i2d_PKCS8_PRIV_KEY_INFO_fp" result="int" status="unimplemented">
      <arg name="fp" type="FILE *" m68kreg="a0"/>
      <arg name="p8inf" type="PKCS8_PRIV_KEY_INFO *" m68kreg="a1"/>
    </method>
    <method name="CONF_load_fp" result="LHASH_OF(CONF_VALUE) *" status="unimplemented">
      <arg name="conf" type="LHASH_OF(CONF_VALUE) *" m68kreg="a0"/>
      <arg name="fp" type="FILE *" m68kreg="a1"/>
      <arg name="eline" type="long *" m68kreg="a2"/>
    </method>
    <method name="d2i_RSA_PUBKEY_fp" result="RSA *" status="unimplemented">
      <arg name="fp" type="FILE *" m68kreg="a0"/>
      <arg name="rsa" type="RSA **" m68kreg="a1"/>
    </method>
    <method name="i2d_DSA_PUBKEY_fp" result="int" status="unimplemented">
      <arg name="fp" type="FILE *" m68kreg="a0"/>
      <arg name="dsa" type="DSA *" m68kreg="a1"/>
    </method>
    <method name="PEM_read_DSA_PUBKEY" result="DSA *" status="unimplemented">
      <arg name="fp" type="FILE *" m68kreg="a0"/>
      <arg name="x" type="DSA **" m68kreg="a1"/>
      <arg name="cb" type="pem_password_cb *" m68kreg="a2"/>
      <arg name="u" type="void *" m68kreg="a3"/>
    </method>
    <method name="d2i_DSA_PUBKEY_fp" result="DSA *" status="unimplemented">
      <arg name="fp" type="FILE *" m68kreg="a0"/>
      <arg name="dsa" type="DSA **" m68kreg="a1"/>
    </method>
    <method name="PEM_write_DSA_PUBKEY" result="int" status="unimplemented">
      <arg name="fp" type="FILE *" m68kreg="a0"/>
      <arg name="x" type="DSA *" m68kreg="a1"/>
    </method>
    <method name="i2d_RSA_PUBKEY_fp" result="int" status="unimplemented">
      <arg name="fp" type="FILE *" m68kreg="a0"/>
      <arg name="rsa" type="RSA *" m68kreg="a1"/>
    </method>
    <method name="i2d_PKCS8PrivateKeyInfo_fp" result="int" status="unimplemented">
      <arg name="fp" type="FILE *" m68kreg="a0"/>
      <arg name="key" type="EVP_PKEY *" m68kreg="a1"/>
    </method>
    <method name="i2d_PrivateKey_fp" result="int" status="unimplemented">
      <arg name="fp" type="FILE *" m68kreg="a0"/>
      <arg name="pkey" type="EVP_PKEY *" m68kreg="a1"/>
    </method>
    <method name="d2i_PrivateKey_fp" result="EVP_PKEY *" status="unimplemented">
      <arg name="fp" type="FILE *" m68kreg="a0"/>
      <arg name="a" type="EVP_PKEY **" m68kreg="a1"/>
    </method>
    <method name="NCONF_load_fp" result="int" status="unimplemented">
      <arg name="conf" type="CONF *" m68kreg="a0"/>
      <arg name="fp" type="FILE *" m68kreg="a1"/>
      <arg name="eline" type="long *" m68kreg="a2"/>
    </method>
    <method name="X509_NAME_print_ex_fp" result="int" status="unimplemented">
      <arg name="fp" type="FILE *" m68kreg="a0"/>
      <arg name="nm" type="const X509_NAME *" m68kreg="a1"/>
      <arg name="indent" type="int" m68kreg="d0"/>
      <arg name="flags" type="unsigned long" m68kreg="d1"/>
    </method>
    <method name="ASN1_STRING_print_ex_fp" result="int" status="unimplemented">
      <arg name="fp" type="FILE *" m68kreg="a0"/>
      <arg name="str" type="const ASN1_STRING *" m68kreg="a1"/>
      <arg name="flags" type="unsigned long" m68kreg="d0"/>
    </method>
    <method name="i2d_PUBKEY_fp" result="int" status="unimplemented">
      <arg name="fp" type="FILE *" m68kreg="a0"/>
      <arg name="pkey" type="EVP_PKEY *" m68kreg="a1"/>
    </method>
    <method name="d2i_PUBKEY_fp" result="EVP_PKEY *" status="unimplemented">
      <arg name="fp" type="FILE *" m68kreg="a0"/>
      <arg name="a" type="EVP_PKEY **" m68kreg="a1"/>
    </method>
    <method name="ERR_load_ENGINE_strings" result="int">
    </method>
    <method name="ENGINE_set_DSA" result="int">
      <arg name="e" type="ENGINE *" m68kreg="a0"/>
      <arg name="dsa_meth" type="const DSA_METHOD *" m68kreg="a1"/>
    </method>
    <method name="ENGINE_get_finish_function" result="ENGINE_GEN_INT_FUNC_PTR">
      <arg name="e" type="const ENGINE *" m68kreg="a0"/>
    </method>
    <method name="ENGINE_get_default_RSA" result="ENGINE *">
    </method>
    <method name="ENGINE_set_DH" result="int">
      <arg name="e" type="ENGINE *" m68kreg="a0"/>
      <arg name="dh_meth" type="const DH_METHOD *" m68kreg="a1"/>
    </method>
    <method name="ENGINE_get_init_function" result="ENGINE_GEN_INT_FUNC_PTR">
      <arg name="e" type="const ENGINE *" m68kreg="a0"/>
    </method>
    <method name="ENGINE_set_init_function" result="int">
      <arg name="e" type="ENGINE *" m68kreg="a0"/>
      <arg name="init_f" type="ENGINE_GEN_INT_FUNC_PTR" m68kreg="a1"/>
    </method>
    <method name="ENGINE_set_default_DSA" result="int">
      <arg name="e" type="ENGINE *" m68kreg="a0"/>
    </method>
    <method name="ENGINE_get_last" result="ENGINE *">
    </method>
    <method name="ENGINE_get_prev" result="ENGINE *">
      <arg name="e" type="ENGINE *" m68kreg="a0"/>
    </method>
    <method name="ENGINE_get_default_DH" result="ENGINE *">
    </method>
    <method name="ENGINE_set_finish_function" result="int">
      <arg name="e" type="ENGINE *" m68kreg="a0"/>
      <arg name="finish_f" type="ENGINE_GEN_INT_FUNC_PTR" m68kreg="a1"/>
    </method>
    <method name="ENGINE_set_RSA" result="int">
      <arg name="e" type="ENGINE *" m68kreg="a0"/>
      <arg name="rsa_meth" type="const RSA_METHOD *" m68kreg="a1"/>
    </method>
    <method name="ENGINE_set_default_RAND" result="int">
      <arg name="e" type="ENGINE *" m68kreg="a0"/>
    </method>
    <method name="ENGINE_get_default_DSA" result="ENGINE *">
    </method>
    <method name="ENGINE_set_default_RSA" result="int">
      <arg name="e" type="ENGINE *" m68kreg="a0"/>
    </method>
    <method name="ENGINE_get_default_RAND" result="ENGINE *">
    </method>
    <method name="ENGINE_set_RAND" result="int">
      <arg name="e" type="ENGINE *" m68kreg="a0"/>
      <arg name="rand_meth" type="const RAND_METHOD *" m68kreg="a1"/>
    </method>
    <method name="ENGINE_set_default_DH" result="int">
      <arg name="e" type="ENGINE *" m68kreg="a0"/>
    </method>
    <method name="ENGINE_get_ctrl_function" result="ENGINE_CTRL_FUNC_PTR">
      <arg name="e" type="const ENGINE *" m68kreg="a0"/>
    </method>
    <method name="ENGINE_set_ctrl_function" result="int">
      <arg name="e" type="ENGINE *" m68kreg="a0"/>
      <arg name="ctrl_f" type="ENGINE_CTRL_FUNC_PTR" m68kreg="a1"/>
    </method>
    <method name="ENGINE_unregister_ciphers" result="void">
      <arg name="e" type="ENGINE *" m68kreg="a0"/>
    </method>
    <method name="ENGINE_unregister_RSA" result="void">
      <arg name="e" type="ENGINE *" m68kreg="a0"/>
    </method>
    <method name="ENGINE_register_all_RAND" result="void">
    </method>
    <method name="ENGINE_load_dynamic" result="void" status="unimplemented">
    </method>
    <method name="ENGINE_get_digest_engine" result="ENGINE *">
      <arg name="nid" type="int" m68kreg="d0"/>
    </method>
    <method name="ENGINE_register_DH" result="int">
      <arg name="e" type="ENGINE *" m68kreg="a0"/>
    </method>
    <method name="ENGINE_register_RAND" result="int">
      <arg name="e" type="ENGINE *" m68kreg="a0"/>
    </method>
    <method name="ENGINE_load_cryptodev" result="void" status="unimplemented">
    </method>
    <method name="ENGINE_register_ciphers" result="int">
      <arg name="e" type="ENGINE *" m68kreg="a0"/>
    </method>
    <method name="ENGINE_load_ubsec" result="void" status="unimplemented">
    </method>
    <method name="ENGINE_load_openssl" result="void" status="unimplemented">
    </method>
    <method name="ENGINE_get_cmd_defns" result="const ENGINE_CMD_DEFN *">
      <arg name="e" type="const ENGINE *" m68kreg="a0"/>
    </method>
    <method name="ENGINE_set_load_privkey_function" result="int">
      <arg name="e" type="ENGINE *" m68kreg="a0"/>
      <arg name="loadpriv_f" type="ENGINE_LOAD_KEY_PTR" m68kreg="a1"/>
    </method>
    <method name="ENGINE_set_default_digests" result="int">
      <arg name="e" type="ENGINE *" m68kreg="a0"/>
    </method>
    <method name="ENGINE_register_RSA" result="int">
      <arg name="e" type="ENGINE *" m68kreg="a0"/>
    </method>
    <method name="ENGINE_unregister_DSA" result="void">
      <arg name="e" type="ENGINE *" m68kreg="a0"/>
    </method>
    <method name="ENGINE_set_ciphers" result="int">
      <arg name="e" type="ENGINE *" m68kreg="a0"/>
      <arg name="f" type="ENGINE_CIPHERS_PTR" m68kreg="a1"/>
    </method>
    <method name="RAND_set_rand_engine" result="int">
      <arg name="engine" type="ENGINE *" m68kreg="a0"/>
    </method>
    <method name="ENGINE_get_digest" result="const EVP_MD *">
      <arg name="e" type="ENGINE *" m68kreg="a0"/>
      <arg name="nid" type="int" m68kreg="d0"/>
    </method>
    <method name="ENGINE_get_cipher" result="const EVP_CIPHER *">
      <arg name="e" type="ENGINE *" m68kreg="a0"/>
      <arg name="nid" type="int" m68kreg="d0"/>
    </method>
    <method name="ENGINE_cmd_is_executable" result="int">
      <arg name="e" type="ENGINE *" m68kreg="a0"/>
      <arg name="cmd" type="int" m68kreg="d0"/>
    </method>
    <method name="ENGINE_register_DSA" result="int">
      <arg name="e" type="ENGINE *" m68kreg="a0"/>
    </method>
    <method name="ENGINE_set_load_pubkey_function" result="int">
      <arg name="e" type="ENGINE *" m68kreg="a0"/>
      <arg name="loadpub_f" type="ENGINE_LOAD_KEY_PTR" m68kreg="a1"/>
    </method>
    <method name="ENGINE_get_load_pubkey_function" result="ENGINE_LOAD_KEY_PTR">
      <arg name="e" type="const ENGINE *" m68kreg="a0"/>
    </method>
    <method name="ENGINE_register_all_RSA" result="void">
    </method>
    <method name="ENGINE_unregister_digests" result="void">
      <arg name="e" type="ENGINE *" m68kreg="a0"/>
    </method>
    <method name="ENGINE_get_ex_new_index" result="int" status="unimplemented">
      <arg name="argl" type="long" m68kreg="d0"/>
      <arg name="argp" type="void *" m68kreg="a0"/>
      <arg name="new_func" type="CRYPTO_EX_new *" m68kreg="a1"/>
      <arg name="dep_func" type="CRYPTO_EX_dup *" m68kreg="a2"/>
      <arg name="free_func" type="CRYPTO_EX_free *" m68kreg="a3"/>
    </method>
    <method name="ENGINE_get_ex_data" result="void *">
      <arg name="e" type="const ENGINE *" m68kreg="a0"/>
      <arg name="idx" type="int" m68kreg="d0"/>
    </method>
    <method name="ASN1_item_d2i_fp" result="void *" status="unimplemented">
      <arg name="it" type="const ASN1_ITEM *" m68kreg="a0"/>
      <arg name="in" type="FILE *" m68kreg="a1"/>
      <arg name="x" type="void *" m68kreg="a2"/>
    </method>
    <method name="ENGINE_set_cmd_defns" result="int">
      <arg name="e" type="ENGINE *" m68kreg="a0"/>
      <arg name="defns" type="const ENGINE_CMD_DEFN *" m68kreg="a1"/>
    </method>
    <method name="ENGINE_register_digests" result="int">
      <arg name="e" type="ENGINE *" m68kreg="a0"/>
    </method>
    <method name="ENGINE_register_all_DH" result="void">
    </method>
    <method name="ENGINE_get_flags" result="int">
      <arg name="e" type="const ENGINE *" m68kreg="a0"/>
    </method>
    <method name="ENGINE_unregister_DH" result="void">
      <arg name="e" type="ENGINE *" m68kreg="a0"/>
    </method>
    <method name="ENGINE_register_all_DSA" result="void">
    </method>
    <method name="ENGINE_set_digests" result="int">
      <arg name="e" type="ENGINE *" m68kreg="a0"/>
      <arg name="f" type="ENGINE_DIGESTS_PTR" m68kreg="a1"/>
    </method>
    <method name="ENGINE_register_complete" result="int">
      <arg name="e" type="ENGINE *" m68kreg="a0"/>
    </method>
    <method name="ENGINE_set_ex_data" result="int">
      <arg name="e" type="ENGINE *" m68kreg="a0"/>
      <arg name="idx" type="int" m68kreg="d0"/>
      <arg name="arg" type="void *" m68kreg="a1"/>
    </method>
    <method name="ENGINE_set_destroy_function" result="int">
      <arg name="e" type="ENGINE *" m68kreg="a0"/>
      <arg name="destroy_f" type="ENGINE_GEN_INT_FUNC_PTR" m68kreg="a1"/>
    </method>
    <method name="ENGINE_get_cipher_engine" result="ENGINE *">
      <arg name="nid" type="int" m68kreg="d0"/>
    </method>
    <method name="X509_print_ex_fp" result="int" status="unimplemented">
      <arg name="bp" type="FILE *" m68kreg="a0"/>
      <arg name="x" type="X509 *" m68kreg="a1"/>
      <arg name="nmflag" type="unsigned long" m68kreg="d0"/>
      <arg name="cflag" type="unsigned long" m68kreg="d1"/>
    </method>
    <method name="ENGINE_load_cswift" result="void" status="unimplemented">
    </method>
    <method name="ENGINE_set_default_ciphers" result="int">
      <arg name="e" type="ENGINE *" m68kreg="a0"/>
    </method>
    <method name="ENGINE_unregister_RAND" result="void">
      <arg name="e" type="ENGINE *" m68kreg="a0"/>
    </method>
    <method name="ENGINE_load_nuron" result="void" status="unimplemented">
    </method>
    <method name="ENGINE_set_table_flags" result="void">
      <arg name="flags" type="unsigned int" m68kreg="d0"/>
    </method>
    <method name="ENGINE_load_chil" result="void" status="unimplemented">
    </method>
    <method name="ENGINE_get_destroy_function" result="ENGINE_GEN_INT_FUNC_PTR">
      <arg name="e" type="const ENGINE *" m68kreg="a0"/>
    </method>
    <method name="ASN1_item_i2d_fp" result="int" status="unimplemented">
      <arg name="it" type="const ASN1_ITEM *" m68kreg="a0"/>
      <arg name="out" type="FILE *" m68kreg="a1"/>
      <arg name="x" type="void *" m68kreg="a2"/>
    </method>
    <method name="ENGINE_load_atalla" result="void" status="unimplemented">
    </method>
    <method name="ENGINE_get_table_flags" result="unsigned int">
    </method>
    <method name="ENGINE_set_flags" result="int">
      <arg name="e" type="ENGINE *" m68kreg="a0"/>
      <arg name="flags" type="int" m68kreg="d0"/>
    </method>
    <method name="ENGINE_get_load_privkey_function" result="ENGINE_LOAD_KEY_PTR">
      <arg name="e" type="const ENGINE *" m68kreg="a0"/>
    </method>
    <method name="ENGINE_set_default_string" result="int">
      <arg name="e" type="ENGINE *" m68kreg="a0"/>
      <arg name="def_list" type="const char *" m68kreg="a1"/>
    </method>
    <method name="ENGINE_add_conf_module" result="void">
    </method>
    <method name="ENGINE_load_aep" result="void" status="unimplemented">
    </method>
    <method name="ENGINE_load_sureware" result="void" status="unimplemented">
    </method>
    <method name="ENGINE_load_4758cca" result="void" status="unimplemented">
    </method>
    <method name="ENGINE_up_ref" result="int">
      <arg name="e" type="ENGINE *" m68kreg="a0"/>
    </method>
    <method name="ENGINE_set_STORE" result="int" status="unimplemented">
      <arg name="e" type="ENGINE *" m68kreg="a0"/>
      <arg name="store_meth" type="const STORE_METHOD *" m68kreg="a1"/>
    </method>
    <method name="ENGINE_register_ECDSA" result="int" status="unimplemented">
      <arg name="e" type="ENGINE *" m68kreg="a0"/>
    </method>
    <method name="BN_BLINDING_get_thread_id" result="unsigned long" status="unimplemented">
      <arg name="b" type="const BN_BLINDING *" m68kreg="a0"/>
    </method>
    <method name="EC_GROUP_get_trinomial_basis" result="int">
      <arg name="eg" type="const EC_GROUP *" m68kreg="a0"/>
      <arg name="k" type="unsigned int *" m68kreg="a1"/>
    </method>
    <method name="ECDH_get_default_method" result="const ECDH_METHOD *" status="unimplemented">
    </method>
    <method name="ENGINE_register_ECDH" result="int" status="unimplemented">
      <arg name="e" type="ENGINE *" m68kreg="a0"/>
    </method>
    <method name="SHA512_Update" result="int">
      <arg name="c" type="SHA512_CTX *" m68kreg="a0"/>
      <arg name="data" type="const void *" m68kreg="a1"/>
      <arg name="len" type="size_t" m68kreg="d0"/>
    </method>
    <method name="i2d_ECPrivateKey" result="int">
      <arg name="key" type="EC_KEY *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="BN_GF2m_mod_exp_arr" result="int">
      <arg name="r" type="BIGNUM *" m68kreg="a0"/>
      <arg name="a" type="const BIGNUM *" m68kreg="a1"/>
      <arg name="b" type="const BIGNUM *" m68kreg="a2"/>
      <arg name="p" type="const int *" m68kreg="a3"/>
      <arg name="ctx" type="BN_CTX *" m68kreg="d0"/>
    </method>
    <method name="BN_GF2m_mod_mul_arr" result="int">
      <arg name="r" type="BIGNUM *" m68kreg="a0"/>
      <arg name="a" type="const BIGNUM *" m68kreg="a1"/>
      <arg name="b" type="const BIGNUM *" m68kreg="a2"/>
      <arg name="p" type="const int *" m68kreg="a3"/>
      <arg name="ctx" type="BN_CTX *" m68kreg="d0"/>
    </method>
    <method name="o2i_ECPublicKey" result="EC_KEY *">
      <arg name="key" type="EC_KEY **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="EC_KEY_copy" result="EC_KEY *">
      <arg name="dst" type="EC_KEY *" m68kreg="a0"/>
      <arg name="src" type="const EC_KEY *" m68kreg="a1"/>
    </method>
    <method name="BIO_dump_fp" result="int" status="unimplemented">
      <arg name="fp" type="FILE *" m68kreg="a0"/>
      <arg name="s" type="const char *" m68kreg="a1"/>
      <arg name="len" type="int" m68kreg="d0"/>
    </method>
    <method name="EC_GROUP_check_discriminant" result="int">
      <arg name="group" type="const EC_GROUP *" m68kreg="a0"/>
      <arg name="ctx" type="BN_CTX *" m68kreg="a1"/>
    </method>
    <method name="i2o_ECPublicKey" result="int">
      <arg name="key" type="const EC_KEY *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="EC_GROUP_new_curve_GF2m" result="EC_GROUP *">
      <arg name="p" type="const BIGNUM *" m68kreg="a0"/>
      <arg name="a" type="const BIGNUM *" m68kreg="a1"/>
      <arg name="b" type="const BIGNUM *" m68kreg="a2"/>
      <arg name="ctx" type="BN_CTX *" m68kreg="a3"/>
    </method>
    <method name="ENGINE_unregister_STORE" result="void" status="unimplemented">
      <arg name="e" type="ENGINE *" m68kreg="a0"/>
    </method>
    <method name="EVP_PKEY_get1_EC_KEY" result="struct ec_key_st *">
      <arg name="pkey" type="EVP_PKEY *" m68kreg="a0"/>
    </method>
    <method name="ENGINE_get_default_ECDH" result="ENGINE *" status="unimplemented">
    </method>
    <method name="EC_KEY_get_conv_form" result="point_conversion_form_t">
      <arg name="key" type="const EC_KEY *" m68kreg="a0"/>
    </method>
    <method name="ENGINE_get_static_state" result="void *">
    </method>
    <method name="ECDSA_SIG_new" result="ECDSA_SIG *">
    </method>
    <method name="EC_POINT_bn2point" result="EC_POINT *">
      <arg name="g" type="const EC_GROUP *" m68kreg="a0"/>
      <arg name="b" type="const BIGNUM *" m68kreg="a1"/>
      <arg name="p" type="EC_POINT *" m68kreg="a2"/>
      <arg name="ctx" type="BN_CTX *" m68kreg="a3"/>
    </method>
    <method name="EC_KEY_get_key_method_data" result="void *" status="unimplemented">
      <arg name="key" type="EC_KEY *" m68kreg="a0"/>
      <arg name="dup_func" type="void *(*)(void *)" m68kreg="a1"/>
      <arg name="free_func" type="void (*)(void *)" m68kreg="a2"/>
      <arg name="clear_free_func" type="void (*)(void *)" m68kreg="a3"/>
    </method>
    <method name="ECDSA_sign_ex" result="int">
      <arg name="type" type="int" m68kreg="d0"/>
      <arg name="dgst" type="const unsigned char *" m68kreg="a0"/>
      <arg name="dgstlen" type="int" m68kreg="d1"/>
      <arg name="sig" type="unsigned char *" m68kreg="a1"/>
      <arg name="siglen" type="unsigned int *" m68kreg="a2"/>
      <arg name="kinv" type="const BIGNUM *" m68kreg="a3"/>
      <arg name="rp" type="const BIGNUM *" m68kreg="d2"/>
      <arg name="eckey" type="EC_KEY *" m68kreg="d3"/>
    </method>
    <method name="EC_GROUP_get_pentanomial_basis" result="int">
      <arg name="ecgroup" type="const EC_GROUP *" m68kreg="a0"/>
      <arg name="k1" type="unsigned int *" m68kreg="a1"/>
      <arg name="k2" type="unsigned int *" m68kreg="a2"/>
      <arg name="k3" type="unsigned int *" m68kreg="a3"/>
    </method>
    <method name="ECDSA_sign_setup" result="int">
      <arg name="eckey" type="EC_KEY *" m68kreg="a0"/>
      <arg name="ctx" type="BN_CTX *" m68kreg="a1"/>
      <arg name="kinv" type="BIGNUM **" m68kreg="a2"/>
      <arg name="rp" type="BIGNUM **" m68kreg="a3"/>
    </method>
    <method name="BN_GF2m_mod_solve_quad_arr" result="int">
      <arg name="r" type="BIGNUM *" m68kreg="a0"/>
      <arg name="a" type="const BIGNUM *" m68kreg="a1"/>
      <arg name="p" type="const int *" m68kreg="a2"/>
      <arg name="ctx" type="BN_CTX *" m68kreg="a3"/>
    </method>
    <method name="EC_KEY_up_ref" result="int">
      <arg name="key" type="EC_KEY *" m68kreg="a0"/>
    </method>
    <method name="d2i_EC_PUBKEY" result="EC_KEY *">
      <arg name="a" type="EC_KEY **" m68kreg="a0"/>
      <arg name="pp" type="const unsigned char **" m68kreg="a1"/>
      <arg name="length" type="long" m68kreg="a2"/>
    </method>
    <method name="EC_GROUP_have_precompute_mult" result="int">
      <arg name="group" type="const EC_GROUP *" m68kreg="a0"/>
    </method>
    <method name="EC_KEY_print_fp" result="int" status="unimplemented">
      <arg name="fp" type="FILE *" m68kreg="a0"/>
      <arg name="key" type="const EC_KEY *" m68kreg="a1"/>
      <arg name="off" type="int" m68kreg="a2"/>
    </method>
    <method name="BN_GF2m_mod_arr" result="int">
      <arg name="r" type="BIGNUM *" m68kreg="a0"/>
      <arg name="a" type="const BIGNUM *" m68kreg="a1"/>
      <arg name="p" type="const int *" m68kreg="a2"/>
    </method>
    <method name="ECDH_get_ex_data" result="void *" status="unimplemented">
      <arg name="d" type="EC_KEY *" m68kreg="a0"/>
      <arg name="idx" type="int" m68kreg="d0"/>
    </method>
    <method name="ENGINE_unregister_ECDH" result="void" status="unimplemented">
      <arg name="e" type="ENGINE *" m68kreg="a0"/>
    </method>
    <method name="ECDH_OpenSSL" result="const ECDH_METHOD *" status="unimplemented">
    </method>
    <method name="EC_POINT_dup" result="EC_POINT *">
      <arg name="src" type="const EC_POINT *" m68kreg="a0"/>
      <arg name="group" type="const EC_GROUP *" m68kreg="a1"/>
    </method>
    <method name="EVP_PKEY_set1_EC_KEY" result="int">
      <arg name="pkey" type="EVP_PKEY *" m68kreg="a0"/>
      <arg name="key" type="struct ec_key_st *" m68kreg="a1"/>
    </method>
    <method name="BN_GF2m_mod_sqrt_arr" result="int">
      <arg name="r" type="BIGNUM *" m68kreg="a0"/>
      <arg name="a" type="const BIGNUM *" m68kreg="a1"/>
      <arg name="p" type="const int *" m68kreg="a2"/>
      <arg name="ctx" type="BN_CTX *" m68kreg="a3"/>
    </method>
    <method name="ECPKParameters_print_fp" result="int" status="unimplemented">
      <arg name="fp" type="FILE *" m68kreg="a0"/>
      <arg name="x" type="const EC_GROUP *" m68kreg="a1"/>
      <arg name="off" type="int" m68kreg="d0"/>
    </method>
    <method name="EC_KEY_set_private_key" result="int">
      <arg name="key" type="EC_KEY *" m68kreg="a0"/>
      <arg name="prv" type="const BIGNUM *" m68kreg="a1"/>
    </method>
    <method name="BN_GF2m_poly2arr" result="int">
      <arg name="a" type="const BIGNUM *" m68kreg="a0"/>
      <arg name="p" type="int *" m68kreg="a1"/>
      <arg name="max" type="int" m68kreg="d0"/>
    </method>
    <method name="i2d_ECParameters" result="int">
      <arg name="key" type="EC_KEY *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="ENGINE_set_ECDH" result="int" status="unimplemented">
      <arg name="e" type="ENGINE *" m68kreg="a0"/>
      <arg name="ecdh_meth" type="const ECDH_METHOD *" m68kreg="a1"/>
    </method>
    <method name="SHA256_Init" result="int">
      <arg name="c" type="SHA256_CTX *" m68kreg="a0"/>
    </method>
    <method name="ECDSA_get_ex_data" result="void *" status="unimplemented">
      <arg name="d" type="EC_KEY *" m68kreg="a0"/>
      <arg name="idx" type="int" m68kreg="d0"/>
    </method>
    <method name="SHA224" result="unsigned char *">
      <arg name="d" type="const unsigned char *" m68kreg="a0"/>
      <arg name="n" type="size_t" m68kreg="d0"/>
      <arg name="md" type="unsigned char *" m68kreg="a1"/>
    </method>
    <method name="BIO_dump_indent_fp" result="int" status="unimplemented">
      <arg name="fp" type="FILE *" m68kreg="a0"/>
      <arg name="s" type="const char *" m68kreg="a1"/>
      <arg name="len" type="int" m68kreg="d0"/>
      <arg name="indent" type="int" m68kreg="d1"/>
    </method>
    <method name="EC_GROUP_get_seed_len" result="size_t">
      <arg name="ecgroup" type="const EC_GROUP *" m68kreg="a0"/>
    </method>
    <method name="i2d_EC_PUBKEY" result="int">
      <arg name="a" type="EC_KEY *" m68kreg="a0"/>
      <arg name="pp" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="ECDSA_get_default_method" result="const ECDSA_METHOD *" status="unimplemented">
    </method>
    <method name="EC_GFp_nist_method" result="const EC_METHOD *">
    </method>
    <method name="ENGINE_load_padlock" result="void" status="unimplemented">
    </method>
    <method name="EC_GROUP_set_curve_name" result="void">
      <arg name="group" type="EC_GROUP *" m68kreg="a0"/>
      <arg name="nid" type="int" m68kreg="d0"/>
    </method>
    <method name="BN_GF2m_mod_sqr_arr" result="int">
      <arg name="r" type="BIGNUM *" m68kreg="a0"/>
      <arg name="a" type="const BIGNUM *" m68kreg="a1"/>
      <arg name="p" type="const int *" m68kreg="a2"/>
      <arg name="ctx" type="BN_CTX *" m68kreg="a3"/>
    </method>
    <method name="BIO_s_datagram" result="const BIO_METHOD *">
    </method>
    <method name="ENGINE_set_default_ECDSA" result="int" status="unimplemented">
      <arg name="e" type="ENGINE *" m68kreg="a0"/>
    </method>
    <method name="ECDH_set_default_method" result="void" status="unimplemented">
      <arg name="method" type="const ECDH_METHOD *" m68kreg="a0"/>
    </method>
    <method name="SHA384_Update" result="int">
      <arg name="c" type="SHA512_CTX *" m68kreg="a0"/>
      <arg name="data" type="const void *" m68kreg="a1"/>
      <arg name="len" type="size_t" m68kreg="d0"/>
    </method>
    <method name="EC_KEY_insert_key_method_data" result="void *" status="unimplemented">
      <arg name="key" type="EC_KEY *" m68kreg="a0"/>
      <arg name="data" type="void *" m68kreg="a1"/>
      <arg name="dup_func" type="void *(*)(void *)" m68kreg="a2"/>
      <arg name="free_func" type="void (*)(void *)" m68kreg="a3"/>
      <arg name="clear_free_func" type="void (*)(void *)" m68kreg="d0"/>
    </method>
    <method name="SHA224_Final" result="int">
      <arg name="md" type="unsigned char *" m68kreg="a0"/>
      <arg name="c" type="SHA256_CTX *" m68kreg="a1"/>
    </method>
    <method name="SHA224_Update" result="int">
      <arg name="c" type="SHA256_CTX *" m68kreg="a0"/>
      <arg name="data" type="const void *" m68kreg="a1"/>
      <arg name="len" type="size_t" m68kreg="d0"/>
    </method>
    <method name="d2i_ECPrivateKey" result="EC_KEY *">
      <arg name="key" type="EC_KEY **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="ENGINE_register_all_STORE" result="void" status="unimplemented">
    </method>
    <method name="SHA512_Final" result="int">
      <arg name="md" type="unsigned char *" m68kreg="a0"/>
      <arg name="c" type="SHA512_CTX *" m68kreg="a1"/>
    </method>
    <method name="EC_GROUP_get_asn1_flag" result="int">
      <arg name="group" type="const EC_GROUP *" m68kreg="a0"/>
    </method>
    <method name="ECDH_get_ex_new_index" result="int" status="unimplemented">
      <arg name="argl" type="long" m68kreg="d0"/>
      <arg name="argp" type="void *" m68kreg="a0"/>
      <arg name="new_func" type="CRYPTO_EX_new *" m68kreg="a1"/>
      <arg name="dup_func" type="CRYPTO_EX_dup *" m68kreg="a2"/>
      <arg name="free_func" type="CRYPTO_EX_free *" m68kreg="a3"/>
    </method>
    <method name="EC_GROUP_get0_seed" result="unsigned char *">
      <arg name="x" type="const EC_GROUP *" m68kreg="a0"/>
    </method>
    <method name="BN_GF2m_mod_div_arr" result="int">
      <arg name="r" type="BIGNUM *" m68kreg="a0"/>
      <arg name="a" type="const BIGNUM *" m68kreg="a1"/>
      <arg name="b" type="const BIGNUM *" m68kreg="a2"/>
      <arg name="p" type="const int *" m68kreg="a3"/>
      <arg name="ctx" type="BN_CTX *" m68kreg="d0"/>
    </method>
    <method name="ENGINE_set_ECDSA" result="int" status="unimplemented">
      <arg name="e" type="ENGINE *" m68kreg="a0"/>
      <arg name="ecdsa_meth" type="const ECDSA_METHOD *" m68kreg="a1"/>
    </method>
    <method name="PEM_write_EC_PUBKEY" result="int" status="unimplemented">
      <arg name="fp" type="FILE *" m68kreg="a0"/>
      <arg name="x" type="EC_KEY *" m68kreg="a1"/>
    </method>
    <method name="ECDH_set_method" result="int" status="unimplemented">
      <arg name="key" type="EC_KEY *" m68kreg="a0"/>
      <arg name="meth" type="const ECDH_METHOD *" m68kreg="a1"/>
    </method>
    <method name="ECDH_set_ex_data" result="int" status="unimplemented">
      <arg name="d" type="EC_KEY *" m68kreg="a0"/>
      <arg name="idx" type="int" m68kreg="d0"/>
      <arg name="arg" type="void *" m68kreg="a1"/>
    </method>
    <method name="PEM_read_EC_PUBKEY" result="EC_KEY *" status="unimplemented">
      <arg name="fp" type="FILE *" m68kreg="a0"/>
      <arg name="x" type="EC_KEY **" m68kreg="a1"/>
      <arg name="cb" type="pem_password_cb *" m68kreg="a2"/>
      <arg name="u" type="void *" m68kreg="a3"/>
    </method>
    <method name="ECDSA_OpenSSL" result="const ECDSA_METHOD *" status="unimplemented">
    </method>
    <method name="EC_KEY_get_enc_flags" result="unsigned">
      <arg name="key" type="const EC_KEY *" m68kreg="a0"/>
    </method>
    <method name="ECDSA_set_default_method" result="void" status="unimplemented">
      <arg name="meth" type="const ECDSA_METHOD *" m68kreg="a0"/>
    </method>
    <method name="EC_POINT_set_compressed_coordinates_GF2m" result="int">
      <arg name="group" type="const EC_GROUP *" m68kreg="a0"/>
      <arg name="p" type="EC_POINT *" m68kreg="a1"/>
      <arg name="x" type="const BIGNUM *" m68kreg="a2"/>
      <arg name="y_bit" type="int" m68kreg="d0"/>
      <arg name="ctx" type="BN_CTX *" m68kreg="a3"/>
    </method>
    <method name="EC_GROUP_cmp" result="int">
      <arg name="a" type="const EC_GROUP *" m68kreg="a0"/>
      <arg name="b" type="const EC_GROUP *" m68kreg="a1"/>
      <arg name="ctx" type="BN_CTX *" m68kreg="a2"/>
    </method>
    <method name="SHA224_Init" result="int">
      <arg name="c" type="SHA256_CTX *" m68kreg="a0"/>
    </method>
    <method name="PEM_read_ECPrivateKey" result="EC_KEY *" status="unimplemented">
      <arg name="fp" type="FILE *" m68kreg="a0"/>
      <arg name="x" type="EC_KEY **" m68kreg="a1"/>
      <arg name="cb" type="pem_password_cb *" m68kreg="a2"/>
      <arg name="u" type="void *" m68kreg="a3"/>
    </method>
    <method name="SHA512_Init" result="int">
      <arg name="c" type="SHA512_CTX *" m68kreg="a0"/>
    </method>
    <method name="ERR_load_ECDSA_strings" result="void" status="unimplemented">
    </method>
    <method name="EC_GROUP_get_basis_type" result="int">
      <arg name="group" type="const EC_GROUP *" m68kreg="a0"/>
    </method>
    <method name="PEM_write_ECPKParameters" result="int" status="unimplemented">
      <arg name="fp" type="FILE *" m68kreg="a0"/>
      <arg name="x" type="const EC_GROUP *" m68kreg="a1"/>
    </method>
    <method name="ENGINE_register_all_ECDH" result="void" status="unimplemented">
    </method>
    <method name="i2d_ECPrivateKey_fp" result="int" status="unimplemented">
      <arg name="fp" type="FILE *" m68kreg="a0"/>
      <arg name="eckey" type="EC_KEY *" m68kreg="a1"/>
    </method>
    <method name="ENGINE_register_all_ECDSA" result="void" status="unimplemented">
    </method>
    <method name="EC_GROUP_dup" result="EC_GROUP *">
      <arg name="src" type="const EC_GROUP *" m68kreg="a0"/>
    </method>
    <method name="ENGINE_get_default_ECDSA" result="ENGINE *" status="unimplemented">
    </method>
    <method name="SHA256_Transform" result="void">
      <arg name="c" type="SHA256_CTX *" m68kreg="a0"/>
      <arg name="data" type="const unsigned char *" m68kreg="a1"/>
    </method>
    <method name="EC_KEY_set_enc_flags" result="void">
      <arg name="eckey" type="EC_KEY *" m68kreg="a0"/>
      <arg name="flags" type="unsigned int" m68kreg="d0"/>
    </method>
    <method name="EC_POINT_point2hex" result="char *">
      <arg name="group" type="const EC_GROUP *" m68kreg="a0"/>
      <arg name="point" type="const EC_POINT *" m68kreg="a1"/>
      <arg name="form" type="point_conversion_form_t" m68kreg="d0"/>
      <arg name="ctx" type="BN_CTX *" m68kreg="a2"/>
    </method>
    <method name="ENGINE_get_STORE" result="const STORE_METHOD *" status="unimplemented">
      <arg name="e" type="const ENGINE *" m68kreg="a0"/>
    </method>
    <method name="ECDSA_do_sign_ex" result="ECDSA_SIG *">
      <arg name="dgst" type="const unsigned char *" m68kreg="a0"/>
      <arg name="dgstlen" type="int" m68kreg="d0"/>
      <arg name="kinv" type="const BIGNUM *" m68kreg="a1"/>
      <arg name="rp" type="const BIGNUM *" m68kreg="a2"/>
      <arg name="eckey" type="EC_KEY *" m68kreg="a3"/>
    </method>
    <method name="d2i_ECPrivateKey_fp" result="EC_KEY *" status="unimplemented">
      <arg name="fp" type="FILE *" m68kreg="a0"/>
      <arg name="eckey" type="EC_KEY **" m68kreg="a1"/>
    </method>
    <method name="SHA512_Transform" result="void">
      <arg name="c" type="SHA512_CTX *" m68kreg="a0"/>
      <arg name="data" type="const unsigned char *" m68kreg="a1"/>
    </method>
    <method name="PEM_write_ECPrivateKey" result="int" status="unimplemented">
      <arg name="fp" type="FILE *" m68kreg="a0"/>
      <arg name="x" type="EC_KEY *" m68kreg="a1"/>
      <arg name="enc" type="const EVP_CIPHER *" m68kreg="a2"/>
      <arg name="kstr" type="unsigned char *" m68kreg="a3"/>
      <arg name="klen" type="int" m68kreg="d0"/>
      <arg name="cb" type="pem_password_cb *" m68kreg="d1"/>
      <arg name="u" type="void *" m68kreg="d2"/>
    </method>
    <method name="EC_KEY_set_public_key" result="int">
      <arg name="key" type="EC_KEY *" m68kreg="a0"/>
      <arg name="pub" type="const EC_POINT *" m68kreg="a1"/>
    </method>
    <method name="PEM_read_ECPKParameters" result="EC_GROUP *" status="unimplemented">
      <arg name="fp" type="FILE *" m68kreg="a0"/>
      <arg name="x" type="EC_GROUP **" m68kreg="a1"/>
      <arg name="cb" type="pem_password_cb *" m68kreg="a2"/>
      <arg name="u" type="void *" m68kreg="a3"/>
    </method>
    <method name="ENGINE_register_STORE" result="int" status="unimplemented">
      <arg name="e" type="ENGINE *" m68kreg="a0"/>
    </method>
    <method name="ECParameters_print_fp" result="int" status="unimplemented">
      <arg name="fp" type="FILE *" m68kreg="a0"/>
      <arg name="key" type="const EC_KEY *" m68kreg="a1"/>
    </method>
    <method name="EC_GROUP_get_curve_name" result="int">
      <arg name="group" type="const EC_GROUP *" m68kreg="a0"/>
    </method>
    <method name="i2d_EC_PUBKEY_fp" result="int" status="unimplemented">
      <arg name="fp" type="FILE *" m68kreg="a0"/>
      <arg name="eckey" type="EC_KEY *" m68kreg="a1"/>
    </method>
    <method name="SHA256_Final" result="int">
      <arg name="md" type="unsigned char *" m68kreg="a0"/>
      <arg name="c" type="SHA256_CTX *" m68kreg="a1"/>
    </method>
    <method name="ENGINE_get_ECDH" result="const ECDH_METHOD *" status="unimplemented">
      <arg name="e" type="const ENGINE *" m68kreg="a0"/>
    </method>
    <method name="ENGINE_get_ECDSA" result="const ECDSA_METHOD *" status="unimplemented">
      <arg name="e" type="const ENGINE *" m68kreg="a0"/>
    </method>
    <method name="ERR_load_ECDH_strings" result="void" status="unimplemented">
    </method>
    <method name="ECDSA_set_method" result="int" status="unimplemented">
      <arg name="eckey" type="EC_KEY *" m68kreg="a0"/>
      <arg name="meth" type="const ECDSA_METHOD *" m68kreg="a1"/>
    </method>
    <method name="d2i_ECParameters" result="EC_KEY *">
      <arg name="key" type="EC_KEY **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="SHA384_Init" result="int">
      <arg name="c" type="SHA512_CTX *" m68kreg="a0"/>
    </method>
    <method name="ECDSA_set_ex_data" result="int" status="unimplemented">
      <arg name="d" type="EC_KEY *" m68kreg="a0"/>
      <arg name="idx" type="int" m68kreg="d0"/>
      <arg name="arg" type="void *" m68kreg="a1"/>
    </method>
    <method name="SHA384_Final" result="int">
      <arg name="md" type="unsigned char *" m68kreg="a0"/>
      <arg name="c" type="SHA512_CTX *" m68kreg="a1"/>
    </method>
    <method name="ECDSA_get_ex_new_index" result="int" status="unimplemented">
      <arg name="argl" type="long" m68kreg="a0"/>
      <arg name="argp" type="void *" m68kreg="a1"/>
      <arg name="new_func" type="CRYPTO_EX_new *" m68kreg="a2"/>
      <arg name="dup_func" type="CRYPTO_EX_dup *" m68kreg="a3"/>
      <arg name="free_func" type="CRYPTO_EX_free *" m68kreg="d0"/>
    </method>
    <method name="SHA384" result="unsigned char *">
      <arg name="d" type="const unsigned char *" m68kreg="a0"/>
      <arg name="n" type="size_t" m68kreg="d0"/>
      <arg name="md" type="unsigned char *" m68kreg="a1"/>
    </method>
    <method name="d2i_EC_PUBKEY_fp" result="EC_KEY *" status="unimplemented">
      <arg name="fp" type="FILE *" m68kreg="a0"/>
      <arg name="eckey" type="EC_KEY **" m68kreg="a1"/>
    </method>
    <method name="ENGINE_set_default_ECDH" result="int" status="unimplemented">
      <arg name="e" type="ENGINE *" m68kreg="a0"/>
    </method>
    <method name="EC_POINT_hex2point" result="EC_POINT *">
      <arg name="group" type="const EC_GROUP *" m68kreg="a0"/>
      <arg name="c" type="const char *" m68kreg="a1"/>
      <arg name="p" type="EC_POINT *" m68kreg="a2"/>
      <arg name="ctx" type="BN_CTX *" m68kreg="a3"/>
    </method>
    <method name="SHA256_Update" result="int">
      <arg name="c" type="SHA256_CTX *" m68kreg="a0"/>
      <arg name="data" type="const void *" m68kreg="a1"/>
      <arg name="len" type="size_t" m68kreg="d0"/>
    </method>
    <method name="BN_GF2m_mod_inv_arr" result="int">
      <arg name="r" type="BIGNUM *" m68kreg="a0"/>
      <arg name="b" type="const BIGNUM *" m68kreg="a1"/>
      <arg name="p" type="const int *" m68kreg="a2"/>
      <arg name="ctx" type="BN_CTX *" m68kreg="a3"/>
    </method>
    <method name="ENGINE_unregister_ECDSA" result="void" status="unimplemented">
      <arg name="e" type="ENGINE *" m68kreg="a0"/>
    </method>
    <method name="BN_BLINDING_set_thread_id" result="void" status="unimplemented">
      <arg name="b" type="BN_BLINDING *" m68kreg="a0"/>
      <arg name="l" type="unsigned long" m68kreg="d0"/>
    </method>
    <method name="DH_check_pub_key" result="int">
      <arg name="dh" type="const DH *" m68kreg="a0"/>
      <arg name="pub_key" type="const BIGNUM *" m68kreg="a1"/>
      <arg name="codes" type="int *" m68kreg="a2"/>
    </method>
    <method name="Camellia_cbc_encrypt" result="void">
      <arg name="in" type="const unsigned char *" m68kreg="a0"/>
      <arg name="out" type="unsigned char *" m68kreg="a1"/>
      <arg name="length" type="size_t" m68kreg="d0"/>
      <arg name="key" type="const CAMELLIA_KEY *" m68kreg="a2"/>
      <arg name="ivec" type="unsigned char *" m68kreg="a3"/>
      <arg name="enc" type="const int" m68kreg="d1"/>
    </method>
    <method name="Camellia_cfb128_encrypt" result="void">
      <arg name="in" type="const unsigned char *" m68kreg="a0"/>
      <arg name="out" type="unsigned char *" m68kreg="a1"/>
      <arg name="length" type="size_t" m68kreg="d0"/>
      <arg name="key" type="const CAMELLIA_KEY *" m68kreg="a2"/>
      <arg name="ivec" type="unsigned char *" m68kreg="a3"/>
      <arg name="num" type="int *" m68kreg="d1"/>
      <arg name="enc" type="const int" m68kreg="d2"/>
    </method>
    <method name="Camellia_cfb1_encrypt" result="void">
      <arg name="in" type="const unsigned char *" m68kreg="a0"/>
      <arg name="out" type="unsigned char *" m68kreg="a1"/>
      <arg name="length" type="size_t" m68kreg="d0"/>
      <arg name="key" type="const CAMELLIA_KEY *" m68kreg="a2"/>
      <arg name="ivec" type="unsigned char *" m68kreg="a3"/>
      <arg name="num" type="int *" m68kreg="d1"/>
      <arg name="enc" type="const int" m68kreg="d2"/>
    </method>
    <method name="Camellia_cfb8_encrypt" result="void">
      <arg name="in" type="const unsigned char *" m68kreg="a0"/>
      <arg name="out" type="unsigned char *" m68kreg="a1"/>
      <arg name="length" type="size_t" m68kreg="d0"/>
      <arg name="key" type="const CAMELLIA_KEY *" m68kreg="a2"/>
      <arg name="ivec" type="unsigned char *" m68kreg="a3"/>
      <arg name="num" type="int *" m68kreg="d1"/>
      <arg name="enc" type="const int" m68kreg="d2"/>
    </method>
    <method name="Camellia_ctr128_encrypt" result="void">
      <arg name="in" type="const unsigned char *" m68kreg="a0"/>
      <arg name="out" type="unsigned char *" m68kreg="a1"/>
      <arg name="length" type="size_t" m68kreg="d0"/>
      <arg name="key" type="const CAMELLIA_KEY *" m68kreg="a2"/>
      <arg name="ivec" type="unsigned char *" m68kreg="a3"/>
      <arg name="ecount_buf" type="unsigned char *" m68kreg="d1"/>
      <arg name="num" type="unsigned int *" m68kreg="d2"/>
    </method>
    <method name="Camellia_decrypt" result="void">
      <arg name="in" type="const unsigned char *" m68kreg="a0"/>
      <arg name="out" type="unsigned char *" m68kreg="a1"/>
      <arg name="key" type="const CAMELLIA_KEY *" m68kreg="a2"/>
    </method>
    <method name="Camellia_ecb_encrypt" result="void">
      <arg name="in" type="const unsigned char *" m68kreg="a0"/>
      <arg name="out" type="unsigned char *" m68kreg="a1"/>
      <arg name="key" type="const CAMELLIA_KEY *" m68kreg="a2"/>
      <arg name="enc" type="const int" m68kreg="d0"/>
    </method>
    <method name="Camellia_encrypt" result="void">
      <arg name="in" type="const unsigned char *" m68kreg="a0"/>
      <arg name="out" type="unsigned char *" m68kreg="a1"/>
      <arg name="key" type="const CAMELLIA_KEY *" m68kreg="a2"/>
    </method>
    <method name="Camellia_ofb128_encrypt" result="void">
      <arg name="in" type="const unsigned char *" m68kreg="a0"/>
      <arg name="out" type="unsigned char *" m68kreg="a1"/>
      <arg name="length" type="size_t" m68kreg="d0"/>
      <arg name="key" type="const CAMELLIA_KEY *" m68kreg="a2"/>
      <arg name="ivec" type="unsigned char *" m68kreg="a3"/>
      <arg name="num" type="int *" m68kreg="d1"/>
    </method>
    <method name="Camellia_set_key" result="int">
      <arg name="userKey" type="const unsigned char *" m68kreg="a0"/>
      <arg name="bits" type="const int" m68kreg="d0"/>
      <arg name="key" type="CAMELLIA_KEY *" m68kreg="a1"/>
    </method>
    <method name="EVP_camellia_128_cbc" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_camellia_128_cfb128" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_camellia_128_cfb1" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_camellia_128_cfb8" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_camellia_128_ecb" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_camellia_128_ofb" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_camellia_192_cbc" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_camellia_192_cfb128" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_camellia_192_cfb1" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_camellia_192_cfb8" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_camellia_192_ecb" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_camellia_192_ofb" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_camellia_256_cbc" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_camellia_256_cfb128" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_camellia_256_cfb1" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_camellia_256_cfb8" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_camellia_256_ecb" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_camellia_256_ofb" result="const EVP_CIPHER *">
    </method>
    <method name="AES_bi_ige_encrypt" result="void">
      <arg name="in" type="const unsigned char *" m68kreg="a0"/>
      <arg name="out" type="unsigned char *" m68kreg="a1"/>
      <arg name="length" type="size_t" m68kreg="d0"/>
      <arg name="key" type="const AES_KEY *" m68kreg="a2"/>
      <arg name="key2" type="const AES_KEY *" m68kreg="a3"/>
      <arg name="ivec" type="const unsigned char *" m68kreg="d1"/>
      <arg name="enc" type="const int" m68kreg="d2"/>
    </method>
    <method name="SEED_decrypt" result="void">
      <arg name="s" type="const unsigned char *" m68kreg="a0"/>
      <arg name="d" type="unsigned char *" m68kreg="a1"/>
      <arg name="ks" type="const SEED_KEY_SCHEDULE *" m68kreg="a2"/>
    </method>
    <method name="SEED_encrypt" result="void">
      <arg name="s" type="const unsigned char *" m68kreg="a0"/>
      <arg name="d" type="unsigned char *" m68kreg="a1"/>
      <arg name="ks" type="const SEED_KEY_SCHEDULE *" m68kreg="a2"/>
    </method>
    <method name="SEED_cbc_encrypt" result="void">
      <arg name="in" type="const unsigned char *" m68kreg="a0"/>
      <arg name="out" type="unsigned char *" m68kreg="a1"/>
      <arg name="len" type="size_t" m68kreg="d0"/>
      <arg name="ks" type="const SEED_KEY_SCHEDULE *" m68kreg="a2"/>
      <arg name="ivec" type="unsigned char *" m68kreg="a3"/>
      <arg name="enc" type="int" m68kreg="d1"/>
    </method>
    <method name="EVP_seed_ofb" result="const EVP_CIPHER *">
    </method>
    <method name="SEED_cfb128_encrypt" result="void">
      <arg name="in" type="const unsigned char *" m68kreg="a0"/>
      <arg name="out" type="unsigned char *" m68kreg="a1"/>
      <arg name="len" type="size_t" m68kreg="d0"/>
      <arg name="ks" type="const SEED_KEY_SCHEDULE *" m68kreg="a2"/>
      <arg name="ivec" type="unsigned char *" m68kreg="a3"/>
      <arg name="num" type="int *" m68kreg="d1"/>
      <arg name="enc" type="int" m68kreg="d2"/>
    </method>
    <method name="SEED_ofb128_encrypt" result="void">
      <arg name="in" type="const unsigned char *" m68kreg="a0"/>
      <arg name="out" type="unsigned char *" m68kreg="a1"/>
      <arg name="len" type="size_t" m68kreg="d0"/>
      <arg name="ks" type="const SEED_KEY_SCHEDULE *" m68kreg="a2"/>
      <arg name="ivec" type="unsigned char *" m68kreg="a3"/>
      <arg name="num" type="int *" m68kreg="d1"/>
    </method>
    <method name="EVP_seed_cbc" result="const EVP_CIPHER *">
    </method>
    <method name="SEED_ecb_encrypt" result="void">
      <arg name="in" type="const unsigned char *" m68kreg="a0"/>
      <arg name="out" type="unsigned char *" m68kreg="a1"/>
      <arg name="ks" type="const SEED_KEY_SCHEDULE *" m68kreg="a2"/>
      <arg name="enc" type="int" m68kreg="d0"/>
    </method>
    <method name="EVP_seed_ecb" result="const EVP_CIPHER *">
    </method>
    <method name="SEED_set_key" result="void">
      <arg name="rawkey" type="const unsigned char *" m68kreg="a0"/>
      <arg name="ks" type="SEED_KEY_SCHEDULE *" m68kreg="a1"/>
    </method>
    <method name="EVP_seed_cfb128" result="const EVP_CIPHER *">
    </method>
    <method name="AES_unwrap_key" result="int">
      <arg name="key" type="AES_KEY *" m68kreg="a0"/>
      <arg name="iv" type="const unsigned char *" m68kreg="a1"/>
      <arg name="out" type="unsigned char *" m68kreg="a2"/>
      <arg name="in" type="const unsigned char *" m68kreg="a3"/>
      <arg name="inlen" type="unsigned int" m68kreg="d0"/>
    </method>
    <method name="AES_wrap_key" result="int">
      <arg name="key" type="AES_KEY *" m68kreg="a0"/>
      <arg name="iv" type="const unsigned char *" m68kreg="a1"/>
      <arg name="out" type="unsigned char *" m68kreg="a2"/>
      <arg name="in" type="const unsigned char *" m68kreg="a3"/>
      <arg name="inlen" type="unsigned int" m68kreg="d0"/>
    </method>
    <method name="CMS_ReceiptRequest_free" result="void">
      <arg name="rr" type="CMS_ReceiptRequest *" m68kreg="a0"/>
    </method>
    <method name="PEM_write_CMS" result="int" status="unimplemented">
      <arg name="fp" type="FILE *" m68kreg="a0"/>
      <arg name="x" type="CMS_ContentInfo *" m68kreg="a1"/>
    </method>
    <method name="CMS_add0_CertificateChoices" result="CMS_CertificateChoices *">
      <arg name="cms" type="CMS_ContentInfo *" m68kreg="a0"/>
    </method>
    <method name="CMS_unsigned_add1_attr_by_OBJ" result="int">
      <arg name="si" type="CMS_SignerInfo *" m68kreg="a0"/>
      <arg name="obj" type="const ASN1_OBJECT *" m68kreg="a1"/>
      <arg name="type" type="int" m68kreg="d0"/>
      <arg name="bytes" type="const void *" m68kreg="a2"/>
      <arg name="len" type="int" m68kreg="d1"/>
    </method>
    <method name="ERR_load_CMS_strings" result="int">
    </method>
    <method name="CMS_sign_receipt" result="CMS_ContentInfo *">
      <arg name="si" type="CMS_SignerInfo *" m68kreg="a0"/>
      <arg name="signcert" type="X509 *" m68kreg="a1"/>
      <arg name="pkey" type="EVP_PKEY *" m68kreg="a2"/>
      <arg name="certs" type="STACK_OF(X509) *" m68kreg="a3"/>
      <arg name="flags" type="unsigned int" m68kreg="d0"/>
    </method>
    <method name="i2d_CMS_ContentInfo" result="int">
      <arg name="a" type="CMS_ContentInfo *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="CMS_signed_delete_attr" result="X509_ATTRIBUTE *">
      <arg name="si" type="CMS_SignerInfo *" m68kreg="a0"/>
      <arg name="loc" type="int" m68kreg="d0"/>
    </method>
    <method name="d2i_CMS_bio" result="CMS_ContentInfo *">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="cms" type="CMS_ContentInfo **" m68kreg="a1"/>
    </method>
    <method name="CMS_unsigned_get_attr_by_NID" result="int">
      <arg name="si" type="const CMS_SignerInfo *" m68kreg="a0"/>
      <arg name="nid" type="int" m68kreg="d0"/>
      <arg name="lastpos" type="int" m68kreg="d1"/>
    </method>
    <method name="CMS_verify" result="int">
      <arg name="cms" type="CMS_ContentInfo *" m68kreg="a0"/>
      <arg name="certs" type="STACK_OF(X509) *" m68kreg="a1"/>
      <arg name="store" type="X509_STORE *" m68kreg="a2"/>
      <arg name="dcont" type="BIO *" m68kreg="a3"/>
      <arg name="out" type="BIO *" m68kreg="d0"/>
      <arg name="flags" type="unsigned int" m68kreg="d1"/>
    </method>
    <method name="SMIME_read_CMS" result="CMS_ContentInfo *">
      <arg name="bio" type="BIO *" m68kreg="a0"/>
      <arg name="biocont" type="BIO **" m68kreg="a1"/>
    </method>
    <method name="CMS_decrypt_set1_key" result="int">
      <arg name="cms" type="CMS_ContentInfo *" m68kreg="a0"/>
      <arg name="key" type="unsigned char *" m68kreg="a1"/>
      <arg name="keylen" type="size_t" m68kreg="d0"/>
      <arg name="id" type="const unsigned char *" m68kreg="a2"/>
      <arg name="idlen" type="size_t" m68kreg="d1"/>
    </method>
    <method name="CMS_SignerInfo_get0_algs" result="void">
      <arg name="si" type="CMS_SignerInfo *" m68kreg="a0"/>
      <arg name="pk" type="EVP_PKEY **" m68kreg="a1"/>
      <arg name="signer" type="X509 **" m68kreg="a2"/>
      <arg name="pdig" type="X509_ALGOR **" m68kreg="a3"/>
      <arg name="psig" type="X509_ALGOR **" m68kreg="d0"/>
    </method>
    <method name="CMS_add1_cert" result="int">
      <arg name="cms" type="CMS_ContentInfo *" m68kreg="a0"/>
      <arg name="cert" type="X509 *" m68kreg="a1"/>
    </method>
    <method name="CMS_set_detached" result="int">
      <arg name="cms" type="CMS_ContentInfo *" m68kreg="a0"/>
      <arg name="detached" type="int" m68kreg="d0"/>
    </method>
    <method name="CMS_encrypt" result="CMS_ContentInfo *">
      <arg name="certs" type="STACK_OF(X509) *" m68kreg="a0"/>
      <arg name="in" type="BIO *" m68kreg="a1"/>
      <arg name="cipher" type="const EVP_CIPHER *" m68kreg="a2"/>
      <arg name="flags" type="unsigned int" m68kreg="d0"/>
    </method>
    <method name="CMS_EnvelopedData_create" result="CMS_ContentInfo *">
      <arg name="cipher" type="const EVP_CIPHER *" m68kreg="a0"/>
    </method>
    <method name="CMS_uncompress" result="int">
      <arg name="cms" type="CMS_ContentInfo *" m68kreg="a0"/>
      <arg name="dcont" type="BIO *" m68kreg="a1"/>
      <arg name="out" type="BIO *" m68kreg="a2"/>
      <arg name="flags" type="unsigned int" m68kreg="d0"/>
    </method>
    <method name="CMS_add0_crl" result="int">
      <arg name="cms" type="CMS_ContentInfo *" m68kreg="a0"/>
      <arg name="crl" type="X509_CRL *" m68kreg="a1"/>
    </method>
    <method name="CMS_SignerInfo_verify_content" result="int">
      <arg name="si" type="CMS_SignerInfo *" m68kreg="a0"/>
      <arg name="chain" type="BIO *" m68kreg="a1"/>
    </method>
    <method name="CMS_unsigned_get0_data_by_OBJ" result="void *">
      <arg name="si" type="CMS_SignerInfo *" m68kreg="a0"/>
      <arg name="oid" type="ASN1_OBJECT *" m68kreg="a1"/>
      <arg name="lastpos" type="int" m68kreg="d0"/>
      <arg name="type" type="int" m68kreg="d1"/>
    </method>
    <method name="PEM_write_bio_CMS" result="int">
      <arg name="out" type="BIO *" m68kreg="a0"/>
      <arg name="cms" type="CMS_ContentInfo *" m68kreg="a1"/>
    </method>
    <method name="CMS_unsigned_get_attr" result="X509_ATTRIBUTE *">
      <arg name="si" type="const CMS_SignerInfo *" m68kreg="a0"/>
      <arg name="loc" type="int" m68kreg="d0"/>
    </method>
    <method name="CMS_RecipientInfo_ktri_cert_cmp" result="int">
      <arg name="ri" type="CMS_RecipientInfo *" m68kreg="a0"/>
      <arg name="cert" type="X509 *" m68kreg="a1"/>
    </method>
    <method name="CMS_RecipientInfo_ktri_get0_algs" result="int">
      <arg name="ri" type="CMS_RecipientInfo *" m68kreg="a0"/>
      <arg name="pk" type="EVP_PKEY **" m68kreg="a1"/>
      <arg name="recip" type="X509 **" m68kreg="a2"/>
      <arg name="palg" type="X509_ALGOR **" m68kreg="a3"/>
    </method>
    <method name="CMS_ContentInfo_free" result="void">
      <arg name="cms" type="CMS_ContentInfo *" m68kreg="a0"/>
    </method>
    <method name="CMS_final" result="int">
      <arg name="cms" type="CMS_ContentInfo *" m68kreg="a0"/>
      <arg name="data" type="BIO *" m68kreg="a1"/>
      <arg name="dcont" type="BIO *" m68kreg="a2"/>
      <arg name="flags" type="unsigned int" m68kreg="d0"/>
    </method>
    <method name="CMS_add_simple_smimecap" result="int">
      <arg name="algs" type="STACK_OF(X509_ALGOR) **" m68kreg="a0"/>
      <arg name="algnid" type="int" m68kreg="d0"/>
      <arg name="keysize" type="int" m68kreg="d1"/>
    </method>
    <method name="CMS_SignerInfo_verify" result="int">
      <arg name="si" type="CMS_SignerInfo *" m68kreg="a0"/>
    </method>
    <method name="CMS_data" result="int">
      <arg name="cms" type="CMS_ContentInfo *" m68kreg="a0"/>
      <arg name="out" type="BIO *" m68kreg="a1"/>
      <arg name="flags" type="unsigned int" m68kreg="d0"/>
    </method>
    <method name="d2i_CMS_ReceiptRequest" result="CMS_ReceiptRequest *">
      <arg name="a" type="CMS_ReceiptRequest **" m68kreg="a0"/>
      <arg name="in" type="unsigned char const **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="a2"/>
    </method>
    <method name="CMS_compress" result="CMS_ContentInfo *">
      <arg name="in" type="BIO *" m68kreg="a0"/>
      <arg name="comp_nid" type="int" m68kreg="d0"/>
      <arg name="flags" type="unsigned int" m68kreg="d1"/>
    </method>
    <method name="CMS_digest_create" result="CMS_ContentInfo *">
      <arg name="in" type="BIO *" m68kreg="a0"/>
      <arg name="md" type="const EVP_MD *" m68kreg="a1"/>
      <arg name="flags" type="unsigned int" m68kreg="d0"/>
    </method>
    <method name="CMS_SignerInfo_cert_cmp" result="int">
      <arg name="si" type="CMS_SignerInfo *" m68kreg="a0"/>
      <arg name="cert" type="X509 *" m68kreg="a1"/>
    </method>
    <method name="CMS_SignerInfo_sign" result="int">
      <arg name="si" type="CMS_SignerInfo *" m68kreg="a0"/>
    </method>
    <method name="CMS_data_create" result="CMS_ContentInfo *">
      <arg name="in" type="BIO *" m68kreg="a0"/>
      <arg name="flags" type="unsigned int" m68kreg="d0"/>
    </method>
    <method name="i2d_CMS_bio" result="int">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="cms" type="CMS_ContentInfo *" m68kreg="a1"/>
    </method>
    <method name="CMS_EncryptedData_set1_key" result="int">
      <arg name="cms" type="CMS_ContentInfo *" m68kreg="a0"/>
      <arg name="ciph" type="const EVP_CIPHER *" m68kreg="a1"/>
      <arg name="key" type="const unsigned char *" m68kreg="a2"/>
      <arg name="keylen" type="size_t" m68kreg="d0"/>
    </method>
    <method name="CMS_decrypt" result="int">
      <arg name="cms" type="CMS_ContentInfo *" m68kreg="a0"/>
      <arg name="pkey" type="EVP_PKEY *" m68kreg="a1"/>
      <arg name="cert" type="X509 *" m68kreg="a2"/>
      <arg name="dcont" type="BIO *" m68kreg="a3"/>
      <arg name="out" type="BIO *" m68kreg="d0"/>
      <arg name="flags" type="unsigned int" m68kreg="d1"/>
    </method>
    <method name="CMS_unsigned_delete_attr" result="X509_ATTRIBUTE *">
      <arg name="si" type="CMS_SignerInfo *" m68kreg="a0"/>
      <arg name="loc" type="int" m68kreg="d0"/>
    </method>
    <method name="CMS_unsigned_get_attr_count" result="int">
      <arg name="si" type="const CMS_SignerInfo *" m68kreg="a0"/>
    </method>
    <method name="CMS_add_smimecap" result="int">
      <arg name="si" type="CMS_SignerInfo *" m68kreg="a0"/>
      <arg name="algs" type="STACK_OF(X509_ALGOR) *" m68kreg="a1"/>
    </method>
    <method name="PEM_read_CMS" result="int" status="unimplemented">
      <arg name="fp" type="FILE *" m68kreg="a0"/>
      <arg name="x" type="CMS_ContentInfo **" m68kreg="a1"/>
      <arg name="cb" type="pem_password_cb *" m68kreg="a2"/>
      <arg name="u" type="void *" m68kreg="a3"/>
    </method>
    <method name="CMS_signed_get_attr_by_OBJ" result="int">
      <arg name="si" type="const CMS_SignerInfo *" m68kreg="a0"/>
      <arg name="obj" type="const ASN1_OBJECT *" m68kreg="a1"/>
      <arg name="lastpos" type="int" m68kreg="d0"/>
    </method>
    <method name="d2i_CMS_ContentInfo" result="CMS_ContentInfo *">
      <arg name="a" type="CMS_ContentInfo **" m68kreg="a0"/>
      <arg name="in" type="unsigned char const **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="a2"/>
    </method>
    <method name="CMS_add_standard_smimecap" result="int">
      <arg name="smcap" type="STACK_OF(X509_ALGOR) **" m68kreg="a0"/>
    </method>
    <method name="CMS_ContentInfo_new" result="CMS_ContentInfo *">
    </method>
    <method name="CMS_RecipientInfo_type" result="int">
      <arg name="ri" type="CMS_RecipientInfo *" m68kreg="a0"/>
    </method>
    <method name="CMS_get0_type" result="const ASN1_OBJECT *">
      <arg name="cms" type="const CMS_ContentInfo *" m68kreg="a0"/>
    </method>
    <method name="CMS_is_detached" result="int">
      <arg name="cms" type="CMS_ContentInfo *" m68kreg="a0"/>
    </method>
    <method name="CMS_sign" result="CMS_ContentInfo *">
      <arg name="signcert" type="X509 *" m68kreg="a0"/>
      <arg name="pkey" type="EVP_PKEY *" m68kreg="a1"/>
      <arg name="certs" type="STACK_OF(X509) *" m68kreg="a2"/>
      <arg name="data" type="BIO *" m68kreg="a3"/>
      <arg name="flags" type="unsigned int" m68kreg="d0"/>
    </method>
    <method name="CMS_signed_add1_attr" result="int">
      <arg name="si" type="CMS_SignerInfo *" m68kreg="a0"/>
      <arg name="attr" type="X509_ATTRIBUTE *" m68kreg="a1"/>
    </method>
    <method name="CMS_unsigned_get_attr_by_OBJ" result="int">
      <arg name="si" type="const CMS_SignerInfo *" m68kreg="a0"/>
      <arg name="obj" type="const ASN1_OBJECT *" m68kreg="a1"/>
      <arg name="lastpos" type="int" m68kreg="d0"/>
    </method>
    <method name="SMIME_write_CMS" result="int">
      <arg name="bio" type="BIO *" m68kreg="a0"/>
      <arg name="cms" type="CMS_ContentInfo *" m68kreg="a1"/>
      <arg name="data" type="BIO *" m68kreg="a2"/>
      <arg name="flags" type="int" m68kreg="d0"/>
    </method>
    <method name="CMS_EncryptedData_decrypt" result="int">
      <arg name="cms" type="CMS_ContentInfo *" m68kreg="a0"/>
      <arg name="key" type="const unsigned char *" m68kreg="a1"/>
      <arg name="keylen" type="size_t" m68kreg="d0"/>
      <arg name="dcont" type="BIO *" m68kreg="a2"/>
      <arg name="out" type="BIO *" m68kreg="a3"/>
      <arg name="flags" type="unsigned int" m68kreg="d1"/>
    </method>
    <method name="CMS_get0_RecipientInfos" result="STACK_OF(CMS_RecipientInfo) *">
      <arg name="cms" type="CMS_ContentInfo *" m68kreg="a0"/>
    </method>
    <method name="CMS_add0_RevocationInfoChoice" result="CMS_RevocationInfoChoice *">
      <arg name="cms" type="CMS_ContentInfo *" m68kreg="a0"/>
    </method>
    <method name="CMS_decrypt_set1_pkey" result="int">
      <arg name="cms" type="CMS_ContentInfo *" m68kreg="a0"/>
      <arg name="pk" type="EVP_PKEY *" m68kreg="a1"/>
      <arg name="cert" type="X509 *" m68kreg="a2"/>
    </method>
    <method name="CMS_SignerInfo_set1_signer_cert" result="void">
      <arg name="si" type="CMS_SignerInfo *" m68kreg="a0"/>
      <arg name="signer" type="X509 *" m68kreg="a1"/>
    </method>
    <method name="CMS_get0_signers" result="STACK_OF(X509) *">
      <arg name="cms" type="CMS_ContentInfo *" m68kreg="a0"/>
    </method>
    <method name="CMS_ReceiptRequest_get0_values" result="void">
      <arg name="rr" type="CMS_ReceiptRequest *" m68kreg="a0"/>
      <arg name="pcid" type="ASN1_STRING **" m68kreg="a1"/>
      <arg name="pallorfirst" type="int *" m68kreg="a2"/>
      <arg name="plist" type="STACK_OF(GENERAL_NAMES) **" m68kreg="a3"/>
      <arg name="prto" type="STACK_OF(GENERAL_NAMES) **" m68kreg="d0"/>
    </method>
    <method name="CMS_signed_get0_data_by_OBJ" result="void *">
      <arg name="si" type="CMS_SignerInfo *" m68kreg="a0"/>
      <arg name="oid" type="const ASN1_OBJECT *" m68kreg="a1"/>
      <arg name="lastpos" type="int" m68kreg="d0"/>
      <arg name="type" type="int" m68kreg="d1"/>
    </method>
    <method name="CMS_get0_SignerInfos" result="STACK_OF(CMS_SignerInfo) *">
      <arg name="cms" type="CMS_ContentInfo *" m68kreg="a0"/>
    </method>
    <method name="CMS_add0_cert" result="int">
      <arg name="cms" type="CMS_ContentInfo *" m68kreg="a0"/>
      <arg name="cert" type="X509 *" m68kreg="a1"/>
    </method>
    <method name="CMS_EncryptedData_encrypt" result="CMS_ContentInfo *">
      <arg name="in" type="BIO *" m68kreg="a0"/>
      <arg name="cipher" type="const EVP_CIPHER *" m68kreg="a1"/>
      <arg name="key" type="const unsigned char *" m68kreg="a2"/>
      <arg name="keylen" type="size_t" m68kreg="d0"/>
      <arg name="flags" type="unsigned int" m68kreg="d1"/>
    </method>
    <method name="CMS_digest_verify" result="int">
      <arg name="cms" type="CMS_ContentInfo *" m68kreg="a0"/>
      <arg name="dcont" type="BIO *" m68kreg="a1"/>
      <arg name="out" type="BIO *" m68kreg="a2"/>
      <arg name="flags" type="unsigned int" m68kreg="d0"/>
    </method>
    <method name="CMS_set1_signers_certs" result="int">
      <arg name="cms" type="CMS_ContentInfo *" m68kreg="a0"/>
      <arg name="certs" type="STACK_OF(X509) *" m68kreg="a1"/>
      <arg name="flags" type="unsigned int" m68kreg="d0"/>
    </method>
    <method name="CMS_signed_get_attr" result="X509_ATTRIBUTE *">
      <arg name="si" type="const CMS_SignerInfo *" m68kreg="a0"/>
      <arg name="loc" type="int" m68kreg="d0"/>
    </method>
    <method name="CMS_RecipientInfo_set0_key" result="int">
      <arg name="ri" type="CMS_RecipientInfo *" m68kreg="a0"/>
      <arg name="key" type="unsigned char *" m68kreg="a1"/>
      <arg name="keylen" type="size_t" m68kreg="d0"/>
    </method>
    <method name="CMS_SignedData_init" result="int">
      <arg name="cms" type="CMS_ContentInfo *" m68kreg="a0"/>
    </method>
    <method name="CMS_RecipientInfo_kekri_get0_id" result="int">
      <arg name="ri" type="CMS_RecipientInfo *" m68kreg="a0"/>
      <arg name="palg" type="X509_ALGOR **" m68kreg="a1"/>
      <arg name="pid" type="ASN1_OCTET_STRING **" m68kreg="a2"/>
      <arg name="pdate" type="ASN1_GENERALIZEDTIME **" m68kreg="a3"/>
      <arg name="potherid" type="ASN1_OBJECT **" m68kreg="d0"/>
      <arg name="pothertype" type="ASN1_TYPE **" m68kreg="d1"/>
    </method>
    <method name="CMS_verify_receipt" result="int">
      <arg name="rcms" type="CMS_ContentInfo *" m68kreg="a0"/>
      <arg name="ocms" type="CMS_ContentInfo *" m68kreg="a1"/>
      <arg name="certs" type="STACK_OF(X509) *" m68kreg="a2"/>
      <arg name="store" type="X509_STORE *" m68kreg="a3"/>
      <arg name="flags" type="unsigned int" m68kreg="d0"/>
    </method>
    <method name="PEM_read_bio_CMS" result="CMS_ContentInfo *">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="x" type="CMS_ContentInfo **" m68kreg="a1"/>
      <arg name="cb" type="pem_password_cb *" m68kreg="a2"/>
      <arg name="u" type="void *" m68kreg="a3"/>
    </method>
    <method name="CMS_get1_crls" result="STACK_OF(X509_CRL) *">
      <arg name="cms" type="CMS_ContentInfo *" m68kreg="a0"/>
    </method>
    <method name="CMS_add0_recipient_key" result="CMS_RecipientInfo *">
      <arg name="cms" type="CMS_ContentInfo *" m68kreg="a0"/>
      <arg name="nid" type="int" m68kreg="d0"/>
      <arg name="key" type="unsigned char *" m68kreg="a1"/>
      <arg name="keylen" type="size_t" m68kreg="d1"/>
      <arg name="id" type="unsigned char *" m68kreg="a2"/>
      <arg name="idlen" type="size_t" m68kreg="d2"/>
      <arg name="date" type="ASN1_GENERALIZEDTIME *" m68kreg="a3"/>
      <arg name="otherTypeId" type="ASN1_OBJECT *" m68kreg="d3"/>
      <arg name="otherType" type="ASN1_TYPE *" m68kreg="d4"/>
    </method>
    <method name="CMS_ReceiptRequest_new" result="CMS_ReceiptRequest *">
    </method>
    <method name="CMS_get0_content" result="ASN1_OCTET_STRING **">
      <arg name="cms" type="CMS_ContentInfo *" m68kreg="a0"/>
    </method>
    <method name="CMS_get1_ReceiptRequest" result="int">
      <arg name="si" type="CMS_SignerInfo *" m68kreg="a0"/>
      <arg name="prr" type="CMS_ReceiptRequest **" m68kreg="a1"/>
    </method>
    <method name="CMS_signed_add1_attr_by_OBJ" result="int">
      <arg name="si" type="CMS_SignerInfo *" m68kreg="a0"/>
      <arg name="obj" type="const ASN1_OBJECT *" m68kreg="a1"/>
      <arg name="type" type="int" m68kreg="d0"/>
      <arg name="bytes" type="const void *" m68kreg="a2"/>
      <arg name="len" type="int" m68kreg="d1"/>
    </method>
    <method name="CMS_RecipientInfo_kekri_id_cmp" result="int">
      <arg name="ri" type="CMS_RecipientInfo *" m68kreg="a0"/>
      <arg name="id" type="const unsigned char *" m68kreg="a1"/>
      <arg name="idlen" type="size_t" m68kreg="d0"/>
    </method>
    <method name="CMS_add1_ReceiptRequest" result="int">
      <arg name="si" type="CMS_SignerInfo *" m68kreg="a0"/>
      <arg name="rr" type="CMS_ReceiptRequest *" m68kreg="a1"/>
    </method>
    <method name="CMS_SignerInfo_get0_signer_id" result="int">
      <arg name="si" type="CMS_SignerInfo *" m68kreg="a0"/>
      <arg name="keyid" type="ASN1_OCTET_STRING **" m68kreg="a1"/>
      <arg name="issuer" type="X509_NAME **" m68kreg="a2"/>
      <arg name="sno" type="ASN1_INTEGER **" m68kreg="a3"/>
    </method>
    <method name="CMS_unsigned_add1_attr_by_NID" result="int">
      <arg name="si" type="CMS_SignerInfo *" m68kreg="a0"/>
      <arg name="nid" type="int" m68kreg="d0"/>
      <arg name="type" type="int" m68kreg="d1"/>
      <arg name="bytes" type="const void *" m68kreg="a1"/>
      <arg name="len" type="int" m68kreg="d2"/>
    </method>
    <method name="CMS_unsigned_add1_attr" result="int">
      <arg name="si" type="CMS_SignerInfo *" m68kreg="a0"/>
      <arg name="attr" type="X509_ATTRIBUTE *" m68kreg="a1"/>
    </method>
    <method name="CMS_signed_get_attr_by_NID" result="int">
      <arg name="si" type="const CMS_SignerInfo *" m68kreg="a0"/>
      <arg name="nid" type="int" m68kreg="d0"/>
      <arg name="lastpos" type="int" m68kreg="d1"/>
    </method>
    <method name="CMS_get1_certs" result="STACK_OF(X509) *">
      <arg name="cms" type="CMS_ContentInfo *" m68kreg="a0"/>
    </method>
    <method name="CMS_signed_add1_attr_by_NID" result="int">
      <arg name="si" type="CMS_SignerInfo *" m68kreg="a0"/>
      <arg name="nid" type="int" m68kreg="d0"/>
      <arg name="type" type="int" m68kreg="d1"/>
      <arg name="bytes" type="const void *" m68kreg="a1"/>
      <arg name="len" type="int" m68kreg="d2"/>
    </method>
    <method name="CMS_unsigned_add1_attr_by_txt" result="int">
      <arg name="si" type="CMS_SignerInfo *" m68kreg="a0"/>
      <arg name="attrname" type="const char *" m68kreg="a1"/>
      <arg name="type" type="int" m68kreg="d0"/>
      <arg name="bytes" type="const void *" m68kreg="a2"/>
      <arg name="len" type="int" m68kreg="d1"/>
    </method>
    <method name="CMS_dataFinal" result="int">
      <arg name="cms" type="CMS_ContentInfo *" m68kreg="a0"/>
      <arg name="bio" type="BIO *" m68kreg="a1"/>
    </method>
    <method name="CMS_RecipientInfo_ktri_get0_signer_id" result="int">
      <arg name="ri" type="CMS_RecipientInfo *" m68kreg="a0"/>
      <arg name="keyid" type="ASN1_OCTET_STRING **" m68kreg="a1"/>
      <arg name="issuer" type="X509_NAME **" m68kreg="a2"/>
      <arg name="sno" type="ASN1_INTEGER **" m68kreg="a3"/>
    </method>
    <method name="i2d_CMS_ReceiptRequest" result="int">
      <arg name="a" type="CMS_ReceiptRequest *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="CMS_add1_recipient_cert" result="CMS_RecipientInfo *">
      <arg name="cms" type="CMS_ContentInfo *" m68kreg="a0"/>
      <arg name="recip" type="X509 *" m68kreg="a1"/>
      <arg name="flags" type="unsigned int" m68kreg="d0"/>
    </method>
    <method name="CMS_dataInit" result="BIO *">
      <arg name="cms" type="CMS_ContentInfo *" m68kreg="a0"/>
      <arg name="icont" type="BIO *" m68kreg="a1"/>
    </method>
    <method name="CMS_signed_add1_attr_by_txt" result="int">
      <arg name="si" type="CMS_SignerInfo *" m68kreg="a0"/>
      <arg name="attrname" type="const char *" m68kreg="a1"/>
      <arg name="type" type="int" m68kreg="d0"/>
      <arg name="bytes" type="const void *" m68kreg="a2"/>
      <arg name="len" type="int" m68kreg="d1"/>
    </method>
    <method name="CMS_RecipientInfo_decrypt" result="int">
      <arg name="cms" type="CMS_ContentInfo *" m68kreg="a0"/>
      <arg name="ri" type="CMS_RecipientInfo *" m68kreg="a1"/>
    </method>
    <method name="CMS_signed_get_attr_count" result="int">
      <arg name="si" type="const CMS_SignerInfo *" m68kreg="a0"/>
    </method>
    <method name="CMS_get0_eContentType" result="const ASN1_OBJECT *">
      <arg name="cms" type="CMS_ContentInfo *" m68kreg="a0"/>
    </method>
    <method name="CMS_set1_eContentType" result="int">
      <arg name="cms" type="CMS_ContentInfo *" m68kreg="a0"/>
      <arg name="oid" type="const ASN1_OBJECT *" m68kreg="a1"/>
    </method>
    <method name="CMS_ReceiptRequest_create0" result="CMS_ReceiptRequest *">
      <arg name="id" type="unsigned char *" m68kreg="a0"/>
      <arg name="idlen" type="int" m68kreg="d0"/>
      <arg name="allorfirst" type="int" m68kreg="d1"/>
      <arg name="receiptList" type="STACK_OF(GENERAL_NAMES) *" m68kreg="a1"/>
      <arg name="receiptsTo" type="STACK_OF(GENERAL_NAMES) *" m68kreg="a2"/>
    </method>
    <method name="CMS_add1_signer" result="CMS_SignerInfo *">
      <arg name="cms" type="CMS_ContentInfo *" m68kreg="a0"/>
      <arg name="signer" type="X509 *" m68kreg="a1"/>
      <arg name="pk" type="EVP_PKEY *" m68kreg="a2"/>
      <arg name="md" type="const EVP_MD *" m68kreg="a3"/>
      <arg name="flags" type="unsigned int" m68kreg="d0"/>
    </method>
    <method name="CMS_RecipientInfo_set0_pkey" result="int">
      <arg name="ri" type="CMS_RecipientInfo *" m68kreg="a0"/>
      <arg name="pkey" type="EVP_PKEY *" m68kreg="a1"/>
    </method>
    <method name="ENGINE_set_load_ssl_client_cert_function" result="int">
      <arg name="e" type="ENGINE *" m68kreg="a0"/>
      <arg name="loadssl_f" type="ENGINE_SSL_CLIENT_CERT_PTR" m68kreg="a1"/>
    </method>
    <method name="ENGINE_get_ssl_client_cert_function" result="ENGINE_SSL_CLIENT_CERT_PTR">
      <arg name="e" type="const ENGINE *" m68kreg="a0"/>
    </method>
    <method name="ENGINE_load_ssl_client_cert" result="int">
      <arg name="e" type="ENGINE *" m68kreg="a0"/>
      <arg name="s" type="SSL *" m68kreg="a1"/>
      <arg name="ca_dn" type="STACK_OF(X509_NAME) *" m68kreg="a2"/>
      <arg name="pcert" type="X509 **" m68kreg="a3"/>
      <arg name="ppkey" type="EVP_PKEY **" m68kreg="d0"/>
      <arg name="pother" type="STACK_OF(X509) **" m68kreg="d1"/>
      <arg name="ui_method" type="UI_METHOD *" m68kreg="d2"/>
      <arg name="callback_data" type="void *" m68kreg="d3"/>
    </method>
    <method name="ENGINE_load_capi" result="void" status="unimplemented">
    </method>
    <method name="ENGINE_register_pkey_meths" result="int">
      <arg name="e" type="ENGINE *" m68kreg="a0"/>
    </method>
    <method name="ENGINE_get_pkey_asn1_meth_engine" result="ENGINE *">
      <arg name="nid" type="int" m68kreg="d0"/>
    </method>
    <method name="WHIRLPOOL_Init" result="int">
      <arg name="c" type="WHIRLPOOL_CTX *" m68kreg="a0"/>
    </method>
    <method name="WHIRLPOOL" result="unsigned char *">
      <arg name="inp" type="const void *" m68kreg="a0"/>
      <arg name="bytes" type="size_t" m68kreg="d0"/>
      <arg name="md" type="unsigned char *" m68kreg="a1"/>
    </method>
    <method name="ENGINE_get_pkey_asn1_meth" result="const EVP_PKEY_ASN1_METHOD *">
      <arg name="e" type="ENGINE *" m68kreg="a0"/>
      <arg name="nid" type="int" m68kreg="d0"/>
    </method>
    <method name="ENGINE_get_pkey_meth" result="const EVP_PKEY_METHOD *">
      <arg name="e" type="ENGINE *" m68kreg="a0"/>
      <arg name="nid" type="int" m68kreg="d0"/>
    </method>
    <method name="BIO_new_CMS" result="BIO *">
      <arg name="out" type="BIO *" m68kreg="a0"/>
      <arg name="cms" type="CMS_ContentInfo *" m68kreg="a1"/>
    </method>
    <method name="ENGINE_set_default_pkey_asn1_meths" result="int">
      <arg name="e" type="ENGINE *" m68kreg="a0"/>
    </method>
    <method name="WHIRLPOOL_BitUpdate" result="void">
      <arg name="ctx" type="WHIRLPOOL_CTX *" m68kreg="a0"/>
      <arg name="inp" type="const void *" m68kreg="a1"/>
      <arg name="bits" type="size_t" m68kreg="d0"/>
    </method>
    <method name="i2d_CMS_bio_stream" result="int">
      <arg name="out" type="BIO *" m68kreg="a0"/>
      <arg name="cms" type="CMS_ContentInfo *" m68kreg="a1"/>
      <arg name="in" type="BIO *" m68kreg="a2"/>
      <arg name="flags" type="int" m68kreg="d0"/>
    </method>
    <method name="CMS_stream" result="int">
      <arg name="boundary" type="unsigned char ***" m68kreg="a0"/>
      <arg name="cms" type="CMS_ContentInfo *" m68kreg="a1"/>
    </method>
    <method name="ENGINE_pkey_asn1_find_str" result="const EVP_PKEY_ASN1_METHOD *">
      <arg name="pe" type="ENGINE **" m68kreg="a0"/>
      <arg name="str" type="const char *" m68kreg="a1"/>
      <arg name="len" type="int" m68kreg="d0"/>
    </method>
    <method name="ENGINE_get_pkey_meths" result="ENGINE_PKEY_METHS_PTR">
      <arg name="e" type="const ENGINE *" m68kreg="a0"/>
    </method>
    <method name="ENGINE_register_pkey_asn1_meths" result="int">
      <arg name="e" type="ENGINE *" m68kreg="a0"/>
    </method>
    <method name="ENGINE_set_default_pkey_meths" result="int">
      <arg name="e" type="ENGINE *" m68kreg="a0"/>
    </method>
    <method name="HMAC_CTX_copy" result="int">
      <arg name="dctx" type="HMAC_CTX *" m68kreg="a0"/>
      <arg name="sctx" type="HMAC_CTX *" m68kreg="a1"/>
    </method>
    <method name="ENGINE_get_pkey_asn1_meths" result="ENGINE_PKEY_ASN1_METHS_PTR">
      <arg name="e" type="const ENGINE *" m68kreg="a0"/>
    </method>
    <method name="EVP_whirlpool" result="const EVP_MD *">
    </method>
    <method name="ENGINE_register_all_pkey_meths" result="void">
    </method>
    <method name="WHIRLPOOL_Final" result="int">
      <arg name="md" type="unsigned char *" m68kreg="a0"/>
      <arg name="c" type="WHIRLPOOL_CTX *" m68kreg="a1"/>
    </method>
    <method name="ENGINE_get_pkey_asn1_meth_str" result="const EVP_PKEY_ASN1_METHOD *">
      <arg name="e" type="ENGINE *" m68kreg="a0"/>
      <arg name="str" type="const char *" m68kreg="a1"/>
      <arg name="len" type="int" m68kreg="d0"/>
    </method>
    <method name="ENGINE_register_all_pkey_asn1_meths" result="void">
    </method>
    <method name="CMS_ContentInfo_print_ctx" result="void">
      <arg name="out" type="BIO *" m68kreg="a0"/>
      <arg name="cms" type="CMS_ContentInfo *" m68kreg="a1"/>
      <arg name="a" type="int" m68kreg="d0"/>
      <arg name="p" type="void *" m68kreg="a2"/>
    </method>
    <method name="CMS_add1_crl" result="int">
      <arg name="cms" type="CMS_ContentInfo *" m68kreg="a0"/>
      <arg name="crl" type="X509_CRL *" m68kreg="a1"/>
    </method>
    <method name="ENGINE_set_pkey_asn1_meths" result="int">
      <arg name="e" type="ENGINE *" m68kreg="a0"/>
      <arg name="f" type="ENGINE_PKEY_ASN1_METHS_PTR" m68kreg="a1"/>
    </method>
    <method name="ENGINE_get_pkey_meth_engine" result="ENGINE *">
      <arg name="nid" type="int" m68kreg="d0"/>
    </method>
    <method name="WHIRLPOOL_Update" result="int">
      <arg name="c" type="WHIRLPOOL_CTX *" m68kreg="a0"/>
      <arg name="inp" type="const void *" m68kreg="a1"/>
      <arg name="bytes" type="size_t" m68kreg="d0"/>
    </method>
    <method name="PEM_write_bio_CMS_stream" result="int">
      <arg name="out" type="BIO *" m68kreg="a0"/>
      <arg name="cms" type="CMS_ContentInfo *" m68kreg="a1"/>
      <arg name="in" type="BIO *" m68kreg="a2"/>
      <arg name="flags" type="int" m68kreg="d0"/>
    </method>
    <method name="ENGINE_unregister_pkey_meths" result="void">
      <arg name="e" type="ENGINE *" m68kreg="a0"/>
    </method>
    <method name="ENGINE_unregister_pkey_asn1_meths" result="void">
      <arg name="e" type="ENGINE *" m68kreg="a0"/>
    </method>
    <method name="ENGINE_set_pkey_meths" result="int">
      <arg name="e" type="ENGINE *" m68kreg="a0"/>
      <arg name="f" type="ENGINE_PKEY_METHS_PTR" m68kreg="a1"/>
    </method>
    <method name="DSAparams_dup" result="DSA *">
      <arg name="x" type="DSA *" m68kreg="a0"/>
    </method>
    <method name="DHparams_dup" result="DH *">
      <arg name="d" type="DH *" m68kreg="a0"/>
    </method>
    <method name="X509_issuer_name_hash_old" result="unsigned long">
      <arg name="a" type="X509 *" m68kreg="a0"/>
    </method>
    <method name="X509_subject_name_hash_old" result="unsigned long">
      <arg name="x" type="X509 *" m68kreg="a0"/>
    </method>
    <method name="SRP_VBASE_get_by_user" result="SRP_user_pwd *" status="unimplemenented">
      <arg name="vb" type="SRP_VBASE *" m68kreg="a0"/>
      <arg name="username" type="char *" m68kreg="a1"/>
    </method>
    <method name="SRP_Calc_server_key" result="BIGNUM *">
      <arg name="A" type="const BIGNUM *" m68kreg="a0"/>
      <arg name="v" type="const BIGNUM *" m68kreg="a1"/>
      <arg name="u" type="const BIGNUM *" m68kreg="a2"/>
      <arg name="b" type="const BIGNUM *" m68kreg="a3"/>
      <arg name="N" type="const BIGNUM *" m68kreg="d0"/>
    </method>
    <method name="SRP_create_verifier" result="char *">
      <arg name="user" type="const char *" m68kreg="a0"/>
      <arg name="pass" type="const char *" m68kreg="a1"/>
      <arg name="salt" type="char **" m68kreg="a2"/>
      <arg name="verifier" type="char **" m68kreg="a3"/>
      <arg name="N" type="const char *" m68kreg="d0"/>
      <arg name="g" type="const char *" m68kreg="d1"/>
    </method>
    <method name="SRP_create_verifier_BN" result="int">
      <arg name="user" type="const char *" m68kreg="a0"/>
      <arg name="pass" type="const char *" m68kreg="a1"/>
      <arg name="salt" type="BIGNUM **" m68kreg="a2"/>
      <arg name="verifier" type="BIGNUM **" m68kreg="a3"/>
      <arg name="N" type="const BIGNUM *" m68kreg="d0"/>
      <arg name="g" type="const BIGNUM *" m68kreg="d1"/>
    </method>
    <method name="SRP_Calc_u" result="BIGNUM *">
      <arg name="A" type="const BIGNUM *" m68kreg="a0"/>
      <arg name="B" type="const BIGNUM *" m68kreg="a1"/>
      <arg name="N" type="const BIGNUM *" m68kreg="a2"/>
    </method>
    <method name="SRP_VBASE_free" result="void">
      <arg name="vb" type="SRP_VBASE *" m68kreg="a0"/>
    </method>
    <method name="SRP_Calc_client_key" result="BIGNUM *">
      <arg name="N" type="const BIGNUM *" m68kreg="a0"/>
      <arg name="B" type="const BIGNUM *" m68kreg="a1"/>
      <arg name="g" type="const BIGNUM *" m68kreg="a2"/>
      <arg name="x" type="const BIGNUM *" m68kreg="a3"/>
      <arg name="a" type="const BIGNUM *" m68kreg="d0"/>
      <arg name="u" type="const BIGNUM *" m68kreg="d1"/>
    </method>
    <method name="SRP_get_default_gN" result="SRP_gN *">
      <arg name="id" type="const char *" m68kreg="a0"/>
    </method>
    <method name="SRP_Calc_x" result="BIGNUM *">
      <arg name="s" type="const BIGNUM *" m68kreg="a0"/>
      <arg name="user" type="const char *" m68kreg="a1"/>
      <arg name="pass" type="const char *" m68kreg="a2"/>
    </method>
    <method name="SRP_Calc_B" result="BIGNUM *">
      <arg name="b" type="const BIGNUM *" m68kreg="a0"/>
      <arg name="N" type="const BIGNUM *" m68kreg="a1"/>
      <arg name="g" type="const BIGNUM *" m68kreg="a2"/>
      <arg name="v" type="const BIGNUM *" m68kreg="a3"/>
    </method>
    <method name="SRP_VBASE_new" result="SRP_VBASE *">
      <arg name="seed_key" type="char *" m68kreg="a0"/>
    </method>
    <method name="SRP_check_known_gN_param" result="char *">
      <arg name="g" type="const BIGNUM *" m68kreg="a0"/>
      <arg name="N" type="const BIGNUM *" m68kreg="a1"/>
    </method>
    <method name="SRP_Calc_A" result="BIGNUM *">
      <arg name="a" type="const BIGNUM *" m68kreg="a0"/>
      <arg name="N" type="const BIGNUM *" m68kreg="a1"/>
      <arg name="g" type="const BIGNUM *" m68kreg="a2"/>
    </method>
    <method name="SRP_Verify_A_mod_N" result="int">
      <arg name="A" type="const BIGNUM *" m68kreg="a0"/>
      <arg name="N" type="const BIGNUM *" m68kreg="a1"/>
    </method>
    <method name="SRP_VBASE_init" result="int">
      <arg name="vb" type="SRP_VBASE *" m68kreg="a0"/>
      <arg name="verifier_file" type="char *" m68kreg="a1"/>
    </method>
    <method name="SRP_Verify_B_mod_N" result="int">
      <arg name="B" type="const BIGNUM *" m68kreg="a0"/>
      <arg name="N" type="const BIGNUM *" m68kreg="a1"/>
    </method>
    <method name="EC_KEY_set_public_key_affine_coordinates" result="int">
      <arg name="key" type="EC_KEY *" m68kreg="a0"/>
      <arg name="x" type="BIGNUM *" m68kreg="a1"/>
      <arg name="y" type="BIGNUM *" m68kreg="a2"/>
    </method>
    <method name="EVP_aes_192_ctr" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_aes_128_ctr" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_aes_256_ctr" result="const EVP_CIPHER *">
    </method>
    <method name="EC_KEY_get_flags" result="int">
      <arg name="key" type="const EC_KEY *" m68kreg="a0"/>
    </method>
    <method name="EVP_aes_128_xts" result="const EVP_CIPHER *">
    </method>
    <method name="private_AES_set_decrypt_key" result="int" status="unimplemented">
      <arg name="userKey" type="const unsigned char *" m68kreg="a0"/>
      <arg name="bits" type="const int" m68kreg="d0"/>
      <arg name="key" type="AES_KEY *" m68kreg="a1"/>
    </method>
    <method name="EVP_aes_256_xts" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_aes_128_gcm" result="const EVP_CIPHER *">
    </method>
    <method name="EC_KEY_clear_flags" result="void">
      <arg name="key" type="EC_KEY *" m68kreg="a0"/>
      <arg name="flags" type="int" m68kreg="d0"/>
    </method>
    <method name="EC_KEY_set_flags" result="void">
      <arg name="key" type="EC_KEY *" m68kreg="a0"/>
      <arg name="flags" type="int" m68kreg="d0"/>
    </method>
    <method name="EVP_aes_256_ccm" result="const EVP_CIPHER *">
    </method>
    <method name="private_AES_set_encrypt_key" result="int" status="unimplemented">
      <arg name="userKey" type="const unsigned char *" m68kreg="a0"/>
      <arg name="bits" type="const int" m68kreg="d0"/>
      <arg name="key" type="AES_KEY *" m68kreg="a1"/>
    </method>
    <method name="EVP_aes_128_ccm" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_aes_192_gcm" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_aes_256_gcm" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_aes_192_ccm" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_rc4_hmac_md5" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_aes_128_cbc_hmac_sha1" result="const EVP_CIPHER *">
    </method>
    <method name="ENGINE_load_rdrand" result="void" status="unimplemented">
    </method>
    <method name="ENGINE_load_rsax" result="void" status="unimplemented">
    </method>
    <method name="EVP_aes_256_cbc_hmac_sha1" result="const EVP_CIPHER *">
    </method>
    <method name="CMS_add0_recipient_password" result="CMS_RecipientInfo *">
      <arg name="cms" type="CMS_ContentInfo *" m68kreg="a0"/>
      <arg name="iter" type="int" m68kreg="d0"/>
      <arg name="wrap_nid" type="int" m68kreg="d1"/>
      <arg name="pbe_nid" type="int" m68kreg="d2"/>
      <arg name="pass" type="unsigned char *" m68kreg="a1"/>
      <arg name="passlen" type="ossl_ssize_t" m68kreg="d3"/>
      <arg name="kekciph" type="const EVP_CIPHER *" m68kreg="a2"/>
    </method>
    <method name="CMS_decrypt_set1_password" result="int">
      <arg name="cms" type="CMS_ContentInfo *" m68kreg="a0"/>
      <arg name="pass" type="unsigned char *" m68kreg="a1"/>
      <arg name="passlen" type="ossl_ssize_t" m68kreg="d0"/>
    </method>
    <method name="CMS_RecipientInfo_set0_password" result="int">
      <arg name="ri" type="CMS_RecipientInfo *" m68kreg="a0"/>
      <arg name="pass" type="unsigned char *" m68kreg="a1"/>
      <arg name="passlen" type="ossl_ssize_t" m68kreg="d0"/>
    </method>
    <method name="X509_REQ_sign_ctx" result="int">
      <arg name="x" type="X509_REQ *" m68kreg="a0"/>
      <arg name="ctx" type="EVP_MD_CTX *" m68kreg="a1"/>
    </method>
    <method name="X509_CRL_sign_ctx" result="int">
      <arg name="x" type="X509_CRL *" m68kreg="a0"/>
      <arg name="ctx" type="EVP_MD_CTX *" m68kreg="a1"/>
    </method>
    <method name="X509_signature_dump" result="int">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="sig" type="const ASN1_STRING *" m68kreg="a1"/>
      <arg name="indent" type="int" m68kreg="d0"/>
    </method>
    <method name="X509_sign_ctx" result="int">
      <arg name="x" type="X509 *" m68kreg="a0"/>
      <arg name="ctx" type="EVP_MD_CTX *" m68kreg="a1"/>
    </method>
    <method name="ASN1_item_sign_ctx" result="int">
      <arg name="it" type="const ASN1_ITEM *" m68kreg="a0"/>
      <arg name="algor1" type="X509_ALGOR *" m68kreg="a1"/>
      <arg name="algor2" type="X509_ALGOR *" m68kreg="a2"/>
      <arg name="signature" type="ASN1_BIT_STRING *" m68kreg="a3"/>
      <arg name="asn" type="void *" m68kreg="d0"/>
      <arg name="ctx" type="EVP_MD_CTX *" m68kreg="d1"/>
    </method>
    <method name="OPENSSL_cpuid_setup" result="void" status="unimplemented">
    </method>
    <method name="ERR_remove_thread_state" result="void" status="unimplemented">
    </method>
    <method name="X509_STORE_CTX_set0_crls" result="void">
      <arg name="ctx" type="X509_STORE_CTX *" m68kreg="a0"/>
      <arg name="sk" type="STACK_OF(X509_CRL) *" m68kreg="a1"/>
    </method>
    <method name="SSL_SESSION_get_id" result="const unsigned char *">
      <arg name="s" type="const SSL_SESSION *" m68kreg="a0"/>
      <arg name="len" type="unsigned int *" m68kreg="a1"/>
    </method>
    <method name="SSL_CTX_sess_set_new_cb" result="void">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
      <arg name="new_session_cb" type="int (*)(struct ssl_st *ssl, SSL_SESSION *sess)" m68kreg="a1"/>
    </method>
    <method name="SSL_CTX_sess_get_get_cb" result="SSL_SESSION *(*)(SSL *, const unsigned char *, int, int *)">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
    </method>
    <method name="SSL_CTX_sess_set_get_cb" result="void">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
      <arg name="get_session_cb" type="SSL_SESSION *(*)(SSL *, const unsigned char *, int, int *)" m68kreg="a1"/>
    </method>
    <method name="SSL_CTX_get_info_callback" result="void (*)(const SSL *ssl,int type,int val)">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
    </method>
    <method name="SSL_CTX_set_client_cert_cb" result="void">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
      <arg name="client_cert_cb" type="int (*)(SSL *ssl, X509 **x509, EVP_PKEY **pkey)" m68kreg="a1"/>
    </method>
    <method name="SSL_CTX_sess_set_remove_cb" result="void">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
      <arg name="remove_session_cb" type="void (*)(struct ssl_ctx_st *ctx,SSL_SESSION *sess)" m68kreg="a1"/>
    </method>
    <method name="SSL_CTX_sess_get_new_cb" result="int (*)(struct ssl_st *ssl, SSL_SESSION *sess)">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
    </method>
    <method name="SSL_CTX_get_client_cert_cb" result="int (*)(SSL *ssl, X509 **x509, EVP_PKEY **pkey)">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
    </method>
    <method name="SSL_CTX_sess_get_remove_cb" result="void (*)(struct ssl_ctx_st *ctx, SSL_SESSION *sess)">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
    </method>
    <method name="PEM_write_bio_SSL_SESSION" result="int">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="x" type="SSL_SESSION *" m68kreg="a1"/>
    </method>
    <method name="PEM_read_SSL_SESSION" result="SSL_SESSION *" status="unimplemented">
      <arg name="fp" type="FILE *" m68kreg="a0"/>
      <arg name="x" type="SSL_SESSION **" m68kreg="a1"/>
      <arg name="cb" type="pem_password_cb *" m68kreg="a2"/>
      <arg name="u" type="void *" m68kreg="a3"/>
    </method>
    <method name="PEM_read_bio_SSL_SESSION" result="SSL_SESSION *">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="x" type="SSL_SESSION **" m68kreg="a1"/>
      <arg name="cb" type="pem_password_cb *" m68kreg="a2"/>
      <arg name="u" type="void *" m68kreg="a3"/>
    </method>
    <method name="PEM_write_SSL_SESSION" result="int" status="unimplemented">
      <arg name="fp" type="FILE *" m68kreg="a0"/>
      <arg name="x" type="SSL_SESSION *" m68kreg="a1"/>
    </method>
    <method name="PEM_read_PKCS7" result="PKCS7 *" status="unimplemented">
      <arg name="fp" type="FILE *" m68kreg="a0"/>
      <arg name="x" type="PKCS7 **" m68kreg="a1"/>
      <arg name="cb" type="pem_password_cb *" m68kreg="a2"/>
      <arg name="u" type="void *" m68kreg="a3"/>
    </method>
    <method name="PEM_read_PrivateKey" result="EVP_PKEY *" status="unimplemented">
      <arg name="fp" type="FILE *" m68kreg="a0"/>
      <arg name="x" type="EVP_PKEY **" m68kreg="a1"/>
      <arg name="cb" type="pem_password_cb *" m68kreg="a2"/>
      <arg name="u" type="void *" m68kreg="a3"/>
    </method>
    <method name="PEM_read_RSAPrivateKey" result="RSA *" status="unimplemented">
      <arg name="fp" type="FILE *" m68kreg="a0"/>
      <arg name="x" type="RSA **" m68kreg="a1"/>
      <arg name="cb" type="pem_password_cb *" m68kreg="a2"/>
      <arg name="u" type="void *" m68kreg="a3"/>
    </method>
    <method name="PEM_read_X509" result="X509 *" status="unimplemented">
      <arg name="fp" type="FILE *" m68kreg="a0"/>
      <arg name="x" type="X509 **" m68kreg="a1"/>
      <arg name="cb" type="pem_password_cb *" m68kreg="a2"/>
      <arg name="u" type="void *" m68kreg="a3"/>
    </method>
    <method name="PEM_read_X509_CRL" result="X509_CRL *" status="unimplemented">
      <arg name="fp" type="FILE *" m68kreg="a0"/>
      <arg name="x" type="X509_CRL **" m68kreg="a1"/>
      <arg name="cb" type="pem_password_cb *" m68kreg="a2"/>
      <arg name="u" type="void *" m68kreg="a3"/>
    </method>
    <method name="PEM_read_X509_REQ" result="X509_REQ *" status="unimplemented">
      <arg name="fp" type="FILE *" m68kreg="a0"/>
      <arg name="x" type="X509_REQ **" m68kreg="a1"/>
      <arg name="cb" type="pem_password_cb *" m68kreg="a2"/>
      <arg name="u" type="void *" m68kreg="a3"/>
    </method>
    <method name="PEM_write_PKCS7" result="int" status="unimplemented">
      <arg name="fp" type="FILE *" m68kreg="a0"/>
      <arg name="x" type="PKCS7 *" m68kreg="a1"/>
    </method>
    <method name="PEM_write_PrivateKey" result="int" status="unimplemented">
      <arg name="fp" type="FILE *" m68kreg="a0"/>
      <arg name="x" type="EVP_PKEY *" m68kreg="a1"/>
      <arg name="enc" type="const EVP_CIPHER *" m68kreg="a2"/>
      <arg name="kstr" type="unsigned char *" m68kreg="a3"/>
      <arg name="klen" type="int" m68kreg="d0"/>
      <arg name="cb" type="pem_password_cb *" m68kreg="d1"/>
      <arg name="u" type="void *" m68kreg="d2"/>
    </method>
    <method name="PEM_write_RSAPrivateKey" result="int" status="unimplemented">
      <arg name="fp" type="FILE *" m68kreg="a0"/>
      <arg name="x" type="RSA *" m68kreg="a1"/>
      <arg name="enc" type="const EVP_CIPHER *" m68kreg="a2"/>
      <arg name="kstr" type="unsigned char *" m68kreg="a3"/>
      <arg name="klen" type="int" m68kreg="d0"/>
      <arg name="cb" type="pem_password_cb *" m68kreg="d1"/>
      <arg name="u" type="void *" m68kreg="d2"/>
    </method>
    <method name="PEM_write_X509" result="int" status="unimplemented">
      <arg name="fp" type="FILE *" m68kreg="a0"/>
      <arg name="x" type="X509 *" m68kreg="a1"/>
    </method>
    <method name="PEM_write_X509_CRL" result="int" status="unimplemented">
      <arg name="fp" type="FILE *" m68kreg="a0"/>
      <arg name="x" type="X509_CRL *" m68kreg="a1"/>
    </method>
    <method name="PEM_write_X509_REQ" result="int" status="unimplemented">
      <arg name="fp" type="FILE *" m68kreg="a0"/>
      <arg name="x" type="X509_REQ *" m68kreg="a1"/>
    </method>
    <method name="PEM_read_RSAPublicKey" result="RSA *" status="unimplemented">
      <arg name="fp" type="FILE *" m68kreg="a0"/>
      <arg name="x" type="RSA **" m68kreg="a1"/>
      <arg name="cb" type="pem_password_cb *" m68kreg="a2"/>
      <arg name="u" type="void *" m68kreg="a3"/>
    </method>
    <method name="PEM_write_RSAPublicKey" result="int" status="unimplemented">
      <arg name="fp" type="FILE *" m68kreg="a0"/>
      <arg name="x" type="RSA *" m68kreg="a1"/>
    </method>
    <method name="PEM_read_NETSCAPE_CERT_SEQUENCE" result="NETSCAPE_CERT_SEQUENCE *" status="unimplemented">
      <arg name="fp" type="FILE *" m68kreg="a0"/>
      <arg name="x" type="NETSCAPE_CERT_SEQUENCE **" m68kreg="a1"/>
      <arg name="cb" type="pem_password_cb *" m68kreg="a2"/>
      <arg name="u" type="void *" m68kreg="a3"/>
    </method>
    <method name="PEM_write_NETSCAPE_CERT_SEQUENCE" result="int" status="unimplemented">
      <arg name="fp" type="FILE *" m68kreg="a0"/>
      <arg name="x" type="NETSCAPE_CERT_SEQUENCE *" m68kreg="a1"/>
    </method>
    <method name="X509V3_EXT_print_fp" result="int" status="unimplemented">
      <arg name="out" type="FILE *" m68kreg="a0"/>
      <arg name="ext" type="X509_EXTENSION *" m68kreg="a1"/>
      <arg name="flag" type="int" m68kreg="d0"/>
      <arg name="indent" type="int" m68kreg="d0"/>
    </method>
    <method name="i2d_PKCS12_fp" result="int" status="unimplemented">
      <arg name="fp" type="FILE *" m68kreg="a0"/>
      <arg name="p12" type="PKCS12 *" m68kreg="a1"/>
    </method>
    <method name="d2i_PKCS12_fp" result="PKCS12 *" status="unimplemented">
      <arg name="fp" type="FILE *" m68kreg="a0"/>
      <arg name="p12" type="PKCS12 **" m68kreg="a1"/>
    </method>
    <method name="PEM_read_PKCS8" result="X509_SIG *" status="unimplemented">
      <arg name="fp" type="FILE *" m68kreg="a0"/>
      <arg name="x" type="X509_SIG **" m68kreg="a1"/>
      <arg name="cb" type="pem_password_cb *" m68kreg="a2"/>
      <arg name="u" type="void *" m68kreg="a3"/>
    </method>
    <method name="PEM_write_PKCS8" result="int" status="unimplemented">
      <arg name="fp" type="FILE *" m68kreg="a0"/>
      <arg name="x" type="X509_SIG *" m68kreg="a1"/>
    </method>
    <method name="PEM_read_PKCS8_PRIV_KEY_INFO" result="PKCS8_PRIV_KEY_INFO *" status="unimplemented">
      <arg name="fp" type="FILE *" m68kreg="a0"/>
      <arg name="x" type="PKCS8_PRIV_KEY_INFO **" m68kreg="a1"/>
      <arg name="cb" type="pem_password_cb *" m68kreg="a2"/>
      <arg name="u" type="void *" m68kreg="a3"/>
    </method>
    <method name="PEM_write_PKCS8_PRIV_KEY_INFO" result="int" status="unimplemented">
      <arg name="fp" type="FILE *" m68kreg="a0"/>
      <arg name="x" type="PKCS8_PRIV_KEY_INFO *" m68kreg="a1"/>
    </method>
    <method name="PEM_write_PKCS8PrivateKey" result="int" status="unimplemented">
      <arg name="fp" type="FILE *" m68kreg="a0"/>
      <arg name="x" type="EVP_PKEY *" m68kreg="a1"/>
      <arg name="enc" type="const EVP_CIPHER *" m68kreg="a2"/>
      <arg name="kstr" type="char *" m68kreg="a3"/>
      <arg name="klen" type="int" m68kreg="d0"/>
      <arg name="cb" type="pem_password_cb *" m68kreg="d1"/>
      <arg name="u" type="void *" m68kreg="d2"/>
    </method>
    <method name="PEM_read_X509_AUX" result="X509 *" status="unimplemented">
      <arg name="fp" type="FILE *" m68kreg="a0"/>
      <arg name="x" type="X509 **" m68kreg="a1"/>
      <arg name="cb" type="pem_password_cb *" m68kreg="a2"/>
      <arg name="u" type="void *" m68kreg="a3"/>
    </method>
    <method name="PEM_write_PUBKEY" result="int" status="unimplemented">
      <arg name="fp" type="FILE *" m68kreg="a0"/>
      <arg name="x" type="EVP_PKEY *" m68kreg="a1"/>
    </method>
    <method name="PEM_read_RSA_PUBKEY" result="RSA *" status="unimplemented">
      <arg name="fp" type="FILE *" m68kreg="a0"/>
      <arg name="x" type="RSA **" m68kreg="a1"/>
      <arg name="cb" type="pem_password_cb *" m68kreg="a2"/>
      <arg name="u" type="void *" m68kreg="a3"/>
    </method>
    <method name="PEM_read_PUBKEY" result="EVP_PKEY *" status="unimplemented">
      <arg name="fp" type="FILE *" m68kreg="a0"/>
      <arg name="x" type="EVP_PKEY **" m68kreg="a1"/>
      <arg name="cb" type="pem_password_cb *" m68kreg="a2"/>
      <arg name="u" type="void *" m68kreg="a3"/>
    </method>
    <method name="PEM_write_X509_AUX" result="int" status="unimplemented">
      <arg name="fp" type="FILE *" m68kreg="a0"/>
      <arg name="x" type="X509 *" m68kreg="a1"/>
    </method>
    <method name="PEM_write_RSA_PUBKEY" result="int" status="unimplemented">
      <arg name="fp" type="FILE *" m68kreg="a0"/>
      <arg name="x" type="RSA *" m68kreg="a1"/>
    </method>
    <method name="PEM_write_PKCS8PrivateKey_nid" result="int" status="unimplemented">
      <arg name="fp" type="FILE *" m68kreg="a0"/>
      <arg name="x" type="EVP_PKEY *" m68kreg="a1"/>
      <arg name="nid" type="int" m68kreg="a2"/>
      <arg name="kstr" type="char *" m68kreg="a3"/>
      <arg name="klen" type="int" m68kreg="d0"/>
      <arg name="cb" type="pem_password_cb *" m68kreg="d1"/>
      <arg name="u" type="void *" m68kreg="d2"/>
    </method>
    <method name="i2d_PKCS8PrivateKey_fp" result="int" status="unimplemented">
      <arg name="fp" type="FILE *" m68kreg="a0"/>
      <arg name="x" type="EVP_PKEY *" m68kreg="a1"/>
      <arg name="enc" type="const EVP_CIPHER *" m68kreg="a2"/>
      <arg name="kstr" type="char *" m68kreg="a3"/>
      <arg name="klen" type="int" m68kreg="d0"/>
      <arg name="cb" type="pem_password_cb *" m68kreg="d1"/>
      <arg name="u" type="void *" m68kreg="d2"/>
    </method>
    <method name="i2d_PKCS8PrivateKey_nid_fp" result="int" status="unimplemented">
      <arg name="fp" type="FILE *" m68kreg="a0"/>
      <arg name="x" type="EVP_PKEY *" m68kreg="a1"/>
      <arg name="nid" type="int" m68kreg="d0"/>
      <arg name="kstr" type="char *" m68kreg="a2"/>
      <arg name="klen" type="int" m68kreg="d1"/>
      <arg name="cb" type="pem_password_cb *" m68kreg="a3"/>
      <arg name="u" type="void *" m68kreg="d2"/>
    </method>
    <method name="d2i_PKCS8PrivateKey_fp" result="EVP_PKEY *" status="unimplemented">
      <arg name="fp" type="FILE *" m68kreg="a0"/>
      <arg name="x" type="EVP_PKEY **" m68kreg="a1"/>
      <arg name="cb" type="pem_password_cb *" m68kreg="a2"/>
      <arg name="u" type="void *" m68kreg="a3"/>
    </method>
    <method name="PEM_write_X509_REQ_NEW" result="int" status="unimplemented">
      <arg name="fp" type="FILE *" m68kreg="a0"/>
      <arg name="x" type="X509_REQ *" m68kreg="a1"/>
    </method>
    <method name="CONF_dump_fp" result="int" status="unimplemented">
      <arg name="conf" type="LHASH_OF(CONF_VALUE) *" m68kreg="a0"/>
      <arg name="out" type="FILE *" m68kreg="a1"/>
    </method>
    <method name="NCONF_dump_fp" result="int" status="unimplemented">
      <arg name="conf" type="const CONF *" m68kreg="a0"/>
      <arg name="out" type="FILE *" m68kreg="a1"/>
    </method>
    <method name="FIPS_mode_set" result="int">
      <arg name="r" type="int" m68kreg="d0"/>
    </method>
    <method name="BN_X931_generate_Xpq" result="int">
      <arg name="Xp" type="BIGNUM *" m68kreg="a0"/>
      <arg name="Xq" type="BIGNUM *" m68kreg="a1"/>
      <arg name="nbits" type="int" m68kreg="d0"/>
      <arg name="ctx" type="BN_CTX *" m68kreg="a2"/>
    </method>
    <method name="BN_get0_nist_prime_384" result="const BIGNUM *">
    </method>
    <method name="ERR_set_mark" result="int">
    </method>
    <method name="BN_BLINDING_invert_ex" result="int">
      <arg name="n" type="BIGNUM *" m68kreg="a0"/>
      <arg name="r" type="const BIGNUM *" m68kreg="a1"/>
      <arg name="b" type="BN_BLINDING *" m68kreg="a2"/>
      <arg name="ctx" type="BN_CTX *" m68kreg="a3"/>
    </method>
    <method name="NAME_CONSTRAINTS_free" result="void">
      <arg name="ncons" type="NAME_CONSTRAINTS *" m68kreg="a0"/>
    </method>
    <method name="X509_STORE_CTX_set0_param" result="void">
      <arg name="ctx" type="X509_STORE_CTX *" m68kreg="a0"/>
      <arg name="param" type="X509_VERIFY_PARAM *" m68kreg="a1"/>
    </method>
    <method name="POLICY_CONSTRAINTS_free" result="void">
      <arg name="pcons" type="POLICY_CONSTRAINTS *" m68kreg="a0"/>
    </method>
    <method name="BN_nist_mod_192" result="int">
      <arg name="r" type="BIGNUM *" m68kreg="a0"/>
      <arg name="a" type="const BIGNUM *" m68kreg="a1"/>
      <arg name="p" type="const BIGNUM *" m68kreg="a2"/>
      <arg name="ctx" type="BN_CTX *" m68kreg="a3"/>
    </method>
    <method name="GENERAL_SUBTREE_free" result="void">
      <arg name="sub" type="GENERAL_SUBTREE *" m68kreg="a0"/>
    </method>
    <method name="PKCS12_add_safe" result="int">
      <arg name="psafes" type="STACK_OF(PKCS7) **" m68kreg="a0"/>
      <arg name="bags" type="STACK_OF(PKCS12_SAFEBAG) *" m68kreg="a1"/>
      <arg name="safe_nid" type="int" m68kreg="d0"/>
      <arg name="iter" type="int" m68kreg="d1"/>
      <arg name="pass" type="const char *" m68kreg="a2"/>
    </method>
    <method name="BN_get0_nist_prime_192" result="const BIGNUM *">
    </method>
    <method name="X509_keyid_get0" result="unsigned char *">
      <arg name="x" type="X509 *" m68kreg="a0"/>
      <arg name="len" type="int *" m68kreg="a1"/>
    </method>
    <method name="pitem_new" result="pitem *" status="unimplemented">
      <arg name="prio64be" type="unsigned char *" m68kreg="a0"/>
      <arg name="data" type="void *" m68kreg="a1"/>
    </method>
    <method name="X509_policy_node_get0_parent" result="const X509_POLICY_NODE *">
      <arg name="node" type="const X509_POLICY_NODE *" m68kreg="a0"/>
    </method>
    <method name="a2i_IPADDRESS" result="ASN1_OCTET_STRING *">
      <arg name="ipasc" type="const char *" m68kreg="a0"/>
    </method>
    <method name="X509_STORE_CTX_set_depth" result="void">
      <arg name="ctx" type="X509_STORE_CTX *" m68kreg="a0"/>
      <arg name="depth" type="int" m68kreg="d0"/>
    </method>
    <method name="X509_VERIFY_PARAM_inherit" result="int">
      <arg name="to" type="X509_VERIFY_PARAM *" m68kreg="a0"/>
      <arg name="from" type="const X509_VERIFY_PARAM *" m68kreg="a1"/>
    </method>
    <method name="pqueue_iterator" result="pitem *" status="unimplemented">
      <arg name="pq" type="pqueue" m68kreg="a0"/>
    </method>
    <method name="X509_VERIFY_PARAM_set_depth" result="void">
      <arg name="param" type="X509_VERIFY_PARAM *" m68kreg="a0"/>
      <arg name="depth" type="int" m68kreg="d0"/>
    </method>
    <method name="EVP_PKEY_add1_attr_by_txt" result="int">
      <arg name="key" type="EVP_PKEY *" m68kreg="a0"/>
      <arg name="attrname" type="const char *" m68kreg="a1"/>
      <arg name="type" type="int" m68kreg="d0"/>
      <arg name="bytes" type="const unsigned char *" m68kreg="a2"/>
      <arg name="len" type="int" m68kreg="d1"/>
    </method>
    <method name="BN_BLINDING_set_flags" result="void">
      <arg name="b" type="BN_BLINDING *" m68kreg="a0"/>
      <arg name="l" type="unsigned long" m68kreg="d0"/>
    </method>
    <method name="X509_VERIFY_PARAM_set1_policies" result="int">
      <arg name="param" type="X509_VERIFY_PARAM *" m68kreg="a0"/>
      <arg name="policies" type="STACK_OF(ASN1_OBJECT) *" m68kreg="a1"/>
    </method>
    <method name="X509_VERIFY_PARAM_set1_name" result="int">
      <arg name="param" type="X509_VERIFY_PARAM *" m68kreg="a0"/>
      <arg name="name" type="const char *" m68kreg="a1"/>
    </method>
    <method name="POLICY_MAPPING_free" result="void">
      <arg name="pmap" type="POLICY_MAPPING *" m68kreg="a0"/>
    </method>
    <method name="pqueue_print" result="void" status="unimplemented">
      <arg name="pq" type="pqueue" m68kreg="a0"/>
    </method>
    <method name="PEM_write_bio_X509_CERT_PAIR" result="int" status="unimplemented">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="x" type="X509_CERT_PAIR *" m68kreg="a1"/>
    </method>
    <method name="EVP_PKEY_cmp" result="int">
      <arg name="a" type="const EVP_PKEY *" m68kreg="a0"/>
      <arg name="b" type="const EVP_PKEY *" m68kreg="a1"/>
    </method>
    <method name="X509_policy_level_node_count" result="int">
      <arg name="level" type="X509_POLICY_LEVEL *" m68kreg="a0"/>
    </method>
    <method name="EVP_PKEY_get_attr" result="X509_ATTRIBUTE *">
      <arg name="key" type="const EVP_PKEY *" m68kreg="a0"/>
      <arg name="loc" type="int" m68kreg="d0"/>
    </method>
    <method name="GENERAL_SUBTREE_new" result="GENERAL_SUBTREE *">
    </method>
    <method name="X509_policy_node_get0_qualifiers" result="STACK_OF(POLICYQUALINFO) *">
      <arg name="node" type="const X509_POLICY_NODE *" m68kreg="a0"/>
    </method>
    <method name="pqueue_find" result="pitem *" status="unimplemented">
      <arg name="pq" type="pqueue" m68kreg="a0"/>
      <arg name="prio64be" type="unsigned char *" m68kreg="a1"/>
    </method>
    <method name="pqueue_peek" result="pitem *" status="unimplemented">
      <arg name="pq" type="pqueue" m68kreg="a0"/>
    </method>
    <method name="X509_policy_node_get0_policy" result="const ASN1_OBJECT *">
      <arg name="node" type="const X509_POLICY_NODE *" m68kreg="a0"/>
    </method>
    <method name="PKCS12_add_safes" result="PKCS12 *">
      <arg name="safes" type="STACK_OF(PKCS7) *" m68kreg="a0"/>
      <arg name="p7_nid" type="int" m68kreg="d0"/>
    </method>
    <method name="BN_BLINDING_convert_ex" result="int">
      <arg name="n" type="BIGNUM *" m68kreg="a0"/>
      <arg name="r" type="BIGNUM *" m68kreg="a1"/>
      <arg name="b" type="BN_BLINDING *" m68kreg="a2"/>
      <arg name="ctx" type="BN_CTX *" m68kreg="a3"/>
    </method>
    <method name="X509_policy_tree_free" result="void">
      <arg name="tree" type="X509_POLICY_TREE *" m68kreg="a0"/>
    </method>
    <method name="OPENSSL_ia32cap_loc" result="unsigned int *" status="unimplemented">
    </method>
    <method name="BN_get0_nist_prime_224" result="const BIGNUM *">
    </method>
    <method name="BN_GENCB_call" result="int">
      <arg name="cb" type="BN_GENCB *" m68kreg="a0"/>
      <arg name="a" type="int" m68kreg="d0"/>
      <arg name="b" type="int" m68kreg="d1"/>
    </method>
    <method name="NAME_CONSTRAINTS_new" result="NAME_CONSTRAINTS *">
    </method>
    <method name="ECParameters_print" result="int">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="key" type="const EC_KEY *" m68kreg="a1"/>
    </method>
    <method name="BUF_memdup" result="void *" status="unimplemented">
      <arg name="data" type="const void *" m68kreg="a0"/>
      <arg name="siz" type="size_t" m68kreg="d0"/>
    </method>
    <method name="X509_VERIFY_PARAM_set_trust" result="int">
      <arg name="param" type="X509_VERIFY_PARAM *" m68kreg="a0"/>
      <arg name="trust" type="int" m68kreg="d0"/>
    </method>
    <method name="EVP_PKEY_get_attr_count" result="int">
      <arg name="key" type="const EVP_PKEY *" m68kreg="a0"/>
    </method>
    <method name="X509_STORE_CTX_get0_param" result="X509_VERIFY_PARAM *">
      <arg name="ctx" type="X509_STORE_CTX *" m68kreg="a0"/>
    </method>
    <method name="PEM_read_X509_CERT_PAIR" result="X509_CERT_PAIR *" status="unimplemented">
      <arg name="fp" type="FILE *" m68kreg="a0"/>
      <arg name="x" type="X509_CERT_PAIR **" m68kreg="a1"/>
      <arg name="cb" type="pem_password_cb *" m68kreg="a2"/>
      <arg name="u" type="void *" m68kreg="a3"/>
    </method>
    <method name="X509_STORE_set_depth" result="int">
      <arg name="store" type="X509_STORE *" m68kreg="a0"/>
      <arg name="depth" type="int" m68kreg="d0"/>
    </method>
    <method name="BUF_strndup" result="char *" status="unimplemented">
      <arg name="str" type="const char *" m68kreg="a0"/>
      <arg name="siz" type="size_t" m68kreg="d0"/>
    </method>
    <method name="ASN1_put_eoc" result="int">
      <arg name="pp" type="unsigned char **" m68kreg="a0"/>
    </method>
    <method name="X509_VERIFY_PARAM_table_cleanup" result="void">
    </method>
    <method name="RSA_setup_blinding" result="BN_BLINDING *">
      <arg name="rsa" type="RSA *" m68kreg="a0"/>
      <arg name="ctx" type="BN_CTX *" m68kreg="a1"/>
    </method>
    <method name="OPENSSL_sk_find_ex" result="int">
      <arg name="st" type="OPENSSL_STACK *" m68kreg="a0"/>
      <arg name="data" type="const void *" m68kreg="a1"/>
    </method>
    <method name="POLICY_CONSTRAINTS_new" result="POLICY_CONSTRAINTS *">
    </method>
    <method name="X509_VERIFY_PARAM_get_depth" result="int">
      <arg name="param" type="const X509_VERIFY_PARAM *" m68kreg="a0"/>
    </method>
    <method name="ASN1_item_ndef_i2d" result="int">
      <arg name="val" type="ASN1_VALUE *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
      <arg name="it" type="const ASN1_ITEM *" m68kreg="a2"/>
    </method>
    <method name="ERR_pop_to_mark" result="int">
    </method>
    <method name="X509_policy_level_get0_node" result="X509_POLICY_NODE *">
      <arg name="level" type="X509_POLICY_LEVEL *" m68kreg="a0"/>
      <arg name="i" type="int" m68kreg="d0"/>
    </method>
    <method name="i2d_PKCS7_NDEF" result="int">
      <arg name="a" type="PKCS7 *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="ASN1_generate_v3" result="ASN1_TYPE *">
      <arg name="str" type="const char *" m68kreg="a0"/>
      <arg name="cnf" type="X509V3_CTX *" m68kreg="a1"/>
    </method>
    <method name="X509_policy_tree_level_count" result="int">
      <arg name="tree" type="const X509_POLICY_TREE *" m68kreg="a0"/>
    </method>
    <method name="X509_CERT_PAIR_free" result="void" status="unimplemented">
      <arg name="pair" type="X509_CERT_PAIR *" m68kreg="a0"/>
    </method>
    <method name="BN_nist_mod_224" result="int">
      <arg name="r" type="BIGNUM *" m68kreg="a0"/>
      <arg name="a" type="const BIGNUM *" m68kreg="a1"/>
      <arg name="p" type="const BIGNUM *" m68kreg="a2"/>
      <arg name="ctx" type="BN_CTX *" m68kreg="a3"/>
    </method>
    <method name="BIO_dgram_non_fatal_error" result="int">
      <arg name="error" type="int" m68kreg="d0"/>
    </method>
    <method name="v2i_ASN1_BIT_STRING" result="ASN1_BIT_STRING *">
      <arg name="method" type="X509V3_EXT_METHOD *" m68kreg="a0"/>
      <arg name="ctx" type="X509V3_CTX *" m68kreg="a1"/>
      <arg name="nval" type="STACK_OF(CONF_VALUE) *" m68kreg="a2"/>
    </method>
    <method name="X509_STORE_CTX_set_default" result="int">
      <arg name="ctx" type="X509_STORE_CTX *" m68kreg="a0"/>
      <arg name="name" type="const char *" m68kreg="a1"/>
    </method>
    <method name="X509_VERIFY_PARAM_set1" result="int">
      <arg name="to" type="X509_VERIFY_PARAM *" m68kreg="a0"/>
      <arg name="from" type="const X509_VERIFY_PARAM *" m68kreg="a1"/>
    </method>
    <method name="v2i_GENERAL_NAME_ex" result="GENERAL_NAME *">
      <arg name="out" type="GENERAL_NAME *" m68kreg="a0"/>
      <arg name="method" type="const X509V3_EXT_METHOD *" m68kreg="a1"/>
      <arg name="ctx" type="X509V3_CTX *" m68kreg="a2"/>
      <arg name="cnf" type="CONF_VALUE *" m68kreg="a3"/>
      <arg name="is_nc" type="int" m68kreg="d0"/>
    </method>
    <method name="BN_nist_mod_521" result="int">
      <arg name="r" type="BIGNUM *" m68kreg="a0"/>
      <arg name="a" type="const BIGNUM *" m68kreg="a1"/>
      <arg name="p" type="const BIGNUM *" m68kreg="a2"/>
      <arg name="ctx" type="BN_CTX *" m68kreg="a3"/>
    </method>
    <method name="X509_policy_tree_get0_level" result="X509_POLICY_LEVEL *">
      <arg name="tree" type="const X509_POLICY_TREE *" m68kreg="a0"/>
      <arg name="i" type="int" m68kreg="d0"/>
    </method>
    <method name="ASN1_const_check_infinite_end" result="int">
      <arg name="p" type="const unsigned char **" m68kreg="a0"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="EVP_PKEY_delete_attr" result="X509_ATTRIBUTE *">
      <arg name="key" type="EVP_PKEY *" m68kreg="a0"/>
      <arg name="loc" type="int" m68kreg="d0"/>
    </method>
    <method name="BN_get0_nist_prime_256" result="const BIGNUM *">
    </method>
    <method name="i2v_ASN1_BIT_STRING" result="STACK_OF(CONF_VALUE) *">
      <arg name="method" type="X509V3_EXT_METHOD *" m68kreg="a0"/>
      <arg name="bits" type="ASN1_BIT_STRING *" m68kreg="a1"/>
      <arg name="extlist" type="STACK_OF(CONF_VALUE) *" m68kreg="a2"/>
    </method>
    <method name="BN_nist_mod_384" result="int">
      <arg name="r" type="BIGNUM *" m68kreg="a0"/>
      <arg name="a" type="const BIGNUM *" m68kreg="a1"/>
      <arg name="p" type="const BIGNUM *" m68kreg="a2"/>
      <arg name="ctx" type="BN_CTX *" m68kreg="a3"/>
    </method>
    <method name="i2d_X509_CERT_PAIR" result="int" status="unimplemented">
      <arg name="a" type="X509_CERT_PAIR *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="pqueue_pop" result="pitem *" status="unimplemented">
      <arg name="pq" type="pqueue" m68kreg="a0"/>
    </method>
    <method name="EVP_PKEY_get_attr_by_OBJ" result="int">
      <arg name="key" type="const EVP_PKEY *" m68kreg="a0"/>
      <arg name="obj" type="const ASN1_OBJECT *" m68kreg="a1"/>
      <arg name="lastpos" type="int" m68kreg="d0"/>
    </method>
    <method name="X509_VERIFY_PARAM_lookup" result="const X509_VERIFY_PARAM *">
      <arg name="name" type="const char *" m68kreg="a0"/>
    </method>
    <method name="X509_CERT_PAIR_new" result="X509_CERT_PAIR *" status="unimplemented">
    </method>
    <method name="X509V3_NAME_from_section" result="int">
      <arg name="nm" type="X509_NAME *" m68kreg="a0"/>
      <arg name="dn_sk" type="STACK_OF(CONF_VALUE) *" m68kreg="a1"/>
      <arg name="chtype" type="unsigned long" m68kreg="a2"/>
    </method>
    <method name="EVP_PKEY_add1_attr" result="int">
      <arg name="key" type="EVP_PKEY *" m68kreg="a0"/>
      <arg name="attr" type="X509_ATTRIBUTE *" m68kreg="a1"/>
    </method>
    <method name="PEM_write_X509_CERT_PAIR" result="int" status="unimplemented">
      <arg name="fp" type="FILE *" m68kreg="a0"/>
      <arg name="x" type="X509_CERT_PAIR *" m68kreg="a1"/>
    </method>
    <method name="BIO_dump_indent_cb" result="int">
      <arg name="cb" type="int (*)(const void *data, size_t len, void *u)" m68kreg="a0"/>
      <arg name="u" type="void *" m68kreg="a1"/>
      <arg name="s" type="const char *" m68kreg="a2"/>
      <arg name="len" type="int" m68kreg="d0"/>
      <arg name="indent" type="int" m68kreg="d1"/>
    </method>
    <method name="d2i_X509_CERT_PAIR" result="X509_CERT_PAIR *" status="unimplemented">
      <arg name="a" type="X509_CERT_PAIR **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="asn1_const_Finish" result="int" status="unimplemented">
      <arg name="c" type="ASN1_const_CTX *" m68kreg="a0"/>
    </method>
    <method name="BN_nist_mod_256" result="int">
      <arg name="r" type="BIGNUM *" m68kreg="a0"/>
      <arg name="a" type="const BIGNUM *" m68kreg="a1"/>
      <arg name="p" type="const BIGNUM *" m68kreg="a2"/>
      <arg name="ctx" type="BN_CTX *" m68kreg="a3"/>
    </method>
    <method name="X509_VERIFY_PARAM_add0_table" result="int">
      <arg name="param" type="X509_VERIFY_PARAM *" m68kreg="a0"/>
    </method>
    <method name="pqueue_free" result="void" status="unimplemented">
      <arg name="pq" type="pqueue" m68kreg="a0"/>
    </method>
    <method name="BN_BLINDING_create_param" result="BN_BLINDING *">
      <arg name="b" type="BN_BLINDING *" m68kreg="a0"/>
      <arg name="e" type="const BIGNUM *" m68kreg="a1"/>
      <arg name="m" type="BIGNUM *" m68kreg="a2"/>
      <arg name="ctx" type="BN_CTX *" m68kreg="a3"/>
      <arg name="bn_mod_exp" type="int (*)(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, const BIGNUM *m, BN_CTX *ctx, BN_MONT_CTX *m_ctx)" m68kreg="d0"/>
      <arg name="m_ctx" type="BN_MONT_CTX *" m68kreg="d1"/>
    </method>
    <method name="BN_get0_nist_prime_521" result="const BIGNUM *">
    </method>
    <method name="BN_is_prime_fasttest_ex" result="int">
      <arg name="p" type="const BIGNUM *" m68kreg="a0"/>
      <arg name="nchecks" type="int" m68kreg="d0"/>
      <arg name="ctx" type="BN_CTX *" m68kreg="a1"/>
      <arg name="do_trial_devision" type="int" m68kreg="d1"/>
      <arg name="cb" type="BN_GENCB *" m68kreg="a2"/>
    </method>
    <method name="X509_policy_check" result="int">
      <arg name="ptree" type="X509_POLICY_TREE **" m68kreg="a0"/>
      <arg name="pexplicit_policy" type="int *" m68kreg="a1"/>
      <arg name="certs" type="STACK_OF(X509) *" m68kreg="a2"/>
      <arg name="policy_oids" type="STACK_OF(ASN1_OBJECT) *" m68kreg="a3"/>
      <arg name="flags" type="unsigned int" m68kreg="d0"/>
    </method>
    <method name="EVP_PKEY_get_attr_by_NID" result="int">
      <arg name="key" type="const EVP_PKEY *" m68kreg="a0"/>
      <arg name="nid" type="int" m68kreg="d0"/>
      <arg name="lastpos" type="int" m68kreg="d1"/>
    </method>
    <method name="BN_BLINDING_get_flags" result="unsigned long">
      <arg name="b" type="const BN_BLINDING *" m68kreg="a0"/>
    </method>
    <method name="PKCS12_add_cert" result="PKCS12_SAFEBAG *">
      <arg name="pbags" type="STACK_OF(PKCS12_SAFEBAG) **" m68kreg="a0"/>
      <arg name="cert" type="X509 *" m68kreg="a1"/>
    </method>
    <method name="EVP_CIPHER_CTX_rand_key" result="int">
      <arg name="ctx" type="EVP_CIPHER_CTX *" m68kreg="a0"/>
      <arg name="key" type="unsigned char *" m68kreg="a1"/>
    </method>
    <method name="a2i_IPADDRESS_NC" result="ASN1_OCTET_STRING *">
      <arg name="ipasc" type="const char *" m68kreg="a0"/>
    </method>
    <method name="PKCS7_set_digest" result="int">
      <arg name="p7" type="PKCS7 *" m68kreg="a0"/>
      <arg name="md" type="const EVP_MD *" m68kreg="a1"/>
    </method>
    <method name="POLICY_MAPPING_new" result="POLICY_MAPPING *">
    </method>
    <method name="PKCS7_set0_type_other" result="int">
      <arg name="p7" type="PKCS7 *" m68kreg="a0"/>
      <arg name="type" type="int" m68kreg="d0"/>
      <arg name="other" type="ASN1_TYPE *" m68kreg="a1"/>
    </method>
    <method name="PEM_read_bio_X509_CERT_PAIR" result="X509_CERT_PAIR *" status="unimplemented">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="x" type="X509_CERT_PAIR **" m68kreg="a1"/>
      <arg name="cb" type="pem_password_cb *" m68kreg="a2"/>
      <arg name="u" type="void *" m68kreg="a3"/>
    </method>
    <method name="pqueue_next" result="pitem *" status="unimplemented">
      <arg name="iter" type="piterator *" m68kreg="a0"/>
    </method>
    <method name="EVP_PKEY_add1_attr_by_OBJ" result="int">
      <arg name="key" type="EVP_PKEY *" m68kreg="a0"/>
      <arg name="obj" type="const ASN1_OBJECT *" m68kreg="a1"/>
      <arg name="type" type="int" m68kreg="d0"/>
      <arg name="bytes" type="const unsigned char *" m68kreg="a2"/>
      <arg name="len" type="int" m68kreg="d1"/>
    </method>
    <method name="X509_VERIFY_PARAM_set_time" result="void">
      <arg name="param" type="X509_VERIFY_PARAM *" m68kreg="a0"/>
      <arg name="t" type="time_t" m68kreg="d0"/>
    </method>
    <method name="pqueue_new" result="pqueue" status="unimplemented">
    </method>
    <method name="PKCS12_add_key" result="PKCS12_SAFEBAG *">
      <arg name="pbags" type="STACK_OF(PKCS12_SAFEBAG) **" m68kreg="a0"/>
      <arg name="key" type="EVP_PKEY *" m68kreg="a1"/>
      <arg name="key_usage" type="int" m68kreg="d0"/>
      <arg name="iter" type="int" m68kreg="d1"/>
      <arg name="key_nid" type="int" m68kreg="d2"/>
      <arg name="pass" type="const char *" m68kreg="a2"/>
    </method>
    <method name="DSO_merge" result="char *" status="unimplemented">
      <arg name="dso" type="DSO *" m68kreg="a0"/>
      <arg name="filespec1" type="const char *" m68kreg="a1"/>
      <arg name="filespec2" type="const char *" m68kreg="a2"/>
    </method>
    <method name="BIO_dump_cb" result="int">
      <arg name="cb" type="int (*)(const void *data, size_t len, void *u)" m68kreg="a0"/>
      <arg name="u" type="void *" m68kreg="a1"/>
      <arg name="s" type="const char *" m68kreg="a2"/>
      <arg name="len" type="int" m68kreg="a3"/>
    </method>
    <method name="pqueue_insert" result="pitem *" status="unimplemented">
      <arg name="pq" type="pqueue" m68kreg="a0"/>
      <arg name="item" type="pitem *" m68kreg="a1"/>
    </method>
    <method name="pitem_free" result="void" status="unimplemented">
      <arg name="item" type="pitem *" m68kreg="a0"/>
    </method>
    <method name="BN_get_rfc3526_prime_8192" result="BIGNUM *">
      <arg name="bn" type="BIGNUM *" m68kreg="a0"/>
    </method>
    <method name="X509_VERIFY_PARAM_clear_flags" result="int">
      <arg name="param" type="X509_VERIFY_PARAM *" m68kreg="a0"/>
      <arg name="flags" type="unsigned long" m68kreg="d0"/>
    </method>
    <method name="BN_get_rfc2409_prime_1024" result="BIGNUM *">
      <arg name="bn" type="BIGNUM *" m68kreg="a0"/>
    </method>
    <method name="BN_get_rfc3526_prime_2048" result="BIGNUM *">
      <arg name="bn" type="BIGNUM *" m68kreg="a0"/>
    </method>
    <method name="BN_get_rfc3526_prime_6144" result="BIGNUM *">
      <arg name="bn" type="BIGNUM *" m68kreg="a0"/>
    </method>
    <method name="BN_get_rfc3526_prime_1536" result="BIGNUM *">
      <arg name="bn" type="BIGNUM *" m68kreg="a0"/>
    </method>
    <method name="BN_get_rfc3526_prime_3072" result="BIGNUM *">
      <arg name="bn" type="BIGNUM *" m68kreg="a0"/>
    </method>
    <method name="BN_get_rfc3526_prime_4096" result="BIGNUM *">
      <arg name="bn" type="BIGNUM *" m68kreg="a0"/>
    </method>
    <method name="BN_get_rfc2409_prime_768" result="BIGNUM *">
      <arg name="bn" type="BIGNUM *" m68kreg="a0"/>
    </method>
    <method name="X509_VERIFY_PARAM_get_flags" result="unsigned long">
      <arg name="param" type="X509_VERIFY_PARAM *" m68kreg="a0"/>
    </method>
    <method name="EVP_CIPHER_CTX_new" result="EVP_CIPHER_CTX *">
    </method>
    <method name="EVP_CIPHER_CTX_free" result="void">
      <arg name="a" type="EVP_CIPHER_CTX *" m68kreg="a0"/>
    </method>
    <method name="EVP_CIPHER_block_size" result="int">
      <arg name="cipher" type="const EVP_CIPHER *" m68kreg="a0"/>
    </method>
    <method name="EVP_CIPHER_CTX_set_app_data" result="void">
      <arg name="ctx" type="EVP_CIPHER_CTX *" m68kreg="a0"/>
      <arg name="data" type="void *" m68kreg="a1"/>
    </method>
    <method name="BIO_method_type" result="int">
      <arg name="b" type="const BIO *" m68kreg="a0"/>
    </method>
    <method name="EVP_CIPHER_CTX_nid" result="int">
      <arg name="ctx" type="const EVP_CIPHER_CTX *" m68kreg="a0"/>
    </method>
    <method name="EVP_CIPHER_CTX_key_length" result="int">
      <arg name="ctx" type="const EVP_CIPHER_CTX *" m68kreg="a0"/>
    </method>
    <method name="EVP_MD_size" result="int">
      <arg name="md" type="const EVP_MD *" m68kreg="a0"/>
    </method>
    <method name="EVP_MD_CTX_test_flags" result="int">
      <arg name="ctx" type="const EVP_MD_CTX *" m68kreg="a0"/>
      <arg name="flags" type="int" m68kreg="d0"/>
    </method>
    <method name="BIO_clear_flags" result="void">
      <arg name="b" type="BIO *" m68kreg="a0"/>
      <arg name="flags" type="int" m68kreg="d0"/>
    </method>
    <method name="EVP_MD_pkey_type" result="int">
      <arg name="md" type="const EVP_MD *" m68kreg="a0"/>
    </method>
    <method name="EVP_MD_CTX_clear_flags" result="void">
      <arg name="ctx" type="EVP_MD_CTX *" m68kreg="a0"/>
      <arg name="flags" type="int" m68kreg="d0"/>
    </method>
    <method name="EVP_CIPHER_flags" result="unsigned long">
      <arg name="cipher" type="const EVP_CIPHER *" m68kreg="a0"/>
    </method>
    <method name="BIO_get_callback" result="BIO_callback_fn">
      <arg name="b" type="const BIO *" m68kreg="a0"/>
    </method>
    <method name="EVP_CIPHER_key_length" result="int">
      <arg name="cipher" type="const EVP_CIPHER *" m68kreg="a0"/>
    </method>
    <method name="EVP_Cipher" result="int">
      <arg name="c" type="EVP_CIPHER_CTX *" m68kreg="a0"/>
      <arg name="out" type="unsigned char *" m68kreg="a1"/>
      <arg name="in" type="const unsigned char *" m68kreg="a2"/>
      <arg name="inl" type="unsigned int" m68kreg="d0"/>
    </method>
    <method name="EVP_CIPHER_CTX_block_size" result="int">
      <arg name="ctx" type="const EVP_CIPHER_CTX *" m68kreg="a0"/>
    </method>
    <method name="EVP_CIPHER_CTX_cipher" result="const EVP_CIPHER *">
      <arg name="ctx" type="const EVP_CIPHER_CTX *" m68kreg="a0"/>
    </method>
    <method name="EVP_CIPHER_CTX_get_app_data" result="void *">
      <arg name="ctx" type="const EVP_CIPHER_CTX *" m68kreg="a0"/>
    </method>
    <method name="EVP_MD_block_size" result="int">
      <arg name="md" type="const EVP_MD *" m68kreg="a0"/>
    </method>
    <method name="EVP_CIPHER_CTX_flags" result="unsigned long" status="unimplemented">
      <arg name="ctx" type="const EVP_CIPHER_CTX *" m68kreg="a0"/>
    </method>
    <method name="EVP_MD_CTX_md" result="const EVP_MD *">
      <arg name="ctx" type="const EVP_MD_CTX *" m68kreg="a0"/>
    </method>
    <method name="BIO_method_name" result="const char *">
      <arg name="b" type="const BIO *" m68kreg="a0"/>
    </method>
    <method name="EVP_CIPHER_CTX_iv_length" result="int">
      <arg name="ctx" type="const EVP_CIPHER_CTX *" m68kreg="a0"/>
    </method>
    <method name="CRYPTO_memcmp" result="int">
      <arg name="in_a" type="const void *" m68kreg="a0"/>
      <arg name="in_b" type="const void *" m68kreg="a1"/>
      <arg name="len" type="size_t" m68kreg="d0"/>
    </method>
    <method name="BN_consttime_swap" result="void">
      <arg name="swap" type="BN_ULONG" m68kreg="d0"/>
      <arg name="a" type="BIGNUM *" m68kreg="a0"/>
      <arg name="b" type="BIGNUM *" m68kreg="a1"/>
      <arg name="nwords" type="int" m68kreg="d1"/>
    </method>
    <method name="i2d_X509_EXTENSIONS" result="int">
      <arg name="a" type="X509_EXTENSIONS *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="d2i_X509_EXTENSIONS" result="X509_EXTENSIONS *">
      <arg name="a" type="X509_EXTENSIONS **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="X509_ALGOR_get0" result="void">
      <arg name="pobj" type="const ASN1_OBJECT **" m68kreg="a0"/>
      <arg name="pptype" type="int *" m68kreg="a1"/>
      <arg name="ppval" type="const void **" m68kreg="a2"/>
      <arg name="algor" type="const X509_ALGOR *" m68kreg="a3"/>
    </method>
    <method name="X509_ALGOR_set0" result="int">
      <arg name="alg" type="X509_ALGOR *" m68kreg="a0"/>
      <arg name="aobj" type="ASN1_OBJECT *" m68kreg="a1"/>
      <arg name="ptype" type="int" m68kreg="d0"/>
      <arg name="pval" type="void *" m68kreg="a2"/>
    </method>
    <method name="X509at_get0_data_by_OBJ" result="void *">
      <arg name="x" type="STACK_OF(X509_ATTRIBUTE) *" m68kreg="a0"/>
      <arg name="obj" type="const ASN1_OBJECT *" m68kreg="a1"/>
      <arg name="lastpos" type="int" m68kreg="d0"/>
      <arg name="type" type="int" m68kreg="d1"/>
    </method>
    <method name="ASN1_TYPE_set1" result="int">
      <arg name="a" type="ASN1_TYPE *" m68kreg="a0"/>
      <arg name="type" type="int" m68kreg="d0"/>
      <arg name="value" type="const void *" m68kreg="a1"/>
    </method>
    <method name="ASN1_STRING_set0" result="void">
      <arg name="str" type="ASN1_STRING *" m68kreg="a0"/>
      <arg name="data" type="void *" m68kreg="a1"/>
      <arg name="len" type="int" m68kreg="d0"/>
    </method>
    <method name="i2d_X509_ALGORS" result="int">
      <arg name="a" type="X509_ALGORS *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="COMP_zlib_cleanup" result="void" status="unimplemented">
    </method>
    <method name="d2i_X509_ALGORS" result="X509_ALGORS *">
      <arg name="a" type="X509_ALGORS **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="SMIME_read_ASN1" result="ASN1_VALUE *">
      <arg name="bio" type="BIO *" m68kreg="a0"/>
      <arg name="bcont" type="BIO **" m68kreg="a1"/>
      <arg name="it" type="const ASN1_ITEM *" m68kreg="a2"/>
    </method>
    <method name="OPENSSL_isservice" result="int">
    </method>
    <method name="EVP_CIPHER_CTX_clear_flags" result="void">
      <arg name="ctx" type="EVP_CIPHER_CTX *" m68kreg="a0"/>
      <arg name="flags" type="int" m68kreg="d0"/>
    </method>
    <method name="BN_X931_generate_prime_ex" result="int">
      <arg name="p" type="BIGNUM *" m68kreg="a0"/>
      <arg name="p1" type="BIGNUM *" m68kreg="a1"/>
      <arg name="p2" type="BIGNUM *" m68kreg="a2"/>
      <arg name="Xp1" type="BIGNUM *" m68kreg="a3"/>
      <arg name="Xp2" type="BIGNUM *" m68kreg="d0"/>
      <arg name="Xp" type="const BIGNUM *" m68kreg="d1"/>
      <arg name="e" type="const BIGNUM *" m68kreg="d2"/>
      <arg name="ctx" type="BN_CTX *" m68kreg="d3"/>
      <arg name="cb" type="BN_GENCB *" m68kreg="d4"/>
    </method>
    <method name="EVP_CIPHER_CTX_test_flags" result="int">
      <arg name="ctx" type="const EVP_CIPHER_CTX *" m68kreg="a0"/>
      <arg name="flags" type="int" m68kreg="d0"/>
    </method>
    <method name="EVP_add_alg_module" result="void">
    </method>
    <method name="BN_X931_derive_prime_ex" result="int">
      <arg name="p" type="BIGNUM *" m68kreg="a0"/>
      <arg name="p1" type="BIGNUM *" m68kreg="a1"/>
      <arg name="p2" type="BIGNUM *" m68kreg="a2"/>
      <arg name="Xp" type="const BIGNUM *" m68kreg="d0"/>
      <arg name="Xp1" type="const BIGNUM *" m68kreg="a3"/>
      <arg name="Xp2" type="const BIGNUM *" m68kreg="d1"/>
      <arg name="e" type="const BIGNUM *" m68kreg="d2"/>
      <arg name="ctx" type="BN_CTX *" m68kreg="d3"/>
      <arg name="cb" type="BN_GENCB *" m68kreg="d4"/>
    </method>
    <method name="OPENSSL_init" result="void">
    </method>
    <method name="CRYPTO_strdup" result="char *">
      <arg name="str" type="const char *" m68kreg="a0"/>
      <arg name="file" type="const char *" m68kreg="a1"/>
      <arg name="line" type="int" m68kreg="d0"/>
    </method>
    <method name="pqueue_size" result="int" status="unimplemented">
      <arg name="pq" type="pqueue" m68kreg="a0"/>
    </method>
    <method name="i2d_TS_ACCURACY" result="int">
      <arg name="a" type="const TS_ACCURACY *" m68kreg="a0"/>
      <arg name="pp" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="i2d_TS_MSG_IMPRINT_fp" result="int" status="unimplemented">
      <arg name="fp" type="FILE *" m68kreg="a0"/>
      <arg name="a" type="TS_MSG_IMPRINT *" m68kreg="a0"/>
    </method>
    <method name="i2d_TS_MSG_IMPRINT" result="int">
      <arg name="a" type="const TS_MSG_IMPRINT *" m68kreg="a0"/>
      <arg name="pp" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="EVP_PKEY_print_public" result="int">
      <arg name="out" type="BIO *" m68kreg="a0"/>
      <arg name="pkey" type="const EVP_PKEY *" m68kreg="a1"/>
      <arg name="indent" type="int" m68kreg="d0"/>
      <arg name="pctx" type="ASN1_PCTX *" m68kreg="a2"/>
    </method>
    <method name="EVP_PKEY_CTX_new" result="EVP_PKEY_CTX *">
      <arg name="pkey" type="EVP_PKEY *" m68kreg="a0"/>
      <arg name="e" type="ENGINE *" m68kreg="a1"/>
    </method>
    <method name="i2d_TS_TST_INFO" result="int">
      <arg name="a" type="const TS_TST_INFO *" m68kreg="a0"/>
      <arg name="pp" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="EVP_PKEY_asn1_find" result="const EVP_PKEY_ASN1_METHOD *">
      <arg name="pe" type="ENGINE **" m68kreg="a0"/>
      <arg name="type" type="int" m68kreg="a1"/>
    </method>
    <method name="DSO_METHOD_beos" result="DSO_METHOD *" status="unimplemented">
    </method>
    <method name="TS_CONF_load_cert" result="X509 *">
      <arg name="file" type="const char *" m68kreg="a0"/>
    </method>
    <method name="TS_REQ_get_ext" result="X509_EXTENSION *">
      <arg name="a" type="TS_REQ *" m68kreg="a0"/>
      <arg name="loc" type="int" m68kreg="d0"/>
    </method>
    <method name="EVP_PKEY_sign_init" result="int">
      <arg name="ctx" type="EVP_PKEY_CTX *" m68kreg="a0"/>
    </method>
    <method name="ASN1_item_print" result="int">
      <arg name="out" type="BIO *" m68kreg="a0"/>
      <arg name="ifld" type="ASN1_VALUE *" m68kreg="a1"/>
      <arg name="indent" type="int" m68kreg="d0"/>
      <arg name="it" type="const ASN1_ITEM *" m68kreg="a2"/>
      <arg name="ctx" type="const ASN1_PCTX *" m68kreg="a3"/>
    </method>
    <method name="TS_TST_INFO_set_nonce" result="int">
      <arg name="a" type="TS_TST_INFO *" m68kreg="a0"/>
      <arg name="nonce" type="const ASN1_INTEGER *" m68kreg="a1"/>
    </method>
    <method name="TS_RESP_dup" result="TS_RESP *">
      <arg name="a" type="TS_RESP *" m68kreg="a0"/>
    </method>
    <method name="EVP_PKEY_asn1_add0" result="int">
      <arg name="ameth" type="const EVP_PKEY_ASN1_METHOD *" m68kreg="a0"/>
    </method>
    <method name="PKCS7_add0_attrib_signing_time" result="int">
      <arg name="si" type="PKCS7_SIGNER_INFO *" m68kreg="a0"/>
      <arg name="t" type="ASN1_TIME *" m68kreg="a1"/>
    </method>
    <method name="i2d_TS_TST_INFO_fp" result="int" status="unimplemented">
      <arg name="fp" type="FILE *" m68kreg="a0"/>
      <arg name="a" type="TS_TST_INFO *" m68kreg="a1"/>
    </method>
    <method name="BIO_asn1_get_prefix" result="int">
      <arg name="b" type="BIO *" m68kreg="a0"/>
      <arg name="pprefix" type="asn1_ps_func **" m68kreg="a1"/>
      <arg name="pprefix_free" type="asn1_ps_func **" m68kreg="a2"/>
    </method>
    <method name="TS_TST_INFO_set_time" result="int">
      <arg name="a" type="TS_TST_INFO *" m68kreg="a0"/>
      <arg name="gtime" type="const ASN1_GENERALIZEDTIME *" m68kreg="a1"/>
    </method>
    <method name="EVP_PKEY_meth_set_decrypt" result="void">
      <arg name="pmeth" type="EVP_PKEY_METHOD *" m68kreg="a0"/>
      <arg name="decrypt_init" type="int (*)(EVP_PKEY_CTX *ctx)" m68kreg="a1"/>
      <arg name="decrypt" type="int (*)(EVP_PKEY_CTX *ctx, unsigned char *out, size_t *outlen, const unsigned char *in, size_t inlen)" m68kreg="a2"/>
    </method>
    <method name="EVP_PKEY_set_type_str" result="int">
      <arg name="pkey" type="EVP_PKEY *" m68kreg="a0"/>
      <arg name="str" type="const char *" m68kreg="a1"/>
      <arg name="len" type="int" m68kreg="d0"/>
    </method>
    <method name="EVP_PKEY_CTX_get_keygen_info" result="int">
      <arg name="ctx" type="EVP_PKEY_CTX *" m68kreg="a0"/>
      <arg name="idx" type="int" m68kreg="d0"/>
    </method>
    <method name="TS_REQ_set_policy_id" result="int">
      <arg name="a" type="TS_REQ *" m68kreg="a0"/>
      <arg name="policy" type="const ASN1_OBJECT *" m68kreg="a1"/>
    </method>
    <method name="d2i_TS_RESP_fp" result="TS_RESP *" status="unimplemented">
      <arg name="fp" type="FILE *" m68kreg="a0"/>
      <arg name="a" type="TS_RESP **" m68kreg="a1"/>
    </method>
    <method name="TS_RESP_set_status_info" result="int">
      <arg name="a" type="TS_RESP *" m68kreg="a0"/>
      <arg name="info" type="TS_STATUS_INFO *" m68kreg="a1"/>
    </method>
    <method name="EVP_PKEY_keygen" result="int">
      <arg name="ctx" type="EVP_PKEY_CTX *" m68kreg="a0"/>
      <arg name="ppkey" type="EVP_PKEY **" m68kreg="a1"/>
    </method>
    <method name="EVP_DigestSignInit" result="int">
      <arg name="ctx" type="EVP_MD_CTX *" m68kreg="a0"/>
      <arg name="pctx" type="EVP_PKEY_CTX **" m68kreg="a1"/>
      <arg name="type" type="const EVP_MD *" m68kreg="a2"/>
      <arg name="e" type="ENGINE *" m68kreg="a3"/>
      <arg name="pkey" type="EVP_PKEY *" m68kreg="d0"/>
    </method>
    <method name="TS_ACCURACY_set_millis" result="int">
      <arg name="a" type="TS_ACCURACY *" m68kreg="a0"/>
      <arg name="millis" type="const ASN1_INTEGER *" m68kreg="a1"/>
    </method>
    <method name="TS_REQ_dup" result="TS_REQ *">
      <arg name="a" type="TS_REQ *" m68kreg="a0"/>
    </method>
    <method name="GENERAL_NAME_dup" result="GENERAL_NAME *">
      <arg name="a" type="GENERAL_NAME *" m68kreg="a0"/>
    </method>
    <method name="X509_STORE_CTX_get1_crls" result="STACK_OF(X509_CRL) *">
      <arg name="st" type="X509_STORE_CTX *" m68kreg="a0"/>
      <arg name="nm" type="X509_NAME *" m68kreg="a1"/>
    </method>
    <method name="EVP_PKEY_asn1_new" result="EVP_PKEY_ASN1_METHOD *">
      <arg name="id" type="int" m68kreg="d0"/>
      <arg name="flags" type="int" m68kreg="d1"/>
      <arg name="pem_str" type="const char *" m68kreg="a0"/>
      <arg name="info" type="const char *" m68kreg="a1"/>
    </method>
    <method name="BIO_new_NDEF" result="BIO *">
      <arg name="out" type="BIO *" m68kreg="a0"/>
      <arg name="val" type="ASN1_VALUE *" m68kreg="a1"/>
      <arg name="it" type="const ASN1_ITEM *" m68kreg="a2"/>
    </method>
    <method name="TS_MSG_IMPRINT_set_algo" result="int">
      <arg name="a" type="TS_MSG_IMPRINT *" m68kreg="a0"/>
      <arg name="alg" type="X509_ALGOR *" m68kreg="a1"/>
    </method>
    <method name="i2d_TS_TST_INFO_bio" result="int">
      <arg name="fp" type="BIO *" m68kreg="a0"/>
      <arg name="a" type="TS_TST_INFO *" m68kreg="a1"/>
    </method>
    <method name="TS_TST_INFO_set_ordering" result="int">
      <arg name="a" type="TS_TST_INFO *" m68kreg="a0"/>
      <arg name="ordering" type="int" m68kreg="d0"/>
    </method>
    <method name="TS_TST_INFO_get_ext_by_OBJ" result="int">
      <arg name="a" type="TS_TST_INFO *" m68kreg="a0"/>
      <arg name="obj" type="const ASN1_OBJECT *" m68kreg="a1"/>
      <arg name="lastpos" type="int" m68kreg="d0"/>
    </method>
    <method name="CRYPTO_THREADID_set_pointer" result="void" status="unimplemented">
      <arg name="id" type="CRYPTO_THREADID *" m68kreg="a0"/>
      <arg name="ptr" type="void *" m68kreg="a1"/>
    </method>
    <method name="TS_CONF_get_tsa_section" result="const char *">
      <arg name="conf" type="CONF *" m68kreg="a0"/>
      <arg name="section" type="const char *" m68kreg="a1"/>
    </method>
    <method name="SMIME_write_ASN1" result="int">
      <arg name="bio" type="BIO *" m68kreg="a0"/>
      <arg name="val" type="ASN1_VALUE *" m68kreg="a1"/>
      <arg name="data" type="BIO *" m68kreg="a2"/>
      <arg name="flags" type="int" m68kreg="a3"/>
      <arg name="ctype_nid" type="int" m68kreg="d0"/>
      <arg name="econt_nid" type="int" m68kreg="d1"/>
      <arg name="mdalgs" type="STACK_OF(X509_ALGOR) *" m68kreg="d2"/>
      <arg name="it" type="const ASN1_ITEM *" m68kreg="d3"/>
    </method>
    <method name="TS_RESP_CTX_set_signer_key" result="int">
      <arg name="ctx" type="TS_RESP_CTX *" m68kreg="a0"/>
      <arg name="key" type="EVP_PKEY *" m68kreg="a1"/>
    </method>
    <method name="EVP_PKEY_encrypt_old" result="int">
      <arg name="enc_key" type="unsigned char *" m68kreg="a0"/>
      <arg name="key" type="const unsigned char *" m68kreg="a1"/>
      <arg name="key_len" type="int" m68kreg="d0"/>
      <arg name="pub_key" type="EVP_PKEY *" m68kreg="a2"/>
    </method>
    <method name="EVP_PKEY_encrypt_init" result="int">
      <arg name="ctx" type="EVP_PKEY_CTX *" m68kreg="a0"/>
    </method>
    <method name="CRYPTO_THREADID_cpy" result="void" status="unimplemented">
      <arg name="dest" type="CRYPTO_THREADID *" m68kreg="a0"/>
      <arg name="src" type="const CRYPTO_THREADID *" m68kreg="a1"/>
    </method>
    <method name="ASN1_PCTX_get_cert_flags" result="unsigned long">
      <arg name="p" type="const ASN1_PCTX *" m68kreg="a0"/>
    </method>
    <method name="i2d_ESS_SIGNING_CERT" result="int">
      <arg name="a" type="const ESS_SIGNING_CERT *" m68kreg="a0"/>
      <arg name="pp" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="TS_CONF_load_key" result="EVP_PKEY *">
      <arg name="file" type="const char *" m68kreg="a0"/>
      <arg name="pass" type="const char *" m68kreg="a1"/>
    </method>
    <method name="i2d_ASN1_SEQUENCE_ANY" result="int">
      <arg name="a" type="const ASN1_SEQUENCE_ANY *" m68kreg="a0"/>
      <arg name="pp" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="d2i_TS_MSG_IMPRINT_bio" result="TS_MSG_IMPRINT *">
      <arg name="fp" type="BIO *" m68kreg="a0"/>
      <arg name="a" type="TS_MSG_IMPRINT **" m68kreg="a1"/>
    </method>
    <method name="EVP_PKEY_asn1_set_public" result="void">
      <arg name="ameth" type="EVP_PKEY_ASN1_METHOD *" m68kreg="a0"/>
      <arg name="pub_decode" type="int (*)(EVP_PKEY *pk, X509_PUBKEY *pub)" m68kreg="a1"/>
      <arg name="pub_encode" type="int (*)(X509_PUBKEY *pub, const EVP_PKEY *pk)" m68kreg="a2"/>
      <arg name="pub_cmp" type="int (*)(const EVP_PKEY *a, const EVP_PKEY *b)" m68kreg="a3"/>
      <arg name="pub_print" type="int (*)(BIO *out, const EVP_PKEY *pkey, int indent, ASN1_PCTX *pctx)" m68kreg="d0"/>
      <arg name="pkey_size" type="int (*)(const EVP_PKEY *pk)" m68kreg="d1"/>
      <arg name="pkey_bits" type="int (*)(const EVP_PKEY *pk)" m68kreg="d2"/>
    </method>
    <method name="b2i_PublicKey_bio" result="EVP_PKEY *">
      <arg name="in" type="BIO *" m68kreg="a0"/>
    </method>
    <method name="BIO_asn1_set_prefix" result="int">
      <arg name="b" type="BIO *" m68kreg="a0"/>
      <arg name="prefix" type="asn1_ps_func *" m68kreg="a1"/>
      <arg name="prefix_free" type="asn1_ps_func *" m68kreg="a2"/>
    </method>
    <method name="EVP_PKEY_new_mac_key" result="EVP_PKEY *">
      <arg name="type" type="int" m68kreg="a0"/>
      <arg name="e" type="ENGINE *" m68kreg="a1"/>
      <arg name="key" type="const unsigned char *" m68kreg="a2"/>
      <arg name="keylen" type="int" m68kreg="d0"/>
    </method>
    <method name="CRYPTO_THREADID_cmp" result="int" status="unimplemented">
      <arg name="a" type="const CRYPTO_THREADID *" m68kreg="a0"/>
      <arg name="b" type="const CRYPTO_THREADID *" m68kreg="a1"/>
    </method>
    <method name="TS_REQ_ext_free" result="void">
      <arg name="a" type="TS_REQ *" m68kreg="a0"/>
    </method>
    <method name="EVP_PKEY_asn1_set_free" result="void">
      <arg name="ameth" type="EVP_PKEY_ASN1_METHOD *" m68kreg="a0"/>
      <arg name="pkey_free" type="void (*)(EVP_PKEY *pkey)" m68kreg="a1"/>
    </method>
    <method name="EVP_PKEY_get0_asn1" result="const EVP_PKEY_ASN1_METHOD *">
      <arg name="pkey" type="const EVP_PKEY *" m68kreg="a0"/>
    </method>
    <method name="d2i_NETSCAPE_X509" result="NETSCAPE_X509 *" status="unimplemented">
      <arg name="a" type="NETSCAPE_X509 **" m68kreg="a0"/>
      <arg name="in" type="unsigned char const **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="EVP_PKEY_verify_recover_init" result="int">
      <arg name="ctx" type="EVP_PKEY_CTX *" m68kreg="a0"/>
    </method>
    <method name="EVP_PKEY_CTX_set_data" result="void">
      <arg name="ctx" type="EVP_PKEY_CTX *" m68kreg="a0"/>
      <arg name="data" type="void *" m68kreg="a1"/>
    </method>
    <method name="EVP_PKEY_keygen_init" result="int">
      <arg name="ctx" type="EVP_PKEY_CTX *" m68kreg="a0"/>
    </method>
    <method name="TS_RESP_CTX_set_status_info" result="int">
      <arg name="ctx" type="TS_RESP_CTX *" m68kreg="a0"/>
      <arg name="status" type="int" m68kreg="d0"/>
      <arg name="text" type="const char *" m68kreg="a1"/>
    </method>
    <method name="TS_MSG_IMPRINT_get_algo" result="X509_ALGOR *">
      <arg name="a" type="TS_MSG_IMPRINT *" m68kreg="a0"/>
    </method>
    <method name="TS_REQ_print_bio" result="int">
      <arg name="bio" type="BIO *" m68kreg="a0"/>
      <arg name="a" type="TS_REQ *" m68kreg="a1"/>
    </method>
    <method name="EVP_PKEY_CTX_ctrl_str" result="int">
      <arg name="ctx" type="EVP_PKEY_CTX *" m68kreg="a0"/>
      <arg name="type" type="const char *" m68kreg="a1"/>
      <arg name="value" type="const char *" m68kreg="a2"/>
    </method>
    <method name="EVP_PKEY_get_default_digest_nid" result="int">
      <arg name="pkey" type="EVP_PKEY *" m68kreg="a0"/>
      <arg name="pnid" type="int *" m68kreg="a1"/>
    </method>
    <method name="PEM_write_bio_PKCS7_stream" result="int">
      <arg name="out" type="BIO *" m68kreg="a0"/>
      <arg name="p7" type="PKCS7 *" m68kreg="a1"/>
      <arg name="in" type="BIO *" m68kreg="a2"/>
      <arg name="flags" type="int" m68kreg="d0"/>
    </method>
    <method name="TS_MSG_IMPRINT_print_bio" result="int">
      <arg name="bio" type="BIO *" m68kreg="a0"/>
      <arg name="msg" type="TS_MSG_IMPRINT *" m68kreg="a1"/>
    </method>
    <method name="BN_asc2bn" result="int">
      <arg name="a" type="BIGNUM **" m68kreg="a0"/>
      <arg name="str" type="const char *" m68kreg="a1"/>
    </method>
    <method name="TS_REQ_get_policy_id" result="ASN1_OBJECT *">
      <arg name="a" type="TS_REQ *" m68kreg="a0"/>
    </method>
    <method name="d2i_TS_ACCURACY" result="TS_ACCURACY *">
      <arg name="a" type="TS_ACCURACY **" m68kreg="a0"/>
      <arg name="pp" type="const unsigned char **" m68kreg="a1"/>
      <arg name="length" type="long" m68kreg="d0"/>
    </method>
    <method name="DSO_global_lookup" result="void *">
      <arg name="name" type="const char *" m68kreg="a0"/>
    </method>
    <method name="TS_CONF_set_tsa_name" result="int">
      <arg name="conf" type="CONF *" m68kreg="a0"/>
      <arg name="section" type="const char *" m68kreg="a1"/>
      <arg name="ctx" type="TS_RESP_CTX *" m68kreg="a2"/>
    </method>
    <method name="i2d_ASN1_SET_ANY" result="int">
      <arg name="a" type="const ASN1_SEQUENCE_ANY *" m68kreg="a0"/>
      <arg name="pp" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="ASN1_PCTX_get_flags" result="unsigned long">
      <arg name="p" type="const ASN1_PCTX *" m68kreg="a0"/>
    </method>
    <method name="TS_TST_INFO_get_ext_by_NID" result="int">
      <arg name="a" type="TS_TST_INFO *" m68kreg="a0"/>
      <arg name="nid" type="int" m68kreg="d0"/>
      <arg name="lastpos" type="int" m68kreg="d1"/>
    </method>
    <method name="TS_RESP_new" result="TS_RESP *">
    </method>
    <method name="ESS_CERT_ID_dup" result="ESS_CERT_ID *">
      <arg name="a" type="ESS_CERT_ID *" m68kreg="a0"/>
    </method>
    <method name="TS_STATUS_INFO_dup" result="TS_STATUS_INFO *">
      <arg name="a" type="TS_STATUS_INFO *" m68kreg="a0"/>
    </method>
    <method name="TS_REQ_delete_ext" result="X509_EXTENSION *">
      <arg name="a" type="TS_REQ *" m68kreg="a0"/>
      <arg name="loc" type="int" m68kreg="d0"/>
    </method>
    <method name="EVP_DigestVerifyFinal" result="int">
      <arg name="ctx" type="EVP_MD_CTX *" m68kreg="a0"/>
      <arg name="sig" type="const unsigned char *" m68kreg="a1"/>
      <arg name="siglen" type="size_t" m68kreg="d0"/>
    </method>
    <method name="EVP_PKEY_print_params" result="int">
      <arg name="out" type="BIO *" m68kreg="a0"/>
      <arg name="pkey" type="const EVP_PKEY *" m68kreg="a1"/>
      <arg name="inden" type="int" m68kreg="d0"/>
      <arg name="pctx" type="ASN1_PCTX *" m68kreg="a2"/>
    </method>
    <method name="TS_REQ_get_msg_imprint" result="TS_MSG_IMPRINT *">
      <arg name="a" type="TS_REQ *" m68kreg="a0"/>
    </method>
    <method name="OBJ_find_sigid_by_algs" result="int">
      <arg name="psignid" type="int *" m68kreg="a0"/>
      <arg name="dig_nid" type="int" m68kreg="d0"/>
      <arg name="pkey_nid" type="int" m68kreg="d1"/>
    </method>
    <method name="TS_TST_INFO_get_serial" result="const ASN1_INTEGER *">
      <arg name="a" type="const TS_TST_INFO *" m68kreg="a0"/>
    </method>
    <method name="TS_REQ_get_nonce" result="const ASN1_INTEGER *">
      <arg name="a" type="const TS_REQ *" m68kreg="a0"/>
    </method>
    <method name="X509_PUBKEY_set0_param" result="int">
      <arg name="pub" type="X509_PUBKEY *" m68kreg="a0"/>
      <arg name="aobj" type="ASN1_OBJECT *" m68kreg="a1"/>
      <arg name="ptype" type="int" m68kreg="d0"/>
      <arg name="pval" type="void *" m68kreg="a2"/>
      <arg name="penc" type="unsigned char *" m68kreg="a3"/>
      <arg name="penclen" type="int" m68kreg="d1"/>
    </method>
    <method name="EVP_PKEY_CTX_set0_keygen_info" result="void">
      <arg name="ctx" type="EVP_PKEY_CTX *" m68kreg="a0"/>
      <arg name="dat" type="int *" m68kreg="a1"/>
      <arg name="datlen" type="int" m68kreg="d0"/>
    </method>
    <method name="DIST_POINT_set_dpname" result="int">
      <arg name="dpn" type="DIST_POINT_NAME *" m68kreg="a0"/>
      <arg name="iname" type="X509_NAME *" m68kreg="a1"/>
    </method>
    <method name="i2d_ISSUING_DIST_POINT" result="int">
      <arg name="a" type="ISSUING_DIST_POINT *" m68kreg="a0"/>
      <arg name="pp" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="EVP_PKEY_CTX_get_data" result="void *">
      <arg name="ctx" type="EVP_PKEY_CTX *" m68kreg="a0"/>
    </method>
    <method name="TS_STATUS_INFO_print_bio" result="int">
      <arg name="bio" type="BIO *" m68kreg="a0"/>
      <arg name="a" type="TS_STATUS_INFO *" m68kreg="a1"/>
    </method>
    <method name="EVP_PKEY_derive_init" result="int">
      <arg name="ctx" type="EVP_PKEY_CTX *" m68kreg="a0"/>
    </method>
    <method name="d2i_TS_TST_INFO" result="TS_TST_INFO *">
      <arg name="a" type="TS_TST_INFO **" m68kreg="a0"/>
      <arg name="pp" type="const unsigned char **" m68kreg="a1"/>
      <arg name="length" type="long" m68kreg="d0"/>
    </method>
    <method name="EVP_PKEY_asn1_add_alias" result="int">
      <arg name="to" type="int" m68kreg="d0"/>
      <arg name="from" type="int" m68kreg="d1"/>
    </method>
    <method name="d2i_TS_RESP_bio" result="TS_RESP *">
      <arg name="fp" type="BIO *" m68kreg="a0"/>
      <arg name="a" type="TS_RESP **" m68kreg="a1"/>
    </method>
    <method name="OTHERNAME_cmp" result="int">
      <arg name="a" type="OTHERNAME *" m68kreg="a0"/>
      <arg name="b" type="OTHERNAME *" m68kreg="a1"/>
    </method>
    <method name="GENERAL_NAME_set0_value" result="void">
      <arg name="a" type="GENERAL_NAME *" m68kreg="a0"/>
      <arg name="type" type="int" m68kreg="d0"/>
      <arg name="value" type="void *" m68kreg="a1"/>
    </method>
    <method name="PKCS7_RECIP_INFO_get0_alg" result="void">
      <arg name="ri" type="PKCS7_RECIP_INFO *" m68kreg="a0"/>
      <arg name="penc" type="X509_ALGOR **" m68kreg="a1"/>
    </method>
    <method name="TS_RESP_CTX_new" result="TS_RESP_CTX *">
    </method>
    <method name="TS_RESP_set_tst_info" result="void">
      <arg name="a" type="TS_RESP *" m68kreg="a0"/>
      <arg name="p7" type="PKCS7 *" m68kreg="a1"/>
      <arg name="tst_info" type="TS_TST_INFO *" m68kreg="a2"/>
    </method>
    <method name="PKCS7_final" result="int">
      <arg name="p7" type="PKCS7 *" m68kreg="a0"/>
      <arg name="data" type="BIO *" m68kreg="a1"/>
      <arg name="flags" type="int" m68kreg="d0"/>
    </method>
    <method name="EVP_PKEY_base_id" result="int">
      <arg name="pkey" type="const EVP_PKEY *" m68kreg="a0"/>
    </method>
    <method name="TS_RESP_CTX_set_signer_cert" result="int">
      <arg name="ctx" type="TS_RESP_CTX *" m68kreg="a0"/>
      <arg name="signer" type="X509 *" m68kreg="a1"/>
    </method>
    <method name="TS_REQ_set_msg_imprint" result="int">
      <arg name="a" type="TS_REQ *" m68kreg="a0"/>
      <arg name="msg_imprint" type="TS_MSG_IMPRINT *" m68kreg="a1"/>
    </method>
    <method name="EVP_PKEY_CTX_ctrl" result="int">
      <arg name="ctx" type="EVP_PKEY_CTX *" m68kreg="a0"/>
      <arg name="keytype" type="int" m68kreg="d0"/>
      <arg name="optype" type="int" m68kreg="d1"/>
      <arg name="cmd" type="int" m68kreg="d2"/>
      <arg name="p1" type="int" m68kreg="d3"/>
      <arg name="p2" type="void *" m68kreg="a1"/>
    </method>
    <method name="TS_CONF_set_digests" result="int">
      <arg name="conf" type="CONF *" m68kreg="a0"/>
      <arg name="section" type="const char *" m68kreg="a1"/>
      <arg name="ctx" type="TS_RESP_CTX *" m68kreg="a2"/>
    </method>
    <method name="d2i_TS_MSG_IMPRINT" result="TS_MSG_IMPRINT *">
      <arg name="a" type="TS_MSG_IMPRINT **" m68kreg="a0"/>
      <arg name="pp" type="const unsigned char **" m68kreg="a1"/>
      <arg name="length" type="long" m68kreg="d0"/>
    </method>
    <method name="EVP_PKEY_meth_set_ctrl" result="void">
      <arg name="pmeth" type="EVP_PKEY_METHOD *" m68kreg="a0"/>
      <arg name="ctrl" type="int (*)(EVP_PKEY_CTX *ctx, int type, int p1, void *p2)" m68kreg="a1"/>
      <arg name="ctrl_str" type="int (*)(EVP_PKEY_CTX *ctx, const char *type, const char *value)" m68kreg="a2"/>
    </method>
    <method name="TS_REQ_get_ext_by_NID" result="int">
      <arg name="a" type="TS_REQ *" m68kreg="a0"/>
      <arg name="nid" type="int" m68kreg="d0"/>
      <arg name="lastpos" type="int" m68kreg="d1"/>
    </method>
    <method name="PKCS5_pbe_set0_algor" result="int">
      <arg name="algor" type="X509_ALGOR *" m68kreg="a0"/>
      <arg name="alg" type="int" m68kreg="d0"/>
      <arg name="iter" type="int" m68kreg="d1"/>
      <arg name="salt" type="const unsigned char *" m68kreg="a1"/>
      <arg name="saltlen" type="int" m68kreg="d2"/>
    </method>
    <method name="BN_BLINDING_thread_id" result="CRYPTO_THREADID *" status="unimplemented">
      <arg name="b" type="BN_BLINDING *" m68kreg="a0"/>
    </method>
    <method name="TS_ACCURACY_new" result="TS_ACCURACY *">
    </method>
    <method name="X509_CRL_METHOD_free" result="void">
      <arg name="m" type="X509_CRL_METHOD *" m68kreg="a0"/>
    </method>
    <method name="ASN1_PCTX_get_nm_flags" result="unsigned long">
      <arg name="p" type="const ASN1_PCTX *" m68kreg="a0"/>
    </method>
    <method name="EVP_PKEY_meth_set_sign" result="void">
      <arg name="pmeth" type="EVP_PKEY_METHOD *" m68kreg="a0"/>
      <arg name="sign_init" type="int (*)(EVP_PKEY_CTX *ctx)" m68kreg="a1"/>
      <arg name="sign" type="int (*)(EVP_PKEY_CTX *ctx, unsigned char *sig, size_t *siglen, const unsigned char *tbs, size_t tbslen)" m68kreg="a2"/>
    </method>
    <method name="CRYPTO_THREADID_current" result="void" status="unimplemented">
      <arg name="id" type="CRYPTO_THREADID *" m68kreg="a0"/>
    </method>
    <method name="EVP_PKEY_decrypt_init" result="int">
      <arg name="ctx" type="EVP_PKEY_CTX *" m68kreg="a0"/>
    </method>
    <method name="NETSCAPE_X509_free" result="void" status="unimplemented">
      <arg name="a" type="NETSCAPE_X509 *" m68kreg="a0"/>
    </method>
    <method name="i2b_PVK_bio" result="int">
      <arg name="out" type="BIO *" m68kreg="a0"/>
      <arg name="pk" type="EVP_PKEY *" m68kreg="a1"/>
      <arg name="enclevel" type="int" m68kreg="d0"/>
      <arg name="cb" type="pem_password_cb *" m68kreg="a2"/>
      <arg name="u" type="void *" m68kreg="a3"/>
    </method>
    <method name="EVP_PKEY_print_private" result="int">
      <arg name="out" type="BIO *" m68kreg="a0"/>
      <arg name="pkey" type="const EVP_PKEY *" m68kreg="a1"/>
      <arg name="indent" type="int" m68kreg="d0"/>
      <arg name="pctx" type="ASN1_PCTX *" m68kreg="a2"/>
    </method>
    <method name="GENERAL_NAME_get0_value" result="void *">
      <arg name="a" type="const GENERAL_NAME *" m68kreg="a0"/>
      <arg name="ptype" type="int *" m68kreg="a1"/>
    </method>
    <method name="b2i_PVK_bio" result="EVP_PKEY *">
      <arg name="in" type="BIO *" m68kreg="a0"/>
      <arg name="cb" type="pem_password_cb *" m68kreg="a1"/>
      <arg name="u" type="void *" m68kreg="a2"/>
    </method>
    <method name="ASN1_UTCTIME_adj" result="ASN1_UTCTIME *">
      <arg name="s" type="ASN1_UTCTIME *" m68kreg="a0"/>
      <arg name="t" type="time_t" m68kreg="d0"/>
      <arg name="offset_day" type="int" m68kreg="d1"/>
      <arg name="offset_sec" type="int" m68kreg="d2"/>
    </method>
    <method name="TS_TST_INFO_new" result="TS_TST_INFO *">
    </method>
    <method name="EVP_MD_do_all_sorted" result="void">
      <arg name="fn" type="void (*)(const EVP_MD *ciph, const char *from, const char *to, void *x)" m68kreg="a0"/>
      <arg name="arg" type="void *" m68kreg="a1"/>
    </method>
    <method name="TS_CONF_set_default_engine" result="int">
      <arg name="name" type="const char *" m68kreg="a0"/>
    </method>
    <method name="TS_ACCURACY_set_seconds" result="int">
      <arg name="a" type="TS_ACCURACY *" m68kreg="a0"/>
      <arg name="seconds" type="const ASN1_INTEGER *" m68kreg="a1"/>
    </method>
    <method name="TS_TST_INFO_get_time" result="const ASN1_GENERALIZEDTIME *">
      <arg name="a" type="const TS_TST_INFO *" m68kreg="a0"/>
    </method>
    <method name="PKCS8_pkey_get0" result="int">
      <arg name="ppkalg" type="const ASN1_OBJECT **" m68kreg="a0"/>
      <arg name="pk" type="const unsigned char **" m68kreg="a1"/>
      <arg name="ppklen" type="int *" m68kreg="a2"/>
      <arg name="pa" type="const X509_ALGOR **" m68kreg="a3"/>
      <arg name="p8" type="const PKCS8_PRIV_KEY_INFO *" m68kreg="d0"/>
    </method>
    <method name="EVP_PKEY_asn1_get0" result="const EVP_PKEY_ASN1_METHOD *">
      <arg name="idx" type="int" m68kreg="d0"/>
    </method>
    <method name="OBJ_add_sigid" result="int">
      <arg name="signid" type="int" m68kreg="d0"/>
      <arg name="dig_id" type="int" m68kreg="d1"/>
      <arg name="pkey_id" type="int" m68kreg="d2"/>
    </method>
    <method name="PKCS7_SIGNER_INFO_sign" result="int">
      <arg name="si" type="PKCS7_SIGNER_INFO *" m68kreg="a0"/>
    </method>
    <method name="EVP_PKEY_paramgen_init" result="int">
      <arg name="ctx" type="EVP_PKEY_CTX *" m68kreg="a0"/>
    </method>
    <method name="EVP_PKEY_sign" result="int">
      <arg name="ctx" type="EVP_PKEY_CTX *" m68kreg="a0"/>
      <arg name="sig" type="unsigned char *" m68kreg="a1"/>
      <arg name="siglen" type="size_t *" m68kreg="d0"/>
      <arg name="tbs" type="const unsigned char *" m68kreg="a2"/>
      <arg name="tbslen" type="size_t" m68kreg="d1"/>
    </method>
    <method name="OBJ_sigid_free" result="void">
    </method>
    <method name="EVP_PKEY_meth_set_init" result="void">
      <arg name="pmeth" type="EVP_PKEY_METHOD *" m68kreg="a0"/>
      <arg name="init" type="int (*)(EVP_PKEY_CTX *ctx)" m68kreg="a1"/>
    </method>
    <method name="d2i_ESS_ISSUER_SERIAL" result="ESS_ISSUER_SERIAL *">
      <arg name="a" type="ESS_ISSUER_SERIAL **" m68kreg="a0"/>
      <arg name="pp" type="const unsigned char **" m68kreg="a1"/>
      <arg name="length" type="long" m68kreg="d0"/>
    </method>
    <method name="ISSUING_DIST_POINT_new" result="ISSUING_DIST_POINT *">
    </method>
    <method name="ASN1_TIME_adj" result="ASN1_TIME *">
      <arg name="s" type="ASN1_TIME *" m68kreg="a0"/>
      <arg name="t" type="time_t" m68kreg="d0"/>
      <arg name="offset_day" type="int" m68kreg="d1"/>
      <arg name="offset_sec" type="int" m68kreg="d2"/>
    </method>
    <method name="TS_OBJ_print_bio" result="int">
      <arg name="bio" type="BIO *" m68kreg="a0"/>
      <arg name="obj" type="const ASN1_OBJECT *" m68kreg="a1"/>
    </method>
    <method name="EVP_PKEY_meth_set_verify_recover" result="void">
      <arg name="pmeth" type="EVP_PKEY_METHOD *" m68kreg="a0"/>
      <arg name="verify_recover_init" type="int (*)(EVP_PKEY_CTX *ctx)" m68kreg="a1"/>
      <arg name="verify_recover" type="int (*)(EVP_PKEY_CTX *ctx, unsigned char *sig, size_t *siglen, const unsigned char *tbs, size_t tbslen)" m68kreg="a2"/>
    </method>
    <method name="TS_RESP_get_status_info" result="TS_STATUS_INFO *">
      <arg name="g" type="TS_RESP *" m68kreg="a0"/>
    </method>
    <method name="EVP_PKEY_CTX_set_cb" result="void">
      <arg name="ctx" type="EVP_PKEY_CTX *" m68kreg="a0"/>
      <arg name="cb" type="EVP_PKEY_gen_cb *" m68kreg="a1"/>
    </method>
    <method name="PKCS7_to_TS_TST_INFO" result="TS_TST_INFO *">
      <arg name="token" type="PKCS7 *" m68kreg="a0"/>
    </method>
    <method name="ASN1_PCTX_get_oid_flags" result="unsigned long">
      <arg name="p" type="const ASN1_PCTX *" m68kreg="a0"/>
    </method>
    <method name="TS_TST_INFO_add_ext" result="int">
      <arg name="a" type="TS_TST_INFO *" m68kreg="a0"/>
      <arg name="ex" type="X509_EXTENSION *" m68kreg="a1"/>
      <arg name="loc" type="int" m68kreg="d0"/>
    </method>
    <method name="EVP_PKEY_meth_set_derive" result="void">
      <arg name="pmeth" type="EVP_PKEY_METHOD *" m68kreg="a0"/>
      <arg name="derive_init" type="int (*)(EVP_PKEY_CTX *ctx)" m68kreg="a1"/>
      <arg name="derive" type="int (*)(EVP_PKEY_CTX *ctx, unsigned char *key, size_t *keylen)" m68kreg="a2"/>
    </method>
    <method name="i2d_TS_RESP_fp" result="int" status="unimplemented">
      <arg name="fp" type="FILE *" m68kreg="a0"/>
      <arg name="a" type="TS_RESP *" m68kreg="a1"/>
    </method>
    <method name="i2d_TS_MSG_IMPRINT_bio" result="int">
      <arg name="fp" type="BIO *" m68kreg="a0"/>
      <arg name="a" type="TS_MSG_IMPRINT *" m68kreg="a1"/>
    </method>
    <method name="TS_RESP_CTX_set_accuracy" result="int">
      <arg name="ctx" type="TS_RESP_CTX *" m68kreg="a0"/>
      <arg name="secs" type="int" m68kreg="d0"/>
      <arg name="millis" type="int" m68kreg="d1"/>
      <arg name="micros" type="int" m68kreg="d2"/>
    </method>
    <method name="TS_REQ_set_nonce" result="int">
      <arg name="a" type="TS_REQ *" m68kreg="a0"/>
      <arg name="nonce" type="const ASN1_INTEGER *" m68kreg="a1"/>
    </method>
    <method name="ESS_CERT_ID_new" result="ESS_CERT_ID *">
    </method>
    <method name="TS_REQ_get_ext_count" result="int">
      <arg name="a" type="TS_REQ *" m68kreg="a0"/>
    </method>
    <method name="BUF_reverse" result="void">
      <arg name="out" type="unsigned char *" m68kreg="a0"/>
      <arg name="in" type="const unsigned char *" m68kreg="a1"/>
      <arg name="siz" type="size_t" m68kreg="d0"/>
    </method>
    <method name="TS_TST_INFO_print_bio" result="int">
      <arg name="bio" type="BIO *" m68kreg="a0"/>
      <arg name="a" type="TS_TST_INFO *" m68kreg="a1"/>
    </method>
    <method name="d2i_ISSUING_DIST_POINT" result="ISSUING_DIST_POINT *">
      <arg name="a" type="ISSUING_DIST_POINT **" m68kreg="a0"/>
      <arg name="pp" type="const unsigned char **" m68kreg="a1"/>
      <arg name="length" type="long" m68kreg="d0"/>
    </method>
    <method name="i2b_PrivateKey_bio" result="int">
      <arg name="out" type="BIO *" m68kreg="a0"/>
      <arg name="pk" type="EVP_PKEY *" m68kreg="a1"/>
    </method>
    <method name="i2d_TS_RESP" result="int">
      <arg name="a" type="const TS_RESP *" m68kreg="a0"/>
      <arg name="pp" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="b2i_PublicKey" result="EVP_PKEY *">
      <arg name="in" type="const unsigned char **" m68kreg="a0"/>
      <arg name="length" type="long" m68kreg="d0"/>
    </method>
    <method name="TS_VERIFY_CTX_cleanup" result="void">
      <arg name="ctx" type="TS_VERIFY_CTX *" m68kreg="a0"/>
    </method>
    <method name="TS_STATUS_INFO_free" result="void">
      <arg name="a" type="TS_STATUS_INFO *" m68kreg="a0"/>
    </method>
    <method name="TS_RESP_verify_token" result="int">
      <arg name="ctx" type="TS_VERIFY_CTX *" m68kreg="a0"/>
      <arg name="token" type="PKCS7 *" m68kreg="a1"/>
    </method>
    <method name="OBJ_bsearch_ex_" result="const void *">
      <arg name="key" type="const void *" m68kreg="a0"/>
      <arg name="base" type="const void *" m68kreg="a1"/>
      <arg name="num" type="int" m68kreg="d0"/>
      <arg name="size" type="int" m68kreg="d1"/>
      <arg name="cmp" type="int (*)(const void *, const void *)" m68kreg="a2"/>
      <arg name="flags" type="int" m68kreg="d2"/>
    </method>
    <method name="ASN1_bn_print" result="int">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="number" type="const char *" m68kreg="a1"/>
      <arg name="num" type="const BIGNUM *" m68kreg="a2"/>
      <arg name="ign" type="unsigned char *" m68kreg="a3"/>
      <arg name="indent" type="int" m68kreg="d0"/>
    </method>
    <method name="EVP_PKEY_asn1_get_count" result="int">
    </method>
    <method name="ASN1_PCTX_set_nm_flags" result="void">
      <arg name="p" type="ASN1_PCTX *" m68kreg="a0"/>
      <arg name="flags" type="unsigned long" m68kreg="d0"/>
    </method>
    <method name="EVP_DigestVerifyInit" result="int">
      <arg name="ctx" type="EVP_MD_CTX *" m68kreg="a0"/>
      <arg name="pctx" type="EVP_PKEY_CTX **" m68kreg="a1"/>
      <arg name="type" type="const EVP_MD *" m68kreg="a2"/>
      <arg name="e" type="ENGINE *" m68kreg="a3"/>
      <arg name="pkey" type="EVP_PKEY *" m68kreg="d0"/>
    </method>
    <method name="TS_TST_INFO_get_policy_id" result="ASN1_OBJECT *">
      <arg name="a" type="TS_TST_INFO *" m68kreg="a0"/>
    </method>
    <method name="TS_REQ_get_cert_req" result="int">
      <arg name="a" type="const TS_REQ *" m68kreg="a0"/>
    </method>
    <method name="X509_CRL_set_meth_data" result="void">
      <arg name="crl" type="X509_CRL *" m68kreg="a0"/>
      <arg name="dat" type="void *" m68kreg="a1"/>
    </method>
    <method name="PKCS8_pkey_set0" result="int">
      <arg name="priv" type="PKCS8_PRIV_KEY_INFO *" m68kreg="a0"/>
      <arg name="aobj" type="ASN1_OBJECT *" m68kreg="a1"/>
      <arg name="version" type="int" m68kreg="d0"/>
      <arg name="ptype" type="int" m68kreg="d1"/>
      <arg name="pval" type="void *" m68kreg="a2"/>
      <arg name="penc" type="unsigned char *" m68kreg="a3"/>
      <arg name="penclen" type="int" m68kreg="d2"/>
    </method>
    <method name="ASN1_STRING_copy" result="int">
      <arg name="dst" type="ASN1_STRING *" m68kreg="a0"/>
      <arg name="str" type="const ASN1_STRING *" m68kreg="a1"/>
    </method>
    <method name="d2i_TS_TST_INFO_fp" result="TS_TST_INFO *" status="unimplemented">
      <arg name="fp" type="FILE *" m68kreg="a0"/>
      <arg name="a" type="TS_TST_INFO **" m68kreg="a1"/>
    </method>
    <method name="X509_CRL_match" result="int">
      <arg name="a" type="const X509_CRL *" m68kreg="a0"/>
      <arg name="b" type="const X509_CRL *" m68kreg="a1"/>
    </method>
    <method name="EVP_PKEY_asn1_set_private" result="void">
      <arg name="ameth" type="EVP_PKEY_ASN1_METHOD *" m68kreg="a0"/>
      <arg name="priv_decode" type="int (*)(EVP_PKEY *pk, const PKCS8_PRIV_KEY_INFO *p8inf)" m68kreg="a1"/>
      <arg name="priv_encode" type="int (*)(PKCS8_PRIV_KEY_INFO *p8, const EVP_PKEY *pk)" m68kreg="a2"/>
      <arg name="priv_print" type="int (*)(BIO *out, const EVP_PKEY *pkey, int indent, ASN1_PCTX *pctx)" m68kreg="a3"/>
    </method>
    <method name="TS_TST_INFO_get_ext_d2i" result="void *">
      <arg name="a" type="TS_TST_INFO *" m68kreg="a0"/>
      <arg name="nid" type="int" m68kreg="d0"/>
      <arg name="crit" type="int *" m68kreg="a1"/>
      <arg name="idx" type="int *" m68kreg="a2"/>
    </method>
    <method name="TS_RESP_CTX_add_policy" result="int">
      <arg name="ctx" type="TS_RESP_CTX *" m68kreg="a0"/>
      <arg name="policy" type="const ASN1_OBJECT *" m68kreg="a1"/>
    </method>
    <method name="d2i_TS_RESP" result="TS_RESP *">
      <arg name="a" type="TS_RESP **" m68kreg="a0"/>
      <arg name="pp" type="const unsigned char **" m68kreg="a1"/>
      <arg name="length" type="long" m68kreg="d0"/>
    </method>
    <method name="TS_CONF_load_certs" result="STACK_OF(X509) *">
      <arg name="file" type="const char *" m68kreg="a0"/>
    </method>
    <method name="TS_TST_INFO_get_msg_imprint" result="TS_MSG_IMPRINT *">
      <arg name="a" type="TS_TST_INFO *" m68kreg="a0"/>
    </method>
    <method name="ERR_load_TS_strings" result="int">
    </method>
    <method name="TS_TST_INFO_get_version" result="long">
      <arg name="a" type="const TS_TST_INFO *" m68kreg="a0"/>
    </method>
    <method name="EVP_PKEY_CTX_dup" result="EVP_PKEY_CTX *">
      <arg name="ctx" type="EVP_PKEY_CTX *" m68kreg="a0"/>
    </method>
    <method name="EVP_PKEY_meth_set_verify" result="void">
      <arg name="pmeth" type="EVP_PKEY_METHOD *" m68kreg="a0"/>
      <arg name="verify_init" type="int (*)(EVP_PKEY_CTX *ctx)" m68kreg="a1"/>
      <arg name="verify" type="int (*)(EVP_PKEY_CTX *ctx, const unsigned char *sig, size_t siglen, const unsigned char *tbs, size_t tbslen)" m68kreg="a2"/>
    </method>
    <method name="i2b_PublicKey_bio" result="int">
      <arg name="out" type="BIO *" m68kreg="a0"/>
      <arg name="pk" type="EVP_PKEY *" m68kreg="a1"/>
    </method>
    <method name="TS_CONF_set_certs" result="int">
      <arg name="conf" type="CONF *" m68kreg="a0"/>
      <arg name="section" type="const char *" m68kreg="a1"/>
      <arg name="certs" type="const char *" m68kreg="a2"/>
      <arg name="ctx" type="TS_RESP_CTX *" m68kreg="a3"/>
    </method>
    <method name="EVP_PKEY_asn1_get0_info" result="int">
      <arg name="ppkey_id" type="int *" m68kreg="a0"/>
      <arg name="ppkey_base_id" type="int *" m68kreg="a1"/>
      <arg name="ppkey_flags" type="int *" m68kreg="a2"/>
      <arg name="pinfo" type="const char **" m68kreg="a3"/>
      <arg name="ppem_str" type="const char **" m68kreg="d0"/>
      <arg name="ameth" type="const EVP_PKEY_ASN1_METHOD *" m68kreg="d1"/>
    </method>
    <method name="TS_VERIFY_CTX_free" result="void">
      <arg name="ctx" type="TS_VERIFY_CTX *" m68kreg="a0"/>
    </method>
    <method name="TS_REQ_get_ext_by_critical" result="int">
      <arg name="a" type="TS_REQ *" m68kreg="a0"/>
      <arg name="crit" type="int" m68kreg="d0"/>
      <arg name="lastpos" type="int" m68kreg="d1"/>
    </method>
    <method name="TS_RESP_CTX_set_serial_cb" result="void">
      <arg name="ctx" type="TS_RESP_CTX *" m68kreg="a0"/>
      <arg name="cb" type="TS_serial_cb" m68kreg="d0"/>
      <arg name="data" type="void *" m68kreg="a1"/>
    </method>
    <method name="X509_CRL_get_meth_data" result="void *">
      <arg name="crl" type="X509_CRL *" m68kreg="a0"/>
    </method>
    <method name="TS_RESP_CTX_set_time_cb" result="void">
      <arg name="ctx" type="TS_RESP_CTX *" m68kreg="a0"/>
      <arg name="cb" type="TS_time_cb" m68kreg="d0"/>
      <arg name="data" type="void *" m68kreg="a1"/>
    </method>
    <method name="TS_MSG_IMPRINT_get_msg" result="ASN1_OCTET_STRING *">
      <arg name="a" type="TS_MSG_IMPRINT *" m68kreg="a0"/>
    </method>
    <method name="TS_TST_INFO_ext_free" result="void">
      <arg name="a" type="TS_TST_INFO *" m68kreg="a0"/>
    </method>
    <method name="TS_REQ_get_version" result="long">
      <arg name="a" type="const TS_REQ *" m68kreg="a0"/>
    </method>
    <method name="TS_REQ_add_ext" result="int">
      <arg name="a" type="TS_REQ *" m68kreg="a0"/>
      <arg name="ex" type="X509_EXTENSION *" m68kreg="a1"/>
      <arg name="loc" type="int" m68kreg="d0"/>
    </method>
    <method name="EVP_PKEY_CTX_set_app_data" result="void">
      <arg name="ctx" type="EVP_PKEY_CTX *" m68kreg="a0"/>
      <arg name="data" type="void *" m68kreg="a1"/>
    </method>
    <method name="OBJ_bsearch_" result="const void *">
      <arg name="key" type="const void *" m68kreg="a0"/>
      <arg name="base" type="const void *" m68kreg="a1"/>
      <arg name="num" type="int" m68kreg="d0"/>
      <arg name="size" type="int" m68kreg="d1"/>
      <arg name="cmp" type="int (*)(const void *, const void *)" m68kreg="a2"/>
    </method>
    <method name="EVP_PKEY_meth_set_verifyctx" result="void">
      <arg name="pmeth" type="EVP_PKEY_METHOD *" m68kreg="a0"/>
      <arg name="verifyctx_init" type="int (*)(EVP_PKEY_CTX *ctx, EVP_MD_CTX *mctx)" m68kreg="a1"/>
      <arg name="verifyctx" type="int (*)(EVP_PKEY_CTX *ctx, const unsigned char *sig,int siglen, EVP_MD_CTX *mctx)" m68kreg="a2"/>
    </method>
    <method name="i2d_PKCS7_bio_stream" result="int">
      <arg name="out" type="BIO *" m68kreg="a0"/>
      <arg name="p7" type="PKCS7 *" m68kreg="a1"/>
      <arg name="in" type="BIO *" m68kreg="a2"/>
      <arg name="flags" type="int" m68kreg="d0"/>
    </method>
    <method name="CRYPTO_THREADID_set_numeric" result="void" status="unimplemented">
      <arg name="id" type="CRYPTO_THREADID *" m68kreg="a0"/>
      <arg name="val" type="unsigned long" m68kreg="d0"/>
    </method>
    <method name="PKCS7_sign_add_signer" result="PKCS7_SIGNER_INFO *">
      <arg name="p7" type="PKCS7 *" m68kreg="a0"/>
      <arg name="signcert" type="X509 *" m68kreg="a1"/>
      <arg name="pkey" type="EVP_PKEY *" m68kreg="a2"/>
      <arg name="md" type="const EVP_MD *" m68kreg="a3"/>
      <arg name="flags" type="int" m68kreg="d0"/>
    </method>
    <method name="d2i_TS_TST_INFO_bio" result="TS_TST_INFO *">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="a" type="TS_TST_INFO **" m68kreg="a1"/>
    </method>
    <method name="TS_TST_INFO_get_ordering" result="int">
      <arg name="a" type="const TS_TST_INFO *" m68kreg="a0"/>
    </method>
    <method name="TS_RESP_print_bio" result="int">
      <arg name="bio" type="BIO *" m68kreg="a0"/>
      <arg name="a" type="TS_RESP *" m68kreg="a1"/>
    </method>
    <method name="TS_TST_INFO_get_exts" result="STACK_OF(X509_EXTENSION) *">
      <arg name="a" type="TS_TST_INFO *" m68kreg="a0"/>
    </method>
    <method name="PKCS5_pbe2_set_iv" result="X509_ALGOR *">
      <arg name="cipher" type="const EVP_CIPHER *" m68kreg="a0"/>
      <arg name="iter" type="int" m68kreg="d0"/>
      <arg name="salt" type="unsigned char *" m68kreg="a1"/>
      <arg name="saltlen" type="int" m68kreg="d1"/>
      <arg name="aiv" type="unsigned char *" m68kreg="a2"/>
      <arg name="prf_nid" type="int" m68kreg="d2"/>
    </method>
    <method name="b2i_PrivateKey" result="EVP_PKEY *">
      <arg name="in" type="const unsigned char **" m68kreg="a0"/>
      <arg name="length" type="long" m68kreg="d0"/>
    </method>
    <method name="EVP_PKEY_CTX_get_app_data" result="void *">
      <arg name="ctx" type="EVP_PKEY_CTX *" m68kreg="a0"/>
    </method>
    <method name="TS_REQ_set_cert_req" result="int">
      <arg name="a" type="TS_REQ *" m68kreg="a0"/>
      <arg name="cert_req" type="int" m68kreg="d0"/>
    </method>
    <method name="CRYPTO_THREADID_set_callback" result="int" status="unimplemented">
      <arg name="threadid_func" type="void (*)(CRYPTO_THREADID *)" m68kreg="a0"/>
    </method>
    <method name="TS_CONF_set_serial" result="int">
      <arg name="conf" type="CONF *" m68kreg="a0"/>
      <arg name="section" type="const char *" m68kreg="a1"/>
      <arg name="cb" type="TS_serial_cb" m68kreg="a2"/>
      <arg name="ctx" type="TS_RESP_CTX *" m68kreg="a3"/>
    </method>
    <method name="TS_TST_INFO_free" result="void">
      <arg name="a" type="TS_TST_INFO *" m68kreg="a0"/>
    </method>
    <method name="d2i_TS_REQ_fp" result="TS_REQ *" status="unimplemented">
      <arg name="fp" type="FILE *" m68kreg="a0"/>
      <arg name="a" type="TS_REQ **" m68kreg="a1"/>
    </method>
    <method name="TS_RESP_verify_response" result="int">
      <arg name="ctx" type="TS_VERIFY_CTX *" m68kreg="a0"/>
      <arg name="response" type="TS_RESP *" m68kreg="a1"/>
    </method>
    <method name="i2d_ESS_ISSUER_SERIAL" result="int">
      <arg name="a" type="const ESS_ISSUER_SERIAL *" m68kreg="a0"/>
      <arg name="pp" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="TS_ACCURACY_get_seconds" result="const ASN1_INTEGER *">
      <arg name="a" type="const TS_ACCURACY *" m68kreg="a0"/>
    </method>
    <method name="EVP_CIPHER_do_all" result="void">
      <arg name="fn" type="void (*)(const EVP_CIPHER *ciph, const char *from, const char *to, void *x)" m68kreg="a0"/>
      <arg name="arg" type="void *" m68kreg="a1"/>
    </method>
    <method name="b2i_PrivateKey_bio" result="EVP_PKEY *">
      <arg name="in" type="BIO *" m68kreg="a0"/>
    </method>
    <method name="OCSP_CERTID_dup" result="OCSP_CERTID *">
      <arg name="a" type="OCSP_CERTID *" m68kreg="a0"/>
    </method>
    <method name="X509_PUBKEY_get0_param" result="int">
      <arg name="ppkalg" type="ASN1_OBJECT **" m68kreg="a0"/>
      <arg name="pk" type="const unsigned char **" m68kreg="a1"/>
      <arg name="ppklen" type="int *" m68kreg="a2"/>
      <arg name="pa" type="X509_ALGOR **" m68kreg="a3"/>
      <arg name="pub" type="X509_PUBKEY *" m68kreg="d0"/>
    </method>
    <method name="TS_MSG_IMPRINT_dup" result="TS_MSG_IMPRINT *">
      <arg name="a" type="TS_MSG_IMPRINT *" m68kreg="a0"/>
    </method>
    <method name="PKCS7_print_ctx" result="void">
      <arg name="out" type="BIO *" m68kreg="a0"/>
      <arg name="x" type="PKCS7 *" m68kreg="a1"/>
      <arg name="indent" type="int" m68kreg="d0"/>
      <arg name="pctx" type="const ASN1_PCTX *" m68kreg="a2"/>
    </method>
    <method name="i2d_TS_REQ_bio" result="int">
      <arg name="fp" type="BIO *" m68kreg="a0"/>
      <arg name="a" type="TS_REQ *" m68kreg="a1"/>
    </method>
    <method name="EVP_PKEY_asn1_set_param" result="void">
      <arg name="ameth" type="EVP_PKEY_ASN1_METHOD *" m68kreg="a0"/>
      <arg name="param_decode" type="int (*)(EVP_PKEY *pkey, const unsigned char **pder, int derlen)" m68kreg="a1"/>
      <arg name="param_encode" type="int (*)(const EVP_PKEY *pkey, unsigned char **pder)" m68kreg="a2"/>
      <arg name="param_missing" type="int (*)(const EVP_PKEY *pk)" m68kreg="a3"/>
      <arg name="param_copy" type="int (*)(EVP_PKEY *to, const EVP_PKEY *from)" m68kreg="d0"/>
      <arg name="param_cmp" type="int (*)(const EVP_PKEY *a, const EVP_PKEY *b)" m68kreg="d1"/>
      <arg name="param_print" type="int (*)(BIO *out, const EVP_PKEY *pkey, int indent, ASN1_PCTX *pctx)" m68kreg="d2"/>
    </method>
    <method name="EVP_PKEY_meth_set_encrypt" result="void">
      <arg name="pmeth" type="EVP_PKEY_METHOD *" m68kreg="a0"/>
      <arg name="encrypt_init" type="int (*)(EVP_PKEY_CTX *ctx)" m68kreg="a1"/>
      <arg name="encryptfn" type="int (*)(EVP_PKEY_CTX *ctx, unsigned char *out, size_t *outlen, const unsigned char *in, size_t inlen)" m68kreg="a2"/>
    </method>
    <method name="ASN1_PCTX_set_flags" result="void">
      <arg name="p" type="ASN1_PCTX *" m68kreg="a0"/>
      <arg name="flags" type="unsigned long" m68kreg="d0"/>
    </method>
    <method name="i2d_ESS_CERT_ID" result="int">
      <arg name="a" type="const ESS_CERT_ID *" m68kreg="a0"/>
      <arg name="pp" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="TS_VERIFY_CTX_new" result="TS_VERIFY_CTX *">
    </method>
    <method name="TS_RESP_CTX_set_extension_cb" result="void">
      <arg name="ctx" type="TS_RESP_CTX *" m68kreg="a0"/>
      <arg name="cb" type="TS_extension_cb" m68kreg="a1"/>
      <arg name="data" type="void *" m68kreg="a2"/>
    </method>
    <method name="TS_RESP_CTX_set_status_info_cond" result="int">
      <arg name="ctx" type="TS_RESP_CTX *" m68kreg="a0"/>
      <arg name="status" type="int" m68kreg="d0"/>
      <arg name="text" type="const char *" m68kreg="a1"/>
    </method>
    <method name="EVP_PKEY_verify" result="int">
      <arg name="ctx" type="EVP_PKEY_CTX *" m68kreg="a0"/>
      <arg name="sig" type="const unsigned char *" m68kreg="a1"/>
      <arg name="siglen" type="size_t" m68kreg="d0"/>
      <arg name="tbs" type="const unsigned char *" m68kreg="a2"/>
      <arg name="tbslen" type="size_t" m68kreg="d1"/>
    </method>
    <method name="X509_CRL_METHOD_new" result="X509_CRL_METHOD *">
      <arg name="crl_init" type="int (*)(X509_CRL *crl)" m68kreg="a0"/>
      <arg name="crl_free" type="int (*)(X509_CRL *crl)" m68kreg="a1"/>
      <arg name="crl_lookup" type="int (*)(X509_CRL *crl, X509_REVOKED **ret, ASN1_INTEGER *ser, X509_NAME *issuer)" m68kreg="a2"/>
      <arg name="crl_verify" type="int (*)(X509_CRL *crl, EVP_PKEY *pk)" m68kreg="a3"/>
    </method>
    <method name="EVP_DigestSignFinal" result="int">
      <arg name="ctx" type="EVP_MD_CTX *" m68kreg="a0"/>
      <arg name="sigret" type="unsigned char *" m68kreg="a1"/>
      <arg name="siglen" type="size_t *" m68kreg="a2"/>
    </method>
    <method name="TS_RESP_CTX_set_def_policy" result="int">
      <arg name="ctx" type="TS_RESP_CTX *" m68kreg="a0"/>
      <arg name="def_policy" type="const ASN1_OBJECT *" m68kreg="a1"/>
    </method>
    <method name="TS_RESP_create_response" result="TS_RESP *">
      <arg name="ctx" type="TS_RESP_CTX *" m68kreg="a0"/>
      <arg name="req_bio" type="BIO *" m68kreg="a1"/>
    </method>
    <method name="PKCS7_SIGNER_INFO_get0_algs" result="void">
      <arg name="si" type="PKCS7_SIGNER_INFO *" m68kreg="a0"/>
      <arg name="pk" type="EVP_PKEY **" m68kreg="a1"/>
      <arg name="pdig" type="X509_ALGOR **" m68kreg="a2"/>
      <arg name="psig" type="X509_ALGOR **" m68kreg="a3"/>
    </method>
    <method name="TS_TST_INFO_get_nonce" result="const ASN1_INTEGER *">
      <arg name="a" type="const TS_TST_INFO *" m68kreg="a0"/>
    </method>
    <method name="EVP_PKEY_decrypt_old" result="int">
      <arg name="dec_key" type="unsigned char *" m68kreg="a0"/>
      <arg name="enc_key" type="const unsigned char *" m68kreg="a1"/>
      <arg name="enc_key_len" type="int" m68kreg="d0"/>
      <arg name="private_key" type="EVP_PKEY *" m68kreg="a2"/>
    </method>
    <method name="TS_TST_INFO_set_policy_id" result="int">
      <arg name="a" type="TS_TST_INFO *" m68kreg="a0"/>
      <arg name="policy_id" type="ASN1_OBJECT *" m68kreg="a1"/>
    </method>
    <method name="TS_CONF_set_ess_cert_id_chain" result="int">
      <arg name="conf" type="CONF *" m68kreg="a0"/>
      <arg name="section" type="const char *" m68kreg="a1"/>
      <arg name="ctx" type="TS_RESP_CTX *" m68kreg="a2"/>
    </method>
    <method name="EVP_PKEY_CTX_get0_pkey" result="EVP_PKEY *">
      <arg name="ctx" type="EVP_PKEY_CTX *" m68kreg="a0"/>
    </method>
    <method name="d2i_TS_REQ" result="TS_REQ *">
      <arg name="a" type="TS_REQ **" m68kreg="a0"/>
      <arg name="pp" type="const unsigned char **" m68kreg="a1"/>
      <arg name="length" type="long" m68kreg="d0"/>
    </method>
    <method name="EVP_PKEY_asn1_find_str" result="const EVP_PKEY_ASN1_METHOD *">
      <arg name="pe" type="ENGINE **" m68kreg="a0"/>
      <arg name="str" type="const char *" m68kreg="a1"/>
      <arg name="len" type="int" m68kreg="d0"/>
    </method>
    <method name="BIO_f_asn1" result="const BIO_METHOD *">
    </method>
    <method name="ESS_SIGNING_CERT_new" result="ESS_SIGNING_CERT *">
    </method>
    <method name="EVP_PBE_find" result="int">
      <arg name="type" type="int" m68kreg="d0"/>
      <arg name="pbe_nid" type="int" m68kreg="d1"/>
      <arg name="pcnid" type="int *" m68kreg="a0"/>
      <arg name="pmnid" type="int *" m68kreg="a1"/>
      <arg name="pkeygen" type="EVP_PBE_KEYGEN **" m68kreg="a2"/>
    </method>
    <method name="X509_CRL_get0_by_cert" result="int">
      <arg name="crl" type="X509_CRL *" m68kreg="a0"/>
      <arg name="ret" type="X509_REVOKED **" m68kreg="a1"/>
      <arg name="x" type="X509 *" m68kreg="a2"/>
    </method>
    <method name="EVP_PKEY_derive" result="int">
      <arg name="ctx" type="EVP_PKEY_CTX *" m68kreg="a0"/>
      <arg name="key" type="unsigned char *" m68kreg="a1"/>
      <arg name="keylen" type="size_t *" m68kreg="a2"/>
    </method>
    <method name="i2d_TS_REQ" result="int">
      <arg name="a" type="const TS_REQ *" m68kreg="a0"/>
      <arg name="pp" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="TS_TST_INFO_delete_ext" result="X509_EXTENSION *">
      <arg name="a" type="TS_TST_INFO *" m68kreg="a0"/>
      <arg name="loc" type="int" m68kreg="d0"/>
    </method>
    <method name="ESS_ISSUER_SERIAL_free" result="void">
      <arg name="a" type="ESS_ISSUER_SERIAL *" m68kreg="a0"/>
    </method>
    <method name="ASN1_PCTX_set_str_flags" result="void">
      <arg name="p" type="ASN1_PCTX *" m68kreg="a0"/>
      <arg name="flags" type="unsigned long" m68kreg="d0"/>
    </method>
    <method name="TS_CONF_set_signer_key" result="int">
      <arg name="conf" type="CONF *" m68kreg="a0"/>
      <arg name="section" type="const char *" m68kreg="a1"/>
      <arg name="key" type="const char *" m68kreg="a2"/>
      <arg name="pass" type="const char *" m68kreg="a3"/>
      <arg name="ctx" type="TS_RESP_CTX *" m68kreg="d0"/>
    </method>
    <method name="TS_ACCURACY_get_millis" result="const ASN1_INTEGER *">
      <arg name="a" type="const TS_ACCURACY *" m68kreg="a0"/>
    </method>
    <method name="TS_RESP_get_token" result="PKCS7 *">
      <arg name="a" type="TS_RESP *" m68kreg="a0"/>
    </method>
    <method name="TS_ACCURACY_dup" result="TS_ACCURACY *">
      <arg name="a" type="TS_ACCURACY *" m68kreg="a0"/>
    </method>
    <method name="X509_CRL_set_default_method" result="void">
      <arg name="meth" type="const X509_CRL_METHOD *" m68kreg="a0"/>
    </method>
    <method name="CRYPTO_THREADID_hash" result="unsigned long" status="unimplemented">
      <arg name="id" type="const CRYPTO_THREADID *" m68kreg="a0"/>
    </method>
    <method name="TS_RESP_free" result="void">
      <arg name="a" type="TS_RESP *" m68kreg="a0"/>
    </method>
    <method name="ISSUING_DIST_POINT_free" result="void">
      <arg name="a" type="ISSUING_DIST_POINT *" m68kreg="a0"/>
    </method>
    <method name="ESS_ISSUER_SERIAL_new" result="ESS_ISSUER_SERIAL *">
    </method>
    <method name="PKCS7_add1_attrib_digest" result="int">
      <arg name="si" type="PKCS7_SIGNER_INFO *" m68kreg="a0"/>
      <arg name="md" type="const unsigned char *" m68kreg="a1"/>
      <arg name="mdlen" type="int" m68kreg="d0"/>
    </method>
    <method name="TS_RESP_CTX_add_md" result="int">
      <arg name="ctx" type="TS_RESP_CTX *" m68kreg="a0"/>
      <arg name="md" type="const EVP_MD *" m68kreg="a1"/>
    </method>
    <method name="TS_TST_INFO_dup" result="TS_TST_INFO *">
      <arg name="a" type="TS_TST_INFO *" m68kreg="a0"/>
    </method>
    <method name="PEM_write_bio_Parameters" result="int">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="x" type="EVP_PKEY *" m68kreg="a1"/>
    </method>
    <method name="TS_TST_INFO_get_accuracy" result="TS_ACCURACY *">
      <arg name="a" type="TS_TST_INFO *" m68kreg="a0"/>
    </method>
    <method name="X509_CRL_get0_by_serial" result="int">
      <arg name="crl" type="X509_CRL *" m68kreg="a0"/>
      <arg name="ret" type="X509_REVOKED **" m68kreg="a1"/>
      <arg name="serial" type="ASN1_INTEGER *" m68kreg="a2"/>
    </method>
    <method name="TS_TST_INFO_set_version" result="int">
      <arg name="a" type="TS_TST_INFO *" m68kreg="a0"/>
      <arg name="version" type="long" m68kreg="d0"/>
    </method>
    <method name="TS_RESP_CTX_get_tst_info" result="TS_TST_INFO *">
      <arg name="ctx" type="TS_RESP_CTX *" m68kreg="a0"/>
    </method>
    <method name="TS_RESP_verify_signature" result="int">
      <arg name="token" type="PKCS7 *" m68kreg="a0"/>
      <arg name="certs" type="STACK_OF(X509) *" m68kreg="a1"/>
      <arg name="store" type="X509_STORE *" m68kreg="a2"/>
      <arg name="signer_out" type="X509 **" m68kreg="a3"/>
    </method>
    <method name="CRYPTO_THREADID_get_callback" result="void (*)(CRYPTO_THREADID *)" status="unimplemented">
    </method>
    <method name="TS_TST_INFO_get_tsa" result="GENERAL_NAME *">
      <arg name="a" type="TS_TST_INFO *" m68kreg="a0"/>
    </method>
    <method name="TS_STATUS_INFO_new" result="TS_STATUS_INFO *">
    </method>
    <method name="EVP_PKEY_CTX_get_cb" result="int (*)(EVP_PKEY_CTX *ctx)">
      <arg name="ctx" type="EVP_PKEY_CTX *" m68kreg="a0"/>
    </method>
    <method name="TS_REQ_get_ext_d2i" result="void *">
      <arg name="a" type="TS_REQ *" m68kreg="a0"/>
      <arg name="nid" type="int" m68kreg="d0"/>
      <arg name="crit" type="int *" m68kreg="a1"/>
      <arg name="idx" type="int *" m68kreg="d1"/>
    </method>
    <method name="GENERAL_NAME_set0_othername" result="int">
      <arg name="gen" type="GENERAL_NAME *" m68kreg="a0"/>
      <arg name="oid" type="ASN1_OBJECT *" m68kreg="a1"/>
      <arg name="value" type="ASN1_TYPE *" m68kreg="a2"/>
    </method>
    <method name="TS_TST_INFO_get_ext_count" result="int">
      <arg name="a" type="TS_TST_INFO *" m68kreg="a0"/>
    </method>
    <method name="TS_RESP_CTX_get_request" result="TS_REQ *">
      <arg name="ctx" type="TS_RESP_CTX *" m68kreg="a0"/>
    </method>
    <method name="i2d_NETSCAPE_X509" result="int" status="unimplemented">
      <arg name="a" type="NETSCAPE_X509 *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="EVP_PKEY_meth_set_signctx" result="void">
      <arg name="pmeth" type="EVP_PKEY_METHOD *" m68kreg="a0"/>
      <arg name="signctx_init" type="int (*)(EVP_PKEY_CTX *ctx, EVP_MD_CTX *mctx)" m68kreg="a1"/>
      <arg name="signctx" type="int (*)(EVP_PKEY_CTX *ctx, unsigned char *sig, size_t *siglen, EVP_MD_CTX *mctx)" m68kreg="a2"/>
    </method>
    <method name="EVP_PKEY_asn1_copy" result="void">
      <arg name="dst" type="EVP_PKEY_ASN1_METHOD *" m68kreg="a0"/>
      <arg name="src" type="const EVP_PKEY_ASN1_METHOD *" m68kreg="a1"/>
    </method>
    <method name="ASN1_TYPE_cmp" result="int">
      <arg name="a" type="const ASN1_TYPE *" m68kreg="a0"/>
      <arg name="b" type="const ASN1_TYPE *" m68kreg="a1"/>
    </method>
    <method name="EVP_CIPHER_do_all_sorted" result="void">
      <arg name="fn" type="void (*)(const EVP_CIPHER *ciph, const char *from, const char *to, void *x)" m68kreg="a0"/>
      <arg name="arg" type="void *" m68kreg="a1"/>
    </method>
    <method name="EVP_PKEY_CTX_free" result="void">
      <arg name="ctx" type="EVP_PKEY_CTX *" m68kreg="a0"/>
    </method>
    <method name="d2i_TS_MSG_IMPRINT_fp" result="TS_MSG_IMPRINT *" status="unimplemented">
      <arg name="fp" type="FILE *" m68kreg="a0"/>
      <arg name="a" type="TS_MSG_IMPRINT **" m68kreg="a1"/>
    </method>
    <method name="X509_STORE_CTX_get1_certs" result="STACK_OF(X509) *">
      <arg name="st" type="X509_STORE_CTX *" m68kreg="a0"/>
      <arg name="nm" type="X509_NAME *" m68kreg="a1"/>
    </method>
    <method name="EVP_PKEY_CTX_get_operation" result="int">
      <arg name="ctx" type="EVP_PKEY_CTX *" m68kreg="a0"/>
    </method>
    <method name="d2i_ESS_SIGNING_CERT" result="ESS_SIGNING_CERT *">
      <arg name="a" type="ESS_SIGNING_CERT **" m68kreg="a0"/>
      <arg name="pp" type="const unsigned char **" m68kreg="a1"/>
      <arg name="length" type="long" m68kreg="d0"/>
    </method>
    <method name="TS_CONF_set_ordering" result="int">
      <arg name="conf" type="CONF *" m68kreg="a0"/>
      <arg name="section" type="const char *" m68kreg="a1"/>
      <arg name="ctx" type="TS_RESP_CTX *" m68kreg="a2"/>
    </method>
    <method name="EVP_PBE_alg_add_type" result="int">
      <arg name="pbe_type" type="int" m68kreg="d0"/>
      <arg name="pbe_nid" type="int" m68kreg="d1"/>
      <arg name="cipher_nid" type="int" m68kreg="d2"/>
      <arg name="md_nid" type="int" m68kreg="d3"/>
      <arg name="keygen" type="EVP_PBE_KEYGEN *" m68kreg="a0"/>
    </method>
    <method name="TS_REQ_set_version" result="int">
      <arg name="a" type="TS_REQ *" m68kreg="a0"/>
      <arg name="version" type="long" m68kreg="d0"/>
    </method>
    <method name="EVP_PKEY_get0" result="void *">
      <arg name="pkey" type="EVP_PKEY *" m68kreg="a0"/>
    </method>
    <method name="BIO_asn1_set_suffix" result="int">
      <arg name="b" type="BIO *" m68kreg="a0"/>
      <arg name="suffix" type="asn1_ps_func *" m68kreg="a1"/>
      <arg name="suffix_free" type="asn1_ps_func *" m68kreg="a2"/>
    </method>
    <method name="i2d_TS_STATUS_INFO" result="int">
      <arg name="a" type="const TS_STATUS_INFO *" m68kreg="a0"/>
      <arg name="pp" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="EVP_MD_do_all" result="void">
      <arg name="fn" type="void (*)(const EVP_MD *ciph, const char *from, const char *to, void *x)" m68kreg="a0"/>
      <arg name="arg" type="void *" m68kreg="a1"/>
    </method>
    <method name="TS_TST_INFO_set_accuracy" result="int">
      <arg name="a" type="TS_TST_INFO *" m68kreg="a0"/>
      <arg name="accuracy" type="TS_ACCURACY *" m68kreg="a1"/>
    </method>
    <method name="PKCS7_add_attrib_content_type" result="int">
      <arg name="si" type="PKCS7_SIGNER_INFO *" m68kreg="a0"/>
      <arg name="coid" type="ASN1_OBJECT *" m68kreg="a1"/>
    </method>
    <method name="EVP_PKEY_meth_add0" result="int">
      <arg name="pmeth" type="const EVP_PKEY_METHOD *" m68kreg="a0"/>
    </method>
    <method name="TS_TST_INFO_set_tsa" result="int">
      <arg name="a" type="TS_TST_INFO *" m68kreg="a0"/>
      <arg name="tsa" type="GENERAL_NAME *" m68kreg="a1"/>
    </method>
    <method name="EVP_PKEY_meth_new" result="EVP_PKEY_METHOD *">
      <arg name="id" type="int" m68kreg="d0"/>
      <arg name="flags" type="int" m68kreg="d1"/>
    </method>
    <method name="TS_CONF_set_accuracy" result="int">
      <arg name="conf" type="CONF *" m68kreg="a0"/>
      <arg name="section" type="const char *" m68kreg="a1"/>
      <arg name="ctx" type="TS_RESP_CTX *" m68kreg="a2"/>
    </method>
    <method name="ASN1_PCTX_set_oid_flags" result="void">
      <arg name="p" type="ASN1_PCTX *" m68kreg="a0"/>
      <arg name="flags" type="unsigned long" m68kreg="d0"/>
    </method>
    <method name="ESS_SIGNING_CERT_dup" result="ESS_SIGNING_CERT *">
      <arg name="a" type="ESS_SIGNING_CERT *" m68kreg="a0"/>
    </method>
    <method name="d2i_TS_REQ_bio" result="TS_REQ *">
      <arg name="fp" type="BIO *" m68kreg="a0"/>
      <arg name="a" type="TS_REQ **" m68kreg="a1"/>
    </method>
    <method name="X509_time_adj_ex" result="ASN1_TIME *">
      <arg name="s" type="ASN1_TIME *" m68kreg="a0"/>
      <arg name="offset_day" type="int" m68kreg="d0"/>
      <arg name="offset_sec" type="long" m68kreg="d1"/>
      <arg name="t" type="time_t *" m68kreg="a1"/>
    </method>
    <method name="TS_RESP_CTX_add_flags" result="void">
      <arg name="ctx" type="TS_RESP_CTX *" m68kreg="a0"/>
      <arg name="flags" type="int" m68kreg="d0"/>
    </method>
    <method name="d2i_TS_STATUS_INFO" result="TS_STATUS_INFO *">
      <arg name="a" type="TS_STATUS_INFO **" m68kreg="a0"/>
      <arg name="pp" type="const unsigned char **" m68kreg="a1"/>
      <arg name="length" type="long" m68kreg="d0"/>
    </method>
    <method name="TS_MSG_IMPRINT_set_msg" result="int">
      <arg name="a" type="TS_MSG_IMPRINT *" m68kreg="a0"/>
      <arg name="d" type="unsigned char *" m68kreg="a1"/>
      <arg name="len" type="int" m68kreg="d0"/>
    </method>
    <method name="BIO_asn1_get_suffix" result="int">
      <arg name="b" type="BIO *" m68kreg="a0"/>
      <arg name="psuffix" type="asn1_ps_func **" m68kreg="a1"/>
      <arg name="psuffix_free" type="asn1_ps_func **" m68kreg="a2"/>
    </method>
    <method name="TS_REQ_free" result="void">
      <arg name="a" type="TS_REQ *" m68kreg="a0"/>
    </method>
    <method name="EVP_PKEY_meth_free" result="void">
      <arg name="pmeth" type="EVP_PKEY_METHOD *" m68kreg="a0"/>
    </method>
    <method name="TS_REQ_get_exts" result="STACK_OF(X509_EXTENSION) *">
      <arg name="a" type="TS_REQ *" m68kreg="a0"/>
    </method>
    <method name="TS_RESP_CTX_set_clock_precision_digits" result="int">
      <arg name="ctx" type="TS_RESP_CTX *" m68kreg="a0"/>
      <arg name="clock_precision_digits" type="unsigned" m68kreg="d0"/>
    </method>
    <method name="TS_RESP_CTX_add_failure_info" result="int">
      <arg name="ctx" type="TS_RESP_CTX *" m68kreg="a0"/>
      <arg name="failure" type="int" m68kreg="d0"/>
    </method>
    <method name="i2d_TS_RESP_bio" result="int">
      <arg name="fp" type="BIO *" m68kreg="a0"/>
      <arg name="a" type="TS_RESP *" m68kreg="a1"/>
    </method>
    <method name="EVP_PKEY_CTX_get0_peerkey" result="EVP_PKEY *">
      <arg name="ctx" type="EVP_PKEY_CTX *" m68kreg="a0"/>
    </method>
    <method name="TS_REQ_new" result="TS_REQ *">
    </method>
    <method name="TS_MSG_IMPRINT_new" result="TS_MSG_IMPRINT *">
    </method>
    <method name="EVP_PKEY_meth_find" result="const EVP_PKEY_METHOD *">
      <arg name="type" type="int" m68kreg="a0"/>
    </method>
    <method name="EVP_PKEY_id" result="int">
      <arg name="pkey" type="const EVP_PKEY *" m68kreg="a0"/>
    </method>
    <method name="TS_TST_INFO_set_serial" result="int">
      <arg name="a" type="TS_TST_INFO *" m68kreg="a0"/>
      <arg name="serial" type="const ASN1_INTEGER *" m68kreg="a1"/>
    </method>
    <method name="a2i_GENERAL_NAME" result="GENERAL_NAME *">
      <arg name="out" type="GENERAL_NAME *" m68kreg="a0"/>
      <arg name="method" type="const X509V3_EXT_METHOD *" m68kreg="a1"/>
      <arg name="ctx" type="X509V3_CTX *" m68kreg="a2"/>
      <arg name="gen_type" type="int" m68kreg="d0"/>
      <arg name="value" type="const char *" m68kreg="a3"/>
      <arg name="is_nc" type="int" m68kreg="d1"/>
    </method>
    <method name="TS_CONF_set_crypto_device" result="int">
      <arg name="conf" type="CONF *" m68kreg="a0"/>
      <arg name="section" type="const char *" m68kreg="a1"/>
      <arg name="device" type="const char *" m68kreg="a2"/>
    </method>
    <method name="EVP_PKEY_verify_init" result="int">
      <arg name="ctx" type="EVP_PKEY_CTX *" m68kreg="a0"/>
    </method>
    <method name="TS_CONF_set_policies" result="int">
      <arg name="conf" type="CONF *" m68kreg="a0"/>
      <arg name="section" type="const char *" m68kreg="a1"/>
      <arg name="ctx" type="TS_RESP_CTX *" m68kreg="a2"/>
    </method>
    <method name="ASN1_PCTX_new" result="ASN1_PCTX *">
    </method>
    <method name="ESS_CERT_ID_free" result="void">
      <arg name="a" type="ESS_CERT_ID *" m68kreg="a0"/>
    </method>
    <method name="TS_MSG_IMPRINT_free" result="void">
      <arg name="a" type="TS_MSG_IMPRINT *" m68kreg="a0"/>
    </method>
    <method name="TS_VERIFY_CTX_init" result="void">
      <arg name="ctx" type="TS_VERIFY_CTX *" m68kreg="a0"/>
    </method>
    <method name="PKCS7_stream" result="int">
      <arg name="boundary" type="unsigned char ***" m68kreg="a0"/>
      <arg name="p7" type="PKCS7 *" m68kreg="a1"/>
    </method>
    <method name="TS_RESP_CTX_set_certs" result="int">
      <arg name="ctx" type="TS_RESP_CTX *" m68kreg="a0"/>
      <arg name="certs" type="STACK_OF(X509) *" m68kreg="a1"/>
    </method>
    <method name="TS_CONF_set_def_policy" result="int">
      <arg name="conf" type="CONF *" m68kreg="a0"/>
      <arg name="section" type="const char *" m68kreg="a1"/>
      <arg name="policy" type="const char *" m68kreg="a2"/>
      <arg name="ctx" type="TS_RESP_CTX *" m68kreg="a3"/>
    </method>
    <method name="ASN1_GENERALIZEDTIME_adj" result="ASN1_GENERALIZEDTIME *">
      <arg name="s" type="ASN1_GENERALIZEDTIME *" m68kreg="a0"/>
      <arg name="t" type="time_t" m68kreg="d0"/>
      <arg name="offset_day" type="int" m68kreg="d1"/>
      <arg name="offset_sec" type="long" m68kreg="d2"/>
    </method>
    <method name="NETSCAPE_X509_new" result="NETSCAPE_X509 *" status="unimplemented">
    </method>
    <method name="TS_ACCURACY_free" result="void">
      <arg name="a" type="TS_ACCURACY *" m68kreg="a0"/>
    </method>
    <method name="TS_RESP_get_tst_info" result="TS_TST_INFO *">
      <arg name="a" type="TS_RESP *" m68kreg="a0"/>
    </method>
    <method name="EVP_PKEY_derive_set_peer" result="int">
      <arg name="ctx" type="EVP_PKEY_CTX *" m68kreg="a0"/>
      <arg name="peer" type="EVP_PKEY *" m68kreg="a1"/>
    </method>
    <method name="PEM_read_bio_Parameters" result="EVP_PKEY *">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="x" type="EVP_PKEY **" m68kreg="a1"/>
    </method>
    <method name="TS_CONF_set_clock_precision_digits" result="int">
      <arg name="conf" type="CONF *" m68kreg="a0"/>
      <arg name="section" type="const char *" m68kreg="a1"/>
      <arg name="ctx" type="TS_RESP_CTX *" m68kreg="a2"/>
    </method>
    <method name="ESS_ISSUER_SERIAL_dup" result="ESS_ISSUER_SERIAL *">
      <arg name="a" type="ESS_ISSUER_SERIAL *" m68kreg="a0"/>
    </method>
    <method name="TS_ACCURACY_get_micros" result="const ASN1_INTEGER *">
      <arg name="a" type="const TS_ACCURACY *" m68kreg="a0"/>
    </method>
    <method name="ASN1_PCTX_get_str_flags" result="unsigned long">
      <arg name="p" type="const ASN1_PCTX *" m68kreg="a0"/>
    </method>
    <method name="NAME_CONSTRAINTS_check" result="int">
      <arg name="x" type="X509 *" m68kreg="a0"/>
      <arg name="nc" type="NAME_CONSTRAINTS *" m68kreg="a1"/>
    </method>
    <method name="ASN1_BIT_STRING_check" result="int">
      <arg name="a" type="const ASN1_BIT_STRING *" m68kreg="a0"/>
      <arg name="flags" type="const unsigned char *" m68kreg="a1"/>
      <arg name="flags_len" type="int" m68kreg="d0"/>
    </method>
    <method name="X509_check_akid" result="int">
      <arg name="issuer" type="X509 *" m68kreg="a0"/>
      <arg name="akid" type="AUTHORITY_KEYID *" m68kreg="a1"/>
    </method>
    <method name="ASN1_PCTX_free" result="void">
      <arg name="p" type="ASN1_PCTX *" m68kreg="a0"/>
    </method>
    <method name="PEM_write_bio_ASN1_stream" result="int">
      <arg name="out" type="BIO *" m68kreg="a0"/>
      <arg name="val" type="ASN1_VALUE *" m68kreg="a1"/>
      <arg name="in" type="BIO *" m68kreg="a2"/>
      <arg name="flags" type="int" m68kreg="d0"/>
      <arg name="hdr" type="const char *" m68kreg="a3"/>
      <arg name="it" type="const ASN1_ITEM *" m68kreg="d1"/>
    </method>
    <method name="i2d_ASN1_bio_stream" result="int">
      <arg name="out" type="BIO *" m68kreg="a0"/>
      <arg name="val" type="ASN1_VALUE *" m68kreg="a1"/>
      <arg name="in" type="BIO *" m68kreg="a2"/>
      <arg name="flags" type="int" m68kreg="d0"/>
      <arg name="it" type="const ASN1_ITEM *" m68kreg="a3"/>
    </method>
    <method name="TS_X509_ALGOR_print_bio" result="int">
      <arg name="bio" type="BIO *" m68kreg="a0"/>
      <arg name="alg" type="const X509_ALGOR *" m68kreg="a1"/>
    </method>
    <method name="EVP_PKEY_meth_set_cleanup" result="void">
      <arg name="pmeth" type="EVP_PKEY_METHOD *" m68kreg="a0"/>
      <arg name="cleanup" type="void (*)(EVP_PKEY_CTX *ctx)" m68kreg="a1"/>
    </method>
    <method name="EVP_PKEY_asn1_free" result="void">
      <arg name="ameth" type="EVP_PKEY_ASN1_METHOD *" m68kreg="a0"/>
    </method>
    <method name="ESS_SIGNING_CERT_free" result="void">
      <arg name="a" type="ESS_SIGNING_CERT *" m68kreg="a0"/>
    </method>
    <method name="TS_TST_INFO_set_msg_imprint" result="int">
      <arg name="a" type="TS_TST_INFO *" m68kreg="a0"/>
      <arg name="msg_imprint" type="TS_MSG_IMPRINT *" m68kreg="a1"/>
    </method>
    <method name="GENERAL_NAME_cmp" result="int">
      <arg name="a" type="GENERAL_NAME *" m68kreg="a0"/>
      <arg name="b" type="GENERAL_NAME *" m68kreg="a1"/>
    </method>
    <method name="d2i_ASN1_SET_ANY" result="ASN1_SEQUENCE_ANY *">
      <arg name="a" type="ASN1_SEQUENCE_ANY **" m68kreg="a0"/>
      <arg name="pp" type="const unsigned char **" m68kreg="a1"/>
      <arg name="length" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_TS_REQ_fp" result="int" status="unimplemented">
      <arg name="fp" type="FILE *" m68kreg="a0"/>
      <arg name="a" type="TS_REQ *" m68kreg="a1"/>
    </method>
    <method name="d2i_ASN1_SEQUENCE_ANY" result="ASN1_SEQUENCE_ANY *">
      <arg name="a" type="ASN1_SEQUENCE_ANY **" m68kreg="a0"/>
      <arg name="pp" type="const unsigned char **" m68kreg="a1"/>
      <arg name="length" type="long" m68kreg="d0"/>
    </method>
    <method name="GENERAL_NAME_get0_otherName" result="int">
      <arg name="gen" type="const GENERAL_NAME *" m68kreg="a0"/>
      <arg name="poid" type="ASN1_OBJECT **" m68kreg="a1"/>
      <arg name="pvalue" type="ASN1_TYPE **" m68kreg="a2"/>
    </method>
    <method name="d2i_ESS_CERT_ID" result="ESS_CERT_ID *">
      <arg name="a" type="ESS_CERT_ID **" m68kreg="a0"/>
      <arg name="pp" type="const unsigned char **" m68kreg="a1"/>
      <arg name="length" type="long" m68kreg="d0"/>
    </method>
    <method name="OBJ_find_sigid_algs" result="int">
      <arg name="signid" type="int" m68kreg="d0"/>
      <arg name="pdig_nid" type="int *" m68kreg="a0"/>
      <arg name="ppkey_nid" type="int *" m68kreg="a1"/>
    </method>
    <method name="EVP_PKEY_meth_set_keygen" result="void">
      <arg name="pmeth" type="EVP_PKEY_METHOD *" m68kreg="a0"/>
      <arg name="keygen_init" type="int (*)(EVP_PKEY_CTX *ctx)" m68kreg="a1"/>
      <arg name="keygen" type="int (*)(EVP_PKEY_CTX *ctx, EVP_PKEY *pkey)" m68kreg="a2"/>
    </method>
    <method name="PKCS5_PBKDF2_HMAC" result="int">
      <arg name="pass" type="const char *" m68kreg="a0"/>
      <arg name="passlen" type="int" m68kreg="d0"/>
      <arg name="salt" type="const unsigned char *" m68kreg="a1"/>
      <arg name="saltlen" type="int" m68kreg="d1"/>
      <arg name="iter" type="int" m68kreg="d2"/>
      <arg name="digest" type="const EVP_MD *" m68kreg="a2"/>
      <arg name="keylen" type="int" m68kreg="d3"/>
      <arg name="out" type="unsigned char *" m68kreg="a3"/>
    </method>
    <method name="EVP_PKEY_paramgen" result="int">
      <arg name="ctx" type="EVP_PKEY_CTX *" m68kreg="a0"/>
      <arg name="ppkey" type="EVP_PKEY **" m68kreg="a1"/>
    </method>
    <method name="EVP_PKEY_meth_set_paramgen" result="void">
      <arg name="pmeth" type="EVP_PKEY_METHOD *" m68kreg="a0"/>
      <arg name="paramgen_init" type="int (*)(EVP_PKEY_CTX *ctx)" m68kreg="a1"/>
      <arg name="paramgen" type="int (*)(EVP_PKEY_CTX *ctx, EVP_PKEY *pkey)" m68kreg="a2"/>
    </method>
    <method name="BIO_new_PKCS7" result="BIO *">
      <arg name="out" type="BIO *" m68kreg="a0"/>
      <arg name="p7" type="PKCS7 *" m68kreg="a1"/>
    </method>
    <method name="EVP_PKEY_verify_recover" result="int">
      <arg name="ctx" type="EVP_PKEY_CTX *" m68kreg="a0"/>
      <arg name="rout" type="unsigned char *" m68kreg="a1"/>
      <arg name="routlen" type="size_t *" m68kreg="a2"/>
      <arg name="sig" type="const unsigned char *" m68kreg="a3"/>
      <arg name="siglen" type="size_t" m68kreg="d0"/>
    </method>
    <method name="TS_ext_print_bio" result="int">
      <arg name="bio" type="BIO *" m68kreg="a0"/>
      <arg name="extensions" type="STACK_OF(X509_EXTENSION) *" m68kreg="a1"/>
    </method>
    <method name="TS_ASN1_INTEGER_print_bio" result="int">
      <arg name="bio" type="BIO *" m68kreg="a0"/>
      <arg name="num" type="const ASN1_INTEGER *" m68kreg="a1"/>
    </method>
    <method name="check_defer" result="void" status="unimplemented">
      <arg name="nid" type="int" m68kreg="d0"/>
    </method>
    <method name="DSO_pathbyaddr" result="int" status="unimplemented">
      <arg name="addr" type="void *" m68kreg="a0"/>
      <arg name="path" type="char *" m68kreg="a1"/>
      <arg name="sz" type="int" m68kreg="d0"/>
    </method>
    <method name="EVP_PKEY_set_type" result="int">
      <arg name="pkey" type="EVP_PKEY *" m68kreg="a0"/>
      <arg name="type" type="int" m68kreg="d0"/>
    </method>
    <method name="TS_ACCURACY_set_micros" result="int">
      <arg name="a" type="TS_ACCURACY *" m68kreg="a0"/>
      <arg name="micros" type="const ASN1_INTEGER *" m68kreg="a1"/>
    </method>
    <method name="TS_REQ_to_TS_VERIFY_CTX" result="TS_VERIFY_CTX *">
      <arg name="req" type="TS_REQ *" m68kreg="a0"/>
      <arg name="ctx" type="TS_VERIFY_CTX *" m68kreg="a1"/>
    </method>
    <method name="EVP_PKEY_meth_set_copy" result="void">
      <arg name="pmeth" type="EVP_PKEY_METHOD *" m68kreg="a0"/>
      <arg name="copy" type="int (*)(EVP_PKEY_CTX *dst, EVP_PKEY_CTX *src)" m68kreg="a1"/>
    </method>
    <method name="ASN1_PCTX_set_cert_flags" result="void">
      <arg name="p" type="ASN1_PCTX *" m68kreg="a0"/>
      <arg name="flags" type="unsigned long" m68kreg="d0"/>
    </method>
    <method name="TS_TST_INFO_get_ext" result="X509_EXTENSION *">
      <arg name="a" type="TS_TST_INFO *" m68kreg="a0"/>
      <arg name="loc" type="int" m68kreg="d0"/>
    </method>
    <method name="EVP_PKEY_asn1_set_ctrl" result="void">
      <arg name="ameth" type="EVP_PKEY_ASN1_METHOD *" m68kreg="a0"/>
      <arg name="pkey_ctrl" type="int (*)(EVP_PKEY *pkey, int op, long arg1, void *arg2)" m68kreg="a1"/>
    </method>
    <method name="TS_TST_INFO_get_ext_by_critical" result="int">
      <arg name="a" type="TS_TST_INFO *" m68kreg="a0"/>
      <arg name="crit" type="int" m68kreg="d0"/>
      <arg name="lastpos" type="int" m68kreg="d1"/>
    </method>
    <method name="EVP_PKEY_CTX_new_id" result="EVP_PKEY_CTX *">
      <arg name="id" type="int" m68kreg="d0"/>
      <arg name="e" type="ENGINE *" m68kreg="a0"/>
    </method>
    <method name="TS_REQ_get_ext_by_OBJ" result="int">
      <arg name="a" type="TS_REQ *" m68kreg="a0"/>
      <arg name="obj" type="const ASN1_OBJECT *" m68kreg="a1"/>
      <arg name="lastpos" type="int" m68kreg="d0"/>
    </method>
    <method name="TS_CONF_set_signer_cert" result="int">
      <arg name="conf" type="CONF *" m68kreg="a0"/>
      <arg name="section" type="const char *" m68kreg="a1"/>
      <arg name="cert" type="const char *" m68kreg="a2"/>
      <arg name="ctx" type="TS_RESP_CTX *" m68kreg="a3"/>
    </method>
    <method name="X509_NAME_hash_old" result="unsigned long">
      <arg name="x" type="X509_NAME *" m68kreg="a0"/>
    </method>
    <method name="ASN1_TIME_set_string" result="int">
      <arg name="s" type="ASN1_TIME *" m68kreg="a0"/>
      <arg name="str" type="const char *" m68kreg="a1"/>
    </method>
    <method name="EVP_MD_flags" result="unsigned long">
      <arg name="md" type="const EVP_MD *" m68kreg="a0"/>
    </method>
    <method name="TS_RESP_CTX_free" result="void">
      <arg name="ctx" type="TS_RESP_CTX *" m68kreg="a0"/>
    </method>
    <method name="OCSP_REQ_CTX_add1_header" result="int">
      <arg name="rctx" type="OCSP_REQ_CTX *" m68kreg="a0"/>
      <arg name="name" type="const char *" m68kreg="a1"/>
      <arg name="value" type="const char *" m68kreg="a2"/>
    </method>
    <method name="OCSP_REQ_CTX_set1_req" result="int">
      <arg name="rctx" type="OCSP_REQ_CTX *" m68kreg="a0"/>
      <arg name="req" type="OCSP_REQUEST *" m68kreg="a1"/>
    </method>
    <method name="X509_STORE_set_verify_cb" result="void">
      <arg name="ctx" type="X509_STORE *" m68kreg="a0"/>
      <arg name="verify_cb" type="X509_STORE_CTX_verify_cb" m68kreg="a1"/>
    </method>
    <method name="X509_STORE_CTX_get0_current_crl" result="X509_CRL *">
      <arg name="ctx" type="X509_STORE_CTX *" m68kreg="a0"/>
    </method>
    <method name="X509_STORE_CTX_get0_parent_ctx" result="X509_STORE_CTX *">
      <arg name="ctx" type="X509_STORE_CTX *" m68kreg="a0"/>
    </method>
    <method name="X509_STORE_CTX_get0_current_issuer" result="X509 *">
      <arg name="ctx" type="X509_STORE_CTX *" m68kreg="a0"/>
    </method>
    <method name="EVP_CIPHER_CTX_copy" result="int">
      <arg name="out" type="EVP_CIPHER_CTX *" m68kreg="a0"/>
      <arg name="in" type="const EVP_CIPHER_CTX *" m68kreg="a1"/>
    </method>
    <method name="UI_method_get_prompt_constructor" result="char *(*)(UI*, const char*, const char*)">
      <arg name="method" type="const UI_METHOD *" m68kreg="a0"/>
    </method>
    <method name="UI_method_set_prompt_constructor" result="int">
      <arg name="method" type="UI_METHOD *" m68kreg="a0"/>
      <arg name="prompt_constructor" type="char *(*)(UI* ui, const char* object_desc, const char* object_name)" m68kreg="a1"/>
    </method>
    <method name="EVP_read_pw_string_min" result="int">
      <arg name="buf" type="char *" m68kreg="a0"/>
      <arg name="minlen" type="int" m68kreg="d0"/>
      <arg name="maxlen" type="int" m68kreg="d1"/>
      <arg name="prompt" type="const char *" m68kreg="a1"/>
      <arg name="verify" type="int" m68kreg="d2"/>
    </method>
    <method name="CRYPTO_cts128_encrypt" result="size_t">
      <arg name="in" type="const unsigned char *" m68kreg="a0"/>
      <arg name="out" type="unsigned char *" m68kreg="a1"/>
      <arg name="len" type="size_t" m68kreg="d0"/>
      <arg name="key" type="const void *" m68kreg="a2"/>
      <arg name="ivec" type="unsigned char *" m68kreg="a3"/>
      <arg name="cbc" type="cbc128_f" m68kreg="d1"/>
    </method>
    <method name="CRYPTO_cts128_decrypt_block" result="size_t">
      <arg name="in" type="const unsigned char *" m68kreg="a0"/>
      <arg name="out" type="unsigned char *" m68kreg="a1"/>
      <arg name="len" type="size_t" m68kreg="d0"/>
      <arg name="key" type="const void *" m68kreg="a2"/>
      <arg name="ivec" type="unsigned char *" m68kreg="a3"/>
      <arg name="block" type="block128_f" m68kreg="d1"/>
    </method>
    <method name="CRYPTO_cfb128_1_encrypt" result="void">
      <arg name="in" type="const unsigned char *" m68kreg="a0"/>
      <arg name="out" type="unsigned char *" m68kreg="a1"/>
      <arg name="bits" type="size_t" m68kreg="d0"/>
      <arg name="key" type="const void *" m68kreg="a2"/>
      <arg name="ivec" type="unsigned char *" m68kreg="a3"/>
      <arg name="num" type="int *" m68kreg="d1"/>
      <arg name="enc" type="int" m68kreg="d2"/>
      <arg name="block" type="block128_f" m68kreg="d3"/>
    </method>
    <method name="CRYPTO_cbc128_encrypt" result="void">
      <arg name="in" type="const unsigned char *" m68kreg="a0"/>
      <arg name="out" type="unsigned char *" m68kreg="a1"/>
      <arg name="len" type="size_t" m68kreg="d0"/>
      <arg name="key" type="const void *" m68kreg="a2"/>
      <arg name="ivec" type="unsigned char *" m68kreg="a3"/>
      <arg name="block" type="block128_f" m68kreg="d1"/>
    </method>
    <method name="CRYPTO_ctr128_encrypt" result="void">
      <arg name="in" type="const unsigned char *" m68kreg="a0"/>
      <arg name="out" type="unsigned char *" m68kreg="a1"/>
      <arg name="len" type="size_t" m68kreg="d0"/>
      <arg name="key" type="const void *" m68kreg="a2"/>
      <arg name="ivec" type="unsigned char *" m68kreg="a3"/>
      <arg name="ecount_buf" type="unsigned char *" m68kreg="d1"/>
      <arg name="num" type="unsigned int *" m68kreg="d2"/>
      <arg name="block" type="block128_f" m68kreg="d3"/>
    </method>
    <method name="CRYPTO_ofb128_encrypt" result="void">
      <arg name="in" type="const unsigned char *" m68kreg="a0"/>
      <arg name="out" type="unsigned char *" m68kreg="a1"/>
      <arg name="len" type="size_t" m68kreg="d0"/>
      <arg name="key" type="const void *" m68kreg="a2"/>
      <arg name="ivec" type="unsigned char *" m68kreg="a3"/>
      <arg name="num" type="int *" m68kreg="d1"/>
      <arg name="block" type="block128_f" m68kreg="d2"/>
    </method>
    <method name="CRYPTO_cts128_decrypt" result="size_t">
      <arg name="in" type="const unsigned char *" m68kreg="a0"/>
      <arg name="out" type="unsigned char *" m68kreg="a1"/>
      <arg name="len" type="size_t" m68kreg="d0"/>
      <arg name="key" type="const void *" m68kreg="a2"/>
      <arg name="ivec" type="unsigned char *" m68kreg="a3"/>
      <arg name="cbc" type="cbc128_f" m68kreg="d1"/>
    </method>
    <method name="CRYPTO_cts128_encrypt_block" result="size_t">
      <arg name="in" type="const unsigned char *" m68kreg="a0"/>
      <arg name="out" type="unsigned char *" m68kreg="a1"/>
      <arg name="len" type="size_t" m68kreg="d0"/>
      <arg name="key" type="const void *" m68kreg="a2"/>
      <arg name="ivec" type="unsigned char *" m68kreg="a3"/>
      <arg name="block" type="block128_f" m68kreg="d1"/>
    </method>
    <method name="CRYPTO_cbc128_decrypt" result="void">
      <arg name="in" type="const unsigned char *" m68kreg="a0"/>
      <arg name="out" type="unsigned char *" m68kreg="a1"/>
      <arg name="len" type="size_t" m68kreg="d0"/>
      <arg name="key" type="const void *" m68kreg="a2"/>
      <arg name="ivec" type="unsigned char *" m68kreg="a3"/>
      <arg name="block" type="block128_f" m68kreg="d1"/>
    </method>
    <method name="CRYPTO_cfb128_encrypt" result="void">
      <arg name="in" type="const unsigned char *" m68kreg="a0"/>
      <arg name="out" type="unsigned char *" m68kreg="a1"/>
      <arg name="len" type="size_t" m68kreg="d0"/>
      <arg name="key" type="const void *" m68kreg="a2"/>
      <arg name="ivec" type="unsigned char *" m68kreg="a3"/>
      <arg name="num" type="int *" m68kreg="d1"/>
      <arg name="enc" type="int" m68kreg="d2"/>
      <arg name="block" type="block128_f" m68kreg="d3"/>
    </method>
    <method name="CRYPTO_cfb128_8_encrypt" result="void">
      <arg name="in" type="const unsigned char *" m68kreg="a0"/>
      <arg name="out" type="unsigned char *" m68kreg="a1"/>
      <arg name="length" type="size_t" m68kreg="d0"/>
      <arg name="key" type="const void *" m68kreg="a2"/>
      <arg name="ivec" type="unsigned char *" m68kreg="a3"/>
      <arg name="num" type="int *" m68kreg="d1"/>
      <arg name="enc" type="int" m68kreg="d2"/>
      <arg name="block" type="block128_f" m68kreg="d3"/>
    </method>
    <method name="OPENSSL_memcmp" result="int">
      <arg name="p1" type="const void *" m68kreg="a0"/>
      <arg name="p2" type="const void *" m68kreg="a1"/>
      <arg name="n" type="size_t" m68kreg="d0"/>
    </method>
    <method name="OPENSSL_gmtime" result="struct tm *">
      <arg name="timer" type="const time_t *" m68kreg="a0"/>
      <arg name="result" type="struct tm *" m68kreg="a1"/>
    </method>
    <method name="OPENSSL_gmtime_adj" result="int">
      <arg name="tm" type="struct tm *" m68kreg="a0"/>
      <arg name="offset_day" type="int" m68kreg="d0"/>
      <arg name="offset_sec" type="long" m68kreg="d1"/>
    </method>
    <method name="OPENSSL_gmtime_diff" result="int">
      <arg name="pday" type="int *" m68kreg="a0"/>
      <arg name="psec" type="int *" m68kreg="a1"/>
      <arg name="from" type="const struct tm *" m68kreg="a2"/>
      <arg name="to" type="const struct tm *" m68kreg="a3"/>
    </method>
    <method name="EVP_PKEY_meth_get0_info" result="void">
      <arg name="ppkey_id" type="int *" m68kreg="a0"/>
      <arg name="pflags" type="int *" m68kreg="a1"/>
      <arg name="meth" type="const EVP_PKEY_METHOD *" m68kreg="a2"/>
    </method>
    <method name="EVP_PKEY_meth_copy" result="void">
      <arg name="dst" type="EVP_PKEY_METHOD *" m68kreg="a0"/>
      <arg name="src" type="const EVP_PKEY_METHOD *" m68kreg="a1"/>
    </method>
    <method name="RSA_padding_add_PKCS1_PSS_mgf1" result="int">
      <arg name="rsa" type="RSA *" m68kreg="a0"/>
      <arg name="EM" type="unsigned char *" m68kreg="a1"/>
      <arg name="mHash" type="const unsigned char *" m68kreg="a2"/>
      <arg name="Hash" type="const EVP_MD *" m68kreg="a3"/>
      <arg name="mgf1Hash" type="const EVP_MD *" m68kreg="d0"/>
      <arg name="sLen" type="int" m68kreg="d1"/>
    </method>
    <method name="RSA_verify_PKCS1_PSS_mgf1" result="int">
      <arg name="rsa" type="RSA *" m68kreg="a0"/>
      <arg name="mHash" type="const unsigned char *" m68kreg="a1"/>
      <arg name="Hash" type="const EVP_MD *" m68kreg="a2"/>
      <arg name="mgf1Hash" type="const EVP_MD *" m68kreg="a3"/>
      <arg name="EM" type="const unsigned char *" m68kreg="d0"/>
      <arg name="sLen" type="int" m68kreg="d1"/>
    </method>
    <method name="X509_ALGOR_set_md" result="void">
      <arg name="alg" type="X509_ALGOR *" m68kreg="a0"/>
      <arg name="md" type="const EVP_MD *" m68kreg="a1"/>
    </method>
    <method name="CMAC_CTX_copy" result="int">
      <arg name="out" type="CMAC_CTX *" m68kreg="a0"/>
      <arg name="in" type="const CMAC_CTX *" m68kreg="a1"/>
    </method>
    <method name="CMAC_CTX_free" result="void">
      <arg name="ctx" type="CMAC_CTX *" m68kreg="a0"/>
    </method>
    <method name="CMAC_CTX_get0_cipher_ctx" result="EVP_CIPHER_CTX *">
      <arg name="ctx" type="CMAC_CTX *" m68kreg="a0"/>
    </method>
    <method name="CMAC_CTX_cleanup" result="void">
      <arg name="ctx" type="CMAC_CTX *" m68kreg="a0"/>
    </method>
    <method name="CMAC_Init" result="int">
      <arg name="ctx" type="CMAC_CTX *" m68kreg="a0"/>
      <arg name="key" type="const void *" m68kreg="a1"/>
      <arg name="keylen" type="size_t" m68kreg="d0"/>
      <arg name="cipher" type="const EVP_CIPHER *" m68kreg="a2"/>
      <arg name="impl" type="ENGINE *" m68kreg="a3"/>
    </method>
    <method name="CMAC_Update" result="int">
      <arg name="ctx" type="CMAC_CTX *" m68kreg="a0"/>
      <arg name="data" type="const void *" m68kreg="a1"/>
      <arg name="dlen" type="size_t" m68kreg="d0"/>
    </method>
    <method name="CMAC_resume" result="int">
      <arg name="ctx" type="CMAC_CTX *" m68kreg="a0"/>
    </method>
    <method name="CMAC_CTX_new" result="CMAC_CTX *">
    </method>
    <method name="CMAC_Final" result="int">
      <arg name="ctx" type="CMAC_CTX *" m68kreg="a0"/>
      <arg name="out" type="unsigned char *" m68kreg="a1"/>
      <arg name="poutlen" type="size_t *" m68kreg="a2"/>
    </method>
    <method name="CRYPTO_ctr128_encrypt_ctr32" result="void">
      <arg name="in" type="const unsigned char *" m68kreg="a0"/>
      <arg name="out" type="unsigned char *" m68kreg="a1"/>
      <arg name="len" type="size_t" m68kreg="d0"/>
      <arg name="key" type="const void *" m68kreg="a2"/>
      <arg name="ivec" type="unsigned char *" m68kreg="a3"/>
      <arg name="ecount_buf" type="unsigned char *" m68kreg="d1"/>
      <arg name="num" type="unsigned int *" m68kreg="d2"/>
      <arg name="ctr" type="ctr128_f" m68kreg="d3"/>
    </method>
    <method name="CRYPTO_gcm128_release" result="void">
      <arg name="ctx" type="GCM128_CONTEXT *" m68kreg="a0"/>
    </method>
    <method name="CRYPTO_ccm128_decrypt_ccm64" result="int">
      <arg name="ctx" type="CCM128_CONTEXT *" m68kreg="a0"/>
      <arg name="inp" type="const unsigned char *" m68kreg="a1"/>
      <arg name="out" type="unsigned char *" m68kreg="a2"/>
      <arg name="len" type="size_t" m68kreg="d0"/>
      <arg name="stream" type="ccm128_f" m68kreg="a3"/>
    </method>
    <method name="CRYPTO_ccm128_encrypt" result="int">
      <arg name="ctx" type="CCM128_CONTEXT *" m68kreg="a0"/>
      <arg name="inp" type="const unsigned char *" m68kreg="a1"/>
      <arg name="out" type="unsigned char *" m68kreg="a2"/>
      <arg name="len" type="size_t" m68kreg="d0"/>
    </method>
    <method name="CRYPTO_gcm128_encrypt" result="int">
      <arg name="ctx" type="GCM128_CONTEXT *" m68kreg="a0"/>
      <arg name="in" type="const unsigned char *" m68kreg="a1"/>
      <arg name="out" type="unsigned char *" m68kreg="a2"/>
      <arg name="len" type="size_t" m68kreg="d0"/>
    </method>
    <method name="CRYPTO_xts128_encrypt" result="int">
      <arg name="ctx" type="XTS128_CONTEXT *" m68kreg="a0"/>
      <arg name="iv" type="const unsigned char *" m68kreg="a1"/>
      <arg name="inp" type="const unsigned char *" m68kreg="a2"/>
      <arg name="out" type="unsigned char *" m68kreg="a3"/>
      <arg name="len" type="size_t" m68kreg="d0"/>
      <arg name="enc" type="int" m68kreg="d1"/>
    </method>
    <method name="CRYPTO_nistcts128_decrypt_block" result="size_t">
      <arg name="in" type="const unsigned char *" m68kreg="a0"/>
      <arg name="out" type="unsigned char *" m68kreg="a1"/>
      <arg name="len" type="size_t" m68kreg="d0"/>
      <arg name="key" type="const void *" m68kreg="a2"/>
      <arg name="ivec" type="unsigned char *" m68kreg="d1"/>
      <arg name="block" type="block128_f" m68kreg="a3"/>
    </method>
    <method name="CRYPTO_gcm128_setiv" result="void">
      <arg name="ctx" type="GCM128_CONTEXT *" m68kreg="a0"/>
      <arg name="iv" type="const unsigned char *" m68kreg="a1"/>
      <arg name="len" type="size_t" m68kreg="d0"/>
    </method>
    <method name="CRYPTO_nistcts128_encrypt" result="size_t">
      <arg name="in" type="const unsigned char *" m68kreg="a0"/>
      <arg name="out" type="unsigned char *" m68kreg="a1"/>
      <arg name="len" type="size_t" m68kreg="d0"/>
      <arg name="key" type="const void *" m68kreg="a2"/>
      <arg name="ivec" type="unsigned char *" m68kreg="a3"/>
      <arg name="cbc" type="cbc128_f" m68kreg="d1"/>
    </method>
    <method name="CRYPTO_gcm128_tag" result="void">
      <arg name="ctx" type="GCM128_CONTEXT *" m68kreg="a0"/>
      <arg name="tag" type="unsigned char *" m68kreg="a1"/>
      <arg name="len" type="size_t" m68kreg="d0"/>
    </method>
    <method name="CRYPTO_ccm128_encrypt_ccm64" result="int">
      <arg name="ctx" type="CCM128_CONTEXT *" m68kreg="a0"/>
      <arg name="inp" type="const unsigned char *" m68kreg="a1"/>
      <arg name="out" type="unsigned char *" m68kreg="a2"/>
      <arg name="len" type="size_t" m68kreg="d0"/>
      <arg name="stream" type="ccm128_f" m68kreg="a3"/>
    </method>
    <method name="CRYPTO_ccm128_setiv" result="int">
      <arg name="ctx" type="CCM128_CONTEXT *" m68kreg="a0"/>
      <arg name="nonce" type="const unsigned char *" m68kreg="a1"/>
      <arg name="nlen" type="size_t" m68kreg="d0"/>
      <arg name="mlen" type="size_t" m68kreg="d1"/>
    </method>
    <method name="CRYPTO_nistcts128_encrypt_block" result="size_t">
      <arg name="in" type="const unsigned char *" m68kreg="a0"/>
      <arg name="out" type="unsigned char *" m68kreg="a1"/>
      <arg name="len" type="size_t" m68kreg="d0"/>
      <arg name="key" type="const void *" m68kreg="a2"/>
      <arg name="ivec" type="unsigned char *" m68kreg="a3"/>
      <arg name="block" type="block128_f" m68kreg="d1"/>
    </method>
    <method name="CRYPTO_gcm128_aad" result="int">
      <arg name="ctx" type="GCM128_CONTEXT *" m68kreg="a0"/>
      <arg name="aad" type="const unsigned char *" m68kreg="a1"/>
      <arg name="len" type="size_t" m68kreg="d0"/>
    </method>
    <method name="CRYPTO_ccm128_init" result="void">
      <arg name="ctx" type="CCM128_CONTEXT *" m68kreg="a0"/>
      <arg name="M" type="unsigned int" m68kreg="d0"/>
      <arg name="L" type="unsigned int" m68kreg="d1"/>
      <arg name="key" type="void *" m68kreg="a1"/>
      <arg name="block" type="block128_f" m68kreg="a2"/>
    </method>
    <method name="CRYPTO_nistcts128_decrypt" result="size_t">
      <arg name="in" type="const unsigned char *" m68kreg="a0"/>
      <arg name="out" type="unsigned char *" m68kreg="a1"/>
      <arg name="len" type="size_t" m68kreg="d0"/>
      <arg name="key" type="const void *" m68kreg="a2"/>
      <arg name="ivec" type="unsigned char *" m68kreg="a3"/>
      <arg name="cbc" type="cbc128_f" m68kreg="d1"/>
    </method>
    <method name="CRYPTO_gcm128_new" result="GCM128_CONTEXT *">
      <arg name="key" type="void *" m68kreg="a0"/>
      <arg name="block" type="block128_f" m68kreg="a1"/>
    </method>
    <method name="CRYPTO_ccm128_tag" result="size_t">
      <arg name="ctx" type="CCM128_CONTEXT *" m68kreg="a0"/>
      <arg name="tag" type="unsigned char *" m68kreg="a1"/>
      <arg name="len" type="size_t" m68kreg="d0"/>
    </method>
    <method name="CRYPTO_ccm128_decrypt" result="int">
      <arg name="ctx" type="CCM128_CONTEXT *" m68kreg="a0"/>
      <arg name="inp" type="const unsigned char *" m68kreg="a1"/>
      <arg name="out" type="unsigned char *" m68kreg="a2"/>
      <arg name="len" type="size_t" m68kreg="d0"/>
    </method>
    <method name="CRYPTO_ccm128_aad" result="void">
      <arg name="ctx" type="CCM128_CONTEXT *" m68kreg="a0"/>
      <arg name="aad" type="const unsigned char *" m68kreg="a1"/>
      <arg name="alen" type="size_t" m68kreg="d0"/>
    </method>
    <method name="CRYPTO_gcm128_init" result="void">
      <arg name="ctx" type="GCM128_CONTEXT *" m68kreg="a0"/>
      <arg name="key" type="void *" m68kreg="a1"/>
      <arg name="block" type="block128_f" m68kreg="a2"/>
    </method>
    <method name="CRYPTO_gcm128_decrypt" result="int">
      <arg name="ctx" type="GCM128_CONTEXT *" m68kreg="a0"/>
      <arg name="in" type="const unsigned char *" m68kreg="a1"/>
      <arg name="out" type="unsigned char *" m68kreg="a2"/>
      <arg name="len" type="size_t" m68kreg="d0"/>
    </method>
    <method name="CRYPTO_gcm128_decrypt_ctr32" result="int">
      <arg name="ctx" type="GCM128_CONTEXT *" m68kreg="a0"/>
      <arg name="in" type="const unsigned char *" m68kreg="a1"/>
      <arg name="out" type="unsigned char *" m68kreg="a2"/>
      <arg name="len" type="size_t" m68kreg="d0"/>
      <arg name="stream" type="ctr128_f" m68kreg="a3"/>
    </method>
    <method name="CRYPTO_gcm128_encrypt_ctr32" result="int">
      <arg name="ctx" type="GCM128_CONTEXT *" m68kreg="a0"/>
      <arg name="in" type="const unsigned char *" m68kreg="a1"/>
      <arg name="out" type="unsigned char *" m68kreg="a2"/>
      <arg name="len" type="size_t" m68kreg="d0"/>
      <arg name="stream" type="ctr128_f" m68kreg="a3"/>
    </method>
    <method name="CRYPTO_gcm128_finish" result="int">
      <arg name="ctx" type="GCM128_CONTEXT *" m68kreg="a0"/>
      <arg name="tag" type="const unsigned char *" m68kreg="a1"/>
      <arg name="len" type="size_t" m68kreg="d0"/>
    </method>
    <method name="PKCS5_pbkdf2_set" result="X509_ALGOR *">
      <arg name="iter" type="int" m68kreg="d0"/>
      <arg name="salt" type="unsigned char *" m68kreg="a0"/>
      <arg name="saltlen" type="int" m68kreg="d1"/>
      <arg name="prf_nid" type="int" m68kreg="d2"/>
      <arg name="keylen" type="int" m68kreg="d3"/>
    </method>
    <method name="RSA_PSS_PARAMS_new" result="RSA_PSS_PARAMS *">
    </method>
    <method name="d2i_RSA_PSS_PARAMS" result="RSA_PSS_PARAMS *">
      <arg name="a" type="RSA_PSS_PARAMS **" m68kreg="a0"/>
      <arg name="pp" type="const unsigned char **" m68kreg="a1"/>
      <arg name="length" type="long" m68kreg="d0"/>
    </method>
    <method name="RSA_PSS_PARAMS_free" result="void">
      <arg name="a" type="RSA_PSS_PARAMS *" m68kreg="a0"/>
    </method>
    <method name="i2d_RSA_PSS_PARAMS" result="int">
      <arg name="a" type="RSA_PSS_PARAMS *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="OPENSSL_stderr" result="void *" status="unimplemented">
    </method>
    <method name="OPENSSL_showfatal" result="void" status="unimplemented">
      <arg name="fmta" type="const char *" m68kreg="a0"/>
      <vararg name="dummy" type="long" m68kreg="a1"/>
    </method>
    <method name="POLICY_MAPPING_it" result="const ASN1_ITEM *">
    </method>
    <method name="NAME_CONSTRAINTS_it" result="const ASN1_ITEM *">
    </method>
    <method name="ASN1_OCTET_STRING_NDEF_it" result="const ASN1_ITEM *">
    </method>
    <method name="X509_CERT_PAIR_it" result="const ASN1_ITEM *" status="unimplemented">
    </method>
    <method name="POLICY_CONSTRAINTS_it" result="const ASN1_ITEM *">
    </method>
    <method name="POLICY_MAPPINGS_it" result="const ASN1_ITEM *">
    </method>
    <method name="GENERAL_SUBTREE_it" result="const ASN1_ITEM *">
    </method>
    <method name="X509_EXTENSIONS_it" result="const ASN1_ITEM *">
    </method>
    <method name="X509_ALGORS_it" result="const ASN1_ITEM *">
    </method>
    <method name="CMS_ContentInfo_it" result="const ASN1_ITEM *">
    </method>
    <method name="CMS_ReceiptRequest_it" result="const ASN1_ITEM *">
    </method>
    <method name="ASN1_SEQUENCE_ANY_it" result="const ASN1_ITEM *">
    </method>
    <method name="ASN1_SET_ANY_it" result="const ASN1_ITEM *">
    </method>
    <method name="NETSCAPE_X509_it" result="const ASN1_ITEM *" status="unimplemented">
    </method>
    <method name="ISSUING_DIST_POINT_it" result="const ASN1_ITEM *">
    </method>
    <method name="RSA_PSS_PARAMS_it" result="const ASN1_ITEM *">
    </method>
    <method name="ENGINE_load_gost" result="void" status="unimplemented">
    </method>

    <!-- AmiSSL v3.x - OpenSSL 1.0.2f -->

    <method name="PEM_write_bio_DHxparams" result="int">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="x" type="DH *" m68kreg="a1"/>
    </method>
    <method name="X509_ALGOR_cmp" result="int">
      <arg name="a" type="const X509_ALGOR *" m68kreg="a0"/>
      <arg name="b" type="const X509_ALGOR *" m68kreg="a1"/>
    </method>
    <method name="ASN1_STRING_clear_free" result="void">
      <arg name="a" type="ASN1_STRING *" m68kreg="a0"/>
    </method>
    <method name="ASN1_TIME_diff" result="int">
      <arg name="pday" type="int *" m68kreg="a0"/>
      <arg name="psec" type="int *" m68kreg="a1"/>
      <arg name="from" type="const ASN1_TIME *" m68kreg="a2"/>
      <arg name="to" type="const ASN1_TIME *" m68kreg="a3"/>
    </method>
    <method name="BIO_hex_string" result="int">
      <arg name="out" type="BIO *" m68kreg="a0"/>
      <arg name="indent" type="int" m68kreg="d0"/>
      <arg name="width" type="int" m68kreg="d1"/>
      <arg name="data" type="unsigned char *" m68kreg="a1"/>
      <arg name="datalen" type="int" m68kreg="d2"/>
    </method>
    <method name="BUF_strnlen" result="size_t" status="unimplemented">
      <arg name="str" type="const char *" m68kreg="a0"/>
      <arg name="maxlen" type="size_t" m68kreg="d0"/>
    </method>
    <method name="CMS_RecipientEncryptedKey_cert_cmp" result="int">
      <arg name="rek" type="CMS_RecipientEncryptedKey *" m68kreg="a0"/>
      <arg name="cert" type="X509 *" m68kreg="a1"/>
    </method>
    <method name="CMS_RecipientEncryptedKey_get0_id" result="int">
      <arg name="rek" type="CMS_RecipientEncryptedKey *" m68kreg="a0"/>
      <arg name="keyid" type="ASN1_OCTET_STRING **" m68kreg="a1"/>
      <arg name="tm" type="ASN1_GENERALIZEDTIME **" m68kreg="a2"/>
      <arg name="other" type="CMS_OtherKeyAttribute **" m68kreg="a3"/>
      <arg name="issuer" type="X509_NAME **" m68kreg="d0"/>
      <arg name="sno" type="ASN1_INTEGER **" m68kreg="d1"/>
    </method>
    <method name="CMS_RecipientInfo_encrypt" result="int">
      <arg name="cms" type="CMS_ContentInfo *" m68kreg="a0"/>
      <arg name="ri" type="CMS_RecipientInfo *" m68kreg="a1"/>
    </method>
    <method name="CMS_RecipientInfo_get0_pkey_ctx" result="EVP_PKEY_CTX *">
      <arg name="ri" type="CMS_RecipientInfo *" m68kreg="a0"/>
    </method>
    <method name="CMS_RecipientInfo_kari_decrypt" result="int">
      <arg name="cms" type="CMS_ContentInfo *" m68kreg="a0"/>
      <arg name="ri" type="CMS_RecipientInfo *" m68kreg="a1"/>
      <arg name="rek" type="CMS_RecipientEncryptedKey *" m68kreg="a2"/>
    </method>
    <method name="CMS_RecipientInfo_kari_get0_alg" result="int">
      <arg name="ri" type="CMS_RecipientInfo *" m68kreg="a0"/>
      <arg name="palg" type="X509_ALGOR **" m68kreg="a1"/>
      <arg name="pukm" type="ASN1_OCTET_STRING **" m68kreg="a2"/>
    </method>
    <method name="CMS_RecipientInfo_kari_get0_ctx" result="EVP_CIPHER_CTX *">
      <arg name="ri" type="CMS_RecipientInfo *" m68kreg="a0"/>
    </method>
    <method name="CMS_RecipientInfo_kari_get0_orig_id" result="int">
      <arg name="ri" type="CMS_RecipientInfo *" m68kreg="a0"/>
      <arg name="pubalg" type="X509_ALGOR **" m68kreg="a1"/>
      <arg name="pubkey" type="ASN1_BIT_STRING **" m68kreg="a2"/>
      <arg name="keyid" type="ASN1_OCTET_STRING **" m68kreg="a3"/>
      <arg name="issuer" type="X509_NAME **" m68kreg="d0"/>
      <arg name="sno" type="ASN1_INTEGER **" m68kreg="d1"/>
    </method>
    <method name="CMS_RecipientInfo_kari_get0_reks" result="STACK_OF(CMS_RecipientEncryptedKey) *">
      <arg name="ri" type="CMS_RecipientInfo *" m68kreg="a0"/>
    </method>
    <method name="CMS_RecipientInfo_kari_orig_id_cmp" result="int">
      <arg name="ri" type="CMS_RecipientInfo *" m68kreg="a0"/>
      <arg name="cert" type="X509 *" m68kreg="a1"/>
    </method>
    <method name="CMS_RecipientInfo_kari_set0_pkey" result="int">
      <arg name="ri" type="CMS_RecipientInfo *" m68kreg="a0"/>
      <arg name="pk" type="EVP_PKEY *" m68kreg="a1"/>
    </method>
    <method name="CMS_SharedInfo_encode" result="int">
      <arg name="pder" type="unsigned char **" m68kreg="a0"/>
      <arg name="kekalg" type="X509_ALGOR *" m68kreg="a1"/>
      <arg name="ukm" type="ASN1_OCTET_STRING *" m68kreg="a2"/>
      <arg name="keylen" type="int" m68kreg="d0"/>
    </method>
    <method name="CMS_SignerInfo_get0_md_ctx" result="EVP_MD_CTX *">
      <arg name="si" type="CMS_SignerInfo *" m68kreg="a0"/>
    </method>
    <method name="CMS_SignerInfo_get0_pkey_ctx" result="EVP_PKEY_CTX *">
      <arg name="si" type="CMS_SignerInfo *" m68kreg="a0"/>
    </method>
    <method name="CMS_SignerInfo_get0_signature" result="ASN1_OCTET_STRING *">
      <arg name="si" type="CMS_SignerInfo *" m68kreg="a0"/>
    </method>
    <method name="d2i_DHxparams" result="DH *">
      <arg name="a" type="DH **" m68kreg="a0"/>
      <arg name="pp" type="const unsigned char **" m68kreg="a1"/>
      <arg name="length" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_DHxparams" result="int">
      <arg name="dh" type="const DH *" m68kreg="a0"/>
      <arg name="pp" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="DH_compute_key_padded" result="int">
      <arg name="key" type="unsigned char *" m68kreg="a0"/>
      <arg name="pub_key" type="const BIGNUM *" m68kreg="a1"/>
      <arg name="dh" type="DH *" m68kreg="a2"/>
    </method>
    <method name="DH_get_1024_160" result="DH *">
    </method>
    <method name="DH_get_2048_224" result="DH *">
    </method>
    <method name="DH_get_2048_256" result="DH *">
    </method>
    <method name="DH_KDF_X9_42" result="int">
      <arg name="out" type="unsigned char *" m68kreg="a0"/>
      <arg name="outlen" type="size_t" m68kreg="d0"/>
      <arg name="Z" type="const unsigned char *" m68kreg="a1"/>
      <arg name="Zlen" type="size_t" m68kreg="d1"/>
      <arg name="key_oid" type="ASN1_OBJECT *" m68kreg="a2"/>
      <arg name="ukm" type="const unsigned char *" m68kreg="a3"/>
      <arg name="ukmlen" type="size_t" m68kreg="d2"/>
      <arg name="md" type="const EVP_MD *" m68kreg="d3"/>
    </method>
    <method name="EC_curve_nid2nist" result="const char *">
      <arg name="nid" type="int" m68kreg="d0"/>
    </method>
    <method name="EC_curve_nist2nid" result="int">
      <arg name="name" type="const char *" m68kreg="a0"/>
    </method>
    <method name="EC_GROUP_get_mont_data" result="BN_MONT_CTX *">
      <arg name="group" type="const EC_GROUP *" m68kreg="a0"/>
    </method>
    <method name="ECDH_KDF_X9_62" result="int">
      <arg name="out" type="unsigned char *" m68kreg="a0"/>
      <arg name="outlen" type="size_t" m68kreg="d0"/>
      <arg name="Z" type="const unsigned char *" m68kreg="a1"/>
      <arg name="Zlen" type="size_t" m68kreg="d1"/>
      <arg name="sinfo" type="const unsigned char *" m68kreg="a2"/>
      <arg name="sinfolen" type="size_t" m68kreg="d2"/>
      <arg name="md" type="const EVP_MD *" m68kreg="d3"/>
    </method>
    <method name="ECDSA_METHOD_free" result="void" status="unimplemented">
      <arg name="ecdsa_method" type="ECDSA_METHOD *" m68kreg="a0"/>
    </method>
    <method name="ECDSA_METHOD_get_app_data" result="void *" status="unimplemented">
      <arg name="ecdsa_method" type="ECDSA_METHOD *" m68kreg="a0"/>
    </method>
    <method name="ECDSA_METHOD_new" result="ECDSA_METHOD *" status="unimplemented">
      <arg name="ecdsa_method" type="const ECDSA_METHOD *" m68kreg="a0"/>
    </method>
    <method name="ECDSA_METHOD_set_app_data" result="void" status="unimplemented">
      <arg name="ecdsa_method" type="ECDSA_METHOD *" m68kreg="a0"/>
      <arg name="app" type="void *" m68kreg="a1"/>
    </method>
    <method name="ECDSA_METHOD_set_flags" result="void" status="unimplemented">
      <arg name="ecdsa_method" type="ECDSA_METHOD *" m68kreg="a0"/>
      <arg name="flags" type="int" m68kreg="d0"/>
    </method>
    <method name="ECDSA_METHOD_set_name" result="void" status="unimplemented">
      <arg name="ecdsa_method" type="ECDSA_METHOD *" m68kreg="a0"/>
      <arg name="name" type="char *" m68kreg="a1"/>
    </method>
    <method name="ECDSA_METHOD_set_sign" result="void" status="unimplemented">
      <arg name="ecdsa_method" type="ECDSA_METHOD *" m68kreg="a0"/>
      <arg name="ecda_do_sign" type="ECDSA_SIG * (*)(const unsigned char *dgst, int dgst_len, const BIGNUM *inv, const BIGNUM *rp, EC_KEY *eckey)" m68kreg="a1"/>
    </method>
    <method name="ECDSA_METHOD_set_sign_setup" result="void" status="unimplemented">
      <arg name="ecdsa_method" type="ECDSA_METHOD *" m68kreg="a0"/>
      <arg name="ecdsa_sign_setup" type="int (*)(EC_KEY *eckey, BN_CTX *ctx, BIGNUM **kinv, BIGNUM **r)" m68kreg="a1"/>
    </method>
    <method name="ECDSA_METHOD_set_verify" result="void" status="unimplemented">
      <arg name="ecdsa_method" type="ECDSA_METHOD *" m68kreg="a0"/>
      <arg name="ecdsa_do_verify" type="int (*)(const unsigned char *dgst, int dgst_len, const ECDSA_SIG *sig, EC_KEY *eckey)" m68kreg="a1"/>
    </method>
    <method name="EVP_aes_128_cbc_hmac_sha256" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_aes_128_wrap" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_aes_192_wrap" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_aes_256_cbc_hmac_sha256" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_aes_256_wrap" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_des_ede3_wrap" result="const EVP_CIPHER *">
    </method>
    <method name="CRYPTO_128_unwrap" result="size_t">
      <arg name="key" type="void *" m68kreg="a0"/>
      <arg name="iv" type="const unsigned char *" m68kreg="a1"/>
      <arg name="out" type="unsigned char *" m68kreg="a2"/>
      <arg name="in" type="const unsigned char *" m68kreg="a3"/>
      <arg name="inlen" type="size_t" m68kreg="d0"/>
      <arg name="block" type="block128_f" m68kreg="d1"/>
    </method>
    <method name="CRYPTO_128_wrap" result="size_t">
      <arg name="key" type="void *" m68kreg="a0"/>
      <arg name="iv" type="const unsigned char *" m68kreg="a1"/>
      <arg name="out" type="unsigned char *" m68kreg="a2"/>
      <arg name="in" type="const unsigned char *" m68kreg="a3"/>
      <arg name="inlen" type="size_t" m68kreg="d0"/>
      <arg name="block" type="block128_f" m68kreg="d1"/>
    </method>
    <method name="OCSP_REQ_CTX_get0_mem_bio" result="BIO *">
      <arg name="rctx" type="OCSP_REQ_CTX *" m68kreg="a0"/>
    </method>
    <method name="OCSP_REQ_CTX_http" result="int">
      <arg name="rctx" type="OCSP_REQ_CTX *" m68kreg="a0"/>
      <arg name="op" type="const char *" m68kreg="a1"/>
      <arg name="path" type="const char *" m68kreg="a2"/>
    </method>
    <method name="OCSP_REQ_CTX_i2d" result="int">
      <arg name="rctx" type="OCSP_REQ_CTX *" m68kreg="a0"/>
      <arg name="it" type="const ASN1_ITEM *" m68kreg="a1"/>
      <arg name="val" type="ASN1_VALUE *" m68kreg="a2"/>
    </method>
    <method name="OCSP_REQ_CTX_nbio" result="int">
      <arg name="rctx" type="OCSP_REQ_CTX *" m68kreg="a0"/>
    </method>
    <method name="OCSP_REQ_CTX_nbio_d2i" result="int">
      <arg name="rctx" type="OCSP_REQ_CTX *" m68kreg="a0"/>
      <arg name="pval" type="ASN1_VALUE **" m68kreg="a1"/>
      <arg name="it" type="const ASN1_ITEM *" m68kreg="a2"/>
    </method>
    <method name="OCSP_REQ_CTX_new" result="OCSP_REQ_CTX *">
      <arg name="io" type="BIO *" m68kreg="a0"/>
      <arg name="maxline" type="int" m68kreg="d0"/>
    </method>
    <method name="OCSP_set_max_response_length" result="void">
      <arg name="rctx" type="OCSP_REQ_CTX *" m68kreg="a0"/>
      <arg name="len" type="unsigned long" m68kreg="d0"/>
    </method>
    <method name="d2i_RSA_OAEP_PARAMS" result="RSA_OAEP_PARAMS *">
      <arg name="a" type="RSA_OAEP_PARAMS **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="RSA_OAEP_PARAMS_free" result="void">
      <arg name="a" type="RSA_OAEP_PARAMS *" m68kreg="a0"/>
    </method>
    <method name="RSA_OAEP_PARAMS_it" result="const ASN1_ITEM *">
    </method>
    <method name="RSA_OAEP_PARAMS_new" result="RSA_OAEP_PARAMS *">
    </method>
    <method name="RSA_padding_add_PKCS1_OAEP_mgf1" result="int">
      <arg name="to" type="unsigned char *" m68kreg="a0"/>
      <arg name="tlen" type="int" m68kreg="d0"/>
      <arg name="from" type="const unsigned char *" m68kreg="a1"/>
      <arg name="flen" type="int" m68kreg="d1"/>
      <arg name="param" type="const unsigned char *" m68kreg="a2"/>
      <arg name="plen" type="int" m68kreg="d2"/>
      <arg name="md" type="const EVP_MD *" m68kreg="a3"/>
      <arg name="mgf1md" type="const EVP_MD *" m68kreg="d3"/>
    </method>
    <method name="RSA_padding_check_PKCS1_OAEP_mgf1" result="int">
      <arg name="to" type="unsigned char *" m68kreg="a0"/>
      <arg name="tlen" type="int" m68kreg="d0"/>
      <arg name="from" type="const unsigned char *" m68kreg="a1"/>
      <arg name="flen" type="int" m68kreg="d1"/>
      <arg name="num" type="int" m68kreg="d2"/>
      <arg name="param" type="const unsigned char *" m68kreg="a2"/>
      <arg name="plen" type="int" m68kreg="d3"/>
      <arg name="md" type="const EVP_MD *" m68kreg="a3"/>
      <arg name="mgf1md" type="const EVP_MD *" m68kreg="d4"/>
    </method>
    <method name="OPENSSL_sk_deep_copy" result="OPENSSL_STACK *">
      <arg name="sk" type="const OPENSSL_STACK *" m68kreg="a0"/>
      <arg name="c" type="OPENSSL_sk_copyfunc" m68kreg="a1"/>
      <arg name="f" type="OPENSSL_sk_freefunc" m68kreg="a2"/>
    </method>
    <method name="i2d_re_X509_tbs" result="int">
      <arg name="x" type="X509 *" m68kreg="a0"/>
      <arg name="pp" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="X509_chain_check_suiteb" result="int">
      <arg name="perror_depth" type="int *" m68kreg="a0"/>
      <arg name="x" type="X509 *" m68kreg="a1"/>
      <arg name="chain" type="STACK_OF(X509) *" m68kreg="a2"/>
      <arg name="flags" type="unsigned long" m68kreg="d0"/>
    </method>
    <method name="X509_chain_up_ref" result="STACK_OF(X509) *">
      <arg name="chain" type="STACK_OF(X509) *" m68kreg="a0"/>
    </method>
    <method name="X509_CRL_check_suiteb" result="int">
      <arg name="crl" type="X509_CRL *" m68kreg="a0"/>
      <arg name="pk" type="EVP_PKEY *" m68kreg="a1"/>
      <arg name="flags" type="unsigned long" m68kreg="d0"/>
    </method>
    <method name="X509_CRL_diff" result="X509_CRL *">
      <arg name="base" type="X509_CRL *" m68kreg="a0"/>
      <arg name="newer" type="X509_CRL *" m68kreg="a1"/>
      <arg name="skey" type="EVP_PKEY *" m68kreg="a2"/>
      <arg name="md" type="const EVP_MD *" m68kreg="a3"/>
      <arg name="flags" type="unsigned int" m68kreg="d0"/>
    </method>
    <method name="X509_CRL_http_nbio" result="int">
      <arg name="rctx" type="OCSP_REQ_CTX *" m68kreg="a0"/>
      <arg name="pcrl" type="X509_CRL **" m68kreg="a1"/>
    </method>
    <method name="X509_get0_signature" result="void">
      <arg name="psig" type="const ASN1_BIT_STRING **" m68kreg="a0"/>
      <arg name="palg" type="const X509_ALGOR **" m68kreg="a1"/>
      <arg name="x" type="const X509 *" m68kreg="a2"/>
    </method>
    <method name="X509_get_signature_nid" result="int">
      <arg name="x" type="const X509 *" m68kreg="a0"/>
    </method>
    <method name="X509_http_nbio" result="int">
      <arg name="rctx" type="OCSP_REQ_CTX *" m68kreg="a0"/>
      <arg name="pcert" type="X509 **" m68kreg="a1"/>
    </method>
    <method name="X509_REVOKED_dup" result="X509_REVOKED *">
      <arg name="rev" type="X509_REVOKED *" m68kreg="a0"/>
    </method>
    <method name="X509_STORE_CTX_get0_store" result="X509_STORE *">
      <arg name="ctx" type="X509_STORE_CTX *" m68kreg="a0"/>
    </method>
    <method name="X509_VERIFY_PARAM_add1_host" result="int">
      <arg name="param" type="X509_VERIFY_PARAM *" m68kreg="a0"/>
      <arg name="name" type="const char *" m68kreg="a1"/>
      <arg name="namelen" type="size_t" m68kreg="d0"/>
    </method>
    <method name="X509_VERIFY_PARAM_get0" result="const X509_VERIFY_PARAM *">
      <arg name="id" type="int" m68kreg="d0"/>
    </method>
    <method name="X509_VERIFY_PARAM_get0_name" result="const char *">
      <arg name="param" type="const X509_VERIFY_PARAM *" m68kreg="a0"/>
    </method>
    <method name="X509_VERIFY_PARAM_get0_peername" result="char *">
      <arg name="param" type="X509_VERIFY_PARAM *" m68kreg="a0"/>
    </method>
    <method name="X509_VERIFY_PARAM_get_count" result="int">
    </method>
    <method name="X509_VERIFY_PARAM_set1_email" result="int">
      <arg name="param" type="X509_VERIFY_PARAM *" m68kreg="a0"/>
      <arg name="email" type="const char *" m68kreg="a1"/>
      <arg name="emaillen" type="size_t" m68kreg="d0"/>
    </method>
    <method name="X509_VERIFY_PARAM_set1_host" result="int">
      <arg name="param" type="X509_VERIFY_PARAM *" m68kreg="a0"/>
      <arg name="name" type="const char *" m68kreg="a1"/>
      <arg name="namelen" type="size_t" m68kreg="d0"/>
    </method>
    <method name="X509_VERIFY_PARAM_set1_ip" result="int">
      <arg name="param" type="X509_VERIFY_PARAM *" m68kreg="a0"/>
      <arg name="ip" type="const unsigned char *" m68kreg="a1"/>
      <arg name="iplen" type="size_t" m68kreg="d0"/>
    </method>
    <method name="X509_VERIFY_PARAM_set1_ip_asc" result="int">
      <arg name="param" type="X509_VERIFY_PARAM *" m68kreg="a0"/>
      <arg name="ipasc" type="const char *" m68kreg="a1"/>
    </method>
    <method name="X509_VERIFY_PARAM_set_hostflags" result="void">
      <arg name="param" type="X509_VERIFY_PARAM *" m68kreg="a0"/>
      <arg name="flags" type="unsigned int" m68kreg="d0"/>
    </method>
    <method name="X509_check_email" result="int">
      <arg name="x" type="X509 *" m68kreg="a0"/>
      <arg name="chk" type="const char *" m68kreg="a1"/>
      <arg name="chklen" type="size_t" m68kreg="d0"/>
      <arg name="flags" type="unsigned int" m68kreg="d1"/>
    </method>
    <method name="X509_check_host" result="int">
      <arg name="x" type="X509 *" m68kreg="a0"/>
      <arg name="chk" type="const char *" m68kreg="a1"/>
      <arg name="chklen" type="size_t" m68kreg="d0"/>
      <arg name="flags" type="unsigned int" m68kreg="d1"/>
      <arg name="peername" type="char **" m68kreg="a2"/>
    </method>
    <method name="X509_check_ip" result="int">
      <arg name="x" type="X509 *" m68kreg="a0"/>
      <arg name="chk" type="const unsigned char *" m68kreg="a1"/>
      <arg name="chklen" type="size_t" m68kreg="d0"/>
      <arg name="flags" type="unsigned int" m68kreg="d1"/>
    </method>
    <method name="X509_check_ip_asc" result="int">
      <arg name="x" type="X509 *" m68kreg="a0"/>
      <arg name="ipasc" type="const char *" m68kreg="a1"/>
      <arg name="flags" type="unsigned int" m68kreg="d1"/>
    </method>
    <method name="X509V3_EXT_free" result="int" status="unimplemented">
      <arg name="nid" type="int" m68kreg="d0"/>
      <arg name="ext_data" type="void *" m68kreg="a0"/>
    </method>
    <method name="EVP_PKEY_asn1_set_item" result="void">
      <arg name="ameth" type="EVP_PKEY_ASN1_METHOD *" m68kreg="a0"/>
      <arg name="item_verify" type="int (*)(EVP_MD_CTX *, const ASN1_ITEM *, void *, X509_ALGOR *, ASN1_BIT_STRING *, EVP_PKEY *)" m68kreg="a1"/>
      <arg name="item_sign" type="int (*)(EVP_MD_CTX *, const ASN1_ITEM *, void *, X509_ALGOR *, X509_ALGOR *, ASN1_BIT_STRING *)" m68kreg="a2"/>
    </method>
    <method name="DTLS_client_method" result="const SSL_METHOD *">
    </method>
    <method name="DTLS_method" result="const SSL_METHOD *">
    </method>
    <method name="DTLS_server_method" result="const SSL_METHOD *">
    </method>
    <method name="DTLSv1_2_client_method" result="const SSL_METHOD *" status="unimplemented">
    </method>
    <method name="DTLSv1_2_method" result="const SSL_METHOD *" status="unimplemented">
    </method>
    <method name="DTLSv1_2_server_method" result="const SSL_METHOD *" status="unimplemented">
    </method>
    <method name="SSL_certs_clear" result="void">
      <arg name="s" type="SSL *" m68kreg="a0"/>
    </method>
    <method name="SSL_CIPHER_find" result="const SSL_CIPHER *">
      <arg name="ssl" type="SSL *" m68kreg="a0"/>
      <arg name="ptr" type="const unsigned char *" m68kreg="a1"/>
    </method>
    <method name="SSL_COMP_free_compression_methods" result="void" status="unimplemented">
    </method>
    <method name="SSL_CONF_cmd" result="int">
      <arg name="ctx" type="SSL_CONF_CTX *" m68kreg="a0"/>
      <arg name="cmd" type="const char *" m68kreg="a1"/>
      <arg name="value" type="const char *" m68kreg="a2"/>
    </method>
    <method name="SSL_CONF_cmd_argv" result="int">
      <arg name="cctx" type="SSL_CONF_CTX *" m68kreg="a0"/>
      <arg name="pargc" type="int *" m68kreg="a1"/>
      <arg name="pargv" type="char ***" m68kreg="a2"/>
    </method>
    <method name="SSL_CONF_cmd_value_type" result="int">
      <arg name="cctx" type="SSL_CONF_CTX *" m68kreg="a0"/>
      <arg name="cmd" type="const char *" m68kreg="a1"/>
    </method>
    <method name="SSL_CONF_CTX_clear_flags" result="unsigned int">
      <arg name="cctx" type="SSL_CONF_CTX *" m68kreg="a0"/>
      <arg name="flags" type="unsigned int" m68kreg="a1"/>
    </method>
    <method name="SSL_CONF_CTX_finish" result="int">
      <arg name="cctx" type="SSL_CONF_CTX *" m68kreg="a0"/>
    </method>
    <method name="SSL_CONF_CTX_free" result="void">
      <arg name="cctx" type="SSL_CONF_CTX *" m68kreg="a0"/>
    </method>
    <method name="SSL_CONF_CTX_new" result="SSL_CONF_CTX *">
    </method>
    <method name="SSL_CONF_CTX_set1_prefix" result="int">
      <arg name="cctx" type="SSL_CONF_CTX *" m68kreg="a0"/>
      <arg name="pre" type="const char *" m68kreg="a1"/>
    </method>
    <method name="SSL_CONF_CTX_set_flags" result="unsigned int">
      <arg name="cctx" type="SSL_CONF_CTX *" m68kreg="a0"/>
      <arg name="flags" type="unsigned int" m68kreg="a1"/>
    </method>
    <method name="SSL_CONF_CTX_set_ssl" result="void">
      <arg name="cctx" type="SSL_CONF_CTX *" m68kreg="a0"/>
      <arg name="ssl" type="SSL *" m68kreg="a1"/>
    </method>
    <method name="SSL_CONF_CTX_set_ssl_ctx" result="void">
      <arg name="cctx" type="SSL_CONF_CTX *" m68kreg="a0"/>
      <arg name="ctx" type="SSL_CTX *" m68kreg="a1"/>
    </method>
    <method name="SSL_CTX_add_client_custom_ext" result="int">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
      <arg name="ext_type" type="unsigned int" m68kreg="d0"/>
      <arg name="add_cb" type="custom_ext_add_cb" m68kreg="d1"/>
      <arg name="free_cb" type="custom_ext_free_cb" m68kreg="d2"/>
      <arg name="add_arg" type="void *" m68kreg="a1"/>
      <arg name="parse_cb" type="custom_ext_parse_cb" m68kreg="d3"/>
      <arg name="parse_arg" type="void *" m68kreg="a2"/>
    </method>
    <method name="SSL_CTX_add_server_custom_ext" result="int">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
      <arg name="ext_type" type="unsigned int" m68kreg="d0"/>
      <arg name="add_cb" type="custom_ext_add_cb" m68kreg="d1"/>
      <arg name="free_cb" type="custom_ext_free_cb" m68kreg="d2"/>
      <arg name="add_arg" type="void *" m68kreg="a1"/>
      <arg name="parse_cb" type="custom_ext_parse_cb" m68kreg="d3"/>
      <arg name="parse_arg" type="void *" m68kreg="a2"/>
    </method>
    <method name="SSL_CTX_get0_certificate" result="X509 *">
      <arg name="ctx" type="const SSL_CTX *" m68kreg="a0"/>
    </method>
    <method name="SSL_CTX_get0_param" result="X509_VERIFY_PARAM *">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
    </method>
    <method name="SSL_CTX_get0_privatekey" result="EVP_PKEY *">
      <arg name="ctx" type="const SSL_CTX *" m68kreg="a0"/>
    </method>
    <method name="SSL_CTX_get_ssl_method" result="const SSL_METHOD *">
      <arg name="ctx" type="const SSL_CTX *" m68kreg="a0"/>
    </method>
    <method name="SSL_CTX_set_alpn_protos" result="int">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
      <arg name="protos" type="const unsigned char *" m68kreg="a1"/>
      <arg name="protos_len" type="unsigned int" m68kreg="d0"/>
    </method>
    <method name="SSL_CTX_set_alpn_select_cb" result="void">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
      <arg name="cb" type="SSL_CTX_alpn_select_cb_func" m68kreg="a1"/>
      <arg name="arg" type="void *" m68kreg="a2"/>
    </method>
    <method name="SSL_CTX_set_cert_cb" result="void">
      <arg name="c" type="SSL_CTX *" m68kreg="a0"/>
      <arg name="cb" type="int (*)(SSL *ssl, void *arg)" m68kreg="a1"/>
      <arg name="arg" type="void *" m68kreg="a2"/>
    </method>
    <method name="SSL_CTX_use_serverinfo" result="int">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
      <arg name="serverinfo" type="const unsigned char *" m68kreg="a1"/>
      <arg name="serverinfo_length" type="size_t" m68kreg="d0"/>
    </method>
    <method name="SSL_CTX_use_serverinfo_file" result="int">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
      <arg name="file" type="const char *" m68kreg="a1"/>
    </method>
    <method name="SSL_extension_supported" result="int">
      <arg name="ext_type" type="unsigned int" m68kreg="d0"/>
    </method>
    <method name="SSL_get0_alpn_selected" result="void">
      <arg name="ssl" type="const SSL *" m68kreg="a0"/>
      <arg name="data" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="unsigned int *" m68kreg="a2"/>
    </method>
    <method name="SSL_get0_param" result="X509_VERIFY_PARAM *">
      <arg name="ssl" type="SSL *" m68kreg="a0"/>
    </method>
    <method name="SSL_is_server" result="int">
      <arg name="s" type="const SSL *" m68kreg="a0"/>
    </method>
    <method name="SSL_set_alpn_protos" result="int">
      <arg name="ssl" type="SSL *" m68kreg="a0"/>
      <arg name="protos" type="const unsigned char *" m68kreg="a1"/>
      <arg name="protos_len" type="unsigned int" m68kreg="a2"/>
    </method>
    <method name="SSL_set_cert_cb" result="void">
      <arg name="s" type="SSL *" m68kreg="a0"/>
      <arg name="cb" type="int (*)(SSL *ssl, void *arg)" m68kreg="a1"/>
      <arg name="arg" type="void *" m68kreg="a2"/>
    </method>
    <method name="SSL_check_chain" result="int">
      <arg name="s" type="SSL *" m68kreg="a0"/>
      <arg name="x" type="X509 *" m68kreg="a1"/>
      <arg name="pk" type="EVP_PKEY *" m68kreg="a2"/>
      <arg name="chain" type="STACK_OF(X509) *" m68kreg="a3"/>
    </method>
    <method name="SSL_get_shared_sigalgs" result="int">
      <arg name="s" type="SSL *" m68kreg="a0"/>
      <arg name="idx" type="int" m68kreg="d0"/>
      <arg name="psign" type="int *" m68kreg="a1"/>
      <arg name="phash" type="int *" m68kreg="a2"/>
      <arg name="psignandhash" type="int *" m68kreg="a3"/>
      <arg name="rsig" type="unsigned char *" m68kreg="d1"/>
      <arg name="rhash" type="unsigned char *" m68kreg="d2"/>
    </method>
    <method name="SSL_get_sigalgs" result="int">
      <arg name="s" type="SSL *" m68kreg="a0"/>
      <arg name="idx" type="int" m68kreg="d0"/>
      <arg name="psign" type="int *" m68kreg="a1"/>
      <arg name="phash" type="int *" m68kreg="a2"/>
      <arg name="psignandhash" type="int *" m68kreg="a3"/>
      <arg name="rsig" type="unsigned char *" m68kreg="d1"/>
      <arg name="rhash" type="unsigned char *" m68kreg="d2"/>
    </method>

    <!-- AmiSSL v4 pre-release - OpenSSL 1.1.0c -->

    <method name="ASN1_add_stable_module" result="void">
    </method>
    <method name="ASN1_buf_print" result="int">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="buf" type="const unsigned char *" m68kreg="a1"/>
      <arg name="buflen" type="size_t" m68kreg="a2"/>
      <arg name="off" type="int" m68kreg="d0"/>
    </method>
    <method name="ASN1_ENUMERATED_get_int64" result="int">
      <arg name="pr" type="int64_t *" m68kreg="a0"/>
      <arg name="a" type="const ASN1_ENUMERATED *" m68kreg="a1"/>
    </method>
    <method name="ASN1_ENUMERATED_set_int64" result="int">
      <arg name="a" type="ASN1_ENUMERATED *" m68kreg="a0"/>
      <arg name="r" type="int64_t" m68kreg="d0-d1"/>
    </method>
    <method name="ASN1_INTEGER_get_int64" result="int">
      <arg name="pr" type="int64_t *" m68kreg="a0"/>
      <arg name="a" type="const ASN1_INTEGER *" m68kreg="a1"/>
    </method>
    <method name="ASN1_INTEGER_get_uint64" result="int">
      <arg name="pr" type="uint64_t *" m68kreg="a0"/>
      <arg name="a" type="const ASN1_INTEGER *" m68kreg="a1"/>
    </method>
    <method name="ASN1_INTEGER_set_int64" result="int">
      <arg name="a" type="ASN1_INTEGER *" m68kreg="a0"/>
      <arg name="r" type="int64_t" m68kreg="d0-d1"/>
    </method>
    <method name="ASN1_INTEGER_set_uint64" result="int">
      <arg name="a" type="ASN1_INTEGER *" m68kreg="a0"/>
      <arg name="r" type="uint64_t" m68kreg="d0-d1"/>
    </method>
    <method name="ASN1_SCTX_free" result="void">
      <arg name="p" type="ASN1_SCTX *" m68kreg="a0"/>
    </method>
    <method name="ASN1_SCTX_get_app_data" result="void *">
      <arg name="p" type="ASN1_SCTX *" m68kreg="a0"/>
    </method>
    <method name="ASN1_SCTX_get_flags" result="unsigned long">
      <arg name="p" type="ASN1_SCTX *" m68kreg="a0"/>
    </method>
    <method name="ASN1_SCTX_get_item" result="const ASN1_ITEM *">
      <arg name="p" type="ASN1_SCTX *" m68kreg="a0"/>
    </method>
    <method name="ASN1_SCTX_get_template" result="const ASN1_TEMPLATE *">
      <arg name="p" type="ASN1_SCTX *" m68kreg="a0"/>
    </method>
    <method name="ASN1_SCTX_new" result="ASN1_SCTX *">
      <arg name="scan_cb" type="int (*)(ASN1_SCTX *)" m68kreg="a0"/>
    </method>
    <method name="ASN1_SCTX_set_app_data" result="void">
      <arg name="p" type="ASN1_SCTX *" m68kreg="a0"/>
      <arg name="data" type="void *" m68kreg="a1"/>
    </method>
    <method name="ASN1_str2mask" result="int">
      <arg name="str" type="const char *" m68kreg="a0"/>
      <arg name="pmask" type="unsigned long *" m68kreg="a1"/>
    </method>
    <method name="ASN1_TYPE_pack_sequence" result="ASN1_TYPE *">
      <arg name="it" type="const ASN1_ITEM *" m68kreg="a0"/>
      <arg name="s" type="void *" m68kreg="a1"/>
      <arg name="t" type="ASN1_TYPE **" m68kreg="a2"/>
    </method>
    <method name="ASN1_TYPE_unpack_sequence" result="void *">
      <arg name="it" type="const ASN1_ITEM *" m68kreg="a0"/>
      <arg name="t" type="const ASN1_TYPE *" m68kreg="a1"/>
    </method>
    <method name="ASYNC_block_pause" result="void">
    </method>
    <method name="ASYNC_cleanup_thread" result="void">
    </method>
    <method name="ASYNC_clear_wake" result="void" status="unimplemented">
      <arg name="job" type="ASYNC_JOB *" m68kreg="a0"/>
    </method>
    <method name="ASYNC_get_current_job" result="ASYNC_JOB *">
    </method>
    <method name="ASYNC_get_wait_fd" result="OSSL_ASYNC_FD" status="unimplemented">
      <arg name="job" type="ASYNC_JOB *" m68kreg="a0"/>
    </method>
    <method name="ASYNC_init_thread" result="int">
      <arg name="max_size" type="size_t" m68kreg="d0"/>
      <arg name="init_size" type="size_t" m68kreg="d1"/>
    </method>
    <method name="ASYNC_pause_job" result="int">
    </method>
    <method name="ASYNC_start_job" result="int">
      <arg name="job" type="ASYNC_JOB **" m68kreg="a0"/>
      <arg name="ctx" type="ASYNC_WAIT_CTX *" m68kreg="a1"/>
      <arg name="ret" type="int *" m68kreg="a2"/>
      <arg name="func" type="int (*)(void *)" m68kreg="a3"/>
      <arg name="args" type="void *" m68kreg="d0"/>
      <arg name="size" type="size_t" m68kreg="d1"/>
    </method>
    <method name="ASYNC_unblock_pause" result="void">
    </method>
    <method name="ASYNC_wake" result="void" status="unimplemented">
      <arg name="job" type="ASYNC_JOB *" m68kreg="a0"/>
    </method>
    <method name="ERR_load_ASYNC_strings" result="int">
    </method>
    <method name="BIO_accept_ex" result="int">
      <arg name="accept_sock" type="int" m68kreg="d0"/>
      <arg name="addr" type="BIO_ADDR *" m68kreg="a0"/>
      <arg name="options" type="int" m68kreg="d1"/>
    </method>
    <method name="BIO_ADDR_clear" result="void">
      <arg name="ap" type="BIO_ADDR *" m68kreg="a0"/>
    </method>
    <method name="BIO_ADDR_family" result="int">
      <arg name="ap" type="const BIO_ADDR *" m68kreg="a0"/>
    </method>
    <method name="BIO_ADDR_free" result="void">
      <arg name="ap" type="BIO_ADDR *" m68kreg="a0"/>
    </method>
    <method name="BIO_ADDR_hostname_string" result="char *">
      <arg name="ap" type="const BIO_ADDR *" m68kreg="a0"/>
      <arg name="numeric" type="int" m68kreg="a1"/>
    </method>
    <method name="BIO_ADDR_new" result="BIO_ADDR *">
    </method>
    <method name="BIO_ADDR_path_string" result="char *">
      <arg name="ap" type="const BIO_ADDR *" m68kreg="a0"/>
    </method>
    <method name="BIO_ADDR_rawaddress" result="int">
      <arg name="ap" type="const BIO_ADDR *" m68kreg="a0"/>
      <arg name="p" type="void *" m68kreg="a1"/>
      <arg name="l" type="size_t *" m68kreg="a2"/>
    </method>
    <method name="BIO_ADDR_rawmake" result="int">
      <arg name="ap" type="BIO_ADDR *" m68kreg="a0"/>
      <arg name="family" type="int" m68kreg="d0"/>
      <arg name="where" type="const void *" m68kreg="a1"/>
      <arg name="wherelen" type="size_t" m68kreg="d1"/>
      <arg name="port" type="unsigned short" m68kreg="d2"/>
    </method>
    <method name="BIO_ADDR_rawport" result="unsigned short">
      <arg name="ap" type="const BIO_ADDR *" m68kreg="a0"/>
    </method>
    <method name="BIO_ADDR_service_string" result="char *">
      <arg name="ap" type="const BIO_ADDR *" m68kreg="a0"/>
      <arg name="numeric" type="int" m68kreg="d0"/>
    </method>
    <method name="BIO_ADDRINFO_address" result="const BIO_ADDR *">
      <arg name="bai" type="const BIO_ADDRINFO *" m68kreg="a0"/>
    </method>
    <method name="BIO_ADDRINFO_family" result="int">
      <arg name="bai" type="const BIO_ADDRINFO *" m68kreg="a0"/>
    </method>
    <method name="BIO_ADDRINFO_free" result="void">
      <arg name="bai" type="BIO_ADDRINFO *" m68kreg="a0"/>
    </method>
    <method name="BIO_ADDRINFO_next" result="const BIO_ADDRINFO *">
      <arg name="bai" type="const BIO_ADDRINFO *" m68kreg="a0"/>
    </method>
    <method name="BIO_ADDRINFO_protocol" result="int">
      <arg name="bai" type="const BIO_ADDRINFO *" m68kreg="a0"/>
    </method>
    <method name="BIO_ADDRINFO_socktype" result="int">
      <arg name="bai" type="const BIO_ADDRINFO *" m68kreg="a0"/>
    </method>
    <method name="BIO_closesocket" result="int">
      <arg name="sock" type="int" m68kreg="d0"/>
    </method>
    <method name="BIO_connect" result="int">
      <arg name="sock" type="int" m68kreg="d0"/>
      <arg name="addr" type="const BIO_ADDR *" m68kreg="a0"/>
      <arg name="options" type="int" m68kreg="d1"/>
    </method>
    <method name="BIO_listen" result="int">
      <arg name="sock" type="int" m68kreg="d0"/>
      <arg name="addr" type="const BIO_ADDR *" m68kreg="a0"/>
      <arg name="options" type="int" m68kreg="d1"/>
    </method>
    <method name="BIO_lookup" result="int">
      <arg name="host" type="const char *" m68kreg="a0"/>
      <arg name="service" type="const char *" m68kreg="a1"/>
      <arg name="lookup_type" type="enum BIO_lookup_type" m68kreg="d0"/>
      <arg name="family" type="int" m68kreg="d1"/>
      <arg name="socktype" type="int" m68kreg="d2"/>
      <arg name="res" type="BIO_ADDRINFO **" m68kreg="a2"/>
    </method>
    <method name="BIO_parse_hostserv" result="int">
      <arg name="hostserv" type="const char *" m68kreg="a0"/>
      <arg name="host" type="char **" m68kreg="a1"/>
      <arg name="service" type="char **" m68kreg="a2"/>
      <arg name="hostserv_prio" type="enum BIO_hostserv_priorities" m68kreg="d0"/>
    </method>
    <method name="BIO_s_secmem" result="const BIO_METHOD *">
    </method>
    <method name="BIO_sock_info" result="int">
      <arg name="sock" type="int" m68kreg="d0"/>
      <arg name="type" type="enum BIO_sock_info_type" m68kreg="d1"/>
      <arg name="info" type="union BIO_sock_info_u *" m68kreg="a0"/>
    </method>
    <method name="BIO_socket" result="int">
      <arg name="domain" type="int" m68kreg="d0"/>
      <arg name="socktype" type="int" m68kreg="d1"/>
      <arg name="protocol" type="int" m68kreg="d2"/>
      <arg name="options" type="int" m68kreg="d3"/>
    </method>
    <method name="BN_abs_is_word" result="int">
      <arg name="a" type="const BIGNUM *" m68kreg="a0"/>
      <arg name="w" type="const BN_ULONG" m68kreg="d0"/>
    </method>
    <method name="BN_bn2binpad" result="int">
      <arg name="a" type="const BIGNUM *" m68kreg="a0"/>
      <arg name="to" type="unsigned char *" m68kreg="a1"/>
      <arg name="tolen" type="int" m68kreg="d0"/>
    </method>
    <method name="BN_bn2lebinpad" result="int">
      <arg name="a" type="const BIGNUM *" m68kreg="a0"/>
      <arg name="to" type="unsigned char *" m68kreg="a1"/>
      <arg name="tolen" type="int" m68kreg="d0"/>
    </method>
    <method name="BN_CTX_secure_new" result="BN_CTX *">
    </method>
    <method name="BN_GENCB_free" result="void">
      <arg name="cb" type="BN_GENCB *" m68kreg="a0"/>
    </method>
    <method name="BN_GENCB_get_arg" result="void *">
      <arg name="cb" type="BN_GENCB *" m68kreg="a0"/>
    </method>
    <method name="BN_GENCB_new" result="BN_GENCB *">
    </method>
    <method name="BN_GENCB_set" result="void">
      <arg name="gencb" type="BN_GENCB *" m68kreg="a0"/>
      <arg name="callback" type="int (*)(int, int, BN_GENCB *)" m68kreg="a1"/>
      <arg name="cb_arg" type="void *" m68kreg="a2"/>
    </method>
    <method name="BN_GENCB_set_old" result="void">
      <arg name="gencb" type="BN_GENCB *" m68kreg="a0"/>
      <arg name="callback" type="void (*)(int, int, void *)" m68kreg="a1"/>
      <arg name="cb_arg" type="void *" m68kreg="a2"/>
    </method>
    <method name="BN_generate_dsa_nonce" result="int">
      <arg name="out" type="BIGNUM *" m68kreg="a0"/>
      <arg name="range" type="const BIGNUM *" m68kreg="a1"/>
      <arg name="priv" type="const BIGNUM *" m68kreg="a2"/>
      <arg name="message" type="const unsigned char *" m68kreg="a3"/>
      <arg name="message_len" type="size_t" m68kreg="d0"/>
      <arg name="ctx" type="BN_CTX *" m68kreg="d1"/>
    </method>
    <method name="BN_get_flags" result="int">
      <arg name="b" type="const BIGNUM *" m68kreg="a0"/>
      <arg name="n" type="int" m68kreg="d0"/>
    </method>
    <method name="BN_is_negative" result="int">
      <arg name="a" type="const BIGNUM *" m68kreg="a0"/>
    </method>
    <method name="BN_is_odd" result="int">
      <arg name="a" type="const BIGNUM *" m68kreg="a0"/>
    </method>
    <method name="BN_is_one" result="int">
      <arg name="a" type="const BIGNUM *" m68kreg="a0"/>
    </method>
    <method name="BN_is_word" result="int">
      <arg name="a" type="const BIGNUM *" m68kreg="a0"/>
      <arg name="w" type="const BN_ULONG" m68kreg="d0"/>
    </method>
    <method name="BN_is_zero" result="int">
      <arg name="a" type="const BIGNUM *" m68kreg="a0"/>
    </method>
    <method name="BN_lebin2bn" result="BIGNUM *">
      <arg name="s" type="const unsigned char *" m68kreg="a0"/>
      <arg name="len" type="int" m68kreg="d0"/>
      <arg name="ret" type="BIGNUM *" m68kreg="a1"/>
    </method>
    <method name="BN_nist_mod_func" result="int (*)(BIGNUM *, const BIGNUM *, const BIGNUM *, BN_CTX *)">
      <arg name="p" type="const BIGNUM *" m68kreg="a0"/>
    </method>
    <method name="BN_secure_new" result="BIGNUM *">
    </method>
    <method name="BN_security_bits" result="int">
      <arg name="L" type="int" m68kreg="d0"/>
      <arg name="N" type="int" m68kreg="d1"/>
    </method>
    <method name="BN_set_flags" result="void">
      <arg name="b" type="BIGNUM *" m68kreg="a0"/>
      <arg name="n" type="int" m68kreg="d0"/>
    </method>
    <method name="BN_to_montgomery" result="int">
      <arg name="r" type="BIGNUM *" m68kreg="a0"/>
      <arg name="a" type="const BIGNUM *" m68kreg="a1"/>
      <arg name="mont" type="BN_MONT_CTX *" m68kreg="a2"/>
      <arg name="ctx" type="BN_CTX *" m68kreg="a3"/>
    </method>
    <method name="BN_with_flags" result="void">
      <arg name="dest" type="BIGNUM *" m68kreg="a0"/>
      <arg name="b" type="const BIGNUM *" m68kreg="a1"/>
      <arg name="flags" type="int" m68kreg="d0"/>
    </method>
    <method name="BN_zero_ex" result="void">
      <arg name="a" type="BIGNUM *" m68kreg="a0"/>
    </method>
    <method name="BUF_MEM_new_ex" result="BUF_MEM *">
      <arg name="flags" type="unsigned long" m68kreg="d0"/>
    </method>
    <method name="COMP_CTX_get_method" result="const COMP_METHOD *">
      <arg name="ctx" type="const COMP_CTX *" m68kreg="a0"/>
    </method>
    <method name="COMP_CTX_get_type" result="int">
      <arg name="ctx" type="const COMP_CTX *" m68kreg="a0"/>
    </method>
    <method name="COMP_get_name" result="const char *">
      <arg name="meth" type="const COMP_METHOD *" m68kreg="a0"/>
    </method>
    <method name="COMP_get_type" result="int">
      <arg name="meth" type="const COMP_METHOD *" m68kreg="a0"/>
    </method>
    <method name="CRYPTO_clear_free" result="void">
      <arg name="str" type="void *" m68kreg="a0"/>
      <arg name="num" type="size_t" m68kreg="d0"/>
      <arg name="file" type="const char *" m68kreg="a1"/>
      <arg name="line" type="int" m68kreg="d1"/>
    </method>
    <method name="CRYPTO_clear_realloc" result="void *">
      <arg name="str" type="void *" m68kreg="a0"/>
      <arg name="old_len" type="size_t" m68kreg="d0"/>
      <arg name="num" type="size_t" m68kreg="d1"/>
      <arg name="file" type="const char *" m68kreg="a1"/>
      <arg name="line" type="int" m68kreg="d2"/>
    </method>
    <method name="CRYPTO_free_ex_index" result="int">
      <arg name="class_index" type="int" m68kreg="d0"/>
      <arg name="idx" type="int" m68kreg="d1"/>
    </method>
    <method name="CRYPTO_memdup" result="void *">
      <arg name="data" type="const void *" m68kreg="a0"/>
      <arg name="siz" type="size_t" m68kreg="d0"/>
      <arg name="file" type="const char *" m68kreg="a1"/>
      <arg name="line" type="int" m68kreg="d1"/>
    </method>
    <method name="CRYPTO_secure_actual_size" result="size_t">
      <arg name="ptr" type="void *" m68kreg="a0"/>
    </method>
    <method name="CRYPTO_secure_allocated" result="int">
      <arg name="ptr" type="void *" m68kreg="a0"/>
    </method>
    <method name="CRYPTO_secure_free" result="void">
      <arg name="ptr" type="void *" m68kreg="a0"/>
      <arg name="file" type="const char *" m68kreg="a1"/>
      <arg name="line" type="int" m68kreg="d0"/>
    </method>
    <method name="CRYPTO_secure_malloc" result="void *">
      <arg name="num" type="size_t" m68kreg="d0"/>
      <arg name="file" type="const char *" m68kreg="a0"/>
      <arg name="line" type="int" m68kreg="d1"/>
    </method>
    <method name="CRYPTO_secure_malloc_done" result="int">
    </method>
    <method name="CRYPTO_secure_malloc_init" result="int">
      <arg name="sz" type="size_t" m68kreg="d0"/>
      <arg name="minsize" type="int" m68kreg="d1"/>
    </method>
    <method name="CRYPTO_secure_malloc_initialized" result="int">
    </method>
    <method name="CRYPTO_secure_used" result="size_t">
    </method>
    <method name="CRYPTO_secure_zalloc" result="void *">
      <arg name="num" type="size_t" m68kreg="d0"/>
      <arg name="file" type="const char *" m68kreg="a0"/>
      <arg name="line" type="int" m68kreg="d1"/>
    </method>
    <method name="CRYPTO_set_mem_debug" result="int">
      <arg name="flag" type="int" m68kreg="d0"/>
    </method>
    <method name="CRYPTO_strndup" result="char *">
      <arg name="str" type="const char *" m68kreg="a0"/>
      <arg name="s" type="size_t" m68kreg="d0"/>
      <arg name="file" type="const char *" m68kreg="a1"/>
      <arg name="line" type="int" m68kreg="d1"/>
    </method>
    <method name="CRYPTO_zalloc" result="void *">
      <arg name="num" type="size_t" m68kreg="d0"/>
      <arg name="file" type="const char *" m68kreg="a0"/>
      <arg name="line" type="int" m68kreg="d1"/>
    </method>
    <method name="OPENSSL_atexit" result="int">
      <arg name="handler" type="void (*)(void)" m68kreg="a0"/>
    </method>
    <method name="OPENSSL_cleanup" result="void">
    </method>
    <method name="OPENSSL_init_crypto" result="int">
      <arg name="opts" type="uint64_t" m68kreg="d0-d1"/>
      <arg name="settings" type="const OPENSSL_INIT_SETTINGS *" m68kreg="a0"/>
    </method>
    <method name="OPENSSL_INIT_free" result="void">
      <arg name="settings" type="OPENSSL_INIT_SETTINGS *" m68kreg="a0"/>
    </method>
    <method name="OPENSSL_INIT_new" result="OPENSSL_INIT_SETTINGS *">
    </method>
    <method name="OPENSSL_INIT_set_config_appname" result="void" status="unimplemented">
      <arg name="settings" type="OPENSSL_INIT_SETTINGS *" m68kreg="a0"/>
      <arg name="config_file" type="const char *" m68kreg="a1"/>
    </method>
    <method name="OPENSSL_strlcat" result="size_t">
      <arg name="dst" type="char *" m68kreg="a0"/>
      <arg name="src" type="const char *" m68kreg="a1"/>
      <arg name="size" type="size_t" m68kreg="d0"/>
    </method>
    <method name="OPENSSL_strlcpy" result="size_t">
      <arg name="dst" type="char *" m68kreg="a0"/>
      <arg name="src" type="const char *" m68kreg="a1"/>
      <arg name="size" type="size_t" m68kreg="d0"/>
    </method>
    <method name="OPENSSL_strnlen" result="size_t">
      <arg name="str" type="const char *" m68kreg="a0"/>
      <arg name="maxlen" type="size_t" m68kreg="d0"/>
    </method>
    <method name="OPENSSL_thread_stop" result="void">
    </method>
    <method name="OpenSSL_version" result="const char *">
      <arg name="type" type="int" m68kreg="d0"/>
    </method>
    <method name="OpenSSL_version_num" result="unsigned long">
    </method>
    <method name="DH_bits" result="int">
      <arg name="dh" type="const DH *" m68kreg="a0"/>
    </method>
    <method name="DH_security_bits" result="int">
      <arg name="dh" type="const DH *" m68kreg="a0"/>
    </method>
    <method name="DSA_security_bits" result="int">
      <arg name="d" type="const DSA *" m68kreg="a0"/>
    </method>
    <method name="EC_GROUP_get0_cofactor" result="const BIGNUM *">
      <arg name="group" type="const EC_GROUP *" m68kreg="a0"/>
    </method>
    <method name="EC_GROUP_get0_order" result="const BIGNUM *">
      <arg name="group" type="const EC_GROUP *" m68kreg="a0"/>
    </method>
    <method name="EC_GROUP_order_bits" result="int">
      <arg name="group" type="const EC_GROUP *" m68kreg="a0"/>
    </method>
    <method name="EC_KEY_get_default_method" result="const EC_KEY_METHOD *">
    </method>
    <method name="EC_KEY_get_ex_data" result="void *">
      <arg name="key" type="const EC_KEY *" m68kreg="a0"/>
      <arg name="idx" type="int" m68kreg="d0"/>
    </method>
    <method name="EC_KEY_get_method" result="const EC_KEY_METHOD *">
      <arg name="key" type="const EC_KEY *" m68kreg="a0"/>
    </method>
    <method name="EC_KEY_key2buf" result="size_t">
      <arg name="key" type="const EC_KEY *" m68kreg="a0"/>
      <arg name="form" type="point_conversion_form_t" m68kreg="d0"/>
      <arg name="pbuf" type="unsigned char **" m68kreg="a1"/>
      <arg name="ctx" type="BN_CTX *" m68kreg="a2"/>
    </method>
    <method name="EC_KEY_METHOD_free" result="void">
      <arg name="meth" type="EC_KEY_METHOD *" m68kreg="a0"/>
    </method>
    <method name="EC_KEY_METHOD_get_compute_key" result="void">
      <arg name="meth" type="const EC_KEY_METHOD *" m68kreg="a0"/>
      <arg name="pck" type="int (**)(unsigned char **, size_t *, const EC_POINT *, const EC_KEY *)" m68kreg="a1"/>
    </method>
    <method name="EC_KEY_METHOD_get_init" result="void">
      <arg name="meth" type="const EC_KEY_METHOD *" m68kreg="a0"/>
      <arg name="pinit" type="int (**)(EC_KEY *)" m68kreg="a1"/>
      <arg name="pfinish" type="void (**)(EC_KEY *)" m68kreg="a2"/>
      <arg name="pcopy" type="int (**)(EC_KEY *, const EC_KEY *)" m68kreg="a3"/>
      <arg name="pset_group" type="int (**)(EC_KEY *, const EC_GROUP *)" m68kreg="d0"/>
      <arg name="pset_private" type="int (**)(EC_KEY *, const BIGNUM *)" m68kreg="d1"/>
      <arg name="pset_public" type="int (**)(EC_KEY *, const EC_POINT *)" m68kreg="d2"/>
    </method>
    <method name="EC_KEY_METHOD_get_keygen" result="void">
      <arg name="meth" type="const EC_KEY_METHOD *" m68kreg="a0"/>
      <arg name="pkeygen" type="int (**)(EC_KEY *)" m68kreg="a1"/>
    </method>
    <method name="EC_KEY_METHOD_get_sign" result="void">
      <arg name="meth" type="const EC_KEY_METHOD *" m68kreg="a0"/>
      <arg name="psign" type="int (**)(int, const unsigned char *, int, unsigned char *, unsigned int *, const BIGNUM *, const BIGNUM *, EC_KEY *)" m68kreg="a1"/>
      <arg name="psign_setup" type="int (**)(EC_KEY *, BN_CTX *, BIGNUM **, BIGNUM **)" m68kreg="a2"/>
      <arg name="psign_sig" type="ECDSA_SIG * (**)(const unsigned char *, int, const BIGNUM *, const BIGNUM *, EC_KEY *)" m68kreg="a3"/>
    </method>
    <method name="EC_KEY_METHOD_get_verify" result="void">
      <arg name="meth" type="const EC_KEY_METHOD *" m68kreg="a0"/>
      <arg name="pverify" type="int (**)(int, const unsigned char *, int, const unsigned char *, int, EC_KEY *)" m68kreg="a1"/>
      <arg name="pverify_sig" type="int (**)(const unsigned char *, int, const ECDSA_SIG *, EC_KEY *)" m68kreg="a2"/>
    </method>
    <method name="EC_KEY_METHOD_new" result="EC_KEY_METHOD *">
      <arg name="meth" type="const EC_KEY_METHOD *" m68kreg="a0"/>
    </method>
    <method name="EC_KEY_METHOD_set_compute_key" result="void">
      <arg name="meth" type="EC_KEY_METHOD *" m68kreg="a0"/>
      <arg name="ckey" type="int (*)(unsigned char **, size_t *, const EC_POINT *, const EC_KEY *)" m68kreg="a1"/>
    </method>
    <method name="EC_KEY_METHOD_set_init" result="void">
      <arg name="meth" type="EC_KEY_METHOD *" m68kreg="a0"/>
      <arg name="init" type="int (*)(EC_KEY *)" m68kreg="a1"/>
      <arg name="finish" type="void (*)(EC_KEY *)" m68kreg="a2"/>
      <arg name="copy" type="int (*)(EC_KEY *, const EC_KEY *)" m68kreg="a3"/>
      <arg name="set_group" type="int (*)(EC_KEY *, const EC_GROUP *)" m68kreg="d0"/>
      <arg name="set_private" type="int (*)(EC_KEY *, const BIGNUM *)" m68kreg="d1"/>
      <arg name="set_public" type="int (*)(EC_KEY *, const EC_POINT *)" m68kreg="d2"/>
    </method>
    <method name="EC_KEY_METHOD_set_keygen" result="void">
      <arg name="meth" type="EC_KEY_METHOD *" m68kreg="a0"/>
      <arg name="keygen" type="int (*)(EC_KEY *)" m68kreg="a1"/>
    </method>
    <method name="EC_KEY_METHOD_set_sign" result="void">
      <arg name="meth" type="EC_KEY_METHOD *" m68kreg="a0"/>
      <arg name="sign" type="int (*)(int, const unsigned char *, int, unsigned char *, unsigned int *, const BIGNUM *, const BIGNUM *, EC_KEY *)" m68kreg="a1"/>
      <arg name="sign_setup" type="int (*)(EC_KEY *, BN_CTX *, BIGNUM **, BIGNUM **)" m68kreg="a2"/>
      <arg name="sign_sig" type="ECDSA_SIG * (*)(const unsigned char *, int, const BIGNUM *, const BIGNUM *, EC_KEY *)" m68kreg="a3"/>
    </method>
    <method name="EC_KEY_METHOD_set_verify" result="void">
      <arg name="meth" type="EC_KEY_METHOD *" m68kreg="a0"/>
      <arg name="verify" type="int (*)(int, const unsigned char *, int, const unsigned char *, int, EC_KEY *)" m68kreg="a1"/>
      <arg name="verify_sig" type="int (*)(const unsigned char *, int, const ECDSA_SIG *, EC_KEY *)" m68kreg="a2"/>
    </method>
    <method name="EC_KEY_new_method" result="EC_KEY *">
      <arg name="engine" type="ENGINE *" m68kreg="a0"/>
    </method>
    <method name="EC_KEY_oct2key" result="int">
      <arg name="key" type="EC_KEY *" m68kreg="a0"/>
      <arg name="buf" type="const unsigned char *" m68kreg="a1"/>
      <arg name="len" type="size_t" m68kreg="d0"/>
      <arg name="ctx" type="BN_CTX *" m68kreg="a2"/>
    </method>
    <method name="EC_KEY_oct2priv" result="int">
      <arg name="key" type="EC_KEY *" m68kreg="a0"/>
      <arg name="buf" type="const unsigned char *" m68kreg="a1"/>
      <arg name="len" type="size_t" m68kreg="d0"/>
    </method>
    <method name="EC_KEY_OpenSSL" result="const EC_KEY_METHOD *">
    </method>
    <method name="EC_KEY_priv2buf" result="size_t">
      <arg name="eckey" type="const EC_KEY *" m68kreg="a0"/>
      <arg name="pbuf" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="EC_KEY_priv2oct" result="size_t">
      <arg name="eckey" type="const EC_KEY *" m68kreg="a0"/>
      <arg name="buf" type="unsigned char *" m68kreg="a1"/>
      <arg name="len" type="size_t" m68kreg="d0"/>
    </method>
    <method name="EC_KEY_set_default_method" result="void">
      <arg name="meth" type="const EC_KEY_METHOD *" m68kreg="a0"/>
    </method>
    <method name="EC_KEY_set_ex_data" result="int">
      <arg name="key" type="EC_KEY *" m68kreg="a0"/>
      <arg name="idx" type="int" m68kreg="d0"/>
      <arg name="arg" type="void *" m68kreg="a1"/>
    </method>
    <method name="EC_KEY_set_method" result="int">
      <arg name="key" type="EC_KEY *" m68kreg="a0"/>
      <arg name="meth" type="const EC_KEY_METHOD *" m68kreg="a1"/>
    </method>
    <method name="EC_POINT_point2buf" result="size_t">
      <arg name="group" type="const EC_GROUP *" m68kreg="a0"/>
      <arg name="point" type="const EC_POINT *" m68kreg="a1"/>
      <arg name="form" type="point_conversion_form_t" m68kreg="d0"/>
      <arg name="pbuf" type="unsigned char **" m68kreg="a2"/>
      <arg name="ctx" type="BN_CTX *" m68kreg="a3"/>
    </method>
    <method name="ECDSA_SIG_get0" result="void">
      <arg name="sig" type="const ECDSA_SIG *" m68kreg="a0"/>
      <arg name="pr" type="const BIGNUM **" m68kreg="a1"/>
      <arg name="ps" type="const BIGNUM **" m68kreg="a2"/>
    </method>
    <method name="ENGINE_get_default_EC" result="ENGINE *">
    </method>
    <method name="ENGINE_get_EC" result="const EC_KEY_METHOD *">
      <arg name="e" type="const ENGINE *" m68kreg="a0"/>
    </method>
    <method name="ENGINE_register_all_EC" result="void">
    </method>
    <method name="ENGINE_register_EC" result="int">
      <arg name="e" type="ENGINE *" m68kreg="a0"/>
    </method>
    <method name="ENGINE_set_default_EC" result="int">
      <arg name="e" type="ENGINE *" m68kreg="a0"/>
    </method>
    <method name="ENGINE_set_EC" result="int">
      <arg name="e" type="ENGINE *" m68kreg="a0"/>
      <arg name="ecdsa_meth" type="const EC_KEY_METHOD *" m68kreg="a1"/>
    </method>
    <method name="ENGINE_unregister_EC" result="void">
      <arg name="e" type="ENGINE *" m68kreg="a0"/>
    </method>
    <method name="EVP_aes_128_ocb" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_aes_128_wrap_pad" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_aes_192_ocb" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_aes_192_wrap_pad" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_aes_256_ocb" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_aes_256_wrap_pad" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_camellia_128_ctr" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_camellia_192_ctr" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_camellia_256_ctr" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_chacha20" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_chacha20_poly1305" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_CIPHER_CTX_buf_noconst" result="unsigned char *">
      <arg name="ctx" type="EVP_CIPHER_CTX *" m68kreg="a0"/>
    </method>
    <method name="EVP_CIPHER_CTX_get_cipher_data" result="void *">
      <arg name="ctx" type="const EVP_CIPHER_CTX *" m68kreg="a0"/>
    </method>
    <method name="EVP_CIPHER_CTX_set_cipher_data" result="void *">
      <arg name="ctx" type="EVP_CIPHER_CTX *" m68kreg="a0"/>
      <arg name="cipher_data" type="void *" m68kreg="a1"/>
    </method>
    <method name="EVP_CIPHER_CTX_encrypting" result="int">
      <arg name="ctx" type="const EVP_CIPHER_CTX *" m68kreg="a0"/>
    </method>
    <method name="EVP_CIPHER_CTX_iv" result="const unsigned char *">
      <arg name="ctx" type="const EVP_CIPHER_CTX *" m68kreg="a0"/>
    </method>
    <method name="EVP_CIPHER_CTX_iv_noconst" result="unsigned char *">
      <arg name="ctx" type="EVP_CIPHER_CTX *" m68kreg="a0"/>
    </method>
    <method name="EVP_CIPHER_CTX_num" result="int">
      <arg name="ctx" type="const EVP_CIPHER_CTX *" m68kreg="a0"/>
    </method>
    <method name="EVP_CIPHER_CTX_original_iv" result="const unsigned char *">
      <arg name="ctx" type="const EVP_CIPHER_CTX *" m68kreg="a0"/>
    </method>
    <method name="EVP_CIPHER_CTX_reset" result="int">
      <arg name="ctx" type="EVP_CIPHER_CTX *" m68kreg="a0"/>
    </method>
    <method name="EVP_CIPHER_CTX_set_num" result="void">
      <arg name="ctx" type="EVP_CIPHER_CTX *" m68kreg="a0"/>
      <arg name="num" type="int" m68kreg="d0"/>
    </method>
    <method name="EVP_CIPHER_impl_ctx_size" result="int">
      <arg name="cipher" type="const EVP_CIPHER *" m68kreg="a0"/>
    </method>
    <method name="EVP_CIPHER_meth_dup" result="EVP_CIPHER *">
      <arg name="cipher" type="const EVP_CIPHER *" m68kreg="a0"/>
    </method>
    <method name="EVP_CIPHER_meth_free" result="void">
      <arg name="cipher" type="EVP_CIPHER *" m68kreg="a0"/>
    </method>
    <method name="EVP_CIPHER_meth_get_cleanup" result="int (*)(EVP_CIPHER_CTX *)">
      <arg name="cipher" type="const EVP_CIPHER *" m68kreg="a0"/>
    </method>
    <method name="EVP_CIPHER_meth_get_ctrl" result="int (*)(EVP_CIPHER_CTX *, int, int, void *)">
      <arg name="cipher" type="const EVP_CIPHER *" m68kreg="a0"/>
    </method>
    <method name="EVP_CIPHER_meth_get_do_cipher" result="int (*)(EVP_CIPHER_CTX *, unsigned char *, const unsigned char *, size_t)">
      <arg name="cipher" type="const EVP_CIPHER *" m68kreg="a0"/>
    </method>
    <method name="EVP_CIPHER_meth_get_get_asn1_params" result="int (*)(EVP_CIPHER_CTX *, ASN1_TYPE *)">
      <arg name="cipher" type="const EVP_CIPHER *" m68kreg="a0"/>
    </method>
    <method name="EVP_CIPHER_meth_get_init" result="int (*)(EVP_CIPHER_CTX *, const unsigned char *, const unsigned char *, int)">
      <arg name="cipher" type="const EVP_CIPHER *" m68kreg="a0"/>
    </method>
    <method name="EVP_CIPHER_meth_get_set_asn1_params" result="int (*)(EVP_CIPHER_CTX *, ASN1_TYPE *)">
      <arg name="cipher" type="const EVP_CIPHER *" m68kreg="a0"/>
    </method>
    <method name="EVP_CIPHER_meth_new" result="EVP_CIPHER *">
      <arg name="cipher_type" type="int" m68kreg="d0"/>
      <arg name="block_size" type="int" m68kreg="d1"/>
      <arg name="key_len" type="int" m68kreg="d2"/>
    </method>
    <method name="EVP_CIPHER_meth_set_cleanup" result="int">
      <arg name="cipher" type="EVP_CIPHER *" m68kreg="a0"/>
      <arg name="cleanup" type="int (*)(EVP_CIPHER_CTX *)" m68kreg="a1"/>
    </method>
    <method name="EVP_CIPHER_meth_set_ctrl" result="int">
      <arg name="cipher" type="EVP_CIPHER *" m68kreg="a0"/>
      <arg name="ctrl" type="int (*)(EVP_CIPHER_CTX *, int, int, void *)" m68kreg="a1"/>
    </method>
    <method name="EVP_CIPHER_meth_set_do_cipher" result="int">
      <arg name="cipher" type="EVP_CIPHER *" m68kreg="a0"/>
      <arg name="do_cipher" type="int (*)(EVP_CIPHER_CTX *, unsigned char *, const unsigned char *, size_t)" m68kreg="a1"/>
    </method>
    <method name="EVP_CIPHER_meth_set_flags" result="int">
      <arg name="cipher" type="EVP_CIPHER *" m68kreg="a0"/>
      <arg name="flags" type="unsigned long" m68kreg="d0"/>
    </method>
    <method name="EVP_CIPHER_meth_set_get_asn1_params" result="int">
      <arg name="cipher" type="EVP_CIPHER *" m68kreg="a0"/>
      <arg name="get_asn1_parameters" type="int (*)(EVP_CIPHER_CTX *, ASN1_TYPE *)" m68kreg="a1"/>
    </method>
    <method name="EVP_CIPHER_meth_set_impl_ctx_size" result="int">
      <arg name="cipher" type="EVP_CIPHER *" m68kreg="a0"/>
      <arg name="ctx_size" type="int" m68kreg="d0"/>
    </method>
    <method name="EVP_CIPHER_meth_set_init" result="int">
      <arg name="cipher" type="EVP_CIPHER *" m68kreg="a0"/>
      <arg name="init" type="int (*)(EVP_CIPHER_CTX *, const unsigned char *, const unsigned char *, int)" m68kreg="a1"/>
    </method>
    <method name="EVP_CIPHER_meth_set_iv_length" result="int">
      <arg name="cipher" type="EVP_CIPHER *" m68kreg="a0"/>
      <arg name="iv_len" type="int" m68kreg="d0"/>
    </method>
    <method name="EVP_CIPHER_meth_set_set_asn1_params" result="int">
      <arg name="cipher" type="EVP_CIPHER *" m68kreg="a0"/>
      <arg name="set_asn1_parameters" type="int (*)(EVP_CIPHER_CTX *, ASN1_TYPE *)" m68kreg="a1"/>
    </method>
    <method name="EVP_ENCODE_CTX_free" result="void">
      <arg name="ctx" type="EVP_ENCODE_CTX *" m68kreg="a0"/>
    </method>
    <method name="EVP_ENCODE_CTX_new" result="EVP_ENCODE_CTX *">
    </method>
    <method name="EVP_ENCODE_CTX_num" result="int">
      <arg name="ctx" type="EVP_ENCODE_CTX *" m68kreg="a0"/>
    </method>
    <method name="EVP_md5_sha1" result="const EVP_MD *">
    </method>
    <method name="EVP_MD_CTX_ctrl" result="int">
      <arg name="ctx" type="EVP_MD_CTX *" m68kreg="a0"/>
      <arg name="cmd" type="int" m68kreg="d0"/>
      <arg name="p1" type="int" m68kreg="d1"/>
      <arg name="p2" type="void *" m68kreg="a1"/>
    </method>
    <method name="EVP_MD_CTX_free" result="void">
      <arg name="ctx" type="EVP_MD_CTX *" m68kreg="a0"/>
    </method>
    <method name="EVP_MD_CTX_md_data" result="void *">
      <arg name="ctx" type="const EVP_MD_CTX *" m68kreg="a0"/>
    </method>
    <method name="EVP_MD_CTX_new" result="EVP_MD_CTX *">
    </method>
    <method name="EVP_MD_CTX_pkey_ctx" result="EVP_PKEY_CTX *">
      <arg name="ctx" type="const EVP_MD_CTX *" m68kreg="a0"/>
    </method>
    <method name="EVP_MD_CTX_reset" result="int">
      <arg name="ctx" type="EVP_MD_CTX *" m68kreg="a0"/>
    </method>
    <method name="EVP_MD_CTX_set_update_fn" result="void">
      <arg name="ctx" type="EVP_MD_CTX *" m68kreg="a0"/>
      <arg name="update" type="int (*)(EVP_MD_CTX *, const void *, size_t)" m68kreg="a1"/>
    </method>
    <method name="EVP_MD_CTX_update_fn" result="int (*)(EVP_MD_CTX *, const void *, size_t)">
      <arg name="ctx" type="EVP_MD_CTX *" m68kreg="a0"/>
    </method>
    <method name="EVP_MD_meth_dup" result="EVP_MD *">
      <arg name="md" type="const EVP_MD *" m68kreg="a0"/>
    </method>
    <method name="EVP_MD_meth_free" result="void">
      <arg name="md" type="EVP_MD *" m68kreg="a0"/>
    </method>
    <method name="EVP_MD_meth_get_app_datasize" result="int">
      <arg name="md" type="const EVP_MD *" m68kreg="a0"/>
    </method>
    <method name="EVP_MD_meth_get_cleanup" result="int (*)(EVP_MD_CTX *)">
      <arg name="md" type="const EVP_MD *" m68kreg="a0"/>
    </method>
    <method name="EVP_MD_meth_get_copy" result="int (*)(EVP_MD_CTX *, const EVP_MD_CTX *)">
      <arg name="md" type="const EVP_MD *" m68kreg="a0"/>
    </method>
    <method name="EVP_MD_meth_get_ctrl" result="int (*)(EVP_MD_CTX *, int, int, void *)">
      <arg name="md" type="const EVP_MD *" m68kreg="a0"/>
    </method>
    <method name="EVP_MD_meth_get_final" result="int (*)(EVP_MD_CTX *, unsigned char *)">
      <arg name="md" type="const EVP_MD *" m68kreg="a0"/>
    </method>
    <method name="EVP_MD_meth_get_flags" result="unsigned long">
      <arg name="md" type="const EVP_MD *" m68kreg="a0"/>
    </method>
    <method name="EVP_MD_meth_get_init" result="int (*)(EVP_MD_CTX *)">
      <arg name="md" type="const EVP_MD *" m68kreg="a0"/>
    </method>
    <method name="EVP_MD_meth_get_input_blocksize" result="int">
      <arg name="md" type="const EVP_MD *" m68kreg="a0"/>
    </method>
    <method name="EVP_MD_meth_get_result_size" result="int">
      <arg name="md" type="const EVP_MD *" m68kreg="a0"/>
    </method>
    <method name="EVP_MD_meth_get_update" result="int (*)(EVP_MD_CTX *, const void *, size_t)">
      <arg name="md" type="const EVP_MD *" m68kreg="a0"/>
    </method>
    <method name="EVP_MD_meth_new" result="EVP_MD *">
      <arg name="md_type" type="int" m68kreg="d0"/>
      <arg name="pkey_type" type="int" m68kreg="d1"/>
    </method>
    <method name="EVP_MD_meth_set_app_datasize" result="int">
      <arg name="md" type="EVP_MD *" m68kreg="a0"/>
      <arg name="datasize" type="int" m68kreg="d0"/>
    </method>
    <method name="EVP_MD_meth_set_cleanup" result="int">
      <arg name="md" type="EVP_MD *" m68kreg="a0"/>
      <arg name="cleanup" type="int (*)(EVP_MD_CTX *)" m68kreg="a1"/>
    </method>
    <method name="EVP_MD_meth_set_copy" result="int">
      <arg name="md" type="EVP_MD *" m68kreg="a0"/>
      <arg name="copy" type="int (*)(EVP_MD_CTX *, const EVP_MD_CTX *)" m68kreg="a1"/>
    </method>
    <method name="EVP_MD_meth_set_ctrl" result="int">
      <arg name="md" type="EVP_MD *" m68kreg="a0"/>
      <arg name="ctrl" type="int (*)(EVP_MD_CTX *, int, int, void *)" m68kreg="a1"/>
    </method>
    <method name="EVP_MD_meth_set_final" result="int">
      <arg name="md" type="EVP_MD *" m68kreg="a0"/>
      <arg name="final" type="int (*)(EVP_MD_CTX *, unsigned char *)" m68kreg="a1"/>
    </method>
    <method name="EVP_MD_meth_set_flags" result="int">
      <arg name="md" type="EVP_MD *" m68kreg="a0"/>
      <arg name="flags" type="unsigned long" m68kreg="d0"/>
    </method>
    <method name="EVP_MD_meth_set_init" result="int">
      <arg name="md" type="EVP_MD *" m68kreg="a0"/>
      <arg name="init" type="int (*)(EVP_MD_CTX *)" m68kreg="a1"/>
    </method>
    <method name="EVP_MD_meth_set_input_blocksize" result="int">
      <arg name="md" type="EVP_MD *" m68kreg="a0"/>
      <arg name="blocksize" type="int" m68kreg="d0"/>
    </method>
    <method name="EVP_MD_meth_set_result_size" result="int">
      <arg name="md" type="EVP_MD *" m68kreg="a0"/>
      <arg name="resultsize" type="int" m68kreg="d0"/>
    </method>
    <method name="EVP_MD_meth_set_update" result="int">
      <arg name="md" type="EVP_MD *" m68kreg="a0"/>
      <arg name="update" type="int (*)(EVP_MD_CTX *, const void *, size_t)" m68kreg="a1"/>
    </method>
    <method name="EVP_PBE_get" result="int">
      <arg name="ptype" type="int *" m68kreg="a0"/>
      <arg name="ppbe_nid" type="int *" m68kreg="a1"/>
      <arg name="num" type="size_t" m68kreg="d0"/>
    </method>
    <method name="EVP_PBE_scrypt" result="int">
      <arg name="pass" type="const char *" m68kreg="a0"/>
      <arg name="passlen" type="size_t" m68kreg="d0"/>
      <arg name="salt" type="const unsigned char *" m68kreg="a1"/>
      <arg name="saltlen" type="size_t" m68kreg="d1"/>
      <arg name="N" type="unsigned long" m68kreg="d2"/>
      <arg name="r" type="unsigned long" m68kreg="d3"/>
      <arg name="p" type="unsigned long" m68kreg="d4"/>
      <arg name="maxmem" type="uint64_t" m68kreg="d5-d6"/>
      <arg name="key" type="unsigned char *" m68kreg="a2"/>
      <arg name="keylen" type="size_t" m68kreg="a3"/>
    </method>
    <method name="EVP_PKEY_asn1_set_security_bits" result="void">
      <arg name="ameth" type="EVP_PKEY_ASN1_METHOD *" m68kreg="a0"/>
      <arg name="pkey_security_bits" type="int (*)(const EVP_PKEY *)" m68kreg="a1"/>
    </method>
    <method name="EVP_PKEY_get0_DH" result="DH *">
      <arg name="pkey" type="EVP_PKEY *" m68kreg="a0"/>
    </method>
    <method name="EVP_PKEY_get0_DSA" result="DSA *">
      <arg name="pkey" type="EVP_PKEY *" m68kreg="a0"/>
    </method>
    <method name="EVP_PKEY_get0_EC_KEY" result="EC_KEY *">
      <arg name="pkey" type="EVP_PKEY *" m68kreg="a0"/>
    </method>
    <method name="EVP_PKEY_get0_RSA" result="RSA *">
      <arg name="pkey" type="EVP_PKEY *" m68kreg="a0"/>
    </method>
    <method name="EVP_PKEY_meth_get_cleanup" result="void">
      <arg name="pmeth" type="const EVP_PKEY_METHOD *" m68kreg="a0"/>
      <arg name="pcleanup" type="void (**)(EVP_PKEY_CTX *)" m68kreg="a1"/>
    </method>
    <method name="EVP_PKEY_meth_get_copy" result="void">
      <arg name="pmeth" type="const EVP_PKEY_METHOD *" m68kreg="a0"/>
      <arg name="pcopy" type="int (**)(EVP_PKEY_CTX *, EVP_PKEY_CTX *)" m68kreg="a1"/>
    </method>
    <method name="EVP_PKEY_meth_get_ctrl" result="void">
      <arg name="pmeth" type="const EVP_PKEY_METHOD *" m68kreg="a0"/>
      <arg name="pctrl" type="int (**)(EVP_PKEY_CTX *, int, int, void *)" m68kreg="a1"/>
      <arg name="pctrl_str" type="int (**)(EVP_PKEY_CTX *, const char *, const char *)" m68kreg="a2"/>
    </method>
    <method name="EVP_PKEY_meth_get_decrypt" result="void">
      <arg name="pmeth" type="const EVP_PKEY_METHOD *" m68kreg="a0"/>
      <arg name="pdecrypt_init" type="int (**)(EVP_PKEY_CTX *)" m68kreg="a1"/>
      <arg name="pdecrypt" type="int (**)(EVP_PKEY_CTX *, unsigned char *, size_t *, const unsigned char *, size_t)" m68kreg="a2"/>
    </method>
    <method name="EVP_PKEY_meth_get_derive" result="void">
      <arg name="pmeth" type="const EVP_PKEY_METHOD *" m68kreg="a0"/>
      <arg name="pderive_init" type="int (**)(EVP_PKEY_CTX *)" m68kreg="a1"/>
      <arg name="pderive" type="int (**)(EVP_PKEY_CTX *, unsigned char *, size_t *)" m68kreg="a2"/>
    </method>
    <method name="EVP_PKEY_meth_get_encrypt" result="void">
      <arg name="pmeth" type="const EVP_PKEY_METHOD *" m68kreg="a0"/>
      <arg name="pencrypt_init" type="int (**)(EVP_PKEY_CTX *)" m68kreg="a1"/>
      <arg name="pencryptfn" type="int (**)(EVP_PKEY_CTX *, unsigned char *, size_t *, const unsigned char *, size_t)" m68kreg="a2"/>
    </method>
    <method name="EVP_PKEY_meth_get_init" result="void">
      <arg name="pmeth" type="const EVP_PKEY_METHOD *" m68kreg="a0"/>
      <arg name="pinit" type="int (**)(EVP_PKEY_CTX *)" m68kreg="a1"/>
    </method>
    <method name="EVP_PKEY_meth_get_keygen" result="void">
      <arg name="pmeth" type="const EVP_PKEY_METHOD *" m68kreg="a0"/>
      <arg name="pkeygen_init" type="int (**)(EVP_PKEY_CTX *)" m68kreg="a1"/>
      <arg name="pkeygen" type="int (**)(EVP_PKEY_CTX *, EVP_PKEY *)" m68kreg="a2"/>
    </method>
    <method name="EVP_PKEY_meth_get_paramgen" result="void">
      <arg name="pmeth" type="const EVP_PKEY_METHOD *" m68kreg="a0"/>
      <arg name="pparamgen_init" type="int (**)(EVP_PKEY_CTX *)" m68kreg="a1"/>
      <arg name="pparamgen" type="int (**)(EVP_PKEY_CTX *, EVP_PKEY *)" m68kreg="a2"/>
    </method>
    <method name="EVP_PKEY_meth_get_sign" result="void">
      <arg name="pmeth" type="const EVP_PKEY_METHOD *" m68kreg="a0"/>
      <arg name="psign_init" type="int (**)(EVP_PKEY_CTX *)" m68kreg="a1"/>
      <arg name="psign" type="int (**)(EVP_PKEY_CTX *, unsigned char *, size_t *, const unsigned char *, size_t)" m68kreg="a2"/>
    </method>
    <method name="EVP_PKEY_meth_get_signctx" result="void">
      <arg name="pmeth" type="const EVP_PKEY_METHOD *" m68kreg="a0"/>
      <arg name="psignctx_init" type="int (**)(EVP_PKEY_CTX *, EVP_MD_CTX *)" m68kreg="a1"/>
      <arg name="psignctx" type="int (**)(EVP_PKEY_CTX *, unsigned char *, size_t *, EVP_MD_CTX *)" m68kreg="a2"/>
    </method>
    <method name="EVP_PKEY_meth_get_verify" result="void">
      <arg name="pmeth" type="const EVP_PKEY_METHOD *" m68kreg="a0"/>
      <arg name="pverify_init" type="int (**)(EVP_PKEY_CTX *)" m68kreg="a1"/>
      <arg name="pverify" type="int (**)(EVP_PKEY_CTX *, const unsigned char *, size_t, const unsigned char *, size_t)" m68kreg="a2"/>
    </method>
    <method name="EVP_PKEY_meth_get_verify_recover" result="void">
      <arg name="pmeth" type="const EVP_PKEY_METHOD *" m68kreg="a0"/>
      <arg name="pverify_recover_init" type="int (**)(EVP_PKEY_CTX *)" m68kreg="a1"/>
      <arg name="pverify_recover" type="int (**)(EVP_PKEY_CTX *, unsigned char *, size_t *, const unsigned char *, size_t)" m68kreg="a2"/>
    </method>
    <method name="EVP_PKEY_meth_get_verifyctx" result="void">
      <arg name="pmeth" type="const EVP_PKEY_METHOD *" m68kreg="a0"/>
      <arg name="pverifyctx_init" type="int (**)(EVP_PKEY_CTX *, EVP_MD_CTX *)" m68kreg="a1"/>
      <arg name="pverifyctx" type="int (**)(EVP_PKEY_CTX *, const unsigned char *, int, EVP_MD_CTX *)" m68kreg="a2"/>
    </method>
    <method name="EVP_PKEY_security_bits" result="int">
      <arg name="pkey" type="const EVP_PKEY *" m68kreg="a0"/>
    </method>
    <method name="EVP_PKEY_up_ref" result="int">
      <arg name="pkey" type="EVP_PKEY *" m68kreg="a0"/>
    </method>
    <method name="PKCS5_v2_scrypt_keyivgen" result="int">
      <arg name="ctx" type="EVP_CIPHER_CTX *" m68kreg="a0"/>
      <arg name="pass" type="const char *" m68kreg="a1"/>
      <arg name="passlen" type="int" m68kreg="d0"/>
      <arg name="param" type="ASN1_TYPE *" m68kreg="a2"/>
      <arg name="c" type="const EVP_CIPHER *" m68kreg="a3"/>
      <arg name="md" type="const EVP_MD *" m68kreg="d1"/>
      <arg name="en_de" type="int" m68kreg="d2"/>
    </method>
    <method name="HMAC_CTX_free" result="void">
      <arg name="ctx" type="HMAC_CTX *" m68kreg="a0"/>
    </method>
    <method name="HMAC_CTX_new" result="HMAC_CTX *">
    </method>
    <method name="HMAC_CTX_reset" result="int">
      <arg name="ctx" type="HMAC_CTX *" m68kreg="a0"/>
    </method>
    <method name="HMAC_size" result="size_t">
      <arg name="ctx" type="const HMAC_CTX *" m68kreg="a0"/>
    </method>
    <method name="OPENSSL_LH_error" result="int">
      <arg name="lh" type="OPENSSL_LHASH *" m68kreg="a0"/>
    </method>
    <method name="OPENSSL_LH_get_down_load" result="unsigned long">
      <arg name="lh" type="const OPENSSL_LHASH *" m68kreg="a0"/>
    </method>
    <method name="OPENSSL_LH_set_down_load" result="void">
      <arg name="lh" type="OPENSSL_LHASH *" m68kreg="a0"/>
      <arg name="down_load" type="unsigned long" m68kreg="d0"/>
    </method>
    <method name="CRYPTO_128_unwrap_pad" result="size_t">
      <arg name="key" type="void *" m68kreg="a0"/>
      <arg name="icv" type="const unsigned char *" m68kreg="a1"/>
      <arg name="out" type="unsigned char *" m68kreg="a2"/>
      <arg name="in" type="const unsigned char *" m68kreg="a3"/>
      <arg name="inlen" type="size_t" m68kreg="d0"/>
      <arg name="block" type="block128_f" m68kreg="d1"/>
    </method>
    <method name="CRYPTO_128_wrap_pad" result="size_t">
      <arg name="key" type="void *" m68kreg="a0"/>
      <arg name="icv" type="const unsigned char *" m68kreg="a1"/>
      <arg name="out" type="unsigned char *" m68kreg="a2"/>
      <arg name="in" type="const unsigned char *" m68kreg="a3"/>
      <arg name="inlen" type="size_t" m68kreg="d0"/>
      <arg name="block" type="block128_f" m68kreg="d1"/>
    </method>
    <method name="CRYPTO_ocb128_aad" result="int">
      <arg name="ctx" type="OCB128_CONTEXT *" m68kreg="a0"/>
      <arg name="aad" type="const unsigned char *" m68kreg="a1"/>
      <arg name="len" type="size_t" m68kreg="d0"/>
    </method>
    <method name="CRYPTO_ocb128_cleanup" result="void">
      <arg name="ctx" type="OCB128_CONTEXT *" m68kreg="a0"/>
    </method>
    <method name="CRYPTO_ocb128_copy_ctx" result="int">
      <arg name="dest" type="OCB128_CONTEXT *" m68kreg="a0"/>
      <arg name="src" type="OCB128_CONTEXT *" m68kreg="a1"/>
      <arg name="keyenc" type="void *" m68kreg="a2"/>
      <arg name="keydec" type="void *" m68kreg="a3"/>
    </method>
    <method name="CRYPTO_ocb128_decrypt" result="int">
      <arg name="ctx" type="OCB128_CONTEXT *" m68kreg="a0"/>
      <arg name="in" type="const unsigned char *" m68kreg="a1"/>
      <arg name="out" type="unsigned char *" m68kreg="a2"/>
      <arg name="len" type="size_t" m68kreg="d0"/>
    </method>
    <method name="CRYPTO_ocb128_encrypt" result="int">
      <arg name="ctx" type="OCB128_CONTEXT *" m68kreg="a0"/>
      <arg name="in" type="const unsigned char *" m68kreg="a1"/>
      <arg name="out" type="unsigned char *" m68kreg="a2"/>
      <arg name="len" type="size_t" m68kreg="d0"/>
    </method>
    <method name="CRYPTO_ocb128_finish" result="int">
      <arg name="ctx" type="OCB128_CONTEXT *" m68kreg="a0"/>
      <arg name="tag" type="const unsigned char *" m68kreg="a1"/>
      <arg name="len" type="size_t" m68kreg="d0"/>
    </method>
    <method name="CRYPTO_ocb128_init" result="int">
      <arg name="ctx" type="OCB128_CONTEXT *" m68kreg="a0"/>
      <arg name="keyenc" type="void *" m68kreg="a1"/>
      <arg name="keydec" type="void *" m68kreg="a2"/>
      <arg name="encrypt" type="block128_f" m68kreg="d0"/>
      <arg name="decrypt" type="block128_f" m68kreg="d1"/>
      <arg name="stream" type="ocb128_f" m68kreg="d2"/>
    </method>
    <method name="CRYPTO_ocb128_new" result="OCB128_CONTEXT *">
      <arg name="keyenc" type="void *" m68kreg="a0"/>
      <arg name="keydec" type="void *" m68kreg="a1"/>
      <arg name="encrypt" type="block128_f" m68kreg="d0"/>
      <arg name="decrypt" type="block128_f" m68kreg="d1"/>
      <arg name="stream" type="ocb128_f" m68kreg="d2"/>
    </method>
    <method name="CRYPTO_ocb128_setiv" result="int">
      <arg name="ctx" type="OCB128_CONTEXT *" m68kreg="a0"/>
      <arg name="iv" type="const unsigned char *" m68kreg="a1"/>
      <arg name="len" type="size_t" m68kreg="d0"/>
      <arg name="taglen" type="size_t" m68kreg="d1"/>
    </method>
    <method name="CRYPTO_ocb128_tag" result="int">
      <arg name="ctx" type="OCB128_CONTEXT *" m68kreg="a0"/>
      <arg name="tag" type="unsigned char *" m68kreg="a1"/>
      <arg name="len" type="size_t" m68kreg="d0"/>
    </method>
    <method name="OBJ_get0_data" result="const unsigned char *">
      <arg name="obj" type="const ASN1_OBJECT *" m68kreg="a0"/>
    </method>
    <method name="OBJ_length" result="size_t">
      <arg name="obj" type="const ASN1_OBJECT *" m68kreg="a0"/>
    </method>
    <method name="OCSP_resp_get0_produced_at" result="const ASN1_GENERALIZEDTIME *">
      <arg name="bs" type="const OCSP_BASICRESP *" m68kreg="a0"/>
    </method>
    <method name="OCSP_resp_get0_signature" result="const ASN1_OCTET_STRING *">
      <arg name="bs" type="const OCSP_BASICRESP *" m68kreg="a0"/>
    </method>
    <method name="OCSP_SINGLERESP_get0_id" result="const OCSP_CERTID *">
      <arg name="bs" type="const OCSP_SINGLERESP *" m68kreg="a0"/>
    </method>
    <method name="PKCS12_get0_mac" result="void">
      <arg name="pmac" type="const ASN1_OCTET_STRING **" m68kreg="a0"/>
      <arg name="pmacalg" type="const X509_ALGOR **" m68kreg="a1"/>
      <arg name="psalt" type="const ASN1_OCTET_STRING **" m68kreg="a2"/>
      <arg name="piter" type="const ASN1_INTEGER **" m68kreg="a3"/>
      <arg name="p12" type="const PKCS12 *" m68kreg="d0"/>
    </method>
    <method name="PKCS12_mac_present" result="int">
      <arg name="p12" type="const PKCS12 *" m68kreg="a0"/>
    </method>
    <method name="PKCS12_SAFEBAG_create0_p8inf" result="PKCS12_SAFEBAG *">
      <arg name="p8" type="PKCS8_PRIV_KEY_INFO *" m68kreg="a0"/>
    </method>
    <method name="PKCS12_SAFEBAG_create0_pkcs8" result="PKCS12_SAFEBAG *">
      <arg name="p8" type="X509_SIG *" m68kreg="a0"/>
    </method>
    <method name="PKCS12_SAFEBAG_create_cert" result="PKCS12_SAFEBAG *">
      <arg name="x509" type="X509 *" m68kreg="a0"/>
    </method>
    <method name="PKCS12_SAFEBAG_create_crl" result="PKCS12_SAFEBAG *">
      <arg name="crl" type="X509_CRL *" m68kreg="a0"/>
    </method>
    <method name="PKCS12_SAFEBAG_create_pkcs8_encrypt" result="PKCS12_SAFEBAG *">
      <arg name="pbe_nid" type="int" m68kreg="d0"/>
      <arg name="pass" type="const char *" m68kreg="a0"/>
      <arg name="passlen" type="int" m68kreg="d1"/>
      <arg name="salt" type="unsigned char *" m68kreg="a1"/>
      <arg name="saltlen" type="int" m68kreg="d2"/>
      <arg name="iter" type="int" m68kreg="d3"/>
      <arg name="p8inf" type="PKCS8_PRIV_KEY_INFO *" m68kreg="a2"/>
    </method>
    <method name="PKCS12_SAFEBAG_get0_attr" result="const ASN1_TYPE *">
      <arg name="bag" type="const PKCS12_SAFEBAG *" m68kreg="a0"/>
      <arg name="attr_nid" type="int" m68kreg="d0"/>
    </method>
    <method name="PKCS12_SAFEBAG_get0_attrs" result="const STACK_OF(X509_ATTRIBUTE) *">
      <arg name="bag" type="const PKCS12_SAFEBAG *" m68kreg="a0"/>
    </method>
    <method name="PKCS12_SAFEBAG_get0_p8inf" result="const PKCS8_PRIV_KEY_INFO *">
      <arg name="bag" type="const PKCS12_SAFEBAG *" m68kreg="a0"/>
    </method>
    <method name="PKCS12_SAFEBAG_get0_pkcs8" result="const X509_SIG *">
      <arg name="bag" type="const PKCS12_SAFEBAG *" m68kreg="a0"/>
    </method>
    <method name="PKCS12_SAFEBAG_get0_safes" result="const STACK_OF(PKCS12_SAFEBAG) *">
      <arg name="bag" type="const PKCS12_SAFEBAG *" m68kreg="a0"/>
    </method>
    <method name="PKCS12_SAFEBAG_get0_type" result="const ASN1_OBJECT *">
      <arg name="bag" type="const PKCS12_SAFEBAG *" m68kreg="a0"/>
    </method>
    <method name="PKCS12_SAFEBAG_get1_cert" result="X509 *">
      <arg name="bag" type="const PKCS12_SAFEBAG *" m68kreg="a0"/>
    </method>
    <method name="PKCS12_SAFEBAG_get1_crl" result="X509_CRL *">
      <arg name="bag" type="const PKCS12_SAFEBAG *" m68kreg="a0"/>
    </method>
    <method name="PKCS12_SAFEBAG_get_bag_nid" result="int">
      <arg name="bag" type="const PKCS12_SAFEBAG *" m68kreg="a0"/>
    </method>
    <method name="PKCS12_SAFEBAG_get_nid" result="int">
      <arg name="bag" type="const PKCS12_SAFEBAG *" m68kreg="a0"/>
    </method>
    <method name="PKCS8_get_attr" result="ASN1_TYPE *">
      <arg name="p8" type="PKCS8_PRIV_KEY_INFO *" m68kreg="a0"/>
      <arg name="attr_nid" type="int" m68kreg="d0"/>
    </method>
    <method name="PKCS8_set0_pbe" result="X509_SIG *">
      <arg name="pass" type="const char *" m68kreg="a0"/>
      <arg name="passlen" type="int" m68kreg="d0"/>
      <arg name="p8inf" type="PKCS8_PRIV_KEY_INFO *" m68kreg="a1"/>
      <arg name="pbe" type="X509_ALGOR *" m68kreg="a2"/>
    </method>
    <method name="RAND_OpenSSL" result="RAND_METHOD *">
    </method>
    <method name="RSA_bits" result="int">
      <arg name="r" type="const RSA *" m68kreg="a0"/>
    </method>
    <method name="RSA_check_key_ex" result="int">
      <arg name="key" type="const RSA *" m68kreg="a0"/>
      <arg name="cb" type="BN_GENCB *" m68kreg="a1"/>
    </method>
    <method name="RSA_PKCS1_OpenSSL" result="const RSA_METHOD *">
    </method>
    <method name="RSA_security_bits" result="int">
      <arg name="rsa" type="const RSA *" m68kreg="a0"/>
    </method>
    <method name="RSA_X931_derive_ex" result="int">
      <arg name="rsa" type="RSA *" m68kreg="a0"/>
      <arg name="p1" type="BIGNUM *" m68kreg="a1"/>
      <arg name="p2" type="BIGNUM *" m68kreg="a2"/>
      <arg name="q1" type="BIGNUM *" m68kreg="a3"/>
      <arg name="q2" type="BIGNUM *" m68kreg="d0"/>
      <arg name="Xp1" type="const BIGNUM *" m68kreg="d1"/>
      <arg name="Xp2" type="const BIGNUM *" m68kreg="d2"/>
      <arg name="Xp" type="const BIGNUM *" m68kreg="d3"/>
      <arg name="Xq1" type="const BIGNUM *" m68kreg="d4"/>
      <arg name="Xq2" type="const BIGNUM *" m68kreg="d5"/>
      <arg name="Xq" type="const BIGNUM *" m68kreg="d6"/>
      <arg name="e" type="const BIGNUM *" m68kreg="d7"/>
      <arg name="cb" type="BN_GENCB *" m68kreg="a4"/>
    </method>
    <method name="RSA_X931_generate_key_ex" result="int">
      <arg name="rsa" type="RSA *" m68kreg="a0"/>
      <arg name="bits" type="int" m68kreg="d0"/>
      <arg name="e" type="const BIGNUM *" m68kreg="a1"/>
      <arg name="cb" type="BN_GENCB *" m68kreg="d1"/>
    </method>
    <method name="TS_CONF_set_signer_digest" result="int">
      <arg name="conf" type="CONF *" m68kreg="a0"/>
      <arg name="section" type="const char *" m68kreg="a1"/>
      <arg name="md" type="const char *" m68kreg="a2"/>
      <arg name="ctx" type="TS_RESP_CTX *" m68kreg="a3"/>
    </method>
    <method name="TS_RESP_CTX_set_signer_digest" result="int">
      <arg name="ctx" type="TS_RESP_CTX *" m68kreg="a0"/>
      <arg name="md" type="const EVP_MD *" m68kreg="a1"/>
    </method>
    <method name="TS_STATUS_INFO_get0_failure_info" result="const ASN1_BIT_STRING *">
      <arg name="a" type="const TS_STATUS_INFO *" m68kreg="a0"/>
    </method>
    <method name="TS_STATUS_INFO_get0_status" result="const ASN1_INTEGER *">
      <arg name="a" type="const TS_STATUS_INFO *" m68kreg="a0"/>
    </method>
    <method name="TS_STATUS_INFO_set_status" result="int">
      <arg name="a" type="TS_STATUS_INFO *" m68kreg="a0"/>
      <arg name="i" type="int" m68kreg="d0"/>
    </method>
    <method name="TS_VERIFY_CTX_add_flags" result="int">
      <arg name="ctx" type="TS_VERIFY_CTX *" m68kreg="a0"/>
      <arg name="f" type="int" m68kreg="d0"/>
    </method>
    <method name="TS_VERIFY_CTX_set_data" result="BIO *">
      <arg name="ctx" type="TS_VERIFY_CTX *" m68kreg="a0"/>
      <arg name="b" type="BIO *" m68kreg="a1"/>
    </method>
    <method name="TS_VERIFY_CTX_set_flags" result="int">
      <arg name="ctx" type="TS_VERIFY_CTX *" m68kreg="a0"/>
      <arg name="f" type="int" m68kreg="d0"/>
    </method>
    <method name="TS_VERIFY_CTX_set_imprint" result="unsigned char *">
      <arg name="ctx" type="TS_VERIFY_CTX *" m68kreg="a0"/>
      <arg name="hexstr" type="unsigned char *" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="TS_VERIFY_CTX_set_store" result="X509_STORE *">
      <arg name="ctx" type="TS_VERIFY_CTX *" m68kreg="a0"/>
      <arg name="s" type="X509_STORE *" m68kreg="a1"/>
    </method>
    <method name="TS_VERIFY_CTS_set_certs" result="STACK_OF(X509) *">
      <arg name="ctx" type="TS_VERIFY_CTX *" m68kreg="a0"/>
      <arg name="certs" type="STACK_OF(X509) *" m68kreg="a1"/>
    </method>
    <method name="i2d_re_X509_CRL_tbs" result="int">
      <arg name="req" type="X509_CRL *" m68kreg="a0"/>
      <arg name="pp" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="i2d_re_X509_REQ_tbs" result="int">
      <arg name="req" type="X509_REQ *" m68kreg="a0"/>
      <arg name="pp" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="PKCS5_pbe2_set_scrypt" result="X509_ALGOR *">
      <arg name="cipher" type="const EVP_CIPHER *" m68kreg="a0"/>
      <arg name="salt" type="const unsigned char *" m68kreg="a1"/>
      <arg name="saltlen" type="int" m68kreg="d0"/>
      <arg name="aiv" type="unsigned char *" m68kreg="a2"/>
      <arg name="N" type="unsigned long" m68kreg="d1"/>
      <arg name="r" type="unsigned long" m68kreg="d2"/>
      <arg name="p" type="uint64_t" m68kreg="d3-d4"/>
    </method>
    <method name="X509_aux_print" result="int" status="unimplemented">
      <arg name="out" type="BIO *" m68kreg="a0"/>
      <arg name="x" type="X509 *" m68kreg="a1"/>
      <arg name="indent" type="int" m68kreg="d0"/>
    </method>
    <method name="X509_CRL_get0_extensions" result="const STACK_OF(X509_EXTENSION) *">
      <arg name="crl" type="const X509_CRL *" m68kreg="a0"/>
    </method>
    <method name="X509_CRL_get0_signature" result="void">
      <arg name="crl" type="const X509_CRL *" m68kreg="a0"/>
      <arg name="psig" type="const ASN1_BIT_STRING **" m68kreg="a1"/>
      <arg name="palg" type="const X509_ALGOR **" m68kreg="a2"/>
    </method>
    <method name="X509_CRL_get_issuer" result="X509_NAME *">
      <arg name="crl" type="const X509_CRL *" m68kreg="a0"/>
    </method>
    <method name="X509_CRL_get_lastUpdate" result="ASN1_TIME *">
      <arg name="crl" type="X509_CRL *" m68kreg="a0"/>
    </method>
    <method name="X509_CRL_get_nextUpdate" result="ASN1_TIME *">
      <arg name="crl" type="X509_CRL *" m68kreg="a0"/>
    </method>
    <method name="X509_CRL_get_REVOKED" result="STACK_OF(X509_REVOKED) *">
      <arg name="crl" type="X509_CRL *" m68kreg="a0"/>
    </method>
    <method name="X509_CRL_get_signature_nid" result="int">
      <arg name="crl" type="const X509_CRL *" m68kreg="a0"/>
    </method>
    <method name="X509_CRL_get_version" result="long">
      <arg name="crl" type="const X509_CRL *" m68kreg="a0"/>
    </method>
    <method name="X509_CRL_up_ref" result="int">
      <arg name="crl" type="X509_CRL *" m68kreg="a0"/>
    </method>
    <method name="X509_get0_extensions" result="const STACK_OF(X509_EXTENSION) *">
      <arg name="x" type="const X509 *" m68kreg="a0"/>
    </method>
    <method name="X509_get0_pubkey" result="EVP_PKEY *">
      <arg name="x" type="const X509 *" m68kreg="a0"/>
    </method>
    <method name="X509_get0_reject_objects" result="STACK_OF(ASN1_OBJECT) *">
      <arg name="x" type="X509 *" m68kreg="a0"/>
    </method>
    <method name="X509_get0_tbs_sigalg" result="const X509_ALGOR *">
      <arg name="x" type="const X509 *" m68kreg="a0"/>
    </method>
    <method name="X509_get0_trust_objects" result="STACK_OF(ASN1_OBJECT) *">
      <arg name="x" type="X509 *" m68kreg="a0"/>
    </method>
    <method name="X509_get0_uids" result="void">
      <arg name="x" type="const X509 *" m68kreg="a0"/>
      <arg name="piuid" type="const ASN1_BIT_STRING **" m68kreg="a1"/>
      <arg name="psuid" type="const ASN1_BIT_STRING **" m68kreg="a2"/>
    </method>
    <method name="X509_getm_notAfter" result="ASN1_TIME *">
      <arg name="x" type="const X509 *" m68kreg="a0"/>
    </method>
    <method name="X509_getm_notBefore" result="ASN1_TIME *">
      <arg name="x" type="const X509 *" m68kreg="a0"/>
    </method>
    <method name="X509_get_signature_type" result="int">
      <arg name="x" type="const X509 *" m68kreg="a0"/>
    </method>
    <method name="X509_get_version" result="long">
      <arg name="x" type="const X509 *" m68kreg="a0"/>
    </method>
    <method name="X509_get_X509_PUBKEY" result="X509_PUBKEY *">
      <arg name="x" type="const X509 *" m68kreg="a0"/>
    </method>
    <method name="X509_NAME_ENTRY_set" result="int">
      <arg name="ne" type="const X509_NAME_ENTRY *" m68kreg="a0"/>
    </method>
    <method name="X509_NAME_get0_der" result="int">
      <arg name="nm" type="X509_NAME *" m68kreg="a0"/>
      <arg name="pder" type="const unsigned char **" m68kreg="a1"/>
      <arg name="pderlen" type="size_t *" m68kreg="a2"/>
    </method>
    <method name="X509_PUBKEY_get0" result="EVP_PKEY *">
      <arg name="key" type="X509_PUBKEY *" m68kreg="a0"/>
    </method>
    <method name="X509_REQ_get0_signature" result="void">
      <arg name="req" type="const X509_REQ *" m68kreg="a0"/>
      <arg name="psig" type="const ASN1_BIT_STRING **" m68kreg="a1"/>
      <arg name="palg" type="const X509_ALGOR **" m68kreg="a2"/>
    </method>
    <method name="X509_REQ_get_signature_nid" result="int">
      <arg name="req" type="const X509_REQ *" m68kreg="a0"/>
    </method>
    <method name="X509_REQ_get_subject_name" result="X509_NAME *">
      <arg name="req" type="const X509_REQ *" m68kreg="a0"/>
    </method>
    <method name="X509_REQ_get_version" result="long">
      <arg name="req" type="const X509_REQ *" m68kreg="a0"/>
    </method>
    <method name="X509_REQ_get_X509_PUBKEY" result="X509_PUBKEY *">
      <arg name="req" type="X509_REQ *" m68kreg="a0"/>
    </method>
    <method name="X509_REVOKED_get0_extensions" result="const STACK_OF(X509_EXTENSION) *">
      <arg name="r" type="const X509_REVOKED *" m68kreg="a0"/>
    </method>
    <method name="X509_REVOKED_get0_revocationDate" result="const ASN1_TIME *">
      <arg name="x" type="const X509_REVOKED *" m68kreg="a0"/>
    </method>
    <method name="X509_REVOKED_get0_serialNumber" result="const ASN1_INTEGER *">
      <arg name="x" type="const X509_REVOKED *" m68kreg="a0"/>
    </method>
    <method name="X509_trusted" result="int">
      <arg name="x" type="const X509 *" m68kreg="a0"/>
    </method>
    <method name="X509_up_ref" result="int">
      <arg name="x" type="X509 *" m68kreg="a0"/>
    </method>
    <method name="X509_STORE_CTX_get_num_untrusted" result="int">
      <arg name="ctx" type="X509_STORE_CTX *" m68kreg="a0"/>
    </method>
    <method name="X509_STORE_CTX_set0_dane" result="void">
      <arg name="ctx" type="X509_STORE_CTX *" m68kreg="a0"/>
      <arg name="dane" type="SSL_DANE *" m68kreg="a1"/>
    </method>
    <method name="X509_VERIFY_PARAM_move_peername" result="void">
      <arg name="to" type="X509_VERIFY_PARAM *" m68kreg="a0"/>
      <arg name="from" type="X509_VERIFY_PARAM *" m68kreg="a1"/>
    </method>
    <method name="i2s_ASN1_IA5STRING" result="char *">
      <arg name="method" type="X509V3_EXT_METHOD *" m68kreg="a0"/>
      <arg name="ia5" type="ASN1_IA5STRING *" m68kreg="a1"/>
    </method>
    <method name="s2i_ASN1_IA5STRING" result="ASN1_IA5STRING *">
      <arg name="method" type="X509V3_EXT_METHOD *" m68kreg="a0"/>
      <arg name="ctx" type="X509V3_CTX *" m68kreg="a1"/>
      <arg name="str" type="const char *" m68kreg="a2"/>
    </method>
    <method name="X509v3_addr_add_inherit" result="int">
      <arg name="addr" type="IPAddrBlocks *" m68kreg="a0"/>
      <arg name="afi" type="const unsigned" m68kreg="d0"/>
      <arg name="safi" type="const unsigned *" m68kreg="a1"/>
    </method>
    <method name="X509v3_addr_add_prefix" result="int">
      <arg name="addr" type="IPAddrBlocks *" m68kreg="a0"/>
      <arg name="afi" type="const unsigned" m68kreg="d0"/>
      <arg name="safi" type="const unsigned *" m68kreg="a1"/>
      <arg name="a" type="unsigned char *" m68kreg="a2"/>
      <arg name="prefixlen" type="const int" m68kreg="d1"/>
    </method>
    <method name="X509v3_addr_add_range" result="int">
      <arg name="addr" type="IPAddrBlocks *" m68kreg="a0"/>
      <arg name="afi" type="const unsigned" m68kreg="d0"/>
      <arg name="safi" type="const unsigned *" m68kreg="a1"/>
      <arg name="min" type="unsigned char *" m68kreg="a2"/>
      <arg name="max" type="unsigned char *" m68kreg="a3"/>
    </method>
    <method name="X509v3_addr_canonize" result="int">
      <arg name="addr" type="IPAddrBlocks *" m68kreg="a0"/>
    </method>
    <method name="X509v3_addr_get_afi" result="unsigned">
      <arg name="f" type="const IPAddressFamily *" m68kreg="a0"/>
    </method>
    <method name="X509v3_addr_get_range" result="int">
      <arg name="aor" type="IPAddressOrRange *" m68kreg="a0"/>
      <arg name="afi" type="const unsigned" m68kreg="d0"/>
      <arg name="min" type="unsigned char *" m68kreg="a1"/>
      <arg name="max" type="unsigned char *" m68kreg="a2"/>
      <arg name="length" type="const int" m68kreg="d1"/>
    </method>
    <method name="X509v3_addr_inherits" result="int">
      <arg name="addr" type="IPAddrBlocks *" m68kreg="a0"/>
    </method>
    <method name="X509v3_addr_is_canonical" result="int">
      <arg name="addr" type="IPAddrBlocks *" m68kreg="a0"/>
    </method>
    <method name="X509v3_addr_subset" result="int">
      <arg name="a" type="IPAddrBlocks *" m68kreg="a0"/>
      <arg name="b" type="IPAddrBlocks *" m68kreg="a1"/>
    </method>
    <method name="X509v3_addr_validate_path" result="int">
      <arg name="ctx" type="X509_STORE_CTX *" m68kreg="a0"/>
    </method>
    <method name="X509v3_addr_validate_resource_set" result="int">
      <arg name="chain" type="STACK_OF(X509) *" m68kreg="a0"/>
      <arg name="ext" type="IPAddrBlocks *" m68kreg="a1"/>
      <arg name="allow_inheritance" type="int" m68kreg="d0"/>
    </method>
    <method name="X509v3_asid_add_inherit" result="int">
      <arg name="asid" type="ASIdentifiers *" m68kreg="a0"/>
      <arg name="which" type="int" m68kreg="d0"/>
    </method>
    <method name="X509v3_asid_add_id_or_range" result="int">
      <arg name="asid" type="ASIdentifiers *" m68kreg="a0"/>
      <arg name="which" type="int" m68kreg="d0"/>
      <arg name="min" type="ASN1_INTEGER *" m68kreg="a1"/>
      <arg name="max" type="ASN1_INTEGER *" m68kreg="a2"/>
    </method>
    <method name="X509v3_asid_canonize" result="int">
      <arg name="asid" type="ASIdentifiers *" m68kreg="a0"/>
    </method>
    <method name="X509v3_asid_inherits" result="int">
      <arg name="asid" type="ASIdentifiers *" m68kreg="a0"/>
    </method>
    <method name="X509v3_asid_is_canonical" result="int">
      <arg name="asid" type="ASIdentifiers *" m68kreg="a0"/>
    </method>
    <method name="X509v3_asid_subset" result="int">
      <arg name="a" type="ASIdentifiers *" m68kreg="a0"/>
      <arg name="b" type="ASIdentifiers *" m68kreg="a1"/>
    </method>
    <method name="X509v3_asid_validate_path" result="int">
      <arg name="ctx" type="X509_STORE_CTX *" m68kreg="a0"/>
    </method>
    <method name="X509v3_asid_validate_resource_set" result="int">
      <arg name="chain" type="STACK_OF(X509) *" m68kreg="a0"/>
      <arg name="ext" type="ASIdentifiers *" m68kreg="a1"/>
      <arg name="allow_inheritance" type="int" m68kreg="d0"/>
    </method>
    <method name="X509_get0_subject_key_id" result="const ASN1_OCTET_STRING *">
      <arg name="x" type="X509 *" m68kreg="a0"/>
    </method>
    <method name="X509_get_extended_key_usage" result="uint32_t">
      <arg name="x" type="X509 *" m68kreg="a0"/>
    </method>
    <method name="X509_get_extension_flags" result="uint32_t">
      <arg name="x" type="X509 *" m68kreg="a0"/>
    </method>
    <method name="X509_get_key_usage" result="uint32_t">
      <arg name="x" type="X509 *" m68kreg="a0"/>
    </method>
    <method name="DTLSv1_listen" result="int">
      <arg name="s" type="SSL *" m68kreg="a0"/>
      <arg name="client" type="BIO_ADDR *" m68kreg="a1"/>
    </method>
    <method name="OPENSSL_init_ssl" result="int">
      <arg name="opts" type="uint64_t" m68kreg="d0-d1"/>
      <arg name="settings" type="const OPENSSL_INIT_SETTINGS *" m68kreg="a0"/>
    </method>
    <method name="SSL_add1_host" result="int">
      <arg name="s" type="SSL *" m68kreg="a0"/>
      <arg name="hostname" type="const char *" m68kreg="a1"/>
    </method>
    <method name="SSL_add_ssl_module" result="void">
    </method>
    <method name="SSL_CIPHER_get_cipher_nid" result="int">
      <arg name="c" type="const SSL_CIPHER *" m68kreg="a0"/>
    </method>
    <method name="SSL_CIPHER_get_digest_nid" result="int">
      <arg name="c" type="const SSL_CIPHER *" m68kreg="a0"/>
    </method>
    <method name="SSL_clear_options" result="unsigned long">
      <arg name="s" type="SSL *" m68kreg="a0"/>
      <arg name="op" type="unsigned long" m68kreg="d0"/>
    </method>
    <method name="SSL_config" result="int">
      <arg name="s" type="SSL *" m68kreg="a0"/>
      <arg name="name" type="const char *" m68kreg="a1"/>
    </method>
    <method name="SSL_CTX_clear_options" result="unsigned long">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
      <arg name="op" type="unsigned long" m68kreg="d0"/>
    </method>
    <method name="SSL_CTX_config" result="int">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
      <arg name="name" type="const char *" m68kreg="a1"/>
    </method>
    <method name="SSL_CTX_dane_enable" result="int">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
    </method>
    <method name="SSL_CTX_dane_mtype_set" result="int">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
      <arg name="md" type="const EVP_MD *" m68kreg="a1"/>
      <arg name="mtype" type="uint8_t" m68kreg="d0"/>
      <arg name="ord" type="uint8_t" m68kreg="d1"/>
    </method>
    <method name="SSL_CTX_get0_security_ex_data" result="void *">
      <arg name="ctx" type="const SSL_CTX *" m68kreg="a0"/>
    </method>
    <method name="SSL_CTX_get_options" result="unsigned long">
      <arg name="ctx" type="const SSL_CTX *" m68kreg="a0"/>
    </method>
    <method name="SSL_CTX_get_security_callback" result="int (*)(const SSL *, const SSL_CTX *, int, int, int, void *, void *)">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
    </method>
    <method name="SSL_CTX_get_security_level" result="int">
      <arg name="ctx" type="const SSL_CTX *" m68kreg="a0"/>
    </method>
    <method name="SSL_CTX_set0_security_ex_data" result="void">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
      <arg name="ex" type="void *" m68kreg="a1"/>
    </method>
    <method name="SSL_CTX_set_default_verify_dir" result="int">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
    </method>
    <method name="SSL_CTX_set_default_verify_file" result="int">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
    </method>
    <method name="SSL_CTX_set_not_resumable_session_callback" result="void">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
      <arg name="cb" type="int (*)(SSL *, int)" m68kreg="a1"/>
    </method>
    <method name="SSL_CTX_set_options" result="unsigned long">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
      <arg name="op" type="unsigned long" m68kreg="d0"/>
    </method>
    <method name="SSL_CTX_set_security_callback" result="void">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
      <arg name="cb" type="int (*)(const SSL *, const SSL_CTX *, int, int, int, void *, void *)" m68kreg="a1"/>
    </method>
    <method name="SSL_CTX_set_security_level" result="void">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
      <arg name="level" type="int" m68kreg="d0"/>
    </method>
    <method name="SSL_CTX_up_ref" result="int">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
    </method>
    <method name="SSL_dane_enable" result="int">
      <arg name="s" type="SSL *" m68kreg="a0"/>
      <arg name="basedomain" type="const char *" m68kreg="a1"/>
    </method>
    <method name="SSL_dane_tlsa_add" result="int">
      <arg name="s" type="SSL *" m68kreg="a0"/>
      <arg name="usage" type="uint8_t" m68kreg="d0"/>
      <arg name="selector" type="uint8_t" m68kreg="d1"/>
      <arg name="mtype" type="uint8_t" m68kreg="d2"/>
      <arg name="data" type="unsigned const char *" m68kreg="a1"/>
      <arg name="dlen" type="size_t" m68kreg="d3"/>
    </method>
    <method name="SSL_get0_dane" result="SSL_DANE *">
      <arg name="ssl" type="SSL *" m68kreg="a0"/>
    </method>
    <method name="SSL_get0_dane_authority" result="int">
      <arg name="s" type="SSL *" m68kreg="a0"/>
      <arg name="mcert" type="X509 **" m68kreg="a1"/>
      <arg name="mspki" type="EVP_PKEY **" m68kreg="a2"/>
    </method>
    <method name="SSL_get0_dane_tlsa" result="int">
      <arg name="s" type="SSL *" m68kreg="a0"/>
      <arg name="usage" type="uint8_t *" m68kreg="a1"/>
      <arg name="selector" type="uint8_t *" m68kreg="a2"/>
      <arg name="mtype" type="uint8_t *" m68kreg="a3"/>
      <arg name="data" type="unsigned const char **" m68kreg="d0"/>
      <arg name="dlen" type="size_t *" m68kreg="d1"/>
    </method>
    <method name="SSL_get0_peername" result="const char *">
      <arg name="s" type="SSL *" m68kreg="a0"/>
    </method>
    <method name="SSL_get0_security_ex_data" result="void *">
      <arg name="s" type="const SSL *" m68kreg="a0"/>
    </method>
    <method name="SSL_get1_supported_ciphers" result="STACK_OF(SSL_CIPHER) *">
      <arg name="s" type="SSL *" m68kreg="a0"/>
    </method>
    <method name="SSL_get_async_wait_fd" result="int" status="unimplemented">
      <arg name="s" type="SSL *" m68kreg="a0"/>
    </method>
    <method name="SSL_get_client_random" result="size_t">
      <arg name="s" type="const SSL *" m68kreg="a0"/>
      <arg name="out" type="unsigned char *" m68kreg="a1"/>
      <arg name="outlen" type="size_t" m68kreg="d0"/>
    </method>
    <method name="SSL_get_options" result="unsigned long">
      <arg name="s" type="const SSL *" m68kreg="a0"/>
    </method>
    <method name="SSL_get_security_callback" result="int (*)(const SSL *, const SSL_CTX *, int, int, int, void *, void *)">
      <arg name="s" type="const SSL *" m68kreg="a0"/>
    </method>
    <method name="SSL_get_security_level" result="int">
      <arg name="s" type="const SSL *" m68kreg="a0"/>
    </method>
    <method name="SSL_get_server_random" result="size_t">
      <arg name="s" type="const SSL *" m68kreg="a0"/>
      <arg name="out" type="unsigned char *" m68kreg="a1"/>
      <arg name="outlen" type="size_t" m68kreg="d0"/>
    </method>
    <method name="SSL_get_state" result="OSSL_HANDSHAKE_STATE">
      <arg name="ssl" type="const SSL *" m68kreg="a0"/>
    </method>
    <method name="SSL_in_before" result="int">
      <arg name="s" type="const SSL *" m68kreg="a0"/>
    </method>
    <method name="SSL_in_init" result="int">
      <arg name="s" type="const SSL *" m68kreg="a0"/>
    </method>
    <method name="SSL_is_init_finished" result="int">
      <arg name="s" type="const SSL *" m68kreg="a0"/>
    </method>
    <method name="SSL_SESSION_get0_ticket" result="void">
      <arg name="s" type="const SSL_SESSION *" m68kreg="a0"/>
      <arg name="tick" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="size_t *" m68kreg="a2"/>
    </method>
    <method name="SSL_SESSION_get_master_key" result="size_t">
      <arg name="sess" type="const SSL_SESSION *" m68kreg="a0"/>
      <arg name="out" type="unsigned char *" m68kreg="a1"/>
      <arg name="outlen" type="size_t" m68kreg="d0"/>
    </method>
    <method name="SSL_SESSION_get_ticket_lifetime_hint" result="unsigned long">
      <arg name="s" type="const SSL_SESSION *" m68kreg="a0"/>
    </method>
    <method name="SSL_SESSION_has_ticket" result="int">
      <arg name="s" type="const SSL_SESSION *" m68kreg="a0"/>
    </method>
    <method name="SSL_SESSION_print_keylog" result="int">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="x" type="const SSL_SESSION *" m68kreg="a1"/>
    </method>
    <method name="SSL_session_reused" result="int">
      <arg name="s" type="const SSL *" m68kreg="a0"/>
    </method>
    <method name="SSL_set0_security_ex_data" result="void">
      <arg name="s" type="SSL *" m68kreg="a0"/>
      <arg name="ex" type="void *" m68kreg="a1"/>
    </method>
    <method name="SSL_set1_host" result="int">
      <arg name="s" type="SSL *" m68kreg="a0"/>
      <arg name="hostname" type="const char *" m68kreg="a1"/>
    </method>
    <method name="SSL_set_default_passwd_cb" result="void">
      <arg name="s" type="SSL *" m68kreg="a0"/>
      <arg name="cb" type="pem_password_cb *" m68kreg="a1"/>
    </method>
    <method name="SSL_set_default_passwd_cb_userdata" result="void">
      <arg name="s" type="SSL *" m68kreg="a0"/>
      <arg name="u" type="void *" m68kreg="a1"/>
    </method>
    <method name="SSL_set_hostflags" result="void">
      <arg name="s" type="SSL *" m68kreg="a0"/>
      <arg name="flags" type="unsigned int" m68kreg="d0"/>
    </method>
    <method name="SSL_set_not_resumable_session_callback" result="void">
      <arg name="ssl" type="SSL *" m68kreg="a0"/>
      <arg name="cb" type="int (*)(SSL *, int)" m68kreg="a1"/>
    </method>
    <method name="SSL_set_options" result="unsigned long">
      <arg name="s" type="SSL *" m68kreg="a0"/>
      <arg name="op" type="unsigned long" m68kreg="d0"/>
    </method>
    <method name="SSL_set0_rbio" result="void">
      <arg name="s" type="SSL *" m68kreg="a0"/>
      <arg name="rbio" type="BIO *" m68kreg="a1"/>
    </method>
    <method name="SSL_set_security_callback" result="void">
      <arg name="s" type="SSL *" m68kreg="a0"/>
      <arg name="cb" type="int (*)(const SSL *, const SSL_CTX *, int, int, int, void *, void *)" m68kreg="a1"/>
    </method>
    <method name="SSL_set_security_level" result="void">
      <arg name="s" type="SSL *" m68kreg="a0"/>
      <arg name="level" type="int" m68kreg="d0"/>
    </method>
    <method name="SSL_set0_wbio" result="void">
      <arg name="s" type="SSL *" m68kreg="a0"/>
      <arg name="wbio" type="BIO *" m68kreg="a1"/>
    </method>
    <method name="SSL_up_ref" result="int">
      <arg name="s" type="SSL *" m68kreg="a0"/>
    </method>
    <method name="SSL_use_certificate_chain_file" result="int">
      <arg name="ssl" type="SSL *" m68kreg="a0"/>
      <arg name="file" type="const char *" m68kreg="a1"/>
    </method>
    <method name="SSL_waiting_for_async" result="int">
      <arg name="s" type="SSL *" m68kreg="a0"/>
    </method>
    <method name="TLS_client_method" result="const SSL_METHOD *">
    </method>
    <method name="TLS_method" result="const SSL_METHOD *">
    </method>
    <method name="TLS_server_method" result="const SSL_METHOD *">
    </method>
    <method name="ASYNC_WAIT_CTX_new" result="ASYNC_WAIT_CTX *">
    </method>
    <method name="ASYNC_WAIT_CTX_free" result="void">
      <arg name="ctx" type="ASYNC_WAIT_CTX *" m68kreg="a0"/>
    </method>
    <method name="ASYNC_WAIT_CTX_set_wait_fd" result="int">
      <arg name="ctx" type="ASYNC_WAIT_CTX *" m68kreg="a0"/>
      <arg name="key" type="const void *" m68kreg="a1"/>
      <arg name="fd" type="OSSL_ASYNC_FD" m68kreg="d0"/>
      <arg name="custom_data" type="void *" m68kreg="a2"/>
      <arg name="cleanup" type="void (*)(ASYNC_WAIT_CTX *, const void *, OSSL_ASYNC_FD, void *)" m68kreg="a3"/>
    </method>
    <method name="ASYNC_WAIT_CTX_get_fd" result="int">
      <arg name="ctx" type="ASYNC_WAIT_CTX *" m68kreg="a0"/>
      <arg name="key" type="const void *" m68kreg="a1"/>
      <arg name="fd" type="OSSL_ASYNC_FD *" m68kreg="a2"/>
      <arg name="custom_data" type="void **" m68kreg="a3"/>
    </method>
    <method name="ASYNC_WAIT_CTX_get_all_fds" result="int">
      <arg name="ctx" type="ASYNC_WAIT_CTX *" m68kreg="a0"/>
      <arg name="fd" type="OSSL_ASYNC_FD *" m68kreg="a1"/>
      <arg name="numfds" type="size_t *" m68kreg="a2"/>
    </method>
    <method name="ASYNC_WAIT_CTX_get_changed_fds" result="int">
      <arg name="ctx" type="ASYNC_WAIT_CTX *" m68kreg="a0"/>
      <arg name="addfd" type="OSSL_ASYNC_FD *" m68kreg="a1"/>
      <arg name="numaddfds" type="size_t *" m68kreg="a2"/>
      <arg name="delfd" type="OSSL_ASYNC_FD *" m68kreg="a3"/>
      <arg name="numdelfds" type="size_t *" m68kreg="d0"/>
    </method>
    <method name="ASYNC_WAIT_CTX_clear_fd" result="int">
      <arg name="ctx" type="ASYNC_WAIT_CTX *" m68kreg="a0"/>
      <arg name="key" type="const void *" m68kreg="a1"/>
    </method>
    <method name="ASYNC_is_capable" result="int">
    </method>
    <method name="ASYNC_get_wait_ctx" result="ASYNC_WAIT_CTX *">
      <arg name="job" type="ASYNC_JOB *" m68kreg="a0"/>
    </method>
    <method name="BIO_up_ref" result="int">
      <arg name="a" type="BIO *" m68kreg="a0"/>
    </method>
    <method name="BN_BLINDING_is_current_thread" result="int">
      <arg name="b" type="BN_BLINDING *" m68kreg="a0"/>
    </method>
    <method name="BN_BLINDING_set_current_thread" result="void">
      <arg name="b" type="BN_BLINDING *" m68kreg="a0"/>
    </method>
    <method name="BN_BLINDING_lock" result="int">
      <arg name="b" type="BN_BLINDING *" m68kreg="a0"/>
    </method>
    <method name="BN_BLINDING_unlock" result="int">
      <arg name="b" type="BN_BLINDING *" m68kreg="a0"/>
    </method>
    <method name="CRYPTO_THREAD_run_once" result="int">
      <arg name="once" type="CRYPTO_ONCE *" m68kreg="a0"/>
      <arg name="init" type="void (*)(void)" m68kreg="a1"/>
    </method>
    <method name="CRYPTO_THREAD_init_local" result="int">
      <arg name="key" type="CRYPTO_THREAD_LOCAL *" m68kreg="a0"/>
      <arg name="cleanup" type="void (*)(void *)" m68kreg="a1"/>
    </method>
    <method name="CRYPTO_THREAD_get_local" result="void *">
      <arg name="key" type="CRYPTO_THREAD_LOCAL *" m68kreg="a0"/>
    </method>
    <method name="CRYPTO_THREAD_set_local" result="int">
      <arg name="key" type="CRYPTO_THREAD_LOCAL *" m68kreg="a0"/>
      <arg name="val" type="void *" m68kreg="a1"/>
    </method>
    <method name="CRYPTO_THREAD_cleanup_local" result="int">
      <arg name="key" type="CRYPTO_THREAD_LOCAL *" m68kreg="a0"/>
    </method>
    <method name="CRYPTO_THREAD_get_current_id" result="CRYPTO_THREAD_ID">
    </method>
    <method name="CRYPTO_THREAD_compare_id" result="int">
      <arg name="a" type="CRYPTO_THREAD_ID" m68kreg="d0"/>
      <arg name="b" type="CRYPTO_THREAD_ID" m68kreg="d1"/>
    </method>
    <method name="CRYPTO_THREAD_lock_new" result="CRYPTO_RWLOCK *">
    </method>
    <method name="CRYPTO_THREAD_read_lock" result="int">
      <arg name="lock" type="CRYPTO_RWLOCK *" m68kreg="a0"/>
    </method>
    <method name="CRYPTO_THREAD_write_lock" result="int">
      <arg name="lock" type="CRYPTO_RWLOCK *" m68kreg="a0"/>
    </method>
    <method name="CRYPTO_THREAD_unlock" result="int">
      <arg name="lock" type="CRYPTO_RWLOCK *" m68kreg="a0"/>
    </method>
    <method name="CRYPTO_THREAD_lock_free" result="void">
      <arg name="lock" type="CRYPTO_RWLOCK *" m68kreg="a0"/>
    </method>
    <method name="CRYPTO_atomic_add" result="int">
      <arg name="val" type="int *" m68kreg="a0"/>
      <arg name="amount" type="int" m68kreg="d0"/>
      <arg name="ret" type="int *" m68kreg="a1"/>
      <arg name="lock" type="CRYPTO_RWLOCK *" m68kreg="a2"/>
    </method>
    <method name="OPENSSL_die" result="void">
      <arg name="assertion" type="const char *" m68kreg="a0"/>
      <arg name="file" type="const char *" m68kreg="a1"/>
      <arg name="line" type="int" m68kreg="d0"/>
    </method>
    <method name="CT_POLICY_EVAL_CTX_new" result="CT_POLICY_EVAL_CTX *">
    </method>
    <method name="CT_POLICY_EVAL_CTX_free" result="void">
      <arg name="ctx" type="CT_POLICY_EVAL_CTX *" m68kreg="a0"/>
    </method>
    <method name="CT_POLICY_EVAL_CTX_get0_cert" result="X509 *">
      <arg name="ctx" type="const CT_POLICY_EVAL_CTX *" m68kreg="a0"/>
    </method>
    <method name="CT_POLICY_EVAL_CTX_get0_issuer" result="X509 *">
      <arg name="ctx" type="const CT_POLICY_EVAL_CTX *" m68kreg="a0"/>
    </method>
    <method name="CT_POLICY_EVAL_CTX_get0_log_store" result="const CTLOG_STORE *">
      <arg name="ctx" type="const CT_POLICY_EVAL_CTX *" m68kreg="a0"/>
    </method>
    <method name="SCT_new" result="SCT *">
    </method>
    <method name="SCT_new_from_base64" result="SCT *">
      <arg name="version" type="unsigned char" m68kreg="d0"/>
      <arg name="logid_base64" type="const char *" m68kreg="a0"/>
      <arg name="entry_type" type="ct_log_entry_type_t" m68kreg="d1"/>
      <arg name="timestamp" type="uint64_t" m68kreg="d2-d3"/>
      <arg name="extensions_base64" type="const char *" m68kreg="a1"/>
      <arg name="signature_base64" type="const char *" m68kreg="a2"/>
    </method>
    <method name="SCT_free" result="void">
      <arg name="sct" type="SCT *" m68kreg="a0"/>
    </method>
    <method name="SCT_LIST_free" result="void">
      <arg name="a" type="STACK_OF(SCT) *" m68kreg="a0"/>
    </method>
    <method name="SCT_get_version" result="sct_version_t">
      <arg name="sct" type="const SCT *" m68kreg="a0"/>
    </method>
    <method name="SCT_set_version" result="int">
      <arg name="sct" type="SCT *" m68kreg="a0"/>
      <arg name="version" type="sct_version_t" m68kreg="d0"/>
    </method>
    <method name="SCT_get_log_entry_type" result="ct_log_entry_type_t">
      <arg name="sct" type="const SCT *" m68kreg="a0"/>
    </method>
    <method name="SCT_set_log_entry_type" result="int">
      <arg name="sct" type="SCT *" m68kreg="a0"/>
      <arg name="entry_type" type="ct_log_entry_type_t" m68kreg="d0"/>
    </method>
    <method name="SCT_get0_log_id" result="size_t">
      <arg name="sct" type="const SCT *" m68kreg="a0"/>
      <arg name="log_id" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="SCT_set0_log_id" result="int">
      <arg name="sct" type="SCT *" m68kreg="a0"/>
      <arg name="log_id" type="unsigned char *" m68kreg="a1"/>
      <arg name="log_id_len" type="size_t" m68kreg="d0"/>
    </method>
    <method name="SCT_set1_log_id" result="int">
      <arg name="sct" type="SCT *" m68kreg="a0"/>
      <arg name="log_id" type="const unsigned char *" m68kreg="a1"/>
      <arg name="log_id_len" type="size_t" m68kreg="d0"/>
    </method>
    <method name="SCT_get_timestamp" result="uint64_t">
      <arg name="sct" type="const SCT *" m68kreg="a0"/>
    </method>
    <method name="SCT_set_timestamp" result="void">
      <arg name="sct" type="SCT *" m68kreg="a0"/>
      <arg name="timestamp" type="uint64_t" m68kreg="d0-d1"/>
    </method>
    <method name="SCT_get_signature_nid" result="int">
      <arg name="sct" type="const SCT *" m68kreg="a0"/>
    </method>
    <method name="SCT_set_signature_nid" result="int">
      <arg name="sct" type="SCT *" m68kreg="a0"/>
      <arg name="nid" type="int" m68kreg="d0"/>
    </method>
    <method name="SCT_get0_extensions" result="size_t">
      <arg name="sct" type="const SCT *" m68kreg="a0"/>
      <arg name="ext" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="SCT_set0_extensions" result="void">
      <arg name="sct" type="SCT *" m68kreg="a0"/>
      <arg name="ext" type="unsigned char *" m68kreg="a1"/>
      <arg name="ext_len" type="size_t" m68kreg="d0"/>
    </method>
    <method name="SCT_set1_extensions" result="int">
      <arg name="sct" type="SCT *" m68kreg="a0"/>
      <arg name="ext" type="const unsigned char *" m68kreg="a1"/>
      <arg name="ext_len" type="size_t" m68kreg="d0"/>
    </method>
    <method name="SCT_get0_signature" result="size_t">
      <arg name="sct" type="const SCT *" m68kreg="a0"/>
      <arg name="sig" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="SCT_set0_signature" result="void">
      <arg name="sct" type="SCT *" m68kreg="a0"/>
      <arg name="sig" type="unsigned char *" m68kreg="a1"/>
      <arg name="sig_len" type="size_t" m68kreg="d0"/>
    </method>
    <method name="SCT_set1_signature" result="int">
      <arg name="sct" type="SCT *" m68kreg="a0"/>
      <arg name="sig" type="const unsigned char *" m68kreg="a1"/>
      <arg name="sig_len" type="size_t" m68kreg="d0"/>
    </method>
    <method name="SCT_get_source" result="sct_source_t">
      <arg name="sct" type="const SCT *" m68kreg="a0"/>
    </method>
    <method name="SCT_set_source" result="int">
      <arg name="sct" type="SCT *" m68kreg="a0"/>
      <arg name="source" type="sct_source_t" m68kreg="d0"/>
    </method>
    <method name="SCT_print" result="void">
      <arg name="sct" type="const SCT *" m68kreg="a0"/>
      <arg name="out" type="BIO *" m68kreg="a1"/>
      <arg name="indent" type="int" m68kreg="d0"/>
      <arg name="logs" type="const CTLOG_STORE *" m68kreg="a2"/>
    </method>
    <method name="SCT_LIST_print" result="void">
      <arg name="sct_list" type="const STACK_OF(SCT) *" m68kreg="a0"/>
      <arg name="out" type="BIO *" m68kreg="a1"/>
      <arg name="indent" type="int" m68kreg="d0"/>
      <arg name="separator" type="const char *" m68kreg="a2"/>
      <arg name="logs" type="const CTLOG_STORE *" m68kreg="a3"/>
    </method>
    <method name="SCT_get_validation_status" result="sct_validation_status_t">
      <arg name="sct" type="const SCT *" m68kreg="a0"/>
    </method>
    <method name="SCT_validate" result="int">
      <arg name="sct" type="SCT *" m68kreg="a0"/>
      <arg name="ctx" type="const CT_POLICY_EVAL_CTX *" m68kreg="a1"/>
    </method>
    <method name="SCT_LIST_validate" result="int">
      <arg name="scts" type="const STACK_OF(SCT) *" m68kreg="a0"/>
      <arg name="ctx" type="CT_POLICY_EVAL_CTX *" m68kreg="a1"/>
    </method>
    <method name="i2o_SCT_LIST" result="int">
      <arg name="a" type="const STACK_OF(SCT) *" m68kreg="a0"/>
      <arg name="pp" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="o2i_SCT_LIST" result="STACK_OF(SCT) *">
      <arg name="a" type="STACK_OF(SCT) **" m68kreg="a0"/>
      <arg name="pp" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="size_t" m68kreg="d0"/>
    </method>
    <method name="i2d_SCT_LIST" result="int">
      <arg name="a" type="const STACK_OF(SCT) *" m68kreg="a0"/>
      <arg name="pp" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="d2i_SCT_LIST" result="STACK_OF(SCT) *">
      <arg name="a" type="STACK_OF(SCT) **" m68kreg="a0"/>
      <arg name="pp" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="i2o_SCT" result="int">
      <arg name="sct" type="const SCT *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="o2i_SCT" result="SCT *">
      <arg name="psct" type="SCT **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="size_t" m68kreg="d0"/>
    </method>
    <method name="CTLOG_new" result="CTLOG *">
      <arg name="public_key" type="EVP_PKEY *" m68kreg="a0"/>
      <arg name="name" type="const char *" m68kreg="a1"/>
    </method>
    <method name="CTLOG_new_from_base64" result="int">
      <arg name="ct_log" type="CTLOG **" m68kreg="a0"/>
      <arg name="pkey_base64" type="const char *" m68kreg="a1"/>
      <arg name="name" type="const char *" m68kreg="a2"/>
    </method>
    <method name="CTLOG_free" result="void">
      <arg name="log" type="CTLOG *" m68kreg="a0"/>
    </method>
    <method name="CTLOG_get0_name" result="const char *">
      <arg name="log" type="const CTLOG *" m68kreg="a0"/>
    </method>
    <method name="CTLOG_get0_log_id" result="void">
      <arg name="log" type="const CTLOG *" m68kreg="a0"/>
      <arg name="log_id" type="const uint8_t **" m68kreg="a1"/>
      <arg name="log_id_len" type="size_t *" m68kreg="a2"/>
    </method>
    <method name="CTLOG_get0_public_key" result="EVP_PKEY *">
      <arg name="log" type="const CTLOG *" m68kreg="a0"/>
    </method>
    <method name="CTLOG_STORE_new" result="CTLOG_STORE *">
    </method>
    <method name="CTLOG_STORE_free" result="void">
      <arg name="store" type="CTLOG_STORE *" m68kreg="a0"/>
    </method>
    <method name="CTLOG_STORE_get0_log_by_id" result="const CTLOG *">
      <arg name="store" type="const CTLOG_STORE *" m68kreg="a0"/>
      <arg name="log_id" type="const uint8_t *" m68kreg="a1"/>
      <arg name="log_id_len" type="size_t" m68kreg="d0"/>
    </method>
    <method name="CTLOG_STORE_load_file" result="int">
      <arg name="store" type="CTLOG_STORE *" m68kreg="a0"/>
      <arg name="file" type="const char *" m68kreg="a1"/>
    </method>
    <method name="CTLOG_STORE_load_default_file" result="int">
      <arg name="store" type="CTLOG_STORE *" m68kreg="a0"/>
    </method>
    <method name="ERR_load_CT_strings" result="int">
    </method>
    <method name="DHparams_it" result="const ASN1_ITEM *">
    </method>
    <method name="DSA_SIG_get0" result="void">
      <arg name="sig" type="const DSA_SIG *" m68kreg="a0"/>
      <arg name="pr" type="const BIGNUM **" m68kreg="a1"/>
      <arg name="ps" type="const BIGNUM **" m68kreg="a2"/>
    </method>
    <method name="EC_GROUP_new_from_ecparameters" result="EC_GROUP *">
      <arg name="params" type="const ECPARAMETERS *" m68kreg="a0"/>
    </method>
    <method name="EC_GROUP_get_ecparameters" result="ECPARAMETERS *">
      <arg name="group" type="const EC_GROUP *" m68kreg="a0"/>
      <arg name="params" type="ECPARAMETERS *" m68kreg="a1"/>
    </method>
    <method name="EC_GROUP_new_from_ecpkparameters" result="EC_GROUP *">
      <arg name="params" type="const ECPKPARAMETERS *" m68kreg="a0"/>
    </method>
    <method name="EC_GROUP_get_ecpkparameters" result="ECPKPARAMETERS *">
      <arg name="group" type="const EC_GROUP *" m68kreg="a0"/>
      <arg name="params" type="ECPKPARAMETERS *" m68kreg="a1"/>
    </method>
    <method name="ECPKPARAMETERS_it" result="const ASN1_ITEM *">
    </method>
    <method name="ECPARAMETERS_it" result="const ASN1_ITEM *">
    </method>
    <method name="EC_KEY_can_sign" result="int">
      <arg name="eckey" type="const EC_KEY *" m68kreg="a0"/>
    </method>
    <method name="EVP_blake2b512" result="const EVP_MD *">
    </method>
    <method name="EVP_blake2s256" result="const EVP_MD *">
    </method>
    <method name="EVP_PKEY_CTX_str2ctrl" result="int">
      <arg name="ctx" type="EVP_PKEY_CTX *" m68kreg="a0"/>
      <arg name="cmd" type="int" m68kreg="d0"/>
      <arg name="str" type="const char *" m68kreg="a1"/>
    </method>
    <method name="EVP_PKEY_CTX_hex2ctrl" result="int">
      <arg name="ctx" type="EVP_PKEY_CTX *" m68kreg="a0"/>
      <arg name="cmd" type="int" m68kreg="d0"/>
      <arg name="hex" type="const char *" m68kreg="a1"/>
    </method>
    <method name="ERR_load_KDF_strings" result="int">
    </method>
    <method name="SRP_user_pwd_free" result="void">
      <arg name="user_pwd" type="SRP_user_pwd *" m68kreg="a0"/>
    </method>
    <method name="SRP_VBASE_get1_by_user" result="SRP_user_pwd *">
      <arg name="vb" type="SRP_VBASE *" m68kreg="a0"/>
      <arg name="username" type="char *" m68kreg="a1"/>
    </method>
    <method name="SSL_CTX_has_client_custom_ext" result="int">
      <arg name="ctx" type="const SSL_CTX *" m68kreg="a0"/>
      <arg name="ext_type" type="unsigned int" m68kreg="d0"/>
    </method>
    <method name="SSL_CIPHER_get_kx_nid" result="int">
      <arg name="c" type="const SSL_CIPHER *" m68kreg="a0"/>
    </method>
    <method name="SSL_CIPHER_get_auth_nid" result="int">
      <arg name="c" type="const SSL_CIPHER *" m68kreg="a0"/>
    </method>
    <method name="SSL_CIPHER_is_aead" result="int">
      <arg name="c" type="const SSL_CIPHER *" m68kreg="a0"/>
    </method>
    <method name="SSL_has_pending" result="int">
      <arg name="s" type="const SSL *" m68kreg="a0"/>
    </method>
    <method name="SSL_SESSION_up_ref" result="int">
      <arg name="ses" type="SSL_SESSION *" m68kreg="a0"/>
    </method>
    <method name="SSL_CTX_get_default_passwd_cb" result="int (*)(char *, int, int, void *)">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
    </method>
    <method name="SSL_CTX_get_default_passwd_cb_userdata" result="void *">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
    </method>
    <method name="SSL_get_default_passwd_cb" result="int (*)(char *, int, int, void *)">
      <arg name="ctx" type="SSL *" m68kreg="a0"/>
    </method>
    <method name="SSL_get_default_passwd_cb_userdata" result="void *">
      <arg name="ctx" type="SSL *" m68kreg="a0"/>
    </method>
    <method name="SSL_get_all_async_fds" result="int">
      <arg name="s" type="SSL *" m68kreg="a0"/>
      <arg name="fds" type="OSSL_ASYNC_FD *" m68kreg="a1"/>
      <arg name="numfds" type="size_t *" m68kreg="a2"/>
    </method>
    <method name="SSL_get_changed_async_fds" result="int">
      <arg name="s" type="SSL *" m68kreg="a0"/>
      <arg name="addfd" type="OSSL_ASYNC_FD *" m68kreg="a1"/>
      <arg name="numaddfds" type="size_t *" m68kreg="a2"/>
      <arg name="delfd" type="OSSL_ASYNC_FD *" m68kreg="a3"/>
      <arg name="numdelfds" type="size_t *" m68kreg="d0"/>
    </method>
    <method name="SSL_CTX_set_default_read_buffer_len" result="void">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
      <arg name="len" type="size_t" m68kreg="d0"/>
    </method>
    <method name="SSL_set_default_read_buffer_len" result="void">
      <arg name="s" type="SSL *" m68kreg="a0"/>
      <arg name="len" type="size_t" m68kreg="d0"/>
    </method>
    <method name="SSL_set_ct_validation_callback" result="int">
      <arg name="s" type="SSL *" m68kreg="a0"/>
      <arg name="callback" type="ssl_ct_validation_cb" m68kreg="a1"/>
      <arg name="arg" type="void *" m68kreg="a2"/>
    </method>
    <method name="SSL_CTX_set_ct_validation_callback" result="int">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
      <arg name="callback" type="ssl_ct_validation_cb" m68kreg="a1"/>
      <arg name="arg" type="void *" m68kreg="a2"/>
    </method>
    <method name="SSL_ct_is_enabled" result="int">
      <arg name="s" type="const SSL *" m68kreg="a0"/>
    </method>
    <method name="SSL_CTX_ct_is_enabled" result="int">
      <arg name="ctx" type="const SSL_CTX *" m68kreg="a0"/>
    </method>
    <method name="SSL_get0_peer_scts" result="const STACK_OF(SCT) *">
      <arg name="s" type="SSL *" m68kreg="a0"/>
    </method>
    <method name="SSL_CTX_set_default_ctlog_list_file" result="int">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
    </method>
    <method name="SSL_CTX_set_ctlog_list_file" result="int">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
      <arg name="path" type="const char *" m68kreg="a1"/>
    </method>
    <method name="SSL_CTX_set0_ctlog_store" result="void">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
      <arg name="logs" type="CTLOG_STORE *" m68kreg="a1"/>
    </method>
    <method name="SSL_CTX_get0_ctlog_store" result="const CTLOG_STORE *">
      <arg name="ctx" type="const SSL_CTX *" m68kreg="a0"/>
    </method>
    <method name="X509_SIG_get0" result="void">
      <arg name="sig" type="const X509_SIG *" m68kreg="a0"/>
      <arg name="palg" type="const X509_ALGOR **" m68kreg="a1"/>
      <arg name="pdigest" type="const ASN1_OCTET_STRING **" m68kreg="a2"/>
    </method>
    <method name="PKCS8_pkey_get0_attrs" result="const STACK_OF(X509_ATTRIBUTE) *">
      <arg name="p8" type="const PKCS8_PRIV_KEY_INFO *" m68kreg="a0"/>
    </method>
    <method name="PKCS8_pkey_add1_attr_by_NID" result="int">
      <arg name="p8" type="PKCS8_PRIV_KEY_INFO *" m68kreg="a0"/>
      <arg name="nid" type="int" m68kreg="d0"/>
      <arg name="type" type="int" m68kreg="d1"/>
      <arg name="bytes" type="const unsigned char *" m68kreg="a1"/>
      <arg name="len" type="int" m68kreg="d2"/>
    </method>
    <method name="X509_STORE_up_ref" result="int">
      <arg name="v" type="X509_STORE *" m68kreg="a0"/>
    </method>
    <method name="SSL_enable_ct" result="int">
      <arg name="s" type="SSL *" m68kreg="a0"/>
      <arg name="validation_mode" type="int" m68kreg="d0"/>
    </method>
    <method name="SSL_CTX_enable_ct" result="int">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
      <arg name="validation_mode" type="int" m68kreg="d0"/>
    </method>
    <method name="SSL_CTX_get_ciphers" result="STACK_OF(SSL_CIPHER) *">
      <arg name="ctx" type="const SSL_CTX *" m68kreg="a0"/>
    </method>
    <method name="SSL_SESSION_get0_hostname" result="const char *">
      <arg name="s" type="const SSL_SESSION *" m68kreg="a0"/>
    </method>
    <method name="SCT_validation_status_string" result="const char *">
      <arg name="sct" type="const SCT *" m68kreg="a0"/>
    </method>
    <method name="BIO_meth_new" result="BIO_METHOD *">
      <arg name="type" type="int" m68kreg="d0"/>
      <arg name="name" type="const char *" m68kreg="a0"/>
    </method>
    <method name="BIO_meth_get_puts" result="int (*)(BIO *, const char *)">
      <arg name="biom" type="const BIO_METHOD *" m68kreg="a0"/>
    </method>
    <method name="BIO_meth_get_ctrl" result="long (*)(BIO *, int, long, void *)">
      <arg name="biom" type="const BIO_METHOD *" m68kreg="a0"/>
    </method>
    <method name="BIO_meth_get_gets" result="int (*)(BIO *, char *, int)">
      <arg name="biom" type="const BIO_METHOD *" m68kreg="a0"/>
    </method>
    <method name="BIO_get_data" result="void *">
      <arg name="a" type="BIO *" m68kreg="a0"/>
    </method>
    <method name="BIO_set_init" result="void">
      <arg name="a" type="BIO *" m68kreg="a0"/>
      <arg name="init" type="int" m68kreg="d0"/>
    </method>
    <method name="BIO_meth_set_puts" result="int">
      <arg name="biom" type="BIO_METHOD *" m68kreg="a0"/>
      <arg name="func" type="int (*)(BIO *, const char *)" m68kreg="a1"/>
    </method>
    <method name="BIO_get_shutdown" result="int">
      <arg name="a" type="BIO *" m68kreg="a0"/>
    </method>
    <method name="BIO_get_init" result="int">
      <arg name="a" type="BIO *" m68kreg="a0"/>
    </method>
    <method name="BIO_meth_set_ctrl" result="int">
      <arg name="biom" type="BIO_METHOD *" m68kreg="a0"/>
      <arg name="ctrl" type="long (*)(BIO *, int, long, void *)" m68kreg="a1"/>
    </method>
    <method name="BIO_meth_set_read" result="int">
      <arg name="biom" type="BIO_METHOD *" m68kreg="a0"/>
      <arg name="read" type="int (*)(BIO *, char *, int)" m68kreg="a1"/>
    </method>
    <method name="BIO_set_shutdown" result="void">
      <arg name="a" type="BIO *" m68kreg="a0"/>
      <arg name="shut" type="int" m68kreg="d0"/>
    </method>
    <method name="BIO_meth_set_create" result="int">
      <arg name="biom" type="BIO_METHOD *" m68kreg="a0"/>
      <arg name="create" type="int (*)(BIO *)" m68kreg="a1"/>
    </method>
    <method name="BIO_meth_get_write" result="int (*)(BIO *, const char *, int)">
      <arg name="biom" type="const BIO_METHOD *" m68kreg="a0"/>
    </method>
    <method name="BIO_meth_set_callback_ctrl" result="int">
      <arg name="biom" type="BIO_METHOD *" m68kreg="a0"/>
      <arg name="callback_ctrl" type="long (*)(BIO *, int, BIO_info_cb *)" m68kreg="a1"/>
    </method>
    <method name="BIO_meth_get_create" result="int (*)(BIO *)">
      <arg name="biom" type="const BIO_METHOD *" m68kreg="a0"/>
    </method>
    <method name="BIO_set_next" result="void">
      <arg name="b" type="BIO *" m68kreg="a0"/>
      <arg name="next" type="BIO *" m68kreg="a1"/>
    </method>
    <method name="BIO_set_data" result="void">
      <arg name="a" type="BIO *" m68kreg="a0"/>
      <arg name="ptr" type="void *" m68kreg="a1"/>
    </method>
    <method name="BIO_meth_set_write" result="int">
      <arg name="biom" type="BIO_METHOD *" m68kreg="a0"/>
      <arg name="write" type="int (*)(BIO *, const char *, int)" m68kreg="a1"/>
    </method>
    <method name="BIO_meth_set_destroy" result="int">
      <arg name="biom" type="BIO_METHOD *" m68kreg="a0"/>
      <arg name="destroy" type="int (*)(BIO *)" m68kreg="a1"/>
    </method>
    <method name="BIO_meth_set_gets" result="int">
      <arg name="biom" type="BIO_METHOD *" m68kreg="a0"/>
      <arg name="func" type="int (*)(BIO *, char *, int)" m68kreg="a1"/>
    </method>
    <method name="BIO_meth_get_callback_ctrl" result="long (*)(BIO *, int, BIO_info_cb *)">
      <arg name="biom" type="const BIO_METHOD *" m68kreg="a0"/>
    </method>
    <method name="BIO_meth_get_destroy" result="int (*)(BIO *)">
      <arg name="biom" type="const BIO_METHOD *" m68kreg="a0"/>
    </method>
    <method name="BIO_meth_get_read" result="int (*)(BIO *, char *, int)">
      <arg name="biom" type="const BIO_METHOD *" m68kreg="a0"/>
    </method>
    <method name="BIO_set_retry_reason" result="void">
      <arg name="bio" type="BIO *" m68kreg="a0"/>
      <arg name="reason" type="int" m68kreg="d0"/>
    </method>
    <method name="BIO_meth_free" result="void">
      <arg name="biom" type="BIO_METHOD *" m68kreg="a0"/>
    </method>
    <method name="DSA_meth_set_bn_mod_exp" result="int">
      <arg name="dsam" type="DSA_METHOD *" m68kreg="a0"/>
      <arg name="bn_mod_exp" type="int (*)(DSA *, BIGNUM *, const BIGNUM *, const BIGNUM *, const BIGNUM *, BN_CTX *, BN_MONT_CTX *)" m68kreg="a1"/>
    </method>
    <method name="DSA_meth_set_init" result="int">
      <arg name="dsam" type="DSA_METHOD *" m68kreg="a0"/>
      <arg name="init" type="int (*)(DSA *)" m68kreg="a1"/>
    </method>
    <method name="DSA_meth_free" result="void">
      <arg name="dsam" type="DSA_METHOD *" m68kreg="a0"/>
    </method>
    <method name="DSA_meth_set_mod_exp" result="int">
      <arg name="dsam" type="DSA_METHOD *" m68kreg="a0"/>
      <arg name="mod_exp" type="int (*)(DSA *, BIGNUM *, const BIGNUM *, const BIGNUM *, const BIGNUM *, const BIGNUM *, const BIGNUM *, BN_CTX *, BN_MONT_CTX *)" m68kreg="a1"/>
    </method>
    <method name="DSA_meth_set_sign" result="int">
      <arg name="dsam" type="DSA_METHOD *" m68kreg="a0"/>
      <arg name="sign" type="DSA_SIG * (*)(const unsigned char *, int, DSA *)" m68kreg="a1"/>
    </method>
    <method name="DSA_meth_get_finish" result="int (*)(DSA *)">
      <arg name="dsam" type="const DSA_METHOD *" m68kreg="a0"/>
    </method>
    <method name="DSA_set_flags" result="void">
      <arg name="d" type="DSA *" m68kreg="a0"/>
      <arg name="flags" type="int" m68kreg="d0"/>
    </method>
    <method name="DSA_get0_pqg" result="void">
      <arg name="d" type="const DSA *" m68kreg="a0"/>
      <arg name="p" type="const BIGNUM **" m68kreg="a1"/>
      <arg name="q" type="const BIGNUM **" m68kreg="a2"/>
      <arg name="g" type="const BIGNUM **" m68kreg="a3"/>
    </method>
    <method name="DSA_meth_get0_app_data" result="void *">
      <arg name="dsam" type="const DSA_METHOD *" m68kreg="a0"/>
    </method>
    <method name="DSA_meth_get_keygen" result="int (*)(DSA *)">
      <arg name="dsam" type="const DSA_METHOD *" m68kreg="a0"/>
    </method>
    <method name="DSA_clear_flags" result="void">
      <arg name="d" type="DSA *" m68kreg="a0"/>
      <arg name="flags" type="int" m68kreg="d0"/>
    </method>
    <method name="DSA_meth_get0_name" result="const char *">
      <arg name="dsam" type="const DSA_METHOD *" m68kreg="a0"/>
    </method>
    <method name="DSA_meth_get_paramgen" result="int (*)(DSA *, int, const unsigned char *, int, int *, unsigned long *, BN_GENCB *)">
      <arg name="dsam" type="DSA_METHOD *" m68kreg="a0"/>
    </method>
    <method name="DSA_meth_get_sign" result="DSA_SIG * (*)(const unsigned char *, int, DSA *)">
      <arg name="dsam" type="DSA_METHOD *" m68kreg="a0"/>
    </method>
    <method name="DSA_meth_set_paramgen" result="int">
      <arg name="dsam" type="DSA_METHOD *" m68kreg="a0"/>
      <arg name="paramgen" type="int (*)(DSA *, int, const unsigned char *, int, int *, unsigned long *, BN_GENCB *)" m68kreg="a1"/>
    </method>
    <method name="DSA_test_flags" result="int">
      <arg name="d" type="const DSA *" m68kreg="a0"/>
      <arg name="flags" type="int" m68kreg="d0"/>
    </method>
    <method name="DSA_meth_set0_app_data" result="int">
      <arg name="dsam" type="DSA_METHOD *" m68kreg="a0"/>
      <arg name="app_data" type="void *" m68kreg="a1"/>
    </method>
    <method name="DSA_meth_set1_name" result="int">
      <arg name="dsam" type="DSA_METHOD *" m68kreg="a0"/>
      <arg name="name" type="const char *" m68kreg="a1"/>
    </method>
    <method name="DSA_get0_key" result="void">
      <arg name="d" type="const DSA *" m68kreg="a0"/>
      <arg name="pub_key" type="const BIGNUM **" m68kreg="a1"/>
      <arg name="priv_key" type="const BIGNUM **" m68kreg="a2"/>
    </method>
    <method name="DSA_meth_get_mod_exp" result="int (*)(DSA *, BIGNUM *, const BIGNUM *, const BIGNUM *, const BIGNUM *, const BIGNUM *, const BIGNUM *, BN_CTX *, BN_MONT_CTX *)">
      <arg name="dsam" type="const DSA_METHOD *" m68kreg="a0"/>
    </method>
    <method name="DSA_set0_pqg" result="int">
      <arg name="d" type="DSA *" m68kreg="a0"/>
      <arg name="p" type="BIGNUM *" m68kreg="a1"/>
      <arg name="q" type="BIGNUM *" m68kreg="a2"/>
      <arg name="g" type="BIGNUM *" m68kreg="a3"/>
    </method>
    <method name="DSA_meth_get_flags" result="int">
      <arg name="dsam" type="const DSA_METHOD *" m68kreg="a0"/>
    </method>
    <method name="DSA_meth_get_verify" result="int (*)(const unsigned char *, int, DSA_SIG *, DSA *)">
      <arg name="dsam" type="const DSA_METHOD *" m68kreg="a0"/>
    </method>
    <method name="DSA_meth_set_verify" result="int">
      <arg name="dsam" type="DSA_METHOD *" m68kreg="a0"/>
      <arg name="verify" type="int (*)(const unsigned char *, int, DSA_SIG *, DSA *)" m68kreg="a1"/>
    </method>
    <method name="DSA_meth_set_finish" result="int">
      <arg name="dsam" type="DSA_METHOD *" m68kreg="a0"/>
      <arg name="finish" type="int (*)(DSA *)" m68kreg="a1"/>
    </method>
    <method name="DSA_meth_set_keygen" result="int">
      <arg name="dsam" type="DSA_METHOD *" m68kreg="a0"/>
      <arg name="keygen" type="int (*)(DSA *)" m68kreg="a1"/>
    </method>
    <method name="DSA_meth_dup" result="DSA_METHOD *">
      <arg name="dsam" type="const DSA_METHOD *" m68kreg="a0"/>
    </method>
    <method name="DSA_set0_key" result="int">
      <arg name="d" type="DSA *" m68kreg="a0"/>
      <arg name="pub_key" type="BIGNUM *" m68kreg="a1"/>
      <arg name="priv_key" type="BIGNUM *" m68kreg="a2"/>
    </method>
    <method name="DSA_meth_get_init" result="int (*)(DSA *)">
      <arg name="dsam" type="const DSA_METHOD *" m68kreg="a0"/>
    </method>
    <method name="DSA_meth_set_sign_setup" result="int">
      <arg name="dsam" type="DSA_METHOD *" m68kreg="a0"/>
      <arg name="sign_setup" type="int (*)(DSA *, BN_CTX *, BIGNUM **, BIGNUM **)" m68kreg="a1"/>
    </method>
    <method name="DSA_meth_get_bn_mod_exp" result="int (*)(DSA *, BIGNUM *, const BIGNUM *, const BIGNUM *, const BIGNUM *, BN_CTX *, BN_MONT_CTX *)">
      <arg name="dsam" type="const DSA_METHOD *" m68kreg="a0"/>
    </method>
    <method name="DSA_get_method" result="const DSA_METHOD *">
      <arg name="d" type="DSA *" m68kreg="a0"/>
    </method>
    <method name="DSA_meth_new" result="DSA_METHOD *">
      <arg name="name" type="const char *" m68kreg="a0"/>
      <arg name="flags" type="int" m68kreg="d0"/>
    </method>
    <method name="DSA_meth_set_flags" result="int">
      <arg name="dsam" type="DSA_METHOD *" m68kreg="a0"/>
      <arg name="flags" type="int" m68kreg="d0"/>
    </method>
    <method name="DSA_meth_get_sign_setup" result="int (*)(DSA *, BN_CTX *, BIGNUM **, BIGNUM **)">
      <arg name="dsam" type="const DSA_METHOD *" m68kreg="a0"/>
    </method>
    <method name="DSA_get0_engine" result="ENGINE *">
      <arg name="d" type="DSA *" m68kreg="a0"/>
    </method>
    <method name="X509_VERIFY_PARAM_set_auth_level" result="void">
      <arg name="param" type="X509_VERIFY_PARAM *" m68kreg="a0"/>
      <arg name="auth_level" type="int" m68kreg="d0"/>
    </method>
    <method name="X509_VERIFY_PARAM_get_auth_level" result="int">
      <arg name="param" type="const X509_VERIFY_PARAM *" m68kreg="a0"/>
    </method>
    <method name="X509_REQ_get0_pubkey" result="EVP_PKEY *">
      <arg name="req" type="X509_REQ *" m68kreg="a0"/>
    </method>
    <method name="RSA_set0_key" result="int">
      <arg name="r" type="RSA *" m68kreg="a0"/>
      <arg name="n" type="BIGNUM *" m68kreg="a1"/>
      <arg name="e" type="BIGNUM *" m68kreg="a2"/>
      <arg name="d" type="BIGNUM *" m68kreg="a3"/>
    </method>
    <method name="RSA_meth_get_flags" result="int">
      <arg name="meth" type="const RSA_METHOD *" m68kreg="a0"/>
    </method>
    <method name="RSA_meth_set_finish" result="int">
      <arg name="rsa" type="RSA_METHOD *" m68kreg="a0"/>
      <arg name="finish" type="int (*)(RSA *)" m68kreg="a1"/>
    </method>
    <method name="RSA_meth_get_priv_dec" result="int (*)(int, const unsigned char *, unsigned char *, RSA *, int)">
      <arg name="meth" type="const RSA_METHOD *" m68kreg="a0"/>
    </method>
    <method name="RSA_meth_get_sign" result="int (*)(int, const unsigned char *, unsigned int, unsigned char *, unsigned int *, const RSA *)">
      <arg name="meth" type="const RSA_METHOD *" m68kreg="a0"/>
    </method>
    <method name="RSA_meth_get_bn_mod_exp" result="int (*)(BIGNUM *, const BIGNUM *, const BIGNUM *, const BIGNUM *, BN_CTX *, BN_MONT_CTX *)">
      <arg name="meth" type="const RSA_METHOD *" m68kreg="a0"/>
    </method>
    <method name="RSA_test_flags" result="int">
      <arg name="r" type="const RSA *" m68kreg="a0"/>
      <arg name="flags" type="int" m68kreg="d0"/>
    </method>
    <method name="RSA_meth_new" result="RSA_METHOD *">
      <arg name="name" type="const char *" m68kreg="a0"/>
      <arg name="flags" type="int" m68kreg="d0"/>
    </method>
    <method name="RSA_meth_get0_app_data" result="void *">
      <arg name="meth" type="const RSA_METHOD *" m68kreg="a0"/>
    </method>
    <method name="RSA_meth_dup" result="RSA_METHOD *">
      <arg name="meth" type="const RSA_METHOD *" m68kreg="a0"/>
    </method>
    <method name="RSA_meth_set1_name" result="int">
      <arg name="meth" type="RSA_METHOD *" m68kreg="a0"/>
      <arg name="name" type="const char *" m68kreg="a1"/>
    </method>
    <method name="RSA_meth_set0_app_data" result="int">
      <arg name="meth" type="RSA_METHOD *" m68kreg="a0"/>
      <arg name="app_data" type="void *" m68kreg="a1"/>
    </method>
    <method name="RSA_set_flags" result="void">
      <arg name="r" type="RSA *" m68kreg="a0"/>
      <arg name="flags" type="int" m68kreg="d0"/>
    </method>
    <method name="RSA_meth_set_sign" result="int">
      <arg name="rsa" type="RSA_METHOD *" m68kreg="a0"/>
      <arg name="sign" type="int (*)(int, const unsigned char *, unsigned int, unsigned char *, unsigned int *, const RSA *)" m68kreg="d0"/>
    </method>
    <method name="RSA_clear_flags" result="void">
      <arg name="r" type="RSA *" m68kreg="a0"/>
      <arg name="flags" type="int" m68kreg="d0"/>
    </method>
    <method name="RSA_meth_get_keygen" result="int (*)(RSA *, int, BIGNUM *, BN_GENCB *)">
      <arg name="meth" type="const RSA_METHOD *" m68kreg="a0"/>
    </method>
    <method name="RSA_meth_set_keygen" result="int">
      <arg name="rsa" type="RSA_METHOD *" m68kreg="a0"/>
      <arg name="keygen" type="int (*)(RSA *, int, BIGNUM *, BN_GENCB *)" m68kreg="a1"/>
    </method>
    <method name="RSA_meth_set_pub_dec" result="int">
      <arg name="rsa" type="RSA_METHOD *" m68kreg="a0"/>
      <arg name="pub_dec" type="int (*)(int, const unsigned char *, unsigned char *, RSA *, int)" m68kreg="a1"/>
    </method>
    <method name="RSA_meth_get_finish" result="int (*)(RSA *rsa)">
      <arg name="meth" type="const RSA_METHOD *" m68kreg="a0"/>
    </method>
    <method name="RSA_get0_key" result="void">
      <arg name="r" type="const RSA *" m68kreg="a0"/>
      <arg name="n" type="const BIGNUM **" m68kreg="a1"/>
      <arg name="e" type="const BIGNUM **" m68kreg="a2"/>
      <arg name="d" type="const BIGNUM **" m68kreg="a3"/>
    </method>
    <method name="RSA_get0_engine" result="ENGINE *">
      <arg name="r" type="const RSA *" m68kreg="a0"/>
    </method>
    <method name="RSA_meth_set_priv_enc" result="int">
      <arg name="rsa" type="RSA_METHOD *" m68kreg="a0"/>
      <arg name="priv_enc" type="int (*)(int, const unsigned char *, unsigned char *, RSA *, int)" m68kreg="a1"/>
    </method>
    <method name="RSA_meth_set_verify" result="int">
      <arg name="rsa" type="RSA_METHOD *" m68kreg="a0"/>
      <arg name="verify" type="int (*)(int, const unsigned char *, unsigned int, const unsigned char *, unsigned int, const RSA *)" m68kreg="a1"/>
    </method>
    <method name="RSA_get0_factors" result="void">
      <arg name="r" type="const RSA *" m68kreg="a0"/>
      <arg name="p" type="const BIGNUM **" m68kreg="a1"/>
      <arg name="q" type="const BIGNUM **" m68kreg="a2"/>
    </method>
    <method name="RSA_meth_get0_name" result="const char *">
      <arg name="meth" type="const RSA_METHOD *" m68kreg="a0"/>
    </method>
    <method name="RSA_meth_get_mod_exp" result="int (*)(BIGNUM *, const BIGNUM *, RSA *, BN_CTX *)">
      <arg name="meth" type="const RSA_METHOD *" m68kreg="a0"/>
    </method>
    <method name="RSA_meth_set_flags" result="int">
      <arg name="meth" type="RSA_METHOD *" m68kreg="a0"/>
      <arg name="flags" type="int" m68kreg="d0"/>
    </method>
    <method name="RSA_meth_get_pub_dec" result="int (*)(int, const unsigned char *, unsigned char *, RSA *, int)">
      <arg name="meth" type="const RSA_METHOD *" m68kreg="a0"/>
    </method>
    <method name="RSA_meth_set_bn_mod_exp" result="int">
      <arg name="rsa" type="RSA_METHOD *" m68kreg="a0"/>
      <arg name="bn_mod_exp" type="int (*)(BIGNUM *, const BIGNUM *, const BIGNUM *, const BIGNUM *, BN_CTX *, BN_MONT_CTX *)" m68kreg="a1"/>
    </method>
    <method name="RSA_meth_get_init" result="int (*)(RSA *)">
      <arg name="meth" type="const RSA_METHOD *" m68kreg="a0"/>
    </method>
    <method name="RSA_meth_free" result="void">
      <arg name="meth" type="RSA_METHOD *" m68kreg="a0"/>
    </method>
    <method name="RSA_meth_get_pub_enc" result="int (*)(int, const unsigned char *, unsigned char *, RSA *, int)">
      <arg name="meth" type="const RSA_METHOD *" m68kreg="a0"/>
    </method>
    <method name="RSA_meth_set_mod_exp" result="int">
      <arg name="rsa" type="RSA_METHOD *" m68kreg="a0"/>
      <arg name="mod_exp" type="int (*)(BIGNUM *, const BIGNUM *, RSA *, BN_CTX *)" m68kreg="a1"/>
    </method>
    <method name="RSA_set0_factors" result="int">
      <arg name="r" type="RSA *" m68kreg="a0"/>
      <arg name="p" type="BIGNUM *" m68kreg="a1"/>
      <arg name="q" type="BIGNUM *" m68kreg="a2"/>
    </method>
    <method name="RSA_meth_set_pub_enc" result="int">
      <arg name="rsa" type="RSA_METHOD *" m68kreg="a0"/>
      <arg name="pub_enc" type="int (*)(int, const unsigned char *, unsigned char *, RSA *, int)" m68kreg="a1"/>
    </method>
    <method name="RSA_meth_set_priv_dec" result="int">
      <arg name="rsa" type="RSA_METHOD *" m68kreg="a0"/>
      <arg name="priv_dec" type="int (*)(int, const unsigned char *, unsigned char *, RSA *, int)" m68kreg="a1"/>
    </method>
    <method name="RSA_meth_get_verify" result="int (*)(int, const unsigned char *, unsigned int, const unsigned char *, unsigned int, const RSA *)">
      <arg name="meth" type="const RSA_METHOD *" m68kreg="a0"/>
    </method>
    <method name="RSA_meth_set_init" result="int">
      <arg name="rsa" type="RSA_METHOD *" m68kreg="a0"/>
      <arg name="init" type="int (*)(RSA *)" m68kreg="a1"/>
    </method>
    <method name="RSA_meth_get_priv_enc" result="int (*)(int, const unsigned char *, unsigned char *, RSA *, int)">
      <arg name="meth" type="const RSA_METHOD *" m68kreg="a0"/>
    </method>
    <method name="RSA_set0_crt_params" result="int">
      <arg name="r" type="RSA *" m68kreg="a0"/>
      <arg name="dmp1" type="BIGNUM *" m68kreg="a1"/>
      <arg name="dmq1" type="BIGNUM *" m68kreg="a2"/>
      <arg name="iqmp" type="BIGNUM *" m68kreg="a3"/>
    </method>
    <method name="RSA_get0_crt_params" result="void">
      <arg name="r" type="const RSA *" m68kreg="a0"/>
      <arg name="dmp1" type="const BIGNUM **" m68kreg="a1"/>
      <arg name="dmq1" type="const BIGNUM **" m68kreg="a2"/>
      <arg name="iqmp" type="const BIGNUM **" m68kreg="a3"/>
    </method>
    <method name="DH_set0_pqg" result="int">
      <arg name="dh" type="DH *" m68kreg="a0"/>
      <arg name="p" type="BIGNUM *" m68kreg="a1"/>
      <arg name="q" type="BIGNUM *" m68kreg="a2"/>
      <arg name="g" type="BIGNUM *" m68kreg="a3"/>
    </method>
    <method name="DH_clear_flags" result="void">
      <arg name="dh" type="DH *" m68kreg="a0"/>
      <arg name="flags" type="int" m68kreg="d0"/>
    </method>
    <method name="DH_get0_key" result="void">
      <arg name="dh" type="const DH *" m68kreg="a0"/>
      <arg name="pub_key" type="const BIGNUM **" m68kreg="a1"/>
      <arg name="priv_key" type="const BIGNUM **" m68kreg="a2"/>
    </method>
    <method name="DH_get0_engine" result="ENGINE *">
      <arg name="d" type="DH *" m68kreg="a0"/>
    </method>
    <method name="DH_set0_key" result="int">
      <arg name="dh" type="DH *" m68kreg="a0"/>
      <arg name="pub_key" type="BIGNUM *" m68kreg="a1"/>
      <arg name="priv_key" type="BIGNUM *" m68kreg="a2"/>
    </method>
    <method name="DH_set_length" result="int">
      <arg name="dh" type="DH *" m68kreg="a0"/>
      <arg name="length" type="long" m68kreg="d0"/>
    </method>
    <method name="DH_test_flags" result="int">
      <arg name="dh" type="const DH *" m68kreg="a0"/>
      <arg name="flags" type="int" m68kreg="d0"/>
    </method>
    <method name="DH_get_length" result="long">
      <arg name="dh" type="const DH *" m68kreg="a0"/>
    </method>
    <method name="DH_get0_pqg" result="void">
      <arg name="dh" type="const DH *" m68kreg="a0"/>
      <arg name="p" type="const BIGNUM **" m68kreg="a1"/>
      <arg name="q" type="const BIGNUM **" m68kreg="a2"/>
      <arg name="g" type="const BIGNUM **" m68kreg="a3"/>
    </method>
    <method name="DH_meth_get_compute_key" result="int (*)(unsigned char *, const BIGNUM *, DH *)">
      <arg name="dhm" type="const DH_METHOD *" m68kreg="a0"/>
    </method>
    <method name="DH_meth_set1_name" result="int">
      <arg name="dhm" type="DH_METHOD *" m68kreg="a0"/>
      <arg name="name" type="const char *" m68kreg="a1"/>
    </method>
    <method name="DH_meth_set_init" result="int">
      <arg name="dhm" type="DH_METHOD *" m68kreg="a0"/>
      <arg name="init" type="int (*)(DH *)" m68kreg="a1"/>
    </method>
    <method name="DH_meth_get_finish" result="int (*)(DH *)">
      <arg name="dhm" type="const DH_METHOD *" m68kreg="a0"/>
    </method>
    <method name="DH_meth_get0_name" result="const char *">
      <arg name="dhm" type="const DH_METHOD *" m68kreg="a0"/>
    </method>
    <method name="DH_meth_set_generate_params" result="int">
      <arg name="dhm" type="DH_METHOD *" m68kreg="a0"/>
      <arg name="generate_params" type="int (*)(DH *, int, int, BN_GENCB *)" m68kreg="a1"/>
    </method>
    <method name="DH_meth_set_compute_key" result="int">
      <arg name="dhm" type="DH_METHOD *" m68kreg="a0"/>
      <arg name="compute_key" type="int (*)(unsigned char *, const BIGNUM *, DH *)" m68kreg="a1"/>
    </method>
    <method name="DH_meth_set_flags" result="int">
      <arg name="dhm" type="DH_METHOD *" m68kreg="a0"/>
      <arg name="flags" type="int" m68kreg="d0"/>
    </method>
    <method name="DH_meth_get_generate_params" result="int (*)(DH *, int, int, BN_GENCB *)">
      <arg name="dhm" type="const DH_METHOD *" m68kreg="a0"/>
    </method>
    <method name="DH_meth_get_flags" result="int">
      <arg name="dhm" type="const DH_METHOD *" m68kreg="a0"/>
    </method>
    <method name="DH_meth_set_finish" result="int">
      <arg name="dhm" type="DH_METHOD *" m68kreg="a0"/>
      <arg name="finish" type="int (*)(DH *)" m68kreg="a1"/>
    </method>
    <method name="DH_meth_get0_app_data" result="void *">
      <arg name="dhm" type="const DH_METHOD *" m68kreg="a0"/>
    </method>
    <method name="DH_meth_set0_app_data" result="int">
      <arg name="dhm" type="DH_METHOD *" m68kreg="a0"/>
      <arg name="app_data" type="void *" m68kreg="a1"/>
    </method>
    <method name="DH_meth_get_init" result="int (*)(DH *)">
      <arg name="dhm" type="const DH_METHOD *" m68kreg="a0"/>
    </method>
    <method name="DH_meth_get_bn_mod_exp" result="int (*)(const DH *, BIGNUM *, const BIGNUM *, const BIGNUM *, const BIGNUM *, BN_CTX *, BN_MONT_CTX *)">
      <arg name="dhm" type="const DH_METHOD *" m68kreg="a0"/>
    </method>
    <method name="DH_meth_new" result="DH_METHOD *">
      <arg name="name" type="const char *" m68kreg="a0"/>
      <arg name="flags" type="int" m68kreg="d0"/>
    </method>
    <method name="DH_meth_dup" result="DH_METHOD *">
      <arg name="dhm" type="const DH_METHOD *" m68kreg="a0"/>
    </method>
    <method name="DH_meth_set_bn_mod_exp" result="int">
      <arg name="dhm" type="DH_METHOD *" m68kreg="a0"/>
      <arg name="bn_mod_exp" type="int (*)(const DH *, BIGNUM *, const BIGNUM *, const BIGNUM *, const BIGNUM *, BN_CTX *, BN_MONT_CTX *)" m68kreg="a1"/>
    </method>
    <method name="DH_meth_set_generate_key" result="int">
      <arg name="dhm" type="DH_METHOD *" m68kreg="a0"/>
      <arg name="generate_key" type="int (*)(DH *)" m68kreg="a1"/>
    </method>
    <method name="DH_meth_free" result="void">
      <arg name="dhm" type="DH_METHOD *" m68kreg="a0"/>
    </method>
    <method name="DH_meth_get_generate_key" result="int (*)(DH *)">
      <arg name="dhm" type="const DH_METHOD *" m68kreg="a0"/>
    </method>
    <method name="DH_set_flags" result="void">
      <arg name="dh" type="DH *" m68kreg="a0"/>
      <arg name="flags" type="int" m68kreg="d0"/>
    </method>
    <method name="X509_STORE_CTX_get_obj_by_subject" result="X509_OBJECT *">
      <arg name="vs" type="X509_STORE_CTX *" m68kreg="a0"/>
      <arg name="type" type="X509_LOOKUP_TYPE" m68kreg="d0"/>
      <arg name="name" type="X509_NAME *" m68kreg="a1"/>
    </method>
    <method name="X509_OBJECT_free" result="void">
      <arg name="a" type="X509_OBJECT *" m68kreg="a0"/>
    </method>
    <method name="X509_OBJECT_get0_X509" result="X509 *">
      <arg name="a" type="const X509_OBJECT *" m68kreg="a0"/>
    </method>
    <method name="X509_STORE_CTX_get0_untrusted" result="STACK_OF(X509) *">
      <arg name="ctx" type="X509_STORE_CTX *" m68kreg="a0"/>
    </method>
    <method name="X509_STORE_CTX_get0_cert" result="X509 *">
      <arg name="ctx" type="X509_STORE_CTX *" m68kreg="a0"/>
    </method>
    <method name="X509_STORE_CTX_set_verify" result="void">
      <arg name="ctx" type="X509_STORE_CTX *" m68kreg="a0"/>
      <arg name="verify" type="X509_STORE_CTX_verify_fn" m68kreg="a1"/>
    </method>
    <method name="X509_STORE_CTX_get_verify" result="X509_STORE_CTX_verify_fn">
      <arg name="ctx" type="X509_STORE_CTX *" m68kreg="a0"/>
    </method>
    <method name="X509_STORE_CTX_get_verify_cb" result="X509_STORE_CTX_verify_cb">
      <arg name="ctx" type="X509_STORE_CTX *" m68kreg="a0"/>
    </method>
    <method name="X509_STORE_CTX_set0_verified_chain" result="void">
      <arg name="ctx" type="X509_STORE_CTX *" m68kreg="a0"/>
      <arg name="sk" type="STACK_OF(X509) *" m68kreg="a1"/>
    </method>
    <method name="X509_STORE_CTX_set0_untrusted" result="void">
      <arg name="ctx" type="X509_STORE_CTX *" m68kreg="a0"/>
      <arg name="sk" type="STACK_OF(X509) *" m68kreg="a1"/>
    </method>
    <method name="OPENSSL_hexchar2int" result="int">
      <arg name="c" type="unsigned char" m68kreg="d0"/>
    </method>
    <method name="BIO_new_dgram_sctp" result="BIO *" status="unimplemented">
      <arg name="fd" type="int" m68kreg="d0"/>
      <arg name="close_flag" type="int" m68kreg="d1"/>
    </method>
    <method name="BIO_dgram_is_sctp" result="int" status="unimplemented">
      <arg name="bio" type="BIO *" m68kreg="a0"/>
    </method>
    <method name="BIO_dgram_sctp_notification_cb" result="int" status="unimplemented">
      <arg name="b" type="BIO *" m68kreg="a0"/>
      <arg name="handle_notifications" type="void (*)(BIO *, void *, void *)" m68kreg="a1"/>
      <arg name="context" type="void *" m68kreg="a2"/>
    </method>
    <method name="BIO_dgram_sctp_wait_for_dry" result="int" status="unimplemented">
      <arg name="b" type="BIO *" m68kreg="a0"/>
    </method>
    <method name="BIO_dgram_sctp_msg_waiting" result="int" status="unimplemented">
      <arg name="b" type="BIO *" m68kreg="a0"/>
    </method>
    <method name="DSA_SIG_set0" result="int">
      <arg name="sig" type="DSA_SIG *" m68kreg="a0"/>
      <arg name="r" type="BIGNUM *" m68kreg="a1"/>
      <arg name="s" type="BIGNUM *" m68kreg="a2"/>
    </method>
    <method name="DSA_bits" result="int">
      <arg name="d" type="const DSA *" m68kreg="a0"/>
    </method>
    <method name="ECDSA_SIG_set0" result="int">
      <arg name="sig" type="ECDSA_SIG *" m68kreg="a0"/>
      <arg name="r" type="BIGNUM *" m68kreg="a1"/>
      <arg name="s" type="BIGNUM *" m68kreg="a2"/>
    </method>
    <method name="EVP_ENCODE_CTX_copy" result="int">
      <arg name="dctx" type="EVP_ENCODE_CTX *" m68kreg="a0"/>
      <arg name="sctx" type="EVP_ENCODE_CTX *" m68kreg="a1"/>
    </method>
    <method name="EVP_PKEY_get0_hmac" result="const unsigned char *">
      <arg name="pkey" type="const EVP_PKEY *" m68kreg="a0"/>
      <arg name="len" type="size_t *" m68kreg="a2"/>
    </method>
    <method name="HMAC_CTX_get_md" result="const EVP_MD *">
      <arg name="ctx" type="const HMAC_CTX *" m68kreg="a0"/>
    </method>
    <method name="OCSP_resp_get0_certs" result="const STACK_OF(X509) *">
      <arg name="bs" type="const OCSP_BASICRESP *" m68kreg="a0"/>
    </method>
    <method name="OCSP_resp_get0_id" result="int">
      <arg name="bs" type="const OCSP_BASICRESP *" m68kreg="a0"/>
      <arg name="pid" type="const ASN1_OCTET_STRING **" m68kreg="a1"/>
      <arg name="pname" type="const X509_NAME **" m68kreg="a2"/>
    </method>
    <method name="PEM_write_bio_PrivateKey_traditional" result="int">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="x" type="EVP_PKEY *" m68kreg="a1"/>
      <arg name="enc" type="const EVP_CIPHER *" m68kreg="a2"/>
      <arg name="kstr" type="unsigned char *" m68kreg="a3"/>
      <arg name="klen" type="int" m68kreg="d0"/>
      <arg name="cb" type="pem_password_cb *" m68kreg="d1"/>
      <arg name="u" type="void *" m68kreg="d2"/>
    </method>
    <method name="SSL_SESSION_get_protocol_version" result="int">
      <arg name="s" type="const SSL_SESSION *" m68kreg="a0"/>
    </method>
    <method name="SSL_is_dtls" result="int">
      <arg name="s" type="const SSL *" m68kreg="a0"/>
    </method>
    <method name="SSL_CTX_dane_set_flags" result="unsigned long">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
      <arg name="flags" type="unsigned long" m68kreg="d0"/>
    </method>
    <method name="SSL_CTX_dane_clear_flags" result="unsigned long">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
      <arg name="flags" type="unsigned long" m68kreg="d0"/>
    </method>
    <method name="SSL_dane_set_flags" result="unsigned long">
      <arg name="ssl" type="SSL *" m68kreg="a0"/>
      <arg name="flags" type="unsigned long" m68kreg="d0"/>
    </method>
    <method name="SSL_dane_clear_flags" result="unsigned long">
      <arg name="ssl" type="SSL *" m68kreg="a0"/>
      <arg name="flags" type="unsigned long" m68kreg="d0"/>
    </method>
    <method name="SSL_client_version" result="int">
      <arg name="s" type="const SSL *" m68kreg="a0"/>
    </method>
    <method name="X509_get_pathlen" result="long">
      <arg name="x" type="X509 *" m68kreg="a0"/>
    </method>
    <method name="X509_OBJECT_get_type" result="X509_LOOKUP_TYPE">
      <arg name="a" type="const X509_OBJECT *" m68kreg="a0"/>
    </method>
    <method name="X509_OBJECT_get0_X509_CRL" result="X509_CRL *">
      <arg name="a" type="X509_OBJECT *" m68kreg="a0"/>
    </method>
    <method name="X509_STORE_lock" result="int">
      <arg name="ctx" type="X509_STORE *" m68kreg="a0"/>
    </method>
    <method name="X509_STORE_unlock" result="int">
      <arg name="ctx" type="X509_STORE *" m68kreg="a0"/>
    </method>
    <method name="X509_STORE_get0_objects" result="STACK_OF(X509_OBJECT) *">
      <arg name="v" type="X509_STORE *" m68kreg="a0"/>
    </method>
    <method name="X509_STORE_get0_param" result="X509_VERIFY_PARAM *">
      <arg name="ctx" type="X509_STORE *" m68kreg="a0"/>
    </method>
    <method name="X509_STORE_set_verify" result="void">
      <arg name="ctx" type="X509_STORE *" m68kreg="a0"/>
      <arg name="verify" type="X509_STORE_CTX_verify_fn" m68kreg="a1"/>
    </method>
    <method name="X509_STORE_get_verify" result="X509_STORE_CTX_verify_fn">
      <arg name="ctx" type="X509_STORE *" m68kreg="a0"/>
    </method>
    <method name="X509_STORE_get_verify_cb" result="X509_STORE_CTX_verify_cb">
      <arg name="ctx" type="X509_STORE *" m68kreg="a0"/>
    </method>
    <method name="X509_STORE_set_get_issuer" result="void">
      <arg name="ctx" type="X509_STORE *" m68kreg="a0"/>
      <arg name="get_issuer" type="X509_STORE_CTX_get_issuer_fn" m68kreg="a1"/>
    </method>
    <method name="X509_STORE_get_get_issuer" result="X509_STORE_CTX_get_issuer_fn">
      <arg name="ctx" type="X509_STORE *" m68kreg="a0"/>
    </method>
    <method name="X509_STORE_set_check_issued" result="void">
      <arg name="ctx" type="X509_STORE *" m68kreg="a0"/>
      <arg name="check_issued" type="X509_STORE_CTX_check_issued_fn" m68kreg="a1"/>
    </method>
    <method name="X509_STORE_get_check_issued" result="X509_STORE_CTX_check_issued_fn">
      <arg name="ctx" type="X509_STORE *" m68kreg="a0"/>
    </method>
    <method name="X509_STORE_set_check_revocation" result="void">
      <arg name="ctx" type="X509_STORE *" m68kreg="a0"/>
      <arg name="check_revocation" type="X509_STORE_CTX_check_revocation_fn" m68kreg="a1"/>
    </method>
    <method name="X509_STORE_get_check_revocation" result="X509_STORE_CTX_check_revocation_fn">
      <arg name="ctx" type="X509_STORE *" m68kreg="a0"/>
    </method>
    <method name="X509_STORE_set_get_crl" result="void">
      <arg name="ctx" type="X509_STORE *" m68kreg="a0"/>
      <arg name="get_crl" type="X509_STORE_CTX_get_crl_fn" m68kreg="a1"/>
    </method>
    <method name="X509_STORE_get_get_crl" result="X509_STORE_CTX_get_crl_fn">
      <arg name="ctx" type="X509_STORE *" m68kreg="a0"/>
    </method>
    <method name="X509_STORE_set_check_crl" result="void">
      <arg name="ctx" type="X509_STORE *" m68kreg="a0"/>
      <arg name="check_crl" type="X509_STORE_CTX_check_crl_fn" m68kreg="a1"/>
    </method>
    <method name="X509_STORE_get_check_crl" result="X509_STORE_CTX_check_crl_fn">
      <arg name="ctx" type="X509_STORE *" m68kreg="a0"/>
    </method>
    <method name="X509_STORE_set_cert_crl" result="void">
      <arg name="ctx" type="X509_STORE *" m68kreg="a0"/>
      <arg name="cert_crl" type="X509_STORE_CTX_cert_crl_fn" m68kreg="a1"/>
    </method>
    <method name="X509_STORE_get_cert_crl" result="X509_STORE_CTX_cert_crl_fn">
      <arg name="ctx" type="X509_STORE *" m68kreg="a0"/>
    </method>
    <method name="X509_STORE_set_check_policy" result="void">
      <arg name="ctx" type="X509_STORE *" m68kreg="a0"/>
      <arg name="check_policy" type="X509_STORE_CTX_check_policy_fn" m68kreg="a1"/>
    </method>
    <method name="X509_STORE_get_check_policy" result="X509_STORE_CTX_check_policy_fn">
      <arg name="ctx" type="X509_STORE *" m68kreg="a0"/>
    </method>
    <method name="X509_STORE_set_lookup_certs" result="void">
      <arg name="ctx" type="X509_STORE *" m68kreg="a0"/>
      <arg name="lookup_certs" type="X509_STORE_CTX_lookup_certs_fn" m68kreg="a1"/>
    </method>
    <method name="X509_STORE_get_lookup_certs" result="X509_STORE_CTX_lookup_certs_fn">
      <arg name="ctx" type="X509_STORE *" m68kreg="a0"/>
    </method>
    <method name="X509_STORE_set_lookup_crls" result="void">
      <arg name="ctx" type="X509_STORE *" m68kreg="a0"/>
      <arg name="lookup_crls" type="X509_STORE_CTX_lookup_crls_fn" m68kreg="a1"/>
    </method>
    <method name="X509_STORE_get_lookup_crls" result="X509_STORE_CTX_lookup_crls_fn">
      <arg name="ctx" type="X509_STORE *" m68kreg="a0"/>
    </method>
    <method name="X509_STORE_set_cleanup" result="void">
      <arg name="ctx" type="X509_STORE *" m68kreg="a0"/>
      <arg name="cleanup" type="X509_STORE_CTX_cleanup_fn" m68kreg="a1"/>
    </method>
    <method name="X509_STORE_get_cleanup" result="X509_STORE_CTX_cleanup_fn">
      <arg name="ctx" type="X509_STORE *" m68kreg="a0"/>
    </method>
    <method name="X509_STORE_set_ex_data" result="int">
      <arg name="ctx" type="X509_STORE *" m68kreg="a0"/>
      <arg name="idx" type="int" m68kreg="d0"/>
      <arg name="data" type="void *" m68kreg="a1"/>
    </method>
    <method name="X509_STORE_get_ex_data" result="void *">
      <arg name="ctx" type="X509_STORE *" m68kreg="a0"/>
      <arg name="idx" type="int" m68kreg="d0"/>
    </method>
    <method name="X509_STORE_CTX_get_get_issuer" result="X509_STORE_CTX_get_issuer_fn">
      <arg name="ctx" type="X509_STORE_CTX *" m68kreg="a0"/>
    </method>
    <method name="X509_STORE_CTX_get_check_issued" result="X509_STORE_CTX_check_issued_fn">
      <arg name="ctx" type="X509_STORE_CTX *" m68kreg="a0"/>
    </method>
    <method name="X509_STORE_CTX_get_check_revocation" result="X509_STORE_CTX_check_revocation_fn">
      <arg name="ctx" type="X509_STORE_CTX *" m68kreg="a0"/>
    </method>
    <method name="X509_STORE_CTX_get_get_crl" result="X509_STORE_CTX_get_crl_fn">
      <arg name="ctx" type="X509_STORE_CTX *" m68kreg="a0"/>
    </method>
    <method name="X509_STORE_CTX_get_check_crl" result="X509_STORE_CTX_check_crl_fn">
      <arg name="ctx" type="X509_STORE_CTX *" m68kreg="a0"/>
    </method>
    <method name="X509_STORE_CTX_get_cert_crl" result="X509_STORE_CTX_cert_crl_fn">
      <arg name="ctx" type="X509_STORE_CTX *" m68kreg="a0"/>
    </method>
    <method name="X509_STORE_CTX_get_check_policy" result="X509_STORE_CTX_check_policy_fn">
      <arg name="ctx" type="X509_STORE_CTX *" m68kreg="a0"/>
    </method>
    <method name="X509_STORE_CTX_get_lookup_certs" result="X509_STORE_CTX_lookup_certs_fn">
      <arg name="ctx" type="X509_STORE_CTX *" m68kreg="a0"/>
    </method>
    <method name="X509_STORE_CTX_get_lookup_crls" result="X509_STORE_CTX_lookup_crls_fn">
      <arg name="ctx" type="X509_STORE_CTX *" m68kreg="a0"/>
    </method>
    <method name="X509_STORE_CTX_get_cleanup" result="X509_STORE_CTX_cleanup_fn">
      <arg name="ctx" type="X509_STORE_CTX *" m68kreg="a0"/>
    </method>
    <method name="X509_STORE_CTX_set_error_depth" result="void">
      <arg name="ctx" type="X509_STORE_CTX *" m68kreg="a0"/>
      <arg name="depth" type="int" m68kreg="d0"/>
    </method>
    <method name="X509_STORE_CTX_set_current_cert" result="void">
      <arg name="ctx" type="X509_STORE_CTX *" m68kreg="a0"/>
      <arg name="x" type="X509 *" m68kreg="a1"/>
    </method>
    <method name="NAME_CONSTRAINTS_check_CN" result="int">
      <arg name="x" type="X509 *" m68kreg="a0"/>
      <arg name="nc" type="NAME_CONSTRAINTS *" m68kreg="a1"/>
    </method>
    <method name="X509_set_proxy_flag" result="void">
      <arg name="x" type="X509 *" m68kreg="a0"/>
    </method>
    <method name="X509_set_proxy_pathlen" result="void">
      <arg name="x" type="X509 *" m68kreg="a0"/>
      <arg name="l" type="long" m68kreg="d0"/>
    </method>
    <method name="X509_get_proxy_pathlen" result="long">
      <arg name="x" type="X509 *" m68kreg="a0"/>
    </method>
    <method name="ASIdentifierChoice_new" result="ASIdentifierChoice *">
    </method>
    <method name="ASIdentifierChoice_free" result="void">
      <arg name="a" type="ASIdentifierChoice *" m68kreg="a0"/>
    </method>
    <method name="d2i_ASIdentifierChoice" result="ASIdentifierChoice *">
      <arg name="a" type="ASIdentifierChoice **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_ASIdentifierChoice" result="int">
      <arg name="a" type="ASIdentifierChoice *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="ASIdentifierChoice_it" result="const ASN1_ITEM *">
    </method>
    <method name="ASIdentifiers_new" result="ASIdentifiers *">
    </method>
    <method name="ASIdentifiers_free" result="void">
      <arg name="a" type="ASIdentifiers *" m68kreg="a0"/>
    </method>
    <method name="d2i_ASIdentifiers" result="ASIdentifiers *">
      <arg name="a" type="ASIdentifiers **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_ASIdentifiers" result="int">
      <arg name="a" type="ASIdentifiers *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="ASIdentifiers_it" result="const ASN1_ITEM *">
    </method>
    <method name="ASIdOrRange_new" result="ASIdOrRange *">
    </method>
    <method name="ASIdOrRange_free" result="void">
      <arg name="a" type="ASIdOrRange *" m68kreg="a0"/>
    </method>
    <method name="d2i_ASIdOrRange" result="ASIdOrRange *">
      <arg name="a" type="ASIdOrRange **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_ASIdOrRange" result="int">
      <arg name="a" type="ASIdOrRange *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="ASIdOrRange_it" result="const ASN1_ITEM *">
    </method>
    <method name="ASRange_new" result="ASRange *">
    </method>
    <method name="ASRange_free" result="void">
      <arg name="a" type="ASRange *" m68kreg="a0"/>
    </method>
    <method name="d2i_ASRange" result="ASRange *">
      <arg name="a" type="ASRange **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_ASRange" result="int">
      <arg name="a" type="ASRange *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="ASRange_it" result="const ASN1_ITEM *">
    </method>
    <method name="IPAddressChoice_new" result="IPAddressChoice *">
    </method>
    <method name="IPAddressChoice_free" result="void">
      <arg name="a" type="IPAddressChoice *" m68kreg="a0"/>
    </method>
    <method name="d2i_IPAddressChoice" result="IPAddressChoice *">
      <arg name="a" type="IPAddressChoice **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_IPAddressChoice" result="int">
      <arg name="a" type="IPAddressChoice *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="IPAddressChoice_it" result="const ASN1_ITEM *">
    </method>
    <method name="IPAddressFamily_new" result="IPAddressFamily *">
    </method>
    <method name="IPAddressFamily_free" result="void">
      <arg name="a" type="IPAddressFamily *" m68kreg="a0"/>
    </method>
    <method name="d2i_IPAddressFamily" result="IPAddressFamily *">
      <arg name="a" type="IPAddressFamily **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_IPAddressFamily" result="int">
      <arg name="a" type="IPAddressFamily *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="IPAddressFamily_it" result="const ASN1_ITEM *">
    </method>
    <method name="IPAddressOrRange_new" result="IPAddressOrRange *">
    </method>
    <method name="IPAddressOrRange_free" result="void">
      <arg name="a" type="IPAddressOrRange *" m68kreg="a0"/>
    </method>
    <method name="d2i_IPAddressOrRange" result="IPAddressOrRange *">
      <arg name="a" type="IPAddressOrRange **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_IPAddressOrRange" result="int">
      <arg name="a" type="IPAddressOrRange *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="IPAddressOrRange_it" result="const ASN1_ITEM *">
    </method>
    <method name="ASN1_STRING_get0_data" result="const unsigned char *">
      <arg name="x" type="const ASN1_STRING *" m68kreg="a0"/>
    </method>
    <method name="X509_get0_notBefore" result="const ASN1_TIME *">
      <arg name="x" type="const X509 *" m68kreg="a0"/>
    </method>
    <method name="X509_get0_notAfter" result="const ASN1_TIME *">
      <arg name="x" type="const X509 *" m68kreg="a0"/>
    </method>
    <method name="X509_CRL_get0_lastUpdate" result="const ASN1_TIME *">
      <arg name="crl" type="const X509_CRL *" m68kreg="a0"/>
    </method>
    <method name="X509_CRL_get0_nextUpdate" result="const ASN1_TIME *">
      <arg name="crl" type="const X509_CRL *" m68kreg="a0"/>
    </method>
    <method name="OPENSSL_uni2utf8" result="char *">
      <arg name="uni" type="const unsigned char *" m68kreg="a0"/>
      <arg name="unilen" type="int" m68kreg="d0"/>
    </method>
    <method name="CT_POLICY_EVAL_CTX_set_shared_CTLOG_STORE" result="void">
      <arg name="ctx" type="CT_POLICY_EVAL_CTX *" m68kreg="a0"/>
      <arg name="log_store" type="CTLOG_STORE *" m68kreg="a1"/>
    </method>
    <method name="CT_POLICY_EVAL_CTX_set1_cert" result="int">
      <arg name="ctx" type="CT_POLICY_EVAL_CTX *" m68kreg="a0"/>
      <arg name="cert" type="X509 *" m68kreg="a1"/>
    </method>
    <method name="CT_POLICY_EVAL_CTX_set1_issuer" result="int">
      <arg name="ctx" type="CT_POLICY_EVAL_CTX *" m68kreg="a0"/>
      <arg name="issuer" type="X509 *" m68kreg="a1"/>
    </method>
    <method name="ECPARAMETERS_new" result="ECPARAMETERS *">
    </method>
    <method name="ECPARAMETERS_free" result="void">
      <arg name="a" type="ECPARAMETERS *" m68kreg="a0"/>
    </method>
    <method name="BIO_get_new_index" result="int">
    </method>
    <method name="EVP_PKEY_set1_tls_encodedpoint" result="int">
      <arg name="pkey" type="EVP_PKEY *" m68kreg="a0"/>
      <arg name="pt" type="const unsigned char *" m68kreg="a1"/>
      <arg name="ptlen" type="size_t" m68kreg="d0"/>
    </method>
    <method name="EVP_PKEY_get1_tls_encodedpoint" result="size_t">
      <arg name="pkey" type="EVP_PKEY *" m68kreg="a0"/>
      <arg name="ppt" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="OCSP_RESPID_set_by_name" result="int">
      <arg name="respid" type="OCSP_RESPID *" m68kreg="a0"/>
      <arg name="cert" type="X509 *" m68kreg="a1"/>
    </method>
    <method name="OCSP_RESPID_set_by_key" result="int">
      <arg name="respid" type="OCSP_RESPID *" m68kreg="a0"/>
      <arg name="cert" type="X509 *" m68kreg="a1"/>
    </method>
    <method name="OCSP_RESPID_match" result="int">
      <arg name="respid" type="OCSP_RESPID *" m68kreg="a0"/>
      <arg name="cert" type="X509 *" m68kreg="a1"/>
    </method>
    <method name="PKCS12_add_friendlyname_utf8" result="int">
      <arg name="bag" type="PKCS12_SAFEBAG *" m68kreg="a0"/>
      <arg name="name" type="const char *" m68kreg="a1"/>
      <arg name="namelen" type="int" m68kreg="d0"/>
    </method>
    <method name="PKCS12_key_gen_utf8" result="int">
      <arg name="pass" type="const char *" m68kreg="a0"/>
      <arg name="passlen" type="int" m68kreg="d0"/>
      <arg name="salt" type="unsigned char *" m68kreg="a1"/>
      <arg name="saltlen" type="int" m68kreg="d1"/>
      <arg name="id" type="int" m68kreg="d2"/>
      <arg name="iter" type="int" m68kreg="d3"/>
      <arg name="n" type="int" m68kreg="d4"/>
      <arg name="out" type="unsigned char *" m68kreg="a2"/>
      <arg name="md_type" type="const EVP_MD *" m68kreg="a3"/>
    </method>
    <method name="OPENSSL_utf82uni" result="unsigned char *">
      <arg name="asc" type="const char *" m68kreg="a0"/>
      <arg name="asclen" type="int" m68kreg="d0"/>
      <arg name="uni" type="unsigned char **" m68kreg="a1"/>
      <arg name="unilen" type="int *" m68kreg="a2"/>
    </method>
    <method name="SSL_SESSION_get0_cipher" result="const SSL_CIPHER *">
      <arg name="s" type="const SSL_SESSION *" m68kreg="a0"/>
    </method>
    <method name="SSL_SESSION_set1_id" result="int">
      <arg name="s" type="SSL_SESSION *" m68kreg="a0"/>
      <arg name="sid" type="const unsigned char *" m68kreg="a1"/>
      <arg name="sid_len" type="unsigned int" m68kreg="d0"/>
    </method>
    <method name="SSL_SESSION_get0_id_context" result="const unsigned char *">
      <arg name="s" type="const SSL_SESSION *" m68kreg="a0"/>
      <arg name="len" type="unsigned int *" m68kreg="a1"/>
    </method>
    <method name="TS_STATUS_INFO_get0_text" result="const STACK_OF(ASN1_UTF8STRING) *">
      <arg name="a" type="const TS_STATUS_INFO *" m68kreg="a0"/>
    </method>
    <method name="X509_SIG_getm" result="void">
      <arg name="sig" type="X509_SIG *" m68kreg="a0"/>
      <arg name="palg" type="X509_ALGOR **" m68kreg="a1"/>
      <arg name="pdigest" type="ASN1_OCTET_STRING **" m68kreg="a2"/>
    </method>
    <method name="X509_get0_serialNumber" result="const ASN1_INTEGER *">
      <arg name="x" type="const X509 *" m68kreg="a0"/>
    </method>

    <!-- AmiSSL v4.0 - OpenSSL 1.1.0d -->
    <method name="CT_POLICY_EVAL_CTX_get_time" result="uint64_t">
      <arg name="ctx" type="const CT_POLICY_EVAL_CTX *" m68kreg="a0"/>
    </method>
    <method name="CT_POLICY_EVAL_CTX_set_time" result="void">
      <arg name="ctx" type="CT_POLICY_EVAL_CTX *" m68kreg="a0"/>
      <arg name="time_in_ms" type="uint64_t" m68kreg="d0-d1"/>
    </method>
    <method name="DH_check_params" result="int">
      <arg name="dh" type="const DH *" m68kreg="a0"/>
      <arg name="ret" type="int *" m68kreg="a1"/>
    </method>
    <method name="SSL_COMP_get0_name" result="const char *">
      <arg name="comp" type="const SSL_COMP *" m68kreg="a0"/>
    </method>
    <method name="SSL_COMP_get_id" result="int">
      <arg name="comp" type="const SSL_COMP *" m68kreg="a0"/>
    </method>
    <method name="X509_VERIFY_PARAM_get_time" result="time_t">
      <arg name="param" type="const X509_VERIFY_PARAM *" m68kreg="a0"/>
    </method>
    <method name="X509_VERIFY_PARAM_set_inh_flags" result="int">
      <arg name="param" type="X509_VERIFY_PARAM *" m68kreg="a0"/>
      <arg name="flags" type="uint32_t" m68kreg="d0"/>
    </method>
    <method name="X509_VERIFY_PARAM_get_inh_flags" result="uint32_t">
      <arg name="param" type="const X509_VERIFY_PARAM *" m68kreg="a0"/>
    </method>

    <!-- AmiSSL v4.2 - OpenSSL 1.1.0g -->
    <method name="CRYPTO_secure_clear_free" result="void">
      <arg name="ptr" type="void *" m68kreg="a0"/>
      <arg name="num" type="size_t" m68kreg="d0"/>
      <arg name="file" type="const char *" m68kreg="a1"/>
      <arg name="line" type="int" m68kreg="d1"/>
    </method>
    <method name="EVP_PKEY_set1_engine" result="int">
      <arg name="pkey" type="EVP_PKEY *" m68kreg="a0"/>
      <arg name="e" type="ENGINE *" m68kreg="a1"/>
    </method>

    <!-- AmiSSL v4.3 (fixed/changed for v4.4) - OpenSSL 1.1.1a -->
    <method name="SSL_get_client_ciphers" result="STACK_OF(SSL_CIPHER) *">
      <arg name="s" type="const SSL *" m68kreg="a0"/>
    </method>
    <method name="SSL_CIPHER_standard_name" result="const char *">
      <arg name="c" type="const SSL_CIPHER *" m68kreg="a0"/>
    </method>
    <method name="SSL_get0_verified_chain" result="STACK_OF(X509) *">
      <arg name="s" type="const SSL *" m68kreg="a0"/>
    </method>
    <method name="SSL_COMP_set0_compression_methods" result="STACK_OF(SSL_COMP) *">
      <arg name="meths" type="STACK_OF(SSL_COMP) *" m68kreg="a0"/>
    </method>
    <method name="SSL_SESSION_print_fp" result="int" status="unimplemented">
      <arg name="fp" type="FILE *" m68kreg="a0"/>
      <arg name="ses" type="const SSL_SESSION *" m68kreg="a1"/>
    </method>
    <method name="SSL_CTX_set1_cert_store" result="void">
      <arg name="a" type="SSL_CTX *" m68kreg="a0"/>
      <arg name="b" type="X509_STORE *" m68kreg="a1"/>
    </method>
    <method name="DTLS_get_data_mtu" result="size_t">
      <arg name="s" type="const SSL *" m68kreg="a0"/>
    </method>
    <method name="SSL_read_ex" result="int">
      <arg name="ssl" type="SSL *" m68kreg="a0"/>
      <arg name="buf" type="void *" m68kreg="a1"/>
      <arg name="num" type="size_t" m68kreg="d0"/>
      <arg name="readbytes" type="size_t *" m68kreg="a2"/>
    </method>
    <method name="SSL_peek_ex" result="int">
      <arg name="ssl" type="SSL *" m68kreg="a0"/>
      <arg name="buf" type="void *" m68kreg="a1"/>
      <arg name="num" type="size_t" m68kreg="d0"/>
      <arg name="readbytes" type="size_t *" m68kreg="a2"/>
    </method>
    <method name="SSL_write_ex" result="int">
      <arg name="s" type="SSL *" m68kreg="a0"/>
      <arg name="buf" type="const void *" m68kreg="a1"/>
      <arg name="num" type="size_t" m68kreg="d0"/>
      <arg name="written" type="size_t *" m68kreg="a2"/>
    </method>
    <method name="SSL_CTX_set_keylog_callback" result="void">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
      <arg name="cb" type="SSL_CTX_keylog_cb_func" m68kreg="a1"/>
    </method>
    <method name="SSL_CTX_get_keylog_callback" result="SSL_CTX_keylog_cb_func">
      <arg name="ctx" type="const SSL_CTX *" m68kreg="a0"/>
    </method>
    <method name="SSL_get_peer_signature_type_nid" result="int">
      <arg name="s" type="const SSL *" m68kreg="a0"/>
      <arg name="pnid" type="int *" m68kreg="a1"/>
    </method>
    <method name="SSL_key_update" result="int">
      <arg name="s" type="SSL *" m68kreg="a0"/>
      <arg name="updatetype" type="int" m68kreg="d0"/>
    </method>
    <method name="SSL_get_key_update_type" result="int">
      <arg name="s" type="const SSL *" m68kreg="a0"/>
    </method>
    <method name="SSL_bytes_to_cipher_list" result="int">
      <arg name="s" type="SSL *" m68kreg="a0"/>
      <arg name="bytes" type="const unsigned char *" m68kreg="a1"/>
      <arg name="len" type="size_t" m68kreg="d0"/>
      <arg name="isv2format" type="int" m68kreg="d1"/>
      <arg name="sk" type="STACK_OF(SSL_CIPHER) **" m68kreg="a2"/>
      <arg name="scsvs" type="STACK_OF(SSL_CIPHER) **" m68kreg="a3"/>
    </method>
    <method name="SSL_client_hello_get0_compression_methods" result="size_t">
      <arg name="s" type="SSL *" m68kreg="a0"/>
      <arg name="out" type="const unsigned char **" m68kreg="a1"/>
    </method>
    <method name="SSL_client_hello_get0_ciphers" result="size_t">
      <arg name="s" type="SSL *" m68kreg="a0"/>
      <arg name="out" type="const unsigned char **" m68kreg="a1"/>
    </method>
    <method name="SSL_client_hello_get0_ext" result="int">
      <arg name="s" type="SSL *" m68kreg="a0"/>
      <arg name="type" type="unsigned int" m68kreg="d0"/>
      <arg name="out" type="const unsigned char **" m68kreg="a1"/>
      <arg name="outlen" type="size_t *" m68kreg="a2"/>
    </method>
    <method name="SSL_client_hello_get0_session_id" result="size_t">
      <arg name="s" type="SSL *" m68kreg="a0"/>
      <arg name="out" type="const unsigned char **" m68kreg="a1"/>
    </method>
    <method name="SSL_client_hello_get0_random" result="size_t">
      <arg name="s" type="SSL *" m68kreg="a0"/>
      <arg name="out" type="const unsigned char **" m68kreg="a1"/>
    </method>
    <method name="SSL_CTX_set_client_hello_cb" result="void">
      <arg name="c" type="SSL_CTX *" m68kreg="a0"/>
      <arg name="cb" type="SSL_client_hello_cb_fn" m68kreg="a1"/>
      <arg name="arg" type="void *" m68kreg="a2"/>
    </method>
    <method name="SSL_client_hello_get0_legacy_version" result="unsigned int">
      <arg name="s" type="SSL *" m68kreg="a0"/>
    </method>
    <method name="SSL_client_hello_isv2" result="int">
      <arg name="s" type="SSL *" m68kreg="a0"/>
    </method>
    <method name="SSL_set_max_early_data" result="int">
      <arg name="s" type="SSL *" m68kreg="a0"/>
      <arg name="max_early_data" type="uint32_t" m68kreg="d0"/>
    </method>
    <method name="SSL_CTX_set_max_early_data" result="int">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
      <arg name="max_early_data" type="uint32_t" m68kreg="d0"/>
    </method>
    <method name="SSL_get_max_early_data" result="uint32_t">
      <arg name="s" type="const SSL *" m68kreg="a0"/>
    </method>
    <method name="SSL_CTX_get_max_early_data" result="uint32_t">
      <arg name="ctx" type="const SSL_CTX *" m68kreg="a0"/>
    </method>
    <method name="SSL_write_early_data" result="int">
      <arg name="s" type="SSL *" m68kreg="a0"/>
      <arg name="buf" type="const void *" m68kreg="a1"/>
      <arg name="num" type="size_t" m68kreg="d0"/>
      <arg name="written" type="size_t *" m68kreg="a2"/>
    </method>
    <method name="SSL_read_early_data" result="int">
      <arg name="s" type="SSL *" m68kreg="a0"/>
      <arg name="buf" type="void *" m68kreg="a1"/>
      <arg name="num" type="size_t" m68kreg="d0"/>
      <arg name="readbytes" type="size_t *" m68kreg="a2"/>
    </method>
    <method name="SSL_get_early_data_status" result="int">
      <arg name="s" type="const SSL *" m68kreg="a0"/>
    </method>
    <method name="SSL_SESSION_get_max_early_data" result="uint32_t">
      <arg name="s" type="const SSL_SESSION *" m68kreg="a0"/>
    </method>
    <method name="SSL_add1_to_CA_list" result="int">
      <arg name="ssl" type="SSL *" m68kreg="a0"/>
      <arg name="x" type="const X509 *" m68kreg="a1"/>
    </method>
    <method name="SSL_set0_CA_list" result="void">
      <arg name="s" type="SSL *" m68kreg="a0"/>
      <arg name="name_list" type="STACK_OF(X509_NAME) *" m68kreg="a1"/>
    </method>
    <method name="SSL_CTX_set0_CA_list" result="void">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
      <arg name="name_list" type="STACK_OF(X509_NAME) *" m68kreg="a1"/>
    </method>
    <method name="SSL_get0_CA_list" result="const STACK_OF(X509_NAME) *">
      <arg name="s" type="const SSL *" m68kreg="a0"/>
    </method>
    <method name="SSL_get0_peer_CA_list" result="const STACK_OF(X509_NAME) *">
      <arg name="s" type="const SSL *" m68kreg="a0"/>
    </method>
    <method name="SSL_CTX_add1_to_CA_list" result="int">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
      <arg name="x" type="const X509 *" m68kreg="a1"/>
    </method>
    <method name="SSL_CTX_get0_CA_list" result="const STACK_OF(X509_NAME) *">
      <arg name="ctx" type="const SSL_CTX *" m68kreg="a0"/>
    </method>
    <method name="SSL_CTX_add_custom_ext" result="int">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
      <arg name="ext_type" type="unsigned int" m68kreg="d0"/>
      <arg name="context" type="unsigned int" m68kreg="d1"/>
      <arg name="add_cb" type="SSL_custom_ext_add_cb_ex" m68kreg="a1"/>
      <arg name="free_cb" type="SSL_custom_ext_free_cb_ex" m68kreg="a2"/>
      <arg name="add_arg" type="void *" m68kreg="a3"/>
      <arg name="parse_cb" type="SSL_custom_ext_parse_cb_ex" m68kreg="d2"/>
      <arg name="parse_arg" type="void *" m68kreg="d3"/>
    </method>
    <method name="SSL_SESSION_is_resumable" result="int">
      <arg name="s" type="const SSL_SESSION *" m68kreg="a0"/>
    </method>
    <method name="SSL_CTX_set_record_padding_callback" result="void">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
      <arg name="cb" type="size_t (*)(SSL *ssl, int type, size_t len, void *arg)" m68kreg="a1"/>
    </method>
    <method name="SSL_set_record_padding_callback" result="void">
      <arg name="ssl" type="SSL *" m68kreg="a0"/>
      <arg name="cb" type="size_t (*)(SSL *ssl, int type, size_t len, void *arg)" m68kreg="a1"/>
    </method>
    <method name="SSL_CTX_set_block_padding" result="int">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
      <arg name="block_size" type="size_t" m68kreg="d0"/>
    </method>
    <method name="SSL_CTX_get_record_padding_callback_arg" result="void *">
      <arg name="ctx" type="const SSL_CTX *" m68kreg="a0"/>
    </method>
    <method name="SSL_get_record_padding_callback_arg" result="void *">
      <arg name="ssl" type="const SSL *" m68kreg="a0"/>
    </method>
    <method name="SSL_set_block_padding" result="int">
      <arg name="ssl" type="SSL *" m68kreg="a0"/>
      <arg name="block_size" type="size_t" m68kreg="d0"/>
    </method>
    <method name="SSL_set_record_padding_callback_arg" result="void">
      <arg name="ssl" type="SSL *" m68kreg="a0"/>
      <arg name="arg" type="void *" m68kreg="a1"/>
    </method>
    <method name="SSL_CTX_set_record_padding_callback_arg" result="void">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
      <arg name="arg" type="void *" m68kreg="a1"/>
    </method>
    <method name="SSL_CTX_use_serverinfo_ex" result="int">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
      <arg name="version" type="unsigned int" m68kreg="d0"/>
      <arg name="serverinfo" type="const unsigned char *" m68kreg="a1"/>
      <arg name="serverinfo_length" type="size_t" m68kreg="d1"/>
    </method>
    <method name="SSL_client_hello_get1_extensions_present" result="int">
      <arg name="s" type="SSL *" m68kreg="a0"/>
      <arg name="out" type="int **" m68kreg="a1"/>
      <arg name="outlen" type="size_t *" m68kreg="a2"/>
    </method>
    <method name="SSL_set_psk_find_session_callback" result="void">
      <arg name="s" type="SSL *" m68kreg="a0"/>
      <arg name="cb" type="SSL_psk_find_session_cb_func" m68kreg="a1"/>
    </method>
    <method name="SSL_set_psk_use_session_callback" result="void">
      <arg name="s" type="SSL *" m68kreg="a0"/>
      <arg name="cb" type="SSL_psk_use_session_cb_func" m68kreg="a1"/>
    </method>
    <method name="SSL_CTX_set_psk_use_session_callback" result="void">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
      <arg name="cb" type="SSL_psk_use_session_cb_func" m68kreg="a1"/>
    </method>
    <method name="SSL_CTX_set_psk_find_session_callback" result="void">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
      <arg name="cb" type="SSL_psk_find_session_cb_func" m68kreg="a1"/>
    </method>
    <method name="SSL_CIPHER_get_handshake_digest" result="const EVP_MD *">
      <arg name="c" type="const SSL_CIPHER *" m68kreg="a0"/>
    </method>
    <method name="SSL_SESSION_set1_master_key" result="int">
      <arg name="sess" type="SSL_SESSION *" m68kreg="a0"/>
      <arg name="in" type="const unsigned char *" m68kreg="a1"/>
      <arg name="len" type="size_t" m68kreg="d0"/>
    </method>
    <method name="SSL_SESSION_set_cipher" result="int">
      <arg name="s" type="SSL_SESSION *" m68kreg="a0"/>
      <arg name="cipher" type="const SSL_CIPHER *" m68kreg="a1"/>
    </method>
    <method name="SSL_SESSION_set_protocol_version" result="int">
      <arg name="s" type="SSL_SESSION *" m68kreg="a0"/>
      <arg name="version" type="int" m68kreg="d0"/>
    </method>
    <method name="OPENSSL_cipher_name" result="const char *">
      <arg name="rfc_name" type="const char *" m68kreg="a0"/>
    </method>
    <method name="SSL_alloc_buffers" result="int">
      <arg name="ssl" type="SSL *" m68kreg="a0"/>
    </method>
    <method name="SSL_free_buffers" result="int">
      <arg name="ssl" type="SSL *" m68kreg="a0"/>
    </method>
    <method name="SSL_SESSION_dup" result="SSL_SESSION *">
      <arg name="src" type="SSL_SESSION *" m68kreg="a0"/>
    </method>
    <method name="SSL_get_pending_cipher" result="const SSL_CIPHER *">
      <arg name="s" type="const SSL *" m68kreg="a0"/>
    </method>
    <method name="SSL_CIPHER_get_protocol_id" result="uint16_t">
      <arg name="c" type="const SSL_CIPHER *" m68kreg="a0"/>
    </method>
    <method name="SSL_SESSION_set_max_early_data" result="int">
      <arg name="s" type="SSL_SESSION *" m68kreg="a0"/>
      <arg name="max_early_data" type="uint32_t" m68kreg="d0"/>
    </method>
    <method name="SSL_SESSION_set1_alpn_selected" result="int">
      <arg name="s" type="SSL_SESSION *" m68kreg="a0"/>
      <arg name="alpn" type="const unsigned char *" m68kreg="a1"/>
      <arg name="len" type="size_t" m68kreg="d0"/>
    </method>
    <method name="SSL_SESSION_set1_hostname" result="int">
      <arg name="s" type="SSL_SESSION *" m68kreg="a0"/>
      <arg name="hostname" type="const char *" m68kreg="a1"/>
    </method>
    <method name="SSL_SESSION_get0_alpn_selected" result="void">
      <arg name="s" type="const SSL_SESSION *" m68kreg="a0"/>
      <arg name="alpn" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="size_t *" m68kreg="a2"/>
    </method>
    <method name="DTLS_set_timer_cb" result="void">
      <arg name="s" type="SSL *" m68kreg="a0"/>
      <arg name="cb" type="DTLS_timer_cb" m68kreg="a1"/>
    </method>
    <method name="SSL_CTX_set_tlsext_max_fragment_length" result="int">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
      <arg name="mode" type="uint8_t" m68kreg="d0"/>
    </method>
    <method name="SSL_set_tlsext_max_fragment_length" result="int">
      <arg name="ssl" type="SSL *" m68kreg="a0"/>
      <arg name="mode" type="uint8_t" m68kreg="d0"/>
    </method>
    <method name="SSL_SESSION_get_max_fragment_length" result="uint8_t">
      <arg name="sess" type="const SSL_SESSION *" m68kreg="a0"/>
    </method>
    <method name="SSL_stateless" result="int">
      <arg name="s" type="SSL *" m68kreg="a0"/>
    </method>
    <method name="SSL_verify_client_post_handshake" result="int">
      <arg name="s" type="SSL *" m68kreg="a0"/>
    </method>
    <method name="SSL_set_post_handshake_auth" result="void">
      <arg name="s" type="SSL *" m68kreg="a0"/>
      <arg name="val" type="int" m68kreg="d0"/>
    </method>
    <method name="SSL_export_keying_material_early" result="int">
      <arg name="s" type="SSL *" m68kreg="a0"/>
      <arg name="out" type="unsigned char *" m68kreg="a1"/>
      <arg name="olen" type="size_t" m68kreg="d0"/>
      <arg name="label" type="const char *" m68kreg="a2"/>
      <arg name="llen" type="size_t" m68kreg="d1"/>
      <arg name="context" type="const unsigned char *" m68kreg="a3"/>
      <arg name="contextlen" type="size_t" m68kreg="d2"/>
    </method>
    <method name="SSL_CTX_use_cert_and_key" result="int">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
      <arg name="x509" type="X509 *" m68kreg="a1"/>
      <arg name="privatekey" type="EVP_PKEY *" m68kreg="a2"/>
      <arg name="chain" type="STACK_OF(X509) *" m68kreg="a3"/>
      <arg name="override" type="int" m68kreg="d0"/>
    </method>
    <method name="SSL_use_cert_and_key" result="int">
      <arg name="ssl" type="SSL *" m68kreg="a0"/>
      <arg name="x509" type="X509 *" m68kreg="a1"/>
      <arg name="privatekey" type="EVP_PKEY *" m68kreg="a2"/>
      <arg name="chain" type="STACK_OF(X509) *" m68kreg="a3"/>
      <arg name="override" type="int" m68kreg="d0"/>
    </method>
    <method name="SSL_SESSION_get0_ticket_appdata" result="int">
      <arg name="ss" type="SSL_SESSION *" m68kreg="a0"/>
      <arg name="data" type="void **" m68kreg="a1"/>
      <arg name="len" type="size_t *" m68kreg="a2"/>
    </method>
    <method name="SSL_SESSION_set1_ticket_appdata" result="int">
      <arg name="ss" type="SSL_SESSION *" m68kreg="a0"/>
      <arg name="data" type="const void *" m68kreg="a1"/>
      <arg name="len" type="size_t" m68kreg="d0"/>
    </method>
    <method name="SSL_CTX_set_session_ticket_cb" result="int">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
      <arg name="gen_cb" type="SSL_CTX_generate_session_ticket_fn" m68kreg="a1"/>
      <arg name="dec_cb" type="SSL_CTX_decrypt_session_ticket_fn" m68kreg="a2"/>
      <arg name="arg" type="void *" m68kreg="a3"/>
    </method>
    <method name="SSL_CTX_set_stateless_cookie_generate_cb" result="void">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
      <arg name="gen_stateless_cookie_cb" type="int (*)(SSL *ssl, unsigned char *cookie, size_t *cookie_len)" m68kreg="a1"/>
    </method>
    <method name="SSL_CTX_set_stateless_cookie_verify_cb" result="void">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
      <arg name="verify_stateless_cookie_cb" type="int (*)(SSL *ssl, const unsigned char *cookie, size_t cookie_len)" m68kreg="a1"/>
    </method>
    <method name="SSL_CTX_set_ciphersuites" result="int">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
      <arg name="str" type="const char *" m68kreg="a1"/>
    </method>
    <method name="SSL_set_ciphersuites" result="int">
      <arg name="s" type="SSL *" m68kreg="a0"/>
      <arg name="str" type="const char *" m68kreg="a1"/>
    </method>
    <method name="SSL_set_num_tickets" result="int">
      <arg name="s" type="SSL *" m68kreg="a0"/>
      <arg name="num_tickets" type="size_t" m68kreg="d0"/>
    </method>
    <method name="SSL_CTX_get_num_tickets" result="size_t">
      <arg name="ctx" type="const SSL_CTX *" m68kreg="a0"/>
    </method>
    <method name="SSL_get_num_tickets" result="size_t">
      <arg name="s" type="const SSL *" m68kreg="a0"/>
    </method>
    <method name="SSL_CTX_set_num_tickets" result="int">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
      <arg name="num_tickets" type="size_t" m68kreg="d0"/>
    </method>
    <method name="SSL_CTX_set_allow_early_data_cb" result="void">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
      <arg name="cb" type="SSL_allow_early_data_cb_fn" m68kreg="a1"/>
      <arg name="arg" type="void *" m68kreg="a2"/>
    </method>
    <method name="SSL_set_allow_early_data_cb" result="void">
      <arg name="s" type="SSL *" m68kreg="a0"/>
      <arg name="cb" type="SSL_allow_early_data_cb_fn" m68kreg="a1"/>
      <arg name="arg" type="void *" m68kreg="a2"/>
    </method>
    <method name="SSL_set_recv_max_early_data" result="int">
      <arg name="s" type="SSL *" m68kreg="a0"/>
      <arg name="recv_max_early_data" type="uint32_t" m68kreg="d0"/>
    </method>
    <method name="SSL_get_recv_max_early_data" result="uint32_t">
      <arg name="s" type="const SSL *" m68kreg="a0"/>
    </method>
    <method name="SSL_CTX_get_recv_max_early_data" result="uint32_t">
      <arg name="ctx" type="const SSL_CTX *" m68kreg="a0"/>
    </method>
    <method name="SSL_CTX_set_recv_max_early_data" result="int">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
      <arg name="recv_max_early_data" type="uint32_t" m68kreg="d0"/>
    </method>
    <method name="SSL_CTX_set_post_handshake_auth" result="void">
      <arg name="ctx" type="SSL_CTX *" m68kreg="a0"/>
      <arg name="val" type="int" m68kreg="d0"/>
    </method>
    <method name="SSL_get_signature_type_nid" result="int">
      <arg name="s" type="const SSL *" m68kreg="a0"/>
      <arg name="pnid" type="int *" m68kreg="a1"/>
    </method>
    <method name="IPAddressRange_free" result="void">
      <arg name="a" type="IPAddressRange *" m68kreg="a0"/>
    </method>
    <method name="TLS_FEATURE_new" result="TLS_FEATURE *">
    </method>
    <method name="PEM_write" result="int" status="unimplemented">
      <arg name="fp" type="FILE *" m68kreg="a0"/>
      <arg name="name" type="const char *" m68kreg="a1"/>
      <arg name="hdr" type="const char *" m68kreg="a2"/>
      <arg name="data" type="const unsigned char *" m68kreg="a3"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="BIO_f_linebuffer" result="const BIO_METHOD *">
    </method>
    <method name="PEM_read" result="int" status="unimplemented">
      <arg name="fp" type="FILE *" m68kreg="a0"/>
      <arg name="name" type="char **" m68kreg="a1"/>
      <arg name="header" type="char **" m68kreg="a2"/>
      <arg name="data" type="unsigned char **" m68kreg="a3"/>
      <arg name="len" type="long *" m68kreg="d0"/>
    </method>
    <method name="IPAddressRange_new" result="IPAddressRange *">
    </method>
    <method name="IPAddressRange_it" result="const ASN1_ITEM *">
    </method>
    <method name="PEM_X509_INFO_read" result="STACK_OF(X509_INFO) *" status="unimplemented">
      <arg name="fp" type="FILE *" m68kreg="a0"/>
      <arg name="sk" type="STACK_OF(X509_INFO) *" m68kreg="a1"/>
      <arg name="cb" type="pem_password_cb *" m68kreg="a2"/>
      <arg name="u" type="void *" m68kreg="a3"/>
    </method>
    <method name="d2i_IPAddressRange" result="IPAddressRange *">
      <arg name="a" type="IPAddressRange **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="PEM_ASN1_write" result="int" status="unimplemented">
      <arg name="i2d" type="i2d_of_void *" m68kreg="a0"/>
      <arg name="name" type="const char *" m68kreg="a1"/>
      <arg name="fp" type="FILE *" m68kreg="a2"/>
      <arg name="x" type="void *" m68kreg="a3"/>
      <arg name="enc" type="const EVP_CIPHER *" m68kreg="d0"/>
      <arg name="kstr" type="unsigned char *" m68kreg="d1"/>
      <arg name="klen" type="int" m68kreg="d2"/>
      <arg name="callback" type="pem_password_cb *" m68kreg="d3"/>
      <arg name="u" type="void *" m68kreg="d4"/>
    </method>
    <method name="PEM_ASN1_read" result="void *" status="unimplemented">
      <arg name="d2i" type="d2i_of_void *" m68kreg="a0"/>
      <arg name="name" type="const char *" m68kreg="a1"/>
      <arg name="fp" type="FILE *" m68kreg="a2"/>
      <arg name="x" type="void **" m68kreg="a3"/>
      <arg name="cb" type="pem_password_cb *" m68kreg="d0"/>
      <arg name="u" type="void *" m68kreg="d1"/>
    </method>
    <method name="TLS_FEATURE_free" result="void">
      <arg name="a" type="TLS_FEATURE *" m68kreg="a0"/>
    </method>
    <method name="i2d_RSA_OAEP_PARAMS" result="int">
      <arg name="a" type="RSA_OAEP_PARAMS *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="PEM_write_DHxparams" result="int" status="unimplemented">
      <arg name="fp" type="FILE *" m68kreg="a0"/>
      <arg name="x" type="const DH *" m68kreg="a1"/>
    </method>
    <method name="i2d_IPAddressRange" result="int">
      <arg name="a" type="IPAddressRange *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="X509_OBJECT_new" result="X509_OBJECT *">
    </method>
    <method name="PKCS12_get_attr" result="ASN1_TYPE *">
      <arg name="bag" type="const PKCS12_SAFEBAG *" m68kreg="a0"/>
      <arg name="attr_nid" type="int" m68kreg="d0"/>
    </method>
    <method name="ECPKPARAMETERS_free" result="void">
      <arg name="a" type="ECPKPARAMETERS *" m68kreg="a0"/>
    </method>
    <method name="ECPKPARAMETERS_new" result="ECPKPARAMETERS *">
    </method>
    <method name="ASN1_ITEM_lookup" result="const ASN1_ITEM *">
      <arg name="name" type="const char *" m68kreg="a0"/>
    </method>
    <method name="ASN1_ITEM_get" result="const ASN1_ITEM *">
      <arg name="i" type="size_t" m68kreg="d0"/>
    </method>
    <method name="BIO_read_ex" result="int">
      <arg name="b" type="BIO *" m68kreg="a0"/>
      <arg name="data" type="void *" m68kreg="a1"/>
      <arg name="dlen" type="size_t" m68kreg="d0"/>
      <arg name="readbytes" type="size_t *" m68kreg="a2"/>
    </method>
    <method name="BIO_set_callback_ex" result="void">
      <arg name="b" type="BIO *" m68kreg="a0"/>
      <arg name="callback" type="BIO_callback_fn_ex" m68kreg="a1"/>
    </method>
    <method name="BIO_get_callback_ex" result="BIO_callback_fn_ex">
      <arg name="b" type="const BIO *" m68kreg="a0"/>
    </method>
    <method name="BIO_meth_set_read_ex" result="int">
      <arg name="biom" type="BIO_METHOD *" m68kreg="a0"/>
      <arg name="bread" type="int (*)(BIO *, char *, size_t, size_t *)" m68kreg="a1"/>
    </method>
    <method name="BIO_meth_get_read_ex" result="int (*)(BIO *, char *, size_t, size_t *)">
      <arg name="biom" type="const BIO_METHOD *" m68kreg="a0"/>
    </method>
    <method name="BIO_write_ex" result="int">
      <arg name="b" type="BIO *" m68kreg="a0"/>
      <arg name="data" type="const void *" m68kreg="a1"/>
      <arg name="dlen" type="size_t" m68kreg="d0"/>
      <arg name="written" type="size_t *" m68kreg="a2"/>
    </method>
    <method name="BIO_meth_get_write_ex" result="int (*)(BIO *, const char *, size_t, size_t *)">
      <arg name="biom" type="const BIO_METHOD *" m68kreg="a0"/>
    </method>
    <method name="BIO_meth_set_write_ex" result="int">
      <arg name="biom" type="BIO_METHOD *" m68kreg="a0"/>
      <arg name="bwrite" type="int (*)(BIO *, const char *, size_t, size_t *)" m68kreg="a1"/>
    </method>
    <method name="EVP_PKEY_CTX_md" result="int">
      <arg name="ctx" type="EVP_PKEY_CTX *" m68kreg="a0"/>
      <arg name="optype" type="int" m68kreg="d0"/>
      <arg name="cmd" type="int" m68kreg="d1"/>
      <arg name="md" type="const char *" m68kreg="a1"/>
    </method>
    <method name="RSA_pkey_ctx_ctrl" result="int">
      <arg name="ctx" type="EVP_PKEY_CTX *" m68kreg="a0"/>
      <arg name="optype" type="int" m68kreg="d0"/>
      <arg name="cmd" type="int" m68kreg="d1"/>
      <arg name="p1" type="int" m68kreg="d2"/>
      <arg name="p2" type="void *" m68kreg="a1"/>
    </method>
    <method name="UI_method_set_ex_data" result="int">
      <arg name="method" type="UI_METHOD *" m68kreg="a0"/>
      <arg name="idx" type="int" m68kreg="d0"/>
      <arg name="data" type="void *" m68kreg="a1"/>
    </method>
    <method name="UI_method_get_ex_data" result="const void *">
      <arg name="method" type="const UI_METHOD *" m68kreg="a0"/>
      <arg name="idx" type="int" m68kreg="d0"/>
    </method>
    <method name="UI_UTIL_wrap_read_pem_callback" result="UI_METHOD *">
      <arg name="cb" type="pem_password_cb *" m68kreg="a0"/>
      <arg name="rwflag" type="int" m68kreg="d0"/>
    </method>
    <method name="EVP_PKEY_get0_poly1305" result="const unsigned char *">
      <arg name="pkey" type="const EVP_PKEY *" m68kreg="a0"/>
      <arg name="len" type="size_t *" m68kreg="a1"/>
    </method>
    <method name="EVP_PKEY_get0_siphash" result="const unsigned char *">
      <arg name="pkey" type="const EVP_PKEY *" m68kreg="a0"/>
      <arg name="len" type="size_t *" m68kreg="a1"/>
    </method>
    <method name="EVP_aria_256_ofb" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_aria_256_cfb128" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_aria_128_cfb1" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_aria_128_ecb" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_aria_128_cfb128" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_aria_192_ecb" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_aria_128_cbc" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_aria_192_ofb" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_aria_192_cbc" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_aria_192_cfb1" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_aria_128_cfb8" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_aria_256_cfb1" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_aria_192_cfb8" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_aria_256_cfb8" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_aria_256_cbc" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_aria_128_ofb" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_aria_192_cfb128" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_aria_256_ecb" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_aria_256_ctr" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_aria_128_ctr" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_aria_192_ctr" result="const EVP_CIPHER *">
    </method>
    <method name="UI_null" result="const UI_METHOD *">
    </method>
    <method name="EC_KEY_get0_engine" result="ENGINE *">
      <arg name="eckey" type="const EC_KEY *" m68kreg="a0"/>
    </method>
    <method name="INT32_it" result="const ASN1_ITEM *">
    </method>
    <method name="UINT64_it" result="const ASN1_ITEM *">
    </method>
    <method name="ZINT32_it" result="const ASN1_ITEM *">
    </method>
    <method name="ZUINT64_it" result="const ASN1_ITEM *">
    </method>
    <method name="INT64_it" result="const ASN1_ITEM *">
    </method>
    <method name="ZUINT32_it" result="const ASN1_ITEM *">
    </method>
    <method name="UINT32_it" result="const ASN1_ITEM *">
    </method>
    <method name="ZINT64_it" result="const ASN1_ITEM *">
    </method>
    <method name="BIO_lookup_ex" result="int">
      <arg name="host" type="const char *" m68kreg="a0"/>
      <arg name="service" type="const char *" m68kreg="a1"/>
      <arg name="lookup_type" type="int" m68kreg="d0"/>
      <arg name="family" type="int" m68kreg="d1"/>
      <arg name="socktype" type="int" m68kreg="d2"/>
      <arg name="protocol" type="int" m68kreg="d3"/>
      <arg name="res" type="BIO_ADDRINFO **" m68kreg="a2"/>
    </method>
    <method name="X509_CRL_print_ex" result="int">
      <arg name="out" type="BIO *" m68kreg="a0"/>
      <arg name="x" type="X509_CRL *" m68kreg="a1"/>
      <arg name="nmflag" type="unsigned long" m68kreg="d0"/>
    </method>
    <method name="X509_SIG_INFO_get" result="int">
      <arg name="siginf" type="const X509_SIG_INFO *" m68kreg="a0"/>
      <arg name="mdnid" type="int *" m68kreg="a1"/>
      <arg name="pknid" type="int *" m68kreg="a2"/>
      <arg name="secbits" type="int *" m68kreg="a3"/>
      <arg name="flags" type="uint32_t *" m68kreg="d0"/>
    </method>
    <method name="X509_get_signature_info" result="int">
      <arg name="x" type="X509 *" m68kreg="a0"/>
      <arg name="mdnid" type="int *" m68kreg="a1"/>
      <arg name="pknid" type="int *" m68kreg="a2"/>
      <arg name="secbits" type="int *" m68kreg="a3"/>
      <arg name="flags" type="uint32_t *" m68kreg="d0"/>
    </method>
    <method name="X509_SIG_INFO_set" result="void">
      <arg name="siginf" type="X509_SIG_INFO *" m68kreg="a0"/>
      <arg name="mdnid" type="int" m68kreg="d0"/>
      <arg name="pknid" type="int" m68kreg="d1"/>
      <arg name="secbits" type="int" m68kreg="d2"/>
      <arg name="flags" type="uint32_t" m68kreg="d3"/>
    </method>
    <method name="ESS_CERT_ID_V2_free" result="void">
      <arg name="a" type="ESS_CERT_ID_V2 *" m68kreg="a0"/>
    </method>
    <method name="ESS_SIGNING_CERT_V2_new" result="ESS_SIGNING_CERT_V2 *">
    </method>
    <method name="d2i_ESS_SIGNING_CERT_V2" result="ESS_SIGNING_CERT_V2 *">
      <arg name="a" type="ESS_SIGNING_CERT_V2 **" m68kreg="a0"/>
      <arg name="pp" type="const unsigned char **" m68kreg="a1"/>
      <arg name="length" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_ESS_CERT_ID_V2" result="int">
      <arg name="a" type="const ESS_CERT_ID_V2 *" m68kreg="a0"/>
      <arg name="pp" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="ESS_CERT_ID_V2_dup" result="ESS_CERT_ID_V2 *">
      <arg name="a" type="ESS_CERT_ID_V2 *" m68kreg="a0"/>
    </method>
    <method name="TS_RESP_CTX_set_ess_cert_id_digest" result="int">
      <arg name="ctx" type="TS_RESP_CTX *" m68kreg="a0"/>
      <arg name="md" type="const EVP_MD *" m68kreg="a1"/>
    </method>
    <method name="d2i_ESS_CERT_ID_V2" result="ESS_CERT_ID_V2 *">
      <arg name="a" type="ESS_CERT_ID_V2 **" m68kreg="a0"/>
      <arg name="pp" type="const unsigned char **" m68kreg="a1"/>
      <arg name="length" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_ESS_SIGNING_CERT_V2" result="int">
      <arg name="a" type="const ESS_SIGNING_CERT_V2 *" m68kreg="a0"/>
      <arg name="pp" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="TS_CONF_set_ess_cert_id_digest" result="int">
      <arg name="conf" type="CONF *" m68kreg="a0"/>
      <arg name="section" type="const char *" m68kreg="a1"/>
      <arg name="ctx" type="TS_RESP_CTX *" m68kreg="a2"/>
    </method>
    <method name="ESS_SIGNING_CERT_V2_free" result="void">
      <arg name="a" type="ESS_SIGNING_CERT_V2 *" m68kreg="a0"/>
    </method>
    <method name="ESS_SIGNING_CERT_V2_dup" result="ESS_SIGNING_CERT_V2 *">
      <arg name="a" type="ESS_SIGNING_CERT_V2 *" m68kreg="a0"/>
    </method>
    <method name="ESS_CERT_ID_V2_new" result="ESS_CERT_ID_V2 *">
    </method>
    <method name="PEM_read_bio_ex" result="int">
      <arg name="bp" type="BIO *" m68kreg="a0"/>
      <arg name="name" type="char **" m68kreg="a1"/>
      <arg name="header" type="char **" m68kreg="a2"/>
      <arg name="data" type="unsigned char **" m68kreg="a3"/>
      <arg name="len" type="long *" m68kreg="d0"/>
      <arg name="flags" type="unsigned int" m68kreg="d1"/>
    </method>
    <method name="PEM_bytes_read_bio_secmem" result="int">
      <arg name="pdata" type="unsigned char **" m68kreg="a0"/>
      <arg name="plen" type="long *" m68kreg="a1"/>
      <arg name="pnm" type="char **" m68kreg="a2"/>
      <arg name="name" type="const char *" m68kreg="a3"/>
      <arg name="bp" type="BIO *" m68kreg="d0"/>
      <arg name="cb" type="pem_password_cb *" m68kreg="d1"/>
      <arg name="u" type="void *" m68kreg="d2"/>
    </method>
    <method name="EVP_DigestSign" result="int">
      <arg name="ctx" type="EVP_MD_CTX *" m68kreg="a0"/>
      <arg name="sigret" type="unsigned char *" m68kreg="a1"/>
      <arg name="siglen" type="size_t *" m68kreg="a2"/>
      <arg name="tbs" type="const unsigned char *" m68kreg="a3"/>
      <arg name="tbslen" type="size_t" m68kreg="d0"/>
    </method>
    <method name="EVP_DigestVerify" result="int">
      <arg name="ctx" type="EVP_MD_CTX *" m68kreg="a0"/>
      <arg name="sigret" type="const unsigned char *" m68kreg="a1"/>
      <arg name="siglen" type="size_t" m68kreg="d0"/>
      <arg name="tbs" type="const unsigned char *" m68kreg="a2"/>
      <arg name="tbslen" type="size_t" m68kreg="d1"/>
    </method>
    <method name="UI_method_get_data_duplicator" result="void *(*)(UI *, void *)">
      <arg name="method" type="const UI_METHOD *" m68kreg="a0"/>
    </method>
    <method name="UI_method_set_data_duplicator" result="int">
      <arg name="method" type="UI_METHOD *" m68kreg="a0"/>
      <arg name="duplicator" type="void *(*)(UI *ui, void *ui_data)" m68kreg="a1"/>
      <arg name="destructor" type="void (*)(UI *ui, void *ui_data)" m68kreg="a2"/>
    </method>
    <method name="UI_dup_user_data" result="int">
      <arg name="ui" type="UI *" m68kreg="a0"/>
      <arg name="user_data" type="void *" m68kreg="a1"/>
    </method>
    <method name="UI_method_get_data_destructor" result="void (*)(UI *, void *)">
      <arg name="method" type="const UI_METHOD *" m68kreg="a0"/>
    </method>
    <method name="ERR_load_strings_const" result="int">
      <arg name="str" type="const ERR_STRING_DATA *" m68kreg="a0"/>
    </method>
    <method name="ASN1_TIME_to_tm" result="int">
      <arg name="s" type="const ASN1_TIME *" m68kreg="a0"/>
      <arg name="tm" type="struct tm *" m68kreg="a1"/>
    </method>
    <method name="ASN1_TIME_set_string_X509" result="int">
      <arg name="s" type="ASN1_TIME *" m68kreg="a0"/>
      <arg name="str" type="const char *" m68kreg="a1"/>
    </method>
    <method name="OCSP_resp_get1_id" result="int">
      <arg name="bs" type="const OCSP_BASICRESP *" m68kreg="a0"/>
      <arg name="pid" type="ASN1_OCTET_STRING **" m68kreg="a1"/>
      <arg name="pname" type="X509_NAME **" m68kreg="a2"/>
    </method>
    <method name="OSSL_STORE_register_loader" result="int">
      <arg name="loader" type="OSSL_STORE_LOADER *" m68kreg="a0"/>
    </method>
    <method name="OSSL_STORE_LOADER_set_error" result="int">
      <arg name="loader" type="OSSL_STORE_LOADER *" m68kreg="a0"/>
      <arg name="error_function" type="OSSL_STORE_error_fn" m68kreg="a1"/>
    </method>
    <method name="OSSL_STORE_INFO_get0_PKEY" result="EVP_PKEY *">
      <arg name="info" type="const OSSL_STORE_INFO *" m68kreg="a0"/>
    </method>
    <method name="OSSL_STORE_INFO_get_type" result="int">
      <arg name="info" type="const OSSL_STORE_INFO *" m68kreg="a0"/>
    </method>
    <method name="ERR_load_OSSL_STORE_strings" result="int">
    </method>
    <method name="OSSL_STORE_LOADER_free" result="void">
      <arg name="loader" type="OSSL_STORE_LOADER *" m68kreg="a0"/>
    </method>
    <method name="OSSL_STORE_INFO_get1_PKEY" result="EVP_PKEY *">
      <arg name="info" type="const OSSL_STORE_INFO *" m68kreg="a0"/>
    </method>
    <method name="OSSL_STORE_INFO_free" result="void">
      <arg name="info" type="OSSL_STORE_INFO *" m68kreg="a0"/>
    </method>
    <method name="OSSL_STORE_LOADER_set_eof" result="int">
      <arg name="loader" type="OSSL_STORE_LOADER *" m68kreg="a0"/>
      <arg name="eof_function" type="OSSL_STORE_eof_fn" m68kreg="a1"/>
    </method>
    <method name="OSSL_STORE_LOADER_new" result="OSSL_STORE_LOADER *">
      <arg name="e" type="ENGINE *" m68kreg="a0"/>
      <arg name="scheme" type="const char *" m68kreg="a1"/>
    </method>
    <method name="OSSL_STORE_INFO_get0_CERT" result="X509 *">
      <arg name="info" type="const OSSL_STORE_INFO *" m68kreg="a0"/>
    </method>
    <method name="OSSL_STORE_LOADER_set_close" result="int">
      <arg name="loader" type="OSSL_STORE_LOADER *" m68kreg="a0"/>
      <arg name="close_function" type="OSSL_STORE_close_fn" m68kreg="a1"/>
    </method>
    <method name="OSSL_STORE_INFO_new_PARAMS" result="OSSL_STORE_INFO *">
      <arg name="params" type="EVP_PKEY *" m68kreg="a0"/>
    </method>
    <method name="OSSL_STORE_INFO_new_PKEY" result="OSSL_STORE_INFO *">
      <arg name="pkey" type="EVP_PKEY *" m68kreg="a0"/>
    </method>
    <method name="OSSL_STORE_INFO_get1_PARAMS" result="EVP_PKEY *">
      <arg name="info" type="const OSSL_STORE_INFO *" m68kreg="a0"/>
    </method>
    <method name="OSSL_STORE_INFO_get1_CRL" result="X509_CRL *">
      <arg name="info" type="const OSSL_STORE_INFO *" m68kreg="a0"/>
    </method>
    <method name="OSSL_STORE_error" result="int">
      <arg name="ctx" type="OSSL_STORE_CTX *" m68kreg="a0"/>
    </method>
    <method name="OSSL_STORE_INFO_get1_CERT" result="X509 *">
      <arg name="info" type="const OSSL_STORE_INFO *" m68kreg="a0"/>
    </method>
    <method name="OSSL_STORE_INFO_get0_PARAMS" result="EVP_PKEY *">
      <arg name="info" type="const OSSL_STORE_INFO *" m68kreg="a0"/>
    </method>
    <method name="OSSL_STORE_INFO_type_string" result="const char *">
      <arg name="type" type="int" m68kreg="d0"/>
    </method>
    <method name="OSSL_STORE_INFO_get1_NAME" result="char *">
      <arg name="info" type="const OSSL_STORE_INFO *" m68kreg="a0"/>
    </method>
    <method name="OSSL_STORE_LOADER_set_load" result="int">
      <arg name="loader" type="OSSL_STORE_LOADER *" m68kreg="a0"/>
      <arg name="load_function" type="OSSL_STORE_load_fn" m68kreg="a1"/>
    </method>
    <method name="OSSL_STORE_LOADER_get0_scheme" result="const char *">
      <arg name="loader" type="const OSSL_STORE_LOADER *" m68kreg="a0"/>
    </method>
    <method name="OSSL_STORE_open" result="OSSL_STORE_CTX *">
      <arg name="uri" type="const char *" m68kreg="a0"/>
      <arg name="ui_method" type="const UI_METHOD *" m68kreg="a1"/>
      <arg name="ui_data" type="void *" m68kreg="a2"/>
      <arg name="post_process" type="OSSL_STORE_post_process_info_fn" m68kreg="a3"/>
      <arg name="post_process_data" type="void *" m68kreg="d0"/>
    </method>
    <method name="OSSL_STORE_close" result="int">
      <arg name="ctx" type="OSSL_STORE_CTX *" m68kreg="a0"/>
    </method>
    <method name="OSSL_STORE_INFO_new_CERT" result="OSSL_STORE_INFO *">
      <arg name="x509" type="X509 *" m68kreg="a0"/>
    </method>
    <method name="OSSL_STORE_INFO_get0_CRL" result="X509_CRL *">
      <arg name="info" type="const OSSL_STORE_INFO *" m68kreg="a0"/>
    </method>
    <method name="OSSL_STORE_load" result="OSSL_STORE_INFO *">
      <arg name="ctx" type="OSSL_STORE_CTX *" m68kreg="a0"/>
    </method>
    <method name="OSSL_STORE_INFO_get0_NAME" result="const char *">
      <arg name="info" type="const OSSL_STORE_INFO *" m68kreg="a0"/>
    </method>
    <method name="OSSL_STORE_unregister_loader" result="OSSL_STORE_LOADER *">
      <arg name="scheme" type="const char *" m68kreg="a0"/>
    </method>
    <method name="OSSL_STORE_INFO_new_CRL" result="OSSL_STORE_INFO *">
      <arg name="crl" type="X509_CRL *" m68kreg="a0"/>
    </method>
    <method name="OSSL_STORE_INFO_new_NAME" result="OSSL_STORE_INFO *">
      <arg name="name" type="char *" m68kreg="a0"/>
    </method>
    <method name="OSSL_STORE_eof" result="int">
      <arg name="ctx" type="OSSL_STORE_CTX *" m68kreg="a0"/>
    </method>
    <method name="OSSL_STORE_LOADER_set_open" result="int">
      <arg name="loader" type="OSSL_STORE_LOADER *" m68kreg="a0"/>
      <arg name="open_function" type="OSSL_STORE_open_fn" m68kreg="a1"/>
    </method>
    <method name="OSSL_STORE_LOADER_set_ctrl" result="int">
      <arg name="loader" type="OSSL_STORE_LOADER *" m68kreg="a0"/>
      <arg name="ctrl_function" type="OSSL_STORE_ctrl_fn" m68kreg="a1"/>
    </method>
    <method name="OSSL_STORE_vctrl" result="int">
      <arg name="ctx" type="OSSL_STORE_CTX *" m68kreg="a0"/>
      <arg name="cmd" type="int" m68kreg="d0"/>
      <arg name="args" type="va_list" m68kreg="a1"/>
    </method>
    <method name="OSSL_STORE_ctrl" result="int">
      <arg name="ctx" type="OSSL_STORE_CTX *" m68kreg="a0"/>
      <arg name="cmd" type="int" m68kreg="d0"/>
      <vararg name="dummy" type="long" m68kreg="a1"/>
    </method>
    <method name="OSSL_STORE_INFO_get0_NAME_description" result="const char *">
      <arg name="info" type="const OSSL_STORE_INFO *" m68kreg="a0"/>
    </method>
    <method name="OSSL_STORE_INFO_set0_NAME_description" result="int">
      <arg name="info" type="OSSL_STORE_INFO *" m68kreg="a0"/>
      <arg name="desc" type="char *" m68kreg="a1"/>
    </method>
    <method name="OSSL_STORE_INFO_get1_NAME_description" result="char *">
      <arg name="info" type="const OSSL_STORE_INFO *" m68kreg="a0"/>
    </method>
    <method name="OSSL_STORE_do_all_loaders" result="int">
      <arg name="do_function" type="void (*)(const OSSL_STORE_LOADER *loader, void *do_arg)" m68kreg="a0"/>
      <arg name="do_arg" type="void *" m68kreg="a1"/>
    </method>
    <method name="OSSL_STORE_LOADER_get0_engine" result="const ENGINE *">
      <arg name="loader" type="const OSSL_STORE_LOADER *" m68kreg="a0"/>
    </method>
    <method name="RAND_DRBG_instantiate" result="int">
      <arg name="drbg" type="RAND_DRBG *" m68kreg="a0"/>
      <arg name="pers" type="const unsigned char *" m68kreg="a1"/>
      <arg name="perslen" type="size_t" m68kreg="d0"/>
    </method>
    <method name="RAND_DRBG_uninstantiate" result="int">
      <arg name="drbg" type="RAND_DRBG *" m68kreg="a0"/>
    </method>
    <method name="RAND_DRBG_set" result="int">
      <arg name="drbg" type="RAND_DRBG *" m68kreg="a0"/>
      <arg name="type" type="int" m68kreg="d0"/>
      <arg name="flags" type="unsigned int" m68kreg="d1"/>
    </method>
    <method name="RAND_DRBG_set_callbacks" result="int">
      <arg name="drbg" type="RAND_DRBG *" m68kreg="a0"/>
      <arg name="get_entropy" type="RAND_DRBG_get_entropy_fn" m68kreg="a1"/>
      <arg name="cleanup_entropy" type="RAND_DRBG_cleanup_entropy_fn" m68kreg="a2"/>
      <arg name="get_nonce" type="RAND_DRBG_get_nonce_fn" m68kreg="a3"/>
      <arg name="cleanup_nonce" type="RAND_DRBG_cleanup_nonce_fn" m68kreg="d0"/>
    </method>
    <method name="RAND_DRBG_new" result="RAND_DRBG *">
      <arg name="type" type="int" m68kreg="d0"/>
      <arg name="flags" type="unsigned int" m68kreg="d1"/>
      <arg name="parent" type="RAND_DRBG *" m68kreg="a0"/>
    </method>
    <method name="RAND_DRBG_set_reseed_interval" result="int">
      <arg name="drbg" type="RAND_DRBG *" m68kreg="a0"/>
      <arg name="interval" type="unsigned int" m68kreg="d0"/>
    </method>
    <method name="RAND_DRBG_free" result="void">
      <arg name="drbg" type="RAND_DRBG *" m68kreg="a0"/>
    </method>
    <method name="RAND_DRBG_generate" result="int">
      <arg name="drbg" type="RAND_DRBG *" m68kreg="a0"/>
      <arg name="out" type="unsigned char *" m68kreg="a1"/>
      <arg name="outlen" type="size_t" m68kreg="d0"/>
      <arg name="prediction_resistance" type="int" m68kreg="d1"/>
      <arg name="adin" type="const unsigned char *" m68kreg="a2"/>
      <arg name="adinlen" type="size_t" m68kreg="d2"/>
    </method>
    <method name="RAND_DRBG_reseed" result="int">
      <arg name="drbg" type="RAND_DRBG *" m68kreg="a0"/>
      <arg name="adin" type="const unsigned char *" m68kreg="a1"/>
      <arg name="adinlen" type="size_t" m68kreg="d0"/>
      <arg name="prediction_resistance" type="int" m68kreg="d1"/>
    </method>
    <method name="RAND_DRBG_set_ex_data" result="int">
      <arg name="drbg" type="RAND_DRBG *" m68kreg="a0"/>
      <arg name="idx" type="int" m68kreg="d0"/>
      <arg name="arg" type="void *" m68kreg="a1"/>
    </method>
    <method name="RAND_DRBG_get_ex_data" result="void *">
      <arg name="drbg" type="const RAND_DRBG *" m68kreg="a0"/>
      <arg name="idx" type="int" m68kreg="d0"/>
    </method>
    <method name="EVP_sha3_224" result="const EVP_MD *">
    </method>
    <method name="EVP_sha3_256" result="const EVP_MD *">
    </method>
    <method name="EVP_sha3_384" result="const EVP_MD *">
    </method>
    <method name="EVP_sha3_512" result="const EVP_MD *">
    </method>
    <method name="EVP_shake128" result="const EVP_MD *">
    </method>
    <method name="EVP_shake256" result="const EVP_MD *">
    </method>
    <method name="SCRYPT_PARAMS_new" result="SCRYPT_PARAMS *">
    </method>
    <method name="SCRYPT_PARAMS_free" result="void">
      <arg name="a" type="SCRYPT_PARAMS *" m68kreg="a0"/>
    </method>
    <method name="i2d_SCRYPT_PARAMS" result="int">
      <arg name="a" type="SCRYPT_PARAMS *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="d2i_SCRYPT_PARAMS" result="SCRYPT_PARAMS *">
      <arg name="a" type="SCRYPT_PARAMS **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="SCRYPT_PARAMS_it" result="const ASN1_ITEM *">
    </method>
    <method name="EVP_PKEY_meth_get0" result="const EVP_PKEY_METHOD *">
      <arg name="idx" type="size_t" m68kreg="d0"/>
    </method>
    <method name="EVP_PKEY_meth_get_count" result="size_t">
    </method>
    <method name="RAND_DRBG_get0_public" result="RAND_DRBG *">
    </method>
    <method name="RAND_priv_bytes" result="int">
      <arg name="buf" type="unsigned char *" m68kreg="a0"/>
      <arg name="num" type="int" m68kreg="d0"/>
    </method>
    <method name="BN_priv_rand" result="int">
      <arg name="rnd" type="BIGNUM *" m68kreg="a0"/>
      <arg name="bits" type="int" m68kreg="d0"/>
      <arg name="top" type="int" m68kreg="d1"/>
      <arg name="bottom" type="int" m68kreg="d2"/>
    </method>
    <method name="BN_priv_rand_range" result="int">
      <arg name="rnd" type="BIGNUM *" m68kreg="a0"/>
      <arg name="range" type="const BIGNUM *" m68kreg="a1"/>
    </method>
    <method name="ASN1_TIME_normalize" result="int">
      <arg name="s" type="ASN1_TIME *" m68kreg="a0"/>
    </method>
    <method name="ASN1_TIME_cmp_time_t" result="int">
      <arg name="s" type="const ASN1_TIME *" m68kreg="a0"/>
      <arg name="t" type="time_t" m68kreg="d0"/>
    </method>
    <method name="ASN1_TIME_compare" result="int">
      <arg name="a" type="const ASN1_TIME *" m68kreg="a0"/>
      <arg name="b" type="const ASN1_TIME *" m68kreg="a1"/>
    </method>
    <method name="EVP_PKEY_CTX_ctrl_uint64" result="int">
      <arg name="ctx" type="EVP_PKEY_CTX *" m68kreg="a0"/>
      <arg name="keytype" type="int" m68kreg="d0"/>
      <arg name="optype" type="int" m68kreg="d1"/>
      <arg name="cmd" type="int" m68kreg="d4"/>
      <arg name="value" type="uint64_t" m68kreg="d2-d3"/>
    </method>
    <method name="EVP_DigestFinalXOF" result="int">
      <arg name="ctx" type="EVP_MD_CTX *" m68kreg="a0"/>
      <arg name="md" type="unsigned char *" m68kreg="a1"/>
      <arg name="len" type="size_t" m68kreg="d0"/>
    </method>
    <method name="ERR_clear_last_mark" result="int">
    </method>
    <method name="RAND_DRBG_get0_private" result="RAND_DRBG *">
    </method>
    <method name="EVP_aria_192_ccm" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_aria_256_gcm" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_aria_256_ccm" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_aria_128_gcm" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_aria_128_ccm" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_aria_192_gcm" result="const EVP_CIPHER *">
    </method>
    <method name="UI_get_result_length" result="int">
      <arg name="ui" type="UI *" m68kreg="a0"/>
      <arg name="i" type="int" m68kreg="d0"/>
    </method>
    <method name="UI_set_result_ex" result="int">
      <arg name="ui" type="UI *" m68kreg="a0"/>
      <arg name="uis" type="UI_STRING *" m68kreg="a1"/>
      <arg name="result" type="const char *" m68kreg="a2"/>
      <arg name="len" type="int" m68kreg="d0"/>
    </method>
    <method name="UI_get_result_string_length" result="int">
      <arg name="uis" type="UI_STRING *" m68kreg="a0"/>
    </method>
    <method name="EVP_PKEY_check" result="int">
      <arg name="ctx" type="EVP_PKEY_CTX *" m68kreg="a0"/>
    </method>
    <method name="EVP_PKEY_meth_set_check" result="void">
      <arg name="pmeth" type="EVP_PKEY_METHOD *" m68kreg="a0"/>
      <arg name="check" type="int (*)(EVP_PKEY *pkey)" m68kreg="a1"/>
    </method>
    <method name="EVP_PKEY_meth_get_check" result="void">
      <arg name="pmeth" type="const EVP_PKEY_METHOD *" m68kreg="a0"/>
      <arg name="pcheck" type="int (**)(EVP_PKEY *pkey)" m68kreg="a1"/>
    </method>
    <method name="EVP_PKEY_meth_remove" result="int">
      <arg name="pmeth" type="const EVP_PKEY_METHOD *" m68kreg="a0"/>
    </method>
    <method name="OPENSSL_sk_reserve" result="int">
      <arg name="st" type="OPENSSL_STACK *" m68kreg="a0"/>
      <arg name="n" type="int" m68kreg="d0"/>
    </method>
    <method name="DH_new_by_nid" result="DH *">
      <arg name="nid" type="int" m68kreg="d0"/>
    </method>
    <method name="DH_get_nid" result="int">
      <arg name="dh" type="const DH *" m68kreg="a0"/>
    </method>
    <method name="OPENSSL_sk_new_reserve" result="OPENSSL_STACK *">
      <arg name="c" type="OPENSSL_sk_compfunc" m68kreg="a0"/>
      <arg name="n" type="int" m68kreg="d0"/>
    </method>
    <method name="EVP_PKEY_asn1_set_check" result="void">
      <arg name="ameth" type="EVP_PKEY_ASN1_METHOD *" m68kreg="a0"/>
      <arg name="pkey_check" type="int (*)(const EVP_PKEY *pk)" m68kreg="a1"/>
    </method>
    <method name="EVP_PKEY_asn1_set_siginf" result="void">
      <arg name="ameth" type="EVP_PKEY_ASN1_METHOD *" m68kreg="a0"/>
      <arg name="siginf_set" type="int (*)(X509_SIG_INFO *siginf, const X509_ALGOR *alg, const ASN1_STRING *sig)" m68kreg="a1"/>
    </method>
    <method name="EVP_sm4_ctr" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_sm4_cbc" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_sm4_ofb" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_sm4_ecb" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_sm4_cfb128" result="const EVP_CIPHER *">
    </method>
    <method name="EVP_sm3" result="const EVP_MD *">
    </method>
    <method name="RSA_get0_multi_prime_factors" result="int">
      <arg name="r" type="const RSA *" m68kreg="a0"/>
      <arg name="primes" type="const BIGNUM **" m68kreg="a1"/>
    </method>
    <method name="EVP_PKEY_public_check" result="int">
      <arg name="ctx" type="EVP_PKEY_CTX *" m68kreg="a0"/>
    </method>
    <method name="EVP_PKEY_param_check" result="int">
      <arg name="ctx" type="EVP_PKEY_CTX *" m68kreg="a0"/>
    </method>
    <method name="EVP_PKEY_meth_set_public_check" result="void">
      <arg name="pmeth" type="EVP_PKEY_METHOD *" m68kreg="a0"/>
      <arg name="check" type="int (*)(EVP_PKEY *pkey)" m68kreg="a1"/>
    </method>
    <method name="EVP_PKEY_meth_set_param_check" result="void">
      <arg name="pmeth" type="EVP_PKEY_METHOD *" m68kreg="a0"/>
      <arg name="check" type="int (*)(EVP_PKEY *pkey)" m68kreg="a1"/>
    </method>
    <method name="EVP_PKEY_meth_get_public_check" result="void">
      <arg name="pmeth" type="const EVP_PKEY_METHOD *" m68kreg="a0"/>
      <arg name="pcheck" type="int (**)(EVP_PKEY *pkey)" m68kreg="a1"/>
    </method>
    <method name="EVP_PKEY_meth_get_param_check" result="void">
      <arg name="pmeth" type="const EVP_PKEY_METHOD *" m68kreg="a0"/>
      <arg name="pcheck" type="int (**)(EVP_PKEY *pkey)" m68kreg="a1"/>
    </method>
    <method name="EVP_PKEY_asn1_set_public_check" result="void">
      <arg name="ameth" type="EVP_PKEY_ASN1_METHOD *" m68kreg="a0"/>
      <arg name="pkey_pub_check" type="int (*)(const EVP_PKEY *pk)" m68kreg="a1"/>
    </method>
    <method name="EVP_PKEY_asn1_set_param_check" result="void">
      <arg name="ameth" type="EVP_PKEY_ASN1_METHOD *" m68kreg="a0"/>
      <arg name="pkey_param_check" type="int (*)(const EVP_PKEY *pk)" m68kreg="a1"/>
    </method>
    <method name="DH_check_ex" result="int">
      <arg name="dh" type="const DH *" m68kreg="a0"/>
    </method>
    <method name="DH_check_pub_key_ex" result="int">
      <arg name="dh" type="const DH *" m68kreg="a0"/>
      <arg name="pub_key" type="const BIGNUM *" m68kreg="a1"/>
    </method>
    <method name="DH_check_params_ex" result="int">
      <arg name="dh" type="const DH *" m68kreg="a0"/>
    </method>
    <method name="RSA_generate_multi_prime_key" result="int">
      <arg name="rsa" type="RSA *" m68kreg="a0"/>
      <arg name="bits" type="int" m68kreg="d0"/>
      <arg name="primes" type="int" m68kreg="d1"/>
      <arg name="e" type="BIGNUM *" m68kreg="a1"/>
      <arg name="cb" type="BN_GENCB *" m68kreg="a2"/>
    </method>
    <method name="RSA_get_multi_prime_extra_count" result="int">
      <arg name="r" type="const RSA *" m68kreg="a0"/>
    </method>
    <method name="OCSP_resp_get0_signer" result="int">
      <arg name="bs" type="OCSP_BASICRESP *" m68kreg="a0"/>
      <arg name="signer" type="X509 **" m68kreg="a1"/>
      <arg name="extra_certs" type="STACK_OF(X509) *" m68kreg="a2"/>
    </method>
    <method name="RSA_get0_multi_prime_crt_params" result="int">
      <arg name="r" type="const RSA *" m68kreg="a0"/>
      <arg name="exps" type="const BIGNUM **" m68kreg="a1"/>
      <arg name="coeffs" type="const BIGNUM **" m68kreg="a2"/>
    </method>
    <method name="RSA_set0_multi_prime_params" result="int">
      <arg name="r" type="RSA *" m68kreg="a0"/>
      <arg name="primes" type="BIGNUM **" m68kreg="a1"/>
      <arg name="exps" type="BIGNUM **" m68kreg="a2"/>
      <arg name="coeffs" type="BIGNUM **" m68kreg="a3"/>
      <arg name="pnum" type="int" m68kreg="d0"/>
    </method>
    <method name="RSA_get_version" result="int">
      <arg name="r" type="RSA *" m68kreg="a0"/>
    </method>
    <method name="RSA_meth_get_multi_prime_keygen" result="int (*)(RSA *rsa, int bits, int primes, BIGNUM *e, BN_GENCB *cb)">
      <arg name="meth" type="const RSA_METHOD *" m68kreg="a0"/>
    </method>
    <method name="RSA_meth_set_multi_prime_keygen" result="int">
      <arg name="meth" type="RSA_METHOD *" m68kreg="a0"/>
      <arg name="keygen" type="int (*)(RSA *rsa, int bits, int primes, BIGNUM *e, BN_GENCB *cb)" m68kreg="a1"/>
    </method>
    <method name="RAND_DRBG_get0_master" result="RAND_DRBG *">
    </method>
    <method name="RAND_DRBG_set_reseed_time_interval" result="int">
      <arg name="drbg" type="RAND_DRBG *" m68kreg="a0"/>
      <arg name="interval" type="time_t" m68kreg="d0"/>
    </method>
    <method name="PROFESSION_INFO_get0_addProfessionInfo" result="const ASN1_OCTET_STRING *">
      <arg name="pi" type="const PROFESSION_INFO *" m68kreg="a0"/>
    </method>
    <method name="ADMISSION_SYNTAX_free" result="void">
      <arg name="a" type="ADMISSION_SYNTAX *" m68kreg="a0"/>
    </method>
    <method name="d2i_ADMISSION_SYNTAX" result="ADMISSION_SYNTAX *">
      <arg name="a" type="ADMISSION_SYNTAX **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="NAMING_AUTHORITY_set0_authorityId" result="void">
      <arg name="n" type="NAMING_AUTHORITY *" m68kreg="a0"/>
      <arg name="namingAuthorityId" type="ASN1_OBJECT*" m68kreg="a1"/>
    </method>
    <method name="NAMING_AUTHORITY_set0_authorityURL" result="void">
      <arg name="n" type="NAMING_AUTHORITY *" m68kreg="a0"/>
      <arg name="namingAuthorityUrl" type="ASN1_IA5STRING*" m68kreg="a1"/>
    </method>
    <method name="d2i_PROFESSION_INFO" result="PROFESSION_INFO *">
      <arg name="a" type="PROFESSION_INFO **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="NAMING_AUTHORITY_it" result="const ASN1_ITEM *">
    </method>
    <method name="ADMISSION_SYNTAX_get0_contentsOfAdmissions" result="const STACK_OF(ADMISSIONS) *">
      <arg name="as" type="const ADMISSION_SYNTAX *" m68kreg="a0"/>
    </method>
    <method name="PROFESSION_INFO_set0_professionItems" result="void">
      <arg name="pi" type="PROFESSION_INFO *" m68kreg="a0"/>
      <arg name="as" type="STACK_OF(ASN1_STRING) *" m68kreg="a1"/>
    </method>
    <method name="NAMING_AUTHORITY_new" result="NAMING_AUTHORITY *">
    </method>
    <method name="NAMING_AUTHORITY_get0_authorityURL" result="const ASN1_IA5STRING *">
      <arg name="n" type="const NAMING_AUTHORITY *" m68kreg="a0"/>
    </method>
    <method name="ADMISSION_SYNTAX_get0_admissionAuthority" result="const GENERAL_NAME *">
      <arg name="as" type="const ADMISSION_SYNTAX *" m68kreg="a0"/>
    </method>
    <method name="PROFESSION_INFO_new" result="PROFESSION_INFO *">
    </method>
    <method name="ADMISSIONS_new" result="ADMISSIONS *">
    </method>
    <method name="ADMISSION_SYNTAX_set0_admissionAuthority" result="void">
      <arg name="as" type="ADMISSION_SYNTAX *" m68kreg="a0"/>
      <arg name="aa" type="GENERAL_NAME *" m68kreg="a1"/>
    </method>
    <method name="PROFESSION_INFO_get0_professionOIDs" result="const STACK_OF(ASN1_OBJECT) *">
      <arg name="pi" type="const PROFESSION_INFO *" m68kreg="a0"/>
    </method>
    <method name="PROFESSION_INFO_it" result="const ASN1_ITEM *">
    </method>
    <method name="i2d_PROFESSION_INFO" result="int">
      <arg name="a" type="PROFESSION_INFO *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="ADMISSIONS_set0_professionInfos" result="void">
      <arg name="a" type="ADMISSIONS *" m68kreg="a0"/>
      <arg name="pi" type="PROFESSION_INFOS *" m68kreg="a1"/>
    </method>
    <method name="PROFESSION_INFO_get0_namingAuthority" result="const NAMING_AUTHORITY *">
      <arg name="pi" type="const PROFESSION_INFO *" m68kreg="a0"/>
    </method>
    <method name="PROFESSION_INFO_free" result="void">
      <arg name="a" type="PROFESSION_INFO *" m68kreg="a0"/>
    </method>
    <method name="PROFESSION_INFO_set0_addProfessionInfo" result="void">
      <arg name="pi" type="PROFESSION_INFO *" m68kreg="a0"/>
      <arg name="aos" type="ASN1_OCTET_STRING *" m68kreg="a1"/>
    </method>
    <method name="PROFESSION_INFO_set0_registrationNumber" result="void">
      <arg name="pi" type="PROFESSION_INFO *" m68kreg="a0"/>
      <arg name="rn" type="ASN1_PRINTABLESTRING *" m68kreg="a1"/>
    </method>
    <method name="ADMISSION_SYNTAX_set0_contentsOfAdmissions" result="void">
      <arg name="as" type="ADMISSION_SYNTAX *" m68kreg="a0"/>
      <arg name="a" type="STACK_OF(ADMISSIONS) *" m68kreg="a1"/>
    </method>
    <method name="NAMING_AUTHORITY_get0_authorityId" result="const ASN1_OBJECT *">
      <arg name="n" type="const NAMING_AUTHORITY *" m68kreg="a0"/>
    </method>
    <method name="ADMISSION_SYNTAX_it" result="const ASN1_ITEM *">
    </method>
    <method name="i2d_ADMISSION_SYNTAX" result="int">
      <arg name="a" type="ADMISSION_SYNTAX *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="NAMING_AUTHORITY_get0_authorityText" result="const ASN1_STRING *">
      <arg name="n" type="const NAMING_AUTHORITY *" m68kreg="a0"/>
    </method>
    <method name="PROFESSION_INFO_set0_namingAuthority" result="void">
      <arg name="pi" type="PROFESSION_INFO *" m68kreg="a0"/>
      <arg name="na" type="NAMING_AUTHORITY *" m68kreg="a1"/>
    </method>
    <method name="i2d_NAMING_AUTHORITY" result="int">
      <arg name="a" type="NAMING_AUTHORITY *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="NAMING_AUTHORITY_free" result="void">
      <arg name="a" type="NAMING_AUTHORITY *" m68kreg="a0"/>
    </method>
    <method name="ADMISSIONS_set0_admissionAuthority" result="void">
      <arg name="a" type="ADMISSIONS *" m68kreg="a0"/>
      <arg name="aa" type="GENERAL_NAME *" m68kreg="a1"/>
    </method>
    <method name="ADMISSIONS_free" result="void">
      <arg name="a" type="ADMISSIONS *" m68kreg="a0"/>
    </method>
    <method name="PROFESSION_INFO_get0_registrationNumber" result="const ASN1_PRINTABLESTRING *">
      <arg name="pi" type="const PROFESSION_INFO *" m68kreg="a0"/>
    </method>
    <method name="d2i_ADMISSIONS" result="ADMISSIONS *">
      <arg name="a" type="ADMISSIONS **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="i2d_ADMISSIONS" result="int">
      <arg name="a" type="ADMISSIONS *" m68kreg="a0"/>
      <arg name="out" type="unsigned char **" m68kreg="a1"/>
    </method>
    <method name="PROFESSION_INFO_get0_professionItems" result="const STACK_OF(ASN1_STRING) *">
      <arg name="pi" type="const PROFESSION_INFO *" m68kreg="a0"/>
    </method>
    <method name="ADMISSIONS_get0_admissionAuthority" result="const GENERAL_NAME *">
      <arg name="a" type="const ADMISSIONS *" m68kreg="a0"/>
    </method>
    <method name="PROFESSION_INFO_set0_professionOIDs" result="void">
      <arg name="pi" type="PROFESSION_INFO *" m68kreg="a0"/>
      <arg name="po" type="STACK_OF(ASN1_OBJECT) *" m68kreg="a1"/>
    </method>
    <method name="d2i_NAMING_AUTHORITY" result="NAMING_AUTHORITY *">
      <arg name="a" type="NAMING_AUTHORITY **" m68kreg="a0"/>
      <arg name="in" type="const unsigned char **" m68kreg="a1"/>
      <arg name="len" type="long" m68kreg="d0"/>
    </method>
    <method name="ADMISSIONS_it" result="const ASN1_ITEM *">
    </method>
    <method name="ADMISSIONS_get0_namingAuthority" result="const NAMING_AUTHORITY *">
      <arg name="a" type="const ADMISSIONS *" m68kreg="a0"/>
    </method>
    <method name="NAMING_AUTHORITY_set0_authorityText" result="void">
      <arg name="n" type="NAMING_AUTHORITY *" m68kreg="a0"/>
      <arg name="namingAuthorityText" type="ASN1_STRING*" m68kreg="a1"/>
    </method>
    <method name="ADMISSIONS_set0_namingAuthority" result="void">
      <arg name="a" type="ADMISSIONS *" m68kreg="a0"/>
      <arg name="na" type="NAMING_AUTHORITY *" m68kreg="a1"/>
    </method>
    <method name="ADMISSIONS_get0_professionInfos" result="const PROFESSION_INFOS *">
      <arg name="a" type="const ADMISSIONS *" m68kreg="a0"/>
    </method>
    <method name="ADMISSION_SYNTAX_new" result="ADMISSION_SYNTAX *">
    </method>
    <method name="EVP_sha512_256" result="const EVP_MD *">
    </method>
    <method name="EVP_sha512_224" result="const EVP_MD *">
    </method>
    <method name="OCSP_basic_sign_ctx" result="int">
      <arg name="brsp" type="OCSP_BASICRESP *" m68kreg="a0"/>
      <arg name="signer" type="X509 *" m68kreg="a1"/>
      <arg name="ctx" type="EVP_MD_CTX *" m68kreg="a2"/>
      <arg name="certs" type="STACK_OF(X509) *" m68kreg="a3"/>
      <arg name="flags" type="unsigned long" m68kreg="d0"/>
    </method>
    <method name="RAND_DRBG_bytes" result="int">
      <arg name="drbg" type="RAND_DRBG *" m68kreg="a0"/>
      <arg name="out" type="unsigned char *" m68kreg="a1"/>
      <arg name="outlen" type="size_t" m68kreg="d0"/>
    </method>
    <method name="RAND_DRBG_secure_new" result="RAND_DRBG *">
      <arg name="type" type="int" m68kreg="d0"/>
      <arg name="flags" type="unsigned int" m68kreg="d1"/>
      <arg name="parent" type="RAND_DRBG *" m68kreg="a0"/>
    </method>
    <method name="OSSL_STORE_SEARCH_by_alias" result="OSSL_STORE_SEARCH *">
      <arg name="alias" type="const char *" m68kreg="a0"/>
    </method>
    <method name="BIO_bind" result="int">
      <arg name="sock" type="int" m68kreg="d0"/>
      <arg name="addr" type="const BIO_ADDR *" m68kreg="a0"/>
      <arg name="options" type="int" m68kreg="d1"/>
    </method>
    <method name="OSSL_STORE_LOADER_set_expect" result="int">
      <arg name="loader" type="OSSL_STORE_LOADER *" m68kreg="a0"/>
      <arg name="expect_function" type="OSSL_STORE_expect_fn" m68kreg="a1"/>
    </method>
    <method name="OSSL_STORE_expect" result="int">
      <arg name="ctx" type="OSSL_STORE_CTX *" m68kreg="a0"/>
      <arg name="expected_type" type="int" m68kreg="d0"/>
    </method>
    <method name="OSSL_STORE_SEARCH_by_key_fingerprint" result="OSSL_STORE_SEARCH *">
      <arg name="digest" type="const EVP_MD *" m68kreg="a0"/>
      <arg name="bytes" type="const unsigned char *" m68kreg="a1"/>
      <arg name="len" type="size_t" m68kreg="d0"/>
    </method>
    <method name="OSSL_STORE_SEARCH_get0_serial" result="const ASN1_INTEGER *">
      <arg name="criterion" type="const OSSL_STORE_SEARCH *" m68kreg="a0"/>
    </method>
    <method name="OSSL_STORE_SEARCH_by_name" result="OSSL_STORE_SEARCH *">
      <arg name="name" type="X509_NAME *" m68kreg="a0"/>
    </method>
    <method name="OSSL_STORE_supports_search" result="int">
      <arg name="ctx" type="OSSL_STORE_CTX *" m68kreg="a0"/>
      <arg name="search_type" type="int" m68kreg="d0"/>
    </method>
    <method name="OSSL_STORE_find" result="int">
      <arg name="ctx" type="OSSL_STORE_CTX *" m68kreg="a0"/>
      <arg name="search" type="OSSL_STORE_SEARCH *" m68kreg="a1"/>
    </method>
    <method name="OSSL_STORE_SEARCH_get_type" result="int">
      <arg name="criterion" type="const OSSL_STORE_SEARCH *" m68kreg="a0"/>
    </method>
    <method name="OSSL_STORE_SEARCH_get0_bytes" result="const unsigned char *">
      <arg name="criterion" type="const OSSL_STORE_SEARCH *" m68kreg="a0"/>
      <arg name="length" type="size_t *" m68kreg="a1"/>
    </method>
    <method name="OSSL_STORE_SEARCH_get0_string" result="const char *">
      <arg name="criterion" type="const OSSL_STORE_SEARCH *" m68kreg="a0"/>
    </method>
    <method name="OSSL_STORE_SEARCH_by_issuer_serial" result="OSSL_STORE_SEARCH *">
      <arg name="name" type="X509_NAME *" m68kreg="a0"/>
      <arg name="serial" type="const ASN1_INTEGER *" m68kreg="a1"/>
    </method>
    <method name="OSSL_STORE_SEARCH_get0_name" result="X509_NAME *">
      <arg name="criterion" type="OSSL_STORE_SEARCH *" m68kreg="a0"/>
    </method>
    <method name="X509_get0_authority_key_id" result="const ASN1_OCTET_STRING *">
      <arg name="x" type="X509 *" m68kreg="a0"/>
    </method>
    <method name="OSSL_STORE_LOADER_set_find" result="int">
      <arg name="loader" type="OSSL_STORE_LOADER *" m68kreg="a0"/>
      <arg name="find_function" type="OSSL_STORE_find_fn" m68kreg="a1"/>
    </method>
    <method name="OSSL_STORE_SEARCH_free" result="void">
      <arg name="search" type="OSSL_STORE_SEARCH *" m68kreg="a0"/>
    </method>
    <method name="OSSL_STORE_SEARCH_get0_digest" result="const EVP_MD *">
      <arg name="criterion" type="const OSSL_STORE_SEARCH *" m68kreg="a0"/>
    </method>
    <method name="RAND_DRBG_set_reseed_defaults" result="int">
      <arg name="master_reseed_interval" type="unsigned int" m68kreg="d0"/>
      <arg name="slave_reseed_interval" type="unsigned int" m68kreg="d1"/>
      <arg name="master_reseed_time_interval" type="time_t" m68kreg="d2"/>
      <arg name="slave_reseed_time_interval" type="time_t" m68kreg="d3"/>
    </method>
    <method name="EVP_PKEY_new_raw_private_key" result="EVP_PKEY *">
      <arg name="type" type="int" m68kreg="d0"/>
      <arg name="e" type="ENGINE *" m68kreg="a0"/>
      <arg name="priv" type="const unsigned char *" m68kreg="a1"/>
      <arg name="len" type="size_t" m68kreg="d1"/>
    </method>
    <method name="EVP_PKEY_new_raw_public_key" result="EVP_PKEY *">
      <arg name="type" type="int" m68kreg="d0"/>
      <arg name="e" type="ENGINE *" m68kreg="a0"/>
      <arg name="pub" type="const unsigned char *" m68kreg="a1"/>
      <arg name="len" type="size_t" m68kreg="d1"/>
    </method>
    <method name="EVP_PKEY_new_CMAC_key" result="EVP_PKEY *">
      <arg name="e" type="ENGINE *" m68kreg="a0"/>
      <arg name="priv" type="const unsigned char *" m68kreg="a1"/>
      <arg name="len" type="size_t" m68kreg="d0"/>
      <arg name="cipher" type="const EVP_CIPHER *" m68kreg="a2"/>
    </method>
    <method name="EVP_PKEY_asn1_set_set_priv_key" result="void">
      <arg name="ameth" type="EVP_PKEY_ASN1_METHOD *" m68kreg="a0"/>
      <arg name="set_priv_key" type="int (*)(EVP_PKEY *pk, const unsigned char *priv, size_t len)" m68kreg="a1"/>
    </method>
    <method name="EVP_PKEY_asn1_set_set_pub_key" result="void">
      <arg name="ameth" type="EVP_PKEY_ASN1_METHOD *" m68kreg="a0"/>
      <arg name="set_pub_key" type="int (*)(EVP_PKEY *pk, const unsigned char *pub, size_t len)" m68kreg="a1"/>
    </method>
    <method name="RAND_DRBG_set_defaults" result="int">
      <arg name="type" type="int" m68kreg="d0"/>
      <arg name="flags" type="unsigned int" m68kreg="d1"/>
    </method>
    <method name="X509_VERIFY_PARAM_get_hostflags" result="unsigned int">
      <arg name="param" type="const X509_VERIFY_PARAM *" m68kreg="a0"/>
    </method>
    <method name="DH_get0_p" result="const BIGNUM *">
      <arg name="dh" type="const DH *" m68kreg="a0"/>
    </method>
    <method name="DH_get0_q" result="const BIGNUM *">
      <arg name="dh" type="const DH *" m68kreg="a0"/>
    </method>
    <method name="DH_get0_g" result="const BIGNUM *">
      <arg name="dh" type="const DH *" m68kreg="a0"/>
    </method>
    <method name="DH_get0_priv_key" result="const BIGNUM *">
      <arg name="dh" type="const DH *" m68kreg="a0"/>
    </method>
    <method name="DH_get0_pub_key" result="const BIGNUM *">
      <arg name="dh" type="const DH *" m68kreg="a0"/>
    </method>
    <method name="DSA_get0_priv_key" result="const BIGNUM *">
      <arg name="d" type="const DSA *" m68kreg="a0"/>
    </method>
    <method name="DSA_get0_pub_key" result="const BIGNUM *">
      <arg name="d" type="const DSA *" m68kreg="a0"/>
    </method>
    <method name="DSA_get0_q" result="const BIGNUM *">
      <arg name="d" type="const DSA *" m68kreg="a0"/>
    </method>
    <method name="DSA_get0_p" result="const BIGNUM *">
      <arg name="d" type="const DSA *" m68kreg="a0"/>
    </method>
    <method name="DSA_get0_g" result="const BIGNUM *">
      <arg name="d" type="const DSA *" m68kreg="a0"/>
    </method>
    <method name="RSA_get0_dmp1" result="const BIGNUM *">
      <arg name="r" type="const RSA *" m68kreg="a0"/>
    </method>
    <method name="RSA_get0_d" result="const BIGNUM *">
      <arg name="d" type="const RSA *" m68kreg="a0"/>
    </method>
    <method name="RSA_get0_n" result="const BIGNUM *">
      <arg name="d" type="const RSA *" m68kreg="a0"/>
    </method>
    <method name="RSA_get0_dmq1" result="const BIGNUM *">
      <arg name="r" type="const RSA *" m68kreg="a0"/>
    </method>
    <method name="RSA_get0_e" result="const BIGNUM *">
      <arg name="d" type="const RSA *" m68kreg="a0"/>
    </method>
    <method name="RSA_get0_q" result="const BIGNUM *">
      <arg name="d" type="const RSA *" m68kreg="a0"/>
    </method>
    <method name="RSA_get0_p" result="const BIGNUM *">
      <arg name="d" type="const RSA *" m68kreg="a0"/>
    </method>
    <method name="RSA_get0_iqmp" result="const BIGNUM *">
      <arg name="r" type="const RSA *" m68kreg="a0"/>
    </method>
    <method name="ECDSA_SIG_get0_r" result="const BIGNUM *">
      <arg name="sig" type="const ECDSA_SIG *" m68kreg="a0"/>
    </method>
    <method name="ECDSA_SIG_get0_s" result="const BIGNUM *">
      <arg name="sig" type="const ECDSA_SIG *" m68kreg="a0"/>
    </method>
    <method name="X509_LOOKUP_meth_get_get_by_fingerprint" result="X509_LOOKUP_get_by_fingerprint_fn">
      <arg name="method" type="const X509_LOOKUP_METHOD *" m68kreg="a0"/>
    </method>
    <method name="X509_LOOKUP_meth_new" result="X509_LOOKUP_METHOD *">
      <arg name="name" type="const char *" m68kreg="a0"/>
    </method>
    <method name="X509_LOOKUP_meth_get_init" result="int (*)(X509_LOOKUP *ctx)">
      <arg name="method" type="const X509_LOOKUP_METHOD*" m68kreg="a0"/>
    </method>
    <method name="X509_LOOKUP_meth_get_get_by_alias" result="X509_LOOKUP_get_by_alias_fn">
      <arg name="method" type="const X509_LOOKUP_METHOD *" m68kreg="a0"/>
    </method>
    <method name="X509_LOOKUP_meth_set_new_item" result="int">
      <arg name="method" type="X509_LOOKUP_METHOD *" m68kreg="a0"/>
      <arg name="new_item" type="int (*)(X509_LOOKUP *ctx)" m68kreg="a1"/>
    </method>
    <method name="X509_LOOKUP_meth_set_shutdown" result="int">
      <arg name="method" type="X509_LOOKUP_METHOD *" m68kreg="a0"/>
      <arg name="__shutdown" type="int (*)(X509_LOOKUP *ctx)" m68kreg="a1"/>
    </method>
    <method name="X509_LOOKUP_meth_get_new_item" result="int (*)(X509_LOOKUP *ctx)">
      <arg name="method" type="const X509_LOOKUP_METHOD*" m68kreg="a0"/>
    </method>
    <method name="X509_LOOKUP_meth_set_ctrl" result="int">
      <arg name="method" type="X509_LOOKUP_METHOD *" m68kreg="a0"/>
      <arg name="ctrl_fn" type="X509_LOOKUP_ctrl_fn" m68kreg="a1"/>
    </method>
    <method name="X509_LOOKUP_meth_set_get_by_issuer_serial" result="int">
      <arg name="method" type="X509_LOOKUP_METHOD *" m68kreg="a0"/>
      <arg name="fn" type="X509_LOOKUP_get_by_issuer_serial_fn" m68kreg="a1"/>
    </method>
    <method name="X509_LOOKUP_get_store" result="X509_STORE *">
      <arg name="ctx" type="const X509_LOOKUP *" m68kreg="a0"/>
    </method>
    <method name="X509_LOOKUP_meth_get_ctrl" result="X509_LOOKUP_ctrl_fn">
      <arg name="method" type="const X509_LOOKUP_METHOD *" m68kreg="a0"/>
    </method>
    <method name="X509_LOOKUP_meth_set_get_by_alias" result="int">
      <arg name="method" type="X509_LOOKUP_METHOD *" m68kreg="a0"/>
      <arg name="fn" type="X509_LOOKUP_get_by_alias_fn" m68kreg="a1"/>
    </method>
    <method name="X509_LOOKUP_meth_get_get_by_subject" result="X509_LOOKUP_get_by_subject_fn">
      <arg name="method" type="const X509_LOOKUP_METHOD *" m68kreg="a0"/>
    </method>
    <method name="X509_LOOKUP_meth_get_free" result="void (*)(X509_LOOKUP *ctx)">
      <arg name="method" type="const X509_LOOKUP_METHOD*" m68kreg="a0"/>
    </method>
    <method name="X509_LOOKUP_meth_set_get_by_subject" result="int">
      <arg name="method" type="X509_LOOKUP_METHOD *" m68kreg="a0"/>
      <arg name="fn" type="X509_LOOKUP_get_by_subject_fn" m68kreg="a1"/>
    </method>
    <method name="X509_LOOKUP_meth_set_free" result="int">
      <arg name="method" type="X509_LOOKUP_METHOD *" m68kreg="a0"/>
      <arg name="free_fn" type="void (*)(X509_LOOKUP *ctx)" m68kreg="a1"/>
    </method>
    <method name="X509_LOOKUP_meth_get_shutdown" result="int (*)(X509_LOOKUP *ctx)">
      <arg name="method" type="const X509_LOOKUP_METHOD*" m68kreg="a0"/>
    </method>
    <method name="X509_LOOKUP_set_method_data" result="int">
      <arg name="ctx" type="X509_LOOKUP *" m68kreg="a0"/>
      <arg name="data" type="void *" m68kreg="a1"/>
    </method>
    <method name="X509_LOOKUP_get_method_data" result="void *">
      <arg name="ctx" type="const X509_LOOKUP *" m68kreg="a0"/>
    </method>
    <method name="X509_LOOKUP_meth_set_get_by_fingerprint" result="int">
      <arg name="method" type="X509_LOOKUP_METHOD *" m68kreg="a0"/>
      <arg name="fn" type="X509_LOOKUP_get_by_fingerprint_fn" m68kreg="a1"/>
    </method>
    <method name="X509_LOOKUP_meth_free" result="void">
      <arg name="method" type="X509_LOOKUP_METHOD *" m68kreg="a0"/>
    </method>
    <method name="X509_OBJECT_set1_X509" result="int">
      <arg name="a" type="X509_OBJECT *" m68kreg="a0"/>
      <arg name="obj" type="X509 *" m68kreg="a1"/>
    </method>
    <method name="X509_LOOKUP_meth_get_get_by_issuer_serial" result="X509_LOOKUP_get_by_issuer_serial_fn">
      <arg name="method" type="const X509_LOOKUP_METHOD *" m68kreg="a0"/>
    </method>
    <method name="X509_LOOKUP_meth_set_init" result="int">
      <arg name="method" type="X509_LOOKUP_METHOD *" m68kreg="a0"/>
      <arg name="init" type="int (*)(X509_LOOKUP *ctx)" m68kreg="a1"/>
    </method>
    <method name="X509_OBJECT_set1_X509_CRL" result="int">
      <arg name="a" type="X509_OBJECT *" m68kreg="a0"/>
      <arg name="obj" type="X509_CRL *" m68kreg="a1"/>
    </method>
    <method name="EVP_PKEY_get_raw_public_key" result="int">
      <arg name="pkey" type="const EVP_PKEY *" m68kreg="a0"/>
      <arg name="pub" type="unsigned char *" m68kreg="a1"/>
      <arg name="len" type="size_t *" m68kreg="a2"/>
    </method>
    <method name="EVP_PKEY_get_raw_private_key" result="int">
      <arg name="pkey" type="const EVP_PKEY *" m68kreg="a0"/>
      <arg name="priv" type="unsigned char *" m68kreg="a1"/>
      <arg name="len" type="size_t *" m68kreg="a2"/>
    </method>
    <method name="EVP_PKEY_asn1_set_get_priv_key" result="void">
      <arg name="ameth" type="EVP_PKEY_ASN1_METHOD *" m68kreg="a0"/>
      <arg name="get_priv_key" type="int (*)(const EVP_PKEY *pk, unsigned char *priv, size_t *len)" m68kreg="a1"/>
    </method>
    <method name="EVP_PKEY_asn1_set_get_pub_key" result="void">
      <arg name="ameth" type="EVP_PKEY_ASN1_METHOD *" m68kreg="a0"/>
      <arg name="get_pub_key" type="int (*)(const EVP_PKEY *pk, unsigned char *pub, size_t *len)" m68kreg="a1"/>
    </method>
    <method name="EVP_PKEY_set_alias_type" result="int">
      <arg name="pkey" type="EVP_PKEY *" m68kreg="a0"/>
      <arg name="type" type="int" m68kreg="d0"/>
    </method>
    <method name="RAND_keep_random_devices_open" result="void">
      <arg name="keep" type="int" m68kreg="d0"/>
    </method>
    <method name="EC_POINT_set_compressed_coordinates" result="int">
      <arg name="group" type="const EC_GROUP *" m68kreg="a0"/>
      <arg name="p" type="EC_POINT *" m68kreg="a1"/>
      <arg name="x" type="const BIGNUM *" m68kreg="a2"/>
      <arg name="y_bit" type="int" m68kreg="d0"/>
      <arg name="ctx" type="BN_CTX *" m68kreg="a3"/>
    </method>
    <method name="EC_POINT_set_affine_coordinates" result="int">
      <arg name="group" type="const EC_GROUP *" m68kreg="a0"/>
      <arg name="p" type="EC_POINT *" m68kreg="a1"/>
      <arg name="x" type="const BIGNUM *" m68kreg="a2"/>
      <arg name="y" type="const BIGNUM *" m68kreg="a3"/>
      <arg name="ctx" type="BN_CTX *" m68kreg="d0"/>
    </method>
    <method name="EC_POINT_get_affine_coordinates" result="int">
      <arg name="group" type="const EC_GROUP *" m68kreg="a0"/>
      <arg name="p" type="const EC_POINT *" m68kreg="a1"/>
      <arg name="x" type="BIGNUM *" m68kreg="a2"/>
      <arg name="y" type="BIGNUM *" m68kreg="a3"/>
      <arg name="ctx" type="BN_CTX *" m68kreg="d0"/>
    </method>
    <method name="EC_GROUP_set_curve" result="int">
      <arg name="group" type="EC_GROUP *" m68kreg="a0"/>
      <arg name="p" type="const BIGNUM *" m68kreg="a1"/>
      <arg name="a" type="const BIGNUM *" m68kreg="a2"/>
      <arg name="b" type="const BIGNUM *" m68kreg="a3"/>
      <arg name="ctx" type="BN_CTX *" m68kreg="d0"/>
    </method>
    <method name="EC_GROUP_get_curve" result="int">
      <arg name="group" type="const EC_GROUP *" m68kreg="a0"/>
      <arg name="p" type="BIGNUM *" m68kreg="a1"/>
      <arg name="a" type="BIGNUM *" m68kreg="a2"/>
      <arg name="b" type="BIGNUM *" m68kreg="a3"/>
      <arg name="ctx" type="BN_CTX *" m68kreg="d0"/>
    </method>
    <method name="OCSP_resp_get0_tbs_sigalg" result="const X509_ALGOR *">
      <arg name="bs" type="const OCSP_BASICRESP *" m68kreg="a0"/>
    </method>
    <method name="OCSP_resp_get0_respdata" result="const OCSP_RESPDATA *">
      <arg name="bs" type="const OCSP_BASICRESP *" m68kreg="a0"/>
    </method>
    <method name="EVP_MD_CTX_set_pkey_ctx" result="void">
      <arg name="ctx" type="EVP_MD_CTX *" m68kreg="a0"/>
      <arg name="pctx" type="EVP_PKEY_CTX *" m68kreg="a1"/>
    </method>
    <method name="EVP_PKEY_meth_set_digest_custom" result="void">
      <arg name="pmeth" type="EVP_PKEY_METHOD *" m68kreg="a0"/>
      <arg name="digest_custom" type="int (*)(EVP_PKEY_CTX *ctx, EVP_MD_CTX *mctx)" m68kreg="a1"/>
    </method>
    <method name="EVP_PKEY_meth_get_digest_custom" result="void">
      <arg name="pmeth" type="EVP_PKEY_METHOD *" m68kreg="a0"/>
      <arg name="pdigest_custom" type="int (**)(EVP_PKEY_CTX *ctx, EVP_MD_CTX *mctx)" m68kreg="a1"/>
    </method>
    <method name="OPENSSL_DIR_read" result="const char *">
      <arg name="ctx" type="OPENSSL_DIR_CTX **" m68kreg="a0"/>
      <arg name="directory" type="const char *" m68kreg="a1"/>
    </method>
    <method name="OPENSSL_DIR_end" result="int">
      <arg name="ctx" type="OPENSSL_DIR_CTX **" m68kreg="a0"/>
    </method>

    <!-- AmiSSL v4.4 - OpenSSL 1.1.1d -->
    <method name="OPENSSL_INIT_set_config_filename" result="int" status="unimplemented">
      <arg name="settings" type="OPENSSL_INIT_SETTINGS *" m68kreg="a0"/>
      <arg name="config_filename" type="const char *" m68kreg="a1"/>
    </method>
    <method name="OPENSSL_INIT_set_config_file_flags" result="void" status="unimplemented">
      <arg name="settings" type="OPENSSL_INIT_SETTINGS *" m68kreg="a0"/>
      <arg name="flags" type="unsigned long" m68kreg="d0"/>
    </method>
    <method name="EVP_PKEY_get0_engine" result="ENGINE *">
      <arg name="pkey" type="const EVP_PKEY *" m68kreg="a0"/>
    </method>
    <method name="X509_get0_authority_serial" result="const ASN1_INTEGER *">
      <arg name="x" type="X509 *" m68kreg="a0"/>
    </method>
    <method name="X509_get0_authority_issuer" result="const GENERAL_NAMES *">
      <arg name="x" type="X509 *" m68kreg="a0"/>
    </method>

    <!-- AmiSSL v4.6 - OpenSSL 1.1.1g -->
    <method name="EVP_PKEY_meth_set_digestsign" result="void">
      <arg name="pmeth" type="EVP_PKEY_METHOD *" m68kreg="a0"/>
      <arg name="digestsign" type="int (*)(EVP_MD_CTX *ctx, unsigned char *sig, size_t *siglen, const unsigned char *tbs, size_t tbslen)" m68kreg="a1"/>
    </method>
    <method name="EVP_PKEY_meth_set_digestverify" result="void">
      <arg name="pmeth" type="EVP_PKEY_METHOD *" m68kreg="a0"/>
      <arg name="digestverify" type="int (*)(EVP_MD_CTX *ctx, const unsigned char *sig, size_t siglen, const unsigned char *tbs, size_t tbslen)" m68kreg="a1"/>
    </method>
    <method name="EVP_PKEY_meth_get_digestverify" result="void">
      <arg name="pmeth" type="EVP_PKEY_METHOD *" m68kreg="a0"/>
      <arg name="digestverify" type="int (**)(EVP_MD_CTX *ctx, const unsigned char *sig, size_t siglen, const unsigned char *tbs, size_t tbslen)" m68kreg="a1"/>
    </method>
    <method name="EVP_PKEY_meth_get_digestsign" result="void">
      <arg name="pmeth" type="EVP_PKEY_METHOD *" m68kreg="a0"/>
      <arg name="digestsign" type="int (**)(EVP_MD_CTX *ctx, unsigned char *sig, size_t *siglen, const unsigned char *tbs, size_t tbslen)" m68kreg="a1"/>
    </method>
    <method name="RSA_get0_pss_params" result="const RSA_PSS_PARAMS *">
      <arg name="r" type="const RSA *" m68kreg="a0"/>
    </method>

    <!-- AmiSSL v4.7 - OpenSSL 1.1.1i -->
    <method name="X509_ALGOR_copy" result="int">
      <arg name="dest" type="X509_ALGOR *" m68kreg="a0"/>
      <arg name="src" type="const X509_ALGOR *" m68kreg="a1"/>
    </method>
    <method name="X509_REQ_set0_signature" result="void">
      <arg name="req" type="X509_REQ *" m68kreg="a0"/>
      <arg name="psig" type="ASN1_BIT_STRING *" m68kreg="a1"/>
    </method>
    <method name="X509_REQ_set1_signature_algo" result="int">
      <arg name="req" type="X509_REQ *" m68kreg="a0"/>
      <arg name="palg" type="X509_ALGOR *" m68kreg="a1"/>
    </method>
    <method name="EC_KEY_decoded_from_explicit_params" result="int">
      <arg name="key" type="const EC_KEY *" m68kreg="a0"/>
    </method>

  </interface>
</library>
