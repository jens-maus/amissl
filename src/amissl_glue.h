
/* This file was generated by idltool 53.35. Do not edit */


/***************************************************************************/

#ifndef GLUE_AMISSL_H
#define GLUE_AMISSL_H 1

#define PROTO_AMISSL_H // Don't include protos
#ifndef EXEC_LIBRARIES_H
#include <exec/libraries.h>
#endif
#
#ifndef EXEC_TYPES_H
#include <exec/types.h>
#endif

#ifndef DOS_DOS_H
#include <dos/dos.h>
#endif

#ifndef AMISSL_AMISSL_H
#include <amissl/amissl.h>
#endif

#if defined(__amigaos4__)
struct AmiSSLIFace;
#define __IFACE_OR_BASE struct AmiSSLIFace *Self
#else
#define __IFACE_OR_BASE struct Library *Self
#endif

int SAVEDS ASM LIB_UNIMPLEMENTED(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_InternalInitAmiSSL(REG(a6, __IFACE_OR_BASE), REG(a0, void * amisslinit));
long SAVEDS ASM LIB_InitAmiSSLA(REG(a6, __IFACE_OR_BASE), REG(a0, struct TagItem * tagList));
long SAVEDS ASM LIB_InitAmiSSL(REG(a6, __IFACE_OR_BASE), ...);
long SAVEDS ASM LIB_CleanupAmiSSLA(REG(a6, __IFACE_OR_BASE), REG(a0, struct TagItem * tagList));
long SAVEDS ASM LIB_CleanupAmiSSL(REG(a6, __IFACE_OR_BASE), ...);
ASN1_TYPE * SAVEDS ASM LIB_ASN1_TYPE_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_ASN1_TYPE_free(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_TYPE * a));
ASN1_TYPE * SAVEDS ASM LIB_d2i_ASN1_TYPE(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_TYPE ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_ASN1_TYPE(REG(a6, __IFACE_OR_BASE), REG(a0, const ASN1_TYPE * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_ASN1_ANY_it(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_ASN1_TYPE_get(REG(a6, __IFACE_OR_BASE), REG(a0, const ASN1_TYPE * a));
void SAVEDS ASM LIB_ASN1_TYPE_set(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_TYPE * a), REG(d0, int type), REG(a1, void * value));
ASN1_OBJECT * SAVEDS ASM LIB_ASN1_OBJECT_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_ASN1_OBJECT_free(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_OBJECT * a));
int SAVEDS ASM LIB_i2d_ASN1_OBJECT(REG(a6, __IFACE_OR_BASE), REG(a0, const ASN1_OBJECT * a), REG(a1, unsigned char ** pp));
ASN1_OBJECT * SAVEDS ASM LIB_d2i_ASN1_OBJECT(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_OBJECT ** a), REG(a1, const unsigned char ** pp), REG(d0, long length));
const ASN1_ITEM * SAVEDS ASM LIB_ASN1_OBJECT_it(REG(a6, __IFACE_OR_BASE));
ASN1_STRING * SAVEDS ASM LIB_ASN1_STRING_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_ASN1_STRING_free(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_STRING * a));
ASN1_STRING * SAVEDS ASM LIB_ASN1_STRING_dup(REG(a6, __IFACE_OR_BASE), REG(a0, const ASN1_STRING * a));
ASN1_STRING * SAVEDS ASM LIB_ASN1_STRING_type_new(REG(a6, __IFACE_OR_BASE), REG(d0, int type));
int SAVEDS ASM LIB_ASN1_STRING_cmp(REG(a6, __IFACE_OR_BASE), REG(a0, const ASN1_STRING * a), REG(a1, const ASN1_STRING * b));
int SAVEDS ASM LIB_ASN1_STRING_set(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_STRING * str), REG(a1, const void * data), REG(d0, int len));
int SAVEDS ASM LIB_ASN1_STRING_length(REG(a6, __IFACE_OR_BASE), REG(a0, const ASN1_STRING * x));
void SAVEDS ASM LIB_ASN1_STRING_length_set(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_STRING * x), REG(d0, int n));
int SAVEDS ASM LIB_ASN1_STRING_type(REG(a6, __IFACE_OR_BASE), REG(a0, const ASN1_STRING * x));
unsigned char * SAVEDS ASM LIB_ASN1_STRING_data(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_STRING * x));
ASN1_BIT_STRING * SAVEDS ASM LIB_ASN1_BIT_STRING_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_ASN1_BIT_STRING_free(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_BIT_STRING * x));
ASN1_BIT_STRING * SAVEDS ASM LIB_d2i_ASN1_BIT_STRING(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_BIT_STRING ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_ASN1_BIT_STRING(REG(a6, __IFACE_OR_BASE), REG(a0, const ASN1_BIT_STRING * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_ASN1_BIT_STRING_it(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_ASN1_BIT_STRING_set(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_BIT_STRING * a), REG(a1, unsigned char * d), REG(d0, int length));
int SAVEDS ASM LIB_ASN1_BIT_STRING_set_bit(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_BIT_STRING * a), REG(d0, int n), REG(d1, int value));
int SAVEDS ASM LIB_ASN1_BIT_STRING_get_bit(REG(a6, __IFACE_OR_BASE), REG(a0, const ASN1_BIT_STRING * a), REG(d0, int n));
int SAVEDS ASM LIB_ASN1_BIT_STRING_name_print(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * out), REG(a1, ASN1_BIT_STRING * bs), REG(a2, BIT_STRING_BITNAME * tbl), REG(d0, int indent));
int SAVEDS ASM LIB_ASN1_BIT_STRING_num_asc(REG(a6, __IFACE_OR_BASE), REG(a0, const char * name), REG(a1, BIT_STRING_BITNAME * tbl));
int SAVEDS ASM LIB_ASN1_BIT_STRING_set_asc(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_BIT_STRING * bs), REG(a1, const char * name), REG(d0, int value), REG(a2, BIT_STRING_BITNAME * tbl));
ASN1_INTEGER * SAVEDS ASM LIB_ASN1_INTEGER_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_ASN1_INTEGER_free(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_INTEGER * x));
ASN1_INTEGER * SAVEDS ASM LIB_d2i_ASN1_INTEGER(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_INTEGER ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_ASN1_INTEGER(REG(a6, __IFACE_OR_BASE), REG(a0, const ASN1_INTEGER * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_ASN1_INTEGER_it(REG(a6, __IFACE_OR_BASE));
ASN1_INTEGER * SAVEDS ASM LIB_d2i_ASN1_UINTEGER(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_INTEGER ** a), REG(a1, const unsigned char ** pp), REG(d0, long length));
ASN1_INTEGER * SAVEDS ASM LIB_ASN1_INTEGER_dup(REG(a6, __IFACE_OR_BASE), REG(a0, const ASN1_INTEGER * x));
int SAVEDS ASM LIB_ASN1_INTEGER_cmp(REG(a6, __IFACE_OR_BASE), REG(a0, const ASN1_INTEGER * x), REG(a1, const ASN1_INTEGER * y));
ASN1_ENUMERATED * SAVEDS ASM LIB_ASN1_ENUMERATED_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_ASN1_ENUMERATED_free(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_ENUMERATED * x));
ASN1_ENUMERATED * SAVEDS ASM LIB_d2i_ASN1_ENUMERATED(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_ENUMERATED ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_ASN1_ENUMERATED(REG(a6, __IFACE_OR_BASE), REG(a0, const ASN1_ENUMERATED * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_ASN1_ENUMERATED_it(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_ASN1_UTCTIME_check(REG(a6, __IFACE_OR_BASE), REG(a0, const ASN1_UTCTIME * a));
ASN1_UTCTIME * SAVEDS ASM LIB_ASN1_UTCTIME_set(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_UTCTIME * s), REG(d0, time_t t));
int SAVEDS ASM LIB_ASN1_UTCTIME_set_string(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_UTCTIME * s), REG(a1, const char * str));
int SAVEDS ASM LIB_ASN1_UTCTIME_cmp_time_t(REG(a6, __IFACE_OR_BASE), REG(a0, const ASN1_UTCTIME * s), REG(d0, time_t t));
int SAVEDS ASM LIB_ASN1_GENERALIZEDTIME_check(REG(a6, __IFACE_OR_BASE), REG(a0, const ASN1_GENERALIZEDTIME * a));
ASN1_GENERALIZEDTIME * SAVEDS ASM LIB_ASN1_GENERALIZEDTIME_set(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_GENERALIZEDTIME * s), REG(d0, time_t t));
int SAVEDS ASM LIB_ASN1_GENERALIZEDTIME_set_string(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_GENERALIZEDTIME * s), REG(a1, const char * str));
ASN1_OCTET_STRING * SAVEDS ASM LIB_ASN1_OCTET_STRING_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_ASN1_OCTET_STRING_free(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_OCTET_STRING * x));
ASN1_OCTET_STRING * SAVEDS ASM LIB_d2i_ASN1_OCTET_STRING(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_OCTET_STRING ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_ASN1_OCTET_STRING(REG(a6, __IFACE_OR_BASE), REG(a0, const ASN1_OCTET_STRING * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_ASN1_OCTET_STRING_it(REG(a6, __IFACE_OR_BASE));
ASN1_OCTET_STRING * SAVEDS ASM LIB_ASN1_OCTET_STRING_dup(REG(a6, __IFACE_OR_BASE), REG(a0, const ASN1_OCTET_STRING * a));
int SAVEDS ASM LIB_ASN1_OCTET_STRING_cmp(REG(a6, __IFACE_OR_BASE), REG(a0, const ASN1_OCTET_STRING * a), REG(a1, const ASN1_OCTET_STRING * b));
int SAVEDS ASM LIB_ASN1_OCTET_STRING_set(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_OCTET_STRING * str), REG(a1, const unsigned char * data), REG(d0, int len));
ASN1_VISIBLESTRING * SAVEDS ASM LIB_ASN1_VISIBLESTRING_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_ASN1_VISIBLESTRING_free(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_VISIBLESTRING * a));
ASN1_VISIBLESTRING * SAVEDS ASM LIB_d2i_ASN1_VISIBLESTRING(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_VISIBLESTRING ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_ASN1_VISIBLESTRING(REG(a6, __IFACE_OR_BASE), REG(a0, const ASN1_VISIBLESTRING * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_ASN1_VISIBLESTRING_it(REG(a6, __IFACE_OR_BASE));
ASN1_UNIVERSALSTRING * SAVEDS ASM LIB_ASN1_UNIVERSALSTRING_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_ASN1_UNIVERSALSTRING_free(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_UNIVERSALSTRING * a));
ASN1_UNIVERSALSTRING * SAVEDS ASM LIB_d2i_ASN1_UNIVERSALSTRING(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_UNIVERSALSTRING ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_ASN1_UNIVERSALSTRING(REG(a6, __IFACE_OR_BASE), REG(a0, const ASN1_UNIVERSALSTRING * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_ASN1_UNIVERSALSTRING_it(REG(a6, __IFACE_OR_BASE));
ASN1_UTF8STRING * SAVEDS ASM LIB_ASN1_UTF8STRING_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_ASN1_UTF8STRING_free(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_UTF8STRING * x));
ASN1_UTF8STRING * SAVEDS ASM LIB_d2i_ASN1_UTF8STRING(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_UTF8STRING ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_ASN1_UTF8STRING(REG(a6, __IFACE_OR_BASE), REG(a0, const ASN1_UTF8STRING * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_ASN1_UTF8STRING_it(REG(a6, __IFACE_OR_BASE));
ASN1_NULL * SAVEDS ASM LIB_ASN1_NULL_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_ASN1_NULL_free(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_NULL * a));
ASN1_NULL * SAVEDS ASM LIB_d2i_ASN1_NULL(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_NULL ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_ASN1_NULL(REG(a6, __IFACE_OR_BASE), REG(a0, const ASN1_NULL * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_ASN1_NULL_it(REG(a6, __IFACE_OR_BASE));
ASN1_BMPSTRING * SAVEDS ASM LIB_ASN1_BMPSTRING_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_ASN1_BMPSTRING_free(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_BMPSTRING * a));
ASN1_BMPSTRING * SAVEDS ASM LIB_d2i_ASN1_BMPSTRING(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_BMPSTRING ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_ASN1_BMPSTRING(REG(a6, __IFACE_OR_BASE), REG(a0, const ASN1_BMPSTRING * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_ASN1_BMPSTRING_it(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_UTF8_getc(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * str), REG(d0, int len), REG(a1, unsigned long * val));
int SAVEDS ASM LIB_UTF8_putc(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned char * str), REG(d0, int len), REG(d1, unsigned long value));
ASN1_STRING * SAVEDS ASM LIB_ASN1_PRINTABLE_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_ASN1_PRINTABLE_free(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_STRING * a));
ASN1_STRING * SAVEDS ASM LIB_d2i_ASN1_PRINTABLE(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_STRING ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_ASN1_PRINTABLE(REG(a6, __IFACE_OR_BASE), REG(a0, const ASN1_STRING * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_ASN1_PRINTABLE_it(REG(a6, __IFACE_OR_BASE));
ASN1_STRING * SAVEDS ASM LIB_DIRECTORYSTRING_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_DIRECTORYSTRING_free(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_STRING * a));
ASN1_STRING * SAVEDS ASM LIB_d2i_DIRECTORYSTRING(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_STRING ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_DIRECTORYSTRING(REG(a6, __IFACE_OR_BASE), REG(a0, const ASN1_STRING * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_DIRECTORYSTRING_it(REG(a6, __IFACE_OR_BASE));
ASN1_STRING * SAVEDS ASM LIB_DISPLAYTEXT_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_DISPLAYTEXT_free(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_STRING * a));
ASN1_STRING * SAVEDS ASM LIB_d2i_DISPLAYTEXT(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_STRING ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_DISPLAYTEXT(REG(a6, __IFACE_OR_BASE), REG(a0, const ASN1_STRING * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_DISPLAYTEXT_it(REG(a6, __IFACE_OR_BASE));
ASN1_PRINTABLESTRING * SAVEDS ASM LIB_ASN1_PRINTABLESTRING_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_ASN1_PRINTABLESTRING_free(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_PRINTABLESTRING * a));
ASN1_PRINTABLESTRING * SAVEDS ASM LIB_d2i_ASN1_PRINTABLESTRING(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_PRINTABLESTRING ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_ASN1_PRINTABLESTRING(REG(a6, __IFACE_OR_BASE), REG(a0, const ASN1_PRINTABLESTRING * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_ASN1_PRINTABLESTRING_it(REG(a6, __IFACE_OR_BASE));
ASN1_T61STRING * SAVEDS ASM LIB_ASN1_T61STRING_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_ASN1_T61STRING_free(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_T61STRING * a));
ASN1_T61STRING * SAVEDS ASM LIB_d2i_ASN1_T61STRING(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_T61STRING ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_ASN1_T61STRING(REG(a6, __IFACE_OR_BASE), REG(a0, const ASN1_T61STRING * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_ASN1_T61STRING_it(REG(a6, __IFACE_OR_BASE));
ASN1_IA5STRING * SAVEDS ASM LIB_ASN1_IA5STRING_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_ASN1_IA5STRING_free(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_IA5STRING * a));
ASN1_IA5STRING * SAVEDS ASM LIB_d2i_ASN1_IA5STRING(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_IA5STRING ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_ASN1_IA5STRING(REG(a6, __IFACE_OR_BASE), REG(a0, const ASN1_IA5STRING * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_ASN1_IA5STRING_it(REG(a6, __IFACE_OR_BASE));
ASN1_GENERALSTRING * SAVEDS ASM LIB_ASN1_GENERALSTRING_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_ASN1_GENERALSTRING_free(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_GENERALSTRING * a));
ASN1_GENERALSTRING * SAVEDS ASM LIB_d2i_ASN1_GENERALSTRING(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_GENERALSTRING ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_ASN1_GENERALSTRING(REG(a6, __IFACE_OR_BASE), REG(a0, const ASN1_GENERALSTRING * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_ASN1_GENERALSTRING_it(REG(a6, __IFACE_OR_BASE));
ASN1_UTCTIME * SAVEDS ASM LIB_ASN1_UTCTIME_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_ASN1_UTCTIME_free(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_UTCTIME * a));
ASN1_UTCTIME * SAVEDS ASM LIB_d2i_ASN1_UTCTIME(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_UTCTIME ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_ASN1_UTCTIME(REG(a6, __IFACE_OR_BASE), REG(a0, const ASN1_UTCTIME * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_ASN1_UTCTIME_it(REG(a6, __IFACE_OR_BASE));
ASN1_GENERALIZEDTIME * SAVEDS ASM LIB_ASN1_GENERALIZEDTIME_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_ASN1_GENERALIZEDTIME_free(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_GENERALIZEDTIME * x));
ASN1_GENERALIZEDTIME * SAVEDS ASM LIB_d2i_ASN1_GENERALIZEDTIME(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_GENERALIZEDTIME ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_ASN1_GENERALIZEDTIME(REG(a6, __IFACE_OR_BASE), REG(a0, const ASN1_GENERALIZEDTIME * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_ASN1_GENERALIZEDTIME_it(REG(a6, __IFACE_OR_BASE));
ASN1_TIME * SAVEDS ASM LIB_ASN1_TIME_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_ASN1_TIME_free(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_TIME * a));
ASN1_TIME * SAVEDS ASM LIB_d2i_ASN1_TIME(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_TIME ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_ASN1_TIME(REG(a6, __IFACE_OR_BASE), REG(a0, const ASN1_TIME * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_ASN1_TIME_it(REG(a6, __IFACE_OR_BASE));
ASN1_TIME * SAVEDS ASM LIB_ASN1_TIME_set(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_TIME * s), REG(d0, time_t t));
int SAVEDS ASM LIB_ASN1_TIME_check(REG(a6, __IFACE_OR_BASE), REG(a0, const ASN1_TIME * t));
ASN1_GENERALIZEDTIME * SAVEDS ASM LIB_ASN1_TIME_to_generalizedtime(REG(a6, __IFACE_OR_BASE), REG(a0, const ASN1_TIME * t), REG(a1, ASN1_GENERALIZEDTIME ** out));
int SAVEDS ASM LIB_i2a_ASN1_INTEGER(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, const ASN1_INTEGER * a));
int SAVEDS ASM LIB_a2i_ASN1_INTEGER(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, ASN1_INTEGER * bs), REG(a2, char * buf), REG(d0, int size));
int SAVEDS ASM LIB_i2a_ASN1_ENUMERATED(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, const ASN1_ENUMERATED * a));
int SAVEDS ASM LIB_a2i_ASN1_ENUMERATED(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, ASN1_ENUMERATED * bs), REG(a2, char * buf), REG(d0, int size));
int SAVEDS ASM LIB_i2a_ASN1_OBJECT(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, const ASN1_OBJECT * a));
int SAVEDS ASM LIB_a2i_ASN1_STRING(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, ASN1_STRING * bs), REG(a2, char * buf), REG(d0, int size));
int SAVEDS ASM LIB_i2a_ASN1_STRING(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, const ASN1_STRING * a), REG(d0, int type));
int SAVEDS ASM LIB_i2t_ASN1_OBJECT(REG(a6, __IFACE_OR_BASE), REG(a0, char * buf), REG(d0, int buf_len), REG(a1, const ASN1_OBJECT * a));
int SAVEDS ASM LIB_a2d_ASN1_OBJECT(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned char * out), REG(d0, int olen), REG(a1, const char * buf), REG(d1, int num));
ASN1_OBJECT * SAVEDS ASM LIB_ASN1_OBJECT_create(REG(a6, __IFACE_OR_BASE), REG(d0, int nid), REG(a0, unsigned char * data), REG(d1, int len), REG(a1, const char * sn), REG(a2, const char * ln));
int SAVEDS ASM LIB_ASN1_INTEGER_set(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_INTEGER * a), REG(d0, long v));
long SAVEDS ASM LIB_ASN1_INTEGER_get(REG(a6, __IFACE_OR_BASE), REG(a0, const ASN1_INTEGER * a));
ASN1_INTEGER * SAVEDS ASM LIB_BN_to_ASN1_INTEGER(REG(a6, __IFACE_OR_BASE), REG(a0, const BIGNUM * bn), REG(a1, ASN1_INTEGER * ai));
BIGNUM * SAVEDS ASM LIB_ASN1_INTEGER_to_BN(REG(a6, __IFACE_OR_BASE), REG(a0, const ASN1_INTEGER * ai), REG(a1, BIGNUM * bn));
int SAVEDS ASM LIB_ASN1_ENUMERATED_set(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_ENUMERATED * a), REG(d0, long v));
long SAVEDS ASM LIB_ASN1_ENUMERATED_get(REG(a6, __IFACE_OR_BASE), REG(a0, const ASN1_ENUMERATED * a));
ASN1_ENUMERATED * SAVEDS ASM LIB_BN_to_ASN1_ENUMERATED(REG(a6, __IFACE_OR_BASE), REG(a0, const BIGNUM * bn), REG(a1, ASN1_ENUMERATED * ai));
BIGNUM * SAVEDS ASM LIB_ASN1_ENUMERATED_to_BN(REG(a6, __IFACE_OR_BASE), REG(a0, const ASN1_ENUMERATED * ai), REG(a1, BIGNUM * bn));
int SAVEDS ASM LIB_ASN1_PRINTABLE_type(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * s), REG(d0, int max));
unsigned long SAVEDS ASM LIB_ASN1_tag2bit(REG(a6, __IFACE_OR_BASE), REG(d0, int tag));
int SAVEDS ASM LIB_ASN1_get_object(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char ** pp), REG(a1, long * plength), REG(a2, int * ptag), REG(a3, int * pclass), REG(d0, long omax));
int SAVEDS ASM LIB_ASN1_check_infinite_end(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned char ** p), REG(d0, long len));
void SAVEDS ASM LIB_ASN1_put_object(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned char ** pp), REG(d0, int constructed), REG(d1, int length), REG(d2, int tag), REG(d3, int xclass));
int SAVEDS ASM LIB_ASN1_object_size(REG(a6, __IFACE_OR_BASE), REG(d0, int constructed), REG(d1, int length), REG(d2, int tag));
void * SAVEDS ASM LIB_ASN1_dup(REG(a6, __IFACE_OR_BASE), REG(a0, i2d_of_void * i2d), REG(a1, d2i_of_void * d2i), REG(a2, const void * x));
void * SAVEDS ASM LIB_ASN1_item_dup(REG(a6, __IFACE_OR_BASE), REG(a0, const ASN1_ITEM * it), REG(a1, const void * x));
int SAVEDS ASM LIB_ASN1_STRING_to_UTF8(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned char ** out), REG(a1, const ASN1_STRING * in));
void * SAVEDS ASM LIB_ASN1_d2i_bio(REG(a6, __IFACE_OR_BASE), REG(a0, void * (*xnew)(void)), REG(a1, d2i_of_void * d2i), REG(a2, BIO * in), REG(a3, void ** x));
void * SAVEDS ASM LIB_ASN1_item_d2i_bio(REG(a6, __IFACE_OR_BASE), REG(a0, const ASN1_ITEM * it), REG(a1, BIO * in), REG(a2, void * x));
int SAVEDS ASM LIB_ASN1_i2d_bio(REG(a6, __IFACE_OR_BASE), REG(a0, i2d_of_void * i2d), REG(a1, BIO * out), REG(a2, const void * x));
int SAVEDS ASM LIB_ASN1_item_i2d_bio(REG(a6, __IFACE_OR_BASE), REG(a0, const ASN1_ITEM * it), REG(a1, BIO * out), REG(a2, const void * x));
int SAVEDS ASM LIB_ASN1_UTCTIME_print(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * fp), REG(a1, const ASN1_UTCTIME * a));
int SAVEDS ASM LIB_ASN1_GENERALIZEDTIME_print(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * fp), REG(a1, const ASN1_GENERALIZEDTIME * a));
int SAVEDS ASM LIB_ASN1_TIME_print(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * fp), REG(a1, const ASN1_TIME * a));
int SAVEDS ASM LIB_ASN1_STRING_print(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, const ASN1_STRING * v));
int SAVEDS ASM LIB_ASN1_STRING_print_ex(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * out), REG(a1, const ASN1_STRING * str), REG(d0, unsigned long flags));
int SAVEDS ASM LIB_ASN1_parse(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, const unsigned char * pp), REG(d0, long len), REG(d1, int indent));
int SAVEDS ASM LIB_ASN1_parse_dump(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, const unsigned char * pp), REG(d0, long len), REG(d1, int indent), REG(d2, int dump));
const char * SAVEDS ASM LIB_ASN1_tag2str(REG(a6, __IFACE_OR_BASE), REG(d0, int tag));
int SAVEDS ASM LIB_ASN1_UNIVERSALSTRING_to_string(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_UNIVERSALSTRING * s));
int SAVEDS ASM LIB_ASN1_TYPE_set_octetstring(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_TYPE * a), REG(a1, unsigned char * data), REG(d0, int len));
int SAVEDS ASM LIB_ASN1_TYPE_get_octetstring(REG(a6, __IFACE_OR_BASE), REG(a0, const ASN1_TYPE * a), REG(a1, unsigned char * data), REG(d0, int max_len));
int SAVEDS ASM LIB_ASN1_TYPE_set_int_octetstring(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_TYPE * a), REG(d0, long num), REG(a1, unsigned char * data), REG(d1, int len));
int SAVEDS ASM LIB_ASN1_TYPE_get_int_octetstring(REG(a6, __IFACE_OR_BASE), REG(a0, const ASN1_TYPE * a), REG(a1, long * num), REG(a2, unsigned char * data), REG(d0, int max_len));
void * SAVEDS ASM LIB_ASN1_item_unpack(REG(a6, __IFACE_OR_BASE), REG(a0, const ASN1_STRING * oct), REG(a1, const ASN1_ITEM * it));
ASN1_STRING * SAVEDS ASM LIB_ASN1_item_pack(REG(a6, __IFACE_OR_BASE), REG(a0, void * obj), REG(a1, const ASN1_ITEM * it), REG(a2, ASN1_OCTET_STRING ** oct));
void SAVEDS ASM LIB_ASN1_STRING_set_default_mask(REG(a6, __IFACE_OR_BASE), REG(d0, unsigned long mask));
int SAVEDS ASM LIB_ASN1_STRING_set_default_mask_asc(REG(a6, __IFACE_OR_BASE), REG(a0, const char * p));
unsigned long SAVEDS ASM LIB_ASN1_STRING_get_default_mask(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_ASN1_mbstring_copy(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_STRING ** out), REG(a1, const unsigned char * in), REG(d0, int len), REG(d1, int inform), REG(d2, unsigned long mask));
int SAVEDS ASM LIB_ASN1_mbstring_ncopy(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_STRING ** out), REG(a1, const unsigned char * in), REG(d0, int len), REG(d1, int inform), REG(d2, unsigned long mask), REG(d3, long minsize), REG(d4, long maxsize));
ASN1_STRING * SAVEDS ASM LIB_ASN1_STRING_set_by_NID(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_STRING ** out), REG(a1, const unsigned char * in), REG(d0, int inlen), REG(d1, int inform), REG(d2, int nid));
ASN1_STRING_TABLE * SAVEDS ASM LIB_ASN1_STRING_TABLE_get(REG(a6, __IFACE_OR_BASE), REG(d0, int nid));
int SAVEDS ASM LIB_ASN1_STRING_TABLE_add(REG(a6, __IFACE_OR_BASE), REG(d0, int a), REG(d1, long b), REG(d2, long c), REG(d3, unsigned long d), REG(d4, unsigned long e));
void SAVEDS ASM LIB_ASN1_STRING_TABLE_cleanup(REG(a6, __IFACE_OR_BASE));
ASN1_VALUE * SAVEDS ASM LIB_ASN1_item_new(REG(a6, __IFACE_OR_BASE), REG(a0, const ASN1_ITEM * it));
void SAVEDS ASM LIB_ASN1_item_free(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_VALUE * val), REG(a1, const ASN1_ITEM * it));
ASN1_VALUE * SAVEDS ASM LIB_ASN1_item_d2i(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_VALUE ** val), REG(a1, const unsigned char ** in), REG(d0, long len), REG(a2, const ASN1_ITEM * it));
int SAVEDS ASM LIB_ASN1_item_i2d(REG(a6, __IFACE_OR_BASE), REG(a0, const ASN1_VALUE * val), REG(a1, unsigned char ** out), REG(a2, const ASN1_ITEM * it));
void SAVEDS ASM LIB_ASN1_add_oid_module(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_ERR_load_ASN1_strings(REG(a6, __IFACE_OR_BASE));
const ASN1_ITEM * SAVEDS ASM LIB_ASN1_BOOLEAN_it(REG(a6, __IFACE_OR_BASE));
const ASN1_ITEM * SAVEDS ASM LIB_ASN1_TBOOLEAN_it(REG(a6, __IFACE_OR_BASE));
const ASN1_ITEM * SAVEDS ASM LIB_ASN1_FBOOLEAN_it(REG(a6, __IFACE_OR_BASE));
const ASN1_ITEM * SAVEDS ASM LIB_ASN1_SEQUENCE_it(REG(a6, __IFACE_OR_BASE));
const ASN1_ITEM * SAVEDS ASM LIB_CBIGNUM_it(REG(a6, __IFACE_OR_BASE));
const ASN1_ITEM * SAVEDS ASM LIB_BIGNUM_it(REG(a6, __IFACE_OR_BASE));
const ASN1_ITEM * SAVEDS ASM LIB_LONG_it(REG(a6, __IFACE_OR_BASE));
const ASN1_ITEM * SAVEDS ASM LIB_ZLONG_it(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_ASN1_item_ex_new(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_VALUE ** pval), REG(a1, const ASN1_ITEM * it));
void SAVEDS ASM LIB_ASN1_item_ex_free(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_VALUE ** pval), REG(a1, const ASN1_ITEM * it));
int SAVEDS ASM LIB_ASN1_item_ex_d2i(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_VALUE ** pval), REG(a1, const unsigned char ** in), REG(d0, long len), REG(a2, const ASN1_ITEM * it), REG(d1, int tag), REG(d2, int aclass), REG(d3, char opt), REG(a3, ASN1_TLC * ctx));
int SAVEDS ASM LIB_ASN1_item_ex_i2d(REG(a6, __IFACE_OR_BASE), REG(a0, const ASN1_VALUE ** pval), REG(a1, unsigned char ** out), REG(a2, const ASN1_ITEM * it), REG(d0, int tag), REG(d1, int aclass));
size_t SAVEDS ASM LIB_BIO_ctrl_pending(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * b));
size_t SAVEDS ASM LIB_BIO_ctrl_wpending(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * b));
size_t SAVEDS ASM LIB_BIO_ctrl_get_write_guarantee(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * b));
size_t SAVEDS ASM LIB_BIO_ctrl_get_read_request(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * b));
int SAVEDS ASM LIB_BIO_ctrl_reset_read_request(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * b));
int SAVEDS ASM LIB_BIO_set_ex_data(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bio), REG(d0, int idx), REG(a1, void * data));
void * SAVEDS ASM LIB_BIO_get_ex_data(REG(a6, __IFACE_OR_BASE), REG(a0, const BIO * bio), REG(d0, int idx));
int SAVEDS ASM LIB_OBSOLETE_BIO_get_ex_new_index(REG(a6, __IFACE_OR_BASE), REG(d0, long argl), REG(a0, void * argp), REG(a1, CRYPTO_EX_new * new_func), REG(a2, CRYPTO_EX_dup * dup_func), REG(a3, CRYPTO_EX_free * free_func));
uint64_t SAVEDS ASM LIB_BIO_number_read(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bio));
uint64_t SAVEDS ASM LIB_BIO_number_written(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bio));
const BIO_METHOD * SAVEDS ASM LIB_BIO_s_file(REG(a6, __IFACE_OR_BASE));
BIO * SAVEDS ASM LIB_BIO_new_file(REG(a6, __IFACE_OR_BASE), REG(a0, const char * filename), REG(a1, const char * mode));
BIO * SAVEDS ASM LIB_BIO_new_fp_amiga(REG(a6, __IFACE_OR_BASE), REG(a0, BPTR stream), REG(d0, int close_flag));
BIO * SAVEDS ASM LIB_BIO_new(REG(a6, __IFACE_OR_BASE), REG(a0, const BIO_METHOD * type));
int SAVEDS ASM LIB_BIO_free(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * a));
void SAVEDS ASM LIB_BIO_vfree(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * a));
int SAVEDS ASM LIB_BIO_read(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * b), REG(a1, void * data), REG(d0, int dlen));
int SAVEDS ASM LIB_BIO_gets(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, char * buf), REG(d0, int size));
int SAVEDS ASM LIB_BIO_write(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * b), REG(a1, const void * data), REG(d0, int dlen));
int SAVEDS ASM LIB_BIO_puts(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, const char * buf));
int SAVEDS ASM LIB_BIO_indent(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * b), REG(d0, int indent), REG(d1, int max));
long SAVEDS ASM LIB_BIO_ctrl(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(d0, int cmd), REG(d1, long larg), REG(a1, void * parg));
long SAVEDS ASM LIB_BIO_callback_ctrl(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * b), REG(d0, int cmd), REG(a1, BIO_info_cb * fp));
void * SAVEDS ASM LIB_BIO_ptr_ctrl(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(d0, int cmd), REG(d1, long larg));
long SAVEDS ASM LIB_BIO_int_ctrl(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(d0, int cmd), REG(d1, long larg), REG(d2, int iarg));
BIO * SAVEDS ASM LIB_BIO_push(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * b), REG(a1, BIO * append));
BIO * SAVEDS ASM LIB_BIO_pop(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * b));
void SAVEDS ASM LIB_BIO_free_all(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * a));
BIO * SAVEDS ASM LIB_BIO_find_type(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * b), REG(d0, int bio_type));
BIO * SAVEDS ASM LIB_BIO_next(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * b));
BIO * SAVEDS ASM LIB_BIO_get_retry_BIO(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bio), REG(a1, int * reason));
int SAVEDS ASM LIB_BIO_get_retry_reason(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bio));
BIO * SAVEDS ASM LIB_BIO_dup_chain(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * in));
int SAVEDS ASM LIB_BIO_nread0(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bio), REG(a1, char ** buf));
int SAVEDS ASM LIB_BIO_nread(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bio), REG(a1, char ** buf), REG(d0, int num));
int SAVEDS ASM LIB_BIO_nwrite0(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bio), REG(a1, char ** buf));
int SAVEDS ASM LIB_BIO_nwrite(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bio), REG(a1, char ** buf), REG(d0, int num));
long SAVEDS ASM LIB_BIO_debug_callback(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bio), REG(d0, int cmd), REG(a1, const char * argp), REG(d1, int argi), REG(d2, long argl), REG(d3, long ret));
const BIO_METHOD * SAVEDS ASM LIB_BIO_s_mem(REG(a6, __IFACE_OR_BASE));
BIO * SAVEDS ASM LIB_BIO_new_mem_buf(REG(a6, __IFACE_OR_BASE), REG(a0, const void * buf), REG(d0, int len));
const BIO_METHOD * SAVEDS ASM LIB_BIO_s_socket(REG(a6, __IFACE_OR_BASE));
const BIO_METHOD * SAVEDS ASM LIB_BIO_s_connect(REG(a6, __IFACE_OR_BASE));
const BIO_METHOD * SAVEDS ASM LIB_BIO_s_accept(REG(a6, __IFACE_OR_BASE));
const BIO_METHOD * SAVEDS ASM LIB_BIO_s_fd(REG(a6, __IFACE_OR_BASE));
const BIO_METHOD * SAVEDS ASM LIB_BIO_s_log(REG(a6, __IFACE_OR_BASE));
const BIO_METHOD * SAVEDS ASM LIB_BIO_s_bio(REG(a6, __IFACE_OR_BASE));
const BIO_METHOD * SAVEDS ASM LIB_BIO_s_null(REG(a6, __IFACE_OR_BASE));
const BIO_METHOD * SAVEDS ASM LIB_BIO_f_null(REG(a6, __IFACE_OR_BASE));
const BIO_METHOD * SAVEDS ASM LIB_BIO_f_buffer(REG(a6, __IFACE_OR_BASE));
const BIO_METHOD * SAVEDS ASM LIB_BIO_f_nbio_test(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_BIO_sock_should_retry(REG(a6, __IFACE_OR_BASE), REG(d0, int i));
int SAVEDS ASM LIB_BIO_sock_non_fatal_error(REG(a6, __IFACE_OR_BASE), REG(d0, int error));
int SAVEDS ASM LIB_BIO_fd_should_retry(REG(a6, __IFACE_OR_BASE), REG(d0, int i));
int SAVEDS ASM LIB_BIO_fd_non_fatal_error(REG(a6, __IFACE_OR_BASE), REG(d0, int error));
int SAVEDS ASM LIB_BIO_dump(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * b), REG(a1, const void * bytes), REG(d0, int len));
int SAVEDS ASM LIB_BIO_dump_indent(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * b), REG(a1, const void * bytes), REG(d0, int len), REG(d1, int indent));
struct hostent * SAVEDS ASM LIB_BIO_gethostbyname(REG(a6, __IFACE_OR_BASE), REG(a0, const char * name));
int SAVEDS ASM LIB_BIO_sock_error(REG(a6, __IFACE_OR_BASE), REG(d0, int sock));
int SAVEDS ASM LIB_BIO_socket_ioctl(REG(a6, __IFACE_OR_BASE), REG(d0, int fd), REG(d1, long type), REG(a0, void * arg));
int SAVEDS ASM LIB_BIO_socket_nbio(REG(a6, __IFACE_OR_BASE), REG(d0, int fd), REG(d1, int mode));
int SAVEDS ASM LIB_BIO_get_port(REG(a6, __IFACE_OR_BASE), REG(a0, const char * str), REG(a1, unsigned short * port_ptr));
int SAVEDS ASM LIB_BIO_get_host_ip(REG(a6, __IFACE_OR_BASE), REG(a0, const char * str), REG(a1, unsigned char * ip));
int SAVEDS ASM LIB_BIO_get_accept_socket(REG(a6, __IFACE_OR_BASE), REG(a0, char * host_port), REG(d0, int mode));
int SAVEDS ASM LIB_BIO_accept(REG(a6, __IFACE_OR_BASE), REG(d0, int sock), REG(a0, char ** ip_port));
int SAVEDS ASM LIB_BIO_sock_init(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_BIO_set_tcp_ndelay(REG(a6, __IFACE_OR_BASE), REG(d0, int sock), REG(d1, int turn_on));
BIO * SAVEDS ASM LIB_BIO_new_socket(REG(a6, __IFACE_OR_BASE), REG(d0, int sock), REG(d1, int close_flag));
BIO * SAVEDS ASM LIB_BIO_new_fd(REG(a6, __IFACE_OR_BASE), REG(d0, int fd), REG(d1, int close_flag));
BIO * SAVEDS ASM LIB_BIO_new_connect(REG(a6, __IFACE_OR_BASE), REG(a0, const char * host_port));
BIO * SAVEDS ASM LIB_BIO_new_accept(REG(a6, __IFACE_OR_BASE), REG(a0, const char * host_port));
int SAVEDS ASM LIB_BIO_new_bio_pair(REG(a6, __IFACE_OR_BASE), REG(a0, BIO ** bio1), REG(d0, size_t writebuf1), REG(a1, BIO ** bio2), REG(d1, size_t writebuf2));
void SAVEDS ASM LIB_BIO_copy_next_retry(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * b));
#if defined(__amigaos4__)
int SAVEDS ASM LIB_BIO_vprintf(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bio), REG(a1, const char * format), REG(a2, long * args));
#else
int SAVEDS ASM LIB_BIO_vprintf(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bio), REG(a1, const char * format), REG(a2, va_list args));
#endif
int SAVEDS ASM LIB_BIO_printf(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bio), REG(a1, const char * format), ...);
#if defined(__amigaos4__)
int SAVEDS ASM LIB_BIO_vsnprintf(REG(a6, __IFACE_OR_BASE), REG(a0, char * buf), REG(d0, size_t n), REG(a1, const char * format), REG(a2, long * args));
#else
int SAVEDS ASM LIB_BIO_vsnprintf(REG(a6, __IFACE_OR_BASE), REG(a0, char * buf), REG(d0, size_t n), REG(a1, const char * format), REG(a2, va_list args));
#endif
int SAVEDS ASM LIB_BIO_snprintf(REG(a6, __IFACE_OR_BASE), REG(a0, char * buf), REG(d0, size_t n), REG(a1, const char * format), ...);
int SAVEDS ASM LIB_ERR_load_BIO_strings(REG(a6, __IFACE_OR_BASE));
const BIGNUM * SAVEDS ASM LIB_BN_value_one(REG(a6, __IFACE_OR_BASE));
char * SAVEDS ASM LIB_BN_options(REG(a6, __IFACE_OR_BASE));
BN_CTX * SAVEDS ASM LIB_BN_CTX_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_BN_CTX_free(REG(a6, __IFACE_OR_BASE), REG(a0, BN_CTX * c));
void SAVEDS ASM LIB_BN_CTX_start(REG(a6, __IFACE_OR_BASE), REG(a0, BN_CTX * ctx));
BIGNUM * SAVEDS ASM LIB_BN_CTX_get(REG(a6, __IFACE_OR_BASE), REG(a0, BN_CTX * ctx));
void SAVEDS ASM LIB_BN_CTX_end(REG(a6, __IFACE_OR_BASE), REG(a0, BN_CTX * ctx));
int SAVEDS ASM LIB_BN_rand(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * rnd), REG(d0, int bits), REG(d1, int top), REG(d2, int bottom));
int SAVEDS ASM LIB_BN_pseudo_rand(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * rnd), REG(d0, int bits), REG(d1, int top), REG(d2, int bottom));
int SAVEDS ASM LIB_BN_rand_range(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * rnd), REG(a1, const BIGNUM * range));
int SAVEDS ASM LIB_BN_pseudo_rand_range(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * rnd), REG(a1, const BIGNUM * range));
int SAVEDS ASM LIB_BN_num_bits(REG(a6, __IFACE_OR_BASE), REG(a0, const BIGNUM * a));
int SAVEDS ASM LIB_BN_num_bits_word(REG(a6, __IFACE_OR_BASE), REG(d0, BN_ULONG a));
BIGNUM * SAVEDS ASM LIB_BN_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_BN_clear_free(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * a));
BIGNUM * SAVEDS ASM LIB_BN_copy(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * a), REG(a1, const BIGNUM * b));
void SAVEDS ASM LIB_BN_swap(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * a), REG(a1, BIGNUM * b));
BIGNUM * SAVEDS ASM LIB_BN_bin2bn(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * s), REG(d0, int len), REG(a1, BIGNUM * ret));
int SAVEDS ASM LIB_BN_bn2bin(REG(a6, __IFACE_OR_BASE), REG(a0, const BIGNUM * a), REG(a1, unsigned char * to));
BIGNUM * SAVEDS ASM LIB_BN_mpi2bn(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * s), REG(d0, int len), REG(a1, BIGNUM * ret));
int SAVEDS ASM LIB_BN_bn2mpi(REG(a6, __IFACE_OR_BASE), REG(a0, const BIGNUM * a), REG(a1, unsigned char * to));
int SAVEDS ASM LIB_BN_sub(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * r), REG(a1, const BIGNUM * a), REG(a2, const BIGNUM * b));
int SAVEDS ASM LIB_BN_usub(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * r), REG(a1, const BIGNUM * a), REG(a2, const BIGNUM * b));
int SAVEDS ASM LIB_BN_uadd(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * r), REG(a1, const BIGNUM * a), REG(a2, const BIGNUM * b));
int SAVEDS ASM LIB_BN_add(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * r), REG(a1, const BIGNUM * a), REG(a2, const BIGNUM * b));
int SAVEDS ASM LIB_BN_mul(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * r), REG(a1, const BIGNUM * a), REG(a2, const BIGNUM * b), REG(a3, BN_CTX * ctx));
int SAVEDS ASM LIB_BN_sqr(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * r), REG(a1, const BIGNUM * a), REG(a2, BN_CTX * ctx));
int SAVEDS ASM LIB_BN_div(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * dv), REG(a1, BIGNUM * rem), REG(a2, const BIGNUM * m), REG(a3, const BIGNUM * d), REG(d0, BN_CTX * ctx));
int SAVEDS ASM LIB_BN_nnmod(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * r), REG(a1, const BIGNUM * m), REG(a2, const BIGNUM * d), REG(a3, BN_CTX * ctx));
int SAVEDS ASM LIB_BN_mod_add(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * r), REG(a1, const BIGNUM * a), REG(a2, const BIGNUM * b), REG(a3, const BIGNUM * m), REG(d0, BN_CTX * ctx));
int SAVEDS ASM LIB_BN_mod_add_quick(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * r), REG(a1, const BIGNUM * a), REG(a2, const BIGNUM * b), REG(a3, const BIGNUM * m));
int SAVEDS ASM LIB_BN_mod_sub(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * r), REG(a1, const BIGNUM * a), REG(a2, const BIGNUM * b), REG(a3, const BIGNUM * m), REG(d0, BN_CTX * ctx));
int SAVEDS ASM LIB_BN_mod_sub_quick(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * r), REG(a1, const BIGNUM * a), REG(a2, const BIGNUM * b), REG(a3, const BIGNUM * m));
int SAVEDS ASM LIB_BN_mod_mul(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * r), REG(a1, const BIGNUM * a), REG(a2, const BIGNUM * b), REG(a3, const BIGNUM * m), REG(d0, BN_CTX * ctx));
int SAVEDS ASM LIB_BN_mod_sqr(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * r), REG(a1, const BIGNUM * a), REG(a2, const BIGNUM * m), REG(a3, BN_CTX * ctx));
int SAVEDS ASM LIB_BN_mod_lshift1(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * r), REG(a1, const BIGNUM * a), REG(a2, const BIGNUM * m), REG(a3, BN_CTX * ctx));
int SAVEDS ASM LIB_BN_mod_lshift1_quick(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * r), REG(a1, const BIGNUM * a), REG(a2, const BIGNUM * m));
int SAVEDS ASM LIB_BN_mod_lshift(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * r), REG(a1, const BIGNUM * a), REG(d0, int n), REG(a2, const BIGNUM * m), REG(a3, BN_CTX * ctx));
int SAVEDS ASM LIB_BN_mod_lshift_quick(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * r), REG(a1, const BIGNUM * a), REG(d0, int n), REG(a2, const BIGNUM * m));
BN_ULONG SAVEDS ASM LIB_BN_mod_word(REG(a6, __IFACE_OR_BASE), REG(a0, const BIGNUM * a), REG(d0, BN_ULONG w));
BN_ULONG SAVEDS ASM LIB_BN_div_word(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * a), REG(d0, BN_ULONG w));
int SAVEDS ASM LIB_BN_mul_word(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * a), REG(d0, BN_ULONG w));
int SAVEDS ASM LIB_BN_add_word(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * a), REG(d0, BN_ULONG w));
int SAVEDS ASM LIB_BN_sub_word(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * a), REG(d0, BN_ULONG w));
int SAVEDS ASM LIB_BN_set_word(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * a), REG(d0, BN_ULONG w));
BN_ULONG SAVEDS ASM LIB_BN_get_word(REG(a6, __IFACE_OR_BASE), REG(a0, const BIGNUM * a));
int SAVEDS ASM LIB_BN_cmp(REG(a6, __IFACE_OR_BASE), REG(a0, const BIGNUM * a), REG(a1, const BIGNUM * b));
void SAVEDS ASM LIB_BN_free(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * a));
int SAVEDS ASM LIB_BN_is_bit_set(REG(a6, __IFACE_OR_BASE), REG(a0, const BIGNUM * a), REG(d0, int n));
int SAVEDS ASM LIB_BN_lshift(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * r), REG(a1, const BIGNUM * a), REG(d0, int n));
int SAVEDS ASM LIB_BN_lshift1(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * r), REG(a1, const BIGNUM * a));
int SAVEDS ASM LIB_BN_exp(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * r), REG(a1, const BIGNUM * a), REG(a2, const BIGNUM * p), REG(a3, BN_CTX * ctx));
int SAVEDS ASM LIB_BN_mod_exp(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * r), REG(a1, const BIGNUM * a), REG(a2, const BIGNUM * p), REG(a3, const BIGNUM * m), REG(d0, BN_CTX * ctx));
int SAVEDS ASM LIB_BN_mod_exp_mont(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * r), REG(a1, const BIGNUM * a), REG(a2, const BIGNUM * p), REG(a3, const BIGNUM * m), REG(d0, BN_CTX * ctx), REG(d1, BN_MONT_CTX * m_ctx));
int SAVEDS ASM LIB_BN_mod_exp_mont_word(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * r), REG(d0, BN_ULONG a), REG(a1, const BIGNUM * p), REG(a2, const BIGNUM * m), REG(a3, BN_CTX * ctx), REG(d1, BN_MONT_CTX * m_ctx));
int SAVEDS ASM LIB_BN_mod_exp2_mont(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * r), REG(a1, const BIGNUM * a1), REG(a2, const BIGNUM * p1), REG(a3, const BIGNUM * a2), REG(d0, const BIGNUM * p2), REG(d1, const BIGNUM * m), REG(d2, BN_CTX * ctx), REG(d3, BN_MONT_CTX * m_ctx));
int SAVEDS ASM LIB_BN_mod_exp_simple(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * r), REG(a1, const BIGNUM * a), REG(a2, const BIGNUM * p), REG(a3, const BIGNUM * m), REG(d0, BN_CTX * ctx));
int SAVEDS ASM LIB_BN_mask_bits(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * a), REG(d0, int n));
int SAVEDS ASM LIB_BN_print(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * fp), REG(a1, const BIGNUM * a));
int SAVEDS ASM LIB_BN_reciprocal(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * r), REG(a1, const BIGNUM * m), REG(d0, int len), REG(a2, BN_CTX * ctx));
int SAVEDS ASM LIB_BN_rshift(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * r), REG(a1, const BIGNUM * a), REG(d0, int n));
int SAVEDS ASM LIB_BN_rshift1(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * r), REG(a1, const BIGNUM * a));
void SAVEDS ASM LIB_BN_clear(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * a));
BIGNUM * SAVEDS ASM LIB_BN_dup(REG(a6, __IFACE_OR_BASE), REG(a0, const BIGNUM * a));
int SAVEDS ASM LIB_BN_ucmp(REG(a6, __IFACE_OR_BASE), REG(a0, const BIGNUM * a), REG(a1, const BIGNUM * b));
int SAVEDS ASM LIB_BN_set_bit(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * a), REG(d0, int n));
int SAVEDS ASM LIB_BN_clear_bit(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * a), REG(d0, int n));
char * SAVEDS ASM LIB_BN_bn2hex(REG(a6, __IFACE_OR_BASE), REG(a0, const BIGNUM * a));
char * SAVEDS ASM LIB_BN_bn2dec(REG(a6, __IFACE_OR_BASE), REG(a0, const BIGNUM * a));
int SAVEDS ASM LIB_BN_hex2bn(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM ** a), REG(a1, const char * str));
int SAVEDS ASM LIB_BN_dec2bn(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM ** a), REG(a1, const char * str));
int SAVEDS ASM LIB_BN_gcd(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * r), REG(a1, const BIGNUM * a), REG(a2, const BIGNUM * b), REG(a3, BN_CTX * ctx));
int SAVEDS ASM LIB_BN_kronecker(REG(a6, __IFACE_OR_BASE), REG(a0, const BIGNUM * a), REG(a1, const BIGNUM * b), REG(a2, BN_CTX * ctx));
BIGNUM * SAVEDS ASM LIB_BN_mod_inverse(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * ret), REG(a1, const BIGNUM * a), REG(a2, const BIGNUM * n), REG(a3, BN_CTX * ctx));
BIGNUM * SAVEDS ASM LIB_BN_mod_sqrt(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * ret), REG(a1, const BIGNUM * a), REG(a2, const BIGNUM * n), REG(a3, BN_CTX * ctx));
BIGNUM * SAVEDS ASM LIB_BN_generate_prime(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * ret), REG(d0, int bits), REG(d1, int safe), REG(a1, const BIGNUM * add), REG(a2, const BIGNUM * rem), REG(a3, void (*callback)(int, int, void *)), REG(d2, void * cb_arg));
int SAVEDS ASM LIB_BN_is_prime(REG(a6, __IFACE_OR_BASE), REG(a0, const BIGNUM * p), REG(d0, int nchecks), REG(a1, void (*callback)(int, int, void *)), REG(a2, BN_CTX * ctx), REG(a3, void * cb_arg));
int SAVEDS ASM LIB_BN_is_prime_fasttest(REG(a6, __IFACE_OR_BASE), REG(a0, const BIGNUM * p), REG(d0, int nchecks), REG(a1, void (*callback)(int, int, void *)), REG(a2, BN_CTX * ctx), REG(a3, void * cb_arg), REG(d1, int do_trial_division));
BN_MONT_CTX * SAVEDS ASM LIB_BN_MONT_CTX_new(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_BN_mod_mul_montgomery(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * r), REG(a1, const BIGNUM * a), REG(a2, const BIGNUM * b), REG(a3, BN_MONT_CTX * mont), REG(d0, BN_CTX * ctx));
int SAVEDS ASM LIB_BN_from_montgomery(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * r), REG(a1, const BIGNUM * a), REG(a2, BN_MONT_CTX * mont), REG(a3, BN_CTX * ctx));
void SAVEDS ASM LIB_BN_MONT_CTX_free(REG(a6, __IFACE_OR_BASE), REG(a0, BN_MONT_CTX * mont));
int SAVEDS ASM LIB_BN_MONT_CTX_set(REG(a6, __IFACE_OR_BASE), REG(a0, BN_MONT_CTX * mont), REG(a1, const BIGNUM * mod), REG(a2, BN_CTX * ctx));
BN_MONT_CTX * SAVEDS ASM LIB_BN_MONT_CTX_copy(REG(a6, __IFACE_OR_BASE), REG(a0, BN_MONT_CTX * to), REG(a1, BN_MONT_CTX * from));
BN_BLINDING * SAVEDS ASM LIB_BN_BLINDING_new(REG(a6, __IFACE_OR_BASE), REG(a0, const BIGNUM * A), REG(a1, const BIGNUM * Ai), REG(a2, BIGNUM * mod));
void SAVEDS ASM LIB_BN_BLINDING_free(REG(a6, __IFACE_OR_BASE), REG(a0, BN_BLINDING * b));
int SAVEDS ASM LIB_BN_BLINDING_update(REG(a6, __IFACE_OR_BASE), REG(a0, BN_BLINDING * b), REG(a1, BN_CTX * ctx));
int SAVEDS ASM LIB_BN_BLINDING_convert(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * n), REG(a1, BN_BLINDING * r), REG(a2, BN_CTX * ctx));
int SAVEDS ASM LIB_BN_BLINDING_invert(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * n), REG(a1, BN_BLINDING * b), REG(a2, BN_CTX * ctx));
void SAVEDS ASM LIB_BN_set_params(REG(a6, __IFACE_OR_BASE), REG(d0, int mul), REG(d1, int high), REG(d2, int low), REG(d3, int mont));
int SAVEDS ASM LIB_BN_get_params(REG(a6, __IFACE_OR_BASE), REG(d0, int which));
BN_RECP_CTX * SAVEDS ASM LIB_BN_RECP_CTX_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_BN_RECP_CTX_free(REG(a6, __IFACE_OR_BASE), REG(a0, BN_RECP_CTX * recp));
int SAVEDS ASM LIB_BN_RECP_CTX_set(REG(a6, __IFACE_OR_BASE), REG(a0, BN_RECP_CTX * recp), REG(a1, const BIGNUM * rdiv), REG(a2, BN_CTX * ctx));
int SAVEDS ASM LIB_BN_mod_mul_reciprocal(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * r), REG(a1, const BIGNUM * x), REG(a2, const BIGNUM * y), REG(a3, BN_RECP_CTX * recp), REG(d0, BN_CTX * ctx));
int SAVEDS ASM LIB_BN_mod_exp_recp(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * r), REG(a1, const BIGNUM * a), REG(a2, const BIGNUM * p), REG(a3, const BIGNUM * m), REG(d0, BN_CTX * ctx));
int SAVEDS ASM LIB_BN_div_recp(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * dv), REG(a1, BIGNUM * rem), REG(a2, const BIGNUM * m), REG(a3, BN_RECP_CTX * recp), REG(d0, BN_CTX * ctx));
int SAVEDS ASM LIB_BN_bntest_rand(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * rnd), REG(d0, int bits), REG(d1, int top), REG(d2, int bottom));
int SAVEDS ASM LIB_ERR_load_BN_strings(REG(a6, __IFACE_OR_BASE));
BUF_MEM * SAVEDS ASM LIB_BUF_MEM_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_BUF_MEM_free(REG(a6, __IFACE_OR_BASE), REG(a0, BUF_MEM * a));
size_t SAVEDS ASM LIB_BUF_MEM_grow(REG(a6, __IFACE_OR_BASE), REG(a0, BUF_MEM * str), REG(d0, size_t len));
size_t SAVEDS ASM LIB_BUF_MEM_grow_clean(REG(a6, __IFACE_OR_BASE), REG(a0, BUF_MEM * str), REG(d0, size_t len));
char * SAVEDS ASM LIB_OBSOLETE_BUF_strdup(REG(a6, __IFACE_OR_BASE), REG(a0, const char * str));
size_t SAVEDS ASM LIB_OBSOLETE_BUF_strlcpy(REG(a6, __IFACE_OR_BASE), REG(a0, char * dst), REG(a1, const char * src), REG(d0, size_t siz));
size_t SAVEDS ASM LIB_OBSOLETE_BUF_strlcat(REG(a6, __IFACE_OR_BASE), REG(a0, char * dst), REG(a1, const char * src), REG(d0, size_t siz));
int SAVEDS ASM LIB_ERR_load_BUF_strings(REG(a6, __IFACE_OR_BASE));
COMP_CTX * SAVEDS ASM LIB_COMP_CTX_new(REG(a6, __IFACE_OR_BASE), REG(a0, COMP_METHOD * meth));
void SAVEDS ASM LIB_COMP_CTX_free(REG(a6, __IFACE_OR_BASE), REG(a0, COMP_CTX * ctx));
int SAVEDS ASM LIB_COMP_compress_block(REG(a6, __IFACE_OR_BASE), REG(a0, COMP_CTX * ctx), REG(a1, unsigned char * out), REG(d0, int olen), REG(a2, unsigned char * in), REG(d1, int ilen));
int SAVEDS ASM LIB_COMP_expand_block(REG(a6, __IFACE_OR_BASE), REG(a0, COMP_CTX * ctx), REG(a1, unsigned char * out), REG(d0, int olen), REG(a2, unsigned char * in), REG(d1, int ilen));
COMP_METHOD * SAVEDS ASM LIB_COMP_zlib(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_ERR_load_COMP_strings(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_CONF_set_default_method(REG(a6, __IFACE_OR_BASE), REG(a0, CONF_METHOD * meth));
void SAVEDS ASM LIB_CONF_set_nconf(REG(a6, __IFACE_OR_BASE), REG(a0, CONF * conf), REG(a1, LHASH_OF(CONF_VALUE) * hash));
LHASH_OF(CONF_VALUE) * SAVEDS ASM LIB_CONF_load(REG(a6, __IFACE_OR_BASE), REG(a0, LHASH_OF(CONF_VALUE) * conf), REG(a1, const char * file), REG(a2, long * eline));
LHASH_OF(CONF_VALUE) * SAVEDS ASM LIB_CONF_load_bio(REG(a6, __IFACE_OR_BASE), REG(a0, LHASH_OF(CONF_VALUE) * conf), REG(a1, BIO * bp), REG(a2, long * eline));
STACK_OF(CONF_VALUE) * SAVEDS ASM LIB_CONF_get_section(REG(a6, __IFACE_OR_BASE), REG(a0, LHASH_OF(CONF_VALUE) * conf), REG(a1, const char * section));
char * SAVEDS ASM LIB_CONF_get_string(REG(a6, __IFACE_OR_BASE), REG(a0, LHASH_OF(CONF_VALUE) * conf), REG(a1, const char * group), REG(a2, const char * name));
long SAVEDS ASM LIB_CONF_get_number(REG(a6, __IFACE_OR_BASE), REG(a0, LHASH_OF(CONF_VALUE) * conf), REG(a1, const char * group), REG(a2, const char * name));
void SAVEDS ASM LIB_CONF_free(REG(a6, __IFACE_OR_BASE), REG(a0, LHASH_OF(CONF_VALUE) * conf));
int SAVEDS ASM LIB_CONF_dump_bio(REG(a6, __IFACE_OR_BASE), REG(a0, LHASH_OF(CONF_VALUE) * conf), REG(a1, BIO * out));
void SAVEDS ASM LIB_OPENSSL_config(REG(a6, __IFACE_OR_BASE), REG(a0, const char * config_name));
void SAVEDS ASM LIB_OBSOLETE_OPENSSL_no_config(REG(a6, __IFACE_OR_BASE));
CONF * SAVEDS ASM LIB_NCONF_new(REG(a6, __IFACE_OR_BASE), REG(a0, CONF_METHOD * meth));
CONF_METHOD * SAVEDS ASM LIB_NCONF_default(REG(a6, __IFACE_OR_BASE));
CONF_METHOD * SAVEDS ASM LIB_NCONF_WIN32(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_NCONF_free(REG(a6, __IFACE_OR_BASE), REG(a0, CONF * conf));
void SAVEDS ASM LIB_NCONF_free_data(REG(a6, __IFACE_OR_BASE), REG(a0, CONF * conf));
int SAVEDS ASM LIB_NCONF_load(REG(a6, __IFACE_OR_BASE), REG(a0, CONF * conf), REG(a1, const char * file), REG(a2, long * eline));
int SAVEDS ASM LIB_NCONF_load_bio(REG(a6, __IFACE_OR_BASE), REG(a0, CONF * conf), REG(a1, BIO * bp), REG(a2, long * eline));
STACK_OF(CONF_VALUE) * SAVEDS ASM LIB_NCONF_get_section(REG(a6, __IFACE_OR_BASE), REG(a0, const CONF * conf), REG(a1, const char * section));
char * SAVEDS ASM LIB_NCONF_get_string(REG(a6, __IFACE_OR_BASE), REG(a0, const CONF * conf), REG(a1, const char * group), REG(a2, const char * name));
int SAVEDS ASM LIB_NCONF_get_number_e(REG(a6, __IFACE_OR_BASE), REG(a0, const CONF * conf), REG(a1, const char * group), REG(a2, const char * name), REG(a3, long * result));
int SAVEDS ASM LIB_NCONF_dump_bio(REG(a6, __IFACE_OR_BASE), REG(a0, const CONF * conf), REG(a1, BIO * out));
int SAVEDS ASM LIB_CONF_modules_load(REG(a6, __IFACE_OR_BASE), REG(a0, const CONF * cnf), REG(a1, const char * appname), REG(d0, unsigned long flags));
int SAVEDS ASM LIB_CONF_modules_load_file(REG(a6, __IFACE_OR_BASE), REG(a0, const char * filename), REG(a1, const char * appname), REG(d0, unsigned long flags));
void SAVEDS ASM LIB_CONF_modules_unload(REG(a6, __IFACE_OR_BASE), REG(d0, int all));
void SAVEDS ASM LIB_CONF_modules_finish(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_CONF_module_add(REG(a6, __IFACE_OR_BASE), REG(a0, const char * name), REG(a1, conf_init_func * ifunc), REG(a2, conf_finish_func * ffunc));
const char * SAVEDS ASM LIB_CONF_imodule_get_name(REG(a6, __IFACE_OR_BASE), REG(a0, const CONF_IMODULE * md));
const char * SAVEDS ASM LIB_CONF_imodule_get_value(REG(a6, __IFACE_OR_BASE), REG(a0, const CONF_IMODULE * md));
void * SAVEDS ASM LIB_CONF_imodule_get_usr_data(REG(a6, __IFACE_OR_BASE), REG(a0, const CONF_IMODULE * md));
void SAVEDS ASM LIB_CONF_imodule_set_usr_data(REG(a6, __IFACE_OR_BASE), REG(a0, CONF_IMODULE * md), REG(a1, void * usr_data));
CONF_MODULE * SAVEDS ASM LIB_CONF_imodule_get_module(REG(a6, __IFACE_OR_BASE), REG(a0, const CONF_IMODULE * md));
unsigned long SAVEDS ASM LIB_CONF_imodule_get_flags(REG(a6, __IFACE_OR_BASE), REG(a0, const CONF_IMODULE * md));
void SAVEDS ASM LIB_CONF_imodule_set_flags(REG(a6, __IFACE_OR_BASE), REG(a0, CONF_IMODULE * md), REG(d0, unsigned long flags));
void * SAVEDS ASM LIB_CONF_module_get_usr_data(REG(a6, __IFACE_OR_BASE), REG(a0, CONF_MODULE * pmod));
void SAVEDS ASM LIB_CONF_module_set_usr_data(REG(a6, __IFACE_OR_BASE), REG(a0, CONF_MODULE * pmod), REG(a1, void * usr_data));
char * SAVEDS ASM LIB_CONF_get1_default_config_file(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_CONF_parse_list(REG(a6, __IFACE_OR_BASE), REG(a0, const char * list), REG(d0, int sep), REG(d1, int nospc), REG(a1, int (*list_cb)(const char *elem, int len, void *usr)), REG(a2, void * arg));
void SAVEDS ASM LIB_OPENSSL_load_builtin_modules(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_ERR_load_CONF_strings(REG(a6, __IFACE_OR_BASE));
const char * SAVEDS ASM LIB_OBSOLETE_SSLeay_version(REG(a6, __IFACE_OR_BASE), REG(d0, int type));
unsigned long SAVEDS ASM LIB_OBSOLETE_SSLeay(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_OPENSSL_issetugid(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_CRYPTO_get_ex_new_index(REG(a6, __IFACE_OR_BASE), REG(d0, int class_index), REG(d1, long argl), REG(a0, void * argp), REG(a1, CRYPTO_EX_new * new_func), REG(a2, CRYPTO_EX_dup * dup_func), REG(a3, CRYPTO_EX_free * free_func));
int SAVEDS ASM LIB_CRYPTO_new_ex_data(REG(a6, __IFACE_OR_BASE), REG(d0, int class_index), REG(a0, void * obj), REG(a1, CRYPTO_EX_DATA * ad));
int SAVEDS ASM LIB_CRYPTO_dup_ex_data(REG(a6, __IFACE_OR_BASE), REG(d0, int class_index), REG(a0, CRYPTO_EX_DATA * to), REG(a1, const CRYPTO_EX_DATA * from));
void SAVEDS ASM LIB_CRYPTO_free_ex_data(REG(a6, __IFACE_OR_BASE), REG(d0, int class_index), REG(a0, void * obj), REG(a1, CRYPTO_EX_DATA * ad));
int SAVEDS ASM LIB_CRYPTO_set_ex_data(REG(a6, __IFACE_OR_BASE), REG(a0, CRYPTO_EX_DATA * ad), REG(d0, int idx), REG(a1, void * val));
void * SAVEDS ASM LIB_CRYPTO_get_ex_data(REG(a6, __IFACE_OR_BASE), REG(a0, const CRYPTO_EX_DATA * ad), REG(d0, int idx));
int SAVEDS ASM LIB_CRYPTO_set_mem_functions(REG(a6, __IFACE_OR_BASE), REG(a0, CRYPTO_malloc_fn malloc_fn), REG(a1, CRYPTO_realloc_fn realloc_fn), REG(a2, CRYPTO_free_fn free_fn));
void SAVEDS ASM LIB_CRYPTO_get_mem_functions(REG(a6, __IFACE_OR_BASE), REG(a0, CRYPTO_malloc_fn * malloc_fn), REG(a1, CRYPTO_realloc_fn * realloc_fn), REG(a2, CRYPTO_free_fn * free_fn));
void * SAVEDS ASM LIB_CRYPTO_malloc(REG(a6, __IFACE_OR_BASE), REG(d0, size_t num), REG(a0, const char * file), REG(d1, int line));
void SAVEDS ASM LIB_CRYPTO_free(REG(a6, __IFACE_OR_BASE), REG(a0, void * str), REG(a1, const char * file), REG(d0, int line));
void * SAVEDS ASM LIB_CRYPTO_realloc(REG(a6, __IFACE_OR_BASE), REG(a0, void * addr), REG(d0, size_t num), REG(a1, const char * file), REG(d1, int line));
void SAVEDS ASM LIB_OPENSSL_cleanse(REG(a6, __IFACE_OR_BASE), REG(a0, void * ptr), REG(d0, size_t len));
int SAVEDS ASM LIB_ERR_load_CRYPTO_strings(REG(a6, __IFACE_OR_BASE));
const EC_METHOD * SAVEDS ASM LIB_EC_GFp_simple_method(REG(a6, __IFACE_OR_BASE));
const EC_METHOD * SAVEDS ASM LIB_EC_GFp_mont_method(REG(a6, __IFACE_OR_BASE));
EC_GROUP * SAVEDS ASM LIB_EC_GROUP_new(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_METHOD * a));
void SAVEDS ASM LIB_EC_GROUP_free(REG(a6, __IFACE_OR_BASE), REG(a0, EC_GROUP * a));
void SAVEDS ASM LIB_EC_GROUP_clear_free(REG(a6, __IFACE_OR_BASE), REG(a0, EC_GROUP * a));
int SAVEDS ASM LIB_EC_GROUP_copy(REG(a6, __IFACE_OR_BASE), REG(a0, EC_GROUP * a), REG(a1, const EC_GROUP * b));
const EC_METHOD * SAVEDS ASM LIB_EC_GROUP_method_of(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_GROUP * a));
int SAVEDS ASM LIB_EC_GROUP_set_curve_GFp(REG(a6, __IFACE_OR_BASE), REG(a0, EC_GROUP * a1), REG(a1, const BIGNUM * p), REG(a2, const BIGNUM * a), REG(a3, const BIGNUM * b), REG(d0, BN_CTX * a2));
int SAVEDS ASM LIB_EC_GROUP_get_curve_GFp(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_GROUP * a1), REG(a1, BIGNUM * p), REG(a2, BIGNUM * a), REG(a3, BIGNUM * b), REG(d0, BN_CTX * a2));
EC_GROUP * SAVEDS ASM LIB_EC_GROUP_new_curve_GFp(REG(a6, __IFACE_OR_BASE), REG(a0, const BIGNUM * p), REG(a1, const BIGNUM * a), REG(a2, const BIGNUM * b), REG(a3, BN_CTX * a1));
int SAVEDS ASM LIB_EC_GROUP_set_generator(REG(a6, __IFACE_OR_BASE), REG(a0, EC_GROUP * a1), REG(a1, const EC_POINT * generator), REG(a2, const BIGNUM * order), REG(a3, const BIGNUM * cofactor));
const EC_POINT * SAVEDS ASM LIB_EC_GROUP_get0_generator(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_GROUP * a1));
int SAVEDS ASM LIB_EC_GROUP_get_order(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_GROUP * a1), REG(a1, BIGNUM * order), REG(a2, BN_CTX * a2));
int SAVEDS ASM LIB_EC_GROUP_get_cofactor(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_GROUP * a1), REG(a1, BIGNUM * cofactor), REG(a2, BN_CTX * a2));
EC_POINT * SAVEDS ASM LIB_EC_POINT_new(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_GROUP * a));
void SAVEDS ASM LIB_EC_POINT_free(REG(a6, __IFACE_OR_BASE), REG(a0, EC_POINT * a));
void SAVEDS ASM LIB_EC_POINT_clear_free(REG(a6, __IFACE_OR_BASE), REG(a0, EC_POINT * a));
int SAVEDS ASM LIB_EC_POINT_copy(REG(a6, __IFACE_OR_BASE), REG(a0, EC_POINT * a), REG(a1, const EC_POINT * b));
const EC_METHOD * SAVEDS ASM LIB_EC_POINT_method_of(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_POINT * a));
int SAVEDS ASM LIB_EC_POINT_set_to_infinity(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_GROUP * a), REG(a1, EC_POINT * b));
int SAVEDS ASM LIB_EC_POINT_set_Jprojective_coordinates_GFp(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_GROUP * a1), REG(a1, EC_POINT * a2), REG(a2, const BIGNUM * x), REG(a3, const BIGNUM * y), REG(d0, const BIGNUM * z), REG(d1, BN_CTX * a3));
int SAVEDS ASM LIB_EC_POINT_get_Jprojective_coordinates_GFp(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_GROUP * a1), REG(a1, const EC_POINT * a2), REG(a2, BIGNUM * x), REG(a3, BIGNUM * y), REG(d0, BIGNUM * z), REG(d1, BN_CTX * a3));
int SAVEDS ASM LIB_EC_POINT_set_affine_coordinates_GFp(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_GROUP * a1), REG(a1, EC_POINT * a2), REG(a2, const BIGNUM * x), REG(a3, const BIGNUM * y), REG(d0, BN_CTX * a3));
int SAVEDS ASM LIB_EC_POINT_get_affine_coordinates_GFp(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_GROUP * a1), REG(a1, const EC_POINT * a2), REG(a2, BIGNUM * x), REG(a3, BIGNUM * y), REG(d0, BN_CTX * a3));
int SAVEDS ASM LIB_EC_POINT_set_compressed_coordinates_GFp(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_GROUP * a1), REG(a1, EC_POINT * a2), REG(a2, const BIGNUM * x), REG(d0, int y_bit), REG(a3, BN_CTX * a3));
size_t SAVEDS ASM LIB_EC_POINT_point2oct(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_GROUP * a1), REG(a1, const EC_POINT * a2), REG(d0, point_conversion_form_t form), REG(a2, unsigned char * buf), REG(d1, size_t len), REG(a3, BN_CTX * a3));
int SAVEDS ASM LIB_EC_POINT_oct2point(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_GROUP * a1), REG(a1, EC_POINT * a2), REG(a2, const unsigned char * buf), REG(d0, size_t len), REG(a3, BN_CTX * a3));
int SAVEDS ASM LIB_EC_POINT_add(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_GROUP * a1), REG(a1, EC_POINT * r), REG(a2, const EC_POINT * a), REG(a3, const EC_POINT * b), REG(d0, BN_CTX * a2));
int SAVEDS ASM LIB_EC_POINT_dbl(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_GROUP * a1), REG(a1, EC_POINT * r), REG(a2, const EC_POINT * a), REG(a3, BN_CTX * a2));
int SAVEDS ASM LIB_EC_POINT_invert(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_GROUP * a1), REG(a1, EC_POINT * a2), REG(a2, BN_CTX * a3));
int SAVEDS ASM LIB_EC_POINT_is_at_infinity(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_GROUP * a), REG(a1, const EC_POINT * b));
int SAVEDS ASM LIB_EC_POINT_is_on_curve(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_GROUP * a), REG(a1, const EC_POINT * b), REG(a2, BN_CTX * c));
int SAVEDS ASM LIB_EC_POINT_cmp(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_GROUP * a1), REG(a1, const EC_POINT * a), REG(a2, const EC_POINT * b), REG(a3, BN_CTX * a2));
int SAVEDS ASM LIB_EC_POINT_make_affine(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_GROUP * a), REG(a1, EC_POINT * b), REG(a2, BN_CTX * c));
int SAVEDS ASM LIB_EC_POINTs_make_affine(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_GROUP * a1), REG(d0, size_t num), REG(a1, EC_POINT ** a2), REG(a2, BN_CTX * a3));
int SAVEDS ASM LIB_EC_POINTs_mul(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_GROUP * a1), REG(a1, EC_POINT * r), REG(a2, const BIGNUM * a2), REG(d0, size_t num), REG(a3, const EC_POINT ** a3), REG(d1, const BIGNUM ** a4), REG(d2, BN_CTX * a5));
int SAVEDS ASM LIB_EC_POINT_mul(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_GROUP * a1), REG(a1, EC_POINT * r), REG(a2, const BIGNUM * a2), REG(a3, const EC_POINT * a3), REG(d0, const BIGNUM * a4), REG(d1, BN_CTX * a5));
int SAVEDS ASM LIB_EC_GROUP_precompute_mult(REG(a6, __IFACE_OR_BASE), REG(a0, EC_GROUP * a), REG(a1, BN_CTX * b));
int SAVEDS ASM LIB_ERR_load_EC_strings(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_OBSOLETE_ERR_put_error(REG(a6, __IFACE_OR_BASE), REG(d0, int lib), REG(d1, int func), REG(d2, int reason), REG(a0, const char * file), REG(d3, int line));
void SAVEDS ASM LIB_ERR_set_error_data(REG(a6, __IFACE_OR_BASE), REG(a0, char * data), REG(d0, int flags));
unsigned long SAVEDS ASM LIB_ERR_get_error(REG(a6, __IFACE_OR_BASE));
unsigned long SAVEDS ASM LIB_ERR_get_error_line(REG(a6, __IFACE_OR_BASE), REG(a0, const char ** file), REG(a1, int * line));
unsigned long SAVEDS ASM LIB_ERR_get_error_line_data(REG(a6, __IFACE_OR_BASE), REG(a0, const char ** file), REG(a1, int * line), REG(a2, const char ** data), REG(a3, int * flags));
unsigned long SAVEDS ASM LIB_ERR_peek_error(REG(a6, __IFACE_OR_BASE));
unsigned long SAVEDS ASM LIB_ERR_peek_error_line(REG(a6, __IFACE_OR_BASE), REG(a0, const char ** file), REG(a1, int * line));
unsigned long SAVEDS ASM LIB_ERR_peek_error_line_data(REG(a6, __IFACE_OR_BASE), REG(a0, const char ** file), REG(a1, int * line), REG(a2, const char ** data), REG(a3, int * flags));
unsigned long SAVEDS ASM LIB_ERR_peek_last_error(REG(a6, __IFACE_OR_BASE));
unsigned long SAVEDS ASM LIB_ERR_peek_last_error_line(REG(a6, __IFACE_OR_BASE), REG(a0, const char ** file), REG(a1, int * line));
unsigned long SAVEDS ASM LIB_ERR_peek_last_error_line_data(REG(a6, __IFACE_OR_BASE), REG(a0, const char ** file), REG(a1, int * line), REG(a2, const char ** data), REG(a3, int * flags));
void SAVEDS ASM LIB_ERR_clear_error(REG(a6, __IFACE_OR_BASE));
char * SAVEDS ASM LIB_ERR_error_string(REG(a6, __IFACE_OR_BASE), REG(d0, unsigned long e), REG(a0, char * buf));
void SAVEDS ASM LIB_ERR_error_string_n(REG(a6, __IFACE_OR_BASE), REG(d0, unsigned long e), REG(a0, char * buf), REG(d1, size_t len));
const char * SAVEDS ASM LIB_ERR_lib_error_string(REG(a6, __IFACE_OR_BASE), REG(d0, unsigned long e));
const char * SAVEDS ASM LIB_ERR_func_error_string(REG(a6, __IFACE_OR_BASE), REG(d0, unsigned long e));
const char * SAVEDS ASM LIB_ERR_reason_error_string(REG(a6, __IFACE_OR_BASE), REG(d0, unsigned long e));
void SAVEDS ASM LIB_ERR_print_errors_cb(REG(a6, __IFACE_OR_BASE), REG(a0, int (*cb)(const char *str, size_t len, void *u)), REG(a1, void * u));
void SAVEDS ASM LIB_ERR_print_errors(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp));
#if defined(__amigaos4__)
void SAVEDS ASM LIB_ERR_add_error_vdata(REG(a6, __IFACE_OR_BASE), REG(d0, int num), REG(a0, long * args));
#else
void SAVEDS ASM LIB_ERR_add_error_vdata(REG(a6, __IFACE_OR_BASE), REG(d0, int num), REG(a0, va_list args));
#endif
void SAVEDS ASM LIB_ERR_add_error_data(REG(a6, __IFACE_OR_BASE), REG(d0, int num), ...);
int SAVEDS ASM LIB_ERR_load_strings(REG(a6, __IFACE_OR_BASE), REG(d0, int lib), REG(a0, ERR_STRING_DATA * str));
int SAVEDS ASM LIB_ERR_unload_strings(REG(a6, __IFACE_OR_BASE), REG(d0, int lib), REG(a0, ERR_STRING_DATA * str));
int SAVEDS ASM LIB_ERR_load_ERR_strings(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_OBSOLETE_ERR_load_crypto_strings(REG(a6, __IFACE_OR_BASE));
ERR_STATE * SAVEDS ASM LIB_ERR_get_state(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_ERR_get_next_error_library(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_OBSOLETE_EVP_MD_CTX_init(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_MD_CTX * ctx));
EVP_MD_CTX * SAVEDS ASM LIB_OBSOLETE_EVP_MD_CTX_create(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_OBSOLETE_EVP_MD_CTX_destroy(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_MD_CTX * ctx));
int SAVEDS ASM LIB_EVP_MD_CTX_copy_ex(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_MD_CTX * out), REG(a1, const EVP_MD_CTX * in));
int SAVEDS ASM LIB_EVP_DigestInit_ex(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_MD_CTX * ctx), REG(a1, const EVP_MD * type), REG(a2, ENGINE * impl));
int SAVEDS ASM LIB_EVP_DigestUpdate(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_MD_CTX * ctx), REG(a1, const void * d), REG(d0, unsigned int cnt));
int SAVEDS ASM LIB_EVP_DigestFinal_ex(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_MD_CTX * ctx), REG(a1, unsigned char * md), REG(a2, unsigned int * s));
int SAVEDS ASM LIB_EVP_Digest(REG(a6, __IFACE_OR_BASE), REG(a0, const void * data), REG(d0, size_t count), REG(a1, unsigned char * md), REG(a2, unsigned int * size), REG(a3, const EVP_MD * type), REG(d1, ENGINE * impl));
int SAVEDS ASM LIB_EVP_MD_CTX_copy(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_MD_CTX * out), REG(a1, const EVP_MD_CTX * in));
int SAVEDS ASM LIB_EVP_DigestInit(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_MD_CTX * ctx), REG(a1, const EVP_MD * type));
int SAVEDS ASM LIB_EVP_DigestFinal(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_MD_CTX * ctx), REG(a1, unsigned char * md), REG(a2, unsigned int * s));
int SAVEDS ASM LIB_EVP_read_pw_string(REG(a6, __IFACE_OR_BASE), REG(a0, char * buf), REG(d0, int length), REG(a1, const char * prompt), REG(d1, int verify));
void SAVEDS ASM LIB_EVP_set_pw_prompt(REG(a6, __IFACE_OR_BASE), REG(a0, const char * prompt));
char * SAVEDS ASM LIB_EVP_get_pw_prompt(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_EVP_BytesToKey(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_CIPHER * type), REG(a1, const EVP_MD * md), REG(a2, const unsigned char * salt), REG(a3, const unsigned char * data), REG(d0, int datal), REG(d1, int count), REG(d2, unsigned char * key), REG(d3, unsigned char * iv));
int SAVEDS ASM LIB_EVP_EncryptInit(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_CIPHER_CTX * ctx), REG(a1, const EVP_CIPHER * cipher), REG(a2, const unsigned char * key), REG(a3, const unsigned char * iv));
int SAVEDS ASM LIB_EVP_EncryptInit_ex(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_CIPHER_CTX * ctx), REG(a1, const EVP_CIPHER * cipher), REG(a2, ENGINE * impl), REG(a3, const unsigned char * key), REG(d0, const unsigned char * iv));
int SAVEDS ASM LIB_EVP_EncryptUpdate(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_CIPHER_CTX * ctx), REG(a1, unsigned char * out), REG(a2, int * outl), REG(a3, const unsigned char * in), REG(d0, int inl));
int SAVEDS ASM LIB_EVP_EncryptFinal_ex(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_CIPHER_CTX * ctx), REG(a1, unsigned char * out), REG(a2, int * outl));
int SAVEDS ASM LIB_EVP_EncryptFinal(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_CIPHER_CTX * ctx), REG(a1, unsigned char * out), REG(a2, int * outl));
int SAVEDS ASM LIB_EVP_DecryptInit(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_CIPHER_CTX * ctx), REG(a1, const EVP_CIPHER * cipher), REG(a2, const unsigned char * key), REG(a3, const unsigned char * iv));
int SAVEDS ASM LIB_EVP_DecryptInit_ex(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_CIPHER_CTX * ctx), REG(a1, const EVP_CIPHER * cipher), REG(a2, ENGINE * impl), REG(a3, const unsigned char * key), REG(d0, const unsigned char * iv));
int SAVEDS ASM LIB_EVP_DecryptUpdate(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_CIPHER_CTX * ctx), REG(a1, unsigned char * out), REG(a2, int * outl), REG(a3, const unsigned char * in), REG(d0, int inl));
int SAVEDS ASM LIB_EVP_DecryptFinal(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_CIPHER_CTX * ctx), REG(a1, unsigned char * outm), REG(a2, int * outl));
int SAVEDS ASM LIB_EVP_DecryptFinal_ex(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_CIPHER_CTX * ctx), REG(a1, unsigned char * outm), REG(a2, int * outl));
int SAVEDS ASM LIB_EVP_CipherInit(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_CIPHER_CTX * ctx), REG(a1, const EVP_CIPHER * cipher), REG(a2, const unsigned char * key), REG(a3, const unsigned char * iv), REG(d0, int enc));
int SAVEDS ASM LIB_EVP_CipherInit_ex(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_CIPHER_CTX * ctx), REG(a1, const EVP_CIPHER * cipher), REG(a2, ENGINE * impl), REG(a3, const unsigned char * key), REG(d0, const unsigned char * iv), REG(d1, int enc));
int SAVEDS ASM LIB_EVP_CipherUpdate(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_CIPHER_CTX * ctx), REG(a1, unsigned char * out), REG(a2, int * outl), REG(a3, const unsigned char * in), REG(d0, int inl));
int SAVEDS ASM LIB_EVP_CipherFinal(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_CIPHER_CTX * ctx), REG(a1, unsigned char * outm), REG(a2, int * outl));
int SAVEDS ASM LIB_EVP_CipherFinal_ex(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_CIPHER_CTX * ctx), REG(a1, unsigned char * outm), REG(a2, int * outl));
int SAVEDS ASM LIB_EVP_SignFinal(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_MD_CTX * ctx), REG(a1, unsigned char * md), REG(a2, unsigned int * s), REG(a3, EVP_PKEY * pkey));
int SAVEDS ASM LIB_EVP_VerifyFinal(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_MD_CTX * ctx), REG(a1, const unsigned char * sigbuf), REG(d0, unsigned int siglen), REG(a2, EVP_PKEY * pkey));
int SAVEDS ASM LIB_EVP_OpenInit(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_CIPHER_CTX * ctx), REG(a1, const EVP_CIPHER * type), REG(a2, const unsigned char * ek), REG(d0, int ekl), REG(a3, const unsigned char * iv), REG(d1, EVP_PKEY * priv));
int SAVEDS ASM LIB_EVP_OpenFinal(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_CIPHER_CTX * ctx), REG(a1, unsigned char * out), REG(a2, int * outl));
int SAVEDS ASM LIB_EVP_SealInit(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_CIPHER_CTX * ctx), REG(a1, const EVP_CIPHER * type), REG(a2, unsigned char ** ek), REG(a3, int * ekl), REG(d0, unsigned char * iv), REG(d1, EVP_PKEY ** pubk), REG(d2, int npubk));
int SAVEDS ASM LIB_EVP_SealFinal(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_CIPHER_CTX * ctx), REG(a1, unsigned char * out), REG(a2, int * outl));
void SAVEDS ASM LIB_EVP_EncodeInit(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_ENCODE_CTX * ctx));
int SAVEDS ASM LIB_EVP_EncodeUpdate(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_ENCODE_CTX * ctx), REG(a1, unsigned char * out), REG(a2, int * outl), REG(a3, const unsigned char * in), REG(d0, int inl));
void SAVEDS ASM LIB_EVP_EncodeFinal(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_ENCODE_CTX * ctx), REG(a1, unsigned char * out), REG(a2, int * outl));
int SAVEDS ASM LIB_EVP_EncodeBlock(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned char * t), REG(a1, const unsigned char * f), REG(d0, int n));
void SAVEDS ASM LIB_EVP_DecodeInit(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_ENCODE_CTX * ctx));
int SAVEDS ASM LIB_EVP_DecodeUpdate(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_ENCODE_CTX * ctx), REG(a1, unsigned char * out), REG(a2, int * outl), REG(a3, const unsigned char * in), REG(d0, int inl));
int SAVEDS ASM LIB_EVP_DecodeFinal(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_ENCODE_CTX * ctx), REG(a1, unsigned char * out), REG(a2, int * outl));
int SAVEDS ASM LIB_EVP_DecodeBlock(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned char * t), REG(a1, const unsigned char * f), REG(d0, int n));
void SAVEDS ASM LIB_OBSOLETE_EVP_CIPHER_CTX_init(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_CIPHER_CTX * a));
int SAVEDS ASM LIB_OBSOLETE_EVP_CIPHER_CTX_cleanup(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_CIPHER_CTX * a));
int SAVEDS ASM LIB_EVP_CIPHER_CTX_set_key_length(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_CIPHER_CTX * x), REG(d0, int keylen));
int SAVEDS ASM LIB_EVP_CIPHER_CTX_set_padding(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_CIPHER_CTX * c), REG(d0, int pad));
int SAVEDS ASM LIB_EVP_CIPHER_CTX_ctrl(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_CIPHER_CTX * ctx), REG(d0, int type), REG(d1, int arg), REG(a1, void * ptr));
const BIO_METHOD * SAVEDS ASM LIB_BIO_f_md(REG(a6, __IFACE_OR_BASE));
const BIO_METHOD * SAVEDS ASM LIB_BIO_f_base64(REG(a6, __IFACE_OR_BASE));
const BIO_METHOD * SAVEDS ASM LIB_BIO_f_cipher(REG(a6, __IFACE_OR_BASE));
const BIO_METHOD * SAVEDS ASM LIB_BIO_f_reliable(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_BIO_set_cipher(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * b), REG(a1, const EVP_CIPHER * c), REG(a2, const unsigned char * k), REG(a3, const unsigned char * i), REG(d0, int enc));
const EVP_MD * SAVEDS ASM LIB_EVP_md_null(REG(a6, __IFACE_OR_BASE));
const EVP_MD * SAVEDS ASM LIB_EVP_md2(REG(a6, __IFACE_OR_BASE));
const EVP_MD * SAVEDS ASM LIB_EVP_md4(REG(a6, __IFACE_OR_BASE));
const EVP_MD * SAVEDS ASM LIB_EVP_md5(REG(a6, __IFACE_OR_BASE));
const EVP_MD * SAVEDS ASM LIB_EVP_sha1(REG(a6, __IFACE_OR_BASE));
const EVP_MD * SAVEDS ASM LIB_EVP_mdc2(REG(a6, __IFACE_OR_BASE));
const EVP_MD * SAVEDS ASM LIB_EVP_ripemd160(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_enc_null(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_des_ecb(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_des_ede(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_des_ede3(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_des_ede_ecb(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_des_ede3_ecb(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_des_cfb64(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_des_cfb1(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_des_cfb8(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_des_ede_cfb64(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_des_ede3_cfb64(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_des_ede3_cfb1(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_des_ede3_cfb8(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_des_ofb(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_des_ede_ofb(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_des_ede3_ofb(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_des_cbc(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_des_ede_cbc(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_des_ede3_cbc(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_desx_cbc(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_rc4(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_rc4_40(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_idea_ecb(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_idea_cfb64(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_idea_ofb(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_idea_cbc(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_rc2_ecb(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_rc2_cbc(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_rc2_40_cbc(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_rc2_64_cbc(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_rc2_cfb64(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_rc2_ofb(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_bf_ecb(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_bf_cbc(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_bf_cfb64(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_bf_ofb(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_cast5_ecb(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_cast5_cbc(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_cast5_cfb64(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_cast5_ofb(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_rc5_32_12_16_cbc(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_rc5_32_12_16_ecb(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_rc5_32_12_16_cfb64(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_rc5_32_12_16_ofb(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_aes_128_ecb(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_aes_128_cbc(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_aes_128_cfb1(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_aes_128_cfb8(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_aes_128_cfb128(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_aes_128_ofb(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_aes_192_ecb(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_aes_192_cbc(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_aes_192_cfb1(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_aes_192_cfb8(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_aes_192_cfb128(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_aes_192_ofb(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_aes_256_ecb(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_aes_256_cbc(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_aes_256_cfb1(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_aes_256_cfb8(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_aes_256_cfb128(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_aes_256_ofb(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_OBSOLETE_OPENSSL_add_all_algorithms_noconf(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_OBSOLETE_OPENSSL_add_all_algorithms_conf(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_OBSOLETE_OpenSSL_add_all_ciphers(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_OBSOLETE_OpenSSL_add_all_digests(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_EVP_add_cipher(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_CIPHER * cipher));
int SAVEDS ASM LIB_EVP_add_digest(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_MD * digest));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_get_cipherbyname(REG(a6, __IFACE_OR_BASE), REG(a0, const char * name));
const EVP_MD * SAVEDS ASM LIB_EVP_get_digestbyname(REG(a6, __IFACE_OR_BASE), REG(a0, const char * name));
int SAVEDS ASM LIB_EVP_PKEY_decrypt(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(a1, unsigned char * out), REG(a2, size_t * outlen), REG(a3, const unsigned char * in), REG(d0, size_t inlen));
int SAVEDS ASM LIB_EVP_PKEY_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(a1, unsigned char * out), REG(a2, size_t * outlen), REG(a3, const unsigned char * in), REG(d0, size_t inlen));
int SAVEDS ASM LIB_EVP_PKEY_type(REG(a6, __IFACE_OR_BASE), REG(d0, int type));
int SAVEDS ASM LIB_EVP_PKEY_get_bits(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_PKEY * pkey));
int SAVEDS ASM LIB_EVP_PKEY_get_size(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_PKEY * pkey));
int SAVEDS ASM LIB_EVP_PKEY_assign(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY * pkey), REG(d0, int type), REG(a1, void * key));
int SAVEDS ASM LIB_EVP_PKEY_set1_RSA(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY * pkey), REG(a1, struct rsa_st * key));
struct rsa_st * SAVEDS ASM LIB_EVP_PKEY_get1_RSA(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY * pkey));
int SAVEDS ASM LIB_EVP_PKEY_set1_DSA(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY * pkey), REG(a1, struct dsa_st * key));
struct dsa_st * SAVEDS ASM LIB_EVP_PKEY_get1_DSA(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY * pkey));
int SAVEDS ASM LIB_EVP_PKEY_set1_DH(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY * pkey), REG(a1, struct dh_st * key));
struct dh_st * SAVEDS ASM LIB_EVP_PKEY_get1_DH(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY * pkey));
EVP_PKEY * SAVEDS ASM LIB_EVP_PKEY_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_EVP_PKEY_free(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY * pkey));
EVP_PKEY * SAVEDS ASM LIB_d2i_PublicKey(REG(a6, __IFACE_OR_BASE), REG(d0, int type), REG(a0, EVP_PKEY ** a), REG(a1, const unsigned char ** pp), REG(d1, long length));
int SAVEDS ASM LIB_i2d_PublicKey(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_PKEY * a), REG(a1, unsigned char ** pp));
EVP_PKEY * SAVEDS ASM LIB_d2i_PrivateKey(REG(a6, __IFACE_OR_BASE), REG(d0, int type), REG(a0, EVP_PKEY ** a), REG(a1, const unsigned char ** pp), REG(d1, long length));
EVP_PKEY * SAVEDS ASM LIB_d2i_AutoPrivateKey(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY ** a), REG(a1, const unsigned char ** pp), REG(d0, long length));
int SAVEDS ASM LIB_i2d_PrivateKey(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_PKEY * a), REG(a1, unsigned char ** pp));
int SAVEDS ASM LIB_EVP_PKEY_copy_parameters(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY * to), REG(a1, const EVP_PKEY * from));
int SAVEDS ASM LIB_EVP_PKEY_missing_parameters(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_PKEY * pkey));
int SAVEDS ASM LIB_EVP_PKEY_save_parameters(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY * pkey), REG(d0, int mode));
int SAVEDS ASM LIB_EVP_PKEY_cmp_parameters(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_PKEY * a), REG(a1, const EVP_PKEY * b));
int SAVEDS ASM LIB_EVP_CIPHER_get_type(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_CIPHER * ctx));
int SAVEDS ASM LIB_EVP_CIPHER_param_to_asn1(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_CIPHER_CTX * c), REG(a1, ASN1_TYPE * type));
int SAVEDS ASM LIB_EVP_CIPHER_asn1_to_param(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_CIPHER_CTX * c), REG(a1, ASN1_TYPE * type));
int SAVEDS ASM LIB_EVP_CIPHER_set_asn1_iv(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_CIPHER_CTX * c), REG(a1, ASN1_TYPE * type));
int SAVEDS ASM LIB_EVP_CIPHER_get_asn1_iv(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_CIPHER_CTX * c), REG(a1, ASN1_TYPE * type));
int SAVEDS ASM LIB_PKCS5_PBE_keyivgen(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_CIPHER_CTX * ctx), REG(a1, const char * pass), REG(d0, int passlen), REG(a2, ASN1_TYPE * param), REG(a3, const EVP_CIPHER * cipher), REG(d1, const EVP_MD * md), REG(d2, int en_de));
int SAVEDS ASM LIB_PKCS5_PBKDF2_HMAC_SHA1(REG(a6, __IFACE_OR_BASE), REG(a0, const char * pass), REG(d0, int passlen), REG(a1, const unsigned char * salt), REG(d1, int saltlen), REG(d2, int iter), REG(d3, int keylen), REG(a2, unsigned char * out));
int SAVEDS ASM LIB_PKCS5_v2_PBE_keyivgen(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_CIPHER_CTX * ctx), REG(a1, const char * pass), REG(d0, int passlen), REG(a2, ASN1_TYPE * param), REG(a3, const EVP_CIPHER * cipher), REG(d1, const EVP_MD * md), REG(d2, int en_de));
void SAVEDS ASM LIB_PKCS5_PBE_add(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_EVP_PBE_CipherInit(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_OBJECT * pbe_obj), REG(a1, const char * pass), REG(d0, int passlen), REG(a2, ASN1_TYPE * param), REG(a3, EVP_CIPHER_CTX * ctx), REG(d1, int en_de));
int SAVEDS ASM LIB_EVP_PBE_alg_add(REG(a6, __IFACE_OR_BASE), REG(d0, int nid), REG(a0, const EVP_CIPHER * cipher), REG(a1, const EVP_MD * md), REG(a2, EVP_PBE_KEYGEN * keygen));
void SAVEDS ASM LIB_EVP_PBE_cleanup(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_ERR_load_EVP_strings(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_HMAC_Init(REG(a6, __IFACE_OR_BASE), REG(a0, HMAC_CTX * ctx), REG(a1, const void * key), REG(d0, int len), REG(a2, const EVP_MD * md));
int SAVEDS ASM LIB_HMAC_Init_ex(REG(a6, __IFACE_OR_BASE), REG(a0, HMAC_CTX * ctx), REG(a1, const void * key), REG(d0, int len), REG(a2, const EVP_MD * md), REG(a3, ENGINE * impl));
int SAVEDS ASM LIB_HMAC_Update(REG(a6, __IFACE_OR_BASE), REG(a0, HMAC_CTX * ctx), REG(a1, const unsigned char * data), REG(d0, size_t len));
int SAVEDS ASM LIB_HMAC_Final(REG(a6, __IFACE_OR_BASE), REG(a0, HMAC_CTX * ctx), REG(a1, unsigned char * md), REG(a2, unsigned int * len));
unsigned char * SAVEDS ASM LIB_HMAC(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_MD * evp_md), REG(a1, const void * key), REG(d0, int key_len), REG(a2, const unsigned char * data), REG(d1, size_t data_len), REG(a3, unsigned char * md), REG(d2, unsigned int * md_len));
OPENSSL_LHASH * SAVEDS ASM LIB_OPENSSL_LH_new(REG(a6, __IFACE_OR_BASE), REG(a0, OPENSSL_LH_HASHFUNC h), REG(a1, OPENSSL_LH_COMPFUNC c));
void SAVEDS ASM LIB_OPENSSL_LH_free(REG(a6, __IFACE_OR_BASE), REG(a0, OPENSSL_LHASH * lh));
void * SAVEDS ASM LIB_OPENSSL_LH_insert(REG(a6, __IFACE_OR_BASE), REG(a0, OPENSSL_LHASH * lh), REG(a1, void * data));
void * SAVEDS ASM LIB_OPENSSL_LH_delete(REG(a6, __IFACE_OR_BASE), REG(a0, OPENSSL_LHASH * lh), REG(a1, const void * data));
void * SAVEDS ASM LIB_OPENSSL_LH_retrieve(REG(a6, __IFACE_OR_BASE), REG(a0, OPENSSL_LHASH * lh), REG(a1, const void * data));
void SAVEDS ASM LIB_OPENSSL_LH_doall(REG(a6, __IFACE_OR_BASE), REG(a0, OPENSSL_LHASH * lh), REG(a1, OPENSSL_LH_DOALL_FUNC func));
void SAVEDS ASM LIB_OPENSSL_LH_doall_arg(REG(a6, __IFACE_OR_BASE), REG(a0, OPENSSL_LHASH * lh), REG(a1, OPENSSL_LH_DOALL_FUNCARG func), REG(a2, void * arg));
unsigned long SAVEDS ASM LIB_OPENSSL_LH_strhash(REG(a6, __IFACE_OR_BASE), REG(a0, const char * c));
unsigned long SAVEDS ASM LIB_OPENSSL_LH_num_items(REG(a6, __IFACE_OR_BASE), REG(a0, const OPENSSL_LHASH * lh));
void SAVEDS ASM LIB_OPENSSL_LH_stats_bio(REG(a6, __IFACE_OR_BASE), REG(a0, const OPENSSL_LHASH * lh), REG(a1, BIO * out));
void SAVEDS ASM LIB_OPENSSL_LH_node_stats_bio(REG(a6, __IFACE_OR_BASE), REG(a0, const OPENSSL_LHASH * lh), REG(a1, BIO * out));
void SAVEDS ASM LIB_OPENSSL_LH_node_usage_stats_bio(REG(a6, __IFACE_OR_BASE), REG(a0, const OPENSSL_LHASH * lh), REG(a1, BIO * out));
int SAVEDS ASM LIB_OBJ_NAME_init(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_OBJ_NAME_new_index(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned long (*hash_func)(const char *)), REG(a1, int (*cmp_func)(const char *, const char *)), REG(a2, void (*free_func)(const char *, int, const char *)));
const char * SAVEDS ASM LIB_OBJ_NAME_get(REG(a6, __IFACE_OR_BASE), REG(a0, const char * name), REG(d0, int type));
int SAVEDS ASM LIB_OBJ_NAME_add(REG(a6, __IFACE_OR_BASE), REG(a0, const char * name), REG(d0, int type), REG(a1, const char * data));
int SAVEDS ASM LIB_OBJ_NAME_remove(REG(a6, __IFACE_OR_BASE), REG(a0, const char * name), REG(d0, int type));
void SAVEDS ASM LIB_OBJ_NAME_cleanup(REG(a6, __IFACE_OR_BASE), REG(d0, int type));
void SAVEDS ASM LIB_OBJ_NAME_do_all(REG(a6, __IFACE_OR_BASE), REG(d0, int type), REG(a0, void (*fn)(const OBJ_NAME *, void *arg)), REG(a1, void * arg));
void SAVEDS ASM LIB_OBJ_NAME_do_all_sorted(REG(a6, __IFACE_OR_BASE), REG(d0, int type), REG(a0, void (*fn)(const OBJ_NAME *, void *arg)), REG(a1, void * arg));
ASN1_OBJECT * SAVEDS ASM LIB_OBJ_dup(REG(a6, __IFACE_OR_BASE), REG(a0, const ASN1_OBJECT * o));
ASN1_OBJECT * SAVEDS ASM LIB_OBJ_nid2obj(REG(a6, __IFACE_OR_BASE), REG(d0, int n));
const char * SAVEDS ASM LIB_OBJ_nid2ln(REG(a6, __IFACE_OR_BASE), REG(d0, int n));
const char * SAVEDS ASM LIB_OBJ_nid2sn(REG(a6, __IFACE_OR_BASE), REG(d0, int n));
int SAVEDS ASM LIB_OBJ_obj2nid(REG(a6, __IFACE_OR_BASE), REG(a0, const ASN1_OBJECT * o));
ASN1_OBJECT * SAVEDS ASM LIB_OBJ_txt2obj(REG(a6, __IFACE_OR_BASE), REG(a0, const char * s), REG(d0, int no_name));
int SAVEDS ASM LIB_OBJ_obj2txt(REG(a6, __IFACE_OR_BASE), REG(a0, char * buf), REG(d0, int buf_len), REG(a1, const ASN1_OBJECT * a), REG(d1, int no_name));
int SAVEDS ASM LIB_OBJ_txt2nid(REG(a6, __IFACE_OR_BASE), REG(a0, const char * s));
int SAVEDS ASM LIB_OBJ_ln2nid(REG(a6, __IFACE_OR_BASE), REG(a0, const char * s));
int SAVEDS ASM LIB_OBJ_sn2nid(REG(a6, __IFACE_OR_BASE), REG(a0, const char * s));
int SAVEDS ASM LIB_OBJ_cmp(REG(a6, __IFACE_OR_BASE), REG(a0, const ASN1_OBJECT * a), REG(a1, const ASN1_OBJECT * b));
int SAVEDS ASM LIB_OBJ_new_nid(REG(a6, __IFACE_OR_BASE), REG(d0, int num));
int SAVEDS ASM LIB_OBJ_add_object(REG(a6, __IFACE_OR_BASE), REG(a0, const ASN1_OBJECT * obj));
int SAVEDS ASM LIB_OBJ_create(REG(a6, __IFACE_OR_BASE), REG(a0, const char * oid), REG(a1, const char * sn), REG(a2, const char * ln));
int SAVEDS ASM LIB_OBJ_create_objects(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * in));
int SAVEDS ASM LIB_ERR_load_OBJ_strings(REG(a6, __IFACE_OR_BASE));
OCSP_RESPONSE * SAVEDS ASM LIB_OCSP_sendreq_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * b), REG(a1, const char * path), REG(a2, OCSP_REQUEST * req));
OCSP_CERTID * SAVEDS ASM LIB_OCSP_cert_to_id(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_MD * dgst), REG(a1, const X509 * subject), REG(a2, const X509 * issuer));
OCSP_CERTID * SAVEDS ASM LIB_OCSP_cert_id_new(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_MD * dgst), REG(a1, const X509_NAME * issuerName), REG(a2, const ASN1_BIT_STRING * issuerKey), REG(a3, const ASN1_INTEGER * serialNumber));
OCSP_ONEREQ * SAVEDS ASM LIB_OCSP_request_add0_id(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_REQUEST * req), REG(a1, OCSP_CERTID * cid));
int SAVEDS ASM LIB_OCSP_request_add1_nonce(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_REQUEST * req), REG(a1, unsigned char * val), REG(d0, int len));
int SAVEDS ASM LIB_OCSP_basic_add1_nonce(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_BASICRESP * resp), REG(a1, unsigned char * val), REG(d0, int len));
int SAVEDS ASM LIB_OCSP_check_nonce(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_REQUEST * req), REG(a1, OCSP_BASICRESP * bs));
int SAVEDS ASM LIB_OCSP_copy_nonce(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_BASICRESP * resp), REG(a1, OCSP_REQUEST * req));
int SAVEDS ASM LIB_OCSP_request_set1_name(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_REQUEST * req), REG(a1, const X509_NAME * nm));
int SAVEDS ASM LIB_OCSP_request_add1_cert(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_REQUEST * req), REG(a1, X509 * cert));
int SAVEDS ASM LIB_OCSP_request_sign(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_REQUEST * req), REG(a1, X509 * signer), REG(a2, EVP_PKEY * key), REG(a3, const EVP_MD * dgst), REG(d0, STACK_OF(X509) * certs), REG(d1, unsigned long flags));
int SAVEDS ASM LIB_OCSP_response_status(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_RESPONSE * resp));
OCSP_BASICRESP * SAVEDS ASM LIB_OCSP_response_get1_basic(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_RESPONSE * resp));
int SAVEDS ASM LIB_OCSP_resp_count(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_BASICRESP * bs));
OCSP_SINGLERESP * SAVEDS ASM LIB_OCSP_resp_get0(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_BASICRESP * bs), REG(d0, int idx));
int SAVEDS ASM LIB_OCSP_resp_find(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_BASICRESP * bs), REG(a1, OCSP_CERTID * id), REG(d0, int last));
int SAVEDS ASM LIB_OCSP_single_get0_status(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_SINGLERESP * single), REG(a1, int * reason), REG(a2, ASN1_GENERALIZEDTIME ** revtime), REG(a3, ASN1_GENERALIZEDTIME ** thisupd), REG(d0, ASN1_GENERALIZEDTIME ** nextupd));
int SAVEDS ASM LIB_OCSP_resp_find_status(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_BASICRESP * bs), REG(a1, OCSP_CERTID * id), REG(a2, int * status), REG(a3, int * reason), REG(d0, ASN1_GENERALIZEDTIME ** revtime), REG(d1, ASN1_GENERALIZEDTIME ** thisupd), REG(d2, ASN1_GENERALIZEDTIME ** nextupd));
int SAVEDS ASM LIB_OCSP_check_validity(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_GENERALIZEDTIME * thisupd), REG(a1, ASN1_GENERALIZEDTIME * nextupd), REG(d0, long sec), REG(d1, long maxsec));
int SAVEDS ASM LIB_OCSP_request_verify(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_REQUEST * req), REG(a1, STACK_OF(X509) * certs), REG(a2, X509_STORE * store), REG(d0, unsigned long flags));
int SAVEDS ASM LIB_OBSOLETE_OCSP_parse_url(REG(a6, __IFACE_OR_BASE), REG(a0, const char * url), REG(a1, char ** phost), REG(a2, char ** pport), REG(a3, char ** ppath), REG(d0, int * pssl));
int SAVEDS ASM LIB_OCSP_id_issuer_cmp(REG(a6, __IFACE_OR_BASE), REG(a0, const OCSP_CERTID * a), REG(a1, const OCSP_CERTID * b));
int SAVEDS ASM LIB_OCSP_id_cmp(REG(a6, __IFACE_OR_BASE), REG(a0, const OCSP_CERTID * a), REG(a1, const OCSP_CERTID * b));
int SAVEDS ASM LIB_OCSP_request_onereq_count(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_REQUEST * req));
OCSP_ONEREQ * SAVEDS ASM LIB_OCSP_request_onereq_get0(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_REQUEST * req), REG(d0, int i));
OCSP_CERTID * SAVEDS ASM LIB_OCSP_onereq_get0_id(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_ONEREQ * one));
int SAVEDS ASM LIB_OCSP_id_get0_info(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_OCTET_STRING ** piNameHash), REG(a1, ASN1_OBJECT ** pmd), REG(a2, ASN1_OCTET_STRING ** pikeyHash), REG(a3, ASN1_INTEGER ** pserial), REG(d0, OCSP_CERTID * cid));
int SAVEDS ASM LIB_OCSP_request_is_signed(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_REQUEST * req));
OCSP_RESPONSE * SAVEDS ASM LIB_OCSP_response_create(REG(a6, __IFACE_OR_BASE), REG(d0, int status), REG(a0, OCSP_BASICRESP * bs));
OCSP_SINGLERESP * SAVEDS ASM LIB_OCSP_basic_add1_status(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_BASICRESP * rsp), REG(a1, OCSP_CERTID * cid), REG(d0, int status), REG(d1, int reason), REG(a2, ASN1_TIME * revtime), REG(a3, ASN1_TIME * thisupd), REG(d2, ASN1_TIME * nextupd));
int SAVEDS ASM LIB_OCSP_basic_add1_cert(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_BASICRESP * resp), REG(a1, X509 * cert));
int SAVEDS ASM LIB_OCSP_basic_sign(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_BASICRESP * brsp), REG(a1, X509 * signer), REG(a2, EVP_PKEY * key), REG(a3, const EVP_MD * dgst), REG(d0, STACK_OF(X509) * certs), REG(d1, unsigned long flags));
X509_EXTENSION * SAVEDS ASM LIB_OCSP_crlID_new(REG(a6, __IFACE_OR_BASE), REG(a0, const char * url), REG(a1, long * n), REG(a2, char * tim));
X509_EXTENSION * SAVEDS ASM LIB_OCSP_accept_responses_new(REG(a6, __IFACE_OR_BASE), REG(a0, char ** oids));
X509_EXTENSION * SAVEDS ASM LIB_OCSP_archive_cutoff_new(REG(a6, __IFACE_OR_BASE), REG(a0, char * tim));
X509_EXTENSION * SAVEDS ASM LIB_OCSP_url_svcloc_new(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_NAME * issuer), REG(a1, const char ** urls));
int SAVEDS ASM LIB_OCSP_REQUEST_get_ext_count(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_REQUEST * x));
int SAVEDS ASM LIB_OCSP_REQUEST_get_ext_by_NID(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_REQUEST * x), REG(d0, int nid), REG(d1, int lastpos));
int SAVEDS ASM LIB_OCSP_REQUEST_get_ext_by_OBJ(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_REQUEST * x), REG(a1, const ASN1_OBJECT * obj), REG(d0, int lastpos));
int SAVEDS ASM LIB_OCSP_REQUEST_get_ext_by_critical(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_REQUEST * x), REG(d0, int crit), REG(d1, int lastpos));
X509_EXTENSION * SAVEDS ASM LIB_OCSP_REQUEST_get_ext(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_REQUEST * x), REG(d0, int loc));
X509_EXTENSION * SAVEDS ASM LIB_OCSP_REQUEST_delete_ext(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_REQUEST * x), REG(d0, int loc));
void * SAVEDS ASM LIB_OCSP_REQUEST_get1_ext_d2i(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_REQUEST * x), REG(d0, int nid), REG(a1, int * crit), REG(a2, int * idx));
int SAVEDS ASM LIB_OCSP_REQUEST_add1_ext_i2d(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_REQUEST * x), REG(d0, int nid), REG(a1, void * value), REG(d1, int crit), REG(d2, unsigned long flags));
int SAVEDS ASM LIB_OCSP_REQUEST_add_ext(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_REQUEST * x), REG(a1, X509_EXTENSION * ex), REG(d0, int loc));
int SAVEDS ASM LIB_OCSP_ONEREQ_get_ext_count(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_ONEREQ * x));
int SAVEDS ASM LIB_OCSP_ONEREQ_get_ext_by_NID(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_ONEREQ * x), REG(d0, int nid), REG(d1, int lastpos));
int SAVEDS ASM LIB_OCSP_ONEREQ_get_ext_by_OBJ(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_ONEREQ * x), REG(a1, const ASN1_OBJECT * obj), REG(d0, int lastpos));
int SAVEDS ASM LIB_OCSP_ONEREQ_get_ext_by_critical(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_ONEREQ * x), REG(d0, int crit), REG(d1, int lastpos));
X509_EXTENSION * SAVEDS ASM LIB_OCSP_ONEREQ_get_ext(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_ONEREQ * x), REG(d0, int loc));
X509_EXTENSION * SAVEDS ASM LIB_OCSP_ONEREQ_delete_ext(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_ONEREQ * x), REG(d0, int loc));
void * SAVEDS ASM LIB_OCSP_ONEREQ_get1_ext_d2i(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_ONEREQ * x), REG(d0, int nid), REG(a1, int * crit), REG(a2, int * idx));
int SAVEDS ASM LIB_OCSP_ONEREQ_add1_ext_i2d(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_ONEREQ * x), REG(d0, int nid), REG(a1, void * value), REG(d1, int crit), REG(d2, unsigned long flags));
int SAVEDS ASM LIB_OCSP_ONEREQ_add_ext(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_ONEREQ * x), REG(a1, X509_EXTENSION * ex), REG(d0, int loc));
int SAVEDS ASM LIB_OCSP_BASICRESP_get_ext_count(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_BASICRESP * x));
int SAVEDS ASM LIB_OCSP_BASICRESP_get_ext_by_NID(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_BASICRESP * x), REG(d0, int nid), REG(d1, int lastpos));
int SAVEDS ASM LIB_OCSP_BASICRESP_get_ext_by_OBJ(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_BASICRESP * x), REG(a1, const ASN1_OBJECT * obj), REG(d0, int lastpos));
int SAVEDS ASM LIB_OCSP_BASICRESP_get_ext_by_critical(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_BASICRESP * x), REG(d0, int crit), REG(d1, int lastpos));
X509_EXTENSION * SAVEDS ASM LIB_OCSP_BASICRESP_get_ext(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_BASICRESP * x), REG(d0, int loc));
X509_EXTENSION * SAVEDS ASM LIB_OCSP_BASICRESP_delete_ext(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_BASICRESP * x), REG(d0, int loc));
void * SAVEDS ASM LIB_OCSP_BASICRESP_get1_ext_d2i(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_BASICRESP * x), REG(d0, int nid), REG(a1, int * crit), REG(a2, int * idx));
int SAVEDS ASM LIB_OCSP_BASICRESP_add1_ext_i2d(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_BASICRESP * x), REG(d0, int nid), REG(a1, void * value), REG(d1, int crit), REG(d2, unsigned long flags));
int SAVEDS ASM LIB_OCSP_BASICRESP_add_ext(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_BASICRESP * x), REG(a1, X509_EXTENSION * ex), REG(d0, int loc));
int SAVEDS ASM LIB_OCSP_SINGLERESP_get_ext_count(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_SINGLERESP * x));
int SAVEDS ASM LIB_OCSP_SINGLERESP_get_ext_by_NID(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_SINGLERESP * x), REG(d0, int nid), REG(d1, int lastpos));
int SAVEDS ASM LIB_OCSP_SINGLERESP_get_ext_by_OBJ(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_SINGLERESP * x), REG(a1, const ASN1_OBJECT * obj), REG(d0, int lastpos));
int SAVEDS ASM LIB_OCSP_SINGLERESP_get_ext_by_critical(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_SINGLERESP * x), REG(d0, int crit), REG(d1, int lastpos));
X509_EXTENSION * SAVEDS ASM LIB_OCSP_SINGLERESP_get_ext(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_SINGLERESP * x), REG(d0, int loc));
X509_EXTENSION * SAVEDS ASM LIB_OCSP_SINGLERESP_delete_ext(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_SINGLERESP * x), REG(d0, int loc));
void * SAVEDS ASM LIB_OCSP_SINGLERESP_get1_ext_d2i(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_SINGLERESP * x), REG(d0, int nid), REG(a1, int * crit), REG(a2, int * idx));
int SAVEDS ASM LIB_OCSP_SINGLERESP_add1_ext_i2d(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_SINGLERESP * x), REG(d0, int nid), REG(a1, void * value), REG(d1, int crit), REG(d2, unsigned long flags));
int SAVEDS ASM LIB_OCSP_SINGLERESP_add_ext(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_SINGLERESP * x), REG(a1, X509_EXTENSION * ex), REG(d0, int loc));
OCSP_SINGLERESP * SAVEDS ASM LIB_OCSP_SINGLERESP_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_OCSP_SINGLERESP_free(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_SINGLERESP * a));
OCSP_SINGLERESP * SAVEDS ASM LIB_d2i_OCSP_SINGLERESP(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_SINGLERESP ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_OCSP_SINGLERESP(REG(a6, __IFACE_OR_BASE), REG(a0, const OCSP_SINGLERESP * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_OCSP_SINGLERESP_it(REG(a6, __IFACE_OR_BASE));
OCSP_CERTSTATUS * SAVEDS ASM LIB_OCSP_CERTSTATUS_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_OCSP_CERTSTATUS_free(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_CERTSTATUS * a));
OCSP_CERTSTATUS * SAVEDS ASM LIB_d2i_OCSP_CERTSTATUS(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_CERTSTATUS ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_OCSP_CERTSTATUS(REG(a6, __IFACE_OR_BASE), REG(a0, const OCSP_CERTSTATUS * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_OCSP_CERTSTATUS_it(REG(a6, __IFACE_OR_BASE));
OCSP_REVOKEDINFO * SAVEDS ASM LIB_OCSP_REVOKEDINFO_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_OCSP_REVOKEDINFO_free(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_REVOKEDINFO * a));
OCSP_REVOKEDINFO * SAVEDS ASM LIB_d2i_OCSP_REVOKEDINFO(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_REVOKEDINFO ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_OCSP_REVOKEDINFO(REG(a6, __IFACE_OR_BASE), REG(a0, const OCSP_REVOKEDINFO * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_OCSP_REVOKEDINFO_it(REG(a6, __IFACE_OR_BASE));
OCSP_BASICRESP * SAVEDS ASM LIB_OCSP_BASICRESP_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_OCSP_BASICRESP_free(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_BASICRESP * a));
OCSP_BASICRESP * SAVEDS ASM LIB_d2i_OCSP_BASICRESP(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_BASICRESP ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_OCSP_BASICRESP(REG(a6, __IFACE_OR_BASE), REG(a0, const OCSP_BASICRESP * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_OCSP_BASICRESP_it(REG(a6, __IFACE_OR_BASE));
OCSP_RESPDATA * SAVEDS ASM LIB_OCSP_RESPDATA_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_OCSP_RESPDATA_free(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_RESPDATA * a));
OCSP_RESPDATA * SAVEDS ASM LIB_d2i_OCSP_RESPDATA(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_RESPDATA ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_OCSP_RESPDATA(REG(a6, __IFACE_OR_BASE), REG(a0, const OCSP_RESPDATA * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_OCSP_RESPDATA_it(REG(a6, __IFACE_OR_BASE));
OCSP_RESPID * SAVEDS ASM LIB_OCSP_RESPID_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_OCSP_RESPID_free(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_RESPID * a));
OCSP_RESPID * SAVEDS ASM LIB_d2i_OCSP_RESPID(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_RESPID ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_OCSP_RESPID(REG(a6, __IFACE_OR_BASE), REG(a0, const OCSP_RESPID * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_OCSP_RESPID_it(REG(a6, __IFACE_OR_BASE));
OCSP_RESPONSE * SAVEDS ASM LIB_OCSP_RESPONSE_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_OCSP_RESPONSE_free(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_RESPONSE * a));
OCSP_RESPONSE * SAVEDS ASM LIB_d2i_OCSP_RESPONSE(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_RESPONSE ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_OCSP_RESPONSE(REG(a6, __IFACE_OR_BASE), REG(a0, const OCSP_RESPONSE * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_OCSP_RESPONSE_it(REG(a6, __IFACE_OR_BASE));
OCSP_RESPBYTES * SAVEDS ASM LIB_OCSP_RESPBYTES_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_OCSP_RESPBYTES_free(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_RESPBYTES * a));
OCSP_RESPBYTES * SAVEDS ASM LIB_d2i_OCSP_RESPBYTES(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_RESPBYTES ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_OCSP_RESPBYTES(REG(a6, __IFACE_OR_BASE), REG(a0, const OCSP_RESPBYTES * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_OCSP_RESPBYTES_it(REG(a6, __IFACE_OR_BASE));
OCSP_ONEREQ * SAVEDS ASM LIB_OCSP_ONEREQ_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_OCSP_ONEREQ_free(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_ONEREQ * a));
OCSP_ONEREQ * SAVEDS ASM LIB_d2i_OCSP_ONEREQ(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_ONEREQ ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_OCSP_ONEREQ(REG(a6, __IFACE_OR_BASE), REG(a0, const OCSP_ONEREQ * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_OCSP_ONEREQ_it(REG(a6, __IFACE_OR_BASE));
OCSP_CERTID * SAVEDS ASM LIB_OCSP_CERTID_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_OCSP_CERTID_free(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_CERTID * a));
OCSP_CERTID * SAVEDS ASM LIB_d2i_OCSP_CERTID(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_CERTID ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_OCSP_CERTID(REG(a6, __IFACE_OR_BASE), REG(a0, const OCSP_CERTID * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_OCSP_CERTID_it(REG(a6, __IFACE_OR_BASE));
OCSP_REQUEST * SAVEDS ASM LIB_OCSP_REQUEST_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_OCSP_REQUEST_free(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_REQUEST * a));
OCSP_REQUEST * SAVEDS ASM LIB_d2i_OCSP_REQUEST(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_REQUEST ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_OCSP_REQUEST(REG(a6, __IFACE_OR_BASE), REG(a0, const OCSP_REQUEST * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_OCSP_REQUEST_it(REG(a6, __IFACE_OR_BASE));
OCSP_SIGNATURE * SAVEDS ASM LIB_OCSP_SIGNATURE_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_OCSP_SIGNATURE_free(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_SIGNATURE * a));
OCSP_SIGNATURE * SAVEDS ASM LIB_d2i_OCSP_SIGNATURE(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_SIGNATURE ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_OCSP_SIGNATURE(REG(a6, __IFACE_OR_BASE), REG(a0, const OCSP_SIGNATURE * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_OCSP_SIGNATURE_it(REG(a6, __IFACE_OR_BASE));
OCSP_REQINFO * SAVEDS ASM LIB_OCSP_REQINFO_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_OCSP_REQINFO_free(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_REQINFO * a));
OCSP_REQINFO * SAVEDS ASM LIB_d2i_OCSP_REQINFO(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_REQINFO ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_OCSP_REQINFO(REG(a6, __IFACE_OR_BASE), REG(a0, const OCSP_REQINFO * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_OCSP_REQINFO_it(REG(a6, __IFACE_OR_BASE));
OCSP_CRLID * SAVEDS ASM LIB_OCSP_CRLID_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_OCSP_CRLID_free(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_CRLID * a));
OCSP_CRLID * SAVEDS ASM LIB_d2i_OCSP_CRLID(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_CRLID ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_OCSP_CRLID(REG(a6, __IFACE_OR_BASE), REG(a0, const OCSP_CRLID * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_OCSP_CRLID_it(REG(a6, __IFACE_OR_BASE));
OCSP_SERVICELOC * SAVEDS ASM LIB_OCSP_SERVICELOC_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_OCSP_SERVICELOC_free(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_SERVICELOC * a));
OCSP_SERVICELOC * SAVEDS ASM LIB_d2i_OCSP_SERVICELOC(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_SERVICELOC ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_OCSP_SERVICELOC(REG(a6, __IFACE_OR_BASE), REG(a0, const OCSP_SERVICELOC * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_OCSP_SERVICELOC_it(REG(a6, __IFACE_OR_BASE));
const char * SAVEDS ASM LIB_OCSP_response_status_str(REG(a6, __IFACE_OR_BASE), REG(d0, long s));
const char * SAVEDS ASM LIB_OCSP_cert_status_str(REG(a6, __IFACE_OR_BASE), REG(d0, long s));
const char * SAVEDS ASM LIB_OCSP_crl_reason_str(REG(a6, __IFACE_OR_BASE), REG(d0, long s));
int SAVEDS ASM LIB_OCSP_REQUEST_print(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, OCSP_REQUEST * a), REG(d0, unsigned long flags));
int SAVEDS ASM LIB_OCSP_RESPONSE_print(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, OCSP_RESPONSE * o), REG(d0, unsigned long flags));
int SAVEDS ASM LIB_OCSP_basic_verify(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_BASICRESP * bs), REG(a1, STACK_OF(X509) * certs), REG(a2, X509_STORE * st), REG(d0, unsigned long flags));
int SAVEDS ASM LIB_ERR_load_OCSP_strings(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_PEM_get_EVP_CIPHER_INFO(REG(a6, __IFACE_OR_BASE), REG(a0, char * header), REG(a1, EVP_CIPHER_INFO * cipher));
int SAVEDS ASM LIB_PEM_do_header(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_CIPHER_INFO * cipher), REG(a1, unsigned char * data), REG(a2, long * len), REG(a3, pem_password_cb * callback), REG(d0, void * u));
int SAVEDS ASM LIB_PEM_read_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, char ** name), REG(a2, char ** header), REG(a3, unsigned char ** data), REG(d0, long * len));
int SAVEDS ASM LIB_PEM_write_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, const char * name), REG(a2, const char * hdr), REG(a3, const unsigned char * data), REG(d0, long len));
int SAVEDS ASM LIB_PEM_bytes_read_bio(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned char ** pdata), REG(a1, long * plen), REG(a2, char ** pnm), REG(a3, const char * name), REG(d0, BIO * bp), REG(d1, pem_password_cb * cb), REG(d2, void * u));
void * SAVEDS ASM LIB_PEM_ASN1_read_bio(REG(a6, __IFACE_OR_BASE), REG(a0, d2i_of_void * d2i), REG(a1, const char * name), REG(a2, BIO * bp), REG(a3, void ** x), REG(d0, pem_password_cb * cb), REG(d1, void * u));
int SAVEDS ASM LIB_PEM_ASN1_write_bio(REG(a6, __IFACE_OR_BASE), REG(a0, i2d_of_void * i2d), REG(a1, const char * name), REG(a2, BIO * bp), REG(a3, const void * x), REG(d0, const EVP_CIPHER * enc), REG(d1, const unsigned char * kstr), REG(d2, int klen), REG(d3, pem_password_cb * cb), REG(d4, void * u));
STACK_OF(X509_INFO) * SAVEDS ASM LIB_PEM_X509_INFO_read_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, STACK_OF(X509_INFO) * sk), REG(a2, pem_password_cb * cb), REG(a3, void * u));
int SAVEDS ASM LIB_PEM_X509_INFO_write_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, const X509_INFO * xi), REG(a2, EVP_CIPHER * enc), REG(a3, const unsigned char * kstr), REG(d0, int klen), REG(d1, pem_password_cb * cd), REG(d2, void * u));
int SAVEDS ASM LIB_PEM_SignInit(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_MD_CTX * ctx), REG(a1, EVP_MD * type));
int SAVEDS ASM LIB_PEM_SignUpdate(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_MD_CTX * ctx), REG(a1, const unsigned char * d), REG(d0, unsigned int cnt));
int SAVEDS ASM LIB_PEM_SignFinal(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_MD_CTX * ctx), REG(a1, unsigned char * sigret), REG(a2, unsigned int * siglen), REG(a3, EVP_PKEY * pkey));
int SAVEDS ASM LIB_PEM_def_callback(REG(a6, __IFACE_OR_BASE), REG(a0, char * buf), REG(d0, int num), REG(d1, int w), REG(a1, void * key));
void SAVEDS ASM LIB_PEM_proc_type(REG(a6, __IFACE_OR_BASE), REG(a0, char * buf), REG(d0, int type));
void SAVEDS ASM LIB_PEM_dek_info(REG(a6, __IFACE_OR_BASE), REG(a0, char * buf), REG(a1, const char * type), REG(d0, int len), REG(a2, const char * str));
X509 * SAVEDS ASM LIB_PEM_read_bio_X509(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, X509 ** x), REG(a2, pem_password_cb * cb), REG(a3, void * u));
int SAVEDS ASM LIB_PEM_write_bio_X509(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, const X509 * x));
X509 * SAVEDS ASM LIB_PEM_read_bio_X509_AUX(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, X509 ** x), REG(a2, pem_password_cb * cb), REG(a3, void * u));
int SAVEDS ASM LIB_PEM_write_bio_X509_AUX(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, const X509 * x));
X509_REQ * SAVEDS ASM LIB_PEM_read_bio_X509_REQ(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, X509_REQ ** x), REG(a2, pem_password_cb * cb), REG(a3, void * u));
int SAVEDS ASM LIB_PEM_write_bio_X509_REQ(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, const X509_REQ * x));
int SAVEDS ASM LIB_PEM_write_bio_X509_REQ_NEW(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, const X509_REQ * x));
X509_CRL * SAVEDS ASM LIB_PEM_read_bio_X509_CRL(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, X509_CRL ** x), REG(a2, pem_password_cb * cb), REG(a3, void * u));
int SAVEDS ASM LIB_PEM_write_bio_X509_CRL(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, const X509_CRL * x));
PKCS7 * SAVEDS ASM LIB_PEM_read_bio_PKCS7(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, PKCS7 ** x), REG(a2, pem_password_cb * cb), REG(a3, void * u));
int SAVEDS ASM LIB_PEM_write_bio_PKCS7(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, const PKCS7 * x));
NETSCAPE_CERT_SEQUENCE * SAVEDS ASM LIB_PEM_read_bio_NETSCAPE_CERT_SEQUENCE(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, NETSCAPE_CERT_SEQUENCE ** x), REG(a2, pem_password_cb * cb), REG(a3, void * u));
int SAVEDS ASM LIB_PEM_write_bio_NETSCAPE_CERT_SEQUENCE(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, const NETSCAPE_CERT_SEQUENCE * x));
X509_SIG * SAVEDS ASM LIB_PEM_read_bio_PKCS8(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, X509_SIG ** x), REG(a2, pem_password_cb * cb), REG(a3, void * u));
int SAVEDS ASM LIB_PEM_write_bio_PKCS8(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, const X509_SIG * x));
PKCS8_PRIV_KEY_INFO * SAVEDS ASM LIB_PEM_read_bio_PKCS8_PRIV_KEY_INFO(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, PKCS8_PRIV_KEY_INFO ** x), REG(a2, pem_password_cb * cb), REG(a3, void * u));
int SAVEDS ASM LIB_PEM_write_bio_PKCS8_PRIV_KEY_INFO(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, const PKCS8_PRIV_KEY_INFO * x));
RSA * SAVEDS ASM LIB_PEM_read_bio_RSAPrivateKey(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, RSA ** x), REG(a2, pem_password_cb * cb), REG(a3, void * u));
int SAVEDS ASM LIB_PEM_write_bio_RSAPrivateKey(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, const RSA * x), REG(a2, const EVP_CIPHER * enc), REG(a3, const unsigned char * kstr), REG(d0, int klen), REG(d1, pem_password_cb * cb), REG(d2, void * u));
RSA * SAVEDS ASM LIB_PEM_read_bio_RSAPublicKey(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, RSA ** x), REG(a2, pem_password_cb * cb), REG(a3, void * u));
int SAVEDS ASM LIB_PEM_write_bio_RSAPublicKey(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, const RSA * x));
RSA * SAVEDS ASM LIB_PEM_read_bio_RSA_PUBKEY(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, RSA ** x), REG(a2, pem_password_cb * cb), REG(a3, void * u));
int SAVEDS ASM LIB_PEM_write_bio_RSA_PUBKEY(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, const RSA * x));
DSA * SAVEDS ASM LIB_PEM_read_bio_DSAPrivateKey(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, DSA ** x), REG(a2, pem_password_cb * cb), REG(a3, void * u));
int SAVEDS ASM LIB_PEM_write_bio_DSAPrivateKey(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, const DSA * x), REG(a2, const EVP_CIPHER * enc), REG(a3, const unsigned char * kstr), REG(d0, int klen), REG(d1, pem_password_cb * cb), REG(d2, void * u));
DSA * SAVEDS ASM LIB_PEM_read_bio_DSA_PUBKEY(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, DSA ** x), REG(a2, pem_password_cb * cb), REG(a3, void * u));
int SAVEDS ASM LIB_PEM_write_bio_DSA_PUBKEY(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, const DSA * x));
DSA * SAVEDS ASM LIB_PEM_read_bio_DSAparams(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, DSA ** x), REG(a2, pem_password_cb * cb), REG(a3, void * u));
int SAVEDS ASM LIB_PEM_write_bio_DSAparams(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, const DSA * x));
DH * SAVEDS ASM LIB_PEM_read_bio_DHparams(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, DH ** x), REG(a2, pem_password_cb * cb), REG(a3, void * u));
int SAVEDS ASM LIB_PEM_write_bio_DHparams(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, const DH * x));
EVP_PKEY * SAVEDS ASM LIB_PEM_read_bio_PrivateKey(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, EVP_PKEY ** x), REG(a2, pem_password_cb * cb), REG(a3, void * u));
int SAVEDS ASM LIB_PEM_write_bio_PrivateKey(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, const EVP_PKEY * x), REG(a2, const EVP_CIPHER * enc), REG(a3, const unsigned char * kstr), REG(d0, int klen), REG(d1, pem_password_cb * cb), REG(d2, void * u));
EVP_PKEY * SAVEDS ASM LIB_PEM_read_bio_PUBKEY(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, EVP_PKEY ** x), REG(a2, pem_password_cb * cb), REG(a3, void * u));
int SAVEDS ASM LIB_PEM_write_bio_PUBKEY(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, const EVP_PKEY * x));
int SAVEDS ASM LIB_PEM_write_bio_PKCS8PrivateKey_nid(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, const EVP_PKEY * x), REG(d0, int nid), REG(a2, const char * kstr), REG(d1, int klen), REG(a3, pem_password_cb * cb), REG(d2, void * u));
int SAVEDS ASM LIB_PEM_write_bio_PKCS8PrivateKey(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, const EVP_PKEY * x), REG(a2, const EVP_CIPHER * enc), REG(a3, const char * kstr), REG(d0, int klen), REG(d1, pem_password_cb * cb), REG(d2, void * u));
int SAVEDS ASM LIB_i2d_PKCS8PrivateKey_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, const EVP_PKEY * x), REG(a2, const EVP_CIPHER * enc), REG(a3, const char * kstr), REG(d0, int klen), REG(d1, pem_password_cb * cb), REG(d2, void * u));
int SAVEDS ASM LIB_i2d_PKCS8PrivateKey_nid_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, const EVP_PKEY * x), REG(d0, int nid), REG(a2, const char * kstr), REG(d1, int klen), REG(a3, pem_password_cb * cb), REG(d2, void * u));
EVP_PKEY * SAVEDS ASM LIB_d2i_PKCS8PrivateKey_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, EVP_PKEY ** x), REG(a2, pem_password_cb * cb), REG(a3, void * u));
int SAVEDS ASM LIB_ERR_load_PEM_strings(REG(a6, __IFACE_OR_BASE));
PKCS12_SAFEBAG * SAVEDS ASM LIB_OBSOLETE_PKCS12_x5092certbag(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * x509));
PKCS12_SAFEBAG * SAVEDS ASM LIB_OBSOLETE_PKCS12_x509crl2certbag(REG(a6, __IFACE_OR_BASE), REG(a0, X509_CRL * crl));
X509 * SAVEDS ASM LIB_OBSOLETE_PKCS12_certbag2x509(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS12_SAFEBAG * bag));
PKCS12_SAFEBAG * SAVEDS ASM LIB_PKCS12_item_pack_safebag(REG(a6, __IFACE_OR_BASE), REG(a0, void * obj), REG(a1, const ASN1_ITEM * it), REG(d0, int nid1), REG(d1, int nid2));
PKCS12_SAFEBAG * SAVEDS ASM LIB_OBSOLETE_PKCS12_MAKE_KEYBAG(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS8_PRIV_KEY_INFO * p8));
PKCS8_PRIV_KEY_INFO * SAVEDS ASM LIB_PKCS8_decrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_SIG * p8), REG(a1, const char * pass), REG(d0, int passlen));
PKCS8_PRIV_KEY_INFO * SAVEDS ASM LIB_PKCS12_decrypt_skey(REG(a6, __IFACE_OR_BASE), REG(a0, const PKCS12_SAFEBAG * bag), REG(a1, const char * pass), REG(d0, int passlen));
X509_SIG * SAVEDS ASM LIB_PKCS8_encrypt(REG(a6, __IFACE_OR_BASE), REG(d0, int pbe_nid), REG(a0, const EVP_CIPHER * cipher), REG(a1, const char * pass), REG(d1, int passlen), REG(a2, unsigned char * salt), REG(d2, int saltlen), REG(d3, int iter), REG(a3, PKCS8_PRIV_KEY_INFO * p8));
PKCS12_SAFEBAG * SAVEDS ASM LIB_OBSOLETE_PKCS12_MAKE_SHKEYBAG(REG(a6, __IFACE_OR_BASE), REG(d0, int pbe_nid), REG(a0, const char * pass), REG(d1, int passlen), REG(a1, unsigned char * salt), REG(d2, int saltlen), REG(d3, int iter), REG(a2, PKCS8_PRIV_KEY_INFO * p8));
PKCS7 * SAVEDS ASM LIB_PKCS12_pack_p7data(REG(a6, __IFACE_OR_BASE), REG(a0, STACK_OF(PKCS12_SAFEBAG) * sk));
STACK_OF(PKCS12_SAFEBAG) * SAVEDS ASM LIB_PKCS12_unpack_p7data(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7 * p7));
PKCS7 * SAVEDS ASM LIB_PKCS12_pack_p7encdata(REG(a6, __IFACE_OR_BASE), REG(d0, int pbe_nid), REG(a0, const char * pass), REG(d1, int passlen), REG(a1, unsigned char * salt), REG(d2, int saltlen), REG(d3, int iter), REG(a2, STACK_OF(PKCS12_SAFEBAG) * bags));
STACK_OF(PKCS12_SAFEBAG) * SAVEDS ASM LIB_PKCS12_unpack_p7encdata(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7 * p7), REG(a1, const char * pass), REG(d0, int passlen));
int SAVEDS ASM LIB_PKCS12_pack_authsafes(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS12 * p12), REG(a1, STACK_OF(PKCS7) * safes));
STACK_OF(PKCS7) * SAVEDS ASM LIB_PKCS12_unpack_authsafes(REG(a6, __IFACE_OR_BASE), REG(a0, const PKCS12 * p12));
int SAVEDS ASM LIB_PKCS12_add_localkeyid(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS12_SAFEBAG * bag), REG(a1, unsigned char * name), REG(d0, int namelen));
int SAVEDS ASM LIB_PKCS12_add_friendlyname_asc(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS12_SAFEBAG * bag), REG(a1, const char * name), REG(d0, int namelen));
int SAVEDS ASM LIB_PKCS12_add_CSPName_asc(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS12_SAFEBAG * bag), REG(a1, const char * name), REG(d0, int namelen));
int SAVEDS ASM LIB_PKCS12_add_friendlyname_uni(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS12_SAFEBAG * bag), REG(a1, const unsigned char * name), REG(d0, int namelen));
int SAVEDS ASM LIB_PKCS8_add_keyusage(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS8_PRIV_KEY_INFO * p8), REG(d0, int usage));
ASN1_TYPE * SAVEDS ASM LIB_PKCS12_get_attr_gen(REG(a6, __IFACE_OR_BASE), REG(a0, const STACK_OF(X509_ATTRIBUTE) * attrs), REG(d0, int attr_nid));
char * SAVEDS ASM LIB_PKCS12_get_friendlyname(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS12_SAFEBAG * bag));
unsigned char * SAVEDS ASM LIB_PKCS12_pbe_crypt(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_ALGOR * algor), REG(a1, const char * pass), REG(d0, int passlen), REG(a2, const unsigned char * in), REG(d1, int inlen), REG(a3, unsigned char ** data), REG(d2, int * datalen), REG(d3, int en_de));
void * SAVEDS ASM LIB_PKCS12_item_decrypt_d2i(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_ALGOR * algor), REG(a1, const ASN1_ITEM * it), REG(a2, const char * pass), REG(d0, int passlen), REG(a3, const ASN1_OCTET_STRING * oct), REG(d1, int zbuf));
ASN1_OCTET_STRING * SAVEDS ASM LIB_PKCS12_item_i2d_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, X509_ALGOR * algor), REG(a1, const ASN1_ITEM * it), REG(a2, const char * pass), REG(d0, int passlen), REG(a3, void * obj), REG(d1, int zbuf));
PKCS12 * SAVEDS ASM LIB_PKCS12_init(REG(a6, __IFACE_OR_BASE), REG(d0, int mode));
int SAVEDS ASM LIB_PKCS12_key_gen_asc(REG(a6, __IFACE_OR_BASE), REG(a0, const char * pass), REG(d0, int passlen), REG(a1, unsigned char * salt), REG(d1, int saltlen), REG(d2, int id), REG(d3, int iter), REG(d4, int n), REG(a2, unsigned char * out), REG(a3, const EVP_MD * md_type));
int SAVEDS ASM LIB_PKCS12_key_gen_uni(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned char * pass), REG(d0, int passlen), REG(a1, unsigned char * salt), REG(d1, int saltlen), REG(d2, int id), REG(d3, int iter), REG(d4, int n), REG(a2, unsigned char * out), REG(a3, const EVP_MD * md_type));
int SAVEDS ASM LIB_PKCS12_PBE_keyivgen(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_CIPHER_CTX * ctx), REG(a1, const char * pass), REG(d0, int passlen), REG(a2, ASN1_TYPE * param), REG(a3, const EVP_CIPHER * cipher), REG(d1, const EVP_MD * md_type), REG(d2, int en_de));
int SAVEDS ASM LIB_PKCS12_gen_mac(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS12 * p12), REG(a1, const char * pass), REG(d0, int passlen), REG(a2, unsigned char * mac), REG(a3, unsigned int * maclen));
int SAVEDS ASM LIB_PKCS12_verify_mac(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS12 * p12), REG(a1, const char * pass), REG(d0, int passlen));
int SAVEDS ASM LIB_PKCS12_set_mac(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS12 * p12), REG(a1, const char * pass), REG(d0, int passlen), REG(a2, unsigned char * salt), REG(d1, int saltlen), REG(d2, int iter), REG(a3, const EVP_MD * md_type));
int SAVEDS ASM LIB_PKCS12_setup_mac(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS12 * p12), REG(d0, int iter), REG(a1, unsigned char * salt), REG(d1, int saltlen), REG(a2, const EVP_MD * md_type));
unsigned char * SAVEDS ASM LIB_OPENSSL_asc2uni(REG(a6, __IFACE_OR_BASE), REG(a0, const char * asc), REG(d0, int asclen), REG(a1, unsigned char ** uni), REG(a2, int * unilen));
char * SAVEDS ASM LIB_OPENSSL_uni2asc(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * uni), REG(d0, int unilen));
PKCS12 * SAVEDS ASM LIB_PKCS12_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_PKCS12_free(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS12 * a));
PKCS12 * SAVEDS ASM LIB_d2i_PKCS12(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS12 ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_PKCS12(REG(a6, __IFACE_OR_BASE), REG(a0, const PKCS12 * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_PKCS12_it(REG(a6, __IFACE_OR_BASE));
PKCS12_MAC_DATA * SAVEDS ASM LIB_PKCS12_MAC_DATA_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_PKCS12_MAC_DATA_free(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS12_MAC_DATA * a));
PKCS12_MAC_DATA * SAVEDS ASM LIB_d2i_PKCS12_MAC_DATA(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS12_MAC_DATA ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_PKCS12_MAC_DATA(REG(a6, __IFACE_OR_BASE), REG(a0, const PKCS12_MAC_DATA * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_PKCS12_MAC_DATA_it(REG(a6, __IFACE_OR_BASE));
PKCS12_SAFEBAG * SAVEDS ASM LIB_PKCS12_SAFEBAG_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_PKCS12_SAFEBAG_free(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS12_SAFEBAG * a));
PKCS12_SAFEBAG * SAVEDS ASM LIB_d2i_PKCS12_SAFEBAG(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS12_SAFEBAG ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_PKCS12_SAFEBAG(REG(a6, __IFACE_OR_BASE), REG(a0, const PKCS12_SAFEBAG * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_PKCS12_SAFEBAG_it(REG(a6, __IFACE_OR_BASE));
PKCS12_BAGS * SAVEDS ASM LIB_PKCS12_BAGS_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_PKCS12_BAGS_free(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS12_BAGS * a));
PKCS12_BAGS * SAVEDS ASM LIB_d2i_PKCS12_BAGS(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS12_BAGS ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_PKCS12_BAGS(REG(a6, __IFACE_OR_BASE), REG(a0, const PKCS12_BAGS * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_PKCS12_BAGS_it(REG(a6, __IFACE_OR_BASE));
const ASN1_ITEM * SAVEDS ASM LIB_PKCS12_SAFEBAGS_it(REG(a6, __IFACE_OR_BASE));
const ASN1_ITEM * SAVEDS ASM LIB_PKCS12_AUTHSAFES_it(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_PKCS12_PBE_add(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_PKCS12_parse(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS12 * p12), REG(a1, const char * pass), REG(a2, EVP_PKEY ** pkey), REG(a3, X509 ** cert), REG(d0, STACK_OF(X509) ** ca));
PKCS12 * SAVEDS ASM LIB_PKCS12_create(REG(a6, __IFACE_OR_BASE), REG(a0, const char * pass), REG(a1, const char * name), REG(a2, EVP_PKEY * pkey), REG(a3, X509 * cert), REG(d0, STACK_OF(X509) * ca), REG(d1, int nid_key), REG(d2, int nid_cert), REG(d3, int iter), REG(d4, int mac_iter), REG(d5, int keytype));
int SAVEDS ASM LIB_i2d_PKCS12_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, const PKCS12 * p12));
PKCS12 * SAVEDS ASM LIB_d2i_PKCS12_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, PKCS12 ** p12));
int SAVEDS ASM LIB_PKCS12_newpass(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS12 * p12), REG(a1, const char * oldpass), REG(a2, const char * newpass));
int SAVEDS ASM LIB_ERR_load_PKCS12_strings(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_PKCS7_ISSUER_AND_SERIAL_digest(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7_ISSUER_AND_SERIAL * data), REG(a1, const EVP_MD * type), REG(a2, unsigned char * md), REG(a3, unsigned int * len));
PKCS7 * SAVEDS ASM LIB_PKCS7_dup(REG(a6, __IFACE_OR_BASE), REG(a0, const PKCS7 * p7));
PKCS7 * SAVEDS ASM LIB_d2i_PKCS7_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, PKCS7 ** p7));
int SAVEDS ASM LIB_i2d_PKCS7_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, const PKCS7 * p7));
PKCS7_ISSUER_AND_SERIAL * SAVEDS ASM LIB_PKCS7_ISSUER_AND_SERIAL_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_PKCS7_ISSUER_AND_SERIAL_free(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7_ISSUER_AND_SERIAL * a));
PKCS7_ISSUER_AND_SERIAL * SAVEDS ASM LIB_d2i_PKCS7_ISSUER_AND_SERIAL(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7_ISSUER_AND_SERIAL ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_PKCS7_ISSUER_AND_SERIAL(REG(a6, __IFACE_OR_BASE), REG(a0, const PKCS7_ISSUER_AND_SERIAL * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_PKCS7_ISSUER_AND_SERIAL_it(REG(a6, __IFACE_OR_BASE));
PKCS7_SIGNER_INFO * SAVEDS ASM LIB_PKCS7_SIGNER_INFO_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_PKCS7_SIGNER_INFO_free(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7_SIGNER_INFO * a));
PKCS7_SIGNER_INFO * SAVEDS ASM LIB_d2i_PKCS7_SIGNER_INFO(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7_SIGNER_INFO ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_PKCS7_SIGNER_INFO(REG(a6, __IFACE_OR_BASE), REG(a0, const PKCS7_SIGNER_INFO * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_PKCS7_SIGNER_INFO_it(REG(a6, __IFACE_OR_BASE));
PKCS7_RECIP_INFO * SAVEDS ASM LIB_PKCS7_RECIP_INFO_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_PKCS7_RECIP_INFO_free(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7_RECIP_INFO * a));
PKCS7_RECIP_INFO * SAVEDS ASM LIB_d2i_PKCS7_RECIP_INFO(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7_RECIP_INFO ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_PKCS7_RECIP_INFO(REG(a6, __IFACE_OR_BASE), REG(a0, const PKCS7_RECIP_INFO * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_PKCS7_RECIP_INFO_it(REG(a6, __IFACE_OR_BASE));
PKCS7_SIGNED * SAVEDS ASM LIB_PKCS7_SIGNED_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_PKCS7_SIGNED_free(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7_SIGNED * a));
PKCS7_SIGNED * SAVEDS ASM LIB_d2i_PKCS7_SIGNED(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7_SIGNED ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_PKCS7_SIGNED(REG(a6, __IFACE_OR_BASE), REG(a0, const PKCS7_SIGNED * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_PKCS7_SIGNED_it(REG(a6, __IFACE_OR_BASE));
PKCS7_ENC_CONTENT * SAVEDS ASM LIB_PKCS7_ENC_CONTENT_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_PKCS7_ENC_CONTENT_free(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7_ENC_CONTENT * a));
PKCS7_ENC_CONTENT * SAVEDS ASM LIB_d2i_PKCS7_ENC_CONTENT(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7_ENC_CONTENT ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_PKCS7_ENC_CONTENT(REG(a6, __IFACE_OR_BASE), REG(a0, const PKCS7_ENC_CONTENT * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_PKCS7_ENC_CONTENT_it(REG(a6, __IFACE_OR_BASE));
PKCS7_ENVELOPE * SAVEDS ASM LIB_PKCS7_ENVELOPE_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_PKCS7_ENVELOPE_free(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7_ENVELOPE * a));
PKCS7_ENVELOPE * SAVEDS ASM LIB_d2i_PKCS7_ENVELOPE(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7_ENVELOPE ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_PKCS7_ENVELOPE(REG(a6, __IFACE_OR_BASE), REG(a0, const PKCS7_ENVELOPE * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_PKCS7_ENVELOPE_it(REG(a6, __IFACE_OR_BASE));
PKCS7_SIGN_ENVELOPE * SAVEDS ASM LIB_PKCS7_SIGN_ENVELOPE_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_PKCS7_SIGN_ENVELOPE_free(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7_SIGN_ENVELOPE * a));
PKCS7_SIGN_ENVELOPE * SAVEDS ASM LIB_d2i_PKCS7_SIGN_ENVELOPE(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7_SIGN_ENVELOPE ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_PKCS7_SIGN_ENVELOPE(REG(a6, __IFACE_OR_BASE), REG(a0, const PKCS7_SIGN_ENVELOPE * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_PKCS7_SIGN_ENVELOPE_it(REG(a6, __IFACE_OR_BASE));
PKCS7_DIGEST * SAVEDS ASM LIB_PKCS7_DIGEST_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_PKCS7_DIGEST_free(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7_DIGEST * a));
PKCS7_DIGEST * SAVEDS ASM LIB_d2i_PKCS7_DIGEST(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7_DIGEST ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_PKCS7_DIGEST(REG(a6, __IFACE_OR_BASE), REG(a0, const PKCS7_DIGEST * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_PKCS7_DIGEST_it(REG(a6, __IFACE_OR_BASE));
PKCS7_ENCRYPT * SAVEDS ASM LIB_PKCS7_ENCRYPT_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_PKCS7_ENCRYPT_free(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7_ENCRYPT * a));
PKCS7_ENCRYPT * SAVEDS ASM LIB_d2i_PKCS7_ENCRYPT(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7_ENCRYPT ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_PKCS7_ENCRYPT(REG(a6, __IFACE_OR_BASE), REG(a0, const PKCS7_ENCRYPT * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_PKCS7_ENCRYPT_it(REG(a6, __IFACE_OR_BASE));
PKCS7 * SAVEDS ASM LIB_PKCS7_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_PKCS7_free(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7 * a));
PKCS7 * SAVEDS ASM LIB_d2i_PKCS7(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7 ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_PKCS7(REG(a6, __IFACE_OR_BASE), REG(a0, const PKCS7 * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_PKCS7_it(REG(a6, __IFACE_OR_BASE));
const ASN1_ITEM * SAVEDS ASM LIB_PKCS7_ATTR_SIGN_it(REG(a6, __IFACE_OR_BASE));
const ASN1_ITEM * SAVEDS ASM LIB_PKCS7_ATTR_VERIFY_it(REG(a6, __IFACE_OR_BASE));
long SAVEDS ASM LIB_PKCS7_ctrl(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7 * p7), REG(d0, int cmd), REG(d1, long larg), REG(a1, char * parg));
int SAVEDS ASM LIB_PKCS7_set_type(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7 * p7), REG(d0, int type));
int SAVEDS ASM LIB_PKCS7_set_content(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7 * p7), REG(a1, PKCS7 * p7_data));
int SAVEDS ASM LIB_PKCS7_SIGNER_INFO_set(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7_SIGNER_INFO * p7i), REG(a1, X509 * x509), REG(a2, EVP_PKEY * pkey), REG(a3, const EVP_MD * dgst));
int SAVEDS ASM LIB_PKCS7_add_signer(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7 * p7), REG(a1, PKCS7_SIGNER_INFO * p7i));
int SAVEDS ASM LIB_PKCS7_add_certificate(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7 * p7), REG(a1, X509 * cert));
int SAVEDS ASM LIB_PKCS7_add_crl(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7 * p7), REG(a1, X509_CRL * crl));
int SAVEDS ASM LIB_PKCS7_content_new(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7 * p7), REG(d0, int nid));
int SAVEDS ASM LIB_PKCS7_dataVerify(REG(a6, __IFACE_OR_BASE), REG(a0, X509_STORE * cert_store), REG(a1, X509_STORE_CTX * ctx), REG(a2, BIO * bio), REG(a3, PKCS7 * p7), REG(d0, PKCS7_SIGNER_INFO * si));
int SAVEDS ASM LIB_PKCS7_signatureVerify(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bio), REG(a1, PKCS7 * p7), REG(a2, PKCS7_SIGNER_INFO * si), REG(a3, X509 * signer));
BIO * SAVEDS ASM LIB_PKCS7_dataInit(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7 * p7), REG(a1, BIO * bio));
int SAVEDS ASM LIB_PKCS7_dataFinal(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7 * p7), REG(a1, BIO * bio));
BIO * SAVEDS ASM LIB_PKCS7_dataDecode(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7 * p7), REG(a1, EVP_PKEY * pkey), REG(a2, BIO * in_bio), REG(a3, X509 * pcert));
PKCS7_SIGNER_INFO * SAVEDS ASM LIB_PKCS7_add_signature(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7 * p7), REG(a1, X509 * x509), REG(a2, EVP_PKEY * pkey), REG(a3, const EVP_MD * dgst));
X509 * SAVEDS ASM LIB_PKCS7_cert_from_signer_info(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7 * p7), REG(a1, PKCS7_SIGNER_INFO * si));
STACK_OF(PKCS7_SIGNER_INFO) * SAVEDS ASM LIB_PKCS7_get_signer_info(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7 * p7));
PKCS7_RECIP_INFO * SAVEDS ASM LIB_PKCS7_add_recipient(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7 * p7), REG(a1, X509 * x509));
int SAVEDS ASM LIB_PKCS7_add_recipient_info(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7 * p7), REG(a1, PKCS7_RECIP_INFO * ri));
int SAVEDS ASM LIB_PKCS7_RECIP_INFO_set(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7_RECIP_INFO * p7i), REG(a1, X509 * x509));
int SAVEDS ASM LIB_PKCS7_set_cipher(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7 * p7), REG(a1, const EVP_CIPHER * cipher));
PKCS7_ISSUER_AND_SERIAL * SAVEDS ASM LIB_PKCS7_get_issuer_and_serial(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7 * p7), REG(d0, int idx));
ASN1_OCTET_STRING * SAVEDS ASM LIB_PKCS7_digest_from_attributes(REG(a6, __IFACE_OR_BASE), REG(a0, STACK_OF(X509_ATTRIBUTE) * sk));
int SAVEDS ASM LIB_PKCS7_add_signed_attribute(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7_SIGNER_INFO * p7si), REG(d0, int nid), REG(d1, int type), REG(a1, void * data));
int SAVEDS ASM LIB_PKCS7_add_attribute(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7_SIGNER_INFO * p7si), REG(d0, int nid), REG(d1, int atrtype), REG(a1, void * value));
ASN1_TYPE * SAVEDS ASM LIB_PKCS7_get_attribute(REG(a6, __IFACE_OR_BASE), REG(a0, const PKCS7_SIGNER_INFO * si), REG(d0, int nid));
ASN1_TYPE * SAVEDS ASM LIB_PKCS7_get_signed_attribute(REG(a6, __IFACE_OR_BASE), REG(a0, const PKCS7_SIGNER_INFO * si), REG(d0, int nid));
int SAVEDS ASM LIB_PKCS7_set_signed_attributes(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7_SIGNER_INFO * p7si), REG(a1, STACK_OF(X509_ATTRIBUTE) * sk));
int SAVEDS ASM LIB_PKCS7_set_attributes(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7_SIGNER_INFO * p7si), REG(a1, STACK_OF(X509_ATTRIBUTE) * sk));
PKCS7 * SAVEDS ASM LIB_PKCS7_sign(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * signcert), REG(a1, EVP_PKEY * pkey), REG(a2, STACK_OF(X509) * certs), REG(a3, BIO * data), REG(d0, int flags));
int SAVEDS ASM LIB_PKCS7_verify(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7 * p7), REG(a1, STACK_OF(X509) * certs), REG(a2, X509_STORE * store), REG(a3, BIO * indata), REG(d0, BIO * out), REG(d1, int flags));
STACK_OF(X509) * SAVEDS ASM LIB_PKCS7_get0_signers(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7 * p7), REG(a1, STACK_OF(X509) * certs), REG(d0, int flags));
PKCS7 * SAVEDS ASM LIB_PKCS7_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, STACK_OF(X509) * certs), REG(a1, BIO * in), REG(a2, const EVP_CIPHER * cipher), REG(d0, int flags));
int SAVEDS ASM LIB_PKCS7_decrypt(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7 * p7), REG(a1, EVP_PKEY * pkey), REG(a2, X509 * cert), REG(a3, BIO * data), REG(d0, int flags));
int SAVEDS ASM LIB_PKCS7_add_attrib_smimecap(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7_SIGNER_INFO * si), REG(a1, STACK_OF(X509_ALGOR) * cap));
STACK_OF(X509_ALGOR) * SAVEDS ASM LIB_PKCS7_get_smimecap(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7_SIGNER_INFO * si));
int SAVEDS ASM LIB_PKCS7_simple_smimecap(REG(a6, __IFACE_OR_BASE), REG(a0, STACK_OF(X509_ALGOR) * sk), REG(d0, int nid), REG(d1, int arg));
int SAVEDS ASM LIB_SMIME_write_PKCS7(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bio), REG(a1, PKCS7 * p7), REG(a2, BIO * data), REG(d0, int flags));
PKCS7 * SAVEDS ASM LIB_SMIME_read_PKCS7(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bio), REG(a1, BIO ** bcont));
int SAVEDS ASM LIB_SMIME_crlf_copy(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * in), REG(a1, BIO * out), REG(d0, int flags));
int SAVEDS ASM LIB_SMIME_text(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * in), REG(a1, BIO * out));
int SAVEDS ASM LIB_ERR_load_PKCS7_strings(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_RAND_set_rand_method(REG(a6, __IFACE_OR_BASE), REG(a0, const RAND_METHOD * meth));
const RAND_METHOD * SAVEDS ASM LIB_RAND_get_rand_method(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_RAND_bytes(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned char * buf), REG(d0, int num));
int SAVEDS ASM LIB_RAND_pseudo_bytes(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned char * buf), REG(d0, int num));
void SAVEDS ASM LIB_RAND_seed(REG(a6, __IFACE_OR_BASE), REG(a0, const void * buf), REG(d0, int num));
void SAVEDS ASM LIB_RAND_add(REG(a6, __IFACE_OR_BASE), REG(a0, const void * buf), REG(d2, int num), REG(d0, double randomness));
int SAVEDS ASM LIB_RAND_load_file(REG(a6, __IFACE_OR_BASE), REG(a0, const char * file), REG(d0, long max_bytes));
int SAVEDS ASM LIB_RAND_write_file(REG(a6, __IFACE_OR_BASE), REG(a0, const char * file));
const char * SAVEDS ASM LIB_RAND_file_name(REG(a6, __IFACE_OR_BASE), REG(a0, char * file), REG(d0, size_t num));
int SAVEDS ASM LIB_RAND_status(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_RAND_poll(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_ERR_load_RAND_strings(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_SSL_CTX_set_msg_callback(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(a1, void (*cb)(int write_p, int version, int content_type, const void *buf, size_t len, SSL *ssl, void *arg)));
void SAVEDS ASM LIB_SSL_set_msg_callback(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * ssl), REG(a1, void (*cb)(int write_p, int version, int content_type, const void *buf, size_t len, SSL *ssl, void *arg)));
LHASH_OF(SSL_SESSION) * SAVEDS ASM LIB_SSL_CTX_sessions(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx));
size_t SAVEDS ASM LIB_SSL_get_finished(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * s), REG(a1, void * buf), REG(d0, size_t count));
size_t SAVEDS ASM LIB_SSL_get_peer_finished(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * s), REG(a1, void * buf), REG(d0, size_t count));
const BIO_METHOD * SAVEDS ASM LIB_BIO_f_ssl(REG(a6, __IFACE_OR_BASE));
BIO * SAVEDS ASM LIB_BIO_new_ssl(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(d0, int client));
BIO * SAVEDS ASM LIB_BIO_new_ssl_connect(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx));
BIO * SAVEDS ASM LIB_BIO_new_buffer_ssl_connect(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx));
int SAVEDS ASM LIB_BIO_ssl_copy_session_id(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * to), REG(a1, BIO * from));
void SAVEDS ASM LIB_BIO_ssl_shutdown(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * ssl_bio));
int SAVEDS ASM LIB_SSL_CTX_set_cipher_list(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * a), REG(a1, const char * str));
SSL_CTX * SAVEDS ASM LIB_SSL_CTX_new(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL_METHOD * meth));
void SAVEDS ASM LIB_SSL_CTX_free(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * a));
long SAVEDS ASM LIB_SSL_CTX_set_timeout(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(d0, long t));
long SAVEDS ASM LIB_SSL_CTX_get_timeout(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL_CTX * ctx));
X509_STORE * SAVEDS ASM LIB_SSL_CTX_get_cert_store(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL_CTX * a));
void SAVEDS ASM LIB_SSL_CTX_set_cert_store(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * a), REG(a1, X509_STORE * b));
int SAVEDS ASM LIB_SSL_want(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * s));
int SAVEDS ASM LIB_SSL_clear(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s));
void SAVEDS ASM LIB_SSL_CTX_flush_sessions(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(d0, long tm));
const SSL_CIPHER * SAVEDS ASM LIB_SSL_get_current_cipher(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * s));
int SAVEDS ASM LIB_SSL_CIPHER_get_bits(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL_CIPHER * c), REG(a1, int * alg_bits));
const char * SAVEDS ASM LIB_SSL_CIPHER_get_version(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL_CIPHER * c));
const char * SAVEDS ASM LIB_SSL_CIPHER_get_name(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL_CIPHER * c));
const char * SAVEDS ASM LIB_SSL_CIPHER_get_mac(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL_CIPHER * cipher));
const char * SAVEDS ASM LIB_SSL_CIPHER_get_encryption(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL_CIPHER * cipher));
const char * SAVEDS ASM LIB_SSL_CIPHER_get_authentication(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL_CIPHER * cipher));
const char * SAVEDS ASM LIB_SSL_CIPHER_get_key_exchange(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL_CIPHER * cipher));
int SAVEDS ASM LIB_SSL_get_fd(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * s));
int SAVEDS ASM LIB_SSL_get_rfd(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * s));
int SAVEDS ASM LIB_SSL_get_wfd(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * s));
const char * SAVEDS ASM LIB_SSL_get_cipher_list(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * s), REG(d0, int n));
char * SAVEDS ASM LIB_SSL_get_shared_ciphers(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * s), REG(a1, char * buf), REG(d0, int size));
int SAVEDS ASM LIB_SSL_get_read_ahead(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * s));
int SAVEDS ASM LIB_SSL_pending(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * s));
int SAVEDS ASM LIB_SSL_set_fd(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s), REG(d0, int fd));
int SAVEDS ASM LIB_SSL_set_rfd(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s), REG(d0, int fd));
int SAVEDS ASM LIB_SSL_set_wfd(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s), REG(d0, int fd));
void SAVEDS ASM LIB_SSL_set_bio(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s), REG(a1, BIO * rbio), REG(a2, BIO * wbio));
BIO * SAVEDS ASM LIB_SSL_get_rbio(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * s));
BIO * SAVEDS ASM LIB_SSL_get_wbio(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * s));
int SAVEDS ASM LIB_SSL_set_cipher_list(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s), REG(a1, const char * str));
void SAVEDS ASM LIB_SSL_set_read_ahead(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s), REG(d0, int yes));
int SAVEDS ASM LIB_SSL_get_verify_mode(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * s));
int SAVEDS ASM LIB_SSL_get_verify_depth(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * s));
int  SAVEDS ASM (*LIB_SSL_get_verify_callback(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * s)))(int, X509_STORE_CTX *);
void SAVEDS ASM LIB_SSL_set_verify(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s), REG(d0, int mode), REG(a1, int (*callback)(int, X509_STORE_CTX *)));
void SAVEDS ASM LIB_SSL_set_verify_depth(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s), REG(d0, int depth));
int SAVEDS ASM LIB_SSL_use_RSAPrivateKey(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * ssl), REG(a1, RSA * rsa));
int SAVEDS ASM LIB_SSL_use_RSAPrivateKey_ASN1(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * ssl), REG(a1, const unsigned char * d), REG(d0, long len));
int SAVEDS ASM LIB_SSL_use_PrivateKey(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * ssl), REG(a1, EVP_PKEY * pkey));
int SAVEDS ASM LIB_SSL_use_PrivateKey_ASN1(REG(a6, __IFACE_OR_BASE), REG(d0, int pk), REG(a0, SSL * ssl), REG(a1, const unsigned char * d), REG(d1, long len));
int SAVEDS ASM LIB_SSL_use_certificate(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * ssl), REG(a1, X509 * x));
int SAVEDS ASM LIB_SSL_use_certificate_ASN1(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * ssl), REG(a1, const unsigned char * d), REG(d0, int len));
int SAVEDS ASM LIB_SSL_use_RSAPrivateKey_file(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * ssl), REG(a1, const char * file), REG(d0, int type));
int SAVEDS ASM LIB_SSL_use_PrivateKey_file(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * ssl), REG(a1, const char * file), REG(d0, int type));
int SAVEDS ASM LIB_SSL_use_certificate_file(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * ssl), REG(a1, const char * file), REG(d0, int type));
int SAVEDS ASM LIB_SSL_CTX_use_RSAPrivateKey_file(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(a1, const char * file), REG(d0, int type));
int SAVEDS ASM LIB_SSL_CTX_use_PrivateKey_file(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(a1, const char * file), REG(d0, int type));
int SAVEDS ASM LIB_SSL_CTX_use_certificate_file(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(a1, const char * file), REG(d0, int type));
int SAVEDS ASM LIB_SSL_CTX_use_certificate_chain_file(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(a1, const char * file));
STACK_OF(X509_NAME) * SAVEDS ASM LIB_SSL_load_client_CA_file(REG(a6, __IFACE_OR_BASE), REG(a0, const char * file));
int SAVEDS ASM LIB_SSL_add_file_cert_subjects_to_stack(REG(a6, __IFACE_OR_BASE), REG(a0, STACK_OF(X509_NAME) * stackCAs), REG(a1, const char * file));
int SAVEDS ASM LIB_SSL_add_dir_cert_subjects_to_stack(REG(a6, __IFACE_OR_BASE), REG(a0, STACK_OF(X509_NAME) * stackCAs), REG(a1, const char * dir));
void SAVEDS ASM LIB_OBSOLETE_SSL_load_error_strings(REG(a6, __IFACE_OR_BASE));
const char * SAVEDS ASM LIB_SSL_state_string(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * s));
const char * SAVEDS ASM LIB_SSL_rstate_string(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * s));
const char * SAVEDS ASM LIB_SSL_state_string_long(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * s));
const char * SAVEDS ASM LIB_SSL_rstate_string_long(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * s));
long SAVEDS ASM LIB_SSL_SESSION_get_time(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL_SESSION * s));
long SAVEDS ASM LIB_SSL_SESSION_set_time(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_SESSION * s), REG(d0, long t));
long SAVEDS ASM LIB_SSL_SESSION_get_timeout(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL_SESSION * s));
long SAVEDS ASM LIB_SSL_SESSION_set_timeout(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_SESSION * s), REG(d0, long t));
int SAVEDS ASM LIB_SSL_copy_session_id(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * to), REG(a1, const SSL * from));
SSL_SESSION * SAVEDS ASM LIB_SSL_SESSION_new(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_SSL_SESSION_print(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * fp), REG(a1, const SSL_SESSION * ses));
void SAVEDS ASM LIB_SSL_SESSION_free(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_SESSION * ses));
int SAVEDS ASM LIB_i2d_SSL_SESSION(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL_SESSION * in), REG(a1, unsigned char ** pp));
int SAVEDS ASM LIB_SSL_set_session(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * to), REG(a1, SSL_SESSION * session));
int SAVEDS ASM LIB_SSL_CTX_add_session(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(a1, SSL_SESSION * session));
int SAVEDS ASM LIB_SSL_CTX_remove_session(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(a1, SSL_SESSION * session));
int SAVEDS ASM LIB_SSL_CTX_set_generate_session_id(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(d0, GEN_SESSION_CB cb));
int SAVEDS ASM LIB_SSL_set_generate_session_id(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s), REG(d0, GEN_SESSION_CB cb));
int SAVEDS ASM LIB_SSL_has_matching_session_id(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * s), REG(a1, const unsigned char * id), REG(d0, unsigned int id_len));
SSL_SESSION * SAVEDS ASM LIB_d2i_SSL_SESSION(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_SESSION ** a), REG(a1, const unsigned char ** pp), REG(d0, long length));
X509 * SAVEDS ASM LIB_SSL_get1_peer_certificate(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * s));
STACK_OF(X509) * SAVEDS ASM LIB_SSL_get_peer_cert_chain(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * s));
int SAVEDS ASM LIB_SSL_CTX_get_verify_mode(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL_CTX * ctx));
int SAVEDS ASM LIB_SSL_CTX_get_verify_depth(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL_CTX * ctx));
int  SAVEDS ASM (*LIB_SSL_CTX_get_verify_callback(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL_CTX * ctx)))(int, X509_STORE_CTX *);
void SAVEDS ASM LIB_SSL_CTX_set_verify(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(d0, int mode), REG(a1, int (*callback)(int, X509_STORE_CTX *)));
void SAVEDS ASM LIB_SSL_CTX_set_verify_depth(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(d0, int depth));
void SAVEDS ASM LIB_SSL_CTX_set_cert_verify_callback(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(a1, int (*cb)(X509_STORE_CTX *, void *)), REG(a2, void * arg));
int SAVEDS ASM LIB_SSL_CTX_use_RSAPrivateKey(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(a1, RSA * rsa));
int SAVEDS ASM LIB_SSL_CTX_use_RSAPrivateKey_ASN1(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(a1, const unsigned char * d), REG(d0, long len));
int SAVEDS ASM LIB_SSL_CTX_use_PrivateKey(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(a1, EVP_PKEY * pkey));
int SAVEDS ASM LIB_SSL_CTX_use_PrivateKey_ASN1(REG(a6, __IFACE_OR_BASE), REG(d0, int pk), REG(a0, SSL_CTX * ctx), REG(a1, const unsigned char * d), REG(d1, long len));
int SAVEDS ASM LIB_SSL_CTX_use_certificate(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(a1, X509 * x));
int SAVEDS ASM LIB_SSL_CTX_use_certificate_ASN1(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(d0, int len), REG(a1, const unsigned char * d));
void SAVEDS ASM LIB_SSL_CTX_set_default_passwd_cb(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(a1, pem_password_cb * cb));
void SAVEDS ASM LIB_SSL_CTX_set_default_passwd_cb_userdata(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(a1, void * u));
int SAVEDS ASM LIB_SSL_CTX_check_private_key(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL_CTX * ctx));
int SAVEDS ASM LIB_SSL_check_private_key(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * ctx));
int SAVEDS ASM LIB_SSL_CTX_set_session_id_context(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(a1, const unsigned char * sid_ctx), REG(d0, unsigned int sid_ctx_len));
SSL * SAVEDS ASM LIB_SSL_new(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx));
int SAVEDS ASM LIB_SSL_set_session_id_context(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * ssl), REG(a1, const unsigned char * sid_ctx), REG(d0, unsigned int sid_ctx_len));
int SAVEDS ASM LIB_SSL_CTX_set_purpose(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(d0, int purpose));
int SAVEDS ASM LIB_SSL_set_purpose(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * ssl), REG(d0, int purpose));
int SAVEDS ASM LIB_SSL_CTX_set_trust(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(d0, int trust));
int SAVEDS ASM LIB_SSL_set_trust(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * ssl), REG(d0, int trust));
void SAVEDS ASM LIB_SSL_free(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * ssl));
int SAVEDS ASM LIB_SSL_accept(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * ssl));
int SAVEDS ASM LIB_SSL_connect(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * ssl));
int SAVEDS ASM LIB_SSL_read(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * ssl), REG(a1, void * buf), REG(d0, int num));
int SAVEDS ASM LIB_SSL_peek(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * ssl), REG(a1, void * buf), REG(d0, int num));
int SAVEDS ASM LIB_SSL_write(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * ssl), REG(a1, const void * buf), REG(d0, int num));
long SAVEDS ASM LIB_SSL_ctrl(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * ssl), REG(d0, int cmd), REG(d1, long larg), REG(a1, void * parg));
long SAVEDS ASM LIB_SSL_callback_ctrl(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * a), REG(d0, int a1), REG(a1, void (*b)()));
long SAVEDS ASM LIB_SSL_CTX_ctrl(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(d0, int cmd), REG(d1, long larg), REG(a1, void * parg));
long SAVEDS ASM LIB_SSL_CTX_callback_ctrl(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * a1), REG(d0, int a2), REG(a1, void (*a3)(void)));
int SAVEDS ASM LIB_SSL_get_error(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * s), REG(d0, int ret_code));
const char * SAVEDS ASM LIB_SSL_get_version(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * s));
int SAVEDS ASM LIB_SSL_CTX_set_ssl_version(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(a1, const SSL_METHOD * meth));
const SSL_METHOD * SAVEDS ASM LIB_TLSv1_method(REG(a6, __IFACE_OR_BASE));
const SSL_METHOD * SAVEDS ASM LIB_TLSv1_server_method(REG(a6, __IFACE_OR_BASE));
const SSL_METHOD * SAVEDS ASM LIB_TLSv1_client_method(REG(a6, __IFACE_OR_BASE));
STACK_OF(SSL_CIPHER) * SAVEDS ASM LIB_SSL_get_ciphers(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * s));
int SAVEDS ASM LIB_SSL_do_handshake(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s));
int SAVEDS ASM LIB_SSL_renegotiate(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s));
int SAVEDS ASM LIB_SSL_renegotiate_pending(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * s));
int SAVEDS ASM LIB_SSL_shutdown(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s));
const SSL_METHOD * SAVEDS ASM LIB_SSL_get_ssl_method(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * s));
int SAVEDS ASM LIB_SSL_set_ssl_method(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s), REG(a1, const SSL_METHOD * method));
const char * SAVEDS ASM LIB_SSL_alert_type_string_long(REG(a6, __IFACE_OR_BASE), REG(d0, int value));
const char * SAVEDS ASM LIB_SSL_alert_type_string(REG(a6, __IFACE_OR_BASE), REG(d0, int value));
const char * SAVEDS ASM LIB_SSL_alert_desc_string_long(REG(a6, __IFACE_OR_BASE), REG(d0, int value));
const char * SAVEDS ASM LIB_SSL_alert_desc_string(REG(a6, __IFACE_OR_BASE), REG(d0, int value));
void SAVEDS ASM LIB_SSL_set_client_CA_list(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s), REG(a1, STACK_OF(X509_NAME) * name_list));
void SAVEDS ASM LIB_SSL_CTX_set_client_CA_list(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(a1, STACK_OF(X509_NAME) * name_list));
STACK_OF(X509_NAME) * SAVEDS ASM LIB_SSL_get_client_CA_list(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * s));
STACK_OF(X509_NAME) * SAVEDS ASM LIB_SSL_CTX_get_client_CA_list(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL_CTX * s));
int SAVEDS ASM LIB_SSL_add_client_CA(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * ssl), REG(a1, X509 * x));
int SAVEDS ASM LIB_SSL_CTX_add_client_CA(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(a1, X509 * x));
void SAVEDS ASM LIB_SSL_set_connect_state(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s));
void SAVEDS ASM LIB_SSL_set_accept_state(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s));
long SAVEDS ASM LIB_SSL_get_default_timeout(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * s));
int SAVEDS ASM LIB_OBSOLETE_SSL_library_init(REG(a6, __IFACE_OR_BASE));
char * SAVEDS ASM LIB_SSL_CIPHER_description(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL_CIPHER * a1), REG(a1, char * buf), REG(d0, int size));
STACK_OF(X509_NAME) * SAVEDS ASM LIB_SSL_dup_CA_list(REG(a6, __IFACE_OR_BASE), REG(a0, const STACK_OF(X509_NAME) * sk));
SSL * SAVEDS ASM LIB_SSL_dup(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * ssl));
X509 * SAVEDS ASM LIB_SSL_get_certificate(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * ssl));
struct evp_pkey_st * SAVEDS ASM LIB_SSL_get_privatekey(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * ssl));
void SAVEDS ASM LIB_SSL_CTX_set_quiet_shutdown(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(d0, int mode));
int SAVEDS ASM LIB_SSL_CTX_get_quiet_shutdown(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL_CTX * ctx));
void SAVEDS ASM LIB_SSL_set_quiet_shutdown(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * ssl), REG(d0, int mode));
int SAVEDS ASM LIB_SSL_get_quiet_shutdown(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * ssl));
void SAVEDS ASM LIB_SSL_set_shutdown(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * ssl), REG(d0, int mode));
int SAVEDS ASM LIB_SSL_get_shutdown(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * ssl));
int SAVEDS ASM LIB_SSL_version(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * ssl));
int SAVEDS ASM LIB_SSL_CTX_set_default_verify_paths(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx));
int SAVEDS ASM LIB_SSL_CTX_load_verify_locations(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(a1, const char * CAfile), REG(a2, const char * CApath));
SSL_SESSION * SAVEDS ASM LIB_SSL_get_session(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * ssl));
SSL_SESSION * SAVEDS ASM LIB_SSL_get1_session(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * ssl));
SSL_CTX * SAVEDS ASM LIB_SSL_get_SSL_CTX(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * ssl));
void SAVEDS ASM LIB_SSL_set_info_callback(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * ssl), REG(a1, void (*cb)(const SSL *ssl, int type, int val)));
void  SAVEDS ASM (*LIB_SSL_get_info_callback(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * ssl)))(const SSL *ssl, int type, int val);
void SAVEDS ASM LIB_SSL_set_verify_result(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * ssl), REG(d0, long v));
long SAVEDS ASM LIB_SSL_get_verify_result(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * ssl));
int SAVEDS ASM LIB_SSL_set_ex_data(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * ssl), REG(d0, int idx), REG(a1, void * data));
void * SAVEDS ASM LIB_SSL_get_ex_data(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * ssl), REG(d0, int idx));
int SAVEDS ASM LIB_OBSOLETE_SSL_get_ex_new_index(REG(a6, __IFACE_OR_BASE), REG(d0, long argl), REG(a0, void * argp), REG(a1, CRYPTO_EX_new * new_func), REG(a2, CRYPTO_EX_dup * dup_func), REG(a3, CRYPTO_EX_free * free_func));
int SAVEDS ASM LIB_SSL_SESSION_set_ex_data(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_SESSION * ss), REG(d0, int idx), REG(a1, void * data));
void * SAVEDS ASM LIB_SSL_SESSION_get_ex_data(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL_SESSION * ss), REG(d0, int idx));
int SAVEDS ASM LIB_OBSOLETE_SSL_SESSION_get_ex_new_index(REG(a6, __IFACE_OR_BASE), REG(d0, long argl), REG(a0, void * argp), REG(a1, CRYPTO_EX_new * new_func), REG(a2, CRYPTO_EX_dup * dup_func), REG(a3, CRYPTO_EX_free * free_func));
int SAVEDS ASM LIB_SSL_CTX_set_ex_data(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ssl), REG(d0, int idx), REG(a1, void * data));
void * SAVEDS ASM LIB_SSL_CTX_get_ex_data(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL_CTX * ssl), REG(d0, int idx));
int SAVEDS ASM LIB_OBSOLETE_SSL_CTX_get_ex_new_index(REG(a6, __IFACE_OR_BASE), REG(d0, long argl), REG(a0, void * argp), REG(a1, CRYPTO_EX_new * new_func), REG(a2, CRYPTO_EX_dup * dup_func), REG(a3, CRYPTO_EX_free * free_func));
int SAVEDS ASM LIB_SSL_get_ex_data_X509_STORE_CTX_idx(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_SSL_CTX_set_tmp_dh_callback(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(a1, DH * (*dh)(SSL *ssl, int is_export, int keylength)));
void SAVEDS ASM LIB_SSL_set_tmp_dh_callback(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * ssl), REG(a1, DH * (*dh)(SSL *ssl, int is_export, int keylength)));
int SAVEDS ASM LIB_SSL_COMP_add_compression_method(REG(a6, __IFACE_OR_BASE), REG(d0, int id), REG(a0, COMP_METHOD * cm));
int SAVEDS ASM LIB_ERR_load_SSL_strings(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_OPENSSL_sk_num(REG(a6, __IFACE_OR_BASE), REG(a0, const OPENSSL_STACK * a));
void * SAVEDS ASM LIB_OPENSSL_sk_value(REG(a6, __IFACE_OR_BASE), REG(a0, const OPENSSL_STACK * a), REG(d0, int b));
void * SAVEDS ASM LIB_OPENSSL_sk_set(REG(a6, __IFACE_OR_BASE), REG(a0, OPENSSL_STACK * a), REG(d0, int b), REG(a1, const void * c));
OPENSSL_STACK * SAVEDS ASM LIB_OPENSSL_sk_new(REG(a6, __IFACE_OR_BASE), REG(a0, int (*cmp)(const void *, const void *)));
OPENSSL_STACK * SAVEDS ASM LIB_OPENSSL_sk_new_null(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_OPENSSL_sk_free(REG(a6, __IFACE_OR_BASE), REG(a0, OPENSSL_STACK * a));
void SAVEDS ASM LIB_OPENSSL_sk_pop_free(REG(a6, __IFACE_OR_BASE), REG(a0, OPENSSL_STACK * st), REG(a1, void (*func)(void *)));
int SAVEDS ASM LIB_OPENSSL_sk_insert(REG(a6, __IFACE_OR_BASE), REG(a0, OPENSSL_STACK * sk), REG(a1, const void * data), REG(d0, int where));
void * SAVEDS ASM LIB_OPENSSL_sk_delete(REG(a6, __IFACE_OR_BASE), REG(a0, OPENSSL_STACK * st), REG(d0, int loc));
void * SAVEDS ASM LIB_OPENSSL_sk_delete_ptr(REG(a6, __IFACE_OR_BASE), REG(a0, OPENSSL_STACK * st), REG(a1, const void * p));
int SAVEDS ASM LIB_OPENSSL_sk_find(REG(a6, __IFACE_OR_BASE), REG(a0, OPENSSL_STACK * st), REG(a1, const void * data));
int SAVEDS ASM LIB_OPENSSL_sk_push(REG(a6, __IFACE_OR_BASE), REG(a0, OPENSSL_STACK * st), REG(a1, const void * data));
int SAVEDS ASM LIB_OPENSSL_sk_unshift(REG(a6, __IFACE_OR_BASE), REG(a0, OPENSSL_STACK * st), REG(a1, const void * data));
void * SAVEDS ASM LIB_OPENSSL_sk_shift(REG(a6, __IFACE_OR_BASE), REG(a0, OPENSSL_STACK * st));
void * SAVEDS ASM LIB_OPENSSL_sk_pop(REG(a6, __IFACE_OR_BASE), REG(a0, OPENSSL_STACK * st));
void SAVEDS ASM LIB_OPENSSL_sk_zero(REG(a6, __IFACE_OR_BASE), REG(a0, OPENSSL_STACK * st));
int  SAVEDS ASM (*LIB_OPENSSL_sk_set_cmp_func(REG(a6, __IFACE_OR_BASE), REG(a0, OPENSSL_STACK * sk), REG(a1, int (*c)(const void *, const void *))))(const void *, const void *);
OPENSSL_STACK * SAVEDS ASM LIB_OPENSSL_sk_dup(REG(a6, __IFACE_OR_BASE), REG(a0, const OPENSSL_STACK * st));
void SAVEDS ASM LIB_OPENSSL_sk_sort(REG(a6, __IFACE_OR_BASE), REG(a0, OPENSSL_STACK * st));
int SAVEDS ASM LIB_OPENSSL_sk_is_sorted(REG(a6, __IFACE_OR_BASE), REG(a0, const OPENSSL_STACK * st));
TXT_DB * SAVEDS ASM LIB_TXT_DB_read(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * in), REG(d0, int num));
long SAVEDS ASM LIB_TXT_DB_write(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * out), REG(a1, TXT_DB * db));
int SAVEDS ASM LIB_TXT_DB_create_index(REG(a6, __IFACE_OR_BASE), REG(a0, TXT_DB * db), REG(d0, int field), REG(a1, int (*qual)(OPENSSL_STRING *)), REG(d1, OPENSSL_LH_HASHFUNC hash), REG(d2, OPENSSL_LH_COMPFUNC cmp));
void SAVEDS ASM LIB_TXT_DB_free(REG(a6, __IFACE_OR_BASE), REG(a0, TXT_DB * db));
char ** SAVEDS ASM LIB_TXT_DB_get_by_index(REG(a6, __IFACE_OR_BASE), REG(a0, TXT_DB * db), REG(d0, int idx), REG(a1, char ** value));
int SAVEDS ASM LIB_TXT_DB_insert(REG(a6, __IFACE_OR_BASE), REG(a0, TXT_DB * db), REG(a1, char ** value));
UI * SAVEDS ASM LIB_UI_new(REG(a6, __IFACE_OR_BASE));
UI * SAVEDS ASM LIB_UI_new_method(REG(a6, __IFACE_OR_BASE), REG(a0, const UI_METHOD * method));
void SAVEDS ASM LIB_UI_free(REG(a6, __IFACE_OR_BASE), REG(a0, UI * ui));
int SAVEDS ASM LIB_UI_add_input_string(REG(a6, __IFACE_OR_BASE), REG(a0, UI * ui), REG(a1, const char * prompt), REG(d0, int flags), REG(a2, char * result_buf), REG(d1, int minsize), REG(d2, int maxsize));
int SAVEDS ASM LIB_UI_dup_input_string(REG(a6, __IFACE_OR_BASE), REG(a0, UI * ui), REG(a1, const char * prompt), REG(d0, int flags), REG(a2, char * result_buf), REG(d1, int minsize), REG(d2, int maxsize));
int SAVEDS ASM LIB_UI_add_verify_string(REG(a6, __IFACE_OR_BASE), REG(a0, UI * ui), REG(a1, const char * prompt), REG(d0, int flags), REG(a2, char * result_buf), REG(d1, int minsize), REG(d2, int maxsize), REG(a3, const char * test_buf));
int SAVEDS ASM LIB_UI_dup_verify_string(REG(a6, __IFACE_OR_BASE), REG(a0, UI * ui), REG(a1, const char * prompt), REG(d0, int flags), REG(a2, char * result_buf), REG(d1, int minsize), REG(d2, int maxsize), REG(a3, const char * test_buf));
int SAVEDS ASM LIB_UI_add_input_boolean(REG(a6, __IFACE_OR_BASE), REG(a0, UI * ui), REG(a1, const char * prompt), REG(a2, const char * action_desc), REG(a3, const char * ok_chars), REG(d0, const char * cancel_chars), REG(d1, int flags), REG(d2, char * result_buf));
int SAVEDS ASM LIB_UI_dup_input_boolean(REG(a6, __IFACE_OR_BASE), REG(a0, UI * ui), REG(a1, const char * prompt), REG(a2, const char * action_desc), REG(a3, const char * ok_chars), REG(d0, const char * cancel_chars), REG(d1, int flags), REG(d2, char * result_buf));
int SAVEDS ASM LIB_UI_add_info_string(REG(a6, __IFACE_OR_BASE), REG(a0, UI * ui), REG(a1, const char * text));
int SAVEDS ASM LIB_UI_dup_info_string(REG(a6, __IFACE_OR_BASE), REG(a0, UI * ui), REG(a1, const char * text));
int SAVEDS ASM LIB_UI_add_error_string(REG(a6, __IFACE_OR_BASE), REG(a0, UI * ui), REG(a1, const char * text));
int SAVEDS ASM LIB_UI_dup_error_string(REG(a6, __IFACE_OR_BASE), REG(a0, UI * ui), REG(a1, const char * text));
char * SAVEDS ASM LIB_UI_construct_prompt(REG(a6, __IFACE_OR_BASE), REG(a0, UI * ui_method), REG(a1, const char * object_desc), REG(a2, const char * object_name));
void * SAVEDS ASM LIB_UI_add_user_data(REG(a6, __IFACE_OR_BASE), REG(a0, UI * ui), REG(a1, void * user_data));
void * SAVEDS ASM LIB_UI_get0_user_data(REG(a6, __IFACE_OR_BASE), REG(a0, UI * ui));
const char * SAVEDS ASM LIB_UI_get0_result(REG(a6, __IFACE_OR_BASE), REG(a0, UI * ui), REG(d0, int i));
int SAVEDS ASM LIB_UI_process(REG(a6, __IFACE_OR_BASE), REG(a0, UI * ui));
int SAVEDS ASM LIB_UI_ctrl(REG(a6, __IFACE_OR_BASE), REG(a0, UI * ui), REG(d0, int cmd), REG(d1, long i), REG(a1, void * p), REG(a2, void (*f)()));
int SAVEDS ASM LIB_OBSOLETE_UI_get_ex_new_index(REG(a6, __IFACE_OR_BASE), REG(d0, long argl), REG(a0, void * argp), REG(a1, CRYPTO_EX_new * new_func), REG(a2, CRYPTO_EX_dup * dup_func), REG(a3, CRYPTO_EX_free * free_func));
int SAVEDS ASM LIB_UI_set_ex_data(REG(a6, __IFACE_OR_BASE), REG(a0, UI * r), REG(d0, int idx), REG(a1, void * arg));
void * SAVEDS ASM LIB_UI_get_ex_data(REG(a6, __IFACE_OR_BASE), REG(a0, const UI * r), REG(d0, int idx));
void SAVEDS ASM LIB_UI_set_default_method(REG(a6, __IFACE_OR_BASE), REG(a0, const UI_METHOD * meth));
const UI_METHOD * SAVEDS ASM LIB_UI_get_default_method(REG(a6, __IFACE_OR_BASE));
const UI_METHOD * SAVEDS ASM LIB_UI_get_method(REG(a6, __IFACE_OR_BASE), REG(a0, UI * ui));
const UI_METHOD * SAVEDS ASM LIB_UI_set_method(REG(a6, __IFACE_OR_BASE), REG(a0, UI * ui), REG(a1, const UI_METHOD * meth));
UI_METHOD * SAVEDS ASM LIB_UI_OpenSSL(REG(a6, __IFACE_OR_BASE));
UI_METHOD * SAVEDS ASM LIB_UI_create_method(REG(a6, __IFACE_OR_BASE), REG(a0, const char * name));
void SAVEDS ASM LIB_UI_destroy_method(REG(a6, __IFACE_OR_BASE), REG(a0, UI_METHOD * ui_method));
int SAVEDS ASM LIB_UI_method_set_opener(REG(a6, __IFACE_OR_BASE), REG(a0, UI_METHOD * method), REG(a1, int (*opener)(UI *ui)));
int SAVEDS ASM LIB_UI_method_set_writer(REG(a6, __IFACE_OR_BASE), REG(a0, UI_METHOD * method), REG(a1, int (*writer)(UI *ui, UI_STRING *uis)));
int SAVEDS ASM LIB_UI_method_set_flusher(REG(a6, __IFACE_OR_BASE), REG(a0, UI_METHOD * method), REG(a1, int (*flusher)(UI *ui)));
int SAVEDS ASM LIB_UI_method_set_reader(REG(a6, __IFACE_OR_BASE), REG(a0, UI_METHOD * method), REG(a1, int (*reader)(UI *ui, UI_STRING *uis)));
int SAVEDS ASM LIB_UI_method_set_closer(REG(a6, __IFACE_OR_BASE), REG(a0, UI_METHOD * method), REG(a1, int (*closer)(UI *ui)));
int  SAVEDS ASM (*LIB_UI_method_get_opener(REG(a6, __IFACE_OR_BASE), REG(a0, const UI_METHOD * method)))(UI *);
int  SAVEDS ASM (*LIB_UI_method_get_writer(REG(a6, __IFACE_OR_BASE), REG(a0, const UI_METHOD * method)))(UI *, UI_STRING *);
int  SAVEDS ASM (*LIB_UI_method_get_flusher(REG(a6, __IFACE_OR_BASE), REG(a0, const UI_METHOD * method)))(UI *);
int  SAVEDS ASM (*LIB_UI_method_get_reader(REG(a6, __IFACE_OR_BASE), REG(a0, const UI_METHOD * method)))(UI *, UI_STRING *);
int  SAVEDS ASM (*LIB_UI_method_get_closer(REG(a6, __IFACE_OR_BASE), REG(a0, const UI_METHOD * method)))(UI *);
enum UI_string_types SAVEDS ASM LIB_UI_get_string_type(REG(a6, __IFACE_OR_BASE), REG(a0, UI_STRING * uis));
int SAVEDS ASM LIB_UI_get_input_flags(REG(a6, __IFACE_OR_BASE), REG(a0, UI_STRING * uis));
const char * SAVEDS ASM LIB_UI_get0_output_string(REG(a6, __IFACE_OR_BASE), REG(a0, UI_STRING * uis));
const char * SAVEDS ASM LIB_UI_get0_action_string(REG(a6, __IFACE_OR_BASE), REG(a0, UI_STRING * uis));
const char * SAVEDS ASM LIB_UI_get0_result_string(REG(a6, __IFACE_OR_BASE), REG(a0, UI_STRING * uis));
const char * SAVEDS ASM LIB_UI_get0_test_string(REG(a6, __IFACE_OR_BASE), REG(a0, UI_STRING * uis));
int SAVEDS ASM LIB_UI_get_result_minsize(REG(a6, __IFACE_OR_BASE), REG(a0, UI_STRING * uis));
int SAVEDS ASM LIB_UI_get_result_maxsize(REG(a6, __IFACE_OR_BASE), REG(a0, UI_STRING * uis));
int SAVEDS ASM LIB_UI_set_result(REG(a6, __IFACE_OR_BASE), REG(a0, UI * ui), REG(a1, UI_STRING * uis), REG(a2, const char * result));
int SAVEDS ASM LIB_UI_UTIL_read_pw_string(REG(a6, __IFACE_OR_BASE), REG(a0, char * buf), REG(d0, int length), REG(a1, const char * prompt), REG(d1, int verify));
int SAVEDS ASM LIB_UI_UTIL_read_pw(REG(a6, __IFACE_OR_BASE), REG(a0, char * buf), REG(a1, char * buff), REG(d0, int size), REG(a2, const char * prompt), REG(d1, int verify));
int SAVEDS ASM LIB_ERR_load_UI_strings(REG(a6, __IFACE_OR_BASE));
const char * SAVEDS ASM LIB_X509_verify_cert_error_string(REG(a6, __IFACE_OR_BASE), REG(d0, long n));
int SAVEDS ASM LIB_X509_verify(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * a), REG(a1, EVP_PKEY * r));
int SAVEDS ASM LIB_X509_REQ_verify(REG(a6, __IFACE_OR_BASE), REG(a0, X509_REQ * a), REG(a1, EVP_PKEY * r));
int SAVEDS ASM LIB_X509_CRL_verify(REG(a6, __IFACE_OR_BASE), REG(a0, X509_CRL * a), REG(a1, EVP_PKEY * r));
int SAVEDS ASM LIB_NETSCAPE_SPKI_verify(REG(a6, __IFACE_OR_BASE), REG(a0, NETSCAPE_SPKI * a), REG(a1, EVP_PKEY * r));
NETSCAPE_SPKI * SAVEDS ASM LIB_NETSCAPE_SPKI_b64_decode(REG(a6, __IFACE_OR_BASE), REG(a0, const char * str), REG(d0, int len));
char * SAVEDS ASM LIB_NETSCAPE_SPKI_b64_encode(REG(a6, __IFACE_OR_BASE), REG(a0, NETSCAPE_SPKI * x));
EVP_PKEY * SAVEDS ASM LIB_NETSCAPE_SPKI_get_pubkey(REG(a6, __IFACE_OR_BASE), REG(a0, NETSCAPE_SPKI * x));
int SAVEDS ASM LIB_NETSCAPE_SPKI_set_pubkey(REG(a6, __IFACE_OR_BASE), REG(a0, NETSCAPE_SPKI * x), REG(a1, EVP_PKEY * pkey));
int SAVEDS ASM LIB_NETSCAPE_SPKI_print(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * out), REG(a1, NETSCAPE_SPKI * spki));
int SAVEDS ASM LIB_X509_signature_print(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, const X509_ALGOR * alg), REG(a2, const ASN1_STRING * sig));
int SAVEDS ASM LIB_X509_sign(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * x), REG(a1, EVP_PKEY * pkey), REG(a2, const EVP_MD * md));
int SAVEDS ASM LIB_X509_REQ_sign(REG(a6, __IFACE_OR_BASE), REG(a0, X509_REQ * x), REG(a1, EVP_PKEY * pkey), REG(a2, const EVP_MD * md));
int SAVEDS ASM LIB_X509_CRL_sign(REG(a6, __IFACE_OR_BASE), REG(a0, X509_CRL * x), REG(a1, EVP_PKEY * pkey), REG(a2, const EVP_MD * md));
int SAVEDS ASM LIB_NETSCAPE_SPKI_sign(REG(a6, __IFACE_OR_BASE), REG(a0, NETSCAPE_SPKI * x), REG(a1, EVP_PKEY * pkey), REG(a2, const EVP_MD * md));
int SAVEDS ASM LIB_X509_pubkey_digest(REG(a6, __IFACE_OR_BASE), REG(a0, const X509 * data), REG(a1, const EVP_MD * type), REG(a2, unsigned char * md), REG(a3, unsigned int * len));
int SAVEDS ASM LIB_X509_digest(REG(a6, __IFACE_OR_BASE), REG(a0, const X509 * data), REG(a1, const EVP_MD * type), REG(a2, unsigned char * md), REG(a3, unsigned int * len));
int SAVEDS ASM LIB_X509_CRL_digest(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_CRL * data), REG(a1, const EVP_MD * type), REG(a2, unsigned char * md), REG(a3, unsigned int * len));
int SAVEDS ASM LIB_X509_REQ_digest(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_REQ * data), REG(a1, const EVP_MD * type), REG(a2, unsigned char * md), REG(a3, unsigned int * len));
int SAVEDS ASM LIB_X509_NAME_digest(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_NAME * data), REG(a1, const EVP_MD * type), REG(a2, unsigned char * md), REG(a3, unsigned int * len));
X509 * SAVEDS ASM LIB_d2i_X509_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, X509 ** x509));
int SAVEDS ASM LIB_i2d_X509_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, const X509 * x509));
X509_CRL * SAVEDS ASM LIB_d2i_X509_CRL_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, X509_CRL ** crl));
int SAVEDS ASM LIB_i2d_X509_CRL_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, const X509_CRL * crl));
X509_REQ * SAVEDS ASM LIB_d2i_X509_REQ_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, X509_REQ ** req));
int SAVEDS ASM LIB_i2d_X509_REQ_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, const X509_REQ * req));
RSA * SAVEDS ASM LIB_d2i_RSAPrivateKey_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, RSA ** rsa));
int SAVEDS ASM LIB_i2d_RSAPrivateKey_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, const RSA * rsa));
RSA * SAVEDS ASM LIB_d2i_RSAPublicKey_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, RSA ** rsa));
int SAVEDS ASM LIB_i2d_RSAPublicKey_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, const RSA * rsa));
RSA * SAVEDS ASM LIB_d2i_RSA_PUBKEY_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, RSA ** rsa));
int SAVEDS ASM LIB_i2d_RSA_PUBKEY_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, const RSA * rsa));
DSA * SAVEDS ASM LIB_d2i_DSA_PUBKEY_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, DSA ** dsa));
int SAVEDS ASM LIB_i2d_DSA_PUBKEY_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, const DSA * dsa));
DSA * SAVEDS ASM LIB_d2i_DSAPrivateKey_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, DSA ** dsa));
int SAVEDS ASM LIB_i2d_DSAPrivateKey_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, const DSA * dsa));
X509_SIG * SAVEDS ASM LIB_d2i_PKCS8_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, X509_SIG ** p8));
int SAVEDS ASM LIB_i2d_PKCS8_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, const X509_SIG * p8));
PKCS8_PRIV_KEY_INFO * SAVEDS ASM LIB_d2i_PKCS8_PRIV_KEY_INFO_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, PKCS8_PRIV_KEY_INFO ** p8inf));
int SAVEDS ASM LIB_i2d_PKCS8_PRIV_KEY_INFO_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, const PKCS8_PRIV_KEY_INFO * p8inf));
int SAVEDS ASM LIB_i2d_PKCS8PrivateKeyInfo_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, const EVP_PKEY * key));
int SAVEDS ASM LIB_i2d_PrivateKey_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, const EVP_PKEY * pkey));
EVP_PKEY * SAVEDS ASM LIB_d2i_PrivateKey_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, EVP_PKEY ** a));
int SAVEDS ASM LIB_i2d_PUBKEY_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, const EVP_PKEY * pkey));
EVP_PKEY * SAVEDS ASM LIB_d2i_PUBKEY_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, EVP_PKEY ** a));
X509 * SAVEDS ASM LIB_X509_dup(REG(a6, __IFACE_OR_BASE), REG(a0, const X509 * x509));
X509_ATTRIBUTE * SAVEDS ASM LIB_X509_ATTRIBUTE_dup(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_ATTRIBUTE * xa));
X509_EXTENSION * SAVEDS ASM LIB_X509_EXTENSION_dup(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_EXTENSION * ex));
X509_CRL * SAVEDS ASM LIB_X509_CRL_dup(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_CRL * crl));
X509_REQ * SAVEDS ASM LIB_X509_REQ_dup(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_REQ * req));
X509_ALGOR * SAVEDS ASM LIB_X509_ALGOR_dup(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_ALGOR * xn));
X509_NAME * SAVEDS ASM LIB_X509_NAME_dup(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_NAME * xn));
X509_NAME_ENTRY * SAVEDS ASM LIB_X509_NAME_ENTRY_dup(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_NAME_ENTRY * ne));
int SAVEDS ASM LIB_X509_cmp_time(REG(a6, __IFACE_OR_BASE), REG(a0, const ASN1_TIME * s), REG(a1, time_t * t));
int SAVEDS ASM LIB_X509_cmp_current_time(REG(a6, __IFACE_OR_BASE), REG(a0, const ASN1_TIME * s));
ASN1_TIME * SAVEDS ASM LIB_X509_time_adj(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_TIME * s), REG(d0, long adj), REG(a1, time_t * t));
ASN1_TIME * SAVEDS ASM LIB_X509_gmtime_adj(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_TIME * s), REG(d0, long adj));
const char * SAVEDS ASM LIB_X509_get_default_cert_area(REG(a6, __IFACE_OR_BASE));
const char * SAVEDS ASM LIB_X509_get_default_cert_dir(REG(a6, __IFACE_OR_BASE));
const char * SAVEDS ASM LIB_X509_get_default_cert_file(REG(a6, __IFACE_OR_BASE));
const char * SAVEDS ASM LIB_X509_get_default_cert_dir_env(REG(a6, __IFACE_OR_BASE));
const char * SAVEDS ASM LIB_X509_get_default_cert_file_env(REG(a6, __IFACE_OR_BASE));
const char * SAVEDS ASM LIB_X509_get_default_private_dir(REG(a6, __IFACE_OR_BASE));
X509_REQ * SAVEDS ASM LIB_X509_to_X509_REQ(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * x), REG(a1, EVP_PKEY * pkey), REG(a2, const EVP_MD * md));
X509 * SAVEDS ASM LIB_X509_REQ_to_X509(REG(a6, __IFACE_OR_BASE), REG(a0, X509_REQ * r), REG(d0, int days), REG(a1, EVP_PKEY * pkey));
X509_ALGOR * SAVEDS ASM LIB_X509_ALGOR_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_X509_ALGOR_free(REG(a6, __IFACE_OR_BASE), REG(a0, X509_ALGOR * a));
X509_ALGOR * SAVEDS ASM LIB_d2i_X509_ALGOR(REG(a6, __IFACE_OR_BASE), REG(a0, X509_ALGOR ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_X509_ALGOR(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_ALGOR * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_X509_ALGOR_it(REG(a6, __IFACE_OR_BASE));
X509_VAL * SAVEDS ASM LIB_X509_VAL_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_X509_VAL_free(REG(a6, __IFACE_OR_BASE), REG(a0, X509_VAL * a));
X509_VAL * SAVEDS ASM LIB_d2i_X509_VAL(REG(a6, __IFACE_OR_BASE), REG(a0, X509_VAL ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_X509_VAL(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_VAL * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_X509_VAL_it(REG(a6, __IFACE_OR_BASE));
X509_PUBKEY * SAVEDS ASM LIB_X509_PUBKEY_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_X509_PUBKEY_free(REG(a6, __IFACE_OR_BASE), REG(a0, X509_PUBKEY * a));
X509_PUBKEY * SAVEDS ASM LIB_d2i_X509_PUBKEY(REG(a6, __IFACE_OR_BASE), REG(a0, X509_PUBKEY ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_X509_PUBKEY(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_PUBKEY * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_X509_PUBKEY_it(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_X509_PUBKEY_set(REG(a6, __IFACE_OR_BASE), REG(a0, X509_PUBKEY ** x), REG(a1, EVP_PKEY * pkey));
EVP_PKEY * SAVEDS ASM LIB_X509_PUBKEY_get(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_PUBKEY * key));
int SAVEDS ASM LIB_X509_get_pubkey_parameters(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY * pkey), REG(a1, STACK_OF(X509) * chain));
int SAVEDS ASM LIB_i2d_PUBKEY(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_PKEY * a), REG(a1, unsigned char ** pp));
EVP_PKEY * SAVEDS ASM LIB_d2i_PUBKEY(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY ** a), REG(a1, const unsigned char ** pp), REG(d0, long length));
int SAVEDS ASM LIB_i2d_RSA_PUBKEY(REG(a6, __IFACE_OR_BASE), REG(a0, const RSA * a), REG(a1, unsigned char ** pp));
RSA * SAVEDS ASM LIB_d2i_RSA_PUBKEY(REG(a6, __IFACE_OR_BASE), REG(a0, RSA ** a), REG(a1, const unsigned char ** pp), REG(d0, long length));
int SAVEDS ASM LIB_i2d_DSA_PUBKEY(REG(a6, __IFACE_OR_BASE), REG(a0, const DSA * a), REG(a1, unsigned char ** pp));
DSA * SAVEDS ASM LIB_d2i_DSA_PUBKEY(REG(a6, __IFACE_OR_BASE), REG(a0, DSA ** a), REG(a1, const unsigned char ** pp), REG(d0, long length));
X509_SIG * SAVEDS ASM LIB_X509_SIG_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_X509_SIG_free(REG(a6, __IFACE_OR_BASE), REG(a0, X509_SIG * a));
X509_SIG * SAVEDS ASM LIB_d2i_X509_SIG(REG(a6, __IFACE_OR_BASE), REG(a0, X509_SIG ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_X509_SIG(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_SIG * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_X509_SIG_it(REG(a6, __IFACE_OR_BASE));
X509_REQ_INFO * SAVEDS ASM LIB_X509_REQ_INFO_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_X509_REQ_INFO_free(REG(a6, __IFACE_OR_BASE), REG(a0, X509_REQ_INFO * a));
X509_REQ_INFO * SAVEDS ASM LIB_d2i_X509_REQ_INFO(REG(a6, __IFACE_OR_BASE), REG(a0, X509_REQ_INFO ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_X509_REQ_INFO(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_REQ_INFO * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_X509_REQ_INFO_it(REG(a6, __IFACE_OR_BASE));
X509_REQ * SAVEDS ASM LIB_X509_REQ_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_X509_REQ_free(REG(a6, __IFACE_OR_BASE), REG(a0, X509_REQ * a));
X509_REQ * SAVEDS ASM LIB_d2i_X509_REQ(REG(a6, __IFACE_OR_BASE), REG(a0, X509_REQ ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_X509_REQ(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_REQ * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_X509_REQ_it(REG(a6, __IFACE_OR_BASE));
X509_ATTRIBUTE * SAVEDS ASM LIB_X509_ATTRIBUTE_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_X509_ATTRIBUTE_free(REG(a6, __IFACE_OR_BASE), REG(a0, X509_ATTRIBUTE * a));
X509_ATTRIBUTE * SAVEDS ASM LIB_d2i_X509_ATTRIBUTE(REG(a6, __IFACE_OR_BASE), REG(a0, X509_ATTRIBUTE ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_X509_ATTRIBUTE(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_ATTRIBUTE * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_X509_ATTRIBUTE_it(REG(a6, __IFACE_OR_BASE));
X509_ATTRIBUTE * SAVEDS ASM LIB_X509_ATTRIBUTE_create(REG(a6, __IFACE_OR_BASE), REG(d0, int nid), REG(d1, int atrtype), REG(a0, void * value));
X509_EXTENSION * SAVEDS ASM LIB_X509_EXTENSION_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_X509_EXTENSION_free(REG(a6, __IFACE_OR_BASE), REG(a0, X509_EXTENSION * a));
X509_EXTENSION * SAVEDS ASM LIB_d2i_X509_EXTENSION(REG(a6, __IFACE_OR_BASE), REG(a0, X509_EXTENSION ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_X509_EXTENSION(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_EXTENSION * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_X509_EXTENSION_it(REG(a6, __IFACE_OR_BASE));
X509_NAME_ENTRY * SAVEDS ASM LIB_X509_NAME_ENTRY_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_X509_NAME_ENTRY_free(REG(a6, __IFACE_OR_BASE), REG(a0, X509_NAME_ENTRY * a));
X509_NAME_ENTRY * SAVEDS ASM LIB_d2i_X509_NAME_ENTRY(REG(a6, __IFACE_OR_BASE), REG(a0, X509_NAME_ENTRY ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_X509_NAME_ENTRY(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_NAME_ENTRY * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_X509_NAME_ENTRY_it(REG(a6, __IFACE_OR_BASE));
X509_NAME * SAVEDS ASM LIB_X509_NAME_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_X509_NAME_free(REG(a6, __IFACE_OR_BASE), REG(a0, X509_NAME * a));
X509_NAME * SAVEDS ASM LIB_d2i_X509_NAME(REG(a6, __IFACE_OR_BASE), REG(a0, X509_NAME ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_X509_NAME(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_NAME * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_X509_NAME_it(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_X509_NAME_set(REG(a6, __IFACE_OR_BASE), REG(a0, X509_NAME ** xn), REG(a1, const X509_NAME * name));
X509_CINF * SAVEDS ASM LIB_X509_CINF_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_X509_CINF_free(REG(a6, __IFACE_OR_BASE), REG(a0, X509_CINF * a));
X509_CINF * SAVEDS ASM LIB_d2i_X509_CINF(REG(a6, __IFACE_OR_BASE), REG(a0, X509_CINF ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_X509_CINF(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_CINF * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_X509_CINF_it(REG(a6, __IFACE_OR_BASE));
X509 * SAVEDS ASM LIB_X509_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_X509_free(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * a));
X509 * SAVEDS ASM LIB_d2i_X509(REG(a6, __IFACE_OR_BASE), REG(a0, X509 ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_X509(REG(a6, __IFACE_OR_BASE), REG(a0, const X509 * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_X509_it(REG(a6, __IFACE_OR_BASE));
X509_CERT_AUX * SAVEDS ASM LIB_X509_CERT_AUX_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_X509_CERT_AUX_free(REG(a6, __IFACE_OR_BASE), REG(a0, X509_CERT_AUX * a));
X509_CERT_AUX * SAVEDS ASM LIB_d2i_X509_CERT_AUX(REG(a6, __IFACE_OR_BASE), REG(a0, X509_CERT_AUX ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_X509_CERT_AUX(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_CERT_AUX * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_X509_CERT_AUX_it(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_OBSOLETE_X509_get_ex_new_index(REG(a6, __IFACE_OR_BASE), REG(d0, long argl), REG(a0, void * argp), REG(a1, CRYPTO_EX_new * new_func), REG(a2, CRYPTO_EX_dup * dup_func), REG(a3, CRYPTO_EX_free * free_func));
int SAVEDS ASM LIB_X509_set_ex_data(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * r), REG(d0, int idx), REG(a1, void * arg));
void * SAVEDS ASM LIB_X509_get_ex_data(REG(a6, __IFACE_OR_BASE), REG(a0, const X509 * r), REG(d0, int idx));
int SAVEDS ASM LIB_i2d_X509_AUX(REG(a6, __IFACE_OR_BASE), REG(a0, const X509 * a), REG(a1, unsigned char ** pp));
X509 * SAVEDS ASM LIB_d2i_X509_AUX(REG(a6, __IFACE_OR_BASE), REG(a0, X509 ** a), REG(a1, const unsigned char ** pp), REG(d0, long length));
int SAVEDS ASM LIB_X509_alias_set1(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * x), REG(a1, const unsigned char * name), REG(d0, int len));
int SAVEDS ASM LIB_X509_keyid_set1(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * x), REG(a1, const unsigned char * id), REG(d0, int len));
unsigned char * SAVEDS ASM LIB_X509_alias_get0(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * x), REG(a1, int * len));
int  SAVEDS ASM (*LIB_X509_TRUST_set_default(REG(a6, __IFACE_OR_BASE), REG(a0, int (*trust)(int, X509 *, int))))(int, X509 *, int);
int SAVEDS ASM LIB_X509_TRUST_set(REG(a6, __IFACE_OR_BASE), REG(a0, int * t), REG(d0, int trust));
int SAVEDS ASM LIB_X509_add1_trust_object(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * x), REG(a1, const ASN1_OBJECT * obj));
int SAVEDS ASM LIB_X509_add1_reject_object(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * x), REG(a1, const ASN1_OBJECT * obj));
void SAVEDS ASM LIB_X509_trust_clear(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * x));
void SAVEDS ASM LIB_X509_reject_clear(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * x));
X509_REVOKED * SAVEDS ASM LIB_X509_REVOKED_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_X509_REVOKED_free(REG(a6, __IFACE_OR_BASE), REG(a0, X509_REVOKED * a));
X509_REVOKED * SAVEDS ASM LIB_d2i_X509_REVOKED(REG(a6, __IFACE_OR_BASE), REG(a0, X509_REVOKED ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_X509_REVOKED(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_REVOKED * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_X509_REVOKED_it(REG(a6, __IFACE_OR_BASE));
X509_CRL_INFO * SAVEDS ASM LIB_X509_CRL_INFO_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_X509_CRL_INFO_free(REG(a6, __IFACE_OR_BASE), REG(a0, X509_CRL_INFO * a));
X509_CRL_INFO * SAVEDS ASM LIB_d2i_X509_CRL_INFO(REG(a6, __IFACE_OR_BASE), REG(a0, X509_CRL_INFO ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_X509_CRL_INFO(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_CRL_INFO * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_X509_CRL_INFO_it(REG(a6, __IFACE_OR_BASE));
X509_CRL * SAVEDS ASM LIB_X509_CRL_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_X509_CRL_free(REG(a6, __IFACE_OR_BASE), REG(a0, X509_CRL * a));
X509_CRL * SAVEDS ASM LIB_d2i_X509_CRL(REG(a6, __IFACE_OR_BASE), REG(a0, X509_CRL ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_X509_CRL(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_CRL * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_X509_CRL_it(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_X509_CRL_add0_revoked(REG(a6, __IFACE_OR_BASE), REG(a0, X509_CRL * crl), REG(a1, X509_REVOKED * rev));
X509_PKEY * SAVEDS ASM LIB_X509_PKEY_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_X509_PKEY_free(REG(a6, __IFACE_OR_BASE), REG(a0, X509_PKEY * a));
NETSCAPE_SPKI * SAVEDS ASM LIB_NETSCAPE_SPKI_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_NETSCAPE_SPKI_free(REG(a6, __IFACE_OR_BASE), REG(a0, NETSCAPE_SPKI * a));
NETSCAPE_SPKI * SAVEDS ASM LIB_d2i_NETSCAPE_SPKI(REG(a6, __IFACE_OR_BASE), REG(a0, NETSCAPE_SPKI ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_NETSCAPE_SPKI(REG(a6, __IFACE_OR_BASE), REG(a0, const NETSCAPE_SPKI * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_NETSCAPE_SPKI_it(REG(a6, __IFACE_OR_BASE));
NETSCAPE_SPKAC * SAVEDS ASM LIB_NETSCAPE_SPKAC_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_NETSCAPE_SPKAC_free(REG(a6, __IFACE_OR_BASE), REG(a0, NETSCAPE_SPKAC * a));
NETSCAPE_SPKAC * SAVEDS ASM LIB_d2i_NETSCAPE_SPKAC(REG(a6, __IFACE_OR_BASE), REG(a0, NETSCAPE_SPKAC ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_NETSCAPE_SPKAC(REG(a6, __IFACE_OR_BASE), REG(a0, const NETSCAPE_SPKAC * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_NETSCAPE_SPKAC_it(REG(a6, __IFACE_OR_BASE));
NETSCAPE_CERT_SEQUENCE * SAVEDS ASM LIB_NETSCAPE_CERT_SEQUENCE_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_NETSCAPE_CERT_SEQUENCE_free(REG(a6, __IFACE_OR_BASE), REG(a0, NETSCAPE_CERT_SEQUENCE * a));
NETSCAPE_CERT_SEQUENCE * SAVEDS ASM LIB_d2i_NETSCAPE_CERT_SEQUENCE(REG(a6, __IFACE_OR_BASE), REG(a0, NETSCAPE_CERT_SEQUENCE ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_NETSCAPE_CERT_SEQUENCE(REG(a6, __IFACE_OR_BASE), REG(a0, const NETSCAPE_CERT_SEQUENCE * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_NETSCAPE_CERT_SEQUENCE_it(REG(a6, __IFACE_OR_BASE));
X509_INFO * SAVEDS ASM LIB_X509_INFO_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_X509_INFO_free(REG(a6, __IFACE_OR_BASE), REG(a0, X509_INFO * a));
char * SAVEDS ASM LIB_X509_NAME_oneline(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_NAME * a), REG(a1, char * buf), REG(d0, int size));
int SAVEDS ASM LIB_ASN1_verify(REG(a6, __IFACE_OR_BASE), REG(a0, int (*i2d)()), REG(a1, X509_ALGOR * algor1), REG(a2, ASN1_BIT_STRING * signature), REG(a3, char * data), REG(d0, EVP_PKEY * pkey));
int SAVEDS ASM LIB_ASN1_digest(REG(a6, __IFACE_OR_BASE), REG(a0, int (*i2d)()), REG(a1, const EVP_MD * type), REG(a2, char * data), REG(a3, unsigned char * md), REG(d0, unsigned int * len));
int SAVEDS ASM LIB_ASN1_sign(REG(a6, __IFACE_OR_BASE), REG(a0, int (*i2d)()), REG(a1, X509_ALGOR * algor1), REG(a2, X509_ALGOR * algor2), REG(a3, ASN1_BIT_STRING * signature), REG(d0, char * data), REG(d1, EVP_PKEY * pkey), REG(d2, const EVP_MD * type));
int SAVEDS ASM LIB_ASN1_item_digest(REG(a6, __IFACE_OR_BASE), REG(a0, const ASN1_ITEM * it), REG(a1, const EVP_MD * type), REG(a2, void * data), REG(a3, unsigned char * md), REG(d0, unsigned int * len));
int SAVEDS ASM LIB_ASN1_item_verify(REG(a6, __IFACE_OR_BASE), REG(a0, const ASN1_ITEM * it), REG(a1, const X509_ALGOR * alg), REG(a2, const ASN1_BIT_STRING * signature), REG(a3, const void * data), REG(d0, EVP_PKEY * pkey));
int SAVEDS ASM LIB_ASN1_item_sign(REG(a6, __IFACE_OR_BASE), REG(a0, const ASN1_ITEM * it), REG(a1, X509_ALGOR * algor1), REG(a2, X509_ALGOR * algor2), REG(a3, ASN1_BIT_STRING * signature), REG(d0, const void * data), REG(d1, EVP_PKEY * pkey), REG(d2, const EVP_MD * type));
int SAVEDS ASM LIB_X509_set_version(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * x), REG(d0, long version));
int SAVEDS ASM LIB_X509_set_serialNumber(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * x), REG(a1, ASN1_INTEGER * serial));
ASN1_INTEGER * SAVEDS ASM LIB_X509_get_serialNumber(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * x));
int SAVEDS ASM LIB_X509_set_issuer_name(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * x), REG(a1, const X509_NAME * name));
X509_NAME * SAVEDS ASM LIB_X509_get_issuer_name(REG(a6, __IFACE_OR_BASE), REG(a0, const X509 * a));
int SAVEDS ASM LIB_X509_set_subject_name(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * x), REG(a1, const X509_NAME * name));
X509_NAME * SAVEDS ASM LIB_X509_get_subject_name(REG(a6, __IFACE_OR_BASE), REG(a0, const X509 * a));
int SAVEDS ASM LIB_X509_set1_notBefore(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * x), REG(a1, const ASN1_TIME * tm));
int SAVEDS ASM LIB_X509_set1_notAfter(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * x), REG(a1, const ASN1_TIME * tm));
int SAVEDS ASM LIB_X509_set_pubkey(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * x), REG(a1, EVP_PKEY * pkey));
EVP_PKEY * SAVEDS ASM LIB_X509_get_pubkey(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * x));
ASN1_BIT_STRING * SAVEDS ASM LIB_X509_get0_pubkey_bitstr(REG(a6, __IFACE_OR_BASE), REG(a0, const X509 * x));
int SAVEDS ASM LIB_X509_certificate_type(REG(a6, __IFACE_OR_BASE), REG(a0, const X509 * x), REG(a1, const EVP_PKEY * pubkey));
int SAVEDS ASM LIB_X509_REQ_set_version(REG(a6, __IFACE_OR_BASE), REG(a0, X509_REQ * x), REG(d0, long version));
int SAVEDS ASM LIB_X509_REQ_set_subject_name(REG(a6, __IFACE_OR_BASE), REG(a0, X509_REQ * req), REG(a1, const X509_NAME * name));
int SAVEDS ASM LIB_X509_REQ_set_pubkey(REG(a6, __IFACE_OR_BASE), REG(a0, X509_REQ * x), REG(a1, EVP_PKEY * pkey));
EVP_PKEY * SAVEDS ASM LIB_X509_REQ_get_pubkey(REG(a6, __IFACE_OR_BASE), REG(a0, X509_REQ * req));
int SAVEDS ASM LIB_X509_REQ_extension_nid(REG(a6, __IFACE_OR_BASE), REG(d0, int nid));
int * SAVEDS ASM LIB_X509_REQ_get_extension_nids(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_X509_REQ_set_extension_nids(REG(a6, __IFACE_OR_BASE), REG(a0, int * nids));
STACK_OF(X509_EXTENSION) * SAVEDS ASM LIB_X509_REQ_get_extensions(REG(a6, __IFACE_OR_BASE), REG(a0, X509_REQ * req));
int SAVEDS ASM LIB_X509_REQ_add_extensions_nid(REG(a6, __IFACE_OR_BASE), REG(a0, X509_REQ * req), REG(a1, const STACK_OF(X509_EXTENSION) * exts), REG(d0, int nid));
int SAVEDS ASM LIB_X509_REQ_add_extensions(REG(a6, __IFACE_OR_BASE), REG(a0, X509_REQ * req), REG(a1, const STACK_OF(X509_EXTENSION) * exts));
int SAVEDS ASM LIB_X509_REQ_get_attr_count(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_REQ * req));
int SAVEDS ASM LIB_X509_REQ_get_attr_by_NID(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_REQ * req), REG(d0, int nid), REG(d1, int lastpos));
int SAVEDS ASM LIB_X509_REQ_get_attr_by_OBJ(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_REQ * req), REG(a1, const ASN1_OBJECT * obj), REG(d0, int lastpos));
X509_ATTRIBUTE * SAVEDS ASM LIB_X509_REQ_get_attr(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_REQ * req), REG(d0, int loc));
X509_ATTRIBUTE * SAVEDS ASM LIB_X509_REQ_delete_attr(REG(a6, __IFACE_OR_BASE), REG(a0, X509_REQ * req), REG(d0, int loc));
int SAVEDS ASM LIB_X509_REQ_add1_attr(REG(a6, __IFACE_OR_BASE), REG(a0, X509_REQ * req), REG(a1, X509_ATTRIBUTE * attr));
int SAVEDS ASM LIB_X509_REQ_add1_attr_by_OBJ(REG(a6, __IFACE_OR_BASE), REG(a0, X509_REQ * req), REG(a1, const ASN1_OBJECT * obj), REG(d0, int type), REG(a2, const unsigned char * bytes), REG(d1, int len));
int SAVEDS ASM LIB_X509_REQ_add1_attr_by_NID(REG(a6, __IFACE_OR_BASE), REG(a0, X509_REQ * req), REG(d0, int nid), REG(d1, int type), REG(a1, const unsigned char * bytes), REG(d2, int len));
int SAVEDS ASM LIB_X509_REQ_add1_attr_by_txt(REG(a6, __IFACE_OR_BASE), REG(a0, X509_REQ * req), REG(a1, const char * attrname), REG(d0, int type), REG(a2, const unsigned char * bytes), REG(d1, int len));
int SAVEDS ASM LIB_X509_CRL_set_version(REG(a6, __IFACE_OR_BASE), REG(a0, X509_CRL * x), REG(d0, long version));
int SAVEDS ASM LIB_X509_CRL_set_issuer_name(REG(a6, __IFACE_OR_BASE), REG(a0, X509_CRL * x), REG(a1, const X509_NAME * name));
int SAVEDS ASM LIB_X509_CRL_set1_lastUpdate(REG(a6, __IFACE_OR_BASE), REG(a0, X509_CRL * x), REG(a1, const ASN1_TIME * tm));
int SAVEDS ASM LIB_X509_CRL_set1_nextUpdate(REG(a6, __IFACE_OR_BASE), REG(a0, X509_CRL * x), REG(a1, const ASN1_TIME * tm));
int SAVEDS ASM LIB_X509_CRL_sort(REG(a6, __IFACE_OR_BASE), REG(a0, X509_CRL * crl));
int SAVEDS ASM LIB_X509_REVOKED_set_serialNumber(REG(a6, __IFACE_OR_BASE), REG(a0, X509_REVOKED * x), REG(a1, ASN1_INTEGER * serial));
int SAVEDS ASM LIB_X509_REVOKED_set_revocationDate(REG(a6, __IFACE_OR_BASE), REG(a0, X509_REVOKED * r), REG(a1, ASN1_TIME * tm));
int SAVEDS ASM LIB_X509_check_private_key(REG(a6, __IFACE_OR_BASE), REG(a0, const X509 * cert), REG(a1, const EVP_PKEY * pkey));
int SAVEDS ASM LIB_X509_issuer_and_serial_cmp(REG(a6, __IFACE_OR_BASE), REG(a0, const X509 * a), REG(a1, const X509 * b));
unsigned long SAVEDS ASM LIB_X509_issuer_and_serial_hash(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * a));
int SAVEDS ASM LIB_X509_issuer_name_cmp(REG(a6, __IFACE_OR_BASE), REG(a0, const X509 * a), REG(a1, const X509 * b));
unsigned long SAVEDS ASM LIB_X509_issuer_name_hash(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * a));
int SAVEDS ASM LIB_X509_subject_name_cmp(REG(a6, __IFACE_OR_BASE), REG(a0, const X509 * a), REG(a1, const X509 * b));
unsigned long SAVEDS ASM LIB_X509_subject_name_hash(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * x));
int SAVEDS ASM LIB_X509_cmp(REG(a6, __IFACE_OR_BASE), REG(a0, const X509 * a), REG(a1, const X509 * b));
int SAVEDS ASM LIB_X509_NAME_cmp(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_NAME * a), REG(a1, const X509_NAME * b));
unsigned long SAVEDS ASM LIB_OBSOLETE_X509_NAME_hash(REG(a6, __IFACE_OR_BASE), REG(a0, X509_NAME * x));
int SAVEDS ASM LIB_X509_CRL_cmp(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_CRL * a), REG(a1, const X509_CRL * b));
int SAVEDS ASM LIB_X509_NAME_print(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, const X509_NAME * name), REG(d0, int obase));
int SAVEDS ASM LIB_X509_NAME_print_ex(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * out), REG(a1, const X509_NAME * nm), REG(d0, int indent), REG(d1, unsigned long flags));
int SAVEDS ASM LIB_X509_print_ex(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, X509 * x), REG(d0, unsigned long nmflag), REG(d1, unsigned long cflag));
int SAVEDS ASM LIB_X509_print(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, X509 * x));
int SAVEDS ASM LIB_X509_ocspid_print(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, X509 * x));
int SAVEDS ASM LIB_X509_CRL_print(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, X509_CRL * x));
int SAVEDS ASM LIB_X509_REQ_print_ex(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, X509_REQ * x), REG(d0, unsigned long nmflag), REG(d1, unsigned long cflag));
int SAVEDS ASM LIB_X509_REQ_print(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, X509_REQ * req));
int SAVEDS ASM LIB_X509_NAME_entry_count(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_NAME * name));
int SAVEDS ASM LIB_X509_NAME_get_text_by_NID(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_NAME * name), REG(d0, int nid), REG(a1, char * buf), REG(d1, int len));
int SAVEDS ASM LIB_X509_NAME_get_text_by_OBJ(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_NAME * name), REG(a1, const ASN1_OBJECT * obj), REG(a2, char * buf), REG(d0, int len));
int SAVEDS ASM LIB_X509_NAME_get_index_by_NID(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_NAME * name), REG(d0, int nid), REG(d1, int lastpos));
int SAVEDS ASM LIB_X509_NAME_get_index_by_OBJ(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_NAME * name), REG(a1, const ASN1_OBJECT * obj), REG(d0, int lastpos));
X509_NAME_ENTRY * SAVEDS ASM LIB_X509_NAME_get_entry(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_NAME * name), REG(d0, int loc));
X509_NAME_ENTRY * SAVEDS ASM LIB_X509_NAME_delete_entry(REG(a6, __IFACE_OR_BASE), REG(a0, X509_NAME * name), REG(d0, int loc));
int SAVEDS ASM LIB_X509_NAME_add_entry(REG(a6, __IFACE_OR_BASE), REG(a0, X509_NAME * name), REG(a1, const X509_NAME_ENTRY * ne), REG(d0, int loc), REG(d1, int set));
int SAVEDS ASM LIB_X509_NAME_add_entry_by_OBJ(REG(a6, __IFACE_OR_BASE), REG(a0, X509_NAME * name), REG(a1, const ASN1_OBJECT * obj), REG(d0, int type), REG(a2, const unsigned char * bytes), REG(d1, int len), REG(d2, int loc), REG(d3, int set));
int SAVEDS ASM LIB_X509_NAME_add_entry_by_NID(REG(a6, __IFACE_OR_BASE), REG(a0, X509_NAME * name), REG(d0, int nid), REG(d1, int type), REG(a1, const unsigned char * bytes), REG(d2, int len), REG(d3, int loc), REG(d4, int set));
X509_NAME_ENTRY * SAVEDS ASM LIB_X509_NAME_ENTRY_create_by_txt(REG(a6, __IFACE_OR_BASE), REG(a0, X509_NAME_ENTRY ** ne), REG(a1, const char * field), REG(d0, int type), REG(a2, const unsigned char * bytes), REG(d1, int len));
X509_NAME_ENTRY * SAVEDS ASM LIB_X509_NAME_ENTRY_create_by_NID(REG(a6, __IFACE_OR_BASE), REG(a0, X509_NAME_ENTRY ** ne), REG(d0, int nid), REG(d1, int type), REG(a1, const unsigned char * bytes), REG(d2, int len));
int SAVEDS ASM LIB_X509_NAME_add_entry_by_txt(REG(a6, __IFACE_OR_BASE), REG(a0, X509_NAME * name), REG(a1, const char * field), REG(d0, int type), REG(a2, const unsigned char * bytes), REG(d1, int len), REG(d2, int loc), REG(d3, int set));
X509_NAME_ENTRY * SAVEDS ASM LIB_X509_NAME_ENTRY_create_by_OBJ(REG(a6, __IFACE_OR_BASE), REG(a0, X509_NAME_ENTRY ** ne), REG(a1, const ASN1_OBJECT * obj), REG(d0, int type), REG(a2, const unsigned char * bytes), REG(d1, int len));
int SAVEDS ASM LIB_X509_NAME_ENTRY_set_object(REG(a6, __IFACE_OR_BASE), REG(a0, X509_NAME_ENTRY * ne), REG(a1, const ASN1_OBJECT * obj));
int SAVEDS ASM LIB_X509_NAME_ENTRY_set_data(REG(a6, __IFACE_OR_BASE), REG(a0, X509_NAME_ENTRY * ne), REG(d0, int type), REG(a1, const unsigned char * bytes), REG(d1, int len));
ASN1_OBJECT * SAVEDS ASM LIB_X509_NAME_ENTRY_get_object(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_NAME_ENTRY * ne));
ASN1_STRING * SAVEDS ASM LIB_X509_NAME_ENTRY_get_data(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_NAME_ENTRY * ne));
int SAVEDS ASM LIB_X509v3_get_ext_count(REG(a6, __IFACE_OR_BASE), REG(a0, const STACK_OF(X509_EXTENSION) * x));
int SAVEDS ASM LIB_X509v3_get_ext_by_NID(REG(a6, __IFACE_OR_BASE), REG(a0, const STACK_OF(X509_EXTENSION) * x), REG(d0, int nid), REG(d1, int lastpos));
int SAVEDS ASM LIB_X509v3_get_ext_by_OBJ(REG(a6, __IFACE_OR_BASE), REG(a0, const STACK_OF(X509_EXTENSION) * x), REG(a1, const ASN1_OBJECT * obj), REG(d0, int lastpos));
int SAVEDS ASM LIB_X509v3_get_ext_by_critical(REG(a6, __IFACE_OR_BASE), REG(a0, const STACK_OF(X509_EXTENSION) * x), REG(d0, int crit), REG(d1, int lastpos));
X509_EXTENSION * SAVEDS ASM LIB_X509v3_get_ext(REG(a6, __IFACE_OR_BASE), REG(a0, const STACK_OF(X509_EXTENSION) * x), REG(d0, int loc));
X509_EXTENSION * SAVEDS ASM LIB_X509v3_delete_ext(REG(a6, __IFACE_OR_BASE), REG(a0, STACK_OF(X509_EXTENSION) * x), REG(d0, int loc));
STACK_OF(X509_EXTENSION) * SAVEDS ASM LIB_X509v3_add_ext(REG(a6, __IFACE_OR_BASE), REG(a0, STACK_OF(X509_EXTENSION) ** x), REG(a1, X509_EXTENSION * ex), REG(d0, int loc));
int SAVEDS ASM LIB_X509_get_ext_count(REG(a6, __IFACE_OR_BASE), REG(a0, const X509 * x));
int SAVEDS ASM LIB_X509_get_ext_by_NID(REG(a6, __IFACE_OR_BASE), REG(a0, const X509 * x), REG(d0, int nid), REG(d1, int lastpos));
int SAVEDS ASM LIB_X509_get_ext_by_OBJ(REG(a6, __IFACE_OR_BASE), REG(a0, const X509 * x), REG(a1, const ASN1_OBJECT * obj), REG(d0, int lastpos));
int SAVEDS ASM LIB_X509_get_ext_by_critical(REG(a6, __IFACE_OR_BASE), REG(a0, const X509 * x), REG(d0, int crit), REG(d1, int lastpos));
X509_EXTENSION * SAVEDS ASM LIB_X509_get_ext(REG(a6, __IFACE_OR_BASE), REG(a0, const X509 * x), REG(d0, int loc));
X509_EXTENSION * SAVEDS ASM LIB_X509_delete_ext(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * x), REG(d0, int loc));
int SAVEDS ASM LIB_X509_add_ext(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * x), REG(a1, X509_EXTENSION * ex), REG(d0, int loc));
void * SAVEDS ASM LIB_X509_get_ext_d2i(REG(a6, __IFACE_OR_BASE), REG(a0, const X509 * x), REG(d0, int nid), REG(a1, int * crit), REG(a2, int * idx));
int SAVEDS ASM LIB_X509_add1_ext_i2d(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * x), REG(d0, int nid), REG(a1, void * value), REG(d1, int crit), REG(d2, unsigned long flags));
int SAVEDS ASM LIB_X509_CRL_get_ext_count(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_CRL * x));
int SAVEDS ASM LIB_X509_CRL_get_ext_by_NID(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_CRL * x), REG(d0, int nid), REG(d1, int lastpos));
int SAVEDS ASM LIB_X509_CRL_get_ext_by_OBJ(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_CRL * x), REG(a1, const ASN1_OBJECT * obj), REG(d0, int lastpos));
int SAVEDS ASM LIB_X509_CRL_get_ext_by_critical(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_CRL * x), REG(d0, int crit), REG(d1, int lastpos));
X509_EXTENSION * SAVEDS ASM LIB_X509_CRL_get_ext(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_CRL * x), REG(d0, int loc));
X509_EXTENSION * SAVEDS ASM LIB_X509_CRL_delete_ext(REG(a6, __IFACE_OR_BASE), REG(a0, X509_CRL * x), REG(d0, int loc));
int SAVEDS ASM LIB_X509_CRL_add_ext(REG(a6, __IFACE_OR_BASE), REG(a0, X509_CRL * x), REG(a1, X509_EXTENSION * ex), REG(d0, int loc));
void * SAVEDS ASM LIB_X509_CRL_get_ext_d2i(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_CRL * x), REG(d0, int nid), REG(a1, int * crit), REG(a2, int * idx));
int SAVEDS ASM LIB_X509_CRL_add1_ext_i2d(REG(a6, __IFACE_OR_BASE), REG(a0, X509_CRL * x), REG(d0, int nid), REG(a1, void * value), REG(d1, int crit), REG(d2, unsigned long flags));
int SAVEDS ASM LIB_X509_REVOKED_get_ext_count(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_REVOKED * x));
int SAVEDS ASM LIB_X509_REVOKED_get_ext_by_NID(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_REVOKED * x), REG(d0, int nid), REG(d1, int lastpos));
int SAVEDS ASM LIB_X509_REVOKED_get_ext_by_OBJ(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_REVOKED * x), REG(a1, const ASN1_OBJECT * obj), REG(d0, int lastpos));
int SAVEDS ASM LIB_X509_REVOKED_get_ext_by_critical(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_REVOKED * x), REG(d0, int crit), REG(d1, int lastpos));
X509_EXTENSION * SAVEDS ASM LIB_X509_REVOKED_get_ext(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_REVOKED * x), REG(d0, int loc));
X509_EXTENSION * SAVEDS ASM LIB_X509_REVOKED_delete_ext(REG(a6, __IFACE_OR_BASE), REG(a0, X509_REVOKED * x), REG(d0, int loc));
int SAVEDS ASM LIB_X509_REVOKED_add_ext(REG(a6, __IFACE_OR_BASE), REG(a0, X509_REVOKED * x), REG(a1, X509_EXTENSION * ex), REG(d0, int loc));
void * SAVEDS ASM LIB_X509_REVOKED_get_ext_d2i(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_REVOKED * x), REG(d0, int nid), REG(a1, int * crit), REG(a2, int * idx));
int SAVEDS ASM LIB_X509_REVOKED_add1_ext_i2d(REG(a6, __IFACE_OR_BASE), REG(a0, X509_REVOKED * x), REG(d0, int nid), REG(a1, void * value), REG(d1, int crit), REG(d2, unsigned long flags));
X509_EXTENSION * SAVEDS ASM LIB_X509_EXTENSION_create_by_NID(REG(a6, __IFACE_OR_BASE), REG(a0, X509_EXTENSION ** ex), REG(d0, int nid), REG(d1, int crit), REG(a1, ASN1_OCTET_STRING * data));
X509_EXTENSION * SAVEDS ASM LIB_X509_EXTENSION_create_by_OBJ(REG(a6, __IFACE_OR_BASE), REG(a0, X509_EXTENSION ** ex), REG(a1, const ASN1_OBJECT * obj), REG(d0, int crit), REG(a2, ASN1_OCTET_STRING * data));
int SAVEDS ASM LIB_X509_EXTENSION_set_object(REG(a6, __IFACE_OR_BASE), REG(a0, X509_EXTENSION * ex), REG(a1, const ASN1_OBJECT * obj));
int SAVEDS ASM LIB_X509_EXTENSION_set_critical(REG(a6, __IFACE_OR_BASE), REG(a0, X509_EXTENSION * ex), REG(d0, int crit));
int SAVEDS ASM LIB_X509_EXTENSION_set_data(REG(a6, __IFACE_OR_BASE), REG(a0, X509_EXTENSION * ex), REG(a1, ASN1_OCTET_STRING * data));
ASN1_OBJECT * SAVEDS ASM LIB_X509_EXTENSION_get_object(REG(a6, __IFACE_OR_BASE), REG(a0, X509_EXTENSION * ex));
ASN1_OCTET_STRING * SAVEDS ASM LIB_X509_EXTENSION_get_data(REG(a6, __IFACE_OR_BASE), REG(a0, X509_EXTENSION * ne));
int SAVEDS ASM LIB_X509_EXTENSION_get_critical(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_EXTENSION * ex));
int SAVEDS ASM LIB_X509at_get_attr_count(REG(a6, __IFACE_OR_BASE), REG(a0, const STACK_OF(X509_ATTRIBUTE) * x));
int SAVEDS ASM LIB_X509at_get_attr_by_NID(REG(a6, __IFACE_OR_BASE), REG(a0, const STACK_OF(X509_ATTRIBUTE) * x), REG(d0, int nid), REG(d1, int lastpos));
int SAVEDS ASM LIB_X509at_get_attr_by_OBJ(REG(a6, __IFACE_OR_BASE), REG(a0, const STACK_OF(X509_ATTRIBUTE) * sk), REG(a1, const ASN1_OBJECT * obj), REG(d0, int lastpos));
X509_ATTRIBUTE * SAVEDS ASM LIB_X509at_get_attr(REG(a6, __IFACE_OR_BASE), REG(a0, const STACK_OF(X509_ATTRIBUTE) * x), REG(d0, int loc));
X509_ATTRIBUTE * SAVEDS ASM LIB_X509at_delete_attr(REG(a6, __IFACE_OR_BASE), REG(a0, STACK_OF(X509_ATTRIBUTE) * x), REG(d0, int loc));
STACK_OF(X509_ATTRIBUTE) * SAVEDS ASM LIB_X509at_add1_attr(REG(a6, __IFACE_OR_BASE), REG(a0, STACK_OF(X509_ATTRIBUTE) ** x), REG(a1, X509_ATTRIBUTE * attr));
STACK_OF(X509_ATTRIBUTE) * SAVEDS ASM LIB_X509at_add1_attr_by_OBJ(REG(a6, __IFACE_OR_BASE), REG(a0, STACK_OF(X509_ATTRIBUTE) ** x), REG(a1, const ASN1_OBJECT * obj), REG(d0, int type), REG(a2, const unsigned char * bytes), REG(d1, int len));
STACK_OF(X509_ATTRIBUTE) * SAVEDS ASM LIB_X509at_add1_attr_by_NID(REG(a6, __IFACE_OR_BASE), REG(a0, STACK_OF(X509_ATTRIBUTE) ** x), REG(d0, int nid), REG(d1, int type), REG(a1, const unsigned char * bytes), REG(d2, int len));
STACK_OF(X509_ATTRIBUTE) * SAVEDS ASM LIB_X509at_add1_attr_by_txt(REG(a6, __IFACE_OR_BASE), REG(a0, STACK_OF(X509_ATTRIBUTE) ** x), REG(a1, const char * attrname), REG(d0, int type), REG(a2, const unsigned char * bytes), REG(d1, int len));
X509_ATTRIBUTE * SAVEDS ASM LIB_X509_ATTRIBUTE_create_by_NID(REG(a6, __IFACE_OR_BASE), REG(a0, X509_ATTRIBUTE ** attr), REG(d0, int nid), REG(d1, int atrtype), REG(a1, const void * data), REG(d2, int len));
X509_ATTRIBUTE * SAVEDS ASM LIB_X509_ATTRIBUTE_create_by_OBJ(REG(a6, __IFACE_OR_BASE), REG(a0, X509_ATTRIBUTE ** attr), REG(a1, const ASN1_OBJECT * obj), REG(d0, int atrtype), REG(a2, const void * data), REG(d1, int len));
X509_ATTRIBUTE * SAVEDS ASM LIB_X509_ATTRIBUTE_create_by_txt(REG(a6, __IFACE_OR_BASE), REG(a0, X509_ATTRIBUTE ** attr), REG(a1, const char * atrname), REG(d0, int type), REG(a2, const unsigned char * bytes), REG(d1, int len));
int SAVEDS ASM LIB_X509_ATTRIBUTE_set1_object(REG(a6, __IFACE_OR_BASE), REG(a0, X509_ATTRIBUTE * attr), REG(a1, const ASN1_OBJECT * obj));
int SAVEDS ASM LIB_X509_ATTRIBUTE_set1_data(REG(a6, __IFACE_OR_BASE), REG(a0, X509_ATTRIBUTE * attr), REG(d0, int attrtype), REG(a1, const void * data), REG(d1, int len));
void * SAVEDS ASM LIB_X509_ATTRIBUTE_get0_data(REG(a6, __IFACE_OR_BASE), REG(a0, X509_ATTRIBUTE * attr), REG(d0, int idx), REG(d1, int atrtype), REG(a1, void * data));
int SAVEDS ASM LIB_X509_ATTRIBUTE_count(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_ATTRIBUTE * attr));
ASN1_OBJECT * SAVEDS ASM LIB_X509_ATTRIBUTE_get0_object(REG(a6, __IFACE_OR_BASE), REG(a0, X509_ATTRIBUTE * attr));
ASN1_TYPE * SAVEDS ASM LIB_X509_ATTRIBUTE_get0_type(REG(a6, __IFACE_OR_BASE), REG(a0, X509_ATTRIBUTE * attr), REG(d0, int idx));
int SAVEDS ASM LIB_X509_verify_cert(REG(a6, __IFACE_OR_BASE), REG(a0, X509_STORE_CTX * ctx));
X509 * SAVEDS ASM LIB_X509_find_by_issuer_and_serial(REG(a6, __IFACE_OR_BASE), REG(a0, STACK_OF(X509) * sk), REG(a1, const X509_NAME * name), REG(a2, const ASN1_INTEGER * serial));
X509 * SAVEDS ASM LIB_X509_find_by_subject(REG(a6, __IFACE_OR_BASE), REG(a0, STACK_OF(X509) * sk), REG(a1, const X509_NAME * name));
PBEPARAM * SAVEDS ASM LIB_PBEPARAM_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_PBEPARAM_free(REG(a6, __IFACE_OR_BASE), REG(a0, PBEPARAM * a));
PBEPARAM * SAVEDS ASM LIB_d2i_PBEPARAM(REG(a6, __IFACE_OR_BASE), REG(a0, PBEPARAM ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_PBEPARAM(REG(a6, __IFACE_OR_BASE), REG(a0, const PBEPARAM * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_PBEPARAM_it(REG(a6, __IFACE_OR_BASE));
PBE2PARAM * SAVEDS ASM LIB_PBE2PARAM_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_PBE2PARAM_free(REG(a6, __IFACE_OR_BASE), REG(a0, PBE2PARAM * a));
PBE2PARAM * SAVEDS ASM LIB_d2i_PBE2PARAM(REG(a6, __IFACE_OR_BASE), REG(a0, PBE2PARAM ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_PBE2PARAM(REG(a6, __IFACE_OR_BASE), REG(a0, const PBE2PARAM * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_PBE2PARAM_it(REG(a6, __IFACE_OR_BASE));
PBKDF2PARAM * SAVEDS ASM LIB_PBKDF2PARAM_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_PBKDF2PARAM_free(REG(a6, __IFACE_OR_BASE), REG(a0, PBKDF2PARAM * a));
PBKDF2PARAM * SAVEDS ASM LIB_d2i_PBKDF2PARAM(REG(a6, __IFACE_OR_BASE), REG(a0, PBKDF2PARAM ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_PBKDF2PARAM(REG(a6, __IFACE_OR_BASE), REG(a0, const PBKDF2PARAM * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_PBKDF2PARAM_it(REG(a6, __IFACE_OR_BASE));
X509_ALGOR * SAVEDS ASM LIB_PKCS5_pbe_set(REG(a6, __IFACE_OR_BASE), REG(d0, int alg), REG(d1, int iter), REG(a0, const unsigned char * salt), REG(d2, int saltlen));
X509_ALGOR * SAVEDS ASM LIB_PKCS5_pbe2_set(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_CIPHER * cipher), REG(d0, int iter), REG(a1, unsigned char * salt), REG(d1, int saltlen));
PKCS8_PRIV_KEY_INFO * SAVEDS ASM LIB_PKCS8_PRIV_KEY_INFO_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_PKCS8_PRIV_KEY_INFO_free(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS8_PRIV_KEY_INFO * a));
PKCS8_PRIV_KEY_INFO * SAVEDS ASM LIB_d2i_PKCS8_PRIV_KEY_INFO(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS8_PRIV_KEY_INFO ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_PKCS8_PRIV_KEY_INFO(REG(a6, __IFACE_OR_BASE), REG(a0, const PKCS8_PRIV_KEY_INFO * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_PKCS8_PRIV_KEY_INFO_it(REG(a6, __IFACE_OR_BASE));
EVP_PKEY * SAVEDS ASM LIB_EVP_PKCS82PKEY(REG(a6, __IFACE_OR_BASE), REG(a0, const PKCS8_PRIV_KEY_INFO * p8));
PKCS8_PRIV_KEY_INFO * SAVEDS ASM LIB_EVP_PKEY2PKCS8(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_PKEY * pkey));
int SAVEDS ASM LIB_X509_check_trust(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * x), REG(d0, int id), REG(d1, int flags));
int SAVEDS ASM LIB_X509_TRUST_get_count(REG(a6, __IFACE_OR_BASE));
X509_TRUST * SAVEDS ASM LIB_X509_TRUST_get0(REG(a6, __IFACE_OR_BASE), REG(d0, int idx));
int SAVEDS ASM LIB_X509_TRUST_get_by_id(REG(a6, __IFACE_OR_BASE), REG(d0, int id));
int SAVEDS ASM LIB_X509_TRUST_add(REG(a6, __IFACE_OR_BASE), REG(d0, int id), REG(d1, int flags), REG(a0, int (*ck)(X509_TRUST *, X509 *, int)), REG(a1, const char * name), REG(d2, int arg1), REG(a2, void * arg2));
void SAVEDS ASM LIB_X509_TRUST_cleanup(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_X509_TRUST_get_flags(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_TRUST * xp));
char * SAVEDS ASM LIB_X509_TRUST_get0_name(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_TRUST * xp));
int SAVEDS ASM LIB_X509_TRUST_get_trust(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_TRUST * xp));
int SAVEDS ASM LIB_ERR_load_X509_strings(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_X509_OBJECT_idx_by_subject(REG(a6, __IFACE_OR_BASE), REG(a0, STACK_OF(X509_OBJECT) * h), REG(d0, X509_LOOKUP_TYPE type), REG(a1, const X509_NAME * name));
X509_OBJECT * SAVEDS ASM LIB_X509_OBJECT_retrieve_by_subject(REG(a6, __IFACE_OR_BASE), REG(a0, STACK_OF(X509_OBJECT) * h), REG(d0, X509_LOOKUP_TYPE type), REG(a1, const X509_NAME * name));
X509_OBJECT * SAVEDS ASM LIB_X509_OBJECT_retrieve_match(REG(a6, __IFACE_OR_BASE), REG(a0, STACK_OF(X509_OBJECT) * h), REG(a1, X509_OBJECT * x));
int SAVEDS ASM LIB_X509_OBJECT_up_ref_count(REG(a6, __IFACE_OR_BASE), REG(a0, X509_OBJECT * a));
X509_STORE * SAVEDS ASM LIB_X509_STORE_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_X509_STORE_free(REG(a6, __IFACE_OR_BASE), REG(a0, X509_STORE * xs));
int SAVEDS ASM LIB_X509_STORE_set_flags(REG(a6, __IFACE_OR_BASE), REG(a0, X509_STORE * xs), REG(d0, unsigned long flags));
int SAVEDS ASM LIB_X509_STORE_set_purpose(REG(a6, __IFACE_OR_BASE), REG(a0, X509_STORE * xs), REG(d0, int purpose));
int SAVEDS ASM LIB_X509_STORE_set_trust(REG(a6, __IFACE_OR_BASE), REG(a0, X509_STORE * xs), REG(d0, int trust));
X509_STORE_CTX * SAVEDS ASM LIB_X509_STORE_CTX_new(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_X509_STORE_CTX_get1_issuer(REG(a6, __IFACE_OR_BASE), REG(a0, X509 ** issuer), REG(a1, X509_STORE_CTX * ctx), REG(a2, X509 * x));
void SAVEDS ASM LIB_X509_STORE_CTX_free(REG(a6, __IFACE_OR_BASE), REG(a0, X509_STORE_CTX * ctx));
int SAVEDS ASM LIB_X509_STORE_CTX_init(REG(a6, __IFACE_OR_BASE), REG(a0, X509_STORE_CTX * ctx), REG(a1, X509_STORE * trust_store), REG(a2, X509 * target), REG(a3, STACK_OF(X509) * untrusted));
void SAVEDS ASM LIB_X509_STORE_CTX_set0_trusted_stack(REG(a6, __IFACE_OR_BASE), REG(a0, X509_STORE_CTX * ctx), REG(a1, STACK_OF(X509) * sk));
void SAVEDS ASM LIB_X509_STORE_CTX_cleanup(REG(a6, __IFACE_OR_BASE), REG(a0, X509_STORE_CTX * ctx));
X509_LOOKUP * SAVEDS ASM LIB_X509_STORE_add_lookup(REG(a6, __IFACE_OR_BASE), REG(a0, X509_STORE * xs), REG(a1, X509_LOOKUP_METHOD * m));
X509_LOOKUP_METHOD * SAVEDS ASM LIB_X509_LOOKUP_hash_dir(REG(a6, __IFACE_OR_BASE));
X509_LOOKUP_METHOD * SAVEDS ASM LIB_X509_LOOKUP_file(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_X509_STORE_add_cert(REG(a6, __IFACE_OR_BASE), REG(a0, X509_STORE * xs), REG(a1, X509 * x));
int SAVEDS ASM LIB_X509_STORE_add_crl(REG(a6, __IFACE_OR_BASE), REG(a0, X509_STORE * xs), REG(a1, X509_CRL * x));
int SAVEDS ASM LIB_X509_STORE_CTX_get_by_subject(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_STORE_CTX * vs), REG(d0, X509_LOOKUP_TYPE type), REG(a1, const X509_NAME * name), REG(a2, X509_OBJECT * ret));
int SAVEDS ASM LIB_X509_LOOKUP_ctrl(REG(a6, __IFACE_OR_BASE), REG(a0, X509_LOOKUP * ctx), REG(d0, int cmd), REG(a1, const char * argc), REG(d1, long argl), REG(a2, char ** ret));
int SAVEDS ASM LIB_X509_load_cert_file(REG(a6, __IFACE_OR_BASE), REG(a0, X509_LOOKUP * ctx), REG(a1, const char * file), REG(d0, int type));
int SAVEDS ASM LIB_X509_load_crl_file(REG(a6, __IFACE_OR_BASE), REG(a0, X509_LOOKUP * ctx), REG(a1, const char * file), REG(d0, int type));
int SAVEDS ASM LIB_X509_load_cert_crl_file(REG(a6, __IFACE_OR_BASE), REG(a0, X509_LOOKUP * ctx), REG(a1, const char * file), REG(d0, int type));
X509_LOOKUP * SAVEDS ASM LIB_X509_LOOKUP_new(REG(a6, __IFACE_OR_BASE), REG(a0, X509_LOOKUP_METHOD * method));
void SAVEDS ASM LIB_X509_LOOKUP_free(REG(a6, __IFACE_OR_BASE), REG(a0, X509_LOOKUP * ctx));
int SAVEDS ASM LIB_X509_LOOKUP_init(REG(a6, __IFACE_OR_BASE), REG(a0, X509_LOOKUP * ctx));
int SAVEDS ASM LIB_X509_LOOKUP_by_subject(REG(a6, __IFACE_OR_BASE), REG(a0, X509_LOOKUP * ctx), REG(d0, X509_LOOKUP_TYPE type), REG(a1, const X509_NAME * name), REG(a2, X509_OBJECT * ret));
int SAVEDS ASM LIB_X509_LOOKUP_by_issuer_serial(REG(a6, __IFACE_OR_BASE), REG(a0, X509_LOOKUP * ctx), REG(d0, X509_LOOKUP_TYPE type), REG(a1, const X509_NAME * name), REG(a2, const ASN1_INTEGER * serial), REG(a3, X509_OBJECT * ret));
int SAVEDS ASM LIB_X509_LOOKUP_by_fingerprint(REG(a6, __IFACE_OR_BASE), REG(a0, X509_LOOKUP * ctx), REG(d0, X509_LOOKUP_TYPE type), REG(a1, const unsigned char * bytes), REG(d1, int len), REG(a2, X509_OBJECT * ret));
int SAVEDS ASM LIB_X509_LOOKUP_by_alias(REG(a6, __IFACE_OR_BASE), REG(a0, X509_LOOKUP * ctx), REG(d0, X509_LOOKUP_TYPE type), REG(a1, const char * str), REG(d1, int len), REG(a2, X509_OBJECT * ret));
int SAVEDS ASM LIB_X509_LOOKUP_shutdown(REG(a6, __IFACE_OR_BASE), REG(a0, X509_LOOKUP * ctx));
int SAVEDS ASM LIB_X509_STORE_load_locations(REG(a6, __IFACE_OR_BASE), REG(a0, X509_STORE * xs), REG(a1, const char * file), REG(a2, const char * dir));
int SAVEDS ASM LIB_X509_STORE_set_default_paths(REG(a6, __IFACE_OR_BASE), REG(a0, X509_STORE * xs));
int SAVEDS ASM LIB_OBSOLETE_X509_STORE_CTX_get_ex_new_index(REG(a6, __IFACE_OR_BASE), REG(d0, long argl), REG(a0, void * argp), REG(a1, CRYPTO_EX_new * new_func), REG(a2, CRYPTO_EX_dup * dup_func), REG(a3, CRYPTO_EX_free * free_func));
int SAVEDS ASM LIB_X509_STORE_CTX_set_ex_data(REG(a6, __IFACE_OR_BASE), REG(a0, X509_STORE_CTX * ctx), REG(d0, int idx), REG(a1, void * data));
void * SAVEDS ASM LIB_X509_STORE_CTX_get_ex_data(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_STORE_CTX * ctx), REG(d0, int idx));
int SAVEDS ASM LIB_X509_STORE_CTX_get_error(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_STORE_CTX * ctx));
void SAVEDS ASM LIB_X509_STORE_CTX_set_error(REG(a6, __IFACE_OR_BASE), REG(a0, X509_STORE_CTX * ctx), REG(d0, int s));
int SAVEDS ASM LIB_X509_STORE_CTX_get_error_depth(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_STORE_CTX * ctx));
X509 * SAVEDS ASM LIB_X509_STORE_CTX_get_current_cert(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_STORE_CTX * ctx));
STACK_OF(X509) * SAVEDS ASM LIB_X509_STORE_CTX_get0_chain(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_STORE_CTX * ctx));
STACK_OF(X509) * SAVEDS ASM LIB_X509_STORE_CTX_get1_chain(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_STORE_CTX * ctx));
void SAVEDS ASM LIB_X509_STORE_CTX_set_cert(REG(a6, __IFACE_OR_BASE), REG(a0, X509_STORE_CTX * c), REG(a1, X509 * x));
int SAVEDS ASM LIB_X509_STORE_CTX_set_purpose(REG(a6, __IFACE_OR_BASE), REG(a0, X509_STORE_CTX * ctx), REG(d0, int purpose));
int SAVEDS ASM LIB_X509_STORE_CTX_set_trust(REG(a6, __IFACE_OR_BASE), REG(a0, X509_STORE_CTX * ctx), REG(d0, int trust));
int SAVEDS ASM LIB_X509_STORE_CTX_purpose_inherit(REG(a6, __IFACE_OR_BASE), REG(a0, X509_STORE_CTX * ctx), REG(d0, int def_purpose), REG(d1, int purpose), REG(d2, int trust));
void SAVEDS ASM LIB_X509_STORE_CTX_set_flags(REG(a6, __IFACE_OR_BASE), REG(a0, X509_STORE_CTX * ctx), REG(d0, unsigned long flags));
void SAVEDS ASM LIB_X509_STORE_CTX_set_time(REG(a6, __IFACE_OR_BASE), REG(a0, X509_STORE_CTX * ctx), REG(d0, unsigned long flags), REG(d1, time_t t));
void SAVEDS ASM LIB_X509_STORE_CTX_set_verify_cb(REG(a6, __IFACE_OR_BASE), REG(a0, X509_STORE_CTX * ctx), REG(a1, int (*verify_cb)(int, X509_STORE_CTX *)));
BASIC_CONSTRAINTS * SAVEDS ASM LIB_BASIC_CONSTRAINTS_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_BASIC_CONSTRAINTS_free(REG(a6, __IFACE_OR_BASE), REG(a0, BASIC_CONSTRAINTS * a));
BASIC_CONSTRAINTS * SAVEDS ASM LIB_d2i_BASIC_CONSTRAINTS(REG(a6, __IFACE_OR_BASE), REG(a0, BASIC_CONSTRAINTS ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_BASIC_CONSTRAINTS(REG(a6, __IFACE_OR_BASE), REG(a0, const BASIC_CONSTRAINTS * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_BASIC_CONSTRAINTS_it(REG(a6, __IFACE_OR_BASE));
SXNET * SAVEDS ASM LIB_SXNET_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_SXNET_free(REG(a6, __IFACE_OR_BASE), REG(a0, SXNET * a));
SXNET * SAVEDS ASM LIB_d2i_SXNET(REG(a6, __IFACE_OR_BASE), REG(a0, SXNET ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_SXNET(REG(a6, __IFACE_OR_BASE), REG(a0, const SXNET * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_SXNET_it(REG(a6, __IFACE_OR_BASE));
SXNETID * SAVEDS ASM LIB_SXNETID_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_SXNETID_free(REG(a6, __IFACE_OR_BASE), REG(a0, SXNETID * a));
SXNETID * SAVEDS ASM LIB_d2i_SXNETID(REG(a6, __IFACE_OR_BASE), REG(a0, SXNETID ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_SXNETID(REG(a6, __IFACE_OR_BASE), REG(a0, const SXNETID * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_SXNETID_it(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_SXNET_add_id_asc(REG(a6, __IFACE_OR_BASE), REG(a0, SXNET ** psx), REG(a1, const char * zone), REG(a2, const char * user), REG(d0, int userlen));
int SAVEDS ASM LIB_SXNET_add_id_ulong(REG(a6, __IFACE_OR_BASE), REG(a0, SXNET ** psx), REG(d0, unsigned long lzone), REG(a1, const char * user), REG(d1, int userlen));
int SAVEDS ASM LIB_SXNET_add_id_INTEGER(REG(a6, __IFACE_OR_BASE), REG(a0, SXNET ** psx), REG(a1, ASN1_INTEGER * izone), REG(a2, const char * user), REG(d0, int userlen));
ASN1_OCTET_STRING * SAVEDS ASM LIB_SXNET_get_id_asc(REG(a6, __IFACE_OR_BASE), REG(a0, SXNET * sx), REG(a1, const char * zone));
ASN1_OCTET_STRING * SAVEDS ASM LIB_SXNET_get_id_ulong(REG(a6, __IFACE_OR_BASE), REG(a0, SXNET * sx), REG(d0, unsigned long lzone));
ASN1_OCTET_STRING * SAVEDS ASM LIB_SXNET_get_id_INTEGER(REG(a6, __IFACE_OR_BASE), REG(a0, SXNET * sx), REG(a1, ASN1_INTEGER * zone));
AUTHORITY_KEYID * SAVEDS ASM LIB_AUTHORITY_KEYID_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_AUTHORITY_KEYID_free(REG(a6, __IFACE_OR_BASE), REG(a0, AUTHORITY_KEYID * a));
AUTHORITY_KEYID * SAVEDS ASM LIB_d2i_AUTHORITY_KEYID(REG(a6, __IFACE_OR_BASE), REG(a0, AUTHORITY_KEYID ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_AUTHORITY_KEYID(REG(a6, __IFACE_OR_BASE), REG(a0, const AUTHORITY_KEYID * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_AUTHORITY_KEYID_it(REG(a6, __IFACE_OR_BASE));
PKEY_USAGE_PERIOD * SAVEDS ASM LIB_PKEY_USAGE_PERIOD_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_PKEY_USAGE_PERIOD_free(REG(a6, __IFACE_OR_BASE), REG(a0, PKEY_USAGE_PERIOD * a));
PKEY_USAGE_PERIOD * SAVEDS ASM LIB_d2i_PKEY_USAGE_PERIOD(REG(a6, __IFACE_OR_BASE), REG(a0, PKEY_USAGE_PERIOD ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_PKEY_USAGE_PERIOD(REG(a6, __IFACE_OR_BASE), REG(a0, const PKEY_USAGE_PERIOD * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_PKEY_USAGE_PERIOD_it(REG(a6, __IFACE_OR_BASE));
GENERAL_NAME * SAVEDS ASM LIB_GENERAL_NAME_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_GENERAL_NAME_free(REG(a6, __IFACE_OR_BASE), REG(a0, GENERAL_NAME * a));
GENERAL_NAME * SAVEDS ASM LIB_d2i_GENERAL_NAME(REG(a6, __IFACE_OR_BASE), REG(a0, GENERAL_NAME ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_GENERAL_NAME(REG(a6, __IFACE_OR_BASE), REG(a0, const GENERAL_NAME * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_GENERAL_NAME_it(REG(a6, __IFACE_OR_BASE));
STACK_OF(CONF_VALUE) * SAVEDS ASM LIB_i2v_GENERAL_NAME(REG(a6, __IFACE_OR_BASE), REG(a0, X509V3_EXT_METHOD * method), REG(a1, GENERAL_NAME * gen), REG(a2, STACK_OF(CONF_VALUE) * ret));
int SAVEDS ASM LIB_GENERAL_NAME_print(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * out), REG(a1, GENERAL_NAME * gen));
GENERAL_NAMES * SAVEDS ASM LIB_GENERAL_NAMES_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_GENERAL_NAMES_free(REG(a6, __IFACE_OR_BASE), REG(a0, GENERAL_NAMES * a));
GENERAL_NAMES * SAVEDS ASM LIB_d2i_GENERAL_NAMES(REG(a6, __IFACE_OR_BASE), REG(a0, GENERAL_NAMES ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_GENERAL_NAMES(REG(a6, __IFACE_OR_BASE), REG(a0, const GENERAL_NAMES * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_GENERAL_NAMES_it(REG(a6, __IFACE_OR_BASE));
STACK_OF(CONF_VALUE) * SAVEDS ASM LIB_i2v_GENERAL_NAMES(REG(a6, __IFACE_OR_BASE), REG(a0, X509V3_EXT_METHOD * method), REG(a1, GENERAL_NAMES * gen), REG(a2, STACK_OF(CONF_VALUE) * extlist));
GENERAL_NAMES * SAVEDS ASM LIB_v2i_GENERAL_NAMES(REG(a6, __IFACE_OR_BASE), REG(a0, const X509V3_EXT_METHOD * method), REG(a1, X509V3_CTX * ctx), REG(a2, STACK_OF(CONF_VALUE) * nval));
OTHERNAME * SAVEDS ASM LIB_OTHERNAME_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_OTHERNAME_free(REG(a6, __IFACE_OR_BASE), REG(a0, OTHERNAME * a));
OTHERNAME * SAVEDS ASM LIB_d2i_OTHERNAME(REG(a6, __IFACE_OR_BASE), REG(a0, OTHERNAME ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_OTHERNAME(REG(a6, __IFACE_OR_BASE), REG(a0, const OTHERNAME * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_OTHERNAME_it(REG(a6, __IFACE_OR_BASE));
EDIPARTYNAME * SAVEDS ASM LIB_EDIPARTYNAME_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_EDIPARTYNAME_free(REG(a6, __IFACE_OR_BASE), REG(a0, EDIPARTYNAME * a));
EDIPARTYNAME * SAVEDS ASM LIB_d2i_EDIPARTYNAME(REG(a6, __IFACE_OR_BASE), REG(a0, EDIPARTYNAME ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_EDIPARTYNAME(REG(a6, __IFACE_OR_BASE), REG(a0, const EDIPARTYNAME * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_EDIPARTYNAME_it(REG(a6, __IFACE_OR_BASE));
char * SAVEDS ASM LIB_i2s_ASN1_OCTET_STRING(REG(a6, __IFACE_OR_BASE), REG(a0, X509V3_EXT_METHOD * method), REG(a1, const ASN1_OCTET_STRING * ia5));
ASN1_OCTET_STRING * SAVEDS ASM LIB_s2i_ASN1_OCTET_STRING(REG(a6, __IFACE_OR_BASE), REG(a0, X509V3_EXT_METHOD * method), REG(a1, X509V3_CTX * ctx), REG(a2, const char * str));
EXTENDED_KEY_USAGE * SAVEDS ASM LIB_EXTENDED_KEY_USAGE_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_EXTENDED_KEY_USAGE_free(REG(a6, __IFACE_OR_BASE), REG(a0, EXTENDED_KEY_USAGE * a));
EXTENDED_KEY_USAGE * SAVEDS ASM LIB_d2i_EXTENDED_KEY_USAGE(REG(a6, __IFACE_OR_BASE), REG(a0, EXTENDED_KEY_USAGE ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_EXTENDED_KEY_USAGE(REG(a6, __IFACE_OR_BASE), REG(a0, const EXTENDED_KEY_USAGE * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_EXTENDED_KEY_USAGE_it(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_i2a_ACCESS_DESCRIPTION(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, const ACCESS_DESCRIPTION * a));
CERTIFICATEPOLICIES * SAVEDS ASM LIB_CERTIFICATEPOLICIES_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_CERTIFICATEPOLICIES_free(REG(a6, __IFACE_OR_BASE), REG(a0, CERTIFICATEPOLICIES * a));
CERTIFICATEPOLICIES * SAVEDS ASM LIB_d2i_CERTIFICATEPOLICIES(REG(a6, __IFACE_OR_BASE), REG(a0, CERTIFICATEPOLICIES ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_CERTIFICATEPOLICIES(REG(a6, __IFACE_OR_BASE), REG(a0, const CERTIFICATEPOLICIES * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_CERTIFICATEPOLICIES_it(REG(a6, __IFACE_OR_BASE));
POLICYINFO * SAVEDS ASM LIB_POLICYINFO_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_POLICYINFO_free(REG(a6, __IFACE_OR_BASE), REG(a0, POLICYINFO * a));
POLICYINFO * SAVEDS ASM LIB_d2i_POLICYINFO(REG(a6, __IFACE_OR_BASE), REG(a0, POLICYINFO ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_POLICYINFO(REG(a6, __IFACE_OR_BASE), REG(a0, const POLICYINFO * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_POLICYINFO_it(REG(a6, __IFACE_OR_BASE));
POLICYQUALINFO * SAVEDS ASM LIB_POLICYQUALINFO_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_POLICYQUALINFO_free(REG(a6, __IFACE_OR_BASE), REG(a0, POLICYQUALINFO * a));
POLICYQUALINFO * SAVEDS ASM LIB_d2i_POLICYQUALINFO(REG(a6, __IFACE_OR_BASE), REG(a0, POLICYQUALINFO ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_POLICYQUALINFO(REG(a6, __IFACE_OR_BASE), REG(a0, const POLICYQUALINFO * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_POLICYQUALINFO_it(REG(a6, __IFACE_OR_BASE));
USERNOTICE * SAVEDS ASM LIB_USERNOTICE_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_USERNOTICE_free(REG(a6, __IFACE_OR_BASE), REG(a0, USERNOTICE * a));
USERNOTICE * SAVEDS ASM LIB_d2i_USERNOTICE(REG(a6, __IFACE_OR_BASE), REG(a0, USERNOTICE ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_USERNOTICE(REG(a6, __IFACE_OR_BASE), REG(a0, const USERNOTICE * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_USERNOTICE_it(REG(a6, __IFACE_OR_BASE));
NOTICEREF * SAVEDS ASM LIB_NOTICEREF_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_NOTICEREF_free(REG(a6, __IFACE_OR_BASE), REG(a0, NOTICEREF * a));
NOTICEREF * SAVEDS ASM LIB_d2i_NOTICEREF(REG(a6, __IFACE_OR_BASE), REG(a0, NOTICEREF ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_NOTICEREF(REG(a6, __IFACE_OR_BASE), REG(a0, const NOTICEREF * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_NOTICEREF_it(REG(a6, __IFACE_OR_BASE));
CRL_DIST_POINTS * SAVEDS ASM LIB_CRL_DIST_POINTS_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_CRL_DIST_POINTS_free(REG(a6, __IFACE_OR_BASE), REG(a0, CRL_DIST_POINTS * a));
CRL_DIST_POINTS * SAVEDS ASM LIB_d2i_CRL_DIST_POINTS(REG(a6, __IFACE_OR_BASE), REG(a0, CRL_DIST_POINTS ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_CRL_DIST_POINTS(REG(a6, __IFACE_OR_BASE), REG(a0, const CRL_DIST_POINTS * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_CRL_DIST_POINTS_it(REG(a6, __IFACE_OR_BASE));
DIST_POINT * SAVEDS ASM LIB_DIST_POINT_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_DIST_POINT_free(REG(a6, __IFACE_OR_BASE), REG(a0, DIST_POINT * a));
DIST_POINT * SAVEDS ASM LIB_d2i_DIST_POINT(REG(a6, __IFACE_OR_BASE), REG(a0, DIST_POINT ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_DIST_POINT(REG(a6, __IFACE_OR_BASE), REG(a0, const DIST_POINT * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_DIST_POINT_it(REG(a6, __IFACE_OR_BASE));
DIST_POINT_NAME * SAVEDS ASM LIB_DIST_POINT_NAME_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_DIST_POINT_NAME_free(REG(a6, __IFACE_OR_BASE), REG(a0, DIST_POINT_NAME * a));
DIST_POINT_NAME * SAVEDS ASM LIB_d2i_DIST_POINT_NAME(REG(a6, __IFACE_OR_BASE), REG(a0, DIST_POINT_NAME ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_DIST_POINT_NAME(REG(a6, __IFACE_OR_BASE), REG(a0, const DIST_POINT_NAME * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_DIST_POINT_NAME_it(REG(a6, __IFACE_OR_BASE));
ACCESS_DESCRIPTION * SAVEDS ASM LIB_ACCESS_DESCRIPTION_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_ACCESS_DESCRIPTION_free(REG(a6, __IFACE_OR_BASE), REG(a0, ACCESS_DESCRIPTION * a));
ACCESS_DESCRIPTION * SAVEDS ASM LIB_d2i_ACCESS_DESCRIPTION(REG(a6, __IFACE_OR_BASE), REG(a0, ACCESS_DESCRIPTION ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_ACCESS_DESCRIPTION(REG(a6, __IFACE_OR_BASE), REG(a0, const ACCESS_DESCRIPTION * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_ACCESS_DESCRIPTION_it(REG(a6, __IFACE_OR_BASE));
AUTHORITY_INFO_ACCESS * SAVEDS ASM LIB_AUTHORITY_INFO_ACCESS_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_AUTHORITY_INFO_ACCESS_free(REG(a6, __IFACE_OR_BASE), REG(a0, AUTHORITY_INFO_ACCESS * a));
AUTHORITY_INFO_ACCESS * SAVEDS ASM LIB_d2i_AUTHORITY_INFO_ACCESS(REG(a6, __IFACE_OR_BASE), REG(a0, AUTHORITY_INFO_ACCESS ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_AUTHORITY_INFO_ACCESS(REG(a6, __IFACE_OR_BASE), REG(a0, const AUTHORITY_INFO_ACCESS * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_AUTHORITY_INFO_ACCESS_it(REG(a6, __IFACE_OR_BASE));
GENERAL_NAME * SAVEDS ASM LIB_v2i_GENERAL_NAME(REG(a6, __IFACE_OR_BASE), REG(a0, const X509V3_EXT_METHOD * method), REG(a1, X509V3_CTX * ctx), REG(a2, CONF_VALUE * cnf));
void SAVEDS ASM LIB_X509V3_conf_free(REG(a6, __IFACE_OR_BASE), REG(a0, CONF_VALUE * val));
X509_EXTENSION * SAVEDS ASM LIB_X509V3_EXT_nconf_nid(REG(a6, __IFACE_OR_BASE), REG(a0, CONF * conf), REG(a1, X509V3_CTX * ctx), REG(d0, int ext_nid), REG(a2, const char * value));
X509_EXTENSION * SAVEDS ASM LIB_X509V3_EXT_nconf(REG(a6, __IFACE_OR_BASE), REG(a0, CONF * conf), REG(a1, X509V3_CTX * ctx), REG(a2, const char * name), REG(a3, const char * value));
int SAVEDS ASM LIB_X509V3_EXT_add_nconf_sk(REG(a6, __IFACE_OR_BASE), REG(a0, CONF * conf), REG(a1, X509V3_CTX * ctx), REG(a2, const char * section), REG(a3, STACK_OF(X509_EXTENSION) ** sk));
int SAVEDS ASM LIB_X509V3_EXT_add_nconf(REG(a6, __IFACE_OR_BASE), REG(a0, CONF * conf), REG(a1, X509V3_CTX * ctx), REG(a2, const char * section), REG(a3, X509 * cert));
int SAVEDS ASM LIB_X509V3_EXT_REQ_add_nconf(REG(a6, __IFACE_OR_BASE), REG(a0, CONF * conf), REG(a1, X509V3_CTX * ctx), REG(a2, const char * section), REG(a3, X509_REQ * req));
int SAVEDS ASM LIB_X509V3_EXT_CRL_add_nconf(REG(a6, __IFACE_OR_BASE), REG(a0, CONF * conf), REG(a1, X509V3_CTX * ctx), REG(a2, const char * section), REG(a3, X509_CRL * crl));
X509_EXTENSION * SAVEDS ASM LIB_X509V3_EXT_conf_nid(REG(a6, __IFACE_OR_BASE), REG(a0, LHASH_OF(CONF_VALUE) * conf), REG(a1, X509V3_CTX * ctx), REG(d0, int ext_nid), REG(a2, const char * value));
X509_EXTENSION * SAVEDS ASM LIB_X509V3_EXT_conf(REG(a6, __IFACE_OR_BASE), REG(a0, LHASH_OF(CONF_VALUE) * conf), REG(a1, X509V3_CTX * ctx), REG(a2, const char * name), REG(a3, const char * value));
int SAVEDS ASM LIB_X509V3_EXT_add_conf(REG(a6, __IFACE_OR_BASE), REG(a0, LHASH_OF(CONF_VALUE) * conf), REG(a1, X509V3_CTX * ctx), REG(a2, const char * section), REG(a3, X509 * cert));
int SAVEDS ASM LIB_X509V3_EXT_REQ_add_conf(REG(a6, __IFACE_OR_BASE), REG(a0, LHASH_OF(CONF_VALUE) * conf), REG(a1, X509V3_CTX * ctx), REG(a2, const char * section), REG(a3, X509_REQ * req));
int SAVEDS ASM LIB_X509V3_EXT_CRL_add_conf(REG(a6, __IFACE_OR_BASE), REG(a0, LHASH_OF(CONF_VALUE) * conf), REG(a1, X509V3_CTX * ctx), REG(a2, const char * section), REG(a3, X509_CRL * crl));
int SAVEDS ASM LIB_X509V3_add_value_bool_nf(REG(a6, __IFACE_OR_BASE), REG(a0, const char * name), REG(d0, int asn1_bool), REG(a1, STACK_OF(CONF_VALUE) ** extlist));
int SAVEDS ASM LIB_X509V3_get_value_bool(REG(a6, __IFACE_OR_BASE), REG(a0, const CONF_VALUE * value), REG(a1, int * asn1_bool));
int SAVEDS ASM LIB_X509V3_get_value_int(REG(a6, __IFACE_OR_BASE), REG(a0, const CONF_VALUE * value), REG(a1, ASN1_INTEGER ** aint));
void SAVEDS ASM LIB_X509V3_set_nconf(REG(a6, __IFACE_OR_BASE), REG(a0, X509V3_CTX * ctx), REG(a1, CONF * conf));
void SAVEDS ASM LIB_X509V3_set_conf_lhash(REG(a6, __IFACE_OR_BASE), REG(a0, X509V3_CTX * ctx), REG(a1, LHASH_OF(CONF_VALUE) * lhash));
char * SAVEDS ASM LIB_X509V3_get_string(REG(a6, __IFACE_OR_BASE), REG(a0, X509V3_CTX * ctx), REG(a1, const char * name), REG(a2, const char * section));
STACK_OF(CONF_VALUE) * SAVEDS ASM LIB_X509V3_get_section(REG(a6, __IFACE_OR_BASE), REG(a0, X509V3_CTX * ctx), REG(a1, const char * section));
void SAVEDS ASM LIB_X509V3_string_free(REG(a6, __IFACE_OR_BASE), REG(a0, X509V3_CTX * ctx), REG(a1, char * str));
void SAVEDS ASM LIB_X509V3_section_free(REG(a6, __IFACE_OR_BASE), REG(a0, X509V3_CTX * ctx), REG(a1, STACK_OF(CONF_VALUE) * section));
void SAVEDS ASM LIB_X509V3_set_ctx(REG(a6, __IFACE_OR_BASE), REG(a0, X509V3_CTX * ctx), REG(a1, X509 * issuer), REG(a2, X509 * subject), REG(a3, X509_REQ * req), REG(d0, X509_CRL * crl), REG(d1, int flags));
int SAVEDS ASM LIB_X509V3_add_value(REG(a6, __IFACE_OR_BASE), REG(a0, const char * name), REG(a1, const char * value), REG(a2, STACK_OF(CONF_VALUE) ** extlist));
int SAVEDS ASM LIB_X509V3_add_value_uchar(REG(a6, __IFACE_OR_BASE), REG(a0, const char * name), REG(a1, const unsigned char * value), REG(a2, STACK_OF(CONF_VALUE) ** extlist));
int SAVEDS ASM LIB_X509V3_add_value_bool(REG(a6, __IFACE_OR_BASE), REG(a0, const char * name), REG(d0, int asn1_bool), REG(a1, STACK_OF(CONF_VALUE) ** extlist));
int SAVEDS ASM LIB_X509V3_add_value_int(REG(a6, __IFACE_OR_BASE), REG(a0, const char * name), REG(a1, const ASN1_INTEGER * aint), REG(a2, STACK_OF(CONF_VALUE) ** extlist));
char * SAVEDS ASM LIB_i2s_ASN1_INTEGER(REG(a6, __IFACE_OR_BASE), REG(a0, X509V3_EXT_METHOD * meth), REG(a1, const ASN1_INTEGER * aint));
ASN1_INTEGER * SAVEDS ASM LIB_s2i_ASN1_INTEGER(REG(a6, __IFACE_OR_BASE), REG(a0, X509V3_EXT_METHOD * meth), REG(a1, const char * value));
char * SAVEDS ASM LIB_i2s_ASN1_ENUMERATED(REG(a6, __IFACE_OR_BASE), REG(a0, X509V3_EXT_METHOD * meth), REG(a1, const ASN1_ENUMERATED * aint));
char * SAVEDS ASM LIB_i2s_ASN1_ENUMERATED_TABLE(REG(a6, __IFACE_OR_BASE), REG(a0, X509V3_EXT_METHOD * meth), REG(a1, const ASN1_ENUMERATED * aint));
int SAVEDS ASM LIB_X509V3_EXT_add(REG(a6, __IFACE_OR_BASE), REG(a0, X509V3_EXT_METHOD * ext));
int SAVEDS ASM LIB_X509V3_EXT_add_list(REG(a6, __IFACE_OR_BASE), REG(a0, X509V3_EXT_METHOD * extlist));
int SAVEDS ASM LIB_X509V3_EXT_add_alias(REG(a6, __IFACE_OR_BASE), REG(d0, int nid_to), REG(d1, int nid_from));
void SAVEDS ASM LIB_X509V3_EXT_cleanup(REG(a6, __IFACE_OR_BASE));
const X509V3_EXT_METHOD * SAVEDS ASM LIB_X509V3_EXT_get(REG(a6, __IFACE_OR_BASE), REG(a0, X509_EXTENSION * ext));
const X509V3_EXT_METHOD * SAVEDS ASM LIB_X509V3_EXT_get_nid(REG(a6, __IFACE_OR_BASE), REG(d0, int nid));
int SAVEDS ASM LIB_X509V3_add_standard_extensions(REG(a6, __IFACE_OR_BASE));
STACK_OF(CONF_VALUE) * SAVEDS ASM LIB_X509V3_parse_list(REG(a6, __IFACE_OR_BASE), REG(a0, const char * line));
void * SAVEDS ASM LIB_X509V3_EXT_d2i(REG(a6, __IFACE_OR_BASE), REG(a0, X509_EXTENSION * ext));
void * SAVEDS ASM LIB_X509V3_get_d2i(REG(a6, __IFACE_OR_BASE), REG(a0, const STACK_OF(X509_EXTENSION) * x), REG(d0, int nid), REG(a1, int * crit), REG(a2, int * idx));
X509_EXTENSION * SAVEDS ASM LIB_X509V3_EXT_i2d(REG(a6, __IFACE_OR_BASE), REG(d0, int ext_nid), REG(d1, int crit), REG(a0, void * ext_struc));
int SAVEDS ASM LIB_X509V3_add1_i2d(REG(a6, __IFACE_OR_BASE), REG(a0, STACK_OF(X509_EXTENSION) ** x), REG(d0, int nid), REG(a1, void * value), REG(d1, int crit), REG(d2, unsigned long flags));
char * SAVEDS ASM LIB_OPENSSL_buf2hexstr(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * buffer), REG(d0, long len));
unsigned char * SAVEDS ASM LIB_OPENSSL_hexstr2buf(REG(a6, __IFACE_OR_BASE), REG(a0, const char * str), REG(a1, long * len));
void SAVEDS ASM LIB_X509V3_EXT_val_prn(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * out), REG(a1, STACK_OF(CONF_VALUE) * val), REG(d0, int indent), REG(d1, int ml));
int SAVEDS ASM LIB_X509V3_EXT_print(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * out), REG(a1, X509_EXTENSION * ext), REG(d0, unsigned long flag), REG(d1, int indent));
int SAVEDS ASM LIB_X509V3_extensions_print(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * out), REG(a1, const char * title), REG(a2, const STACK_OF(X509_EXTENSION) * exts), REG(d0, unsigned long flag), REG(d1, int indent));
int SAVEDS ASM LIB_X509_check_purpose(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * x), REG(d0, int id), REG(d1, int ca));
int SAVEDS ASM LIB_X509_supported_extension(REG(a6, __IFACE_OR_BASE), REG(a0, X509_EXTENSION * ex));
int SAVEDS ASM LIB_X509_PURPOSE_set(REG(a6, __IFACE_OR_BASE), REG(a0, int * p), REG(d0, int purpose));
int SAVEDS ASM LIB_X509_check_issued(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * issuer), REG(a1, X509 * subject));
int SAVEDS ASM LIB_X509_PURPOSE_get_count(REG(a6, __IFACE_OR_BASE));
X509_PURPOSE * SAVEDS ASM LIB_X509_PURPOSE_get0(REG(a6, __IFACE_OR_BASE), REG(d0, int idx));
int SAVEDS ASM LIB_X509_PURPOSE_get_by_sname(REG(a6, __IFACE_OR_BASE), REG(a0, const char * sname));
int SAVEDS ASM LIB_X509_PURPOSE_get_by_id(REG(a6, __IFACE_OR_BASE), REG(d0, int id));
int SAVEDS ASM LIB_X509_PURPOSE_add(REG(a6, __IFACE_OR_BASE), REG(d0, int id), REG(d1, int trust), REG(d2, int flags), REG(a0, int (*ck)(const X509_PURPOSE *, const X509 *, int)), REG(a1, const char * name), REG(a2, const char * sname), REG(a3, void * arg));
char * SAVEDS ASM LIB_X509_PURPOSE_get0_name(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_PURPOSE * xp));
char * SAVEDS ASM LIB_X509_PURPOSE_get0_sname(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_PURPOSE * xp));
int SAVEDS ASM LIB_X509_PURPOSE_get_trust(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_PURPOSE * xp));
void SAVEDS ASM LIB_X509_PURPOSE_cleanup(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_X509_PURPOSE_get_id(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_PURPOSE * a));
STACK_OF(OPENSSL_STRING) * SAVEDS ASM LIB_X509_get1_email(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * x));
STACK_OF(OPENSSL_STRING) * SAVEDS ASM LIB_X509_REQ_get1_email(REG(a6, __IFACE_OR_BASE), REG(a0, X509_REQ * x));
void SAVEDS ASM LIB_X509_email_free(REG(a6, __IFACE_OR_BASE), REG(a0, STACK_OF(OPENSSL_STRING) * sk));
int SAVEDS ASM LIB_ERR_load_X509V3_strings(REG(a6, __IFACE_OR_BASE));
const char * SAVEDS ASM LIB_AES_options(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_AES_set_encrypt_key(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * userKey), REG(d0, const int bits), REG(a1, AES_KEY * key));
int SAVEDS ASM LIB_AES_set_decrypt_key(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * userKey), REG(d0, const int bits), REG(a1, AES_KEY * key));
void SAVEDS ASM LIB_AES_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(a2, const AES_KEY * key));
void SAVEDS ASM LIB_AES_decrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(a2, const AES_KEY * key));
void SAVEDS ASM LIB_AES_ecb_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(a2, const AES_KEY * key), REG(d0, const int enc));
void SAVEDS ASM LIB_AES_cbc_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(d0, size_t length), REG(a2, const AES_KEY * key), REG(a3, unsigned char * ivec), REG(d1, const int enc));
void SAVEDS ASM LIB_AES_cfb128_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(d0, size_t length), REG(a2, const AES_KEY * key), REG(a3, unsigned char * ivec), REG(d1, int * num), REG(d2, const int enc));
void SAVEDS ASM LIB_AES_cfb1_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(d0, size_t length), REG(a2, const AES_KEY * key), REG(a3, unsigned char * ivec), REG(d1, int * num), REG(d2, const int enc));
void SAVEDS ASM LIB_AES_cfb8_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(d0, size_t length), REG(a2, const AES_KEY * key), REG(a3, unsigned char * ivec), REG(d1, int * num), REG(d2, const int enc));
void SAVEDS ASM LIB_AES_ofb128_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(d0, size_t length), REG(a2, const AES_KEY * key), REG(a3, unsigned char * ivec), REG(d1, int * num));
void SAVEDS ASM LIB_BF_set_key(REG(a6, __IFACE_OR_BASE), REG(a0, BF_KEY * key), REG(d0, int len), REG(a1, const unsigned char * data));
void SAVEDS ASM LIB_BF_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, BF_LONG * data), REG(a1, const BF_KEY * key));
void SAVEDS ASM LIB_BF_decrypt(REG(a6, __IFACE_OR_BASE), REG(a0, BF_LONG * data), REG(a1, const BF_KEY * key));
void SAVEDS ASM LIB_BF_ecb_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(a2, const BF_KEY * key), REG(d0, int enc));
void SAVEDS ASM LIB_BF_cbc_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(d0, long length), REG(a2, const BF_KEY * schedule), REG(a3, unsigned char * ivec), REG(d1, int enc));
void SAVEDS ASM LIB_BF_cfb64_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(d0, long length), REG(a2, const BF_KEY * schedule), REG(a3, unsigned char * ivec), REG(d1, int * num), REG(d2, int enc));
void SAVEDS ASM LIB_BF_ofb64_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(d0, long length), REG(a2, const BF_KEY * schedule), REG(a3, unsigned char * ivec), REG(d1, int * num));
const char * SAVEDS ASM LIB_BF_options(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_CAST_set_key(REG(a6, __IFACE_OR_BASE), REG(a0, CAST_KEY * key), REG(d0, int len), REG(a1, const unsigned char * data));
void SAVEDS ASM LIB_CAST_ecb_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(a2, const CAST_KEY * key), REG(d0, int enc));
void SAVEDS ASM LIB_CAST_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, CAST_LONG * data), REG(a1, const CAST_KEY * key));
void SAVEDS ASM LIB_CAST_decrypt(REG(a6, __IFACE_OR_BASE), REG(a0, CAST_LONG * data), REG(a1, const CAST_KEY * key));
void SAVEDS ASM LIB_CAST_cbc_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(d0, long length), REG(a2, const CAST_KEY * ks), REG(a3, unsigned char * iv), REG(d1, int enc));
void SAVEDS ASM LIB_CAST_cfb64_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(d0, long length), REG(a2, const CAST_KEY * schedule), REG(a3, unsigned char * ivec), REG(d1, int * num), REG(d2, int enc));
void SAVEDS ASM LIB_CAST_ofb64_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(d0, long length), REG(a2, const CAST_KEY * schedule), REG(a3, unsigned char * ivec), REG(d1, int * num));
const char * SAVEDS ASM LIB_DES_options(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_DES_ecb3_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const_DES_cblock * input), REG(a1, DES_cblock * output), REG(a2, DES_key_schedule * ks1), REG(a3, DES_key_schedule * ks2), REG(d0, DES_key_schedule * ks3), REG(d1, int enc));
DES_LONG SAVEDS ASM LIB_DES_cbc_cksum(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * input), REG(a1, DES_cblock * output), REG(d0, long length), REG(a2, DES_key_schedule * schedule), REG(a3, const_DES_cblock * ivec));
void SAVEDS ASM LIB_DES_cbc_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * input), REG(a1, unsigned char * output), REG(d0, long length), REG(a2, DES_key_schedule * schedule), REG(a3, DES_cblock * ivec), REG(d1, int enc));
void SAVEDS ASM LIB_DES_ncbc_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * input), REG(a1, unsigned char * output), REG(d0, long length), REG(a2, DES_key_schedule * schedule), REG(a3, DES_cblock * ivec), REG(d1, int enc));
void SAVEDS ASM LIB_DES_xcbc_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * input), REG(a1, unsigned char * output), REG(d0, long length), REG(a2, DES_key_schedule * schedule), REG(a3, DES_cblock * ivec), REG(d1, const_DES_cblock * inw), REG(d2, const_DES_cblock * outw), REG(d3, int enc));
void SAVEDS ASM LIB_DES_cfb_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(d0, int numbits), REG(d1, long length), REG(a2, DES_key_schedule * schedule), REG(a3, DES_cblock * ivec), REG(d2, int enc));
void SAVEDS ASM LIB_DES_ecb_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const_DES_cblock * input), REG(a1, DES_cblock * output), REG(a2, DES_key_schedule * ks), REG(d0, int enc));
void SAVEDS ASM LIB_DES_encrypt1(REG(a6, __IFACE_OR_BASE), REG(a0, DES_LONG * data), REG(a1, DES_key_schedule * ks), REG(d0, int enc));
void SAVEDS ASM LIB_DES_encrypt2(REG(a6, __IFACE_OR_BASE), REG(a0, DES_LONG * data), REG(a1, DES_key_schedule * ks), REG(d0, int enc));
void SAVEDS ASM LIB_DES_encrypt3(REG(a6, __IFACE_OR_BASE), REG(a0, DES_LONG * data), REG(a1, DES_key_schedule * ks1), REG(a2, DES_key_schedule * ks2), REG(a3, DES_key_schedule * ks3));
void SAVEDS ASM LIB_DES_decrypt3(REG(a6, __IFACE_OR_BASE), REG(a0, DES_LONG * data), REG(a1, DES_key_schedule * ks1), REG(a2, DES_key_schedule * ks2), REG(a3, DES_key_schedule * ks3));
void SAVEDS ASM LIB_DES_ede3_cbc_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * input), REG(a1, unsigned char * output), REG(d0, long length), REG(a2, DES_key_schedule * ks1), REG(a3, DES_key_schedule * ks2), REG(d1, DES_key_schedule * ks3), REG(d2, DES_cblock * ivec), REG(d3, int enc));
void SAVEDS ASM LIB_DES_ede3_cfb64_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(d0, long length), REG(a2, DES_key_schedule * ks1), REG(a3, DES_key_schedule * ks2), REG(d1, DES_key_schedule * ks3), REG(d2, DES_cblock * ivec), REG(d3, int * num), REG(d4, int enc));
void SAVEDS ASM LIB_DES_ede3_cfb_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(d0, int numbits), REG(d1, long length), REG(a2, DES_key_schedule * ks1), REG(a3, DES_key_schedule * ks2), REG(d2, DES_key_schedule * ks3), REG(d3, DES_cblock * ivec), REG(d4, int enc));
void SAVEDS ASM LIB_DES_ede3_ofb64_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(d0, long length), REG(a2, DES_key_schedule * ks1), REG(a3, DES_key_schedule * ks2), REG(d1, DES_key_schedule * ks3), REG(d2, DES_cblock * ivec), REG(d3, int * num));
char * SAVEDS ASM LIB_DES_fcrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const char * buf), REG(a1, const char * salt), REG(a2, char * ret));
char * SAVEDS ASM LIB_DES_crypt(REG(a6, __IFACE_OR_BASE), REG(a0, const char * buf), REG(a1, const char * salt));
void SAVEDS ASM LIB_DES_ofb_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(d0, int numbits), REG(d1, long length), REG(a2, DES_key_schedule * schedule), REG(a3, DES_cblock * ivec));
void SAVEDS ASM LIB_DES_pcbc_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * input), REG(a1, unsigned char * output), REG(d0, long length), REG(a2, DES_key_schedule * schedule), REG(a3, DES_cblock * ivec), REG(d1, int enc));
DES_LONG SAVEDS ASM LIB_DES_quad_cksum(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * input), REG(a1, DES_cblock * output), REG(d0, long length), REG(d1, int out_count), REG(a2, DES_cblock * seed));
int SAVEDS ASM LIB_DES_random_key(REG(a6, __IFACE_OR_BASE), REG(a0, DES_cblock * ret));
void SAVEDS ASM LIB_DES_set_odd_parity(REG(a6, __IFACE_OR_BASE), REG(a0, DES_cblock * key));
int SAVEDS ASM LIB_DES_check_key_parity(REG(a6, __IFACE_OR_BASE), REG(a0, const_DES_cblock * key));
int SAVEDS ASM LIB_DES_is_weak_key(REG(a6, __IFACE_OR_BASE), REG(a0, const_DES_cblock * key));
int SAVEDS ASM LIB_DES_set_key(REG(a6, __IFACE_OR_BASE), REG(a0, const_DES_cblock * key), REG(a1, DES_key_schedule * schedule));
int SAVEDS ASM LIB_DES_key_sched(REG(a6, __IFACE_OR_BASE), REG(a0, const_DES_cblock * key), REG(a1, DES_key_schedule * schedule));
int SAVEDS ASM LIB_DES_set_key_checked(REG(a6, __IFACE_OR_BASE), REG(a0, const_DES_cblock * key), REG(a1, DES_key_schedule * schedule));
void SAVEDS ASM LIB_DES_set_key_unchecked(REG(a6, __IFACE_OR_BASE), REG(a0, const_DES_cblock * key), REG(a1, DES_key_schedule * schedule));
void SAVEDS ASM LIB_DES_string_to_key(REG(a6, __IFACE_OR_BASE), REG(a0, const char * str), REG(a1, DES_cblock * key));
void SAVEDS ASM LIB_DES_string_to_2keys(REG(a6, __IFACE_OR_BASE), REG(a0, const char * str), REG(a1, DES_cblock * key1), REG(a2, DES_cblock * key2));
void SAVEDS ASM LIB_DES_cfb64_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(d0, long length), REG(a2, DES_key_schedule * schedule), REG(a3, DES_cblock * ivec), REG(d1, int * num), REG(d2, int enc));
void SAVEDS ASM LIB_DES_ofb64_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(d0, long length), REG(a2, DES_key_schedule * schedule), REG(a3, DES_cblock * ivec), REG(d1, int * num));
const DH_METHOD * SAVEDS ASM LIB_DH_OpenSSL(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_DH_set_default_method(REG(a6, __IFACE_OR_BASE), REG(a0, const DH_METHOD * meth));
const DH_METHOD * SAVEDS ASM LIB_DH_get_default_method(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_DH_set_method(REG(a6, __IFACE_OR_BASE), REG(a0, DH * dh), REG(a1, const DH_METHOD * meth));
DH * SAVEDS ASM LIB_DH_new_method(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * engine));
DH * SAVEDS ASM LIB_DH_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_DH_free(REG(a6, __IFACE_OR_BASE), REG(a0, DH * dh));
int SAVEDS ASM LIB_DH_up_ref(REG(a6, __IFACE_OR_BASE), REG(a0, DH * dh));
int SAVEDS ASM LIB_DH_size(REG(a6, __IFACE_OR_BASE), REG(a0, const DH * dh));
int SAVEDS ASM LIB_OBSOLETE_DH_get_ex_new_index(REG(a6, __IFACE_OR_BASE), REG(d0, long argl), REG(a0, void * argp), REG(a1, CRYPTO_EX_new * new_func), REG(a2, CRYPTO_EX_dup * dup_func), REG(a3, CRYPTO_EX_free * free_func));
int SAVEDS ASM LIB_DH_set_ex_data(REG(a6, __IFACE_OR_BASE), REG(a0, DH * d), REG(d0, int idx), REG(a1, void * arg));
void * SAVEDS ASM LIB_DH_get_ex_data(REG(a6, __IFACE_OR_BASE), REG(a0, const DH * d), REG(d0, int idx));
DH * SAVEDS ASM LIB_DH_generate_parameters(REG(a6, __IFACE_OR_BASE), REG(d0, int prime_len), REG(d1, int generator), REG(a0, void (*callback)(int, int, void *)), REG(a1, void * cb_arg));
int SAVEDS ASM LIB_DH_check(REG(a6, __IFACE_OR_BASE), REG(a0, const DH * dh), REG(a1, int * codes));
int SAVEDS ASM LIB_DH_generate_key(REG(a6, __IFACE_OR_BASE), REG(a0, DH * dh));
int SAVEDS ASM LIB_DH_compute_key(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned char * key), REG(a1, const BIGNUM * pub_key), REG(a2, DH * dh));
DH * SAVEDS ASM LIB_d2i_DHparams(REG(a6, __IFACE_OR_BASE), REG(a0, DH ** a), REG(a1, const unsigned char ** pp), REG(d0, long length));
int SAVEDS ASM LIB_i2d_DHparams(REG(a6, __IFACE_OR_BASE), REG(a0, const DH * a), REG(a1, unsigned char ** pp));
int SAVEDS ASM LIB_DHparams_print(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, const DH * x));
int SAVEDS ASM LIB_ERR_load_DH_strings(REG(a6, __IFACE_OR_BASE));
DSA_SIG * SAVEDS ASM LIB_DSA_SIG_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_DSA_SIG_free(REG(a6, __IFACE_OR_BASE), REG(a0, DSA_SIG * a));
int SAVEDS ASM LIB_i2d_DSA_SIG(REG(a6, __IFACE_OR_BASE), REG(a0, const DSA_SIG * a), REG(a1, unsigned char ** pp));
DSA_SIG * SAVEDS ASM LIB_d2i_DSA_SIG(REG(a6, __IFACE_OR_BASE), REG(a0, DSA_SIG ** v), REG(a1, const unsigned char ** pp), REG(d0, long length));
DSA_SIG * SAVEDS ASM LIB_DSA_do_sign(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * dgst), REG(d0, int dlen), REG(a1, DSA * dsa));
int SAVEDS ASM LIB_DSA_do_verify(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * dgst), REG(d0, int dgst_len), REG(a1, DSA_SIG * sig), REG(a2, DSA * dsa));
const DSA_METHOD * SAVEDS ASM LIB_DSA_OpenSSL(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_DSA_set_default_method(REG(a6, __IFACE_OR_BASE), REG(a0, const DSA_METHOD * a));
const DSA_METHOD * SAVEDS ASM LIB_DSA_get_default_method(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_DSA_set_method(REG(a6, __IFACE_OR_BASE), REG(a0, DSA * dsa), REG(a1, const DSA_METHOD * a));
DSA * SAVEDS ASM LIB_DSA_new(REG(a6, __IFACE_OR_BASE));
DSA * SAVEDS ASM LIB_DSA_new_method(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * engine));
void SAVEDS ASM LIB_DSA_free(REG(a6, __IFACE_OR_BASE), REG(a0, DSA * r));
int SAVEDS ASM LIB_DSA_up_ref(REG(a6, __IFACE_OR_BASE), REG(a0, DSA * r));
int SAVEDS ASM LIB_DSA_size(REG(a6, __IFACE_OR_BASE), REG(a0, const DSA * a));
int SAVEDS ASM LIB_DSA_sign_setup(REG(a6, __IFACE_OR_BASE), REG(a0, DSA * dsa), REG(a1, BN_CTX * ctx_in), REG(a2, BIGNUM ** kinvp), REG(a3, BIGNUM ** rp));
int SAVEDS ASM LIB_DSA_sign(REG(a6, __IFACE_OR_BASE), REG(d0, int type), REG(a0, const unsigned char * dgst), REG(d1, int dlen), REG(a1, unsigned char * sig), REG(a2, unsigned int * siglen), REG(a3, DSA * dsa));
int SAVEDS ASM LIB_DSA_verify(REG(a6, __IFACE_OR_BASE), REG(d0, int type), REG(a0, const unsigned char * dgst), REG(d1, int dgst_len), REG(a1, const unsigned char * sigbuf), REG(d2, int siglen), REG(a2, DSA * dsa));
int SAVEDS ASM LIB_OBSOLETE_DSA_get_ex_new_index(REG(a6, __IFACE_OR_BASE), REG(d0, long argl), REG(a0, void * argp), REG(a1, CRYPTO_EX_new * new_func), REG(a2, CRYPTO_EX_dup * dup_func), REG(a3, CRYPTO_EX_free * free_func));
int SAVEDS ASM LIB_DSA_set_ex_data(REG(a6, __IFACE_OR_BASE), REG(a0, DSA * d), REG(d0, int idx), REG(a1, void * arg));
void * SAVEDS ASM LIB_DSA_get_ex_data(REG(a6, __IFACE_OR_BASE), REG(a0, const DSA * d), REG(d0, int idx));
DSA * SAVEDS ASM LIB_d2i_DSAPublicKey(REG(a6, __IFACE_OR_BASE), REG(a0, DSA ** a), REG(a1, const unsigned char ** pp), REG(d0, long length));
DSA * SAVEDS ASM LIB_d2i_DSAPrivateKey(REG(a6, __IFACE_OR_BASE), REG(a0, DSA ** a), REG(a1, const unsigned char ** pp), REG(d0, long length));
DSA * SAVEDS ASM LIB_d2i_DSAparams(REG(a6, __IFACE_OR_BASE), REG(a0, DSA ** a), REG(a1, const unsigned char ** pp), REG(d0, long length));
DSA * SAVEDS ASM LIB_DSA_generate_parameters(REG(a6, __IFACE_OR_BASE), REG(d0, int bits), REG(a0, unsigned char * seed), REG(d1, int seed_len), REG(a1, int * counter_ret), REG(a2, unsigned long * h_ret), REG(a3, void (*callback)(int, int, void *)), REG(d2, void * cb_arg));
int SAVEDS ASM LIB_DSA_generate_key(REG(a6, __IFACE_OR_BASE), REG(a0, DSA * a));
int SAVEDS ASM LIB_i2d_DSAPublicKey(REG(a6, __IFACE_OR_BASE), REG(a0, const DSA * a), REG(a1, unsigned char ** pp));
int SAVEDS ASM LIB_i2d_DSAPrivateKey(REG(a6, __IFACE_OR_BASE), REG(a0, const DSA * a), REG(a1, unsigned char ** pp));
int SAVEDS ASM LIB_i2d_DSAparams(REG(a6, __IFACE_OR_BASE), REG(a0, const DSA * a), REG(a1, unsigned char ** pp));
int SAVEDS ASM LIB_DSAparams_print(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, const DSA * x));
int SAVEDS ASM LIB_DSA_print(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, const DSA * x), REG(d0, int off));
DH * SAVEDS ASM LIB_DSA_dup_DH(REG(a6, __IFACE_OR_BASE), REG(a0, const DSA * r));
int SAVEDS ASM LIB_ERR_load_DSA_strings(REG(a6, __IFACE_OR_BASE));
const char * SAVEDS ASM LIB_IDEA_options(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_IDEA_ecb_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(a2, IDEA_KEY_SCHEDULE * ks));
void SAVEDS ASM LIB_IDEA_set_encrypt_key(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * key), REG(a1, IDEA_KEY_SCHEDULE * ks));
void SAVEDS ASM LIB_IDEA_set_decrypt_key(REG(a6, __IFACE_OR_BASE), REG(a0, IDEA_KEY_SCHEDULE * ek), REG(a1, IDEA_KEY_SCHEDULE * dk));
void SAVEDS ASM LIB_IDEA_cbc_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(d0, long length), REG(a2, IDEA_KEY_SCHEDULE * ks), REG(a3, unsigned char * iv), REG(d1, int enc));
void SAVEDS ASM LIB_IDEA_cfb64_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(d0, long length), REG(a2, IDEA_KEY_SCHEDULE * ks), REG(a3, unsigned char * iv), REG(d1, int * num), REG(d2, int enc));
void SAVEDS ASM LIB_IDEA_ofb64_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(d0, long length), REG(a2, IDEA_KEY_SCHEDULE * ks), REG(a3, unsigned char * iv), REG(d1, int * num));
void SAVEDS ASM LIB_IDEA_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned long * in), REG(a1, IDEA_KEY_SCHEDULE * ks));
const char * SAVEDS ASM LIB_MD2_options(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_MD2_Init(REG(a6, __IFACE_OR_BASE), REG(a0, MD2_CTX * c));
int SAVEDS ASM LIB_MD2_Update(REG(a6, __IFACE_OR_BASE), REG(a0, MD2_CTX * c), REG(a1, const unsigned char * data), REG(d0, size_t len));
int SAVEDS ASM LIB_MD2_Final(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned char * md), REG(a1, MD2_CTX * c));
unsigned char * SAVEDS ASM LIB_MD2(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * d), REG(d0, size_t n), REG(a1, unsigned char * md));
int SAVEDS ASM LIB_MD4_Init(REG(a6, __IFACE_OR_BASE), REG(a0, MD4_CTX * c));
int SAVEDS ASM LIB_MD4_Update(REG(a6, __IFACE_OR_BASE), REG(a0, MD4_CTX * c), REG(a1, const void * data), REG(d0, size_t len));
int SAVEDS ASM LIB_MD4_Final(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned char * md), REG(a1, MD4_CTX * c));
unsigned char * SAVEDS ASM LIB_MD4(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * d), REG(d0, size_t n), REG(a1, unsigned char * md));
void SAVEDS ASM LIB_MD4_Transform(REG(a6, __IFACE_OR_BASE), REG(a0, MD4_CTX * c), REG(a1, const unsigned char * b));
int SAVEDS ASM LIB_MD5_Init(REG(a6, __IFACE_OR_BASE), REG(a0, MD5_CTX * c));
int SAVEDS ASM LIB_MD5_Update(REG(a6, __IFACE_OR_BASE), REG(a0, MD5_CTX * c), REG(a1, const void * data), REG(d0, size_t len));
int SAVEDS ASM LIB_MD5_Final(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned char * md), REG(a1, MD5_CTX * c));
unsigned char * SAVEDS ASM LIB_MD5(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * d), REG(d0, size_t n), REG(a1, unsigned char * md));
void SAVEDS ASM LIB_MD5_Transform(REG(a6, __IFACE_OR_BASE), REG(a0, MD5_CTX * c), REG(a1, const unsigned char * b));
int SAVEDS ASM LIB_MDC2_Init(REG(a6, __IFACE_OR_BASE), REG(a0, MDC2_CTX * c));
int SAVEDS ASM LIB_MDC2_Update(REG(a6, __IFACE_OR_BASE), REG(a0, MDC2_CTX * c), REG(a1, const unsigned char * data), REG(d0, size_t len));
int SAVEDS ASM LIB_MDC2_Final(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned char * md), REG(a1, MDC2_CTX * c));
unsigned char * SAVEDS ASM LIB_MDC2(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * d), REG(d0, size_t n), REG(a1, unsigned char * md));
void SAVEDS ASM LIB_RC2_set_key(REG(a6, __IFACE_OR_BASE), REG(a0, RC2_KEY * key), REG(d0, int len), REG(a1, const unsigned char * data), REG(d1, int bits));
void SAVEDS ASM LIB_RC2_ecb_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(a2, RC2_KEY * key), REG(d0, int enc));
void SAVEDS ASM LIB_RC2_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned long * data), REG(a1, RC2_KEY * key));
void SAVEDS ASM LIB_RC2_decrypt(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned long * data), REG(a1, RC2_KEY * key));
void SAVEDS ASM LIB_RC2_cbc_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(d0, long length), REG(a2, RC2_KEY * ks), REG(a3, unsigned char * iv), REG(d1, int enc));
void SAVEDS ASM LIB_RC2_cfb64_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(d0, long length), REG(a2, RC2_KEY * schedule), REG(a3, unsigned char * ivec), REG(d1, int * num), REG(d2, int enc));
void SAVEDS ASM LIB_RC2_ofb64_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(d0, long length), REG(a2, RC2_KEY * schedule), REG(a3, unsigned char * ivec), REG(d1, int * num));
const char * SAVEDS ASM LIB_RC4_options(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_RC4_set_key(REG(a6, __IFACE_OR_BASE), REG(a0, RC4_KEY * key), REG(d0, int len), REG(a1, const unsigned char * data));
void SAVEDS ASM LIB_RC4(REG(a6, __IFACE_OR_BASE), REG(a0, RC4_KEY * key), REG(d0, size_t len), REG(a1, const unsigned char * indata), REG(a2, unsigned char * outdata));
int SAVEDS ASM LIB_RC5_32_set_key(REG(a6, __IFACE_OR_BASE), REG(a0, RC5_32_KEY * key), REG(d0, int len), REG(a1, const unsigned char * data), REG(d1, int rounds));
void SAVEDS ASM LIB_RC5_32_ecb_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(a2, RC5_32_KEY * key), REG(d0, int enc));
void SAVEDS ASM LIB_RC5_32_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned long * data), REG(a1, RC5_32_KEY * key));
void SAVEDS ASM LIB_RC5_32_decrypt(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned long * data), REG(a1, RC5_32_KEY * key));
void SAVEDS ASM LIB_RC5_32_cbc_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(d0, long length), REG(a2, RC5_32_KEY * ks), REG(a3, unsigned char * iv), REG(d1, int enc));
void SAVEDS ASM LIB_RC5_32_cfb64_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(d0, long length), REG(a2, RC5_32_KEY * schedule), REG(a3, unsigned char * ivec), REG(d1, int * num), REG(d2, int enc));
void SAVEDS ASM LIB_RC5_32_ofb64_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(d0, long length), REG(a2, RC5_32_KEY * schedule), REG(a3, unsigned char * ivec), REG(d1, int * num));
int SAVEDS ASM LIB_RIPEMD160_Init(REG(a6, __IFACE_OR_BASE), REG(a0, RIPEMD160_CTX * c));
int SAVEDS ASM LIB_RIPEMD160_Update(REG(a6, __IFACE_OR_BASE), REG(a0, RIPEMD160_CTX * c), REG(a1, const void * data), REG(d0, size_t len));
int SAVEDS ASM LIB_RIPEMD160_Final(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned char * md), REG(a1, RIPEMD160_CTX * c));
unsigned char * SAVEDS ASM LIB_RIPEMD160(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * d), REG(d0, size_t n), REG(a1, unsigned char * md));
void SAVEDS ASM LIB_RIPEMD160_Transform(REG(a6, __IFACE_OR_BASE), REG(a0, RIPEMD160_CTX * c), REG(a1, const unsigned char * b));
RSA * SAVEDS ASM LIB_RSA_new(REG(a6, __IFACE_OR_BASE));
RSA * SAVEDS ASM LIB_RSA_new_method(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * engine));
int SAVEDS ASM LIB_RSA_size(REG(a6, __IFACE_OR_BASE), REG(a0, const RSA * a));
RSA * SAVEDS ASM LIB_RSA_generate_key(REG(a6, __IFACE_OR_BASE), REG(d0, int bits), REG(d1, unsigned long e), REG(a0, void (*callback)(int, int, void *)), REG(a1, void * cb_arg));
int SAVEDS ASM LIB_RSA_check_key(REG(a6, __IFACE_OR_BASE), REG(a0, const RSA * a));
int SAVEDS ASM LIB_RSA_public_encrypt(REG(a6, __IFACE_OR_BASE), REG(d0, int flen), REG(a0, const unsigned char * from), REG(a1, unsigned char * to), REG(a2, RSA * rsa), REG(d1, int padding));
int SAVEDS ASM LIB_RSA_private_encrypt(REG(a6, __IFACE_OR_BASE), REG(d0, int flen), REG(a0, const unsigned char * from), REG(a1, unsigned char * to), REG(a2, RSA * rsa), REG(d1, int padding));
int SAVEDS ASM LIB_RSA_public_decrypt(REG(a6, __IFACE_OR_BASE), REG(d0, int flen), REG(a0, const unsigned char * from), REG(a1, unsigned char * to), REG(a2, RSA * rsa), REG(d1, int padding));
int SAVEDS ASM LIB_RSA_private_decrypt(REG(a6, __IFACE_OR_BASE), REG(d0, int flen), REG(a0, const unsigned char * from), REG(a1, unsigned char * to), REG(a2, RSA * rsa), REG(d1, int padding));
void SAVEDS ASM LIB_RSA_free(REG(a6, __IFACE_OR_BASE), REG(a0, RSA * r));
int SAVEDS ASM LIB_RSA_up_ref(REG(a6, __IFACE_OR_BASE), REG(a0, RSA * r));
int SAVEDS ASM LIB_RSA_flags(REG(a6, __IFACE_OR_BASE), REG(a0, const RSA * r));
void SAVEDS ASM LIB_RSA_set_default_method(REG(a6, __IFACE_OR_BASE), REG(a0, const RSA_METHOD * meth));
const RSA_METHOD * SAVEDS ASM LIB_RSA_get_default_method(REG(a6, __IFACE_OR_BASE));
const RSA_METHOD * SAVEDS ASM LIB_RSA_get_method(REG(a6, __IFACE_OR_BASE), REG(a0, const RSA * rsa));
int SAVEDS ASM LIB_RSA_set_method(REG(a6, __IFACE_OR_BASE), REG(a0, RSA * rsa), REG(a1, const RSA_METHOD * meth));
const RSA_METHOD * SAVEDS ASM LIB_RSA_null_method(REG(a6, __IFACE_OR_BASE));
RSA * SAVEDS ASM LIB_d2i_RSAPublicKey(REG(a6, __IFACE_OR_BASE), REG(a0, RSA ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_RSAPublicKey(REG(a6, __IFACE_OR_BASE), REG(a0, const RSA * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_RSAPublicKey_it(REG(a6, __IFACE_OR_BASE));
RSA * SAVEDS ASM LIB_d2i_RSAPrivateKey(REG(a6, __IFACE_OR_BASE), REG(a0, RSA ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_RSAPrivateKey(REG(a6, __IFACE_OR_BASE), REG(a0, const RSA * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_RSAPrivateKey_it(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_RSA_print(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, const RSA * r), REG(d0, int offset));
int SAVEDS ASM LIB_RSA_sign(REG(a6, __IFACE_OR_BASE), REG(d0, int type), REG(a0, const unsigned char * m), REG(d1, unsigned int m_length), REG(a1, unsigned char * sigret), REG(a2, unsigned int * siglen), REG(a3, RSA * rsa));
int SAVEDS ASM LIB_RSA_verify(REG(a6, __IFACE_OR_BASE), REG(d0, int type), REG(a0, const unsigned char * m), REG(d1, unsigned int m_length), REG(a1, const unsigned char * sigbuf), REG(d2, unsigned int siglen), REG(a2, RSA * rsa));
int SAVEDS ASM LIB_RSA_sign_ASN1_OCTET_STRING(REG(a6, __IFACE_OR_BASE), REG(d0, int type), REG(a0, const unsigned char * m), REG(d1, unsigned int m_length), REG(a1, unsigned char * sigret), REG(a2, unsigned int * siglen), REG(a3, RSA * rsa));
int SAVEDS ASM LIB_RSA_verify_ASN1_OCTET_STRING(REG(a6, __IFACE_OR_BASE), REG(d0, int type), REG(a0, const unsigned char * m), REG(d1, unsigned int m_length), REG(a1, unsigned char * sigbuf), REG(d2, unsigned int siglen), REG(a2, RSA * rsa));
int SAVEDS ASM LIB_RSA_blinding_on(REG(a6, __IFACE_OR_BASE), REG(a0, RSA * rsa), REG(a1, BN_CTX * ctx));
void SAVEDS ASM LIB_RSA_blinding_off(REG(a6, __IFACE_OR_BASE), REG(a0, RSA * rsa));
int SAVEDS ASM LIB_RSA_padding_add_PKCS1_type_1(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned char * to), REG(d0, int tlen), REG(a1, const unsigned char * f), REG(d1, int fl));
int SAVEDS ASM LIB_RSA_padding_check_PKCS1_type_1(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned char * to), REG(d0, int tlen), REG(a1, const unsigned char * f), REG(d1, int fl), REG(d2, int rsa_len));
int SAVEDS ASM LIB_RSA_padding_add_PKCS1_type_2(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned char * to), REG(d0, int tlen), REG(a1, const unsigned char * f), REG(d1, int fl));
int SAVEDS ASM LIB_RSA_padding_check_PKCS1_type_2(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned char * to), REG(d0, int tlen), REG(a1, const unsigned char * f), REG(d1, int fl), REG(d2, int rsa_len));
int SAVEDS ASM LIB_RSA_padding_add_PKCS1_OAEP(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned char * to), REG(d0, int tlen), REG(a1, const unsigned char * f), REG(d1, int fl), REG(a2, const unsigned char * p), REG(d2, int pl));
int SAVEDS ASM LIB_RSA_padding_check_PKCS1_OAEP(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned char * to), REG(d0, int tlen), REG(a1, const unsigned char * f), REG(d1, int fl), REG(d2, int rsa_len), REG(a2, const unsigned char * p), REG(d3, int pl));
int SAVEDS ASM LIB_RSA_padding_add_none(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned char * to), REG(d0, int tlen), REG(a1, const unsigned char * f), REG(d1, int fl));
int SAVEDS ASM LIB_RSA_padding_check_none(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned char * to), REG(d0, int tlen), REG(a1, const unsigned char * f), REG(d1, int fl), REG(d2, int rsa_len));
int SAVEDS ASM LIB_OBSOLETE_RSA_get_ex_new_index(REG(a6, __IFACE_OR_BASE), REG(d0, long argl), REG(a0, void * argp), REG(a1, CRYPTO_EX_new * new_func), REG(a2, CRYPTO_EX_dup * dup_func), REG(a3, CRYPTO_EX_free * free_func));
int SAVEDS ASM LIB_RSA_set_ex_data(REG(a6, __IFACE_OR_BASE), REG(a0, RSA * r), REG(d0, int idx), REG(a1, void * arg));
void * SAVEDS ASM LIB_RSA_get_ex_data(REG(a6, __IFACE_OR_BASE), REG(a0, const RSA * r), REG(d0, int idx));
RSA * SAVEDS ASM LIB_RSAPublicKey_dup(REG(a6, __IFACE_OR_BASE), REG(a0, const RSA * rsa));
RSA * SAVEDS ASM LIB_RSAPrivateKey_dup(REG(a6, __IFACE_OR_BASE), REG(a0, const RSA * rsa));
int SAVEDS ASM LIB_ERR_load_RSA_strings(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_SHA1_Init(REG(a6, __IFACE_OR_BASE), REG(a0, SHA_CTX * c));
int SAVEDS ASM LIB_SHA1_Update(REG(a6, __IFACE_OR_BASE), REG(a0, SHA_CTX * c), REG(a1, const void * data), REG(d0, size_t len));
int SAVEDS ASM LIB_SHA1_Final(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned char * md), REG(a1, SHA_CTX * c));
unsigned char * SAVEDS ASM LIB_SHA1(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * d), REG(d0, size_t n), REG(a1, unsigned char * md));
void SAVEDS ASM LIB_SHA1_Transform(REG(a6, __IFACE_OR_BASE), REG(a0, SHA_CTX * c), REG(a1, const unsigned char * data));
int SAVEDS ASM LIB_UI_read_string_lib(REG(a6, __IFACE_OR_BASE), REG(a0, UI * ui), REG(a1, UI_STRING * uis));
int SAVEDS ASM LIB_UI_write_string_lib(REG(a6, __IFACE_OR_BASE), REG(a0, UI * ui), REG(a1, UI_STRING * uis));
void SAVEDS ASM LIB_HMAC_CTX_set_flags(REG(a6, __IFACE_OR_BASE), REG(a0, HMAC_CTX * ctx), REG(d0, unsigned long flags));
int SAVEDS ASM LIB_X509_check_ca(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * x));
PROXY_POLICY * SAVEDS ASM LIB_PROXY_POLICY_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_PROXY_POLICY_free(REG(a6, __IFACE_OR_BASE), REG(a0, PROXY_POLICY * a));
PROXY_POLICY * SAVEDS ASM LIB_d2i_PROXY_POLICY(REG(a6, __IFACE_OR_BASE), REG(a0, PROXY_POLICY ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_PROXY_POLICY(REG(a6, __IFACE_OR_BASE), REG(a0, const PROXY_POLICY * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_PROXY_POLICY_it(REG(a6, __IFACE_OR_BASE));
PROXY_CERT_INFO_EXTENSION * SAVEDS ASM LIB_PROXY_CERT_INFO_EXTENSION_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_PROXY_CERT_INFO_EXTENSION_free(REG(a6, __IFACE_OR_BASE), REG(a0, PROXY_CERT_INFO_EXTENSION * a));
PROXY_CERT_INFO_EXTENSION * SAVEDS ASM LIB_d2i_PROXY_CERT_INFO_EXTENSION(REG(a6, __IFACE_OR_BASE), REG(a0, PROXY_CERT_INFO_EXTENSION ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_PROXY_CERT_INFO_EXTENSION(REG(a6, __IFACE_OR_BASE), REG(a0, const PROXY_CERT_INFO_EXTENSION * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_PROXY_CERT_INFO_EXTENSION_it(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_BN_mod_exp_mont_consttime(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * rr), REG(a1, const BIGNUM * a), REG(a2, const BIGNUM * p), REG(a3, const BIGNUM * m), REG(d0, BN_CTX * ctx), REG(d1, BN_MONT_CTX * in_mont));
BN_MONT_CTX * SAVEDS ASM LIB_BN_MONT_CTX_set_locked(REG(a6, __IFACE_OR_BASE), REG(a0, BN_MONT_CTX ** pmont), REG(a1, CRYPTO_RWLOCK * lock), REG(a2, const BIGNUM * mod), REG(a3, BN_CTX * ctx));
int SAVEDS ASM LIB_PKCS1_MGF1(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned char * mask), REG(d0, long len), REG(a1, const unsigned char * seed), REG(d1, long seedlen), REG(a2, const EVP_MD * dgst));
int SAVEDS ASM LIB_RSA_padding_add_X931(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned char * to), REG(d0, int tlen), REG(a1, const unsigned char * from), REG(d1, int flen));
int SAVEDS ASM LIB_RSA_padding_check_X931(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned char * to), REG(d0, int tlen), REG(a1, const unsigned char * from), REG(d1, int flen), REG(d2, int num));
int SAVEDS ASM LIB_RSA_X931_hash_id(REG(a6, __IFACE_OR_BASE), REG(d0, int nid));
int SAVEDS ASM LIB_RSA_verify_PKCS1_PSS(REG(a6, __IFACE_OR_BASE), REG(a0, RSA * rsa), REG(a1, const unsigned char * mHash), REG(a2, const EVP_MD * Hash), REG(a3, const unsigned char * EM), REG(d0, int sLen));
int SAVEDS ASM LIB_RSA_padding_add_PKCS1_PSS(REG(a6, __IFACE_OR_BASE), REG(a0, RSA * rsa), REG(a1, unsigned char * EM), REG(a2, const unsigned char * mHash), REG(a3, const EVP_MD * Hash), REG(d0, int sLen));
const EVP_MD * SAVEDS ASM LIB_EVP_sha224(REG(a6, __IFACE_OR_BASE));
const EVP_MD * SAVEDS ASM LIB_EVP_sha256(REG(a6, __IFACE_OR_BASE));
const EVP_MD * SAVEDS ASM LIB_EVP_sha384(REG(a6, __IFACE_OR_BASE));
const EVP_MD * SAVEDS ASM LIB_EVP_sha512(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_BN_GF2m_add(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * r), REG(a1, const BIGNUM * a), REG(a2, const BIGNUM * b));
int SAVEDS ASM LIB_BN_GF2m_arr2poly(REG(a6, __IFACE_OR_BASE), REG(a0, const int * p), REG(a1, BIGNUM * a));
int SAVEDS ASM LIB_BN_GF2m_mod(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * r), REG(a1, const BIGNUM * a), REG(a2, const BIGNUM * p));
int SAVEDS ASM LIB_BN_GF2m_mod_mul(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * r), REG(a1, const BIGNUM * a), REG(a2, const BIGNUM * b), REG(a3, const BIGNUM * p), REG(d0, BN_CTX * ctx));
int SAVEDS ASM LIB_BN_GF2m_mod_sqr(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * r), REG(a1, const BIGNUM * a), REG(a2, const BIGNUM * p), REG(a3, BN_CTX * ctx));
int SAVEDS ASM LIB_BN_GF2m_mod_inv(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * r), REG(a1, const BIGNUM * b), REG(a2, const BIGNUM * p), REG(a3, BN_CTX * ctx));
int SAVEDS ASM LIB_BN_GF2m_mod_div(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * r), REG(a1, const BIGNUM * a), REG(a2, const BIGNUM * b), REG(a3, const BIGNUM * p), REG(d0, BN_CTX * ctx));
int SAVEDS ASM LIB_BN_GF2m_mod_exp(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * r), REG(a1, const BIGNUM * a), REG(a2, const BIGNUM * b), REG(a3, const BIGNUM * p), REG(d0, BN_CTX * ctx));
int SAVEDS ASM LIB_BN_GF2m_mod_sqrt(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * r), REG(a1, const BIGNUM * a), REG(a2, const BIGNUM * p), REG(a3, BN_CTX * ctx));
int SAVEDS ASM LIB_BN_GF2m_mod_solve_quad(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * r), REG(a1, const BIGNUM * a), REG(a2, const BIGNUM * p), REG(a3, BN_CTX * ctx));
int SAVEDS ASM LIB_BN_generate_prime_ex(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * ret), REG(d0, int bits), REG(d1, int safe), REG(a1, const BIGNUM * add), REG(a2, const BIGNUM * rem), REG(a3, BN_GENCB * cb));
int SAVEDS ASM LIB_BN_is_prime_ex(REG(a6, __IFACE_OR_BASE), REG(a0, const BIGNUM * p), REG(d0, int nchecks), REG(a1, BN_CTX * ctx), REG(a2, BN_GENCB * cb));
void SAVEDS ASM LIB_BN_set_negative(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * b), REG(d0, int n));
int SAVEDS ASM LIB_EC_GROUP_get_degree(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_GROUP * group));
const EC_METHOD * SAVEDS ASM LIB_EC_GF2m_simple_method(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_EC_GROUP_set_curve_GF2m(REG(a6, __IFACE_OR_BASE), REG(a0, EC_GROUP * group), REG(a1, const BIGNUM * p), REG(a2, const BIGNUM * a), REG(a3, const BIGNUM * b), REG(d0, BN_CTX * ctx));
int SAVEDS ASM LIB_EC_GROUP_get_curve_GF2m(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_GROUP * group), REG(a1, BIGNUM * p), REG(a2, BIGNUM * a), REG(a3, BIGNUM * b), REG(d0, BN_CTX * ctx));
int SAVEDS ASM LIB_EC_POINT_set_affine_coordinates_GF2m(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_GROUP * group), REG(a1, EC_POINT * point), REG(a2, const BIGNUM * x), REG(a3, const BIGNUM * y), REG(d0, BN_CTX * ctx));
int SAVEDS ASM LIB_EC_POINT_get_affine_coordinates_GF2m(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_GROUP * group), REG(a1, const EC_POINT * point), REG(a2, BIGNUM * x), REG(a3, BIGNUM * y), REG(d0, BN_CTX * ctx));
size_t SAVEDS ASM LIB_EC_get_builtin_curves(REG(a6, __IFACE_OR_BASE), REG(a0, EC_builtin_curve * r), REG(d0, size_t nitems));
EC_GROUP * SAVEDS ASM LIB_EC_GROUP_new_by_curve_name(REG(a6, __IFACE_OR_BASE), REG(d0, int nid));
int SAVEDS ASM LIB_EC_GROUP_check(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_GROUP * group), REG(a1, BN_CTX * ctx));
int SAVEDS ASM LIB_DSA_generate_parameters_ex(REG(a6, __IFACE_OR_BASE), REG(a0, DSA * dsa), REG(d0, int bits), REG(a1, const unsigned char * seed), REG(d1, int seed_len), REG(a2, int * counter_ret), REG(a3, unsigned long * h_ret), REG(d2, BN_GENCB * cb));
EC_KEY * SAVEDS ASM LIB_EC_KEY_new_by_curve_name(REG(a6, __IFACE_OR_BASE), REG(d0, int nid));
int SAVEDS ASM LIB_EC_KEY_generate_key(REG(a6, __IFACE_OR_BASE), REG(a0, EC_KEY * key));
void SAVEDS ASM LIB_EC_KEY_free(REG(a6, __IFACE_OR_BASE), REG(a0, EC_KEY * key));
void SAVEDS ASM LIB_ECDSA_SIG_free(REG(a6, __IFACE_OR_BASE), REG(a0, ECDSA_SIG * a));
ECDSA_SIG * SAVEDS ASM LIB_ECDSA_do_sign(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * dgst), REG(d0, int dlen), REG(a1, EC_KEY * eckey));
int SAVEDS ASM LIB_ECDSA_do_verify(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * dgst), REG(d0, int dgst_len), REG(a1, const ECDSA_SIG * sig), REG(a2, EC_KEY * eckey));
EC_KEY * SAVEDS ASM LIB_EC_KEY_new(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_EC_KEY_set_group(REG(a6, __IFACE_OR_BASE), REG(a0, EC_KEY * eckey), REG(a1, const EC_GROUP * group));
const EC_GROUP * SAVEDS ASM LIB_EC_KEY_get0_group(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_KEY * key));
int SAVEDS ASM LIB_EC_KEY_check_key(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_KEY * eckey));
int SAVEDS ASM LIB_ECDSA_size(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_KEY * eckey));
int SAVEDS ASM LIB_ECDSA_sign(REG(a6, __IFACE_OR_BASE), REG(d0, int type), REG(a0, const unsigned char * dgst), REG(d1, int dgstlen), REG(a1, unsigned char * sig), REG(a2, unsigned int * siglen), REG(a3, EC_KEY * eckey));
int SAVEDS ASM LIB_ECDSA_verify(REG(a6, __IFACE_OR_BASE), REG(d0, int type), REG(a0, const unsigned char * dgst), REG(d1, int dgstlen), REG(a1, const unsigned char * sig), REG(d2, int siglen), REG(a2, EC_KEY * eckey));
ECDSA_SIG * SAVEDS ASM LIB_d2i_ECDSA_SIG(REG(a6, __IFACE_OR_BASE), REG(a0, ECDSA_SIG ** v), REG(a1, const unsigned char ** pp), REG(a2, long len));
int SAVEDS ASM LIB_i2d_ECDSA_SIG(REG(a6, __IFACE_OR_BASE), REG(a0, const ECDSA_SIG * a), REG(a1, unsigned char ** pp));
int SAVEDS ASM LIB_DH_generate_parameters_ex(REG(a6, __IFACE_OR_BASE), REG(a0, DH * ret), REG(d0, int prime_len), REG(d1, int generator), REG(a1, BN_GENCB * cb));
int SAVEDS ASM LIB_EC_METHOD_get_field_type(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_METHOD * meth));
const EC_POINT * SAVEDS ASM LIB_EC_KEY_get0_public_key(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_KEY * eckey));
int SAVEDS ASM LIB_ECDH_compute_key(REG(a6, __IFACE_OR_BASE), REG(a0, void * out), REG(d0, size_t outlen), REG(a1, const EC_POINT * pub_key), REG(a2, const EC_KEY * eckey), REG(a3, void *(*KDF)(const void *, size_t, void *, size_t *)));
const BIGNUM * SAVEDS ASM LIB_EC_KEY_get0_private_key(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_KEY * eckey));
ENGINE * SAVEDS ASM LIB_ENGINE_get_first(REG(a6, __IFACE_OR_BASE));
const char * SAVEDS ASM LIB_ENGINE_get_id(REG(a6, __IFACE_OR_BASE), REG(a0, const ENGINE * e));
const char * SAVEDS ASM LIB_ENGINE_get_name(REG(a6, __IFACE_OR_BASE), REG(a0, const ENGINE * e));
ENGINE * SAVEDS ASM LIB_ENGINE_get_next(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e));
int SAVEDS ASM LIB_ENGINE_free(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e));
ENGINE * SAVEDS ASM LIB_ENGINE_new(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_ENGINE_set_id(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e), REG(a1, const char * id));
int SAVEDS ASM LIB_ENGINE_set_name(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e), REG(a1, const char * name));
int SAVEDS ASM LIB_ENGINE_add(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e));
int SAVEDS ASM LIB_ENGINE_remove(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e));
void SAVEDS ASM LIB_ENGINE_load_builtin_engines(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_ENGINE_register_all_ciphers(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_EVP_CIPHER_get_nid(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_CIPHER * cipher));
int SAVEDS ASM LIB_EVP_MD_get_type(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_MD * md));
void SAVEDS ASM LIB_ENGINE_register_all_digests(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_BIO_test_flags(REG(a6, __IFACE_OR_BASE), REG(a0, const BIO * b), REG(d0, int flags));
STACK_OF(SSL_COMP) * SAVEDS ASM LIB_SSL_COMP_get_compression_methods(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_RSA_generate_key_ex(REG(a6, __IFACE_OR_BASE), REG(a0, RSA * rsa), REG(d0, int bits), REG(a1, BIGNUM * e), REG(a2, BN_GENCB * cb));
void SAVEDS ASM LIB_X509_VERIFY_PARAM_free(REG(a6, __IFACE_OR_BASE), REG(a0, X509_VERIFY_PARAM * param));
int SAVEDS ASM LIB_X509_STORE_set1_param(REG(a6, __IFACE_OR_BASE), REG(a0, X509_STORE * xs), REG(a1, const X509_VERIFY_PARAM * pm));
ASN1_TYPE * SAVEDS ASM LIB_ASN1_generate_nconf(REG(a6, __IFACE_OR_BASE), REG(a0, const char * str), REG(a1, CONF * nconf));
EC_GROUP * SAVEDS ASM LIB_PEM_read_bio_ECPKParameters(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, EC_GROUP ** x), REG(a2, pem_password_cb * cb), REG(a3, void * u));
EC_KEY * SAVEDS ASM LIB_EC_KEY_dup(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_KEY * ec_key));
void SAVEDS ASM LIB_BIO_set_callback(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * b), REG(a1, BIO_callback_fn callback));
void SAVEDS ASM LIB_BIO_set_callback_arg(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * b), REG(a1, char * arg));
void SAVEDS ASM LIB_EVP_MD_CTX_set_flags(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_MD_CTX * ctx), REG(d0, int flags));
void SAVEDS ASM LIB_BIO_set_flags(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * b), REG(d0, int flags));
void SAVEDS ASM LIB_EVP_CIPHER_CTX_set_flags(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_CIPHER_CTX * ctx), REG(d0, int flags));
int SAVEDS ASM LIB_EVP_CIPHER_get_iv_length(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_CIPHER * cipher));
int SAVEDS ASM LIB_X509_REQ_check_private_key(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_REQ * req), REG(a1, EVP_PKEY * pkey));
EC_KEY * SAVEDS ASM LIB_PEM_read_bio_EC_PUBKEY(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, EC_KEY ** x), REG(a2, pem_password_cb * cb), REG(a3, void * u));
EC_KEY * SAVEDS ASM LIB_PEM_read_bio_ECPrivateKey(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, EC_KEY ** x), REG(a2, pem_password_cb * cb), REG(a3, void * u));
int SAVEDS ASM LIB_PEM_write_bio_EC_PUBKEY(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, const EC_KEY * x));
EC_KEY * SAVEDS ASM LIB_d2i_EC_PUBKEY_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, EC_KEY ** eckey));
void SAVEDS ASM LIB_EC_KEY_set_asn1_flag(REG(a6, __IFACE_OR_BASE), REG(a0, EC_KEY * key), REG(d0, int flag));
void SAVEDS ASM LIB_EC_KEY_set_conv_form(REG(a6, __IFACE_OR_BASE), REG(a0, EC_KEY * key), REG(d0, point_conversion_form_t cform));
int SAVEDS ASM LIB_EC_KEY_print(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, const EC_KEY * x), REG(d0, int off));
EC_KEY * SAVEDS ASM LIB_d2i_ECPrivateKey_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, EC_KEY ** eckey));
int SAVEDS ASM LIB_i2d_EC_PUBKEY_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, const EC_KEY * eckey));
int SAVEDS ASM LIB_PEM_write_bio_ECPrivateKey(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, const EC_KEY * x), REG(a2, const EVP_CIPHER * enc), REG(a3, const unsigned char * kstr), REG(d0, int klen), REG(d1, pem_password_cb * cb), REG(d2, void * u));
int SAVEDS ASM LIB_PEM_write_bio_ECPKParameters(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, const EC_GROUP * x));
int SAVEDS ASM LIB_i2d_ECPrivateKey_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, const EC_KEY * eckey));
int SAVEDS ASM LIB_i2d_ECPKParameters(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_GROUP * a), REG(a1, unsigned char ** out));
void SAVEDS ASM LIB_EC_GROUP_set_asn1_flag(REG(a6, __IFACE_OR_BASE), REG(a0, EC_GROUP * group), REG(d0, int flag));
void SAVEDS ASM LIB_EC_GROUP_set_point_conversion_form(REG(a6, __IFACE_OR_BASE), REG(a0, EC_GROUP * group), REG(d0, point_conversion_form_t form));
point_conversion_form_t SAVEDS ASM LIB_EC_GROUP_get_point_conversion_form(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_GROUP * group));
int SAVEDS ASM LIB_ECPKParameters_print(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, const EC_GROUP * x), REG(d0, int off));
size_t SAVEDS ASM LIB_EC_GROUP_set_seed(REG(a6, __IFACE_OR_BASE), REG(a0, EC_GROUP * group), REG(a1, const unsigned char * p), REG(d0, size_t len));
EC_GROUP * SAVEDS ASM LIB_d2i_ECPKParameters(REG(a6, __IFACE_OR_BASE), REG(a0, EC_GROUP ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
BIGNUM * SAVEDS ASM LIB_EC_POINT_point2bn(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_GROUP * group), REG(a1, const EC_POINT * point), REG(d0, point_conversion_form_t form), REG(a2, BIGNUM * ret), REG(a3, BN_CTX * ctx));
STACK_OF(OPENSSL_STRING) * SAVEDS ASM LIB_X509_get1_ocsp(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * x));
const char * SAVEDS ASM LIB_SSL_get_servername(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * s), REG(d0, const int type));
SSL_CTX * SAVEDS ASM LIB_SSL_set_SSL_CTX(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * ssl), REG(a1, SSL_CTX * ctx));
void SAVEDS ASM LIB_SSL_CTX_set_cookie_generate_cb(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(a1, int (*app_gen_cookie_cb)(SSL *ssl, unsigned char *cookie, unsigned int *cookie_len)));
void SAVEDS ASM LIB_SSL_CTX_set_cookie_verify_cb(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(a1, int (*app_verify_cookie_cb)(SSL *, const unsigned char *, unsigned int)));
void SAVEDS ASM LIB_SSL_CTX_set_info_callback(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(a1, void (*cb)(const SSL *ssl, int type, int val)));
BIO * SAVEDS ASM LIB_BIO_new_dgram(REG(a6, __IFACE_OR_BASE), REG(d0, int fd), REG(d1, int close_flag));
int SAVEDS ASM LIB_SSL_get_servername_type(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * s));
const COMP_METHOD * SAVEDS ASM LIB_SSL_get_current_compression(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * s));
const COMP_METHOD * SAVEDS ASM LIB_SSL_get_current_expansion(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * s));
const char * SAVEDS ASM LIB_SSL_COMP_get_name(REG(a6, __IFACE_OR_BASE), REG(a0, const COMP_METHOD * comp));
ENGINE * SAVEDS ASM LIB_ENGINE_by_id(REG(a6, __IFACE_OR_BASE), REG(a0, const char * id));
int SAVEDS ASM LIB_SSL_CTX_set_client_cert_engine(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(a1, ENGINE * e));
unsigned char * SAVEDS ASM LIB_SHA256(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * d), REG(d0, size_t n), REG(a1, unsigned char * md));
unsigned char * SAVEDS ASM LIB_SHA512(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * d), REG(d0, size_t n), REG(a1, unsigned char * md));
void SAVEDS ASM LIB_AES_ige_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(d0, size_t length), REG(a2, const AES_KEY * key), REG(a3, unsigned char * ivec), REG(d1, const int enc));
int SAVEDS ASM LIB_EC_KEY_precompute_mult(REG(a6, __IFACE_OR_BASE), REG(a0, EC_KEY * key), REG(a1, BN_CTX * ctx));
EVP_PKEY * SAVEDS ASM LIB_ENGINE_load_private_key(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e), REG(a1, const char * key_id), REG(a2, UI_METHOD * ui_method), REG(a3, void * callback_data));
EVP_PKEY * SAVEDS ASM LIB_ENGINE_load_public_key(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e), REG(a1, const char * key_id), REG(a2, UI_METHOD * ui_method), REG(a3, void * callback_data));
int SAVEDS ASM LIB_ENGINE_ctrl_cmd(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e), REG(a1, const char * cmd_name), REG(a2, long i), REG(a3, void * p), REG(d0, void (*f)(void)), REG(d1, int cmd_optional));
int SAVEDS ASM LIB_ENGINE_set_default(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e), REG(d0, unsigned int flags));
int SAVEDS ASM LIB_ENGINE_ctrl(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e), REG(d0, int cmd), REG(d1, long i), REG(a1, void * p), REG(a2, void (*f)(void)));
int SAVEDS ASM LIB_ENGINE_register_all_complete(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_ENGINE_ctrl_cmd_string(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e), REG(a1, const char * cmd_name), REG(a2, const char * arg), REG(d0, int cmd_optional));
int SAVEDS ASM LIB_X509_VERIFY_PARAM_add0_policy(REG(a6, __IFACE_OR_BASE), REG(a0, X509_VERIFY_PARAM * param), REG(a1, ASN1_OBJECT * policy));
int SAVEDS ASM LIB_X509_VERIFY_PARAM_set_purpose(REG(a6, __IFACE_OR_BASE), REG(a0, X509_VERIFY_PARAM * param), REG(d0, int purpose));
int SAVEDS ASM LIB_X509_VERIFY_PARAM_set_flags(REG(a6, __IFACE_OR_BASE), REG(a0, X509_VERIFY_PARAM * param), REG(d0, unsigned long flags));
X509_VERIFY_PARAM * SAVEDS ASM LIB_X509_VERIFY_PARAM_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_X509_POLICY_NODE_print(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * out), REG(a1, X509_POLICY_NODE * node), REG(d0, int indent));
X509_POLICY_TREE * SAVEDS ASM LIB_X509_STORE_CTX_get0_policy_tree(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_STORE_CTX * ctx));
int SAVEDS ASM LIB_X509_STORE_CTX_get_explicit_policy(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_STORE_CTX * ctx));
STACK_OF(X509_POLICY_NODE) * SAVEDS ASM LIB_X509_policy_tree_get0_policies(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_POLICY_TREE * tree));
STACK_OF(X509_POLICY_NODE) * SAVEDS ASM LIB_X509_policy_tree_get0_user_policies(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_POLICY_TREE * tree));
char * SAVEDS ASM LIB_BIO_get_callback_arg(REG(a6, __IFACE_OR_BASE), REG(a0, const BIO * b));
int SAVEDS ASM LIB_EVP_PKEY_add1_attr_by_NID(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY * key), REG(d0, int nid), REG(d1, int type), REG(a1, const unsigned char * bytes), REG(d2, int len));
const RSA_METHOD * SAVEDS ASM LIB_ENGINE_get_RSA(REG(a6, __IFACE_OR_BASE), REG(a0, const ENGINE * e));
const DSA_METHOD * SAVEDS ASM LIB_ENGINE_get_DSA(REG(a6, __IFACE_OR_BASE), REG(a0, const ENGINE * e));
const DH_METHOD * SAVEDS ASM LIB_ENGINE_get_DH(REG(a6, __IFACE_OR_BASE), REG(a0, const ENGINE * e));
const RAND_METHOD * SAVEDS ASM LIB_ENGINE_get_RAND(REG(a6, __IFACE_OR_BASE), REG(a0, const ENGINE * e));
ENGINE_CIPHERS_PTR SAVEDS ASM LIB_ENGINE_get_ciphers(REG(a6, __IFACE_OR_BASE), REG(a0, const ENGINE * e));
ENGINE_DIGESTS_PTR SAVEDS ASM LIB_ENGINE_get_digests(REG(a6, __IFACE_OR_BASE), REG(a0, const ENGINE * e));
int SAVEDS ASM LIB_ENGINE_init(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e));
int SAVEDS ASM LIB_ENGINE_finish(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e));
OSSL_HTTP_REQ_CTX * SAVEDS ASM LIB_OCSP_sendreq_new(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * io), REG(a1, const char * path), REG(a2, const OCSP_REQUEST * req), REG(a3, int maxline));
int SAVEDS ASM LIB_OBSOLETE_OCSP_sendreq_nbio(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_RESPONSE ** presp), REG(a1, OSSL_HTTP_REQ_CTX * rctx));
void SAVEDS ASM LIB_OSSL_HTTP_REQ_CTX_free(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_HTTP_REQ_CTX * rctx));
int SAVEDS ASM LIB_SSL_CTX_use_psk_identity_hint(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(a1, const char * identity_hint));
void SAVEDS ASM LIB_SSL_CTX_set_psk_client_callback(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(a1, SSL_psk_client_cb_func cb));
const char * SAVEDS ASM LIB_SSL_get_psk_identity_hint(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * s));
void SAVEDS ASM LIB_SSL_set_psk_server_callback(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * ssl), REG(a1, SSL_psk_server_cb_func cb));
int SAVEDS ASM LIB_SSL_use_psk_identity_hint(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s), REG(a1, const char * identity_hint));
void SAVEDS ASM LIB_SSL_set_psk_client_callback(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * ssl), REG(a1, SSL_psk_client_cb_func cb));
void SAVEDS ASM LIB_SSL_CTX_set_psk_server_callback(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(a1, SSL_psk_server_cb_func cb));
const char * SAVEDS ASM LIB_SSL_get_psk_identity(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * s));
int SAVEDS ASM LIB_SSL_set_session_ticket_ext(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s), REG(a1, void * ext_data), REG(d0, int ext_len));
int SAVEDS ASM LIB_SSL_set_session_secret_cb(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s), REG(a1, int (*tls_session_secret_cb)(SSL *, void *, int *, STACK_OF(SSL_CIPHER) *, const SSL_CIPHER **, void *)), REG(a2, void * arg));
int SAVEDS ASM LIB_SSL_set_session_ticket_ext_cb(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s), REG(a1, tls_session_ticket_ext_cb_fn cb), REG(a2, void * arg));
int SAVEDS ASM LIB_SSL_set1_param(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * ssl), REG(a1, X509_VERIFY_PARAM * vpm));
int SAVEDS ASM LIB_SSL_CTX_set1_param(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(a1, X509_VERIFY_PARAM * vpm));
int SAVEDS ASM LIB_SSL_renegotiate_abbreviated(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s));
int SAVEDS ASM LIB_SSL_CTX_set_srp_client_pwd_callback(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(a1, char * (*cb)(SSL *, void *)));
BIGNUM * SAVEDS ASM LIB_SSL_get_srp_g(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s));
int SAVEDS ASM LIB_SSL_CTX_set_srp_username_callback(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(a1, int (*cb)(SSL *, int *, void *)));
char * SAVEDS ASM LIB_SSL_get_srp_userinfo(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s));
int SAVEDS ASM LIB_SSL_set_srp_server_param(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s), REG(a1, const BIGNUM * N), REG(a2, const BIGNUM * g), REG(a3, BIGNUM * sa), REG(d0, BIGNUM * v), REG(d1, char * info));
int SAVEDS ASM LIB_SSL_set_srp_server_param_pw(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s), REG(a1, const char * user), REG(a2, const char * pass), REG(a3, const char * grp));
BIGNUM * SAVEDS ASM LIB_SSL_get_srp_N(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s));
char * SAVEDS ASM LIB_SSL_get_srp_username(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s));
int SAVEDS ASM LIB_SSL_CTX_set_srp_password(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(a1, char * password));
int SAVEDS ASM LIB_SSL_CTX_set_srp_strength(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(d0, int strength));
int SAVEDS ASM LIB_SSL_CTX_set_srp_verify_param_callback(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(a1, int (*cb)(SSL *, void *)));
int SAVEDS ASM LIB_SSL_CTX_set_srp_cb_arg(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(a1, void * arg));
int SAVEDS ASM LIB_SSL_CTX_set_srp_username(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(a1, char * name));
int SAVEDS ASM LIB_SSL_CTX_SRP_CTX_init(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx));
int SAVEDS ASM LIB_SRP_Calc_A_param(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s));
int SAVEDS ASM LIB_SSL_CTX_SRP_CTX_free(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx));
int SAVEDS ASM LIB_SSL_srp_server_param_with_username(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s), REG(a1, int * ad));
int SAVEDS ASM LIB_SSL_SRP_CTX_free(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * ctx));
void SAVEDS ASM LIB_SSL_set_debug(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s), REG(d0, int debug));
X509 * SAVEDS ASM LIB_SSL_SESSION_get0_peer(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_SESSION * s));
int SAVEDS ASM LIB_SSL_SESSION_set1_id_context(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_SESSION * s), REG(a1, const unsigned char * sid_ctx), REG(d0, unsigned int sid_ctx_len));
int SAVEDS ASM LIB_OBSOLETE_SSL_cache_hit(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s));
uint32_t SAVEDS ASM LIB_SSL_CIPHER_get_id(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL_CIPHER * c));
int SAVEDS ASM LIB_SSL_export_keying_material(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s), REG(a1, unsigned char * out), REG(d0, size_t olen), REG(a2, const char * label), REG(d1, size_t llen), REG(a3, const unsigned char * context), REG(d2, size_t contextlen), REG(d3, int use_context));
int SAVEDS ASM LIB_SSL_set_tlsext_use_srtp(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * ssl), REG(a1, const char * profiles));
void SAVEDS ASM LIB_SSL_CTX_set_next_protos_advertised_cb(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * s), REG(a1, SSL_CTX_npn_advertised_cb_func cb), REG(a2, void * arg));
void SAVEDS ASM LIB_SSL_get0_next_proto_negotiated(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * s), REG(a1, const unsigned char ** data), REG(a2, unsigned * len));
SRTP_PROTECTION_PROFILE * SAVEDS ASM LIB_SSL_get_selected_srtp_profile(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s));
int SAVEDS ASM LIB_SSL_CTX_set_tlsext_use_srtp(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(a1, const char * profiles));
int SAVEDS ASM LIB_SSL_select_next_proto(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned char ** out), REG(a1, unsigned char * outlen), REG(a2, const unsigned char * in), REG(d0, unsigned int inlen), REG(a3, const unsigned char * client), REG(d1, unsigned int client_len));
STACK_OF(SRTP_PROTECTION_PROFILE) * SAVEDS ASM LIB_SSL_get_srtp_profiles(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s));
void SAVEDS ASM LIB_SSL_CTX_set_next_proto_select_cb(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * s), REG(a1, SSL_CTX_npn_select_cb_func cb), REG(a2, void * arg));
unsigned int SAVEDS ASM LIB_SSL_SESSION_get_compress_id(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL_SESSION * s));
int SAVEDS ASM LIB_SSL_SRP_CTX_init(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s));
int SAVEDS ASM LIB_ERR_load_ENGINE_strings(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_ENGINE_set_DSA(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e), REG(a1, const DSA_METHOD * dsa_meth));
ENGINE_GEN_INT_FUNC_PTR SAVEDS ASM LIB_ENGINE_get_finish_function(REG(a6, __IFACE_OR_BASE), REG(a0, const ENGINE * e));
ENGINE * SAVEDS ASM LIB_ENGINE_get_default_RSA(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_ENGINE_set_DH(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e), REG(a1, const DH_METHOD * dh_meth));
ENGINE_GEN_INT_FUNC_PTR SAVEDS ASM LIB_ENGINE_get_init_function(REG(a6, __IFACE_OR_BASE), REG(a0, const ENGINE * e));
int SAVEDS ASM LIB_ENGINE_set_init_function(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e), REG(a1, ENGINE_GEN_INT_FUNC_PTR init_f));
int SAVEDS ASM LIB_ENGINE_set_default_DSA(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e));
ENGINE * SAVEDS ASM LIB_ENGINE_get_last(REG(a6, __IFACE_OR_BASE));
ENGINE * SAVEDS ASM LIB_ENGINE_get_prev(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e));
ENGINE * SAVEDS ASM LIB_ENGINE_get_default_DH(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_ENGINE_set_finish_function(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e), REG(a1, ENGINE_GEN_INT_FUNC_PTR finish_f));
int SAVEDS ASM LIB_ENGINE_set_RSA(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e), REG(a1, const RSA_METHOD * rsa_meth));
int SAVEDS ASM LIB_ENGINE_set_default_RAND(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e));
ENGINE * SAVEDS ASM LIB_ENGINE_get_default_DSA(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_ENGINE_set_default_RSA(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e));
ENGINE * SAVEDS ASM LIB_ENGINE_get_default_RAND(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_ENGINE_set_RAND(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e), REG(a1, const RAND_METHOD * rand_meth));
int SAVEDS ASM LIB_ENGINE_set_default_DH(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e));
ENGINE_CTRL_FUNC_PTR SAVEDS ASM LIB_ENGINE_get_ctrl_function(REG(a6, __IFACE_OR_BASE), REG(a0, const ENGINE * e));
int SAVEDS ASM LIB_ENGINE_set_ctrl_function(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e), REG(a1, ENGINE_CTRL_FUNC_PTR ctrl_f));
void SAVEDS ASM LIB_ENGINE_unregister_ciphers(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e));
void SAVEDS ASM LIB_ENGINE_unregister_RSA(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e));
void SAVEDS ASM LIB_ENGINE_register_all_RAND(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_OBSOLETE_ENGINE_load_dynamic(REG(a6, __IFACE_OR_BASE));
ENGINE * SAVEDS ASM LIB_ENGINE_get_digest_engine(REG(a6, __IFACE_OR_BASE), REG(d0, int nid));
int SAVEDS ASM LIB_ENGINE_register_DH(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e));
int SAVEDS ASM LIB_ENGINE_register_RAND(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e));
void SAVEDS ASM LIB_OBSOLETE_ENGINE_load_cryptodev(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_ENGINE_register_ciphers(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e));
void SAVEDS ASM LIB_OBSOLETE_ENGINE_load_openssl(REG(a6, __IFACE_OR_BASE));
const ENGINE_CMD_DEFN * SAVEDS ASM LIB_ENGINE_get_cmd_defns(REG(a6, __IFACE_OR_BASE), REG(a0, const ENGINE * e));
int SAVEDS ASM LIB_ENGINE_set_load_privkey_function(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e), REG(a1, ENGINE_LOAD_KEY_PTR loadpriv_f));
int SAVEDS ASM LIB_ENGINE_set_default_digests(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e));
int SAVEDS ASM LIB_ENGINE_register_RSA(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e));
void SAVEDS ASM LIB_ENGINE_unregister_DSA(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e));
int SAVEDS ASM LIB_ENGINE_set_ciphers(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e), REG(a1, ENGINE_CIPHERS_PTR f));
int SAVEDS ASM LIB_RAND_set_rand_engine(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * engine));
const EVP_MD * SAVEDS ASM LIB_ENGINE_get_digest(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e), REG(d0, int nid));
const EVP_CIPHER * SAVEDS ASM LIB_ENGINE_get_cipher(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e), REG(d0, int nid));
int SAVEDS ASM LIB_ENGINE_cmd_is_executable(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e), REG(d0, int cmd));
int SAVEDS ASM LIB_ENGINE_register_DSA(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e));
int SAVEDS ASM LIB_ENGINE_set_load_pubkey_function(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e), REG(a1, ENGINE_LOAD_KEY_PTR loadpub_f));
ENGINE_LOAD_KEY_PTR SAVEDS ASM LIB_ENGINE_get_load_pubkey_function(REG(a6, __IFACE_OR_BASE), REG(a0, const ENGINE * e));
void SAVEDS ASM LIB_ENGINE_register_all_RSA(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_ENGINE_unregister_digests(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e));
int SAVEDS ASM LIB_OBSOLETE_ENGINE_get_ex_new_index(REG(a6, __IFACE_OR_BASE), REG(d0, long argl), REG(a0, void * argp), REG(a1, CRYPTO_EX_new * new_func), REG(a2, CRYPTO_EX_dup * dep_func), REG(a3, CRYPTO_EX_free * free_func));
void * SAVEDS ASM LIB_ENGINE_get_ex_data(REG(a6, __IFACE_OR_BASE), REG(a0, const ENGINE * e), REG(d0, int idx));
int SAVEDS ASM LIB_ENGINE_set_cmd_defns(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e), REG(a1, const ENGINE_CMD_DEFN * defns));
int SAVEDS ASM LIB_ENGINE_register_digests(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e));
void SAVEDS ASM LIB_ENGINE_register_all_DH(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_ENGINE_get_flags(REG(a6, __IFACE_OR_BASE), REG(a0, const ENGINE * e));
void SAVEDS ASM LIB_ENGINE_unregister_DH(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e));
void SAVEDS ASM LIB_ENGINE_register_all_DSA(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_ENGINE_set_digests(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e), REG(a1, ENGINE_DIGESTS_PTR f));
int SAVEDS ASM LIB_ENGINE_register_complete(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e));
int SAVEDS ASM LIB_ENGINE_set_ex_data(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e), REG(d0, int idx), REG(a1, void * arg));
int SAVEDS ASM LIB_ENGINE_set_destroy_function(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e), REG(a1, ENGINE_GEN_INT_FUNC_PTR destroy_f));
ENGINE * SAVEDS ASM LIB_ENGINE_get_cipher_engine(REG(a6, __IFACE_OR_BASE), REG(d0, int nid));
int SAVEDS ASM LIB_ENGINE_set_default_ciphers(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e));
void SAVEDS ASM LIB_ENGINE_unregister_RAND(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e));
void SAVEDS ASM LIB_ENGINE_set_table_flags(REG(a6, __IFACE_OR_BASE), REG(d0, unsigned int flags));
ENGINE_GEN_INT_FUNC_PTR SAVEDS ASM LIB_ENGINE_get_destroy_function(REG(a6, __IFACE_OR_BASE), REG(a0, const ENGINE * e));
unsigned int SAVEDS ASM LIB_ENGINE_get_table_flags(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_ENGINE_set_flags(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e), REG(d0, int flags));
ENGINE_LOAD_KEY_PTR SAVEDS ASM LIB_ENGINE_get_load_privkey_function(REG(a6, __IFACE_OR_BASE), REG(a0, const ENGINE * e));
int SAVEDS ASM LIB_ENGINE_set_default_string(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e), REG(a1, const char * def_list));
void SAVEDS ASM LIB_ENGINE_add_conf_module(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_ENGINE_up_ref(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e));
int SAVEDS ASM LIB_EC_GROUP_get_trinomial_basis(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_GROUP * eg), REG(a1, unsigned int * k));
int SAVEDS ASM LIB_SHA512_Update(REG(a6, __IFACE_OR_BASE), REG(a0, SHA512_CTX * c), REG(a1, const void * data), REG(d0, size_t len));
int SAVEDS ASM LIB_i2d_ECPrivateKey(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_KEY * key), REG(a1, unsigned char ** out));
int SAVEDS ASM LIB_BN_GF2m_mod_exp_arr(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * r), REG(a1, const BIGNUM * a), REG(a2, const BIGNUM * b), REG(a3, const int * p), REG(d0, BN_CTX * ctx));
int SAVEDS ASM LIB_BN_GF2m_mod_mul_arr(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * r), REG(a1, const BIGNUM * a), REG(a2, const BIGNUM * b), REG(a3, const int * p), REG(d0, BN_CTX * ctx));
EC_KEY * SAVEDS ASM LIB_o2i_ECPublicKey(REG(a6, __IFACE_OR_BASE), REG(a0, EC_KEY ** key), REG(a1, const unsigned char ** in), REG(d0, long len));
EC_KEY * SAVEDS ASM LIB_EC_KEY_copy(REG(a6, __IFACE_OR_BASE), REG(a0, EC_KEY * dst), REG(a1, const EC_KEY * src));
int SAVEDS ASM LIB_EC_GROUP_check_discriminant(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_GROUP * group), REG(a1, BN_CTX * ctx));
int SAVEDS ASM LIB_i2o_ECPublicKey(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_KEY * key), REG(a1, unsigned char ** out));
EC_GROUP * SAVEDS ASM LIB_EC_GROUP_new_curve_GF2m(REG(a6, __IFACE_OR_BASE), REG(a0, const BIGNUM * p), REG(a1, const BIGNUM * a), REG(a2, const BIGNUM * b), REG(a3, BN_CTX * ctx));
struct ec_key_st * SAVEDS ASM LIB_EVP_PKEY_get1_EC_KEY(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY * pkey));
point_conversion_form_t SAVEDS ASM LIB_EC_KEY_get_conv_form(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_KEY * key));
void * SAVEDS ASM LIB_ENGINE_get_static_state(REG(a6, __IFACE_OR_BASE));
ECDSA_SIG * SAVEDS ASM LIB_ECDSA_SIG_new(REG(a6, __IFACE_OR_BASE));
EC_POINT * SAVEDS ASM LIB_EC_POINT_bn2point(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_GROUP * g), REG(a1, const BIGNUM * b), REG(a2, EC_POINT * p), REG(a3, BN_CTX * ctx));
int SAVEDS ASM LIB_ECDSA_sign_ex(REG(a6, __IFACE_OR_BASE), REG(d0, int type), REG(a0, const unsigned char * dgst), REG(d1, int dgstlen), REG(a1, unsigned char * sig), REG(a2, unsigned int * siglen), REG(a3, const BIGNUM * kinv), REG(d2, const BIGNUM * rp), REG(d3, EC_KEY * eckey));
int SAVEDS ASM LIB_EC_GROUP_get_pentanomial_basis(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_GROUP * ecgroup), REG(a1, unsigned int * k1), REG(a2, unsigned int * k2), REG(a3, unsigned int * k3));
int SAVEDS ASM LIB_ECDSA_sign_setup(REG(a6, __IFACE_OR_BASE), REG(a0, EC_KEY * eckey), REG(a1, BN_CTX * ctx), REG(a2, BIGNUM ** kinv), REG(a3, BIGNUM ** rp));
int SAVEDS ASM LIB_BN_GF2m_mod_solve_quad_arr(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * r), REG(a1, const BIGNUM * a), REG(a2, const int * p), REG(a3, BN_CTX * ctx));
int SAVEDS ASM LIB_EC_KEY_up_ref(REG(a6, __IFACE_OR_BASE), REG(a0, EC_KEY * key));
EC_KEY * SAVEDS ASM LIB_d2i_EC_PUBKEY(REG(a6, __IFACE_OR_BASE), REG(a0, EC_KEY ** a), REG(a1, const unsigned char ** pp), REG(a2, long length));
int SAVEDS ASM LIB_EC_GROUP_have_precompute_mult(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_GROUP * group));
int SAVEDS ASM LIB_BN_GF2m_mod_arr(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * r), REG(a1, const BIGNUM * a), REG(a2, const int * p));
EC_POINT * SAVEDS ASM LIB_EC_POINT_dup(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_POINT * src), REG(a1, const EC_GROUP * group));
int SAVEDS ASM LIB_EVP_PKEY_set1_EC_KEY(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY * pkey), REG(a1, struct ec_key_st * key));
int SAVEDS ASM LIB_BN_GF2m_mod_sqrt_arr(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * r), REG(a1, const BIGNUM * a), REG(a2, const int * p), REG(a3, BN_CTX * ctx));
int SAVEDS ASM LIB_EC_KEY_set_private_key(REG(a6, __IFACE_OR_BASE), REG(a0, EC_KEY * key), REG(a1, const BIGNUM * prv));
int SAVEDS ASM LIB_BN_GF2m_poly2arr(REG(a6, __IFACE_OR_BASE), REG(a0, const BIGNUM * a), REG(a1, int * p), REG(d0, int max));
int SAVEDS ASM LIB_i2d_ECParameters(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_KEY * key), REG(a1, unsigned char ** out));
int SAVEDS ASM LIB_SHA256_Init(REG(a6, __IFACE_OR_BASE), REG(a0, SHA256_CTX * c));
unsigned char * SAVEDS ASM LIB_SHA224(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * d), REG(d0, size_t n), REG(a1, unsigned char * md));
size_t SAVEDS ASM LIB_EC_GROUP_get_seed_len(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_GROUP * ecgroup));
int SAVEDS ASM LIB_i2d_EC_PUBKEY(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_KEY * a), REG(a1, unsigned char ** pp));
const EC_METHOD * SAVEDS ASM LIB_EC_GFp_nist_method(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_OBSOLETE_ENGINE_load_padlock(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_EC_GROUP_set_curve_name(REG(a6, __IFACE_OR_BASE), REG(a0, EC_GROUP * group), REG(d0, int nid));
int SAVEDS ASM LIB_BN_GF2m_mod_sqr_arr(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * r), REG(a1, const BIGNUM * a), REG(a2, const int * p), REG(a3, BN_CTX * ctx));
const BIO_METHOD * SAVEDS ASM LIB_BIO_s_datagram(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_SHA384_Update(REG(a6, __IFACE_OR_BASE), REG(a0, SHA512_CTX * c), REG(a1, const void * data), REG(d0, size_t len));
int SAVEDS ASM LIB_SHA224_Final(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned char * md), REG(a1, SHA256_CTX * c));
int SAVEDS ASM LIB_SHA224_Update(REG(a6, __IFACE_OR_BASE), REG(a0, SHA256_CTX * c), REG(a1, const void * data), REG(d0, size_t len));
EC_KEY * SAVEDS ASM LIB_d2i_ECPrivateKey(REG(a6, __IFACE_OR_BASE), REG(a0, EC_KEY ** key), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_SHA512_Final(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned char * md), REG(a1, SHA512_CTX * c));
int SAVEDS ASM LIB_EC_GROUP_get_asn1_flag(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_GROUP * group));
unsigned char * SAVEDS ASM LIB_EC_GROUP_get0_seed(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_GROUP * x));
int SAVEDS ASM LIB_BN_GF2m_mod_div_arr(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * r), REG(a1, const BIGNUM * a), REG(a2, const BIGNUM * b), REG(a3, const int * p), REG(d0, BN_CTX * ctx));
unsigned SAVEDS ASM LIB_EC_KEY_get_enc_flags(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_KEY * key));
int SAVEDS ASM LIB_EC_POINT_set_compressed_coordinates_GF2m(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_GROUP * group), REG(a1, EC_POINT * p), REG(a2, const BIGNUM * x), REG(d0, int y_bit), REG(a3, BN_CTX * ctx));
int SAVEDS ASM LIB_EC_GROUP_cmp(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_GROUP * a), REG(a1, const EC_GROUP * b), REG(a2, BN_CTX * ctx));
int SAVEDS ASM LIB_SHA224_Init(REG(a6, __IFACE_OR_BASE), REG(a0, SHA256_CTX * c));
int SAVEDS ASM LIB_SHA512_Init(REG(a6, __IFACE_OR_BASE), REG(a0, SHA512_CTX * c));
int SAVEDS ASM LIB_EC_GROUP_get_basis_type(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_GROUP * group));
EC_GROUP * SAVEDS ASM LIB_EC_GROUP_dup(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_GROUP * src));
void SAVEDS ASM LIB_SHA256_Transform(REG(a6, __IFACE_OR_BASE), REG(a0, SHA256_CTX * c), REG(a1, const unsigned char * data));
void SAVEDS ASM LIB_EC_KEY_set_enc_flags(REG(a6, __IFACE_OR_BASE), REG(a0, EC_KEY * eckey), REG(d0, unsigned int flags));
char * SAVEDS ASM LIB_EC_POINT_point2hex(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_GROUP * group), REG(a1, const EC_POINT * point), REG(d0, point_conversion_form_t form), REG(a2, BN_CTX * ctx));
ECDSA_SIG * SAVEDS ASM LIB_ECDSA_do_sign_ex(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * dgst), REG(d0, int dgstlen), REG(a1, const BIGNUM * kinv), REG(a2, const BIGNUM * rp), REG(a3, EC_KEY * eckey));
void SAVEDS ASM LIB_SHA512_Transform(REG(a6, __IFACE_OR_BASE), REG(a0, SHA512_CTX * c), REG(a1, const unsigned char * data));
int SAVEDS ASM LIB_EC_KEY_set_public_key(REG(a6, __IFACE_OR_BASE), REG(a0, EC_KEY * key), REG(a1, const EC_POINT * pub));
int SAVEDS ASM LIB_EC_GROUP_get_curve_name(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_GROUP * group));
int SAVEDS ASM LIB_SHA256_Final(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned char * md), REG(a1, SHA256_CTX * c));
EC_KEY * SAVEDS ASM LIB_d2i_ECParameters(REG(a6, __IFACE_OR_BASE), REG(a0, EC_KEY ** key), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_SHA384_Init(REG(a6, __IFACE_OR_BASE), REG(a0, SHA512_CTX * c));
int SAVEDS ASM LIB_SHA384_Final(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned char * md), REG(a1, SHA512_CTX * c));
unsigned char * SAVEDS ASM LIB_SHA384(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * d), REG(d0, size_t n), REG(a1, unsigned char * md));
EC_POINT * SAVEDS ASM LIB_EC_POINT_hex2point(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_GROUP * group), REG(a1, const char * c), REG(a2, EC_POINT * p), REG(a3, BN_CTX * ctx));
int SAVEDS ASM LIB_SHA256_Update(REG(a6, __IFACE_OR_BASE), REG(a0, SHA256_CTX * c), REG(a1, const void * data), REG(d0, size_t len));
int SAVEDS ASM LIB_BN_GF2m_mod_inv_arr(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * r), REG(a1, const BIGNUM * b), REG(a2, const int * p), REG(a3, BN_CTX * ctx));
int SAVEDS ASM LIB_DH_check_pub_key(REG(a6, __IFACE_OR_BASE), REG(a0, const DH * dh), REG(a1, const BIGNUM * pub_key), REG(a2, int * codes));
void SAVEDS ASM LIB_Camellia_cbc_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(d0, size_t length), REG(a2, const CAMELLIA_KEY * key), REG(a3, unsigned char * ivec), REG(d1, const int enc));
void SAVEDS ASM LIB_Camellia_cfb128_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(d0, size_t length), REG(a2, const CAMELLIA_KEY * key), REG(a3, unsigned char * ivec), REG(d1, int * num), REG(d2, const int enc));
void SAVEDS ASM LIB_Camellia_cfb1_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(d0, size_t length), REG(a2, const CAMELLIA_KEY * key), REG(a3, unsigned char * ivec), REG(d1, int * num), REG(d2, const int enc));
void SAVEDS ASM LIB_Camellia_cfb8_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(d0, size_t length), REG(a2, const CAMELLIA_KEY * key), REG(a3, unsigned char * ivec), REG(d1, int * num), REG(d2, const int enc));
void SAVEDS ASM LIB_Camellia_ctr128_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(d0, size_t length), REG(a2, const CAMELLIA_KEY * key), REG(a3, unsigned char * ivec), REG(d1, unsigned char * ecount_buf), REG(d2, unsigned int * num));
void SAVEDS ASM LIB_Camellia_decrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(a2, const CAMELLIA_KEY * key));
void SAVEDS ASM LIB_Camellia_ecb_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(a2, const CAMELLIA_KEY * key), REG(d0, const int enc));
void SAVEDS ASM LIB_Camellia_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(a2, const CAMELLIA_KEY * key));
void SAVEDS ASM LIB_Camellia_ofb128_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(d0, size_t length), REG(a2, const CAMELLIA_KEY * key), REG(a3, unsigned char * ivec), REG(d1, int * num));
int SAVEDS ASM LIB_Camellia_set_key(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * userKey), REG(d0, const int bits), REG(a1, CAMELLIA_KEY * key));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_camellia_128_cbc(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_camellia_128_cfb128(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_camellia_128_cfb1(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_camellia_128_cfb8(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_camellia_128_ecb(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_camellia_128_ofb(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_camellia_192_cbc(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_camellia_192_cfb128(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_camellia_192_cfb1(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_camellia_192_cfb8(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_camellia_192_ecb(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_camellia_192_ofb(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_camellia_256_cbc(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_camellia_256_cfb128(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_camellia_256_cfb1(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_camellia_256_cfb8(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_camellia_256_ecb(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_camellia_256_ofb(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_AES_bi_ige_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(d0, size_t length), REG(a2, const AES_KEY * key), REG(a3, const AES_KEY * key2), REG(d1, const unsigned char * ivec), REG(d2, const int enc));
void SAVEDS ASM LIB_SEED_decrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * s), REG(a1, unsigned char * d), REG(a2, const SEED_KEY_SCHEDULE * ks));
void SAVEDS ASM LIB_SEED_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * s), REG(a1, unsigned char * d), REG(a2, const SEED_KEY_SCHEDULE * ks));
void SAVEDS ASM LIB_SEED_cbc_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(d0, size_t len), REG(a2, const SEED_KEY_SCHEDULE * ks), REG(a3, unsigned char * ivec), REG(d1, int enc));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_seed_ofb(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_SEED_cfb128_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(d0, size_t len), REG(a2, const SEED_KEY_SCHEDULE * ks), REG(a3, unsigned char * ivec), REG(d1, int * num), REG(d2, int enc));
void SAVEDS ASM LIB_SEED_ofb128_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(d0, size_t len), REG(a2, const SEED_KEY_SCHEDULE * ks), REG(a3, unsigned char * ivec), REG(d1, int * num));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_seed_cbc(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_SEED_ecb_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(a2, const SEED_KEY_SCHEDULE * ks), REG(d0, int enc));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_seed_ecb(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_SEED_set_key(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * rawkey), REG(a1, SEED_KEY_SCHEDULE * ks));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_seed_cfb128(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_AES_unwrap_key(REG(a6, __IFACE_OR_BASE), REG(a0, AES_KEY * key), REG(a1, const unsigned char * iv), REG(a2, unsigned char * out), REG(a3, const unsigned char * in), REG(d0, unsigned int inlen));
int SAVEDS ASM LIB_AES_wrap_key(REG(a6, __IFACE_OR_BASE), REG(a0, AES_KEY * key), REG(a1, const unsigned char * iv), REG(a2, unsigned char * out), REG(a3, const unsigned char * in), REG(d0, unsigned int inlen));
void SAVEDS ASM LIB_CMS_ReceiptRequest_free(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_ReceiptRequest * rr));
CMS_CertificateChoices * SAVEDS ASM LIB_CMS_add0_CertificateChoices(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_ContentInfo * cms));
int SAVEDS ASM LIB_CMS_unsigned_add1_attr_by_OBJ(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_SignerInfo * si), REG(a1, const ASN1_OBJECT * obj), REG(d0, int type), REG(a2, const void * bytes), REG(d1, int len));
int SAVEDS ASM LIB_ERR_load_CMS_strings(REG(a6, __IFACE_OR_BASE));
CMS_ContentInfo * SAVEDS ASM LIB_CMS_sign_receipt(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_SignerInfo * si), REG(a1, X509 * signcert), REG(a2, EVP_PKEY * pkey), REG(a3, STACK_OF(X509) * certs), REG(d0, unsigned int flags));
int SAVEDS ASM LIB_i2d_CMS_ContentInfo(REG(a6, __IFACE_OR_BASE), REG(a0, const CMS_ContentInfo * a), REG(a1, unsigned char ** out));
X509_ATTRIBUTE * SAVEDS ASM LIB_CMS_signed_delete_attr(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_SignerInfo * si), REG(d0, int loc));
CMS_ContentInfo * SAVEDS ASM LIB_d2i_CMS_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, CMS_ContentInfo ** cms));
int SAVEDS ASM LIB_CMS_unsigned_get_attr_by_NID(REG(a6, __IFACE_OR_BASE), REG(a0, const CMS_SignerInfo * si), REG(d0, int nid), REG(d1, int lastpos));
int SAVEDS ASM LIB_CMS_verify(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_ContentInfo * cms), REG(a1, STACK_OF(X509) * certs), REG(a2, X509_STORE * store), REG(a3, BIO * dcont), REG(d0, BIO * out), REG(d1, unsigned int flags));
CMS_ContentInfo * SAVEDS ASM LIB_SMIME_read_CMS(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bio), REG(a1, BIO ** biocont));
int SAVEDS ASM LIB_CMS_decrypt_set1_key(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_ContentInfo * cms), REG(a1, unsigned char * key), REG(d0, size_t keylen), REG(a2, const unsigned char * id), REG(d1, size_t idlen));
void SAVEDS ASM LIB_CMS_SignerInfo_get0_algs(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_SignerInfo * si), REG(a1, EVP_PKEY ** pk), REG(a2, X509 ** signer), REG(a3, X509_ALGOR ** pdig), REG(d0, X509_ALGOR ** psig));
int SAVEDS ASM LIB_CMS_add1_cert(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_ContentInfo * cms), REG(a1, X509 * cert));
int SAVEDS ASM LIB_CMS_set_detached(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_ContentInfo * cms), REG(d0, int detached));
CMS_ContentInfo * SAVEDS ASM LIB_CMS_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, STACK_OF(X509) * certs), REG(a1, BIO * in), REG(a2, const EVP_CIPHER * cipher), REG(d0, unsigned int flags));
CMS_ContentInfo * SAVEDS ASM LIB_CMS_EnvelopedData_create(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_CIPHER * cipher));
int SAVEDS ASM LIB_CMS_uncompress(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_ContentInfo * cms), REG(a1, BIO * dcont), REG(a2, BIO * out), REG(d0, unsigned int flags));
int SAVEDS ASM LIB_CMS_add0_crl(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_ContentInfo * cms), REG(a1, X509_CRL * crl));
int SAVEDS ASM LIB_CMS_SignerInfo_verify_content(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_SignerInfo * si), REG(a1, BIO * chain));
void * SAVEDS ASM LIB_CMS_unsigned_get0_data_by_OBJ(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_SignerInfo * si), REG(a1, ASN1_OBJECT * oid), REG(d0, int lastpos), REG(d1, int type));
int SAVEDS ASM LIB_PEM_write_bio_CMS(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * out), REG(a1, const CMS_ContentInfo * cms));
X509_ATTRIBUTE * SAVEDS ASM LIB_CMS_unsigned_get_attr(REG(a6, __IFACE_OR_BASE), REG(a0, const CMS_SignerInfo * si), REG(d0, int loc));
int SAVEDS ASM LIB_CMS_RecipientInfo_ktri_cert_cmp(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_RecipientInfo * ri), REG(a1, X509 * cert));
int SAVEDS ASM LIB_CMS_RecipientInfo_ktri_get0_algs(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_RecipientInfo * ri), REG(a1, EVP_PKEY ** pk), REG(a2, X509 ** recip), REG(a3, X509_ALGOR ** palg));
void SAVEDS ASM LIB_CMS_ContentInfo_free(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_ContentInfo * cms));
int SAVEDS ASM LIB_CMS_final(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_ContentInfo * cms), REG(a1, BIO * data), REG(a2, BIO * dcont), REG(d0, unsigned int flags));
int SAVEDS ASM LIB_CMS_add_simple_smimecap(REG(a6, __IFACE_OR_BASE), REG(a0, STACK_OF(X509_ALGOR) ** algs), REG(d0, int algnid), REG(d1, int keysize));
int SAVEDS ASM LIB_CMS_SignerInfo_verify(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_SignerInfo * si));
int SAVEDS ASM LIB_CMS_data(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_ContentInfo * cms), REG(a1, BIO * out), REG(d0, unsigned int flags));
CMS_ReceiptRequest * SAVEDS ASM LIB_d2i_CMS_ReceiptRequest(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_ReceiptRequest ** a), REG(a1, unsigned char const ** in), REG(a2, long len));
CMS_ContentInfo * SAVEDS ASM LIB_CMS_compress(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * in), REG(d0, int comp_nid), REG(d1, unsigned int flags));
CMS_ContentInfo * SAVEDS ASM LIB_CMS_digest_create(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * in), REG(a1, const EVP_MD * md), REG(d0, unsigned int flags));
int SAVEDS ASM LIB_CMS_SignerInfo_cert_cmp(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_SignerInfo * si), REG(a1, X509 * cert));
int SAVEDS ASM LIB_CMS_SignerInfo_sign(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_SignerInfo * si));
CMS_ContentInfo * SAVEDS ASM LIB_CMS_data_create(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * in), REG(d0, unsigned int flags));
int SAVEDS ASM LIB_i2d_CMS_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, CMS_ContentInfo * cms));
int SAVEDS ASM LIB_CMS_EncryptedData_set1_key(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_ContentInfo * cms), REG(a1, const EVP_CIPHER * ciph), REG(a2, const unsigned char * key), REG(d0, size_t keylen));
int SAVEDS ASM LIB_CMS_decrypt(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_ContentInfo * cms), REG(a1, EVP_PKEY * pkey), REG(a2, X509 * cert), REG(a3, BIO * dcont), REG(d0, BIO * out), REG(d1, unsigned int flags));
X509_ATTRIBUTE * SAVEDS ASM LIB_CMS_unsigned_delete_attr(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_SignerInfo * si), REG(d0, int loc));
int SAVEDS ASM LIB_CMS_unsigned_get_attr_count(REG(a6, __IFACE_OR_BASE), REG(a0, const CMS_SignerInfo * si));
int SAVEDS ASM LIB_CMS_add_smimecap(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_SignerInfo * si), REG(a1, STACK_OF(X509_ALGOR) * algs));
int SAVEDS ASM LIB_CMS_signed_get_attr_by_OBJ(REG(a6, __IFACE_OR_BASE), REG(a0, const CMS_SignerInfo * si), REG(a1, const ASN1_OBJECT * obj), REG(d0, int lastpos));
CMS_ContentInfo * SAVEDS ASM LIB_d2i_CMS_ContentInfo(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_ContentInfo ** a), REG(a1, unsigned char const ** in), REG(a2, long len));
int SAVEDS ASM LIB_CMS_add_standard_smimecap(REG(a6, __IFACE_OR_BASE), REG(a0, STACK_OF(X509_ALGOR) ** smcap));
CMS_ContentInfo * SAVEDS ASM LIB_CMS_ContentInfo_new(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_CMS_RecipientInfo_type(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_RecipientInfo * ri));
const ASN1_OBJECT * SAVEDS ASM LIB_CMS_get0_type(REG(a6, __IFACE_OR_BASE), REG(a0, const CMS_ContentInfo * cms));
int SAVEDS ASM LIB_CMS_is_detached(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_ContentInfo * cms));
CMS_ContentInfo * SAVEDS ASM LIB_CMS_sign(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * signcert), REG(a1, EVP_PKEY * pkey), REG(a2, STACK_OF(X509) * certs), REG(a3, BIO * data), REG(d0, unsigned int flags));
int SAVEDS ASM LIB_CMS_signed_add1_attr(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_SignerInfo * si), REG(a1, X509_ATTRIBUTE * attr));
int SAVEDS ASM LIB_CMS_unsigned_get_attr_by_OBJ(REG(a6, __IFACE_OR_BASE), REG(a0, const CMS_SignerInfo * si), REG(a1, const ASN1_OBJECT * obj), REG(d0, int lastpos));
int SAVEDS ASM LIB_SMIME_write_CMS(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bio), REG(a1, CMS_ContentInfo * cms), REG(a2, BIO * data), REG(d0, int flags));
int SAVEDS ASM LIB_CMS_EncryptedData_decrypt(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_ContentInfo * cms), REG(a1, const unsigned char * key), REG(d0, size_t keylen), REG(a2, BIO * dcont), REG(a3, BIO * out), REG(d1, unsigned int flags));
STACK_OF(CMS_RecipientInfo) * SAVEDS ASM LIB_CMS_get0_RecipientInfos(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_ContentInfo * cms));
CMS_RevocationInfoChoice * SAVEDS ASM LIB_CMS_add0_RevocationInfoChoice(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_ContentInfo * cms));
int SAVEDS ASM LIB_CMS_decrypt_set1_pkey(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_ContentInfo * cms), REG(a1, EVP_PKEY * pk), REG(a2, X509 * cert));
void SAVEDS ASM LIB_CMS_SignerInfo_set1_signer_cert(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_SignerInfo * si), REG(a1, X509 * signer));
STACK_OF(X509) * SAVEDS ASM LIB_CMS_get0_signers(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_ContentInfo * cms));
void SAVEDS ASM LIB_CMS_ReceiptRequest_get0_values(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_ReceiptRequest * rr), REG(a1, ASN1_STRING ** pcid), REG(a2, int * pallorfirst), REG(a3, STACK_OF(GENERAL_NAMES) ** plist), REG(d0, STACK_OF(GENERAL_NAMES) ** prto));
void * SAVEDS ASM LIB_CMS_signed_get0_data_by_OBJ(REG(a6, __IFACE_OR_BASE), REG(a0, const CMS_SignerInfo * si), REG(a1, const ASN1_OBJECT * oid), REG(d0, int lastpos), REG(d1, int type));
STACK_OF(CMS_SignerInfo) * SAVEDS ASM LIB_CMS_get0_SignerInfos(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_ContentInfo * cms));
int SAVEDS ASM LIB_CMS_add0_cert(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_ContentInfo * cms), REG(a1, X509 * cert));
CMS_ContentInfo * SAVEDS ASM LIB_CMS_EncryptedData_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * in), REG(a1, const EVP_CIPHER * cipher), REG(a2, const unsigned char * key), REG(d0, size_t keylen), REG(d1, unsigned int flags));
int SAVEDS ASM LIB_CMS_digest_verify(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_ContentInfo * cms), REG(a1, BIO * dcont), REG(a2, BIO * out), REG(d0, unsigned int flags));
int SAVEDS ASM LIB_CMS_set1_signers_certs(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_ContentInfo * cms), REG(a1, STACK_OF(X509) * certs), REG(d0, unsigned int flags));
X509_ATTRIBUTE * SAVEDS ASM LIB_CMS_signed_get_attr(REG(a6, __IFACE_OR_BASE), REG(a0, const CMS_SignerInfo * si), REG(d0, int loc));
int SAVEDS ASM LIB_CMS_RecipientInfo_set0_key(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_RecipientInfo * ri), REG(a1, unsigned char * key), REG(d0, size_t keylen));
int SAVEDS ASM LIB_CMS_SignedData_init(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_ContentInfo * cms));
int SAVEDS ASM LIB_CMS_RecipientInfo_kekri_get0_id(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_RecipientInfo * ri), REG(a1, X509_ALGOR ** palg), REG(a2, ASN1_OCTET_STRING ** pid), REG(a3, ASN1_GENERALIZEDTIME ** pdate), REG(d0, ASN1_OBJECT ** potherid), REG(d1, ASN1_TYPE ** pothertype));
int SAVEDS ASM LIB_CMS_verify_receipt(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_ContentInfo * rcms), REG(a1, CMS_ContentInfo * ocms), REG(a2, STACK_OF(X509) * certs), REG(a3, X509_STORE * store), REG(d0, unsigned int flags));
CMS_ContentInfo * SAVEDS ASM LIB_PEM_read_bio_CMS(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, CMS_ContentInfo ** x), REG(a2, pem_password_cb * cb), REG(a3, void * u));
STACK_OF(X509_CRL) * SAVEDS ASM LIB_CMS_get1_crls(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_ContentInfo * cms));
CMS_RecipientInfo * SAVEDS ASM LIB_CMS_add0_recipient_key(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_ContentInfo * cms), REG(d0, int nid), REG(a1, unsigned char * key), REG(d1, size_t keylen), REG(a2, unsigned char * id), REG(d2, size_t idlen), REG(a3, ASN1_GENERALIZEDTIME * date), REG(d3, ASN1_OBJECT * otherTypeId), REG(d4, ASN1_TYPE * otherType));
CMS_ReceiptRequest * SAVEDS ASM LIB_CMS_ReceiptRequest_new(REG(a6, __IFACE_OR_BASE));
ASN1_OCTET_STRING ** SAVEDS ASM LIB_CMS_get0_content(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_ContentInfo * cms));
int SAVEDS ASM LIB_CMS_get1_ReceiptRequest(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_SignerInfo * si), REG(a1, CMS_ReceiptRequest ** prr));
int SAVEDS ASM LIB_CMS_signed_add1_attr_by_OBJ(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_SignerInfo * si), REG(a1, const ASN1_OBJECT * obj), REG(d0, int type), REG(a2, const void * bytes), REG(d1, int len));
int SAVEDS ASM LIB_CMS_RecipientInfo_kekri_id_cmp(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_RecipientInfo * ri), REG(a1, const unsigned char * id), REG(d0, size_t idlen));
int SAVEDS ASM LIB_CMS_add1_ReceiptRequest(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_SignerInfo * si), REG(a1, CMS_ReceiptRequest * rr));
int SAVEDS ASM LIB_CMS_SignerInfo_get0_signer_id(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_SignerInfo * si), REG(a1, ASN1_OCTET_STRING ** keyid), REG(a2, X509_NAME ** issuer), REG(a3, ASN1_INTEGER ** sno));
int SAVEDS ASM LIB_CMS_unsigned_add1_attr_by_NID(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_SignerInfo * si), REG(d0, int nid), REG(d1, int type), REG(a1, const void * bytes), REG(d2, int len));
int SAVEDS ASM LIB_CMS_unsigned_add1_attr(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_SignerInfo * si), REG(a1, X509_ATTRIBUTE * attr));
int SAVEDS ASM LIB_CMS_signed_get_attr_by_NID(REG(a6, __IFACE_OR_BASE), REG(a0, const CMS_SignerInfo * si), REG(d0, int nid), REG(d1, int lastpos));
STACK_OF(X509) * SAVEDS ASM LIB_CMS_get1_certs(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_ContentInfo * cms));
int SAVEDS ASM LIB_CMS_signed_add1_attr_by_NID(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_SignerInfo * si), REG(d0, int nid), REG(d1, int type), REG(a1, const void * bytes), REG(d2, int len));
int SAVEDS ASM LIB_CMS_unsigned_add1_attr_by_txt(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_SignerInfo * si), REG(a1, const char * attrname), REG(d0, int type), REG(a2, const void * bytes), REG(d1, int len));
int SAVEDS ASM LIB_CMS_dataFinal(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_ContentInfo * cms), REG(a1, BIO * bio));
int SAVEDS ASM LIB_CMS_RecipientInfo_ktri_get0_signer_id(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_RecipientInfo * ri), REG(a1, ASN1_OCTET_STRING ** keyid), REG(a2, X509_NAME ** issuer), REG(a3, ASN1_INTEGER ** sno));
int SAVEDS ASM LIB_i2d_CMS_ReceiptRequest(REG(a6, __IFACE_OR_BASE), REG(a0, const CMS_ReceiptRequest * a), REG(a1, unsigned char ** out));
CMS_RecipientInfo * SAVEDS ASM LIB_CMS_add1_recipient_cert(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_ContentInfo * cms), REG(a1, X509 * recip), REG(d0, unsigned int flags));
BIO * SAVEDS ASM LIB_CMS_dataInit(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_ContentInfo * cms), REG(a1, BIO * icont));
int SAVEDS ASM LIB_CMS_signed_add1_attr_by_txt(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_SignerInfo * si), REG(a1, const char * attrname), REG(d0, int type), REG(a2, const void * bytes), REG(d1, int len));
int SAVEDS ASM LIB_CMS_RecipientInfo_decrypt(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_ContentInfo * cms), REG(a1, CMS_RecipientInfo * ri));
int SAVEDS ASM LIB_CMS_signed_get_attr_count(REG(a6, __IFACE_OR_BASE), REG(a0, const CMS_SignerInfo * si));
const ASN1_OBJECT * SAVEDS ASM LIB_CMS_get0_eContentType(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_ContentInfo * cms));
int SAVEDS ASM LIB_CMS_set1_eContentType(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_ContentInfo * cms), REG(a1, const ASN1_OBJECT * oid));
CMS_ReceiptRequest * SAVEDS ASM LIB_CMS_ReceiptRequest_create0(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned char * id), REG(d0, int idlen), REG(d1, int allorfirst), REG(a1, STACK_OF(GENERAL_NAMES) * receiptList), REG(a2, STACK_OF(GENERAL_NAMES) * receiptsTo));
CMS_SignerInfo * SAVEDS ASM LIB_CMS_add1_signer(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_ContentInfo * cms), REG(a1, X509 * signer), REG(a2, EVP_PKEY * pk), REG(a3, const EVP_MD * md), REG(d0, unsigned int flags));
int SAVEDS ASM LIB_CMS_RecipientInfo_set0_pkey(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_RecipientInfo * ri), REG(a1, EVP_PKEY * pkey));
int SAVEDS ASM LIB_ENGINE_set_load_ssl_client_cert_function(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e), REG(a1, ENGINE_SSL_CLIENT_CERT_PTR loadssl_f));
ENGINE_SSL_CLIENT_CERT_PTR SAVEDS ASM LIB_ENGINE_get_ssl_client_cert_function(REG(a6, __IFACE_OR_BASE), REG(a0, const ENGINE * e));
int SAVEDS ASM LIB_ENGINE_load_ssl_client_cert(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e), REG(a1, SSL * s), REG(a2, STACK_OF(X509_NAME) * ca_dn), REG(a3, X509 ** pcert), REG(d0, EVP_PKEY ** ppkey), REG(d1, STACK_OF(X509) ** pother), REG(d2, UI_METHOD * ui_method), REG(d3, void * callback_data));
void SAVEDS ASM LIB_OBSOLETE_ENGINE_load_capi(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_ENGINE_register_pkey_meths(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e));
ENGINE * SAVEDS ASM LIB_ENGINE_get_pkey_asn1_meth_engine(REG(a6, __IFACE_OR_BASE), REG(d0, int nid));
int SAVEDS ASM LIB_WHIRLPOOL_Init(REG(a6, __IFACE_OR_BASE), REG(a0, WHIRLPOOL_CTX * c));
unsigned char * SAVEDS ASM LIB_WHIRLPOOL(REG(a6, __IFACE_OR_BASE), REG(a0, const void * inp), REG(d0, size_t bytes), REG(a1, unsigned char * md));
const EVP_PKEY_ASN1_METHOD * SAVEDS ASM LIB_ENGINE_get_pkey_asn1_meth(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e), REG(d0, int nid));
const EVP_PKEY_METHOD * SAVEDS ASM LIB_ENGINE_get_pkey_meth(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e), REG(d0, int nid));
BIO * SAVEDS ASM LIB_BIO_new_CMS(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * out), REG(a1, CMS_ContentInfo * cms));
int SAVEDS ASM LIB_ENGINE_set_default_pkey_asn1_meths(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e));
void SAVEDS ASM LIB_WHIRLPOOL_BitUpdate(REG(a6, __IFACE_OR_BASE), REG(a0, WHIRLPOOL_CTX * ctx), REG(a1, const void * inp), REG(d0, size_t bits));
int SAVEDS ASM LIB_i2d_CMS_bio_stream(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * out), REG(a1, CMS_ContentInfo * cms), REG(a2, BIO * in), REG(d0, int flags));
int SAVEDS ASM LIB_CMS_stream(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned char *** boundary), REG(a1, CMS_ContentInfo * cms));
const EVP_PKEY_ASN1_METHOD * SAVEDS ASM LIB_ENGINE_pkey_asn1_find_str(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE ** pe), REG(a1, const char * str), REG(d0, int len));
ENGINE_PKEY_METHS_PTR SAVEDS ASM LIB_ENGINE_get_pkey_meths(REG(a6, __IFACE_OR_BASE), REG(a0, const ENGINE * e));
int SAVEDS ASM LIB_ENGINE_register_pkey_asn1_meths(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e));
int SAVEDS ASM LIB_ENGINE_set_default_pkey_meths(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e));
int SAVEDS ASM LIB_HMAC_CTX_copy(REG(a6, __IFACE_OR_BASE), REG(a0, HMAC_CTX * dctx), REG(a1, HMAC_CTX * sctx));
ENGINE_PKEY_ASN1_METHS_PTR SAVEDS ASM LIB_ENGINE_get_pkey_asn1_meths(REG(a6, __IFACE_OR_BASE), REG(a0, const ENGINE * e));
const EVP_MD * SAVEDS ASM LIB_EVP_whirlpool(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_ENGINE_register_all_pkey_meths(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_WHIRLPOOL_Final(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned char * md), REG(a1, WHIRLPOOL_CTX * c));
const EVP_PKEY_ASN1_METHOD * SAVEDS ASM LIB_ENGINE_get_pkey_asn1_meth_str(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e), REG(a1, const char * str), REG(d0, int len));
void SAVEDS ASM LIB_ENGINE_register_all_pkey_asn1_meths(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_CMS_ContentInfo_print_ctx(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * out), REG(a1, const CMS_ContentInfo * x), REG(d0, int indent), REG(a2, const ASN1_PCTX * pctx));
int SAVEDS ASM LIB_CMS_add1_crl(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_ContentInfo * cms), REG(a1, X509_CRL * crl));
int SAVEDS ASM LIB_ENGINE_set_pkey_asn1_meths(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e), REG(a1, ENGINE_PKEY_ASN1_METHS_PTR f));
ENGINE * SAVEDS ASM LIB_ENGINE_get_pkey_meth_engine(REG(a6, __IFACE_OR_BASE), REG(d0, int nid));
int SAVEDS ASM LIB_WHIRLPOOL_Update(REG(a6, __IFACE_OR_BASE), REG(a0, WHIRLPOOL_CTX * c), REG(a1, const void * inp), REG(d0, size_t bytes));
int SAVEDS ASM LIB_PEM_write_bio_CMS_stream(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * out), REG(a1, CMS_ContentInfo * cms), REG(a2, BIO * in), REG(d0, int flags));
void SAVEDS ASM LIB_ENGINE_unregister_pkey_meths(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e));
void SAVEDS ASM LIB_ENGINE_unregister_pkey_asn1_meths(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e));
int SAVEDS ASM LIB_ENGINE_set_pkey_meths(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e), REG(a1, ENGINE_PKEY_METHS_PTR f));
DSA * SAVEDS ASM LIB_DSAparams_dup(REG(a6, __IFACE_OR_BASE), REG(a0, const DSA * x));
DH * SAVEDS ASM LIB_DHparams_dup(REG(a6, __IFACE_OR_BASE), REG(a0, const DH * d));
unsigned long SAVEDS ASM LIB_X509_issuer_name_hash_old(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * a));
unsigned long SAVEDS ASM LIB_X509_subject_name_hash_old(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * x));
SRP_user_pwd * SAVEDS ASM LIB_SRP_VBASE_get_by_user(REG(a6, __IFACE_OR_BASE), REG(a0, SRP_VBASE * vb), REG(a1, char * username));
BIGNUM * SAVEDS ASM LIB_SRP_Calc_server_key(REG(a6, __IFACE_OR_BASE), REG(a0, const BIGNUM * A), REG(a1, const BIGNUM * v), REG(a2, const BIGNUM * u), REG(a3, const BIGNUM * b), REG(d0, const BIGNUM * N));
char * SAVEDS ASM LIB_SRP_create_verifier(REG(a6, __IFACE_OR_BASE), REG(a0, const char * user), REG(a1, const char * pass), REG(a2, char ** salt), REG(a3, char ** verifier), REG(d0, const char * N), REG(d1, const char * g));
int SAVEDS ASM LIB_SRP_create_verifier_BN(REG(a6, __IFACE_OR_BASE), REG(a0, const char * user), REG(a1, const char * pass), REG(a2, BIGNUM ** salt), REG(a3, BIGNUM ** verifier), REG(d0, const BIGNUM * N), REG(d1, const BIGNUM * g));
BIGNUM * SAVEDS ASM LIB_SRP_Calc_u(REG(a6, __IFACE_OR_BASE), REG(a0, const BIGNUM * A), REG(a1, const BIGNUM * B), REG(a2, const BIGNUM * N));
void SAVEDS ASM LIB_SRP_VBASE_free(REG(a6, __IFACE_OR_BASE), REG(a0, SRP_VBASE * vb));
BIGNUM * SAVEDS ASM LIB_SRP_Calc_client_key(REG(a6, __IFACE_OR_BASE), REG(a0, const BIGNUM * N), REG(a1, const BIGNUM * B), REG(a2, const BIGNUM * g), REG(a3, const BIGNUM * x), REG(d0, const BIGNUM * a), REG(d1, const BIGNUM * u));
SRP_gN * SAVEDS ASM LIB_SRP_get_default_gN(REG(a6, __IFACE_OR_BASE), REG(a0, const char * id));
BIGNUM * SAVEDS ASM LIB_SRP_Calc_x(REG(a6, __IFACE_OR_BASE), REG(a0, const BIGNUM * s), REG(a1, const char * user), REG(a2, const char * pass));
BIGNUM * SAVEDS ASM LIB_SRP_Calc_B(REG(a6, __IFACE_OR_BASE), REG(a0, const BIGNUM * b), REG(a1, const BIGNUM * N), REG(a2, const BIGNUM * g), REG(a3, const BIGNUM * v));
SRP_VBASE * SAVEDS ASM LIB_SRP_VBASE_new(REG(a6, __IFACE_OR_BASE), REG(a0, char * seed_key));
char * SAVEDS ASM LIB_SRP_check_known_gN_param(REG(a6, __IFACE_OR_BASE), REG(a0, const BIGNUM * g), REG(a1, const BIGNUM * N));
BIGNUM * SAVEDS ASM LIB_SRP_Calc_A(REG(a6, __IFACE_OR_BASE), REG(a0, const BIGNUM * a), REG(a1, const BIGNUM * N), REG(a2, const BIGNUM * g));
int SAVEDS ASM LIB_SRP_Verify_A_mod_N(REG(a6, __IFACE_OR_BASE), REG(a0, const BIGNUM * A), REG(a1, const BIGNUM * N));
int SAVEDS ASM LIB_SRP_VBASE_init(REG(a6, __IFACE_OR_BASE), REG(a0, SRP_VBASE * vb), REG(a1, char * verifier_file));
int SAVEDS ASM LIB_SRP_Verify_B_mod_N(REG(a6, __IFACE_OR_BASE), REG(a0, const BIGNUM * B), REG(a1, const BIGNUM * N));
int SAVEDS ASM LIB_EC_KEY_set_public_key_affine_coordinates(REG(a6, __IFACE_OR_BASE), REG(a0, EC_KEY * key), REG(a1, BIGNUM * x), REG(a2, BIGNUM * y));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_aes_192_ctr(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_aes_128_ctr(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_aes_256_ctr(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_EC_KEY_get_flags(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_KEY * key));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_aes_128_xts(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_aes_256_xts(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_aes_128_gcm(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_EC_KEY_clear_flags(REG(a6, __IFACE_OR_BASE), REG(a0, EC_KEY * key), REG(d0, int flags));
void SAVEDS ASM LIB_EC_KEY_set_flags(REG(a6, __IFACE_OR_BASE), REG(a0, EC_KEY * key), REG(d0, int flags));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_aes_256_ccm(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_aes_128_ccm(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_aes_192_gcm(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_aes_256_gcm(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_aes_192_ccm(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_rc4_hmac_md5(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_aes_128_cbc_hmac_sha1(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_OBSOLETE_ENGINE_load_rdrand(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_aes_256_cbc_hmac_sha1(REG(a6, __IFACE_OR_BASE));
CMS_RecipientInfo * SAVEDS ASM LIB_CMS_add0_recipient_password(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_ContentInfo * cms), REG(d0, int iter), REG(d1, int wrap_nid), REG(d2, int pbe_nid), REG(a1, unsigned char * pass), REG(d3, ossl_ssize_t passlen), REG(a2, const EVP_CIPHER * kekciph));
int SAVEDS ASM LIB_CMS_decrypt_set1_password(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_ContentInfo * cms), REG(a1, unsigned char * pass), REG(d0, ossl_ssize_t passlen));
int SAVEDS ASM LIB_CMS_RecipientInfo_set0_password(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_RecipientInfo * ri), REG(a1, unsigned char * pass), REG(d0, ossl_ssize_t passlen));
int SAVEDS ASM LIB_X509_REQ_sign_ctx(REG(a6, __IFACE_OR_BASE), REG(a0, X509_REQ * x), REG(a1, EVP_MD_CTX * ctx));
int SAVEDS ASM LIB_X509_CRL_sign_ctx(REG(a6, __IFACE_OR_BASE), REG(a0, X509_CRL * x), REG(a1, EVP_MD_CTX * ctx));
int SAVEDS ASM LIB_X509_signature_dump(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, const ASN1_STRING * sig), REG(d0, int indent));
int SAVEDS ASM LIB_X509_sign_ctx(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * x), REG(a1, EVP_MD_CTX * ctx));
int SAVEDS ASM LIB_ASN1_item_sign_ctx(REG(a6, __IFACE_OR_BASE), REG(a0, const ASN1_ITEM * it), REG(a1, X509_ALGOR * algor1), REG(a2, X509_ALGOR * algor2), REG(a3, ASN1_BIT_STRING * signature), REG(d0, const void * data), REG(d1, EVP_MD_CTX * ctx));
void SAVEDS ASM LIB_X509_STORE_CTX_set0_crls(REG(a6, __IFACE_OR_BASE), REG(a0, X509_STORE_CTX * ctx), REG(a1, STACK_OF(X509_CRL) * sk));
const unsigned char * SAVEDS ASM LIB_SSL_SESSION_get_id(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL_SESSION * s), REG(a1, unsigned int * len));
void SAVEDS ASM LIB_SSL_CTX_sess_set_new_cb(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(a1, int (*new_session_cb)(struct ssl_st *ssl, SSL_SESSION *sess)));
SSL_SESSION * SAVEDS ASM (*LIB_SSL_CTX_sess_get_get_cb(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx)))(SSL *, const unsigned char *, int, int *);
void SAVEDS ASM LIB_SSL_CTX_sess_set_get_cb(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(a1, SSL_SESSION *(*get_session_cb)(SSL *, const unsigned char *, int, int *)));
void  SAVEDS ASM (*LIB_SSL_CTX_get_info_callback(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx)))(const SSL *ssl,int type,int val);
void SAVEDS ASM LIB_SSL_CTX_set_client_cert_cb(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(a1, int (*client_cert_cb)(SSL *ssl, X509 **x509, EVP_PKEY **pkey)));
void SAVEDS ASM LIB_SSL_CTX_sess_set_remove_cb(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(a1, void (*remove_session_cb)(struct ssl_ctx_st *ctx,SSL_SESSION *sess)));
int  SAVEDS ASM (*LIB_SSL_CTX_sess_get_new_cb(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx)))(struct ssl_st *ssl, SSL_SESSION *sess);
int  SAVEDS ASM (*LIB_SSL_CTX_get_client_cert_cb(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx)))(SSL *ssl, X509 **x509, EVP_PKEY **pkey);
void  SAVEDS ASM (*LIB_SSL_CTX_sess_get_remove_cb(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx)))(struct ssl_ctx_st *ctx, SSL_SESSION *sess);
int SAVEDS ASM LIB_PEM_write_bio_SSL_SESSION(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, const SSL_SESSION * x));
SSL_SESSION * SAVEDS ASM LIB_PEM_read_bio_SSL_SESSION(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, SSL_SESSION ** x), REG(a2, pem_password_cb * cb), REG(a3, void * u));
int SAVEDS ASM LIB_BN_X931_generate_Xpq(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * Xp), REG(a1, BIGNUM * Xq), REG(d0, int nbits), REG(a2, BN_CTX * ctx));
const BIGNUM * SAVEDS ASM LIB_BN_get0_nist_prime_384(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_ERR_set_mark(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_BN_BLINDING_invert_ex(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * n), REG(a1, const BIGNUM * r), REG(a2, BN_BLINDING * b), REG(a3, BN_CTX * ctx));
void SAVEDS ASM LIB_NAME_CONSTRAINTS_free(REG(a6, __IFACE_OR_BASE), REG(a0, NAME_CONSTRAINTS * ncons));
void SAVEDS ASM LIB_X509_STORE_CTX_set0_param(REG(a6, __IFACE_OR_BASE), REG(a0, X509_STORE_CTX * ctx), REG(a1, X509_VERIFY_PARAM * param));
void SAVEDS ASM LIB_POLICY_CONSTRAINTS_free(REG(a6, __IFACE_OR_BASE), REG(a0, POLICY_CONSTRAINTS * pcons));
int SAVEDS ASM LIB_BN_nist_mod_192(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * r), REG(a1, const BIGNUM * a), REG(a2, const BIGNUM * p), REG(a3, BN_CTX * ctx));
void SAVEDS ASM LIB_GENERAL_SUBTREE_free(REG(a6, __IFACE_OR_BASE), REG(a0, GENERAL_SUBTREE * sub));
int SAVEDS ASM LIB_PKCS12_add_safe(REG(a6, __IFACE_OR_BASE), REG(a0, STACK_OF(PKCS7) ** psafes), REG(a1, STACK_OF(PKCS12_SAFEBAG) * bags), REG(d0, int safe_nid), REG(d1, int iter), REG(a2, const char * pass));
const BIGNUM * SAVEDS ASM LIB_BN_get0_nist_prime_192(REG(a6, __IFACE_OR_BASE));
unsigned char * SAVEDS ASM LIB_X509_keyid_get0(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * x), REG(a1, int * len));
const X509_POLICY_NODE * SAVEDS ASM LIB_X509_policy_node_get0_parent(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_POLICY_NODE * node));
ASN1_OCTET_STRING * SAVEDS ASM LIB_a2i_IPADDRESS(REG(a6, __IFACE_OR_BASE), REG(a0, const char * ipasc));
void SAVEDS ASM LIB_X509_STORE_CTX_set_depth(REG(a6, __IFACE_OR_BASE), REG(a0, X509_STORE_CTX * ctx), REG(d0, int depth));
int SAVEDS ASM LIB_X509_VERIFY_PARAM_inherit(REG(a6, __IFACE_OR_BASE), REG(a0, X509_VERIFY_PARAM * to), REG(a1, const X509_VERIFY_PARAM * from));
void SAVEDS ASM LIB_X509_VERIFY_PARAM_set_depth(REG(a6, __IFACE_OR_BASE), REG(a0, X509_VERIFY_PARAM * param), REG(d0, int depth));
int SAVEDS ASM LIB_EVP_PKEY_add1_attr_by_txt(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY * key), REG(a1, const char * attrname), REG(d0, int type), REG(a2, const unsigned char * bytes), REG(d1, int len));
void SAVEDS ASM LIB_BN_BLINDING_set_flags(REG(a6, __IFACE_OR_BASE), REG(a0, BN_BLINDING * b), REG(d0, unsigned long l));
int SAVEDS ASM LIB_X509_VERIFY_PARAM_set1_policies(REG(a6, __IFACE_OR_BASE), REG(a0, X509_VERIFY_PARAM * param), REG(a1, STACK_OF(ASN1_OBJECT) * policies));
int SAVEDS ASM LIB_X509_VERIFY_PARAM_set1_name(REG(a6, __IFACE_OR_BASE), REG(a0, X509_VERIFY_PARAM * param), REG(a1, const char * name));
void SAVEDS ASM LIB_POLICY_MAPPING_free(REG(a6, __IFACE_OR_BASE), REG(a0, POLICY_MAPPING * pmap));
int SAVEDS ASM LIB_EVP_PKEY_cmp(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_PKEY * a), REG(a1, const EVP_PKEY * b));
int SAVEDS ASM LIB_X509_policy_level_node_count(REG(a6, __IFACE_OR_BASE), REG(a0, X509_POLICY_LEVEL * level));
X509_ATTRIBUTE * SAVEDS ASM LIB_EVP_PKEY_get_attr(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_PKEY * key), REG(d0, int loc));
GENERAL_SUBTREE * SAVEDS ASM LIB_GENERAL_SUBTREE_new(REG(a6, __IFACE_OR_BASE));
STACK_OF(POLICYQUALINFO) * SAVEDS ASM LIB_X509_policy_node_get0_qualifiers(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_POLICY_NODE * node));
const ASN1_OBJECT * SAVEDS ASM LIB_X509_policy_node_get0_policy(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_POLICY_NODE * node));
PKCS12 * SAVEDS ASM LIB_PKCS12_add_safes(REG(a6, __IFACE_OR_BASE), REG(a0, STACK_OF(PKCS7) * safes), REG(d0, int p7_nid));
int SAVEDS ASM LIB_BN_BLINDING_convert_ex(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * n), REG(a1, BIGNUM * r), REG(a2, BN_BLINDING * b), REG(a3, BN_CTX * ctx));
void SAVEDS ASM LIB_X509_policy_tree_free(REG(a6, __IFACE_OR_BASE), REG(a0, X509_POLICY_TREE * tree));
const BIGNUM * SAVEDS ASM LIB_BN_get0_nist_prime_224(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_BN_GENCB_call(REG(a6, __IFACE_OR_BASE), REG(a0, BN_GENCB * cb), REG(d0, int a), REG(d1, int b));
NAME_CONSTRAINTS * SAVEDS ASM LIB_NAME_CONSTRAINTS_new(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_ECParameters_print(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, const EC_KEY * key));
void * SAVEDS ASM LIB_OBSOLETE_BUF_memdup(REG(a6, __IFACE_OR_BASE), REG(a0, const void * data), REG(d0, size_t siz));
int SAVEDS ASM LIB_X509_VERIFY_PARAM_set_trust(REG(a6, __IFACE_OR_BASE), REG(a0, X509_VERIFY_PARAM * param), REG(d0, int trust));
int SAVEDS ASM LIB_EVP_PKEY_get_attr_count(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_PKEY * key));
X509_VERIFY_PARAM * SAVEDS ASM LIB_X509_STORE_CTX_get0_param(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_STORE_CTX * ctx));
int SAVEDS ASM LIB_X509_STORE_set_depth(REG(a6, __IFACE_OR_BASE), REG(a0, X509_STORE * store), REG(d0, int depth));
char * SAVEDS ASM LIB_OBSOLETE_BUF_strndup(REG(a6, __IFACE_OR_BASE), REG(a0, const char * str), REG(d0, size_t siz));
int SAVEDS ASM LIB_ASN1_put_eoc(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned char ** pp));
void SAVEDS ASM LIB_X509_VERIFY_PARAM_table_cleanup(REG(a6, __IFACE_OR_BASE));
BN_BLINDING * SAVEDS ASM LIB_RSA_setup_blinding(REG(a6, __IFACE_OR_BASE), REG(a0, RSA * rsa), REG(a1, BN_CTX * ctx));
int SAVEDS ASM LIB_OPENSSL_sk_find_ex(REG(a6, __IFACE_OR_BASE), REG(a0, OPENSSL_STACK * st), REG(a1, const void * data));
POLICY_CONSTRAINTS * SAVEDS ASM LIB_POLICY_CONSTRAINTS_new(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_X509_VERIFY_PARAM_get_depth(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_VERIFY_PARAM * param));
int SAVEDS ASM LIB_ASN1_item_ndef_i2d(REG(a6, __IFACE_OR_BASE), REG(a0, const ASN1_VALUE * val), REG(a1, unsigned char ** out), REG(a2, const ASN1_ITEM * it));
int SAVEDS ASM LIB_ERR_pop_to_mark(REG(a6, __IFACE_OR_BASE));
X509_POLICY_NODE * SAVEDS ASM LIB_X509_policy_level_get0_node(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_POLICY_LEVEL * level), REG(d0, int i));
int SAVEDS ASM LIB_i2d_PKCS7_NDEF(REG(a6, __IFACE_OR_BASE), REG(a0, const PKCS7 * a), REG(a1, unsigned char ** out));
ASN1_TYPE * SAVEDS ASM LIB_ASN1_generate_v3(REG(a6, __IFACE_OR_BASE), REG(a0, const char * str), REG(a1, X509V3_CTX * cnf));
int SAVEDS ASM LIB_X509_policy_tree_level_count(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_POLICY_TREE * tree));
int SAVEDS ASM LIB_BN_nist_mod_224(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * r), REG(a1, const BIGNUM * a), REG(a2, const BIGNUM * p), REG(a3, BN_CTX * ctx));
int SAVEDS ASM LIB_BIO_dgram_non_fatal_error(REG(a6, __IFACE_OR_BASE), REG(d0, int error));
ASN1_BIT_STRING * SAVEDS ASM LIB_v2i_ASN1_BIT_STRING(REG(a6, __IFACE_OR_BASE), REG(a0, X509V3_EXT_METHOD * method), REG(a1, X509V3_CTX * ctx), REG(a2, STACK_OF(CONF_VALUE) * nval));
int SAVEDS ASM LIB_X509_STORE_CTX_set_default(REG(a6, __IFACE_OR_BASE), REG(a0, X509_STORE_CTX * ctx), REG(a1, const char * name));
int SAVEDS ASM LIB_X509_VERIFY_PARAM_set1(REG(a6, __IFACE_OR_BASE), REG(a0, X509_VERIFY_PARAM * to), REG(a1, const X509_VERIFY_PARAM * from));
GENERAL_NAME * SAVEDS ASM LIB_v2i_GENERAL_NAME_ex(REG(a6, __IFACE_OR_BASE), REG(a0, GENERAL_NAME * out), REG(a1, const X509V3_EXT_METHOD * method), REG(a2, X509V3_CTX * ctx), REG(a3, CONF_VALUE * cnf), REG(d0, int is_nc));
int SAVEDS ASM LIB_BN_nist_mod_521(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * r), REG(a1, const BIGNUM * a), REG(a2, const BIGNUM * p), REG(a3, BN_CTX * ctx));
X509_POLICY_LEVEL * SAVEDS ASM LIB_X509_policy_tree_get0_level(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_POLICY_TREE * tree), REG(d0, int i));
int SAVEDS ASM LIB_ASN1_const_check_infinite_end(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char ** p), REG(d0, long len));
X509_ATTRIBUTE * SAVEDS ASM LIB_EVP_PKEY_delete_attr(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY * key), REG(d0, int loc));
const BIGNUM * SAVEDS ASM LIB_BN_get0_nist_prime_256(REG(a6, __IFACE_OR_BASE));
STACK_OF(CONF_VALUE) * SAVEDS ASM LIB_i2v_ASN1_BIT_STRING(REG(a6, __IFACE_OR_BASE), REG(a0, X509V3_EXT_METHOD * method), REG(a1, ASN1_BIT_STRING * bits), REG(a2, STACK_OF(CONF_VALUE) * extlist));
int SAVEDS ASM LIB_BN_nist_mod_384(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * r), REG(a1, const BIGNUM * a), REG(a2, const BIGNUM * p), REG(a3, BN_CTX * ctx));
int SAVEDS ASM LIB_EVP_PKEY_get_attr_by_OBJ(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_PKEY * key), REG(a1, const ASN1_OBJECT * obj), REG(d0, int lastpos));
const X509_VERIFY_PARAM * SAVEDS ASM LIB_X509_VERIFY_PARAM_lookup(REG(a6, __IFACE_OR_BASE), REG(a0, const char * name));
int SAVEDS ASM LIB_X509V3_NAME_from_section(REG(a6, __IFACE_OR_BASE), REG(a0, X509_NAME * nm), REG(a1, STACK_OF(CONF_VALUE) * dn_sk), REG(a2, unsigned long chtype));
int SAVEDS ASM LIB_EVP_PKEY_add1_attr(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY * key), REG(a1, X509_ATTRIBUTE * attr));
int SAVEDS ASM LIB_BIO_dump_indent_cb(REG(a6, __IFACE_OR_BASE), REG(a0, int (*cb)(const void *data, size_t len, void *u)), REG(a1, void * u), REG(a2, const void * s), REG(d0, int len), REG(d1, int indent));
int SAVEDS ASM LIB_BN_nist_mod_256(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * r), REG(a1, const BIGNUM * a), REG(a2, const BIGNUM * p), REG(a3, BN_CTX * ctx));
int SAVEDS ASM LIB_X509_VERIFY_PARAM_add0_table(REG(a6, __IFACE_OR_BASE), REG(a0, X509_VERIFY_PARAM * param));
BN_BLINDING * SAVEDS ASM LIB_BN_BLINDING_create_param(REG(a6, __IFACE_OR_BASE), REG(a0, BN_BLINDING * b), REG(a1, const BIGNUM * e), REG(a2, BIGNUM * m), REG(a3, BN_CTX * ctx), REG(d0, int (*bn_mod_exp)(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, const BIGNUM *m, BN_CTX *ctx, BN_MONT_CTX *m_ctx)), REG(d1, BN_MONT_CTX * m_ctx));
const BIGNUM * SAVEDS ASM LIB_BN_get0_nist_prime_521(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_BN_is_prime_fasttest_ex(REG(a6, __IFACE_OR_BASE), REG(a0, const BIGNUM * p), REG(d0, int nchecks), REG(a1, BN_CTX * ctx), REG(d1, int do_trial_devision), REG(a2, BN_GENCB * cb));
int SAVEDS ASM LIB_X509_policy_check(REG(a6, __IFACE_OR_BASE), REG(a0, X509_POLICY_TREE ** ptree), REG(a1, int * pexplicit_policy), REG(a2, STACK_OF(X509) * certs), REG(a3, STACK_OF(ASN1_OBJECT) * policy_oids), REG(d0, unsigned int flags));
int SAVEDS ASM LIB_EVP_PKEY_get_attr_by_NID(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_PKEY * key), REG(d0, int nid), REG(d1, int lastpos));
unsigned long SAVEDS ASM LIB_BN_BLINDING_get_flags(REG(a6, __IFACE_OR_BASE), REG(a0, const BN_BLINDING * b));
PKCS12_SAFEBAG * SAVEDS ASM LIB_PKCS12_add_cert(REG(a6, __IFACE_OR_BASE), REG(a0, STACK_OF(PKCS12_SAFEBAG) ** pbags), REG(a1, X509 * cert));
int SAVEDS ASM LIB_EVP_CIPHER_CTX_rand_key(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_CIPHER_CTX * ctx), REG(a1, unsigned char * key));
ASN1_OCTET_STRING * SAVEDS ASM LIB_a2i_IPADDRESS_NC(REG(a6, __IFACE_OR_BASE), REG(a0, const char * ipasc));
int SAVEDS ASM LIB_PKCS7_set_digest(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7 * p7), REG(a1, const EVP_MD * md));
POLICY_MAPPING * SAVEDS ASM LIB_POLICY_MAPPING_new(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_PKCS7_set0_type_other(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7 * p7), REG(d0, int type), REG(a1, ASN1_TYPE * other));
int SAVEDS ASM LIB_EVP_PKEY_add1_attr_by_OBJ(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY * key), REG(a1, const ASN1_OBJECT * obj), REG(d0, int type), REG(a2, const unsigned char * bytes), REG(d1, int len));
void SAVEDS ASM LIB_X509_VERIFY_PARAM_set_time(REG(a6, __IFACE_OR_BASE), REG(a0, X509_VERIFY_PARAM * param), REG(d0, time_t t));
PKCS12_SAFEBAG * SAVEDS ASM LIB_PKCS12_add_key(REG(a6, __IFACE_OR_BASE), REG(a0, STACK_OF(PKCS12_SAFEBAG) ** pbags), REG(a1, EVP_PKEY * key), REG(d0, int key_usage), REG(d1, int iter), REG(d2, int key_nid), REG(a2, const char * pass));
int SAVEDS ASM LIB_BIO_dump_cb(REG(a6, __IFACE_OR_BASE), REG(a0, int (*cb)(const void *data, size_t len, void *u)), REG(a1, void * u), REG(a2, const void * s), REG(a3, int len));
BIGNUM * SAVEDS ASM LIB_BN_get_rfc3526_prime_8192(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * bn));
int SAVEDS ASM LIB_X509_VERIFY_PARAM_clear_flags(REG(a6, __IFACE_OR_BASE), REG(a0, X509_VERIFY_PARAM * param), REG(d0, unsigned long flags));
BIGNUM * SAVEDS ASM LIB_BN_get_rfc2409_prime_1024(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * bn));
BIGNUM * SAVEDS ASM LIB_BN_get_rfc3526_prime_2048(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * bn));
BIGNUM * SAVEDS ASM LIB_BN_get_rfc3526_prime_6144(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * bn));
BIGNUM * SAVEDS ASM LIB_BN_get_rfc3526_prime_1536(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * bn));
BIGNUM * SAVEDS ASM LIB_BN_get_rfc3526_prime_3072(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * bn));
BIGNUM * SAVEDS ASM LIB_BN_get_rfc3526_prime_4096(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * bn));
BIGNUM * SAVEDS ASM LIB_BN_get_rfc2409_prime_768(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * bn));
unsigned long SAVEDS ASM LIB_X509_VERIFY_PARAM_get_flags(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_VERIFY_PARAM * param));
EVP_CIPHER_CTX * SAVEDS ASM LIB_EVP_CIPHER_CTX_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_EVP_CIPHER_CTX_free(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_CIPHER_CTX * a));
int SAVEDS ASM LIB_EVP_CIPHER_get_block_size(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_CIPHER * cipher));
void SAVEDS ASM LIB_EVP_CIPHER_CTX_set_app_data(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_CIPHER_CTX * ctx), REG(a1, void * data));
int SAVEDS ASM LIB_BIO_method_type(REG(a6, __IFACE_OR_BASE), REG(a0, const BIO * b));
int SAVEDS ASM LIB_EVP_CIPHER_CTX_get_nid(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_CIPHER_CTX * ctx));
int SAVEDS ASM LIB_EVP_CIPHER_CTX_get_key_length(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_CIPHER_CTX * ctx));
int SAVEDS ASM LIB_EVP_MD_get_size(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_MD * md));
int SAVEDS ASM LIB_EVP_MD_CTX_test_flags(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_MD_CTX * ctx), REG(d0, int flags));
void SAVEDS ASM LIB_BIO_clear_flags(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * b), REG(d0, int flags));
int SAVEDS ASM LIB_EVP_MD_get_pkey_type(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_MD * md));
void SAVEDS ASM LIB_EVP_MD_CTX_clear_flags(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_MD_CTX * ctx), REG(d0, int flags));
unsigned long SAVEDS ASM LIB_EVP_CIPHER_get_flags(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_CIPHER * cipher));
BIO_callback_fn SAVEDS ASM LIB_BIO_get_callback(REG(a6, __IFACE_OR_BASE), REG(a0, const BIO * b));
int SAVEDS ASM LIB_EVP_CIPHER_get_key_length(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_CIPHER * cipher));
int SAVEDS ASM LIB_EVP_Cipher(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_CIPHER_CTX * c), REG(a1, unsigned char * out), REG(a2, const unsigned char * in), REG(d0, unsigned int inl));
int SAVEDS ASM LIB_EVP_CIPHER_CTX_get_block_size(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_CIPHER_CTX * ctx));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_CIPHER_CTX_cipher(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_CIPHER_CTX * ctx));
void * SAVEDS ASM LIB_EVP_CIPHER_CTX_get_app_data(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_CIPHER_CTX * ctx));
int SAVEDS ASM LIB_EVP_MD_get_block_size(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_MD * md));
unsigned long SAVEDS ASM LIB_OBSOLETE_EVP_CIPHER_CTX_flags(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_CIPHER_CTX * ctx));
const EVP_MD * SAVEDS ASM LIB_EVP_MD_CTX_md(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_MD_CTX * ctx));
const char * SAVEDS ASM LIB_BIO_method_name(REG(a6, __IFACE_OR_BASE), REG(a0, const BIO * b));
int SAVEDS ASM LIB_EVP_CIPHER_CTX_get_iv_length(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_CIPHER_CTX * ctx));
int SAVEDS ASM LIB_CRYPTO_memcmp(REG(a6, __IFACE_OR_BASE), REG(a0, const void * in_a), REG(a1, const void * in_b), REG(d0, size_t len));
void SAVEDS ASM LIB_BN_consttime_swap(REG(a6, __IFACE_OR_BASE), REG(d0, BN_ULONG swap), REG(a0, BIGNUM * a), REG(a1, BIGNUM * b), REG(d1, int nwords));
int SAVEDS ASM LIB_i2d_X509_EXTENSIONS(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_EXTENSIONS * a), REG(a1, unsigned char ** out));
X509_EXTENSIONS * SAVEDS ASM LIB_d2i_X509_EXTENSIONS(REG(a6, __IFACE_OR_BASE), REG(a0, X509_EXTENSIONS ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
void SAVEDS ASM LIB_X509_ALGOR_get0(REG(a6, __IFACE_OR_BASE), REG(a0, const ASN1_OBJECT ** pobj), REG(a1, int * pptype), REG(a2, const void ** ppval), REG(a3, const X509_ALGOR * algor));
int SAVEDS ASM LIB_X509_ALGOR_set0(REG(a6, __IFACE_OR_BASE), REG(a0, X509_ALGOR * alg), REG(a1, ASN1_OBJECT * aobj), REG(d0, int ptype), REG(a2, void * pval));
void * SAVEDS ASM LIB_X509at_get0_data_by_OBJ(REG(a6, __IFACE_OR_BASE), REG(a0, const STACK_OF(X509_ATTRIBUTE) * x), REG(a1, const ASN1_OBJECT * obj), REG(d0, int lastpos), REG(d1, int type));
int SAVEDS ASM LIB_ASN1_TYPE_set1(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_TYPE * a), REG(d0, int type), REG(a1, const void * value));
void SAVEDS ASM LIB_ASN1_STRING_set0(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_STRING * str), REG(a1, void * data), REG(d0, int len));
int SAVEDS ASM LIB_i2d_X509_ALGORS(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_ALGORS * a), REG(a1, unsigned char ** out));
X509_ALGORS * SAVEDS ASM LIB_d2i_X509_ALGORS(REG(a6, __IFACE_OR_BASE), REG(a0, X509_ALGORS ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
ASN1_VALUE * SAVEDS ASM LIB_SMIME_read_ASN1(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bio), REG(a1, BIO ** bcont), REG(a2, const ASN1_ITEM * it));
int SAVEDS ASM LIB_OPENSSL_isservice(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_EVP_CIPHER_CTX_clear_flags(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_CIPHER_CTX * ctx), REG(d0, int flags));
int SAVEDS ASM LIB_BN_X931_generate_prime_ex(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * p), REG(a1, BIGNUM * p1), REG(a2, BIGNUM * p2), REG(a3, BIGNUM * Xp1), REG(d0, BIGNUM * Xp2), REG(d1, const BIGNUM * Xp), REG(d2, const BIGNUM * e), REG(d3, BN_CTX * ctx), REG(d4, BN_GENCB * cb));
int SAVEDS ASM LIB_EVP_CIPHER_CTX_test_flags(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_CIPHER_CTX * ctx), REG(d0, int flags));
void SAVEDS ASM LIB_EVP_add_alg_module(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_BN_X931_derive_prime_ex(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * p), REG(a1, BIGNUM * p1), REG(a2, BIGNUM * p2), REG(d0, const BIGNUM * Xp), REG(a3, const BIGNUM * Xp1), REG(d1, const BIGNUM * Xp2), REG(d2, const BIGNUM * e), REG(d3, BN_CTX * ctx), REG(d4, BN_GENCB * cb));
void SAVEDS ASM LIB_OPENSSL_init(REG(a6, __IFACE_OR_BASE));
char * SAVEDS ASM LIB_CRYPTO_strdup(REG(a6, __IFACE_OR_BASE), REG(a0, const char * str), REG(a1, const char * file), REG(d0, int line));
int SAVEDS ASM LIB_i2d_TS_ACCURACY(REG(a6, __IFACE_OR_BASE), REG(a0, const TS_ACCURACY * a), REG(a1, unsigned char ** pp));
int SAVEDS ASM LIB_i2d_TS_MSG_IMPRINT(REG(a6, __IFACE_OR_BASE), REG(a0, const TS_MSG_IMPRINT * a), REG(a1, unsigned char ** pp));
int SAVEDS ASM LIB_EVP_PKEY_print_public(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * out), REG(a1, const EVP_PKEY * pkey), REG(d0, int indent), REG(a2, ASN1_PCTX * pctx));
EVP_PKEY_CTX * SAVEDS ASM LIB_EVP_PKEY_CTX_new(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY * pkey), REG(a1, ENGINE * e));
int SAVEDS ASM LIB_i2d_TS_TST_INFO(REG(a6, __IFACE_OR_BASE), REG(a0, const TS_TST_INFO * a), REG(a1, unsigned char ** pp));
const EVP_PKEY_ASN1_METHOD * SAVEDS ASM LIB_EVP_PKEY_asn1_find(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE ** pe), REG(a1, int type));
X509 * SAVEDS ASM LIB_TS_CONF_load_cert(REG(a6, __IFACE_OR_BASE), REG(a0, const char * file));
X509_EXTENSION * SAVEDS ASM LIB_TS_REQ_get_ext(REG(a6, __IFACE_OR_BASE), REG(a0, TS_REQ * a), REG(d0, int loc));
int SAVEDS ASM LIB_EVP_PKEY_sign_init(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx));
int SAVEDS ASM LIB_ASN1_item_print(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * out), REG(a1, const ASN1_VALUE * ifld), REG(d0, int indent), REG(a2, const ASN1_ITEM * it), REG(a3, const ASN1_PCTX * ctx));
int SAVEDS ASM LIB_TS_TST_INFO_set_nonce(REG(a6, __IFACE_OR_BASE), REG(a0, TS_TST_INFO * a), REG(a1, const ASN1_INTEGER * nonce));
TS_RESP * SAVEDS ASM LIB_TS_RESP_dup(REG(a6, __IFACE_OR_BASE), REG(a0, const TS_RESP * a));
int SAVEDS ASM LIB_EVP_PKEY_asn1_add0(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_PKEY_ASN1_METHOD * ameth));
int SAVEDS ASM LIB_PKCS7_add0_attrib_signing_time(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7_SIGNER_INFO * si), REG(a1, ASN1_TIME * t));
int SAVEDS ASM LIB_BIO_asn1_get_prefix(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * b), REG(a1, asn1_ps_func ** pprefix), REG(a2, asn1_ps_func ** pprefix_free));
int SAVEDS ASM LIB_TS_TST_INFO_set_time(REG(a6, __IFACE_OR_BASE), REG(a0, TS_TST_INFO * a), REG(a1, const ASN1_GENERALIZEDTIME * gtime));
void SAVEDS ASM LIB_EVP_PKEY_meth_set_decrypt(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_METHOD * pmeth), REG(a1, int (*decrypt_init)(EVP_PKEY_CTX *ctx)), REG(a2, int (*decrypt)(EVP_PKEY_CTX *ctx, unsigned char *out, size_t *outlen, const unsigned char *in, size_t inlen)));
int SAVEDS ASM LIB_EVP_PKEY_set_type_str(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY * pkey), REG(a1, const char * str), REG(d0, int len));
int SAVEDS ASM LIB_EVP_PKEY_CTX_get_keygen_info(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(d0, int idx));
int SAVEDS ASM LIB_TS_REQ_set_policy_id(REG(a6, __IFACE_OR_BASE), REG(a0, TS_REQ * a), REG(a1, const ASN1_OBJECT * policy));
int SAVEDS ASM LIB_TS_RESP_set_status_info(REG(a6, __IFACE_OR_BASE), REG(a0, TS_RESP * a), REG(a1, TS_STATUS_INFO * info));
int SAVEDS ASM LIB_EVP_PKEY_keygen(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(a1, EVP_PKEY ** ppkey));
int SAVEDS ASM LIB_EVP_DigestSignInit(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_MD_CTX * ctx), REG(a1, EVP_PKEY_CTX ** pctx), REG(a2, const EVP_MD * type), REG(a3, ENGINE * e), REG(d0, EVP_PKEY * pkey));
int SAVEDS ASM LIB_TS_ACCURACY_set_millis(REG(a6, __IFACE_OR_BASE), REG(a0, TS_ACCURACY * a), REG(a1, const ASN1_INTEGER * millis));
TS_REQ * SAVEDS ASM LIB_TS_REQ_dup(REG(a6, __IFACE_OR_BASE), REG(a0, const TS_REQ * a));
GENERAL_NAME * SAVEDS ASM LIB_GENERAL_NAME_dup(REG(a6, __IFACE_OR_BASE), REG(a0, const GENERAL_NAME * a));
STACK_OF(X509_CRL) * SAVEDS ASM LIB_X509_STORE_CTX_get1_crls(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_STORE_CTX * st), REG(a1, const X509_NAME * nm));
EVP_PKEY_ASN1_METHOD * SAVEDS ASM LIB_EVP_PKEY_asn1_new(REG(a6, __IFACE_OR_BASE), REG(d0, int id), REG(d1, int flags), REG(a0, const char * pem_str), REG(a1, const char * info));
BIO * SAVEDS ASM LIB_BIO_new_NDEF(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * out), REG(a1, ASN1_VALUE * val), REG(a2, const ASN1_ITEM * it));
int SAVEDS ASM LIB_TS_MSG_IMPRINT_set_algo(REG(a6, __IFACE_OR_BASE), REG(a0, TS_MSG_IMPRINT * a), REG(a1, X509_ALGOR * alg));
int SAVEDS ASM LIB_i2d_TS_TST_INFO_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * fp), REG(a1, const TS_TST_INFO * a));
int SAVEDS ASM LIB_TS_TST_INFO_set_ordering(REG(a6, __IFACE_OR_BASE), REG(a0, TS_TST_INFO * a), REG(d0, int ordering));
int SAVEDS ASM LIB_TS_TST_INFO_get_ext_by_OBJ(REG(a6, __IFACE_OR_BASE), REG(a0, TS_TST_INFO * a), REG(a1, const ASN1_OBJECT * obj), REG(d0, int lastpos));
const char * SAVEDS ASM LIB_TS_CONF_get_tsa_section(REG(a6, __IFACE_OR_BASE), REG(a0, CONF * conf), REG(a1, const char * section));
int SAVEDS ASM LIB_SMIME_write_ASN1(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bio), REG(a1, ASN1_VALUE * val), REG(a2, BIO * data), REG(a3, int flags), REG(d0, int ctype_nid), REG(d1, int econt_nid), REG(d2, STACK_OF(X509_ALGOR) * mdalgs), REG(d3, const ASN1_ITEM * it));
int SAVEDS ASM LIB_TS_RESP_CTX_set_signer_key(REG(a6, __IFACE_OR_BASE), REG(a0, TS_RESP_CTX * ctx), REG(a1, EVP_PKEY * key));
int SAVEDS ASM LIB_EVP_PKEY_encrypt_old(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned char * enc_key), REG(a1, const unsigned char * key), REG(d0, int key_len), REG(a2, EVP_PKEY * pub_key));
int SAVEDS ASM LIB_EVP_PKEY_encrypt_init(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx));
unsigned long SAVEDS ASM LIB_ASN1_PCTX_get_cert_flags(REG(a6, __IFACE_OR_BASE), REG(a0, const ASN1_PCTX * p));
int SAVEDS ASM LIB_i2d_ESS_SIGNING_CERT(REG(a6, __IFACE_OR_BASE), REG(a0, const ESS_SIGNING_CERT * a), REG(a1, unsigned char ** pp));
EVP_PKEY * SAVEDS ASM LIB_TS_CONF_load_key(REG(a6, __IFACE_OR_BASE), REG(a0, const char * file), REG(a1, const char * pass));
int SAVEDS ASM LIB_i2d_ASN1_SEQUENCE_ANY(REG(a6, __IFACE_OR_BASE), REG(a0, const ASN1_SEQUENCE_ANY * a), REG(a1, unsigned char ** pp));
TS_MSG_IMPRINT * SAVEDS ASM LIB_d2i_TS_MSG_IMPRINT_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * fp), REG(a1, TS_MSG_IMPRINT ** a));
void SAVEDS ASM LIB_EVP_PKEY_asn1_set_public(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_ASN1_METHOD * ameth), REG(a1, int (*pub_decode)(EVP_PKEY *pk, const X509_PUBKEY *pub)), REG(a2, int (*pub_encode)(X509_PUBKEY *pub, const EVP_PKEY *pk)), REG(a3, int (*pub_cmp)(const EVP_PKEY *a, const EVP_PKEY *b)), REG(d0, int (*pub_print)(BIO *out, const EVP_PKEY *pkey, int indent, ASN1_PCTX *pctx)), REG(d1, int (*pkey_size)(const EVP_PKEY *pk)), REG(d2, int (*pkey_bits)(const EVP_PKEY *pk)));
EVP_PKEY * SAVEDS ASM LIB_b2i_PublicKey_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * in));
int SAVEDS ASM LIB_BIO_asn1_set_prefix(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * b), REG(a1, asn1_ps_func * prefix), REG(a2, asn1_ps_func * prefix_free));
EVP_PKEY * SAVEDS ASM LIB_EVP_PKEY_new_mac_key(REG(a6, __IFACE_OR_BASE), REG(a0, int type), REG(a1, ENGINE * e), REG(a2, const unsigned char * key), REG(d0, int keylen));
void SAVEDS ASM LIB_TS_REQ_ext_free(REG(a6, __IFACE_OR_BASE), REG(a0, TS_REQ * a));
void SAVEDS ASM LIB_EVP_PKEY_asn1_set_free(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_ASN1_METHOD * ameth), REG(a1, void (*pkey_free)(EVP_PKEY *pkey)));
const EVP_PKEY_ASN1_METHOD * SAVEDS ASM LIB_EVP_PKEY_get0_asn1(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_PKEY * pkey));
int SAVEDS ASM LIB_EVP_PKEY_verify_recover_init(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx));
void SAVEDS ASM LIB_EVP_PKEY_CTX_set_data(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(a1, void * data));
int SAVEDS ASM LIB_EVP_PKEY_keygen_init(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx));
int SAVEDS ASM LIB_TS_RESP_CTX_set_status_info(REG(a6, __IFACE_OR_BASE), REG(a0, TS_RESP_CTX * ctx), REG(d0, int status), REG(a1, const char * text));
X509_ALGOR * SAVEDS ASM LIB_TS_MSG_IMPRINT_get_algo(REG(a6, __IFACE_OR_BASE), REG(a0, TS_MSG_IMPRINT * a));
int SAVEDS ASM LIB_TS_REQ_print_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bio), REG(a1, TS_REQ * a));
int SAVEDS ASM LIB_EVP_PKEY_CTX_ctrl_str(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(a1, const char * type), REG(a2, const char * value));
int SAVEDS ASM LIB_EVP_PKEY_get_default_digest_nid(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY * pkey), REG(a1, int * pnid));
int SAVEDS ASM LIB_PEM_write_bio_PKCS7_stream(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * out), REG(a1, PKCS7 * p7), REG(a2, BIO * in), REG(d0, int flags));
int SAVEDS ASM LIB_TS_MSG_IMPRINT_print_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bio), REG(a1, TS_MSG_IMPRINT * msg));
int SAVEDS ASM LIB_BN_asc2bn(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM ** a), REG(a1, const char * str));
ASN1_OBJECT * SAVEDS ASM LIB_TS_REQ_get_policy_id(REG(a6, __IFACE_OR_BASE), REG(a0, TS_REQ * a));
TS_ACCURACY * SAVEDS ASM LIB_d2i_TS_ACCURACY(REG(a6, __IFACE_OR_BASE), REG(a0, TS_ACCURACY ** a), REG(a1, const unsigned char ** pp), REG(d0, long length));
void * SAVEDS ASM LIB_DSO_global_lookup(REG(a6, __IFACE_OR_BASE), REG(a0, const char * name));
int SAVEDS ASM LIB_TS_CONF_set_tsa_name(REG(a6, __IFACE_OR_BASE), REG(a0, CONF * conf), REG(a1, const char * section), REG(a2, TS_RESP_CTX * ctx));
int SAVEDS ASM LIB_i2d_ASN1_SET_ANY(REG(a6, __IFACE_OR_BASE), REG(a0, const ASN1_SEQUENCE_ANY * a), REG(a1, unsigned char ** pp));
unsigned long SAVEDS ASM LIB_ASN1_PCTX_get_flags(REG(a6, __IFACE_OR_BASE), REG(a0, const ASN1_PCTX * p));
int SAVEDS ASM LIB_TS_TST_INFO_get_ext_by_NID(REG(a6, __IFACE_OR_BASE), REG(a0, TS_TST_INFO * a), REG(d0, int nid), REG(d1, int lastpos));
TS_RESP * SAVEDS ASM LIB_TS_RESP_new(REG(a6, __IFACE_OR_BASE));
ESS_CERT_ID * SAVEDS ASM LIB_ESS_CERT_ID_dup(REG(a6, __IFACE_OR_BASE), REG(a0, const ESS_CERT_ID * a));
TS_STATUS_INFO * SAVEDS ASM LIB_TS_STATUS_INFO_dup(REG(a6, __IFACE_OR_BASE), REG(a0, const TS_STATUS_INFO * a));
X509_EXTENSION * SAVEDS ASM LIB_TS_REQ_delete_ext(REG(a6, __IFACE_OR_BASE), REG(a0, TS_REQ * a), REG(d0, int loc));
int SAVEDS ASM LIB_EVP_DigestVerifyFinal(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_MD_CTX * ctx), REG(a1, const unsigned char * sig), REG(d0, size_t siglen));
int SAVEDS ASM LIB_EVP_PKEY_print_params(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * out), REG(a1, const EVP_PKEY * pkey), REG(d0, int inden), REG(a2, ASN1_PCTX * pctx));
TS_MSG_IMPRINT * SAVEDS ASM LIB_TS_REQ_get_msg_imprint(REG(a6, __IFACE_OR_BASE), REG(a0, TS_REQ * a));
int SAVEDS ASM LIB_OBJ_find_sigid_by_algs(REG(a6, __IFACE_OR_BASE), REG(a0, int * psignid), REG(d0, int dig_nid), REG(d1, int pkey_nid));
const ASN1_INTEGER * SAVEDS ASM LIB_TS_TST_INFO_get_serial(REG(a6, __IFACE_OR_BASE), REG(a0, const TS_TST_INFO * a));
const ASN1_INTEGER * SAVEDS ASM LIB_TS_REQ_get_nonce(REG(a6, __IFACE_OR_BASE), REG(a0, const TS_REQ * a));
int SAVEDS ASM LIB_X509_PUBKEY_set0_param(REG(a6, __IFACE_OR_BASE), REG(a0, X509_PUBKEY * pub), REG(a1, ASN1_OBJECT * aobj), REG(d0, int ptype), REG(a2, void * pval), REG(a3, unsigned char * penc), REG(d1, int penclen));
void SAVEDS ASM LIB_EVP_PKEY_CTX_set0_keygen_info(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(a1, int * dat), REG(d0, int datlen));
int SAVEDS ASM LIB_DIST_POINT_set_dpname(REG(a6, __IFACE_OR_BASE), REG(a0, DIST_POINT_NAME * dpn), REG(a1, const X509_NAME * iname));
int SAVEDS ASM LIB_i2d_ISSUING_DIST_POINT(REG(a6, __IFACE_OR_BASE), REG(a0, const ISSUING_DIST_POINT * a), REG(a1, unsigned char ** pp));
void * SAVEDS ASM LIB_EVP_PKEY_CTX_get_data(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_PKEY_CTX * ctx));
int SAVEDS ASM LIB_TS_STATUS_INFO_print_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bio), REG(a1, TS_STATUS_INFO * a));
int SAVEDS ASM LIB_EVP_PKEY_derive_init(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx));
TS_TST_INFO * SAVEDS ASM LIB_d2i_TS_TST_INFO(REG(a6, __IFACE_OR_BASE), REG(a0, TS_TST_INFO ** a), REG(a1, const unsigned char ** pp), REG(d0, long length));
int SAVEDS ASM LIB_EVP_PKEY_asn1_add_alias(REG(a6, __IFACE_OR_BASE), REG(d0, int to), REG(d1, int from));
TS_RESP * SAVEDS ASM LIB_d2i_TS_RESP_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * fp), REG(a1, TS_RESP ** a));
int SAVEDS ASM LIB_OTHERNAME_cmp(REG(a6, __IFACE_OR_BASE), REG(a0, OTHERNAME * a), REG(a1, OTHERNAME * b));
void SAVEDS ASM LIB_GENERAL_NAME_set0_value(REG(a6, __IFACE_OR_BASE), REG(a0, GENERAL_NAME * a), REG(d0, int type), REG(a1, void * value));
void SAVEDS ASM LIB_PKCS7_RECIP_INFO_get0_alg(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7_RECIP_INFO * ri), REG(a1, X509_ALGOR ** penc));
TS_RESP_CTX * SAVEDS ASM LIB_TS_RESP_CTX_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_TS_RESP_set_tst_info(REG(a6, __IFACE_OR_BASE), REG(a0, TS_RESP * a), REG(a1, PKCS7 * p7), REG(a2, TS_TST_INFO * tst_info));
int SAVEDS ASM LIB_PKCS7_final(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7 * p7), REG(a1, BIO * data), REG(d0, int flags));
int SAVEDS ASM LIB_EVP_PKEY_get_base_id(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_PKEY * pkey));
int SAVEDS ASM LIB_TS_RESP_CTX_set_signer_cert(REG(a6, __IFACE_OR_BASE), REG(a0, TS_RESP_CTX * ctx), REG(a1, X509 * signer));
int SAVEDS ASM LIB_TS_REQ_set_msg_imprint(REG(a6, __IFACE_OR_BASE), REG(a0, TS_REQ * a), REG(a1, TS_MSG_IMPRINT * msg_imprint));
int SAVEDS ASM LIB_EVP_PKEY_CTX_ctrl(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(d0, int keytype), REG(d1, int optype), REG(d2, int cmd), REG(d3, int p1), REG(a1, void * p2));
int SAVEDS ASM LIB_TS_CONF_set_digests(REG(a6, __IFACE_OR_BASE), REG(a0, CONF * conf), REG(a1, const char * section), REG(a2, TS_RESP_CTX * ctx));
TS_MSG_IMPRINT * SAVEDS ASM LIB_d2i_TS_MSG_IMPRINT(REG(a6, __IFACE_OR_BASE), REG(a0, TS_MSG_IMPRINT ** a), REG(a1, const unsigned char ** pp), REG(d0, long length));
void SAVEDS ASM LIB_EVP_PKEY_meth_set_ctrl(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_METHOD * pmeth), REG(a1, int (*ctrl)(EVP_PKEY_CTX *ctx, int type, int p1, void *p2)), REG(a2, int (*ctrl_str)(EVP_PKEY_CTX *ctx, const char *type, const char *value)));
int SAVEDS ASM LIB_TS_REQ_get_ext_by_NID(REG(a6, __IFACE_OR_BASE), REG(a0, TS_REQ * a), REG(d0, int nid), REG(d1, int lastpos));
int SAVEDS ASM LIB_PKCS5_pbe_set0_algor(REG(a6, __IFACE_OR_BASE), REG(a0, X509_ALGOR * algor), REG(d0, int alg), REG(d1, int iter), REG(a1, const unsigned char * salt), REG(d2, int saltlen));
TS_ACCURACY * SAVEDS ASM LIB_TS_ACCURACY_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_X509_CRL_METHOD_free(REG(a6, __IFACE_OR_BASE), REG(a0, X509_CRL_METHOD * m));
unsigned long SAVEDS ASM LIB_ASN1_PCTX_get_nm_flags(REG(a6, __IFACE_OR_BASE), REG(a0, const ASN1_PCTX * p));
void SAVEDS ASM LIB_EVP_PKEY_meth_set_sign(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_METHOD * pmeth), REG(a1, int (*sign_init)(EVP_PKEY_CTX *ctx)), REG(a2, int (*sign)(EVP_PKEY_CTX *ctx, unsigned char *sig, size_t *siglen, const unsigned char *tbs, size_t tbslen)));
int SAVEDS ASM LIB_EVP_PKEY_decrypt_init(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx));
int SAVEDS ASM LIB_i2b_PVK_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * out), REG(a1, const EVP_PKEY * pk), REG(d0, int enclevel), REG(a2, pem_password_cb * cb), REG(a3, void * u));
int SAVEDS ASM LIB_EVP_PKEY_print_private(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * out), REG(a1, const EVP_PKEY * pkey), REG(d0, int indent), REG(a2, ASN1_PCTX * pctx));
void * SAVEDS ASM LIB_GENERAL_NAME_get0_value(REG(a6, __IFACE_OR_BASE), REG(a0, const GENERAL_NAME * a), REG(a1, int * ptype));
EVP_PKEY * SAVEDS ASM LIB_b2i_PVK_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * in), REG(a1, pem_password_cb * cb), REG(a2, void * u));
ASN1_UTCTIME * SAVEDS ASM LIB_ASN1_UTCTIME_adj(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_UTCTIME * s), REG(d0, time_t t), REG(d1, int offset_day), REG(d2, long offset_sec));
TS_TST_INFO * SAVEDS ASM LIB_TS_TST_INFO_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_EVP_MD_do_all_sorted(REG(a6, __IFACE_OR_BASE), REG(a0, void (*fn)(const EVP_MD *ciph, const char *from, const char *to, void *x)), REG(a1, void * arg));
int SAVEDS ASM LIB_TS_CONF_set_default_engine(REG(a6, __IFACE_OR_BASE), REG(a0, const char * name));
int SAVEDS ASM LIB_TS_ACCURACY_set_seconds(REG(a6, __IFACE_OR_BASE), REG(a0, TS_ACCURACY * a), REG(a1, const ASN1_INTEGER * seconds));
const ASN1_GENERALIZEDTIME * SAVEDS ASM LIB_TS_TST_INFO_get_time(REG(a6, __IFACE_OR_BASE), REG(a0, const TS_TST_INFO * a));
int SAVEDS ASM LIB_PKCS8_pkey_get0(REG(a6, __IFACE_OR_BASE), REG(a0, const ASN1_OBJECT ** ppkalg), REG(a1, const unsigned char ** pk), REG(a2, int * ppklen), REG(a3, const X509_ALGOR ** pa), REG(d0, const PKCS8_PRIV_KEY_INFO * p8));
const EVP_PKEY_ASN1_METHOD * SAVEDS ASM LIB_EVP_PKEY_asn1_get0(REG(a6, __IFACE_OR_BASE), REG(d0, int idx));
int SAVEDS ASM LIB_OBJ_add_sigid(REG(a6, __IFACE_OR_BASE), REG(d0, int signid), REG(d1, int dig_id), REG(d2, int pkey_id));
int SAVEDS ASM LIB_PKCS7_SIGNER_INFO_sign(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7_SIGNER_INFO * si));
int SAVEDS ASM LIB_EVP_PKEY_paramgen_init(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx));
int SAVEDS ASM LIB_EVP_PKEY_sign(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(a1, unsigned char * sig), REG(d0, size_t * siglen), REG(a2, const unsigned char * tbs), REG(d1, size_t tbslen));
void SAVEDS ASM LIB_OBJ_sigid_free(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_EVP_PKEY_meth_set_init(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_METHOD * pmeth), REG(a1, int (*init)(EVP_PKEY_CTX *ctx)));
ESS_ISSUER_SERIAL * SAVEDS ASM LIB_d2i_ESS_ISSUER_SERIAL(REG(a6, __IFACE_OR_BASE), REG(a0, ESS_ISSUER_SERIAL ** a), REG(a1, const unsigned char ** pp), REG(d0, long length));
ISSUING_DIST_POINT * SAVEDS ASM LIB_ISSUING_DIST_POINT_new(REG(a6, __IFACE_OR_BASE));
ASN1_TIME * SAVEDS ASM LIB_ASN1_TIME_adj(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_TIME * s), REG(d0, time_t t), REG(d1, int offset_day), REG(d2, long offset_sec));
int SAVEDS ASM LIB_TS_OBJ_print_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bio), REG(a1, const ASN1_OBJECT * obj));
void SAVEDS ASM LIB_EVP_PKEY_meth_set_verify_recover(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_METHOD * pmeth), REG(a1, int (*verify_recover_init)(EVP_PKEY_CTX *ctx)), REG(a2, int (*verify_recover)(EVP_PKEY_CTX *ctx, unsigned char *sig, size_t *siglen, const unsigned char *tbs, size_t tbslen)));
TS_STATUS_INFO * SAVEDS ASM LIB_TS_RESP_get_status_info(REG(a6, __IFACE_OR_BASE), REG(a0, TS_RESP * g));
void SAVEDS ASM LIB_EVP_PKEY_CTX_set_cb(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(a1, EVP_PKEY_gen_cb * cb));
TS_TST_INFO * SAVEDS ASM LIB_PKCS7_to_TS_TST_INFO(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7 * token));
unsigned long SAVEDS ASM LIB_ASN1_PCTX_get_oid_flags(REG(a6, __IFACE_OR_BASE), REG(a0, const ASN1_PCTX * p));
int SAVEDS ASM LIB_TS_TST_INFO_add_ext(REG(a6, __IFACE_OR_BASE), REG(a0, TS_TST_INFO * a), REG(a1, X509_EXTENSION * ex), REG(d0, int loc));
void SAVEDS ASM LIB_EVP_PKEY_meth_set_derive(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_METHOD * pmeth), REG(a1, int (*derive_init)(EVP_PKEY_CTX *ctx)), REG(a2, int (*derive)(EVP_PKEY_CTX *ctx, unsigned char *key, size_t *keylen)));
int SAVEDS ASM LIB_i2d_TS_MSG_IMPRINT_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * fp), REG(a1, const TS_MSG_IMPRINT * a));
int SAVEDS ASM LIB_TS_RESP_CTX_set_accuracy(REG(a6, __IFACE_OR_BASE), REG(a0, TS_RESP_CTX * ctx), REG(d0, int secs), REG(d1, int millis), REG(d2, int micros));
int SAVEDS ASM LIB_TS_REQ_set_nonce(REG(a6, __IFACE_OR_BASE), REG(a0, TS_REQ * a), REG(a1, const ASN1_INTEGER * nonce));
ESS_CERT_ID * SAVEDS ASM LIB_ESS_CERT_ID_new(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_TS_REQ_get_ext_count(REG(a6, __IFACE_OR_BASE), REG(a0, TS_REQ * a));
void SAVEDS ASM LIB_BUF_reverse(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned char * out), REG(a1, const unsigned char * in), REG(d0, size_t siz));
int SAVEDS ASM LIB_TS_TST_INFO_print_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bio), REG(a1, TS_TST_INFO * a));
ISSUING_DIST_POINT * SAVEDS ASM LIB_d2i_ISSUING_DIST_POINT(REG(a6, __IFACE_OR_BASE), REG(a0, ISSUING_DIST_POINT ** a), REG(a1, const unsigned char ** pp), REG(d0, long length));
int SAVEDS ASM LIB_i2b_PrivateKey_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * out), REG(a1, const EVP_PKEY * pk));
int SAVEDS ASM LIB_i2d_TS_RESP(REG(a6, __IFACE_OR_BASE), REG(a0, const TS_RESP * a), REG(a1, unsigned char ** pp));
EVP_PKEY * SAVEDS ASM LIB_b2i_PublicKey(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char ** in), REG(d0, long length));
void SAVEDS ASM LIB_TS_VERIFY_CTX_cleanup(REG(a6, __IFACE_OR_BASE), REG(a0, TS_VERIFY_CTX * ctx));
void SAVEDS ASM LIB_TS_STATUS_INFO_free(REG(a6, __IFACE_OR_BASE), REG(a0, TS_STATUS_INFO * a));
int SAVEDS ASM LIB_TS_RESP_verify_token(REG(a6, __IFACE_OR_BASE), REG(a0, TS_VERIFY_CTX * ctx), REG(a1, PKCS7 * token));
const void * SAVEDS ASM LIB_OBJ_bsearch_ex_(REG(a6, __IFACE_OR_BASE), REG(a0, const void * key), REG(a1, const void * base), REG(d0, int num), REG(d1, int size), REG(a2, int (*cmp)(const void *, const void *)), REG(d2, int flags));
int SAVEDS ASM LIB_ASN1_bn_print(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, const char * number), REG(a2, const BIGNUM * num), REG(a3, unsigned char * ign), REG(d0, int indent));
int SAVEDS ASM LIB_EVP_PKEY_asn1_get_count(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_ASN1_PCTX_set_nm_flags(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_PCTX * p), REG(d0, unsigned long flags));
int SAVEDS ASM LIB_EVP_DigestVerifyInit(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_MD_CTX * ctx), REG(a1, EVP_PKEY_CTX ** pctx), REG(a2, const EVP_MD * type), REG(a3, ENGINE * e), REG(d0, EVP_PKEY * pkey));
ASN1_OBJECT * SAVEDS ASM LIB_TS_TST_INFO_get_policy_id(REG(a6, __IFACE_OR_BASE), REG(a0, TS_TST_INFO * a));
int SAVEDS ASM LIB_TS_REQ_get_cert_req(REG(a6, __IFACE_OR_BASE), REG(a0, const TS_REQ * a));
void SAVEDS ASM LIB_X509_CRL_set_meth_data(REG(a6, __IFACE_OR_BASE), REG(a0, X509_CRL * crl), REG(a1, void * dat));
int SAVEDS ASM LIB_PKCS8_pkey_set0(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS8_PRIV_KEY_INFO * priv), REG(a1, ASN1_OBJECT * aobj), REG(d0, int version), REG(d1, int ptype), REG(a2, void * pval), REG(a3, unsigned char * penc), REG(d2, int penclen));
int SAVEDS ASM LIB_ASN1_STRING_copy(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_STRING * dst), REG(a1, const ASN1_STRING * str));
int SAVEDS ASM LIB_X509_CRL_match(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_CRL * a), REG(a1, const X509_CRL * b));
void SAVEDS ASM LIB_EVP_PKEY_asn1_set_private(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_ASN1_METHOD * ameth), REG(a1, int (*priv_decode)(EVP_PKEY *pk, const PKCS8_PRIV_KEY_INFO *p8inf)), REG(a2, int (*priv_encode)(PKCS8_PRIV_KEY_INFO *p8, const EVP_PKEY *pk)), REG(a3, int (*priv_print)(BIO *out, const EVP_PKEY *pkey, int indent, ASN1_PCTX *pctx)));
void * SAVEDS ASM LIB_TS_TST_INFO_get_ext_d2i(REG(a6, __IFACE_OR_BASE), REG(a0, TS_TST_INFO * a), REG(d0, int nid), REG(a1, int * crit), REG(a2, int * idx));
int SAVEDS ASM LIB_TS_RESP_CTX_add_policy(REG(a6, __IFACE_OR_BASE), REG(a0, TS_RESP_CTX * ctx), REG(a1, const ASN1_OBJECT * policy));
TS_RESP * SAVEDS ASM LIB_d2i_TS_RESP(REG(a6, __IFACE_OR_BASE), REG(a0, TS_RESP ** a), REG(a1, const unsigned char ** pp), REG(d0, long length));
STACK_OF(X509) * SAVEDS ASM LIB_TS_CONF_load_certs(REG(a6, __IFACE_OR_BASE), REG(a0, const char * file));
TS_MSG_IMPRINT * SAVEDS ASM LIB_TS_TST_INFO_get_msg_imprint(REG(a6, __IFACE_OR_BASE), REG(a0, TS_TST_INFO * a));
int SAVEDS ASM LIB_ERR_load_TS_strings(REG(a6, __IFACE_OR_BASE));
long SAVEDS ASM LIB_TS_TST_INFO_get_version(REG(a6, __IFACE_OR_BASE), REG(a0, const TS_TST_INFO * a));
EVP_PKEY_CTX * SAVEDS ASM LIB_EVP_PKEY_CTX_dup(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_PKEY_CTX * ctx));
void SAVEDS ASM LIB_EVP_PKEY_meth_set_verify(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_METHOD * pmeth), REG(a1, int (*verify_init)(EVP_PKEY_CTX *ctx)), REG(a2, int (*verify)(EVP_PKEY_CTX *ctx, const unsigned char *sig, size_t siglen, const unsigned char *tbs, size_t tbslen)));
int SAVEDS ASM LIB_i2b_PublicKey_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * out), REG(a1, const EVP_PKEY * pk));
int SAVEDS ASM LIB_TS_CONF_set_certs(REG(a6, __IFACE_OR_BASE), REG(a0, CONF * conf), REG(a1, const char * section), REG(a2, const char * certs), REG(a3, TS_RESP_CTX * ctx));
int SAVEDS ASM LIB_EVP_PKEY_asn1_get0_info(REG(a6, __IFACE_OR_BASE), REG(a0, int * ppkey_id), REG(a1, int * ppkey_base_id), REG(a2, int * ppkey_flags), REG(a3, const char ** pinfo), REG(d0, const char ** ppem_str), REG(d1, const EVP_PKEY_ASN1_METHOD * ameth));
void SAVEDS ASM LIB_TS_VERIFY_CTX_free(REG(a6, __IFACE_OR_BASE), REG(a0, TS_VERIFY_CTX * ctx));
int SAVEDS ASM LIB_TS_REQ_get_ext_by_critical(REG(a6, __IFACE_OR_BASE), REG(a0, TS_REQ * a), REG(d0, int crit), REG(d1, int lastpos));
void SAVEDS ASM LIB_TS_RESP_CTX_set_serial_cb(REG(a6, __IFACE_OR_BASE), REG(a0, TS_RESP_CTX * ctx), REG(d0, TS_serial_cb cb), REG(a1, void * data));
void * SAVEDS ASM LIB_X509_CRL_get_meth_data(REG(a6, __IFACE_OR_BASE), REG(a0, X509_CRL * crl));
void SAVEDS ASM LIB_TS_RESP_CTX_set_time_cb(REG(a6, __IFACE_OR_BASE), REG(a0, TS_RESP_CTX * ctx), REG(d0, TS_time_cb cb), REG(a1, void * data));
ASN1_OCTET_STRING * SAVEDS ASM LIB_TS_MSG_IMPRINT_get_msg(REG(a6, __IFACE_OR_BASE), REG(a0, TS_MSG_IMPRINT * a));
void SAVEDS ASM LIB_TS_TST_INFO_ext_free(REG(a6, __IFACE_OR_BASE), REG(a0, TS_TST_INFO * a));
long SAVEDS ASM LIB_TS_REQ_get_version(REG(a6, __IFACE_OR_BASE), REG(a0, const TS_REQ * a));
int SAVEDS ASM LIB_TS_REQ_add_ext(REG(a6, __IFACE_OR_BASE), REG(a0, TS_REQ * a), REG(a1, X509_EXTENSION * ex), REG(d0, int loc));
void SAVEDS ASM LIB_EVP_PKEY_CTX_set_app_data(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(a1, void * data));
const void * SAVEDS ASM LIB_OBJ_bsearch_(REG(a6, __IFACE_OR_BASE), REG(a0, const void * key), REG(a1, const void * base), REG(d0, int num), REG(d1, int size), REG(a2, int (*cmp)(const void *, const void *)));
void SAVEDS ASM LIB_EVP_PKEY_meth_set_verifyctx(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_METHOD * pmeth), REG(a1, int (*verifyctx_init)(EVP_PKEY_CTX *ctx, EVP_MD_CTX *mctx)), REG(a2, int (*verifyctx)(EVP_PKEY_CTX *ctx, const unsigned char *sig,int siglen, EVP_MD_CTX *mctx)));
int SAVEDS ASM LIB_i2d_PKCS7_bio_stream(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * out), REG(a1, PKCS7 * p7), REG(a2, BIO * in), REG(d0, int flags));
PKCS7_SIGNER_INFO * SAVEDS ASM LIB_PKCS7_sign_add_signer(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7 * p7), REG(a1, X509 * signcert), REG(a2, EVP_PKEY * pkey), REG(a3, const EVP_MD * md), REG(d0, int flags));
TS_TST_INFO * SAVEDS ASM LIB_d2i_TS_TST_INFO_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, TS_TST_INFO ** a));
int SAVEDS ASM LIB_TS_TST_INFO_get_ordering(REG(a6, __IFACE_OR_BASE), REG(a0, const TS_TST_INFO * a));
int SAVEDS ASM LIB_TS_RESP_print_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bio), REG(a1, TS_RESP * a));
STACK_OF(X509_EXTENSION) * SAVEDS ASM LIB_TS_TST_INFO_get_exts(REG(a6, __IFACE_OR_BASE), REG(a0, TS_TST_INFO * a));
X509_ALGOR * SAVEDS ASM LIB_PKCS5_pbe2_set_iv(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_CIPHER * cipher), REG(d0, int iter), REG(a1, unsigned char * salt), REG(d1, int saltlen), REG(a2, unsigned char * aiv), REG(d2, int prf_nid));
EVP_PKEY * SAVEDS ASM LIB_b2i_PrivateKey(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char ** in), REG(d0, long length));
void * SAVEDS ASM LIB_EVP_PKEY_CTX_get_app_data(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx));
int SAVEDS ASM LIB_TS_REQ_set_cert_req(REG(a6, __IFACE_OR_BASE), REG(a0, TS_REQ * a), REG(d0, int cert_req));
int SAVEDS ASM LIB_TS_CONF_set_serial(REG(a6, __IFACE_OR_BASE), REG(a0, CONF * conf), REG(a1, const char * section), REG(a2, TS_serial_cb cb), REG(a3, TS_RESP_CTX * ctx));
void SAVEDS ASM LIB_TS_TST_INFO_free(REG(a6, __IFACE_OR_BASE), REG(a0, TS_TST_INFO * a));
int SAVEDS ASM LIB_TS_RESP_verify_response(REG(a6, __IFACE_OR_BASE), REG(a0, TS_VERIFY_CTX * ctx), REG(a1, TS_RESP * response));
int SAVEDS ASM LIB_i2d_ESS_ISSUER_SERIAL(REG(a6, __IFACE_OR_BASE), REG(a0, const ESS_ISSUER_SERIAL * a), REG(a1, unsigned char ** pp));
const ASN1_INTEGER * SAVEDS ASM LIB_TS_ACCURACY_get_seconds(REG(a6, __IFACE_OR_BASE), REG(a0, const TS_ACCURACY * a));
void SAVEDS ASM LIB_EVP_CIPHER_do_all(REG(a6, __IFACE_OR_BASE), REG(a0, void (*fn)(const EVP_CIPHER *ciph, const char *from, const char *to, void *x)), REG(a1, void * arg));
EVP_PKEY * SAVEDS ASM LIB_b2i_PrivateKey_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * in));
OCSP_CERTID * SAVEDS ASM LIB_OCSP_CERTID_dup(REG(a6, __IFACE_OR_BASE), REG(a0, const OCSP_CERTID * a));
int SAVEDS ASM LIB_X509_PUBKEY_get0_param(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_OBJECT ** ppkalg), REG(a1, const unsigned char ** pk), REG(a2, int * ppklen), REG(a3, X509_ALGOR ** pa), REG(d0, const X509_PUBKEY * pub));
TS_MSG_IMPRINT * SAVEDS ASM LIB_TS_MSG_IMPRINT_dup(REG(a6, __IFACE_OR_BASE), REG(a0, const TS_MSG_IMPRINT * a));
int SAVEDS ASM LIB_PKCS7_print_ctx(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * out), REG(a1, const PKCS7 * x), REG(d0, int indent), REG(a2, const ASN1_PCTX * pctx));
int SAVEDS ASM LIB_i2d_TS_REQ_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * fp), REG(a1, const TS_REQ * a));
void SAVEDS ASM LIB_EVP_PKEY_asn1_set_param(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_ASN1_METHOD * ameth), REG(a1, int (*param_decode)(EVP_PKEY *pkey, const unsigned char **pder, int derlen)), REG(a2, int (*param_encode)(const EVP_PKEY *pkey, unsigned char **pder)), REG(a3, int (*param_missing)(const EVP_PKEY *pk)), REG(d0, int (*param_copy)(EVP_PKEY *to, const EVP_PKEY *from)), REG(d1, int (*param_cmp)(const EVP_PKEY *a, const EVP_PKEY *b)), REG(d2, int (*param_print)(BIO *out, const EVP_PKEY *pkey, int indent, ASN1_PCTX *pctx)));
void SAVEDS ASM LIB_EVP_PKEY_meth_set_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_METHOD * pmeth), REG(a1, int (*encrypt_init)(EVP_PKEY_CTX *ctx)), REG(a2, int (*encryptfn)(EVP_PKEY_CTX *ctx, unsigned char *out, size_t *outlen, const unsigned char *in, size_t inlen)));
void SAVEDS ASM LIB_ASN1_PCTX_set_flags(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_PCTX * p), REG(d0, unsigned long flags));
int SAVEDS ASM LIB_i2d_ESS_CERT_ID(REG(a6, __IFACE_OR_BASE), REG(a0, const ESS_CERT_ID * a), REG(a1, unsigned char ** pp));
TS_VERIFY_CTX * SAVEDS ASM LIB_TS_VERIFY_CTX_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_TS_RESP_CTX_set_extension_cb(REG(a6, __IFACE_OR_BASE), REG(a0, TS_RESP_CTX * ctx), REG(a1, TS_extension_cb cb), REG(a2, void * data));
int SAVEDS ASM LIB_TS_RESP_CTX_set_status_info_cond(REG(a6, __IFACE_OR_BASE), REG(a0, TS_RESP_CTX * ctx), REG(d0, int status), REG(a1, const char * text));
int SAVEDS ASM LIB_EVP_PKEY_verify(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(a1, const unsigned char * sig), REG(d0, size_t siglen), REG(a2, const unsigned char * tbs), REG(d1, size_t tbslen));
X509_CRL_METHOD * SAVEDS ASM LIB_X509_CRL_METHOD_new(REG(a6, __IFACE_OR_BASE), REG(a0, int (*crl_init)(X509_CRL *crl)), REG(a1, int (*crl_free)(X509_CRL *crl)), REG(a2, int (*crl_lookup)(X509_CRL *crl, X509_REVOKED **ret, const ASN1_INTEGER *serial, const X509_NAME *issuer)), REG(a3, int (*crl_verify)(X509_CRL *crl, EVP_PKEY *pk)));
int SAVEDS ASM LIB_EVP_DigestSignFinal(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_MD_CTX * ctx), REG(a1, unsigned char * sigret), REG(a2, size_t * siglen));
int SAVEDS ASM LIB_TS_RESP_CTX_set_def_policy(REG(a6, __IFACE_OR_BASE), REG(a0, TS_RESP_CTX * ctx), REG(a1, const ASN1_OBJECT * def_policy));
TS_RESP * SAVEDS ASM LIB_TS_RESP_create_response(REG(a6, __IFACE_OR_BASE), REG(a0, TS_RESP_CTX * ctx), REG(a1, BIO * req_bio));
void SAVEDS ASM LIB_PKCS7_SIGNER_INFO_get0_algs(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7_SIGNER_INFO * si), REG(a1, EVP_PKEY ** pk), REG(a2, X509_ALGOR ** pdig), REG(a3, X509_ALGOR ** psig));
const ASN1_INTEGER * SAVEDS ASM LIB_TS_TST_INFO_get_nonce(REG(a6, __IFACE_OR_BASE), REG(a0, const TS_TST_INFO * a));
int SAVEDS ASM LIB_EVP_PKEY_decrypt_old(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned char * dec_key), REG(a1, const unsigned char * enc_key), REG(d0, int enc_key_len), REG(a2, EVP_PKEY * private_key));
int SAVEDS ASM LIB_TS_TST_INFO_set_policy_id(REG(a6, __IFACE_OR_BASE), REG(a0, TS_TST_INFO * a), REG(a1, ASN1_OBJECT * policy_id));
int SAVEDS ASM LIB_TS_CONF_set_ess_cert_id_chain(REG(a6, __IFACE_OR_BASE), REG(a0, CONF * conf), REG(a1, const char * section), REG(a2, TS_RESP_CTX * ctx));
EVP_PKEY * SAVEDS ASM LIB_EVP_PKEY_CTX_get0_pkey(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx));
TS_REQ * SAVEDS ASM LIB_d2i_TS_REQ(REG(a6, __IFACE_OR_BASE), REG(a0, TS_REQ ** a), REG(a1, const unsigned char ** pp), REG(d0, long length));
const EVP_PKEY_ASN1_METHOD * SAVEDS ASM LIB_EVP_PKEY_asn1_find_str(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE ** pe), REG(a1, const char * str), REG(d0, int len));
const BIO_METHOD * SAVEDS ASM LIB_BIO_f_asn1(REG(a6, __IFACE_OR_BASE));
ESS_SIGNING_CERT * SAVEDS ASM LIB_ESS_SIGNING_CERT_new(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_EVP_PBE_find(REG(a6, __IFACE_OR_BASE), REG(d0, int type), REG(d1, int pbe_nid), REG(a0, int * pcnid), REG(a1, int * pmnid), REG(a2, EVP_PBE_KEYGEN ** pkeygen));
int SAVEDS ASM LIB_X509_CRL_get0_by_cert(REG(a6, __IFACE_OR_BASE), REG(a0, X509_CRL * crl), REG(a1, X509_REVOKED ** ret), REG(a2, X509 * x));
int SAVEDS ASM LIB_EVP_PKEY_derive(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(a1, unsigned char * key), REG(a2, size_t * keylen));
int SAVEDS ASM LIB_i2d_TS_REQ(REG(a6, __IFACE_OR_BASE), REG(a0, const TS_REQ * a), REG(a1, unsigned char ** pp));
X509_EXTENSION * SAVEDS ASM LIB_TS_TST_INFO_delete_ext(REG(a6, __IFACE_OR_BASE), REG(a0, TS_TST_INFO * a), REG(d0, int loc));
void SAVEDS ASM LIB_ESS_ISSUER_SERIAL_free(REG(a6, __IFACE_OR_BASE), REG(a0, ESS_ISSUER_SERIAL * a));
void SAVEDS ASM LIB_ASN1_PCTX_set_str_flags(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_PCTX * p), REG(d0, unsigned long flags));
int SAVEDS ASM LIB_TS_CONF_set_signer_key(REG(a6, __IFACE_OR_BASE), REG(a0, CONF * conf), REG(a1, const char * section), REG(a2, const char * key), REG(a3, const char * pass), REG(d0, TS_RESP_CTX * ctx));
const ASN1_INTEGER * SAVEDS ASM LIB_TS_ACCURACY_get_millis(REG(a6, __IFACE_OR_BASE), REG(a0, const TS_ACCURACY * a));
PKCS7 * SAVEDS ASM LIB_TS_RESP_get_token(REG(a6, __IFACE_OR_BASE), REG(a0, TS_RESP * a));
TS_ACCURACY * SAVEDS ASM LIB_TS_ACCURACY_dup(REG(a6, __IFACE_OR_BASE), REG(a0, const TS_ACCURACY * a));
void SAVEDS ASM LIB_X509_CRL_set_default_method(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_CRL_METHOD * meth));
void SAVEDS ASM LIB_TS_RESP_free(REG(a6, __IFACE_OR_BASE), REG(a0, TS_RESP * a));
void SAVEDS ASM LIB_ISSUING_DIST_POINT_free(REG(a6, __IFACE_OR_BASE), REG(a0, ISSUING_DIST_POINT * a));
ESS_ISSUER_SERIAL * SAVEDS ASM LIB_ESS_ISSUER_SERIAL_new(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_PKCS7_add1_attrib_digest(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7_SIGNER_INFO * si), REG(a1, const unsigned char * md), REG(d0, int mdlen));
int SAVEDS ASM LIB_TS_RESP_CTX_add_md(REG(a6, __IFACE_OR_BASE), REG(a0, TS_RESP_CTX * ctx), REG(a1, const EVP_MD * md));
TS_TST_INFO * SAVEDS ASM LIB_TS_TST_INFO_dup(REG(a6, __IFACE_OR_BASE), REG(a0, const TS_TST_INFO * a));
int SAVEDS ASM LIB_PEM_write_bio_Parameters(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, const EVP_PKEY * x));
TS_ACCURACY * SAVEDS ASM LIB_TS_TST_INFO_get_accuracy(REG(a6, __IFACE_OR_BASE), REG(a0, TS_TST_INFO * a));
int SAVEDS ASM LIB_X509_CRL_get0_by_serial(REG(a6, __IFACE_OR_BASE), REG(a0, X509_CRL * crl), REG(a1, X509_REVOKED ** ret), REG(a2, const ASN1_INTEGER * serial));
int SAVEDS ASM LIB_TS_TST_INFO_set_version(REG(a6, __IFACE_OR_BASE), REG(a0, TS_TST_INFO * a), REG(d0, long version));
TS_TST_INFO * SAVEDS ASM LIB_TS_RESP_CTX_get_tst_info(REG(a6, __IFACE_OR_BASE), REG(a0, TS_RESP_CTX * ctx));
int SAVEDS ASM LIB_TS_RESP_verify_signature(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7 * token), REG(a1, STACK_OF(X509) * certs), REG(a2, X509_STORE * store), REG(a3, X509 ** signer_out));
GENERAL_NAME * SAVEDS ASM LIB_TS_TST_INFO_get_tsa(REG(a6, __IFACE_OR_BASE), REG(a0, TS_TST_INFO * a));
TS_STATUS_INFO * SAVEDS ASM LIB_TS_STATUS_INFO_new(REG(a6, __IFACE_OR_BASE));
int  SAVEDS ASM (*LIB_EVP_PKEY_CTX_get_cb(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx)))(EVP_PKEY_CTX *ctx);
void * SAVEDS ASM LIB_TS_REQ_get_ext_d2i(REG(a6, __IFACE_OR_BASE), REG(a0, TS_REQ * a), REG(d0, int nid), REG(a1, int * crit), REG(d1, int * idx));
int SAVEDS ASM LIB_GENERAL_NAME_set0_othername(REG(a6, __IFACE_OR_BASE), REG(a0, GENERAL_NAME * gen), REG(a1, ASN1_OBJECT * oid), REG(a2, ASN1_TYPE * value));
int SAVEDS ASM LIB_TS_TST_INFO_get_ext_count(REG(a6, __IFACE_OR_BASE), REG(a0, TS_TST_INFO * a));
TS_REQ * SAVEDS ASM LIB_TS_RESP_CTX_get_request(REG(a6, __IFACE_OR_BASE), REG(a0, TS_RESP_CTX * ctx));
void SAVEDS ASM LIB_EVP_PKEY_meth_set_signctx(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_METHOD * pmeth), REG(a1, int (*signctx_init)(EVP_PKEY_CTX *ctx, EVP_MD_CTX *mctx)), REG(a2, int (*signctx)(EVP_PKEY_CTX *ctx, unsigned char *sig, size_t *siglen, EVP_MD_CTX *mctx)));
void SAVEDS ASM LIB_EVP_PKEY_asn1_copy(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_ASN1_METHOD * dst), REG(a1, const EVP_PKEY_ASN1_METHOD * src));
int SAVEDS ASM LIB_ASN1_TYPE_cmp(REG(a6, __IFACE_OR_BASE), REG(a0, const ASN1_TYPE * a), REG(a1, const ASN1_TYPE * b));
void SAVEDS ASM LIB_EVP_CIPHER_do_all_sorted(REG(a6, __IFACE_OR_BASE), REG(a0, void (*fn)(const EVP_CIPHER *ciph, const char *from, const char *to, void *x)), REG(a1, void * arg));
void SAVEDS ASM LIB_EVP_PKEY_CTX_free(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx));
STACK_OF(X509) * SAVEDS ASM LIB_X509_STORE_CTX_get1_certs(REG(a6, __IFACE_OR_BASE), REG(a0, X509_STORE_CTX * xs), REG(a1, const X509_NAME * nm));
int SAVEDS ASM LIB_EVP_PKEY_CTX_get_operation(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx));
ESS_SIGNING_CERT * SAVEDS ASM LIB_d2i_ESS_SIGNING_CERT(REG(a6, __IFACE_OR_BASE), REG(a0, ESS_SIGNING_CERT ** a), REG(a1, const unsigned char ** pp), REG(d0, long length));
int SAVEDS ASM LIB_TS_CONF_set_ordering(REG(a6, __IFACE_OR_BASE), REG(a0, CONF * conf), REG(a1, const char * section), REG(a2, TS_RESP_CTX * ctx));
int SAVEDS ASM LIB_EVP_PBE_alg_add_type(REG(a6, __IFACE_OR_BASE), REG(d0, int pbe_type), REG(d1, int pbe_nid), REG(d2, int cipher_nid), REG(d3, int md_nid), REG(a0, EVP_PBE_KEYGEN * keygen));
int SAVEDS ASM LIB_TS_REQ_set_version(REG(a6, __IFACE_OR_BASE), REG(a0, TS_REQ * a), REG(d0, long version));
void * SAVEDS ASM LIB_EVP_PKEY_get0(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_PKEY * pkey));
int SAVEDS ASM LIB_BIO_asn1_set_suffix(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * b), REG(a1, asn1_ps_func * suffix), REG(a2, asn1_ps_func * suffix_free));
int SAVEDS ASM LIB_i2d_TS_STATUS_INFO(REG(a6, __IFACE_OR_BASE), REG(a0, const TS_STATUS_INFO * a), REG(a1, unsigned char ** pp));
void SAVEDS ASM LIB_EVP_MD_do_all(REG(a6, __IFACE_OR_BASE), REG(a0, void (*fn)(const EVP_MD *ciph, const char *from, const char *to, void *x)), REG(a1, void * arg));
int SAVEDS ASM LIB_TS_TST_INFO_set_accuracy(REG(a6, __IFACE_OR_BASE), REG(a0, TS_TST_INFO * a), REG(a1, TS_ACCURACY * accuracy));
int SAVEDS ASM LIB_PKCS7_add_attrib_content_type(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS7_SIGNER_INFO * si), REG(a1, ASN1_OBJECT * coid));
int SAVEDS ASM LIB_EVP_PKEY_meth_add0(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_PKEY_METHOD * pmeth));
int SAVEDS ASM LIB_TS_TST_INFO_set_tsa(REG(a6, __IFACE_OR_BASE), REG(a0, TS_TST_INFO * a), REG(a1, GENERAL_NAME * tsa));
EVP_PKEY_METHOD * SAVEDS ASM LIB_EVP_PKEY_meth_new(REG(a6, __IFACE_OR_BASE), REG(d0, int id), REG(d1, int flags));
int SAVEDS ASM LIB_TS_CONF_set_accuracy(REG(a6, __IFACE_OR_BASE), REG(a0, CONF * conf), REG(a1, const char * section), REG(a2, TS_RESP_CTX * ctx));
void SAVEDS ASM LIB_ASN1_PCTX_set_oid_flags(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_PCTX * p), REG(d0, unsigned long flags));
ESS_SIGNING_CERT * SAVEDS ASM LIB_ESS_SIGNING_CERT_dup(REG(a6, __IFACE_OR_BASE), REG(a0, const ESS_SIGNING_CERT * a));
TS_REQ * SAVEDS ASM LIB_d2i_TS_REQ_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * fp), REG(a1, TS_REQ ** a));
ASN1_TIME * SAVEDS ASM LIB_X509_time_adj_ex(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_TIME * s), REG(d0, int offset_day), REG(d1, long offset_sec), REG(a1, time_t * t));
void SAVEDS ASM LIB_TS_RESP_CTX_add_flags(REG(a6, __IFACE_OR_BASE), REG(a0, TS_RESP_CTX * ctx), REG(d0, int flags));
TS_STATUS_INFO * SAVEDS ASM LIB_d2i_TS_STATUS_INFO(REG(a6, __IFACE_OR_BASE), REG(a0, TS_STATUS_INFO ** a), REG(a1, const unsigned char ** pp), REG(d0, long length));
int SAVEDS ASM LIB_TS_MSG_IMPRINT_set_msg(REG(a6, __IFACE_OR_BASE), REG(a0, TS_MSG_IMPRINT * a), REG(a1, unsigned char * d), REG(d0, int len));
int SAVEDS ASM LIB_BIO_asn1_get_suffix(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * b), REG(a1, asn1_ps_func ** psuffix), REG(a2, asn1_ps_func ** psuffix_free));
void SAVEDS ASM LIB_TS_REQ_free(REG(a6, __IFACE_OR_BASE), REG(a0, TS_REQ * a));
void SAVEDS ASM LIB_EVP_PKEY_meth_free(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_METHOD * pmeth));
STACK_OF(X509_EXTENSION) * SAVEDS ASM LIB_TS_REQ_get_exts(REG(a6, __IFACE_OR_BASE), REG(a0, TS_REQ * a));
int SAVEDS ASM LIB_TS_RESP_CTX_set_clock_precision_digits(REG(a6, __IFACE_OR_BASE), REG(a0, TS_RESP_CTX * ctx), REG(d0, unsigned clock_precision_digits));
int SAVEDS ASM LIB_TS_RESP_CTX_add_failure_info(REG(a6, __IFACE_OR_BASE), REG(a0, TS_RESP_CTX * ctx), REG(d0, int failure));
int SAVEDS ASM LIB_i2d_TS_RESP_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * fp), REG(a1, const TS_RESP * a));
EVP_PKEY * SAVEDS ASM LIB_EVP_PKEY_CTX_get0_peerkey(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx));
TS_REQ * SAVEDS ASM LIB_TS_REQ_new(REG(a6, __IFACE_OR_BASE));
TS_MSG_IMPRINT * SAVEDS ASM LIB_TS_MSG_IMPRINT_new(REG(a6, __IFACE_OR_BASE));
const EVP_PKEY_METHOD * SAVEDS ASM LIB_EVP_PKEY_meth_find(REG(a6, __IFACE_OR_BASE), REG(a0, int type));
int SAVEDS ASM LIB_EVP_PKEY_get_id(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_PKEY * pkey));
int SAVEDS ASM LIB_TS_TST_INFO_set_serial(REG(a6, __IFACE_OR_BASE), REG(a0, TS_TST_INFO * a), REG(a1, const ASN1_INTEGER * serial));
GENERAL_NAME * SAVEDS ASM LIB_a2i_GENERAL_NAME(REG(a6, __IFACE_OR_BASE), REG(a0, GENERAL_NAME * out), REG(a1, const X509V3_EXT_METHOD * method), REG(a2, X509V3_CTX * ctx), REG(d0, int gen_type), REG(a3, const char * value), REG(d1, int is_nc));
int SAVEDS ASM LIB_TS_CONF_set_crypto_device(REG(a6, __IFACE_OR_BASE), REG(a0, CONF * conf), REG(a1, const char * section), REG(a2, const char * device));
int SAVEDS ASM LIB_EVP_PKEY_verify_init(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx));
int SAVEDS ASM LIB_TS_CONF_set_policies(REG(a6, __IFACE_OR_BASE), REG(a0, CONF * conf), REG(a1, const char * section), REG(a2, TS_RESP_CTX * ctx));
ASN1_PCTX * SAVEDS ASM LIB_ASN1_PCTX_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_ESS_CERT_ID_free(REG(a6, __IFACE_OR_BASE), REG(a0, ESS_CERT_ID * a));
void SAVEDS ASM LIB_TS_MSG_IMPRINT_free(REG(a6, __IFACE_OR_BASE), REG(a0, TS_MSG_IMPRINT * a));
void SAVEDS ASM LIB_TS_VERIFY_CTX_init(REG(a6, __IFACE_OR_BASE), REG(a0, TS_VERIFY_CTX * ctx));
int SAVEDS ASM LIB_PKCS7_stream(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned char *** boundary), REG(a1, PKCS7 * p7));
int SAVEDS ASM LIB_TS_RESP_CTX_set_certs(REG(a6, __IFACE_OR_BASE), REG(a0, TS_RESP_CTX * ctx), REG(a1, STACK_OF(X509) * certs));
int SAVEDS ASM LIB_TS_CONF_set_def_policy(REG(a6, __IFACE_OR_BASE), REG(a0, CONF * conf), REG(a1, const char * section), REG(a2, const char * policy), REG(a3, TS_RESP_CTX * ctx));
ASN1_GENERALIZEDTIME * SAVEDS ASM LIB_ASN1_GENERALIZEDTIME_adj(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_GENERALIZEDTIME * s), REG(d0, time_t t), REG(d1, int offset_day), REG(d2, long offset_sec));
void SAVEDS ASM LIB_TS_ACCURACY_free(REG(a6, __IFACE_OR_BASE), REG(a0, TS_ACCURACY * a));
TS_TST_INFO * SAVEDS ASM LIB_TS_RESP_get_tst_info(REG(a6, __IFACE_OR_BASE), REG(a0, TS_RESP * a));
int SAVEDS ASM LIB_EVP_PKEY_derive_set_peer(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(a1, EVP_PKEY * peer));
EVP_PKEY * SAVEDS ASM LIB_PEM_read_bio_Parameters(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, EVP_PKEY ** x));
int SAVEDS ASM LIB_TS_CONF_set_clock_precision_digits(REG(a6, __IFACE_OR_BASE), REG(a0, const CONF * conf), REG(a1, const char * section), REG(a2, TS_RESP_CTX * ctx));
ESS_ISSUER_SERIAL * SAVEDS ASM LIB_ESS_ISSUER_SERIAL_dup(REG(a6, __IFACE_OR_BASE), REG(a0, const ESS_ISSUER_SERIAL * a));
const ASN1_INTEGER * SAVEDS ASM LIB_TS_ACCURACY_get_micros(REG(a6, __IFACE_OR_BASE), REG(a0, const TS_ACCURACY * a));
unsigned long SAVEDS ASM LIB_ASN1_PCTX_get_str_flags(REG(a6, __IFACE_OR_BASE), REG(a0, const ASN1_PCTX * p));
int SAVEDS ASM LIB_NAME_CONSTRAINTS_check(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * x), REG(a1, NAME_CONSTRAINTS * nc));
int SAVEDS ASM LIB_ASN1_BIT_STRING_check(REG(a6, __IFACE_OR_BASE), REG(a0, const ASN1_BIT_STRING * a), REG(a1, const unsigned char * flags), REG(d0, int flags_len));
int SAVEDS ASM LIB_X509_check_akid(REG(a6, __IFACE_OR_BASE), REG(a0, const X509 * issuer), REG(a1, const AUTHORITY_KEYID * akid));
void SAVEDS ASM LIB_ASN1_PCTX_free(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_PCTX * p));
int SAVEDS ASM LIB_PEM_write_bio_ASN1_stream(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * out), REG(a1, ASN1_VALUE * val), REG(a2, BIO * in), REG(d0, int flags), REG(a3, const char * hdr), REG(d1, const ASN1_ITEM * it));
int SAVEDS ASM LIB_i2d_ASN1_bio_stream(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * out), REG(a1, ASN1_VALUE * val), REG(a2, BIO * in), REG(d0, int flags), REG(a3, const ASN1_ITEM * it));
int SAVEDS ASM LIB_TS_X509_ALGOR_print_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bio), REG(a1, const X509_ALGOR * alg));
void SAVEDS ASM LIB_EVP_PKEY_meth_set_cleanup(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_METHOD * pmeth), REG(a1, void (*cleanup)(EVP_PKEY_CTX *ctx)));
void SAVEDS ASM LIB_EVP_PKEY_asn1_free(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_ASN1_METHOD * ameth));
void SAVEDS ASM LIB_ESS_SIGNING_CERT_free(REG(a6, __IFACE_OR_BASE), REG(a0, ESS_SIGNING_CERT * a));
int SAVEDS ASM LIB_TS_TST_INFO_set_msg_imprint(REG(a6, __IFACE_OR_BASE), REG(a0, TS_TST_INFO * a), REG(a1, TS_MSG_IMPRINT * msg_imprint));
int SAVEDS ASM LIB_GENERAL_NAME_cmp(REG(a6, __IFACE_OR_BASE), REG(a0, GENERAL_NAME * a), REG(a1, GENERAL_NAME * b));
ASN1_SEQUENCE_ANY * SAVEDS ASM LIB_d2i_ASN1_SET_ANY(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_SEQUENCE_ANY ** a), REG(a1, const unsigned char ** pp), REG(d0, long length));
ASN1_SEQUENCE_ANY * SAVEDS ASM LIB_d2i_ASN1_SEQUENCE_ANY(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_SEQUENCE_ANY ** a), REG(a1, const unsigned char ** pp), REG(d0, long length));
int SAVEDS ASM LIB_GENERAL_NAME_get0_otherName(REG(a6, __IFACE_OR_BASE), REG(a0, const GENERAL_NAME * gen), REG(a1, ASN1_OBJECT ** poid), REG(a2, ASN1_TYPE ** pvalue));
ESS_CERT_ID * SAVEDS ASM LIB_d2i_ESS_CERT_ID(REG(a6, __IFACE_OR_BASE), REG(a0, ESS_CERT_ID ** a), REG(a1, const unsigned char ** pp), REG(d0, long length));
int SAVEDS ASM LIB_OBJ_find_sigid_algs(REG(a6, __IFACE_OR_BASE), REG(d0, int signid), REG(a0, int * pdig_nid), REG(a1, int * ppkey_nid));
void SAVEDS ASM LIB_EVP_PKEY_meth_set_keygen(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_METHOD * pmeth), REG(a1, int (*keygen_init)(EVP_PKEY_CTX *ctx)), REG(a2, int (*keygen)(EVP_PKEY_CTX *ctx, EVP_PKEY *pkey)));
int SAVEDS ASM LIB_PKCS5_PBKDF2_HMAC(REG(a6, __IFACE_OR_BASE), REG(a0, const char * pass), REG(d0, int passlen), REG(a1, const unsigned char * salt), REG(d1, int saltlen), REG(d2, int iter), REG(a2, const EVP_MD * digest), REG(d3, int keylen), REG(a3, unsigned char * out));
int SAVEDS ASM LIB_EVP_PKEY_paramgen(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(a1, EVP_PKEY ** ppkey));
void SAVEDS ASM LIB_EVP_PKEY_meth_set_paramgen(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_METHOD * pmeth), REG(a1, int (*paramgen_init)(EVP_PKEY_CTX *ctx)), REG(a2, int (*paramgen)(EVP_PKEY_CTX *ctx, EVP_PKEY *pkey)));
BIO * SAVEDS ASM LIB_BIO_new_PKCS7(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * out), REG(a1, PKCS7 * p7));
int SAVEDS ASM LIB_EVP_PKEY_verify_recover(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(a1, unsigned char * rout), REG(a2, size_t * routlen), REG(a3, const unsigned char * sig), REG(d0, size_t siglen));
int SAVEDS ASM LIB_TS_ext_print_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bio), REG(a1, const STACK_OF(X509_EXTENSION) * extensions));
int SAVEDS ASM LIB_TS_ASN1_INTEGER_print_bio(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bio), REG(a1, const ASN1_INTEGER * num));
int SAVEDS ASM LIB_EVP_PKEY_set_type(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY * pkey), REG(d0, int type));
int SAVEDS ASM LIB_TS_ACCURACY_set_micros(REG(a6, __IFACE_OR_BASE), REG(a0, TS_ACCURACY * a), REG(a1, const ASN1_INTEGER * micros));
TS_VERIFY_CTX * SAVEDS ASM LIB_TS_REQ_to_TS_VERIFY_CTX(REG(a6, __IFACE_OR_BASE), REG(a0, TS_REQ * req), REG(a1, TS_VERIFY_CTX * ctx));
void SAVEDS ASM LIB_EVP_PKEY_meth_set_copy(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_METHOD * pmeth), REG(a1, int (*copy)(EVP_PKEY_CTX *dst, const EVP_PKEY_CTX *src)));
void SAVEDS ASM LIB_ASN1_PCTX_set_cert_flags(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_PCTX * p), REG(d0, unsigned long flags));
X509_EXTENSION * SAVEDS ASM LIB_TS_TST_INFO_get_ext(REG(a6, __IFACE_OR_BASE), REG(a0, TS_TST_INFO * a), REG(d0, int loc));
void SAVEDS ASM LIB_EVP_PKEY_asn1_set_ctrl(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_ASN1_METHOD * ameth), REG(a1, int (*pkey_ctrl)(EVP_PKEY *pkey, int op, long arg1, void *arg2)));
int SAVEDS ASM LIB_TS_TST_INFO_get_ext_by_critical(REG(a6, __IFACE_OR_BASE), REG(a0, TS_TST_INFO * a), REG(d0, int crit), REG(d1, int lastpos));
EVP_PKEY_CTX * SAVEDS ASM LIB_EVP_PKEY_CTX_new_id(REG(a6, __IFACE_OR_BASE), REG(d0, int id), REG(a0, ENGINE * e));
int SAVEDS ASM LIB_TS_REQ_get_ext_by_OBJ(REG(a6, __IFACE_OR_BASE), REG(a0, TS_REQ * a), REG(a1, const ASN1_OBJECT * obj), REG(d0, int lastpos));
int SAVEDS ASM LIB_TS_CONF_set_signer_cert(REG(a6, __IFACE_OR_BASE), REG(a0, CONF * conf), REG(a1, const char * section), REG(a2, const char * cert), REG(a3, TS_RESP_CTX * ctx));
unsigned long SAVEDS ASM LIB_X509_NAME_hash_old(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_NAME * x));
int SAVEDS ASM LIB_ASN1_TIME_set_string(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_TIME * s), REG(a1, const char * str));
unsigned long SAVEDS ASM LIB_EVP_MD_get_flags(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_MD * md));
void SAVEDS ASM LIB_TS_RESP_CTX_free(REG(a6, __IFACE_OR_BASE), REG(a0, TS_RESP_CTX * ctx));
int SAVEDS ASM LIB_OSSL_HTTP_REQ_CTX_add1_header(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_HTTP_REQ_CTX * rctx), REG(a1, const char * name), REG(a2, const char * value));
int SAVEDS ASM LIB_OBSOLETE_OCSP_REQ_CTX_set1_req(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_HTTP_REQ_CTX * rctx), REG(a1, OCSP_REQUEST * req));
void SAVEDS ASM LIB_X509_STORE_set_verify_cb(REG(a6, __IFACE_OR_BASE), REG(a0, X509_STORE * xs), REG(a1, X509_STORE_CTX_verify_cb verify_cb));
X509_CRL * SAVEDS ASM LIB_X509_STORE_CTX_get0_current_crl(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_STORE_CTX * ctx));
X509_STORE_CTX * SAVEDS ASM LIB_X509_STORE_CTX_get0_parent_ctx(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_STORE_CTX * ctx));
X509 * SAVEDS ASM LIB_X509_STORE_CTX_get0_current_issuer(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_STORE_CTX * ctx));
int SAVEDS ASM LIB_EVP_CIPHER_CTX_copy(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_CIPHER_CTX * out), REG(a1, const EVP_CIPHER_CTX * in));
char * SAVEDS ASM (*LIB_UI_method_get_prompt_constructor(REG(a6, __IFACE_OR_BASE), REG(a0, const UI_METHOD * method)))(UI*, const char*, const char*);
int SAVEDS ASM LIB_UI_method_set_prompt_constructor(REG(a6, __IFACE_OR_BASE), REG(a0, UI_METHOD * method), REG(a1, char *(*prompt_constructor)(UI* ui, const char* object_desc, const char* object_name)));
int SAVEDS ASM LIB_EVP_read_pw_string_min(REG(a6, __IFACE_OR_BASE), REG(a0, char * buf), REG(d0, int minlen), REG(d1, int maxlen), REG(a1, const char * prompt), REG(d2, int verify));
size_t SAVEDS ASM LIB_CRYPTO_cts128_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(d0, size_t len), REG(a2, const void * key), REG(a3, unsigned char * ivec), REG(d1, cbc128_f cbc));
size_t SAVEDS ASM LIB_CRYPTO_cts128_decrypt_block(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(d0, size_t len), REG(a2, const void * key), REG(a3, unsigned char * ivec), REG(d1, block128_f block));
void SAVEDS ASM LIB_CRYPTO_cfb128_1_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(d0, size_t bits), REG(a2, const void * key), REG(a3, unsigned char * ivec), REG(d1, int * num), REG(d2, int enc), REG(d3, block128_f block));
void SAVEDS ASM LIB_CRYPTO_cbc128_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(d0, size_t len), REG(a2, const void * key), REG(a3, unsigned char * ivec), REG(d1, block128_f block));
void SAVEDS ASM LIB_CRYPTO_ctr128_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(d0, size_t len), REG(a2, const void * key), REG(a3, unsigned char * ivec), REG(d1, unsigned char * ecount_buf), REG(d2, unsigned int * num), REG(d3, block128_f block));
void SAVEDS ASM LIB_CRYPTO_ofb128_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(d0, size_t len), REG(a2, const void * key), REG(a3, unsigned char * ivec), REG(d1, int * num), REG(d2, block128_f block));
size_t SAVEDS ASM LIB_CRYPTO_cts128_decrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(d0, size_t len), REG(a2, const void * key), REG(a3, unsigned char * ivec), REG(d1, cbc128_f cbc));
size_t SAVEDS ASM LIB_CRYPTO_cts128_encrypt_block(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(d0, size_t len), REG(a2, const void * key), REG(a3, unsigned char * ivec), REG(d1, block128_f block));
void SAVEDS ASM LIB_CRYPTO_cbc128_decrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(d0, size_t len), REG(a2, const void * key), REG(a3, unsigned char * ivec), REG(d1, block128_f block));
void SAVEDS ASM LIB_CRYPTO_cfb128_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(d0, size_t len), REG(a2, const void * key), REG(a3, unsigned char * ivec), REG(d1, int * num), REG(d2, int enc), REG(d3, block128_f block));
void SAVEDS ASM LIB_CRYPTO_cfb128_8_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(d0, size_t length), REG(a2, const void * key), REG(a3, unsigned char * ivec), REG(d1, int * num), REG(d2, int enc), REG(d3, block128_f block));
struct tm * SAVEDS ASM LIB_OPENSSL_gmtime(REG(a6, __IFACE_OR_BASE), REG(a0, const time_t * timer), REG(a1, struct tm * result));
int SAVEDS ASM LIB_OPENSSL_gmtime_adj(REG(a6, __IFACE_OR_BASE), REG(a0, struct tm * tm), REG(d0, int offset_day), REG(d1, long offset_sec));
int SAVEDS ASM LIB_OPENSSL_gmtime_diff(REG(a6, __IFACE_OR_BASE), REG(a0, int * pday), REG(a1, int * psec), REG(a2, const struct tm * from), REG(a3, const struct tm * to));
void SAVEDS ASM LIB_EVP_PKEY_meth_get0_info(REG(a6, __IFACE_OR_BASE), REG(a0, int * ppkey_id), REG(a1, int * pflags), REG(a2, const EVP_PKEY_METHOD * meth));
void SAVEDS ASM LIB_EVP_PKEY_meth_copy(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_METHOD * dst), REG(a1, const EVP_PKEY_METHOD * src));
int SAVEDS ASM LIB_RSA_padding_add_PKCS1_PSS_mgf1(REG(a6, __IFACE_OR_BASE), REG(a0, RSA * rsa), REG(a1, unsigned char * EM), REG(a2, const unsigned char * mHash), REG(a3, const EVP_MD * Hash), REG(d0, const EVP_MD * mgf1Hash), REG(d1, int sLen));
int SAVEDS ASM LIB_RSA_verify_PKCS1_PSS_mgf1(REG(a6, __IFACE_OR_BASE), REG(a0, RSA * rsa), REG(a1, const unsigned char * mHash), REG(a2, const EVP_MD * Hash), REG(a3, const EVP_MD * mgf1Hash), REG(d0, const unsigned char * EM), REG(d1, int sLen));
void SAVEDS ASM LIB_X509_ALGOR_set_md(REG(a6, __IFACE_OR_BASE), REG(a0, X509_ALGOR * alg), REG(a1, const EVP_MD * md));
int SAVEDS ASM LIB_CMAC_CTX_copy(REG(a6, __IFACE_OR_BASE), REG(a0, CMAC_CTX * out), REG(a1, const CMAC_CTX * in));
void SAVEDS ASM LIB_CMAC_CTX_free(REG(a6, __IFACE_OR_BASE), REG(a0, CMAC_CTX * ctx));
EVP_CIPHER_CTX * SAVEDS ASM LIB_CMAC_CTX_get0_cipher_ctx(REG(a6, __IFACE_OR_BASE), REG(a0, CMAC_CTX * ctx));
void SAVEDS ASM LIB_CMAC_CTX_cleanup(REG(a6, __IFACE_OR_BASE), REG(a0, CMAC_CTX * ctx));
int SAVEDS ASM LIB_CMAC_Init(REG(a6, __IFACE_OR_BASE), REG(a0, CMAC_CTX * ctx), REG(a1, const void * key), REG(d0, size_t keylen), REG(a2, const EVP_CIPHER * cipher), REG(a3, ENGINE * impl));
int SAVEDS ASM LIB_CMAC_Update(REG(a6, __IFACE_OR_BASE), REG(a0, CMAC_CTX * ctx), REG(a1, const void * data), REG(d0, size_t dlen));
int SAVEDS ASM LIB_CMAC_resume(REG(a6, __IFACE_OR_BASE), REG(a0, CMAC_CTX * ctx));
CMAC_CTX * SAVEDS ASM LIB_CMAC_CTX_new(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_CMAC_Final(REG(a6, __IFACE_OR_BASE), REG(a0, CMAC_CTX * ctx), REG(a1, unsigned char * out), REG(a2, size_t * poutlen));
void SAVEDS ASM LIB_CRYPTO_ctr128_encrypt_ctr32(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(d0, size_t len), REG(a2, const void * key), REG(a3, unsigned char * ivec), REG(d1, unsigned char * ecount_buf), REG(d2, unsigned int * num), REG(d3, ctr128_f ctr));
void SAVEDS ASM LIB_CRYPTO_gcm128_release(REG(a6, __IFACE_OR_BASE), REG(a0, GCM128_CONTEXT * ctx));
int SAVEDS ASM LIB_CRYPTO_ccm128_decrypt_ccm64(REG(a6, __IFACE_OR_BASE), REG(a0, CCM128_CONTEXT * ctx), REG(a1, const unsigned char * inp), REG(a2, unsigned char * out), REG(d0, size_t len), REG(a3, ccm128_f stream));
int SAVEDS ASM LIB_CRYPTO_ccm128_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, CCM128_CONTEXT * ctx), REG(a1, const unsigned char * inp), REG(a2, unsigned char * out), REG(d0, size_t len));
int SAVEDS ASM LIB_CRYPTO_gcm128_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, GCM128_CONTEXT * ctx), REG(a1, const unsigned char * in), REG(a2, unsigned char * out), REG(d0, size_t len));
int SAVEDS ASM LIB_CRYPTO_xts128_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const XTS128_CONTEXT * ctx), REG(a1, const unsigned char * iv), REG(a2, const unsigned char * inp), REG(a3, unsigned char * out), REG(d0, size_t len), REG(d1, int enc));
size_t SAVEDS ASM LIB_CRYPTO_nistcts128_decrypt_block(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(d0, size_t len), REG(a2, const void * key), REG(d1, unsigned char * ivec), REG(a3, block128_f block));
void SAVEDS ASM LIB_CRYPTO_gcm128_setiv(REG(a6, __IFACE_OR_BASE), REG(a0, GCM128_CONTEXT * ctx), REG(a1, const unsigned char * iv), REG(d0, size_t len));
size_t SAVEDS ASM LIB_CRYPTO_nistcts128_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(d0, size_t len), REG(a2, const void * key), REG(a3, unsigned char * ivec), REG(d1, cbc128_f cbc));
void SAVEDS ASM LIB_CRYPTO_gcm128_tag(REG(a6, __IFACE_OR_BASE), REG(a0, GCM128_CONTEXT * ctx), REG(a1, unsigned char * tag), REG(d0, size_t len));
int SAVEDS ASM LIB_CRYPTO_ccm128_encrypt_ccm64(REG(a6, __IFACE_OR_BASE), REG(a0, CCM128_CONTEXT * ctx), REG(a1, const unsigned char * inp), REG(a2, unsigned char * out), REG(d0, size_t len), REG(a3, ccm128_f stream));
int SAVEDS ASM LIB_CRYPTO_ccm128_setiv(REG(a6, __IFACE_OR_BASE), REG(a0, CCM128_CONTEXT * ctx), REG(a1, const unsigned char * nonce), REG(d0, size_t nlen), REG(d1, size_t mlen));
size_t SAVEDS ASM LIB_CRYPTO_nistcts128_encrypt_block(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(d0, size_t len), REG(a2, const void * key), REG(a3, unsigned char * ivec), REG(d1, block128_f block));
int SAVEDS ASM LIB_CRYPTO_gcm128_aad(REG(a6, __IFACE_OR_BASE), REG(a0, GCM128_CONTEXT * ctx), REG(a1, const unsigned char * aad), REG(d0, size_t len));
void SAVEDS ASM LIB_CRYPTO_ccm128_init(REG(a6, __IFACE_OR_BASE), REG(a0, CCM128_CONTEXT * ctx), REG(d0, unsigned int M), REG(d1, unsigned int L), REG(a1, void * key), REG(a2, block128_f block));
size_t SAVEDS ASM LIB_CRYPTO_nistcts128_decrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * in), REG(a1, unsigned char * out), REG(d0, size_t len), REG(a2, const void * key), REG(a3, unsigned char * ivec), REG(d1, cbc128_f cbc));
GCM128_CONTEXT * SAVEDS ASM LIB_CRYPTO_gcm128_new(REG(a6, __IFACE_OR_BASE), REG(a0, void * key), REG(a1, block128_f block));
size_t SAVEDS ASM LIB_CRYPTO_ccm128_tag(REG(a6, __IFACE_OR_BASE), REG(a0, CCM128_CONTEXT * ctx), REG(a1, unsigned char * tag), REG(d0, size_t len));
int SAVEDS ASM LIB_CRYPTO_ccm128_decrypt(REG(a6, __IFACE_OR_BASE), REG(a0, CCM128_CONTEXT * ctx), REG(a1, const unsigned char * inp), REG(a2, unsigned char * out), REG(d0, size_t len));
void SAVEDS ASM LIB_CRYPTO_ccm128_aad(REG(a6, __IFACE_OR_BASE), REG(a0, CCM128_CONTEXT * ctx), REG(a1, const unsigned char * aad), REG(d0, size_t alen));
void SAVEDS ASM LIB_CRYPTO_gcm128_init(REG(a6, __IFACE_OR_BASE), REG(a0, GCM128_CONTEXT * ctx), REG(a1, void * key), REG(a2, block128_f block));
int SAVEDS ASM LIB_CRYPTO_gcm128_decrypt(REG(a6, __IFACE_OR_BASE), REG(a0, GCM128_CONTEXT * ctx), REG(a1, const unsigned char * in), REG(a2, unsigned char * out), REG(d0, size_t len));
int SAVEDS ASM LIB_CRYPTO_gcm128_decrypt_ctr32(REG(a6, __IFACE_OR_BASE), REG(a0, GCM128_CONTEXT * ctx), REG(a1, const unsigned char * in), REG(a2, unsigned char * out), REG(d0, size_t len), REG(a3, ctr128_f stream));
int SAVEDS ASM LIB_CRYPTO_gcm128_encrypt_ctr32(REG(a6, __IFACE_OR_BASE), REG(a0, GCM128_CONTEXT * ctx), REG(a1, const unsigned char * in), REG(a2, unsigned char * out), REG(d0, size_t len), REG(a3, ctr128_f stream));
int SAVEDS ASM LIB_CRYPTO_gcm128_finish(REG(a6, __IFACE_OR_BASE), REG(a0, GCM128_CONTEXT * ctx), REG(a1, const unsigned char * tag), REG(d0, size_t len));
X509_ALGOR * SAVEDS ASM LIB_PKCS5_pbkdf2_set(REG(a6, __IFACE_OR_BASE), REG(d0, int iter), REG(a0, unsigned char * salt), REG(d1, int saltlen), REG(d2, int prf_nid), REG(d3, int keylen));
RSA_PSS_PARAMS * SAVEDS ASM LIB_RSA_PSS_PARAMS_new(REG(a6, __IFACE_OR_BASE));
RSA_PSS_PARAMS * SAVEDS ASM LIB_d2i_RSA_PSS_PARAMS(REG(a6, __IFACE_OR_BASE), REG(a0, RSA_PSS_PARAMS ** a), REG(a1, const unsigned char ** pp), REG(d0, long length));
void SAVEDS ASM LIB_RSA_PSS_PARAMS_free(REG(a6, __IFACE_OR_BASE), REG(a0, RSA_PSS_PARAMS * a));
int SAVEDS ASM LIB_i2d_RSA_PSS_PARAMS(REG(a6, __IFACE_OR_BASE), REG(a0, const RSA_PSS_PARAMS * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_POLICY_MAPPING_it(REG(a6, __IFACE_OR_BASE));
const ASN1_ITEM * SAVEDS ASM LIB_NAME_CONSTRAINTS_it(REG(a6, __IFACE_OR_BASE));
const ASN1_ITEM * SAVEDS ASM LIB_ASN1_OCTET_STRING_NDEF_it(REG(a6, __IFACE_OR_BASE));
const ASN1_ITEM * SAVEDS ASM LIB_POLICY_CONSTRAINTS_it(REG(a6, __IFACE_OR_BASE));
const ASN1_ITEM * SAVEDS ASM LIB_POLICY_MAPPINGS_it(REG(a6, __IFACE_OR_BASE));
const ASN1_ITEM * SAVEDS ASM LIB_GENERAL_SUBTREE_it(REG(a6, __IFACE_OR_BASE));
const ASN1_ITEM * SAVEDS ASM LIB_X509_EXTENSIONS_it(REG(a6, __IFACE_OR_BASE));
const ASN1_ITEM * SAVEDS ASM LIB_X509_ALGORS_it(REG(a6, __IFACE_OR_BASE));
const ASN1_ITEM * SAVEDS ASM LIB_CMS_ContentInfo_it(REG(a6, __IFACE_OR_BASE));
const ASN1_ITEM * SAVEDS ASM LIB_CMS_ReceiptRequest_it(REG(a6, __IFACE_OR_BASE));
const ASN1_ITEM * SAVEDS ASM LIB_ASN1_SEQUENCE_ANY_it(REG(a6, __IFACE_OR_BASE));
const ASN1_ITEM * SAVEDS ASM LIB_ASN1_SET_ANY_it(REG(a6, __IFACE_OR_BASE));
const ASN1_ITEM * SAVEDS ASM LIB_ISSUING_DIST_POINT_it(REG(a6, __IFACE_OR_BASE));
const ASN1_ITEM * SAVEDS ASM LIB_RSA_PSS_PARAMS_it(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_PEM_write_bio_DHxparams(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, const DH * x));
int SAVEDS ASM LIB_X509_ALGOR_cmp(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_ALGOR * a), REG(a1, const X509_ALGOR * b));
void SAVEDS ASM LIB_ASN1_STRING_clear_free(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_STRING * a));
int SAVEDS ASM LIB_ASN1_TIME_diff(REG(a6, __IFACE_OR_BASE), REG(a0, int * pday), REG(a1, int * psec), REG(a2, const ASN1_TIME * from), REG(a3, const ASN1_TIME * to));
int SAVEDS ASM LIB_BIO_hex_string(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * out), REG(d0, int indent), REG(d1, int width), REG(a1, const void * data), REG(d2, int datalen));
size_t SAVEDS ASM LIB_OBSOLETE_BUF_strnlen(REG(a6, __IFACE_OR_BASE), REG(a0, const char * str), REG(d0, size_t maxlen));
int SAVEDS ASM LIB_CMS_RecipientEncryptedKey_cert_cmp(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_RecipientEncryptedKey * rek), REG(a1, X509 * cert));
int SAVEDS ASM LIB_CMS_RecipientEncryptedKey_get0_id(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_RecipientEncryptedKey * rek), REG(a1, ASN1_OCTET_STRING ** keyid), REG(a2, ASN1_GENERALIZEDTIME ** tm), REG(a3, CMS_OtherKeyAttribute ** other), REG(d0, X509_NAME ** issuer), REG(d1, ASN1_INTEGER ** sno));
int SAVEDS ASM LIB_CMS_RecipientInfo_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const CMS_ContentInfo * cms), REG(a1, CMS_RecipientInfo * ri));
EVP_PKEY_CTX * SAVEDS ASM LIB_CMS_RecipientInfo_get0_pkey_ctx(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_RecipientInfo * ri));
int SAVEDS ASM LIB_CMS_RecipientInfo_kari_decrypt(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_ContentInfo * cms), REG(a1, CMS_RecipientInfo * ri), REG(a2, CMS_RecipientEncryptedKey * rek));
int SAVEDS ASM LIB_CMS_RecipientInfo_kari_get0_alg(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_RecipientInfo * ri), REG(a1, X509_ALGOR ** palg), REG(a2, ASN1_OCTET_STRING ** pukm));
EVP_CIPHER_CTX * SAVEDS ASM LIB_CMS_RecipientInfo_kari_get0_ctx(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_RecipientInfo * ri));
int SAVEDS ASM LIB_CMS_RecipientInfo_kari_get0_orig_id(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_RecipientInfo * ri), REG(a1, X509_ALGOR ** pubalg), REG(a2, ASN1_BIT_STRING ** pubkey), REG(a3, ASN1_OCTET_STRING ** keyid), REG(d0, X509_NAME ** issuer), REG(d1, ASN1_INTEGER ** sno));
STACK_OF(CMS_RecipientEncryptedKey) * SAVEDS ASM LIB_CMS_RecipientInfo_kari_get0_reks(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_RecipientInfo * ri));
int SAVEDS ASM LIB_CMS_RecipientInfo_kari_orig_id_cmp(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_RecipientInfo * ri), REG(a1, X509 * cert));
int SAVEDS ASM LIB_CMS_RecipientInfo_kari_set0_pkey(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_RecipientInfo * ri), REG(a1, EVP_PKEY * pk));
int SAVEDS ASM LIB_CMS_SharedInfo_encode(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned char ** pder), REG(a1, X509_ALGOR * kekalg), REG(a2, ASN1_OCTET_STRING * ukm), REG(d0, int keylen));
EVP_MD_CTX * SAVEDS ASM LIB_CMS_SignerInfo_get0_md_ctx(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_SignerInfo * si));
EVP_PKEY_CTX * SAVEDS ASM LIB_CMS_SignerInfo_get0_pkey_ctx(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_SignerInfo * si));
ASN1_OCTET_STRING * SAVEDS ASM LIB_CMS_SignerInfo_get0_signature(REG(a6, __IFACE_OR_BASE), REG(a0, CMS_SignerInfo * si));
DH * SAVEDS ASM LIB_d2i_DHxparams(REG(a6, __IFACE_OR_BASE), REG(a0, DH ** a), REG(a1, const unsigned char ** pp), REG(d0, long length));
int SAVEDS ASM LIB_i2d_DHxparams(REG(a6, __IFACE_OR_BASE), REG(a0, const DH * dh), REG(a1, unsigned char ** pp));
int SAVEDS ASM LIB_DH_compute_key_padded(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned char * key), REG(a1, const BIGNUM * pub_key), REG(a2, DH * dh));
DH * SAVEDS ASM LIB_DH_get_1024_160(REG(a6, __IFACE_OR_BASE));
DH * SAVEDS ASM LIB_DH_get_2048_224(REG(a6, __IFACE_OR_BASE));
DH * SAVEDS ASM LIB_DH_get_2048_256(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_DH_KDF_X9_42(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned char * out), REG(d0, size_t outlen), REG(a1, const unsigned char * Z), REG(d1, size_t Zlen), REG(a2, ASN1_OBJECT * key_oid), REG(a3, const unsigned char * ukm), REG(d2, size_t ukmlen), REG(d3, const EVP_MD * md));
const char * SAVEDS ASM LIB_EC_curve_nid2nist(REG(a6, __IFACE_OR_BASE), REG(d0, int nid));
int SAVEDS ASM LIB_EC_curve_nist2nid(REG(a6, __IFACE_OR_BASE), REG(a0, const char * name));
BN_MONT_CTX * SAVEDS ASM LIB_EC_GROUP_get_mont_data(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_GROUP * group));
int SAVEDS ASM LIB_ECDH_KDF_X9_62(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned char * out), REG(d0, size_t outlen), REG(a1, const unsigned char * Z), REG(d1, size_t Zlen), REG(a2, const unsigned char * sinfo), REG(d2, size_t sinfolen), REG(d3, const EVP_MD * md));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_aes_128_cbc_hmac_sha256(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_aes_128_wrap(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_aes_192_wrap(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_aes_256_cbc_hmac_sha256(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_aes_256_wrap(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_des_ede3_wrap(REG(a6, __IFACE_OR_BASE));
size_t SAVEDS ASM LIB_CRYPTO_128_unwrap(REG(a6, __IFACE_OR_BASE), REG(a0, void * key), REG(a1, const unsigned char * iv), REG(a2, unsigned char * out), REG(a3, const unsigned char * in), REG(d0, size_t inlen), REG(d1, block128_f block));
size_t SAVEDS ASM LIB_CRYPTO_128_wrap(REG(a6, __IFACE_OR_BASE), REG(a0, void * key), REG(a1, const unsigned char * iv), REG(a2, unsigned char * out), REG(a3, const unsigned char * in), REG(d0, size_t inlen), REG(d1, block128_f block));
BIO * SAVEDS ASM LIB_OSSL_HTTP_REQ_CTX_get0_mem_bio(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_HTTP_REQ_CTX * rctx));
int SAVEDS ASM LIB_OBSOLETE_OCSP_REQ_CTX_http(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_HTTP_REQ_CTX * rctx), REG(a1, const char * op), REG(a2, const char * path));
int SAVEDS ASM LIB_OBSOLETE_OCSP_REQ_CTX_i2d(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_HTTP_REQ_CTX * rctx), REG(a1, const ASN1_ITEM * it), REG(a2, ASN1_VALUE * val));
int SAVEDS ASM LIB_OSSL_HTTP_REQ_CTX_nbio(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_HTTP_REQ_CTX * rctx));
int SAVEDS ASM LIB_OSSL_HTTP_REQ_CTX_nbio_d2i(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_HTTP_REQ_CTX * rctx), REG(a1, ASN1_VALUE ** pval), REG(a2, const ASN1_ITEM * it));
OSSL_HTTP_REQ_CTX * SAVEDS ASM LIB_OBSOLETE_OCSP_REQ_CTX_new(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * io), REG(d0, int maxline));
void SAVEDS ASM LIB_OSSL_HTTP_REQ_CTX_set_max_response_length(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_HTTP_REQ_CTX * rctx), REG(d0, unsigned long len));
RSA_OAEP_PARAMS * SAVEDS ASM LIB_d2i_RSA_OAEP_PARAMS(REG(a6, __IFACE_OR_BASE), REG(a0, RSA_OAEP_PARAMS ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
void SAVEDS ASM LIB_RSA_OAEP_PARAMS_free(REG(a6, __IFACE_OR_BASE), REG(a0, RSA_OAEP_PARAMS * a));
const ASN1_ITEM * SAVEDS ASM LIB_RSA_OAEP_PARAMS_it(REG(a6, __IFACE_OR_BASE));
RSA_OAEP_PARAMS * SAVEDS ASM LIB_RSA_OAEP_PARAMS_new(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_RSA_padding_add_PKCS1_OAEP_mgf1(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned char * to), REG(d0, int tlen), REG(a1, const unsigned char * from), REG(d1, int flen), REG(a2, const unsigned char * param), REG(d2, int plen), REG(a3, const EVP_MD * md), REG(d3, const EVP_MD * mgf1md));
int SAVEDS ASM LIB_RSA_padding_check_PKCS1_OAEP_mgf1(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned char * to), REG(d0, int tlen), REG(a1, const unsigned char * from), REG(d1, int flen), REG(d2, int num), REG(a2, const unsigned char * param), REG(d3, int plen), REG(a3, const EVP_MD * md), REG(d4, const EVP_MD * mgf1md));
OPENSSL_STACK * SAVEDS ASM LIB_OPENSSL_sk_deep_copy(REG(a6, __IFACE_OR_BASE), REG(a0, const OPENSSL_STACK * sk), REG(a1, OPENSSL_sk_copyfunc c), REG(a2, OPENSSL_sk_freefunc f));
int SAVEDS ASM LIB_i2d_re_X509_tbs(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * x), REG(a1, unsigned char ** pp));
int SAVEDS ASM LIB_X509_chain_check_suiteb(REG(a6, __IFACE_OR_BASE), REG(a0, int * perror_depth), REG(a1, X509 * x), REG(a2, STACK_OF(X509) * chain), REG(d0, unsigned long flags));
STACK_OF(X509) * SAVEDS ASM LIB_X509_chain_up_ref(REG(a6, __IFACE_OR_BASE), REG(a0, STACK_OF(X509) * chain));
int SAVEDS ASM LIB_X509_CRL_check_suiteb(REG(a6, __IFACE_OR_BASE), REG(a0, X509_CRL * crl), REG(a1, EVP_PKEY * pk), REG(d0, unsigned long flags));
X509_CRL * SAVEDS ASM LIB_X509_CRL_diff(REG(a6, __IFACE_OR_BASE), REG(a0, X509_CRL * base), REG(a1, X509_CRL * newer), REG(a2, EVP_PKEY * skey), REG(a3, const EVP_MD * md), REG(d0, unsigned int flags));
int SAVEDS ASM LIB_OBSOLETE_X509_CRL_http_nbio(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_HTTP_REQ_CTX * rctx), REG(a1, X509_CRL ** pcrl));
void SAVEDS ASM LIB_X509_get0_signature(REG(a6, __IFACE_OR_BASE), REG(a0, const ASN1_BIT_STRING ** psig), REG(a1, const X509_ALGOR ** palg), REG(a2, const X509 * x));
int SAVEDS ASM LIB_X509_get_signature_nid(REG(a6, __IFACE_OR_BASE), REG(a0, const X509 * x));
int SAVEDS ASM LIB_OBSOLETE_X509_http_nbio(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_HTTP_REQ_CTX * rctx), REG(a1, X509 ** pcert));
X509_REVOKED * SAVEDS ASM LIB_X509_REVOKED_dup(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_REVOKED * rev));
X509_STORE * SAVEDS ASM LIB_X509_STORE_CTX_get0_store(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_STORE_CTX * ctx));
int SAVEDS ASM LIB_X509_VERIFY_PARAM_add1_host(REG(a6, __IFACE_OR_BASE), REG(a0, X509_VERIFY_PARAM * param), REG(a1, const char * name), REG(d0, size_t namelen));
const X509_VERIFY_PARAM * SAVEDS ASM LIB_X509_VERIFY_PARAM_get0(REG(a6, __IFACE_OR_BASE), REG(d0, int id));
const char * SAVEDS ASM LIB_X509_VERIFY_PARAM_get0_name(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_VERIFY_PARAM * param));
char * SAVEDS ASM LIB_X509_VERIFY_PARAM_get0_peername(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_VERIFY_PARAM * param));
int SAVEDS ASM LIB_X509_VERIFY_PARAM_get_count(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_X509_VERIFY_PARAM_set1_email(REG(a6, __IFACE_OR_BASE), REG(a0, X509_VERIFY_PARAM * param), REG(a1, const char * email), REG(d0, size_t emaillen));
int SAVEDS ASM LIB_X509_VERIFY_PARAM_set1_host(REG(a6, __IFACE_OR_BASE), REG(a0, X509_VERIFY_PARAM * param), REG(a1, const char * name), REG(d0, size_t namelen));
int SAVEDS ASM LIB_X509_VERIFY_PARAM_set1_ip(REG(a6, __IFACE_OR_BASE), REG(a0, X509_VERIFY_PARAM * param), REG(a1, const unsigned char * ip), REG(d0, size_t iplen));
int SAVEDS ASM LIB_X509_VERIFY_PARAM_set1_ip_asc(REG(a6, __IFACE_OR_BASE), REG(a0, X509_VERIFY_PARAM * param), REG(a1, const char * ipasc));
void SAVEDS ASM LIB_X509_VERIFY_PARAM_set_hostflags(REG(a6, __IFACE_OR_BASE), REG(a0, X509_VERIFY_PARAM * param), REG(d0, unsigned int flags));
int SAVEDS ASM LIB_X509_check_email(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * x), REG(a1, const char * chk), REG(d0, size_t chklen), REG(d1, unsigned int flags));
int SAVEDS ASM LIB_X509_check_host(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * x), REG(a1, const char * chk), REG(d0, size_t chklen), REG(d1, unsigned int flags), REG(a2, char ** peername));
int SAVEDS ASM LIB_X509_check_ip(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * x), REG(a1, const unsigned char * chk), REG(d0, size_t chklen), REG(d1, unsigned int flags));
int SAVEDS ASM LIB_X509_check_ip_asc(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * x), REG(a1, const char * ipasc), REG(d1, unsigned int flags));
void SAVEDS ASM LIB_EVP_PKEY_asn1_set_item(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_ASN1_METHOD * ameth), REG(a1, int (*item_verify)(EVP_MD_CTX *, const ASN1_ITEM *, const void *, const X509_ALGOR *, const ASN1_BIT_STRING *, EVP_PKEY *)), REG(a2, int (*item_sign)(EVP_MD_CTX *, const ASN1_ITEM *, const void *, X509_ALGOR *, X509_ALGOR *, ASN1_BIT_STRING *)));
const SSL_METHOD * SAVEDS ASM LIB_DTLS_client_method(REG(a6, __IFACE_OR_BASE));
const SSL_METHOD * SAVEDS ASM LIB_DTLS_method(REG(a6, __IFACE_OR_BASE));
const SSL_METHOD * SAVEDS ASM LIB_DTLS_server_method(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_SSL_certs_clear(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s));
const SSL_CIPHER * SAVEDS ASM LIB_SSL_CIPHER_find(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * ssl), REG(a1, const unsigned char * ptr));
int SAVEDS ASM LIB_SSL_CONF_cmd(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CONF_CTX * ctx), REG(a1, const char * cmd), REG(a2, const char * value));
int SAVEDS ASM LIB_SSL_CONF_cmd_argv(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CONF_CTX * cctx), REG(a1, int * pargc), REG(a2, char *** pargv));
int SAVEDS ASM LIB_SSL_CONF_cmd_value_type(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CONF_CTX * cctx), REG(a1, const char * cmd));
unsigned int SAVEDS ASM LIB_SSL_CONF_CTX_clear_flags(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CONF_CTX * cctx), REG(a1, unsigned int flags));
int SAVEDS ASM LIB_SSL_CONF_CTX_finish(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CONF_CTX * cctx));
void SAVEDS ASM LIB_SSL_CONF_CTX_free(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CONF_CTX * cctx));
SSL_CONF_CTX * SAVEDS ASM LIB_SSL_CONF_CTX_new(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_SSL_CONF_CTX_set1_prefix(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CONF_CTX * cctx), REG(a1, const char * pre));
unsigned int SAVEDS ASM LIB_SSL_CONF_CTX_set_flags(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CONF_CTX * cctx), REG(a1, unsigned int flags));
void SAVEDS ASM LIB_SSL_CONF_CTX_set_ssl(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CONF_CTX * cctx), REG(a1, SSL * ssl));
void SAVEDS ASM LIB_SSL_CONF_CTX_set_ssl_ctx(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CONF_CTX * cctx), REG(a1, SSL_CTX * ctx));
int SAVEDS ASM LIB_SSL_CTX_add_client_custom_ext(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(d0, unsigned int ext_type), REG(d1, custom_ext_add_cb add_cb), REG(d2, custom_ext_free_cb free_cb), REG(a1, void * add_arg), REG(d3, custom_ext_parse_cb parse_cb), REG(a2, void * parse_arg));
int SAVEDS ASM LIB_SSL_CTX_add_server_custom_ext(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(d0, unsigned int ext_type), REG(d1, custom_ext_add_cb add_cb), REG(d2, custom_ext_free_cb free_cb), REG(a1, void * add_arg), REG(d3, custom_ext_parse_cb parse_cb), REG(a2, void * parse_arg));
X509 * SAVEDS ASM LIB_SSL_CTX_get0_certificate(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL_CTX * ctx));
X509_VERIFY_PARAM * SAVEDS ASM LIB_SSL_CTX_get0_param(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx));
EVP_PKEY * SAVEDS ASM LIB_SSL_CTX_get0_privatekey(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL_CTX * ctx));
const SSL_METHOD * SAVEDS ASM LIB_SSL_CTX_get_ssl_method(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL_CTX * ctx));
int SAVEDS ASM LIB_SSL_CTX_set_alpn_protos(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(a1, const unsigned char * protos), REG(d0, unsigned int protos_len));
void SAVEDS ASM LIB_SSL_CTX_set_alpn_select_cb(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(a1, SSL_CTX_alpn_select_cb_func cb), REG(a2, void * arg));
void SAVEDS ASM LIB_SSL_CTX_set_cert_cb(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * c), REG(a1, int (*cb)(SSL *ssl, void *arg)), REG(a2, void * arg));
int SAVEDS ASM LIB_SSL_CTX_use_serverinfo(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(a1, const unsigned char * serverinfo), REG(d0, size_t serverinfo_length));
int SAVEDS ASM LIB_SSL_CTX_use_serverinfo_file(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(a1, const char * file));
int SAVEDS ASM LIB_SSL_extension_supported(REG(a6, __IFACE_OR_BASE), REG(d0, unsigned int ext_type));
void SAVEDS ASM LIB_SSL_get0_alpn_selected(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * ssl), REG(a1, const unsigned char ** data), REG(a2, unsigned int * len));
X509_VERIFY_PARAM * SAVEDS ASM LIB_SSL_get0_param(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * ssl));
int SAVEDS ASM LIB_SSL_is_server(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * s));
int SAVEDS ASM LIB_SSL_set_alpn_protos(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * ssl), REG(a1, const unsigned char * protos), REG(a2, unsigned int protos_len));
void SAVEDS ASM LIB_SSL_set_cert_cb(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s), REG(a1, int (*cb)(SSL *ssl, void *arg)), REG(a2, void * arg));
int SAVEDS ASM LIB_SSL_check_chain(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s), REG(a1, X509 * x), REG(a2, EVP_PKEY * pk), REG(a3, STACK_OF(X509) * chain));
int SAVEDS ASM LIB_SSL_get_shared_sigalgs(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s), REG(d0, int idx), REG(a1, int * psign), REG(a2, int * phash), REG(a3, int * psignandhash), REG(d1, unsigned char * rsig), REG(d2, unsigned char * rhash));
int SAVEDS ASM LIB_SSL_get_sigalgs(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s), REG(d0, int idx), REG(a1, int * psign), REG(a2, int * phash), REG(a3, int * psignandhash), REG(d1, unsigned char * rsig), REG(d2, unsigned char * rhash));
void SAVEDS ASM LIB_ASN1_add_stable_module(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_ASN1_buf_print(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, const unsigned char * buf), REG(a2, size_t buflen), REG(d0, int off));
int SAVEDS ASM LIB_ASN1_ENUMERATED_get_int64(REG(a6, __IFACE_OR_BASE), REG(a0, int64_t * pr), REG(a1, const ASN1_ENUMERATED * a));
int SAVEDS ASM LIB_ASN1_ENUMERATED_set_int64(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_ENUMERATED * a), REG(d0, int64_t r));
int SAVEDS ASM LIB_ASN1_INTEGER_get_int64(REG(a6, __IFACE_OR_BASE), REG(a0, int64_t * pr), REG(a1, const ASN1_INTEGER * a));
int SAVEDS ASM LIB_ASN1_INTEGER_get_uint64(REG(a6, __IFACE_OR_BASE), REG(a0, uint64_t * pr), REG(a1, const ASN1_INTEGER * a));
int SAVEDS ASM LIB_ASN1_INTEGER_set_int64(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_INTEGER * a), REG(d0, int64_t r));
int SAVEDS ASM LIB_ASN1_INTEGER_set_uint64(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_INTEGER * a), REG(d0, uint64_t r));
void SAVEDS ASM LIB_ASN1_SCTX_free(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_SCTX * p));
void * SAVEDS ASM LIB_ASN1_SCTX_get_app_data(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_SCTX * p));
unsigned long SAVEDS ASM LIB_ASN1_SCTX_get_flags(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_SCTX * p));
const ASN1_ITEM * SAVEDS ASM LIB_ASN1_SCTX_get_item(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_SCTX * p));
const ASN1_TEMPLATE * SAVEDS ASM LIB_ASN1_SCTX_get_template(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_SCTX * p));
ASN1_SCTX * SAVEDS ASM LIB_ASN1_SCTX_new(REG(a6, __IFACE_OR_BASE), REG(a0, int (*scan_cb)(ASN1_SCTX *)));
void SAVEDS ASM LIB_ASN1_SCTX_set_app_data(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_SCTX * p), REG(a1, void * data));
int SAVEDS ASM LIB_ASN1_str2mask(REG(a6, __IFACE_OR_BASE), REG(a0, const char * str), REG(a1, unsigned long * pmask));
ASN1_TYPE * SAVEDS ASM LIB_ASN1_TYPE_pack_sequence(REG(a6, __IFACE_OR_BASE), REG(a0, const ASN1_ITEM * it), REG(a1, void * s), REG(a2, ASN1_TYPE ** t));
void * SAVEDS ASM LIB_ASN1_TYPE_unpack_sequence(REG(a6, __IFACE_OR_BASE), REG(a0, const ASN1_ITEM * it), REG(a1, const ASN1_TYPE * t));
void SAVEDS ASM LIB_ASYNC_block_pause(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_ASYNC_cleanup_thread(REG(a6, __IFACE_OR_BASE));
ASYNC_JOB * SAVEDS ASM LIB_ASYNC_get_current_job(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_ASYNC_init_thread(REG(a6, __IFACE_OR_BASE), REG(d0, size_t max_size), REG(d1, size_t init_size));
int SAVEDS ASM LIB_ASYNC_pause_job(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_ASYNC_start_job(REG(a6, __IFACE_OR_BASE), REG(a0, ASYNC_JOB ** job), REG(a1, ASYNC_WAIT_CTX * ctx), REG(a2, int * ret), REG(a3, int (*func)(void *)), REG(d0, void * args), REG(d1, size_t size));
void SAVEDS ASM LIB_ASYNC_unblock_pause(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_ERR_load_ASYNC_strings(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_BIO_accept_ex(REG(a6, __IFACE_OR_BASE), REG(d0, int accept_sock), REG(a0, BIO_ADDR * addr), REG(d1, int options));
void SAVEDS ASM LIB_BIO_ADDR_clear(REG(a6, __IFACE_OR_BASE), REG(a0, BIO_ADDR * ap));
int SAVEDS ASM LIB_BIO_ADDR_family(REG(a6, __IFACE_OR_BASE), REG(a0, const BIO_ADDR * ap));
void SAVEDS ASM LIB_BIO_ADDR_free(REG(a6, __IFACE_OR_BASE), REG(a0, BIO_ADDR * ap));
char * SAVEDS ASM LIB_BIO_ADDR_hostname_string(REG(a6, __IFACE_OR_BASE), REG(a0, const BIO_ADDR * ap), REG(a1, int numeric));
BIO_ADDR * SAVEDS ASM LIB_BIO_ADDR_new(REG(a6, __IFACE_OR_BASE));
char * SAVEDS ASM LIB_BIO_ADDR_path_string(REG(a6, __IFACE_OR_BASE), REG(a0, const BIO_ADDR * ap));
int SAVEDS ASM LIB_BIO_ADDR_rawaddress(REG(a6, __IFACE_OR_BASE), REG(a0, const BIO_ADDR * ap), REG(a1, void * p), REG(a2, size_t * l));
int SAVEDS ASM LIB_BIO_ADDR_rawmake(REG(a6, __IFACE_OR_BASE), REG(a0, BIO_ADDR * ap), REG(d0, int family), REG(a1, const void * where), REG(d1, size_t wherelen), REG(d2, unsigned short port));
unsigned short SAVEDS ASM LIB_BIO_ADDR_rawport(REG(a6, __IFACE_OR_BASE), REG(a0, const BIO_ADDR * ap));
char * SAVEDS ASM LIB_BIO_ADDR_service_string(REG(a6, __IFACE_OR_BASE), REG(a0, const BIO_ADDR * ap), REG(d0, int numeric));
const BIO_ADDR * SAVEDS ASM LIB_BIO_ADDRINFO_address(REG(a6, __IFACE_OR_BASE), REG(a0, const BIO_ADDRINFO * bai));
int SAVEDS ASM LIB_BIO_ADDRINFO_family(REG(a6, __IFACE_OR_BASE), REG(a0, const BIO_ADDRINFO * bai));
void SAVEDS ASM LIB_BIO_ADDRINFO_free(REG(a6, __IFACE_OR_BASE), REG(a0, BIO_ADDRINFO * bai));
const BIO_ADDRINFO * SAVEDS ASM LIB_BIO_ADDRINFO_next(REG(a6, __IFACE_OR_BASE), REG(a0, const BIO_ADDRINFO * bai));
int SAVEDS ASM LIB_BIO_ADDRINFO_protocol(REG(a6, __IFACE_OR_BASE), REG(a0, const BIO_ADDRINFO * bai));
int SAVEDS ASM LIB_BIO_ADDRINFO_socktype(REG(a6, __IFACE_OR_BASE), REG(a0, const BIO_ADDRINFO * bai));
int SAVEDS ASM LIB_BIO_closesocket(REG(a6, __IFACE_OR_BASE), REG(d0, int sock));
int SAVEDS ASM LIB_BIO_connect(REG(a6, __IFACE_OR_BASE), REG(d0, int sock), REG(a0, const BIO_ADDR * addr), REG(d1, int options));
int SAVEDS ASM LIB_BIO_listen(REG(a6, __IFACE_OR_BASE), REG(d0, int sock), REG(a0, const BIO_ADDR * addr), REG(d1, int options));
int SAVEDS ASM LIB_BIO_lookup(REG(a6, __IFACE_OR_BASE), REG(a0, const char * host), REG(a1, const char * service), REG(d0, enum BIO_lookup_type lookup_type), REG(d1, int family), REG(d2, int socktype), REG(a2, BIO_ADDRINFO ** res));
int SAVEDS ASM LIB_BIO_parse_hostserv(REG(a6, __IFACE_OR_BASE), REG(a0, const char * hostserv), REG(a1, char ** host), REG(a2, char ** service), REG(d0, enum BIO_hostserv_priorities hostserv_prio));
const BIO_METHOD * SAVEDS ASM LIB_BIO_s_secmem(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_BIO_sock_info(REG(a6, __IFACE_OR_BASE), REG(d0, int sock), REG(d1, enum BIO_sock_info_type type), REG(a0, union BIO_sock_info_u * info));
int SAVEDS ASM LIB_BIO_socket(REG(a6, __IFACE_OR_BASE), REG(d0, int domain), REG(d1, int socktype), REG(d2, int protocol), REG(d3, int options));
int SAVEDS ASM LIB_BN_abs_is_word(REG(a6, __IFACE_OR_BASE), REG(a0, const BIGNUM * a), REG(d0, const BN_ULONG w));
int SAVEDS ASM LIB_BN_bn2binpad(REG(a6, __IFACE_OR_BASE), REG(a0, const BIGNUM * a), REG(a1, unsigned char * to), REG(d0, int tolen));
int SAVEDS ASM LIB_BN_bn2lebinpad(REG(a6, __IFACE_OR_BASE), REG(a0, const BIGNUM * a), REG(a1, unsigned char * to), REG(d0, int tolen));
BN_CTX * SAVEDS ASM LIB_BN_CTX_secure_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_BN_GENCB_free(REG(a6, __IFACE_OR_BASE), REG(a0, BN_GENCB * cb));
void * SAVEDS ASM LIB_BN_GENCB_get_arg(REG(a6, __IFACE_OR_BASE), REG(a0, BN_GENCB * cb));
BN_GENCB * SAVEDS ASM LIB_BN_GENCB_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_BN_GENCB_set(REG(a6, __IFACE_OR_BASE), REG(a0, BN_GENCB * gencb), REG(a1, int (*callback)(int, int, BN_GENCB *)), REG(a2, void * cb_arg));
void SAVEDS ASM LIB_BN_GENCB_set_old(REG(a6, __IFACE_OR_BASE), REG(a0, BN_GENCB * gencb), REG(a1, void (*callback)(int, int, void *)), REG(a2, void * cb_arg));
int SAVEDS ASM LIB_BN_generate_dsa_nonce(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * out), REG(a1, const BIGNUM * range), REG(a2, const BIGNUM * priv), REG(a3, const unsigned char * message), REG(d0, size_t message_len), REG(d1, BN_CTX * ctx));
int SAVEDS ASM LIB_BN_get_flags(REG(a6, __IFACE_OR_BASE), REG(a0, const BIGNUM * b), REG(d0, int n));
int SAVEDS ASM LIB_BN_is_negative(REG(a6, __IFACE_OR_BASE), REG(a0, const BIGNUM * a));
int SAVEDS ASM LIB_BN_is_odd(REG(a6, __IFACE_OR_BASE), REG(a0, const BIGNUM * a));
int SAVEDS ASM LIB_BN_is_one(REG(a6, __IFACE_OR_BASE), REG(a0, const BIGNUM * a));
int SAVEDS ASM LIB_BN_is_word(REG(a6, __IFACE_OR_BASE), REG(a0, const BIGNUM * a), REG(d0, const BN_ULONG w));
int SAVEDS ASM LIB_BN_is_zero(REG(a6, __IFACE_OR_BASE), REG(a0, const BIGNUM * a));
BIGNUM * SAVEDS ASM LIB_BN_lebin2bn(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * s), REG(d0, int len), REG(a1, BIGNUM * ret));
int  SAVEDS ASM (*LIB_BN_nist_mod_func(REG(a6, __IFACE_OR_BASE), REG(a0, const BIGNUM * p)))(BIGNUM *, const BIGNUM *, const BIGNUM *, BN_CTX *);
BIGNUM * SAVEDS ASM LIB_BN_secure_new(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_BN_security_bits(REG(a6, __IFACE_OR_BASE), REG(d0, int L), REG(d1, int N));
void SAVEDS ASM LIB_BN_set_flags(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * b), REG(d0, int n));
int SAVEDS ASM LIB_BN_to_montgomery(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * r), REG(a1, const BIGNUM * a), REG(a2, BN_MONT_CTX * mont), REG(a3, BN_CTX * ctx));
void SAVEDS ASM LIB_BN_with_flags(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * dest), REG(a1, const BIGNUM * b), REG(d0, int flags));
void SAVEDS ASM LIB_BN_zero_ex(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * a));
BUF_MEM * SAVEDS ASM LIB_BUF_MEM_new_ex(REG(a6, __IFACE_OR_BASE), REG(d0, unsigned long flags));
const COMP_METHOD * SAVEDS ASM LIB_COMP_CTX_get_method(REG(a6, __IFACE_OR_BASE), REG(a0, const COMP_CTX * ctx));
int SAVEDS ASM LIB_COMP_CTX_get_type(REG(a6, __IFACE_OR_BASE), REG(a0, const COMP_CTX * ctx));
const char * SAVEDS ASM LIB_COMP_get_name(REG(a6, __IFACE_OR_BASE), REG(a0, const COMP_METHOD * meth));
int SAVEDS ASM LIB_COMP_get_type(REG(a6, __IFACE_OR_BASE), REG(a0, const COMP_METHOD * meth));
void SAVEDS ASM LIB_CRYPTO_clear_free(REG(a6, __IFACE_OR_BASE), REG(a0, void * str), REG(d0, size_t num), REG(a1, const char * file), REG(d1, int line));
void * SAVEDS ASM LIB_CRYPTO_clear_realloc(REG(a6, __IFACE_OR_BASE), REG(a0, void * str), REG(d0, size_t old_len), REG(d1, size_t num), REG(a1, const char * file), REG(d2, int line));
int SAVEDS ASM LIB_CRYPTO_free_ex_index(REG(a6, __IFACE_OR_BASE), REG(d0, int class_index), REG(d1, int idx));
void * SAVEDS ASM LIB_CRYPTO_memdup(REG(a6, __IFACE_OR_BASE), REG(a0, const void * data), REG(d0, size_t siz), REG(a1, const char * file), REG(d1, int line));
size_t SAVEDS ASM LIB_CRYPTO_secure_actual_size(REG(a6, __IFACE_OR_BASE), REG(a0, void * ptr));
int SAVEDS ASM LIB_CRYPTO_secure_allocated(REG(a6, __IFACE_OR_BASE), REG(a0, const void * ptr));
void SAVEDS ASM LIB_CRYPTO_secure_free(REG(a6, __IFACE_OR_BASE), REG(a0, void * ptr), REG(a1, const char * file), REG(d0, int line));
void * SAVEDS ASM LIB_CRYPTO_secure_malloc(REG(a6, __IFACE_OR_BASE), REG(d0, size_t num), REG(a0, const char * file), REG(d1, int line));
int SAVEDS ASM LIB_CRYPTO_secure_malloc_done(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_CRYPTO_secure_malloc_init(REG(a6, __IFACE_OR_BASE), REG(d0, size_t sz), REG(d1, size_t minsize));
int SAVEDS ASM LIB_CRYPTO_secure_malloc_initialized(REG(a6, __IFACE_OR_BASE));
size_t SAVEDS ASM LIB_CRYPTO_secure_used(REG(a6, __IFACE_OR_BASE));
void * SAVEDS ASM LIB_CRYPTO_secure_zalloc(REG(a6, __IFACE_OR_BASE), REG(d0, size_t num), REG(a0, const char * file), REG(d1, int line));
char * SAVEDS ASM LIB_CRYPTO_strndup(REG(a6, __IFACE_OR_BASE), REG(a0, const char * str), REG(d0, size_t s), REG(a1, const char * file), REG(d1, int line));
void * SAVEDS ASM LIB_CRYPTO_zalloc(REG(a6, __IFACE_OR_BASE), REG(d0, size_t num), REG(a0, const char * file), REG(d1, int line));
int SAVEDS ASM LIB_OPENSSL_atexit(REG(a6, __IFACE_OR_BASE), REG(a0, void (*handler)(void)));
void SAVEDS ASM LIB_OPENSSL_cleanup(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_OPENSSL_init_crypto(REG(a6, __IFACE_OR_BASE), REG(d0, uint64_t opts), REG(a0, const OPENSSL_INIT_SETTINGS * settings));
void SAVEDS ASM LIB_OPENSSL_INIT_free(REG(a6, __IFACE_OR_BASE), REG(a0, OPENSSL_INIT_SETTINGS * settings));
OPENSSL_INIT_SETTINGS * SAVEDS ASM LIB_OPENSSL_INIT_new(REG(a6, __IFACE_OR_BASE));
size_t SAVEDS ASM LIB_OPENSSL_strlcat(REG(a6, __IFACE_OR_BASE), REG(a0, char * dst), REG(a1, const char * src), REG(d0, size_t size));
size_t SAVEDS ASM LIB_OPENSSL_strlcpy(REG(a6, __IFACE_OR_BASE), REG(a0, char * dst), REG(a1, const char * src), REG(d0, size_t size));
size_t SAVEDS ASM LIB_OPENSSL_strnlen(REG(a6, __IFACE_OR_BASE), REG(a0, const char * str), REG(d0, size_t maxlen));
void SAVEDS ASM LIB_OPENSSL_thread_stop(REG(a6, __IFACE_OR_BASE));
const char * SAVEDS ASM LIB_OpenSSL_version(REG(a6, __IFACE_OR_BASE), REG(d0, int type));
unsigned long SAVEDS ASM LIB_OpenSSL_version_num(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_DH_bits(REG(a6, __IFACE_OR_BASE), REG(a0, const DH * dh));
int SAVEDS ASM LIB_DH_security_bits(REG(a6, __IFACE_OR_BASE), REG(a0, const DH * dh));
int SAVEDS ASM LIB_DSA_security_bits(REG(a6, __IFACE_OR_BASE), REG(a0, const DSA * d));
const BIGNUM * SAVEDS ASM LIB_EC_GROUP_get0_cofactor(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_GROUP * group));
const BIGNUM * SAVEDS ASM LIB_EC_GROUP_get0_order(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_GROUP * group));
int SAVEDS ASM LIB_EC_GROUP_order_bits(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_GROUP * group));
const EC_KEY_METHOD * SAVEDS ASM LIB_EC_KEY_get_default_method(REG(a6, __IFACE_OR_BASE));
void * SAVEDS ASM LIB_EC_KEY_get_ex_data(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_KEY * key), REG(d0, int idx));
const EC_KEY_METHOD * SAVEDS ASM LIB_EC_KEY_get_method(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_KEY * key));
size_t SAVEDS ASM LIB_EC_KEY_key2buf(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_KEY * key), REG(d0, point_conversion_form_t form), REG(a1, unsigned char ** pbuf), REG(a2, BN_CTX * ctx));
void SAVEDS ASM LIB_EC_KEY_METHOD_free(REG(a6, __IFACE_OR_BASE), REG(a0, EC_KEY_METHOD * meth));
void SAVEDS ASM LIB_EC_KEY_METHOD_get_compute_key(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_KEY_METHOD * meth), REG(a1, int (**pck)(unsigned char **, size_t *, const EC_POINT *, const EC_KEY *)));
void SAVEDS ASM LIB_EC_KEY_METHOD_get_init(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_KEY_METHOD * meth), REG(a1, int (**pinit)(EC_KEY *)), REG(a2, void (**pfinish)(EC_KEY *)), REG(a3, int (**pcopy)(EC_KEY *, const EC_KEY *)), REG(d0, int (**pset_group)(EC_KEY *, const EC_GROUP *)), REG(d1, int (**pset_private)(EC_KEY *, const BIGNUM *)), REG(d2, int (**pset_public)(EC_KEY *, const EC_POINT *)));
void SAVEDS ASM LIB_EC_KEY_METHOD_get_keygen(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_KEY_METHOD * meth), REG(a1, int (**pkeygen)(EC_KEY *)));
void SAVEDS ASM LIB_EC_KEY_METHOD_get_sign(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_KEY_METHOD * meth), REG(a1, int (**psign)(int, const unsigned char *, int, unsigned char *, unsigned int *, const BIGNUM *, const BIGNUM *, EC_KEY *)), REG(a2, int (**psign_setup)(EC_KEY *, BN_CTX *, BIGNUM **, BIGNUM **)), REG(a3, ECDSA_SIG * (**psign_sig)(const unsigned char *, int, const BIGNUM *, const BIGNUM *, EC_KEY *)));
void SAVEDS ASM LIB_EC_KEY_METHOD_get_verify(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_KEY_METHOD * meth), REG(a1, int (**pverify)(int, const unsigned char *, int, const unsigned char *, int, EC_KEY *)), REG(a2, int (**pverify_sig)(const unsigned char *, int, const ECDSA_SIG *, EC_KEY *)));
EC_KEY_METHOD * SAVEDS ASM LIB_EC_KEY_METHOD_new(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_KEY_METHOD * meth));
void SAVEDS ASM LIB_EC_KEY_METHOD_set_compute_key(REG(a6, __IFACE_OR_BASE), REG(a0, EC_KEY_METHOD * meth), REG(a1, int (*ckey)(unsigned char **, size_t *, const EC_POINT *, const EC_KEY *)));
void SAVEDS ASM LIB_EC_KEY_METHOD_set_init(REG(a6, __IFACE_OR_BASE), REG(a0, EC_KEY_METHOD * meth), REG(a1, int (*init)(EC_KEY *)), REG(a2, void (*finish)(EC_KEY *)), REG(a3, int (*copy)(EC_KEY *, const EC_KEY *)), REG(d0, int (*set_group)(EC_KEY *, const EC_GROUP *)), REG(d1, int (*set_private)(EC_KEY *, const BIGNUM *)), REG(d2, int (*set_public)(EC_KEY *, const EC_POINT *)));
void SAVEDS ASM LIB_EC_KEY_METHOD_set_keygen(REG(a6, __IFACE_OR_BASE), REG(a0, EC_KEY_METHOD * meth), REG(a1, int (*keygen)(EC_KEY *)));
void SAVEDS ASM LIB_EC_KEY_METHOD_set_sign(REG(a6, __IFACE_OR_BASE), REG(a0, EC_KEY_METHOD * meth), REG(a1, int (*sign)(int, const unsigned char *, int, unsigned char *, unsigned int *, const BIGNUM *, const BIGNUM *, EC_KEY *)), REG(a2, int (*sign_setup)(EC_KEY *, BN_CTX *, BIGNUM **, BIGNUM **)), REG(a3, ECDSA_SIG * (*sign_sig)(const unsigned char *, int, const BIGNUM *, const BIGNUM *, EC_KEY *)));
void SAVEDS ASM LIB_EC_KEY_METHOD_set_verify(REG(a6, __IFACE_OR_BASE), REG(a0, EC_KEY_METHOD * meth), REG(a1, int (*verify)(int, const unsigned char *, int, const unsigned char *, int, EC_KEY *)), REG(a2, int (*verify_sig)(const unsigned char *, int, const ECDSA_SIG *, EC_KEY *)));
EC_KEY * SAVEDS ASM LIB_EC_KEY_new_method(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * engine));
int SAVEDS ASM LIB_EC_KEY_oct2key(REG(a6, __IFACE_OR_BASE), REG(a0, EC_KEY * key), REG(a1, const unsigned char * buf), REG(d0, size_t len), REG(a2, BN_CTX * ctx));
int SAVEDS ASM LIB_EC_KEY_oct2priv(REG(a6, __IFACE_OR_BASE), REG(a0, EC_KEY * key), REG(a1, const unsigned char * buf), REG(d0, size_t len));
const EC_KEY_METHOD * SAVEDS ASM LIB_EC_KEY_OpenSSL(REG(a6, __IFACE_OR_BASE));
size_t SAVEDS ASM LIB_EC_KEY_priv2buf(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_KEY * eckey), REG(a1, unsigned char ** pbuf));
size_t SAVEDS ASM LIB_EC_KEY_priv2oct(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_KEY * eckey), REG(a1, unsigned char * buf), REG(d0, size_t len));
void SAVEDS ASM LIB_EC_KEY_set_default_method(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_KEY_METHOD * meth));
int SAVEDS ASM LIB_EC_KEY_set_ex_data(REG(a6, __IFACE_OR_BASE), REG(a0, EC_KEY * key), REG(d0, int idx), REG(a1, void * arg));
int SAVEDS ASM LIB_EC_KEY_set_method(REG(a6, __IFACE_OR_BASE), REG(a0, EC_KEY * key), REG(a1, const EC_KEY_METHOD * meth));
size_t SAVEDS ASM LIB_EC_POINT_point2buf(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_GROUP * group), REG(a1, const EC_POINT * point), REG(d0, point_conversion_form_t form), REG(a2, unsigned char ** pbuf), REG(a3, BN_CTX * ctx));
void SAVEDS ASM LIB_ECDSA_SIG_get0(REG(a6, __IFACE_OR_BASE), REG(a0, const ECDSA_SIG * sig), REG(a1, const BIGNUM ** pr), REG(a2, const BIGNUM ** ps));
ENGINE * SAVEDS ASM LIB_ENGINE_get_default_EC(REG(a6, __IFACE_OR_BASE));
const EC_KEY_METHOD * SAVEDS ASM LIB_ENGINE_get_EC(REG(a6, __IFACE_OR_BASE), REG(a0, const ENGINE * e));
void SAVEDS ASM LIB_ENGINE_register_all_EC(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_ENGINE_register_EC(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e));
int SAVEDS ASM LIB_ENGINE_set_default_EC(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e));
int SAVEDS ASM LIB_ENGINE_set_EC(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e), REG(a1, const EC_KEY_METHOD * ecdsa_meth));
void SAVEDS ASM LIB_ENGINE_unregister_EC(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_aes_128_ocb(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_aes_128_wrap_pad(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_aes_192_ocb(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_aes_192_wrap_pad(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_aes_256_ocb(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_aes_256_wrap_pad(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_camellia_128_ctr(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_camellia_192_ctr(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_camellia_256_ctr(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_chacha20(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_chacha20_poly1305(REG(a6, __IFACE_OR_BASE));
unsigned char * SAVEDS ASM LIB_EVP_CIPHER_CTX_buf_noconst(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_CIPHER_CTX * ctx));
void * SAVEDS ASM LIB_EVP_CIPHER_CTX_get_cipher_data(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_CIPHER_CTX * ctx));
void * SAVEDS ASM LIB_EVP_CIPHER_CTX_set_cipher_data(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_CIPHER_CTX * ctx), REG(a1, void * cipher_data));
int SAVEDS ASM LIB_EVP_CIPHER_CTX_is_encrypting(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_CIPHER_CTX * ctx));
const unsigned char * SAVEDS ASM LIB_EVP_CIPHER_CTX_iv(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_CIPHER_CTX * ctx));
unsigned char * SAVEDS ASM LIB_EVP_CIPHER_CTX_iv_noconst(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_CIPHER_CTX * ctx));
int SAVEDS ASM LIB_EVP_CIPHER_CTX_get_num(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_CIPHER_CTX * ctx));
const unsigned char * SAVEDS ASM LIB_EVP_CIPHER_CTX_original_iv(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_CIPHER_CTX * ctx));
int SAVEDS ASM LIB_EVP_CIPHER_CTX_reset(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_CIPHER_CTX * ctx));
int SAVEDS ASM LIB_EVP_CIPHER_CTX_set_num(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_CIPHER_CTX * ctx), REG(d0, int num));
int SAVEDS ASM LIB_EVP_CIPHER_impl_ctx_size(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_CIPHER * cipher));
EVP_CIPHER * SAVEDS ASM LIB_EVP_CIPHER_meth_dup(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_CIPHER * cipher));
void SAVEDS ASM LIB_EVP_CIPHER_meth_free(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_CIPHER * cipher));
int  SAVEDS ASM (*LIB_EVP_CIPHER_meth_get_cleanup(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_CIPHER * cipher)))(EVP_CIPHER_CTX *);
int  SAVEDS ASM (*LIB_EVP_CIPHER_meth_get_ctrl(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_CIPHER * cipher)))(EVP_CIPHER_CTX *, int, int, void *);
int  SAVEDS ASM (*LIB_EVP_CIPHER_meth_get_do_cipher(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_CIPHER * cipher)))(EVP_CIPHER_CTX *, unsigned char *, const unsigned char *, size_t);
int  SAVEDS ASM (*LIB_EVP_CIPHER_meth_get_get_asn1_params(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_CIPHER * cipher)))(EVP_CIPHER_CTX *, ASN1_TYPE *);
int  SAVEDS ASM (*LIB_EVP_CIPHER_meth_get_init(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_CIPHER * cipher)))(EVP_CIPHER_CTX *, const unsigned char *, const unsigned char *, int);
int  SAVEDS ASM (*LIB_EVP_CIPHER_meth_get_set_asn1_params(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_CIPHER * cipher)))(EVP_CIPHER_CTX *, ASN1_TYPE *);
EVP_CIPHER * SAVEDS ASM LIB_EVP_CIPHER_meth_new(REG(a6, __IFACE_OR_BASE), REG(d0, int cipher_type), REG(d1, int block_size), REG(d2, int key_len));
int SAVEDS ASM LIB_EVP_CIPHER_meth_set_cleanup(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_CIPHER * cipher), REG(a1, int (*cleanup)(EVP_CIPHER_CTX *)));
int SAVEDS ASM LIB_EVP_CIPHER_meth_set_ctrl(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_CIPHER * cipher), REG(a1, int (*ctrl)(EVP_CIPHER_CTX *, int, int, void *)));
int SAVEDS ASM LIB_EVP_CIPHER_meth_set_do_cipher(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_CIPHER * cipher), REG(a1, int (*do_cipher)(EVP_CIPHER_CTX *, unsigned char *, const unsigned char *, size_t)));
int SAVEDS ASM LIB_EVP_CIPHER_meth_set_flags(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_CIPHER * cipher), REG(d0, unsigned long flags));
int SAVEDS ASM LIB_EVP_CIPHER_meth_set_get_asn1_params(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_CIPHER * cipher), REG(a1, int (*get_asn1_parameters)(EVP_CIPHER_CTX *, ASN1_TYPE *)));
int SAVEDS ASM LIB_EVP_CIPHER_meth_set_impl_ctx_size(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_CIPHER * cipher), REG(d0, int ctx_size));
int SAVEDS ASM LIB_EVP_CIPHER_meth_set_init(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_CIPHER * cipher), REG(a1, int (*init)(EVP_CIPHER_CTX *, const unsigned char *, const unsigned char *, int)));
int SAVEDS ASM LIB_EVP_CIPHER_meth_set_iv_length(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_CIPHER * cipher), REG(d0, int iv_len));
int SAVEDS ASM LIB_EVP_CIPHER_meth_set_set_asn1_params(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_CIPHER * cipher), REG(a1, int (*set_asn1_parameters)(EVP_CIPHER_CTX *, ASN1_TYPE *)));
void SAVEDS ASM LIB_EVP_ENCODE_CTX_free(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_ENCODE_CTX * ctx));
EVP_ENCODE_CTX * SAVEDS ASM LIB_EVP_ENCODE_CTX_new(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_EVP_ENCODE_CTX_num(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_ENCODE_CTX * ctx));
const EVP_MD * SAVEDS ASM LIB_EVP_md5_sha1(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_EVP_MD_CTX_ctrl(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_MD_CTX * ctx), REG(d0, int cmd), REG(d1, int p1), REG(a1, void * p2));
void SAVEDS ASM LIB_EVP_MD_CTX_free(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_MD_CTX * ctx));
void * SAVEDS ASM LIB_EVP_MD_CTX_get0_md_data(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_MD_CTX * ctx));
EVP_MD_CTX * SAVEDS ASM LIB_EVP_MD_CTX_new(REG(a6, __IFACE_OR_BASE));
EVP_PKEY_CTX * SAVEDS ASM LIB_EVP_MD_CTX_get_pkey_ctx(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_MD_CTX * ctx));
int SAVEDS ASM LIB_EVP_MD_CTX_reset(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_MD_CTX * ctx));
void SAVEDS ASM LIB_EVP_MD_CTX_set_update_fn(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_MD_CTX * ctx), REG(a1, int (*update)(EVP_MD_CTX *, const void *, size_t)));
int  SAVEDS ASM (*LIB_EVP_MD_CTX_update_fn(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_MD_CTX * ctx)))(EVP_MD_CTX *, const void *, size_t);
EVP_MD * SAVEDS ASM LIB_EVP_MD_meth_dup(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_MD * md));
void SAVEDS ASM LIB_EVP_MD_meth_free(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_MD * md));
int SAVEDS ASM LIB_EVP_MD_meth_get_app_datasize(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_MD * md));
int  SAVEDS ASM (*LIB_EVP_MD_meth_get_cleanup(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_MD * md)))(EVP_MD_CTX *);
int  SAVEDS ASM (*LIB_EVP_MD_meth_get_copy(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_MD * md)))(EVP_MD_CTX *, const EVP_MD_CTX *);
int  SAVEDS ASM (*LIB_EVP_MD_meth_get_ctrl(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_MD * md)))(EVP_MD_CTX *, int, int, void *);
int  SAVEDS ASM (*LIB_EVP_MD_meth_get_final(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_MD * md)))(EVP_MD_CTX *, unsigned char *);
unsigned long SAVEDS ASM LIB_EVP_MD_meth_get_flags(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_MD * md));
int  SAVEDS ASM (*LIB_EVP_MD_meth_get_init(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_MD * md)))(EVP_MD_CTX *);
int SAVEDS ASM LIB_EVP_MD_meth_get_input_blocksize(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_MD * md));
int SAVEDS ASM LIB_EVP_MD_meth_get_result_size(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_MD * md));
int  SAVEDS ASM (*LIB_EVP_MD_meth_get_update(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_MD * md)))(EVP_MD_CTX *, const void *, size_t);
EVP_MD * SAVEDS ASM LIB_EVP_MD_meth_new(REG(a6, __IFACE_OR_BASE), REG(d0, int md_type), REG(d1, int pkey_type));
int SAVEDS ASM LIB_EVP_MD_meth_set_app_datasize(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_MD * md), REG(d0, int datasize));
int SAVEDS ASM LIB_EVP_MD_meth_set_cleanup(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_MD * md), REG(a1, int (*cleanup)(EVP_MD_CTX *)));
int SAVEDS ASM LIB_EVP_MD_meth_set_copy(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_MD * md), REG(a1, int (*copy)(EVP_MD_CTX *, const EVP_MD_CTX *)));
int SAVEDS ASM LIB_EVP_MD_meth_set_ctrl(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_MD * md), REG(a1, int (*ctrl)(EVP_MD_CTX *, int, int, void *)));
int SAVEDS ASM LIB_EVP_MD_meth_set_final(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_MD * md), REG(a1, int (*final)(EVP_MD_CTX *, unsigned char *)));
int SAVEDS ASM LIB_EVP_MD_meth_set_flags(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_MD * md), REG(d0, unsigned long flags));
int SAVEDS ASM LIB_EVP_MD_meth_set_init(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_MD * md), REG(a1, int (*init)(EVP_MD_CTX *)));
int SAVEDS ASM LIB_EVP_MD_meth_set_input_blocksize(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_MD * md), REG(d0, int blocksize));
int SAVEDS ASM LIB_EVP_MD_meth_set_result_size(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_MD * md), REG(d0, int resultsize));
int SAVEDS ASM LIB_EVP_MD_meth_set_update(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_MD * md), REG(a1, int (*update)(EVP_MD_CTX *, const void *, size_t)));
int SAVEDS ASM LIB_EVP_PBE_get(REG(a6, __IFACE_OR_BASE), REG(a0, int * ptype), REG(a1, int * ppbe_nid), REG(d0, size_t num));
int SAVEDS ASM LIB_OBSOLETE_EVP_PBE_scrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const char * pass), REG(d0, size_t passlen), REG(a1, const unsigned char * salt), REG(d1, size_t saltlen), REG(d2, unsigned long N), REG(d3, unsigned long r), REG(d4, unsigned long p), REG(d5, uint64_t maxmem), REG(a2, unsigned char * key), REG(a3, size_t keylen));
void SAVEDS ASM LIB_EVP_PKEY_asn1_set_security_bits(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_ASN1_METHOD * ameth), REG(a1, int (*pkey_security_bits)(const EVP_PKEY *)));
const DH * SAVEDS ASM LIB_EVP_PKEY_get0_DH(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_PKEY * pkey));
const DSA * SAVEDS ASM LIB_EVP_PKEY_get0_DSA(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_PKEY * pkey));
const EC_KEY * SAVEDS ASM LIB_EVP_PKEY_get0_EC_KEY(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_PKEY * pkey));
const RSA * SAVEDS ASM LIB_EVP_PKEY_get0_RSA(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_PKEY * pkey));
void SAVEDS ASM LIB_EVP_PKEY_meth_get_cleanup(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_PKEY_METHOD * pmeth), REG(a1, void (**pcleanup)(EVP_PKEY_CTX *)));
void SAVEDS ASM LIB_EVP_PKEY_meth_get_copy(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_PKEY_METHOD * pmeth), REG(a1, int (**pcopy)(EVP_PKEY_CTX *, const EVP_PKEY_CTX *)));
void SAVEDS ASM LIB_EVP_PKEY_meth_get_ctrl(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_PKEY_METHOD * pmeth), REG(a1, int (**pctrl)(EVP_PKEY_CTX *, int, int, void *)), REG(a2, int (**pctrl_str)(EVP_PKEY_CTX *, const char *, const char *)));
void SAVEDS ASM LIB_EVP_PKEY_meth_get_decrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_PKEY_METHOD * pmeth), REG(a1, int (**pdecrypt_init)(EVP_PKEY_CTX *)), REG(a2, int (**pdecrypt)(EVP_PKEY_CTX *, unsigned char *, size_t *, const unsigned char *, size_t)));
void SAVEDS ASM LIB_EVP_PKEY_meth_get_derive(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_PKEY_METHOD * pmeth), REG(a1, int (**pderive_init)(EVP_PKEY_CTX *)), REG(a2, int (**pderive)(EVP_PKEY_CTX *, unsigned char *, size_t *)));
void SAVEDS ASM LIB_EVP_PKEY_meth_get_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_PKEY_METHOD * pmeth), REG(a1, int (**pencrypt_init)(EVP_PKEY_CTX *)), REG(a2, int (**pencryptfn)(EVP_PKEY_CTX *, unsigned char *, size_t *, const unsigned char *, size_t)));
void SAVEDS ASM LIB_EVP_PKEY_meth_get_init(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_PKEY_METHOD * pmeth), REG(a1, int (**pinit)(EVP_PKEY_CTX *)));
void SAVEDS ASM LIB_EVP_PKEY_meth_get_keygen(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_PKEY_METHOD * pmeth), REG(a1, int (**pkeygen_init)(EVP_PKEY_CTX *)), REG(a2, int (**pkeygen)(EVP_PKEY_CTX *, EVP_PKEY *)));
void SAVEDS ASM LIB_EVP_PKEY_meth_get_paramgen(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_PKEY_METHOD * pmeth), REG(a1, int (**pparamgen_init)(EVP_PKEY_CTX *)), REG(a2, int (**pparamgen)(EVP_PKEY_CTX *, EVP_PKEY *)));
void SAVEDS ASM LIB_EVP_PKEY_meth_get_sign(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_PKEY_METHOD * pmeth), REG(a1, int (**psign_init)(EVP_PKEY_CTX *)), REG(a2, int (**psign)(EVP_PKEY_CTX *, unsigned char *, size_t *, const unsigned char *, size_t)));
void SAVEDS ASM LIB_EVP_PKEY_meth_get_signctx(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_PKEY_METHOD * pmeth), REG(a1, int (**psignctx_init)(EVP_PKEY_CTX *, EVP_MD_CTX *)), REG(a2, int (**psignctx)(EVP_PKEY_CTX *, unsigned char *, size_t *, EVP_MD_CTX *)));
void SAVEDS ASM LIB_EVP_PKEY_meth_get_verify(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_PKEY_METHOD * pmeth), REG(a1, int (**pverify_init)(EVP_PKEY_CTX *)), REG(a2, int (**pverify)(EVP_PKEY_CTX *, const unsigned char *, size_t, const unsigned char *, size_t)));
void SAVEDS ASM LIB_EVP_PKEY_meth_get_verify_recover(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_PKEY_METHOD * pmeth), REG(a1, int (**pverify_recover_init)(EVP_PKEY_CTX *)), REG(a2, int (**pverify_recover)(EVP_PKEY_CTX *, unsigned char *, size_t *, const unsigned char *, size_t)));
void SAVEDS ASM LIB_EVP_PKEY_meth_get_verifyctx(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_PKEY_METHOD * pmeth), REG(a1, int (**pverifyctx_init)(EVP_PKEY_CTX *, EVP_MD_CTX *)), REG(a2, int (**pverifyctx)(EVP_PKEY_CTX *, const unsigned char *, int, EVP_MD_CTX *)));
int SAVEDS ASM LIB_EVP_PKEY_get_security_bits(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_PKEY * pkey));
int SAVEDS ASM LIB_EVP_PKEY_up_ref(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY * pkey));
int SAVEDS ASM LIB_PKCS5_v2_scrypt_keyivgen(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_CIPHER_CTX * ctx), REG(a1, const char * pass), REG(d0, int passlen), REG(a2, ASN1_TYPE * param), REG(a3, const EVP_CIPHER * c), REG(d1, const EVP_MD * md), REG(d2, int en_de));
void SAVEDS ASM LIB_HMAC_CTX_free(REG(a6, __IFACE_OR_BASE), REG(a0, HMAC_CTX * ctx));
HMAC_CTX * SAVEDS ASM LIB_HMAC_CTX_new(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_HMAC_CTX_reset(REG(a6, __IFACE_OR_BASE), REG(a0, HMAC_CTX * ctx));
size_t SAVEDS ASM LIB_HMAC_size(REG(a6, __IFACE_OR_BASE), REG(a0, const HMAC_CTX * ctx));
int SAVEDS ASM LIB_OPENSSL_LH_error(REG(a6, __IFACE_OR_BASE), REG(a0, OPENSSL_LHASH * lh));
unsigned long SAVEDS ASM LIB_OPENSSL_LH_get_down_load(REG(a6, __IFACE_OR_BASE), REG(a0, const OPENSSL_LHASH * lh));
void SAVEDS ASM LIB_OPENSSL_LH_set_down_load(REG(a6, __IFACE_OR_BASE), REG(a0, OPENSSL_LHASH * lh), REG(d0, unsigned long down_load));
size_t SAVEDS ASM LIB_CRYPTO_128_unwrap_pad(REG(a6, __IFACE_OR_BASE), REG(a0, void * key), REG(a1, const unsigned char * icv), REG(a2, unsigned char * out), REG(a3, const unsigned char * in), REG(d0, size_t inlen), REG(d1, block128_f block));
size_t SAVEDS ASM LIB_CRYPTO_128_wrap_pad(REG(a6, __IFACE_OR_BASE), REG(a0, void * key), REG(a1, const unsigned char * icv), REG(a2, unsigned char * out), REG(a3, const unsigned char * in), REG(d0, size_t inlen), REG(d1, block128_f block));
int SAVEDS ASM LIB_CRYPTO_ocb128_aad(REG(a6, __IFACE_OR_BASE), REG(a0, OCB128_CONTEXT * ctx), REG(a1, const unsigned char * aad), REG(d0, size_t len));
void SAVEDS ASM LIB_CRYPTO_ocb128_cleanup(REG(a6, __IFACE_OR_BASE), REG(a0, OCB128_CONTEXT * ctx));
int SAVEDS ASM LIB_CRYPTO_ocb128_copy_ctx(REG(a6, __IFACE_OR_BASE), REG(a0, OCB128_CONTEXT * dest), REG(a1, OCB128_CONTEXT * src), REG(a2, void * keyenc), REG(a3, void * keydec));
int SAVEDS ASM LIB_CRYPTO_ocb128_decrypt(REG(a6, __IFACE_OR_BASE), REG(a0, OCB128_CONTEXT * ctx), REG(a1, const unsigned char * in), REG(a2, unsigned char * out), REG(d0, size_t len));
int SAVEDS ASM LIB_CRYPTO_ocb128_encrypt(REG(a6, __IFACE_OR_BASE), REG(a0, OCB128_CONTEXT * ctx), REG(a1, const unsigned char * in), REG(a2, unsigned char * out), REG(d0, size_t len));
int SAVEDS ASM LIB_CRYPTO_ocb128_finish(REG(a6, __IFACE_OR_BASE), REG(a0, OCB128_CONTEXT * ctx), REG(a1, const unsigned char * tag), REG(d0, size_t len));
int SAVEDS ASM LIB_CRYPTO_ocb128_init(REG(a6, __IFACE_OR_BASE), REG(a0, OCB128_CONTEXT * ctx), REG(a1, void * keyenc), REG(a2, void * keydec), REG(d0, block128_f encrypt), REG(d1, block128_f decrypt), REG(d2, ocb128_f stream));
OCB128_CONTEXT * SAVEDS ASM LIB_CRYPTO_ocb128_new(REG(a6, __IFACE_OR_BASE), REG(a0, void * keyenc), REG(a1, void * keydec), REG(d0, block128_f encrypt), REG(d1, block128_f decrypt), REG(d2, ocb128_f stream));
int SAVEDS ASM LIB_CRYPTO_ocb128_setiv(REG(a6, __IFACE_OR_BASE), REG(a0, OCB128_CONTEXT * ctx), REG(a1, const unsigned char * iv), REG(d0, size_t len), REG(d1, size_t taglen));
int SAVEDS ASM LIB_CRYPTO_ocb128_tag(REG(a6, __IFACE_OR_BASE), REG(a0, OCB128_CONTEXT * ctx), REG(a1, unsigned char * tag), REG(d0, size_t len));
const unsigned char * SAVEDS ASM LIB_OBJ_get0_data(REG(a6, __IFACE_OR_BASE), REG(a0, const ASN1_OBJECT * obj));
size_t SAVEDS ASM LIB_OBJ_length(REG(a6, __IFACE_OR_BASE), REG(a0, const ASN1_OBJECT * obj));
const ASN1_GENERALIZEDTIME * SAVEDS ASM LIB_OCSP_resp_get0_produced_at(REG(a6, __IFACE_OR_BASE), REG(a0, const OCSP_BASICRESP * bs));
const ASN1_OCTET_STRING * SAVEDS ASM LIB_OCSP_resp_get0_signature(REG(a6, __IFACE_OR_BASE), REG(a0, const OCSP_BASICRESP * bs));
const OCSP_CERTID * SAVEDS ASM LIB_OCSP_SINGLERESP_get0_id(REG(a6, __IFACE_OR_BASE), REG(a0, const OCSP_SINGLERESP * bs));
void SAVEDS ASM LIB_PKCS12_get0_mac(REG(a6, __IFACE_OR_BASE), REG(a0, const ASN1_OCTET_STRING ** pmac), REG(a1, const X509_ALGOR ** pmacalg), REG(a2, const ASN1_OCTET_STRING ** psalt), REG(a3, const ASN1_INTEGER ** piter), REG(d0, const PKCS12 * p12));
int SAVEDS ASM LIB_PKCS12_mac_present(REG(a6, __IFACE_OR_BASE), REG(a0, const PKCS12 * p12));
PKCS12_SAFEBAG * SAVEDS ASM LIB_PKCS12_SAFEBAG_create0_p8inf(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS8_PRIV_KEY_INFO * p8));
PKCS12_SAFEBAG * SAVEDS ASM LIB_PKCS12_SAFEBAG_create0_pkcs8(REG(a6, __IFACE_OR_BASE), REG(a0, X509_SIG * p8));
PKCS12_SAFEBAG * SAVEDS ASM LIB_PKCS12_SAFEBAG_create_cert(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * x509));
PKCS12_SAFEBAG * SAVEDS ASM LIB_PKCS12_SAFEBAG_create_crl(REG(a6, __IFACE_OR_BASE), REG(a0, X509_CRL * crl));
PKCS12_SAFEBAG * SAVEDS ASM LIB_PKCS12_SAFEBAG_create_pkcs8_encrypt(REG(a6, __IFACE_OR_BASE), REG(d0, int pbe_nid), REG(a0, const char * pass), REG(d1, int passlen), REG(a1, unsigned char * salt), REG(d2, int saltlen), REG(d3, int iter), REG(a2, PKCS8_PRIV_KEY_INFO * p8inf));
const ASN1_TYPE * SAVEDS ASM LIB_PKCS12_SAFEBAG_get0_attr(REG(a6, __IFACE_OR_BASE), REG(a0, const PKCS12_SAFEBAG * bag), REG(d0, int attr_nid));
const STACK_OF(X509_ATTRIBUTE) * SAVEDS ASM LIB_PKCS12_SAFEBAG_get0_attrs(REG(a6, __IFACE_OR_BASE), REG(a0, const PKCS12_SAFEBAG * bag));
const PKCS8_PRIV_KEY_INFO * SAVEDS ASM LIB_PKCS12_SAFEBAG_get0_p8inf(REG(a6, __IFACE_OR_BASE), REG(a0, const PKCS12_SAFEBAG * bag));
const X509_SIG * SAVEDS ASM LIB_PKCS12_SAFEBAG_get0_pkcs8(REG(a6, __IFACE_OR_BASE), REG(a0, const PKCS12_SAFEBAG * bag));
const STACK_OF(PKCS12_SAFEBAG) * SAVEDS ASM LIB_PKCS12_SAFEBAG_get0_safes(REG(a6, __IFACE_OR_BASE), REG(a0, const PKCS12_SAFEBAG * bag));
const ASN1_OBJECT * SAVEDS ASM LIB_PKCS12_SAFEBAG_get0_type(REG(a6, __IFACE_OR_BASE), REG(a0, const PKCS12_SAFEBAG * bag));
X509 * SAVEDS ASM LIB_PKCS12_SAFEBAG_get1_cert(REG(a6, __IFACE_OR_BASE), REG(a0, const PKCS12_SAFEBAG * bag));
X509_CRL * SAVEDS ASM LIB_PKCS12_SAFEBAG_get1_crl(REG(a6, __IFACE_OR_BASE), REG(a0, const PKCS12_SAFEBAG * bag));
int SAVEDS ASM LIB_PKCS12_SAFEBAG_get_bag_nid(REG(a6, __IFACE_OR_BASE), REG(a0, const PKCS12_SAFEBAG * bag));
int SAVEDS ASM LIB_PKCS12_SAFEBAG_get_nid(REG(a6, __IFACE_OR_BASE), REG(a0, const PKCS12_SAFEBAG * bag));
ASN1_TYPE * SAVEDS ASM LIB_PKCS8_get_attr(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS8_PRIV_KEY_INFO * p8), REG(d0, int attr_nid));
X509_SIG * SAVEDS ASM LIB_PKCS8_set0_pbe(REG(a6, __IFACE_OR_BASE), REG(a0, const char * pass), REG(d0, int passlen), REG(a1, PKCS8_PRIV_KEY_INFO * p8inf), REG(a2, X509_ALGOR * pbe));
RAND_METHOD * SAVEDS ASM LIB_RAND_OpenSSL(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_RSA_bits(REG(a6, __IFACE_OR_BASE), REG(a0, const RSA * r));
int SAVEDS ASM LIB_RSA_check_key_ex(REG(a6, __IFACE_OR_BASE), REG(a0, const RSA * key), REG(a1, BN_GENCB * cb));
const RSA_METHOD * SAVEDS ASM LIB_RSA_PKCS1_OpenSSL(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_RSA_security_bits(REG(a6, __IFACE_OR_BASE), REG(a0, const RSA * rsa));
int SAVEDS ASM LIB_OBSOLETE_RSA_X931_derive_ex(REG(a6, __IFACE_OR_BASE), REG(a0, RSA * rsa), REG(a1, BIGNUM * p1), REG(a2, BIGNUM * p2), REG(a3, BIGNUM * q1), REG(d0, BIGNUM * q2), REG(d1, const BIGNUM * Xp1), REG(d2, const BIGNUM * Xp2), REG(d3, const BIGNUM * Xp), REG(d4, const BIGNUM * Xq1), REG(d5, const BIGNUM * Xq2), REG(d6, const BIGNUM * Xq), REG(d7, const BIGNUM * e), REG(a4, BN_GENCB * cb));
int SAVEDS ASM LIB_RSA_X931_generate_key_ex(REG(a6, __IFACE_OR_BASE), REG(a0, RSA * rsa), REG(d0, int bits), REG(a1, const BIGNUM * e), REG(d1, BN_GENCB * cb));
int SAVEDS ASM LIB_TS_CONF_set_signer_digest(REG(a6, __IFACE_OR_BASE), REG(a0, CONF * conf), REG(a1, const char * section), REG(a2, const char * md), REG(a3, TS_RESP_CTX * ctx));
int SAVEDS ASM LIB_TS_RESP_CTX_set_signer_digest(REG(a6, __IFACE_OR_BASE), REG(a0, TS_RESP_CTX * ctx), REG(a1, const EVP_MD * md));
const ASN1_BIT_STRING * SAVEDS ASM LIB_TS_STATUS_INFO_get0_failure_info(REG(a6, __IFACE_OR_BASE), REG(a0, const TS_STATUS_INFO * a));
const ASN1_INTEGER * SAVEDS ASM LIB_TS_STATUS_INFO_get0_status(REG(a6, __IFACE_OR_BASE), REG(a0, const TS_STATUS_INFO * a));
int SAVEDS ASM LIB_TS_STATUS_INFO_set_status(REG(a6, __IFACE_OR_BASE), REG(a0, TS_STATUS_INFO * a), REG(d0, int i));
int SAVEDS ASM LIB_TS_VERIFY_CTX_add_flags(REG(a6, __IFACE_OR_BASE), REG(a0, TS_VERIFY_CTX * ctx), REG(d0, int f));
BIO * SAVEDS ASM LIB_TS_VERIFY_CTX_set_data(REG(a6, __IFACE_OR_BASE), REG(a0, TS_VERIFY_CTX * ctx), REG(a1, BIO * b));
int SAVEDS ASM LIB_TS_VERIFY_CTX_set_flags(REG(a6, __IFACE_OR_BASE), REG(a0, TS_VERIFY_CTX * ctx), REG(d0, int f));
unsigned char * SAVEDS ASM LIB_TS_VERIFY_CTX_set_imprint(REG(a6, __IFACE_OR_BASE), REG(a0, TS_VERIFY_CTX * ctx), REG(a1, unsigned char * hexstr), REG(d0, long len));
X509_STORE * SAVEDS ASM LIB_TS_VERIFY_CTX_set_store(REG(a6, __IFACE_OR_BASE), REG(a0, TS_VERIFY_CTX * ctx), REG(a1, X509_STORE * s));
STACK_OF(X509) * SAVEDS ASM LIB_TS_VERIFY_CTX_set_certs(REG(a6, __IFACE_OR_BASE), REG(a0, TS_VERIFY_CTX * ctx), REG(a1, STACK_OF(X509) * certs));
int SAVEDS ASM LIB_i2d_re_X509_CRL_tbs(REG(a6, __IFACE_OR_BASE), REG(a0, X509_CRL * req), REG(a1, unsigned char ** pp));
int SAVEDS ASM LIB_i2d_re_X509_REQ_tbs(REG(a6, __IFACE_OR_BASE), REG(a0, X509_REQ * req), REG(a1, unsigned char ** pp));
X509_ALGOR * SAVEDS ASM LIB_PKCS5_pbe2_set_scrypt(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_CIPHER * cipher), REG(a1, const unsigned char * salt), REG(d0, int saltlen), REG(a2, unsigned char * aiv), REG(d2, uint64_t N), REG(d4, uint64_t r), REG(d6, uint64_t p));
const STACK_OF(X509_EXTENSION) * SAVEDS ASM LIB_X509_CRL_get0_extensions(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_CRL * crl));
void SAVEDS ASM LIB_X509_CRL_get0_signature(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_CRL * crl), REG(a1, const ASN1_BIT_STRING ** psig), REG(a2, const X509_ALGOR ** palg));
X509_NAME * SAVEDS ASM LIB_X509_CRL_get_issuer(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_CRL * crl));
ASN1_TIME * SAVEDS ASM LIB_X509_CRL_get_lastUpdate(REG(a6, __IFACE_OR_BASE), REG(a0, X509_CRL * crl));
ASN1_TIME * SAVEDS ASM LIB_X509_CRL_get_nextUpdate(REG(a6, __IFACE_OR_BASE), REG(a0, X509_CRL * crl));
STACK_OF(X509_REVOKED) * SAVEDS ASM LIB_X509_CRL_get_REVOKED(REG(a6, __IFACE_OR_BASE), REG(a0, X509_CRL * crl));
int SAVEDS ASM LIB_X509_CRL_get_signature_nid(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_CRL * crl));
long SAVEDS ASM LIB_X509_CRL_get_version(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_CRL * crl));
int SAVEDS ASM LIB_X509_CRL_up_ref(REG(a6, __IFACE_OR_BASE), REG(a0, X509_CRL * crl));
const STACK_OF(X509_EXTENSION) * SAVEDS ASM LIB_X509_get0_extensions(REG(a6, __IFACE_OR_BASE), REG(a0, const X509 * x));
EVP_PKEY * SAVEDS ASM LIB_X509_get0_pubkey(REG(a6, __IFACE_OR_BASE), REG(a0, const X509 * x));
STACK_OF(ASN1_OBJECT) * SAVEDS ASM LIB_X509_get0_reject_objects(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * x));
const X509_ALGOR * SAVEDS ASM LIB_X509_get0_tbs_sigalg(REG(a6, __IFACE_OR_BASE), REG(a0, const X509 * x));
STACK_OF(ASN1_OBJECT) * SAVEDS ASM LIB_X509_get0_trust_objects(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * x));
void SAVEDS ASM LIB_X509_get0_uids(REG(a6, __IFACE_OR_BASE), REG(a0, const X509 * x), REG(a1, const ASN1_BIT_STRING ** piuid), REG(a2, const ASN1_BIT_STRING ** psuid));
ASN1_TIME * SAVEDS ASM LIB_X509_getm_notAfter(REG(a6, __IFACE_OR_BASE), REG(a0, const X509 * x));
ASN1_TIME * SAVEDS ASM LIB_X509_getm_notBefore(REG(a6, __IFACE_OR_BASE), REG(a0, const X509 * x));
int SAVEDS ASM LIB_X509_get_signature_type(REG(a6, __IFACE_OR_BASE), REG(a0, const X509 * x));
long SAVEDS ASM LIB_X509_get_version(REG(a6, __IFACE_OR_BASE), REG(a0, const X509 * x));
X509_PUBKEY * SAVEDS ASM LIB_X509_get_X509_PUBKEY(REG(a6, __IFACE_OR_BASE), REG(a0, const X509 * x));
int SAVEDS ASM LIB_X509_NAME_ENTRY_set(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_NAME_ENTRY * ne));
int SAVEDS ASM LIB_X509_NAME_get0_der(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_NAME * nm), REG(a1, const unsigned char ** pder), REG(a2, size_t * pderlen));
EVP_PKEY * SAVEDS ASM LIB_X509_PUBKEY_get0(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_PUBKEY * key));
void SAVEDS ASM LIB_X509_REQ_get0_signature(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_REQ * req), REG(a1, const ASN1_BIT_STRING ** psig), REG(a2, const X509_ALGOR ** palg));
int SAVEDS ASM LIB_X509_REQ_get_signature_nid(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_REQ * req));
X509_NAME * SAVEDS ASM LIB_X509_REQ_get_subject_name(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_REQ * req));
long SAVEDS ASM LIB_X509_REQ_get_version(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_REQ * req));
X509_PUBKEY * SAVEDS ASM LIB_X509_REQ_get_X509_PUBKEY(REG(a6, __IFACE_OR_BASE), REG(a0, X509_REQ * req));
const STACK_OF(X509_EXTENSION) * SAVEDS ASM LIB_X509_REVOKED_get0_extensions(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_REVOKED * r));
const ASN1_TIME * SAVEDS ASM LIB_X509_REVOKED_get0_revocationDate(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_REVOKED * x));
const ASN1_INTEGER * SAVEDS ASM LIB_X509_REVOKED_get0_serialNumber(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_REVOKED * x));
int SAVEDS ASM LIB_X509_trusted(REG(a6, __IFACE_OR_BASE), REG(a0, const X509 * x));
int SAVEDS ASM LIB_X509_up_ref(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * x));
int SAVEDS ASM LIB_X509_STORE_CTX_get_num_untrusted(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_STORE_CTX * ctx));
void SAVEDS ASM LIB_X509_STORE_CTX_set0_dane(REG(a6, __IFACE_OR_BASE), REG(a0, X509_STORE_CTX * ctx), REG(a1, SSL_DANE * dane));
void SAVEDS ASM LIB_X509_VERIFY_PARAM_move_peername(REG(a6, __IFACE_OR_BASE), REG(a0, X509_VERIFY_PARAM * to), REG(a1, X509_VERIFY_PARAM * from));
char * SAVEDS ASM LIB_i2s_ASN1_IA5STRING(REG(a6, __IFACE_OR_BASE), REG(a0, X509V3_EXT_METHOD * method), REG(a1, ASN1_IA5STRING * ia5));
ASN1_IA5STRING * SAVEDS ASM LIB_s2i_ASN1_IA5STRING(REG(a6, __IFACE_OR_BASE), REG(a0, X509V3_EXT_METHOD * method), REG(a1, X509V3_CTX * ctx), REG(a2, const char * str));
int SAVEDS ASM LIB_X509v3_addr_add_inherit(REG(a6, __IFACE_OR_BASE), REG(a0, IPAddrBlocks * addr), REG(d0, const unsigned afi), REG(a1, const unsigned * safi));
int SAVEDS ASM LIB_X509v3_addr_add_prefix(REG(a6, __IFACE_OR_BASE), REG(a0, IPAddrBlocks * addr), REG(d0, const unsigned afi), REG(a1, const unsigned * safi), REG(a2, unsigned char * a), REG(d1, const int prefixlen));
int SAVEDS ASM LIB_X509v3_addr_add_range(REG(a6, __IFACE_OR_BASE), REG(a0, IPAddrBlocks * addr), REG(d0, const unsigned afi), REG(a1, const unsigned * safi), REG(a2, unsigned char * min), REG(a3, unsigned char * max));
int SAVEDS ASM LIB_X509v3_addr_canonize(REG(a6, __IFACE_OR_BASE), REG(a0, IPAddrBlocks * addr));
unsigned SAVEDS ASM LIB_X509v3_addr_get_afi(REG(a6, __IFACE_OR_BASE), REG(a0, const IPAddressFamily * f));
int SAVEDS ASM LIB_X509v3_addr_get_range(REG(a6, __IFACE_OR_BASE), REG(a0, IPAddressOrRange * aor), REG(d0, const unsigned afi), REG(a1, unsigned char * min), REG(a2, unsigned char * max), REG(d1, const int length));
int SAVEDS ASM LIB_X509v3_addr_inherits(REG(a6, __IFACE_OR_BASE), REG(a0, IPAddrBlocks * addr));
int SAVEDS ASM LIB_X509v3_addr_is_canonical(REG(a6, __IFACE_OR_BASE), REG(a0, IPAddrBlocks * addr));
int SAVEDS ASM LIB_X509v3_addr_subset(REG(a6, __IFACE_OR_BASE), REG(a0, IPAddrBlocks * a), REG(a1, IPAddrBlocks * b));
int SAVEDS ASM LIB_X509v3_addr_validate_path(REG(a6, __IFACE_OR_BASE), REG(a0, X509_STORE_CTX * ctx));
int SAVEDS ASM LIB_X509v3_addr_validate_resource_set(REG(a6, __IFACE_OR_BASE), REG(a0, STACK_OF(X509) * chain), REG(a1, IPAddrBlocks * ext), REG(d0, int allow_inheritance));
int SAVEDS ASM LIB_X509v3_asid_add_inherit(REG(a6, __IFACE_OR_BASE), REG(a0, ASIdentifiers * asid), REG(d0, int which));
int SAVEDS ASM LIB_X509v3_asid_add_id_or_range(REG(a6, __IFACE_OR_BASE), REG(a0, ASIdentifiers * asid), REG(d0, int which), REG(a1, ASN1_INTEGER * min), REG(a2, ASN1_INTEGER * max));
int SAVEDS ASM LIB_X509v3_asid_canonize(REG(a6, __IFACE_OR_BASE), REG(a0, ASIdentifiers * asid));
int SAVEDS ASM LIB_X509v3_asid_inherits(REG(a6, __IFACE_OR_BASE), REG(a0, ASIdentifiers * asid));
int SAVEDS ASM LIB_X509v3_asid_is_canonical(REG(a6, __IFACE_OR_BASE), REG(a0, ASIdentifiers * asid));
int SAVEDS ASM LIB_X509v3_asid_subset(REG(a6, __IFACE_OR_BASE), REG(a0, ASIdentifiers * a), REG(a1, ASIdentifiers * b));
int SAVEDS ASM LIB_X509v3_asid_validate_path(REG(a6, __IFACE_OR_BASE), REG(a0, X509_STORE_CTX * ctx));
int SAVEDS ASM LIB_X509v3_asid_validate_resource_set(REG(a6, __IFACE_OR_BASE), REG(a0, STACK_OF(X509) * chain), REG(a1, ASIdentifiers * ext), REG(d0, int allow_inheritance));
const ASN1_OCTET_STRING * SAVEDS ASM LIB_X509_get0_subject_key_id(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * x));
uint32_t SAVEDS ASM LIB_X509_get_extended_key_usage(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * x));
uint32_t SAVEDS ASM LIB_X509_get_extension_flags(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * x));
uint32_t SAVEDS ASM LIB_X509_get_key_usage(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * x));
int SAVEDS ASM LIB_DTLSv1_listen(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s), REG(a1, BIO_ADDR * client));
int SAVEDS ASM LIB_OPENSSL_init_ssl(REG(a6, __IFACE_OR_BASE), REG(d0, uint64_t opts), REG(a0, const OPENSSL_INIT_SETTINGS * settings));
int SAVEDS ASM LIB_SSL_add1_host(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s), REG(a1, const char * host));
void SAVEDS ASM LIB_SSL_add_ssl_module(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_SSL_CIPHER_get_cipher_nid(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL_CIPHER * c));
int SAVEDS ASM LIB_SSL_CIPHER_get_digest_nid(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL_CIPHER * c));
uint64_t SAVEDS ASM LIB_SSL_clear_options(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s), REG(d0, uint64_t op));
int SAVEDS ASM LIB_SSL_config(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s), REG(a1, const char * name));
uint64_t SAVEDS ASM LIB_SSL_CTX_clear_options(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(d0, uint64_t op));
int SAVEDS ASM LIB_SSL_CTX_config(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(a1, const char * name));
int SAVEDS ASM LIB_SSL_CTX_dane_enable(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx));
int SAVEDS ASM LIB_SSL_CTX_dane_mtype_set(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(a1, const EVP_MD * md), REG(d0, uint8_t mtype), REG(d1, uint8_t ord));
void * SAVEDS ASM LIB_SSL_CTX_get0_security_ex_data(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL_CTX * ctx));
uint64_t SAVEDS ASM LIB_SSL_CTX_get_options(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL_CTX * ctx));
int  SAVEDS ASM (*LIB_SSL_CTX_get_security_callback(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL_CTX * ctx)))(const SSL *, const SSL_CTX *, int, int, int, void *, void *);
int SAVEDS ASM LIB_SSL_CTX_get_security_level(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL_CTX * ctx));
void SAVEDS ASM LIB_SSL_CTX_set0_security_ex_data(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(a1, void * ex));
int SAVEDS ASM LIB_SSL_CTX_set_default_verify_dir(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx));
int SAVEDS ASM LIB_SSL_CTX_set_default_verify_file(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx));
void SAVEDS ASM LIB_SSL_CTX_set_not_resumable_session_callback(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(a1, int (*cb)(SSL *, int)));
uint64_t SAVEDS ASM LIB_SSL_CTX_set_options(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(d0, uint64_t op));
void SAVEDS ASM LIB_SSL_CTX_set_security_callback(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(a1, int (*cb)(const SSL *, const SSL_CTX *, int, int, int, void *, void *)));
void SAVEDS ASM LIB_SSL_CTX_set_security_level(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(d0, int level));
int SAVEDS ASM LIB_SSL_CTX_up_ref(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx));
int SAVEDS ASM LIB_SSL_dane_enable(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s), REG(a1, const char * basedomain));
int SAVEDS ASM LIB_SSL_dane_tlsa_add(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s), REG(d0, uint8_t usage), REG(d1, uint8_t selector), REG(d2, uint8_t mtype), REG(a1, unsigned const char * data), REG(d3, size_t dlen));
SSL_DANE * SAVEDS ASM LIB_SSL_get0_dane(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * ssl));
int SAVEDS ASM LIB_SSL_get0_dane_authority(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s), REG(a1, X509 ** mcert), REG(a2, EVP_PKEY ** mspki));
int SAVEDS ASM LIB_SSL_get0_dane_tlsa(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s), REG(a1, uint8_t * usage), REG(a2, uint8_t * selector), REG(a3, uint8_t * mtype), REG(d0, unsigned const char ** data), REG(d1, size_t * dlen));
const char * SAVEDS ASM LIB_SSL_get0_peername(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s));
void * SAVEDS ASM LIB_SSL_get0_security_ex_data(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * s));
STACK_OF(SSL_CIPHER) * SAVEDS ASM LIB_SSL_get1_supported_ciphers(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s));
size_t SAVEDS ASM LIB_SSL_get_client_random(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * s), REG(a1, unsigned char * out), REG(d0, size_t outlen));
uint64_t SAVEDS ASM LIB_SSL_get_options(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * s));
int  SAVEDS ASM (*LIB_SSL_get_security_callback(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * s)))(const SSL *, const SSL_CTX *, int, int, int, void *, void *);
int SAVEDS ASM LIB_SSL_get_security_level(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * s));
size_t SAVEDS ASM LIB_SSL_get_server_random(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * s), REG(a1, unsigned char * out), REG(d0, size_t outlen));
OSSL_HANDSHAKE_STATE SAVEDS ASM LIB_SSL_get_state(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * ssl));
int SAVEDS ASM LIB_SSL_in_before(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * s));
int SAVEDS ASM LIB_SSL_in_init(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * s));
int SAVEDS ASM LIB_SSL_is_init_finished(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * s));
void SAVEDS ASM LIB_SSL_SESSION_get0_ticket(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL_SESSION * s), REG(a1, const unsigned char ** tick), REG(a2, size_t * len));
size_t SAVEDS ASM LIB_SSL_SESSION_get_master_key(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL_SESSION * sess), REG(a1, unsigned char * out), REG(d0, size_t outlen));
unsigned long SAVEDS ASM LIB_SSL_SESSION_get_ticket_lifetime_hint(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL_SESSION * s));
int SAVEDS ASM LIB_SSL_SESSION_has_ticket(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL_SESSION * s));
int SAVEDS ASM LIB_SSL_SESSION_print_keylog(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, const SSL_SESSION * x));
int SAVEDS ASM LIB_SSL_session_reused(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * s));
void SAVEDS ASM LIB_SSL_set0_security_ex_data(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s), REG(a1, void * ex));
int SAVEDS ASM LIB_SSL_set1_host(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s), REG(a1, const char * host));
void SAVEDS ASM LIB_SSL_set_default_passwd_cb(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s), REG(a1, pem_password_cb * cb));
void SAVEDS ASM LIB_SSL_set_default_passwd_cb_userdata(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s), REG(a1, void * u));
void SAVEDS ASM LIB_SSL_set_hostflags(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s), REG(d0, unsigned int flags));
void SAVEDS ASM LIB_SSL_set_not_resumable_session_callback(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * ssl), REG(a1, int (*cb)(SSL *, int)));
uint64_t SAVEDS ASM LIB_SSL_set_options(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s), REG(d0, uint64_t op));
void SAVEDS ASM LIB_SSL_set0_rbio(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s), REG(a1, BIO * rbio));
void SAVEDS ASM LIB_SSL_set_security_callback(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s), REG(a1, int (*cb)(const SSL *, const SSL_CTX *, int, int, int, void *, void *)));
void SAVEDS ASM LIB_SSL_set_security_level(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s), REG(d0, int level));
void SAVEDS ASM LIB_SSL_set0_wbio(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s), REG(a1, BIO * wbio));
int SAVEDS ASM LIB_SSL_up_ref(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s));
int SAVEDS ASM LIB_SSL_use_certificate_chain_file(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * ssl), REG(a1, const char * file));
int SAVEDS ASM LIB_SSL_waiting_for_async(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s));
const SSL_METHOD * SAVEDS ASM LIB_TLS_client_method(REG(a6, __IFACE_OR_BASE));
const SSL_METHOD * SAVEDS ASM LIB_TLS_method(REG(a6, __IFACE_OR_BASE));
const SSL_METHOD * SAVEDS ASM LIB_TLS_server_method(REG(a6, __IFACE_OR_BASE));
ASYNC_WAIT_CTX * SAVEDS ASM LIB_ASYNC_WAIT_CTX_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_ASYNC_WAIT_CTX_free(REG(a6, __IFACE_OR_BASE), REG(a0, ASYNC_WAIT_CTX * ctx));
int SAVEDS ASM LIB_ASYNC_WAIT_CTX_set_wait_fd(REG(a6, __IFACE_OR_BASE), REG(a0, ASYNC_WAIT_CTX * ctx), REG(a1, const void * key), REG(d0, OSSL_ASYNC_FD fd), REG(a2, void * custom_data), REG(a3, void (*cleanup)(ASYNC_WAIT_CTX *, const void *, OSSL_ASYNC_FD, void *)));
int SAVEDS ASM LIB_ASYNC_WAIT_CTX_get_fd(REG(a6, __IFACE_OR_BASE), REG(a0, ASYNC_WAIT_CTX * ctx), REG(a1, const void * key), REG(a2, OSSL_ASYNC_FD * fd), REG(a3, void ** custom_data));
int SAVEDS ASM LIB_ASYNC_WAIT_CTX_get_all_fds(REG(a6, __IFACE_OR_BASE), REG(a0, ASYNC_WAIT_CTX * ctx), REG(a1, OSSL_ASYNC_FD * fd), REG(a2, size_t * numfds));
int SAVEDS ASM LIB_ASYNC_WAIT_CTX_get_changed_fds(REG(a6, __IFACE_OR_BASE), REG(a0, ASYNC_WAIT_CTX * ctx), REG(a1, OSSL_ASYNC_FD * addfd), REG(a2, size_t * numaddfds), REG(a3, OSSL_ASYNC_FD * delfd), REG(d0, size_t * numdelfds));
int SAVEDS ASM LIB_ASYNC_WAIT_CTX_clear_fd(REG(a6, __IFACE_OR_BASE), REG(a0, ASYNC_WAIT_CTX * ctx), REG(a1, const void * key));
int SAVEDS ASM LIB_ASYNC_is_capable(REG(a6, __IFACE_OR_BASE));
ASYNC_WAIT_CTX * SAVEDS ASM LIB_ASYNC_get_wait_ctx(REG(a6, __IFACE_OR_BASE), REG(a0, ASYNC_JOB * job));
int SAVEDS ASM LIB_BIO_up_ref(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * a));
int SAVEDS ASM LIB_BN_BLINDING_is_current_thread(REG(a6, __IFACE_OR_BASE), REG(a0, BN_BLINDING * b));
void SAVEDS ASM LIB_BN_BLINDING_set_current_thread(REG(a6, __IFACE_OR_BASE), REG(a0, BN_BLINDING * b));
int SAVEDS ASM LIB_BN_BLINDING_lock(REG(a6, __IFACE_OR_BASE), REG(a0, BN_BLINDING * b));
int SAVEDS ASM LIB_BN_BLINDING_unlock(REG(a6, __IFACE_OR_BASE), REG(a0, BN_BLINDING * b));
int SAVEDS ASM LIB_CRYPTO_THREAD_run_once(REG(a6, __IFACE_OR_BASE), REG(a0, CRYPTO_ONCE * once), REG(a1, void (*init)(void)));
int SAVEDS ASM LIB_CRYPTO_THREAD_init_local(REG(a6, __IFACE_OR_BASE), REG(a0, CRYPTO_THREAD_LOCAL * key), REG(a1, void (*cleanup)(void *)));
void * SAVEDS ASM LIB_CRYPTO_THREAD_get_local(REG(a6, __IFACE_OR_BASE), REG(a0, CRYPTO_THREAD_LOCAL * key));
int SAVEDS ASM LIB_CRYPTO_THREAD_set_local(REG(a6, __IFACE_OR_BASE), REG(a0, CRYPTO_THREAD_LOCAL * key), REG(a1, void * val));
int SAVEDS ASM LIB_CRYPTO_THREAD_cleanup_local(REG(a6, __IFACE_OR_BASE), REG(a0, CRYPTO_THREAD_LOCAL * key));
CRYPTO_THREAD_ID SAVEDS ASM LIB_CRYPTO_THREAD_get_current_id(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_CRYPTO_THREAD_compare_id(REG(a6, __IFACE_OR_BASE), REG(d0, CRYPTO_THREAD_ID a), REG(d1, CRYPTO_THREAD_ID b));
CRYPTO_RWLOCK * SAVEDS ASM LIB_CRYPTO_THREAD_lock_new(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_CRYPTO_THREAD_read_lock(REG(a6, __IFACE_OR_BASE), REG(a0, CRYPTO_RWLOCK * lock));
int SAVEDS ASM LIB_CRYPTO_THREAD_write_lock(REG(a6, __IFACE_OR_BASE), REG(a0, CRYPTO_RWLOCK * lock));
int SAVEDS ASM LIB_CRYPTO_THREAD_unlock(REG(a6, __IFACE_OR_BASE), REG(a0, CRYPTO_RWLOCK * lock));
void SAVEDS ASM LIB_CRYPTO_THREAD_lock_free(REG(a6, __IFACE_OR_BASE), REG(a0, CRYPTO_RWLOCK * lock));
int SAVEDS ASM LIB_CRYPTO_atomic_add(REG(a6, __IFACE_OR_BASE), REG(a0, int * val), REG(d0, int amount), REG(a1, int * ret), REG(a2, CRYPTO_RWLOCK * lock));
void SAVEDS ASM LIB_OPENSSL_die(REG(a6, __IFACE_OR_BASE), REG(a0, const char * assertion), REG(a1, const char * file), REG(d0, int line));
CT_POLICY_EVAL_CTX * SAVEDS ASM LIB_CT_POLICY_EVAL_CTX_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_CT_POLICY_EVAL_CTX_free(REG(a6, __IFACE_OR_BASE), REG(a0, CT_POLICY_EVAL_CTX * ctx));
X509 * SAVEDS ASM LIB_CT_POLICY_EVAL_CTX_get0_cert(REG(a6, __IFACE_OR_BASE), REG(a0, const CT_POLICY_EVAL_CTX * ctx));
X509 * SAVEDS ASM LIB_CT_POLICY_EVAL_CTX_get0_issuer(REG(a6, __IFACE_OR_BASE), REG(a0, const CT_POLICY_EVAL_CTX * ctx));
const CTLOG_STORE * SAVEDS ASM LIB_CT_POLICY_EVAL_CTX_get0_log_store(REG(a6, __IFACE_OR_BASE), REG(a0, const CT_POLICY_EVAL_CTX * ctx));
SCT * SAVEDS ASM LIB_SCT_new(REG(a6, __IFACE_OR_BASE));
SCT * SAVEDS ASM LIB_SCT_new_from_base64(REG(a6, __IFACE_OR_BASE), REG(d0, unsigned char version), REG(a0, const char * logid_base64), REG(d1, ct_log_entry_type_t entry_type), REG(d2, uint64_t timestamp), REG(a1, const char * extensions_base64), REG(a2, const char * signature_base64));
void SAVEDS ASM LIB_SCT_free(REG(a6, __IFACE_OR_BASE), REG(a0, SCT * sct));
void SAVEDS ASM LIB_SCT_LIST_free(REG(a6, __IFACE_OR_BASE), REG(a0, STACK_OF(SCT) * a));
sct_version_t SAVEDS ASM LIB_SCT_get_version(REG(a6, __IFACE_OR_BASE), REG(a0, const SCT * sct));
int SAVEDS ASM LIB_SCT_set_version(REG(a6, __IFACE_OR_BASE), REG(a0, SCT * sct), REG(d0, sct_version_t version));
ct_log_entry_type_t SAVEDS ASM LIB_SCT_get_log_entry_type(REG(a6, __IFACE_OR_BASE), REG(a0, const SCT * sct));
int SAVEDS ASM LIB_SCT_set_log_entry_type(REG(a6, __IFACE_OR_BASE), REG(a0, SCT * sct), REG(d0, ct_log_entry_type_t entry_type));
size_t SAVEDS ASM LIB_SCT_get0_log_id(REG(a6, __IFACE_OR_BASE), REG(a0, const SCT * sct), REG(a1, unsigned char ** log_id));
int SAVEDS ASM LIB_SCT_set0_log_id(REG(a6, __IFACE_OR_BASE), REG(a0, SCT * sct), REG(a1, unsigned char * log_id), REG(d0, size_t log_id_len));
int SAVEDS ASM LIB_SCT_set1_log_id(REG(a6, __IFACE_OR_BASE), REG(a0, SCT * sct), REG(a1, const unsigned char * log_id), REG(d0, size_t log_id_len));
uint64_t SAVEDS ASM LIB_SCT_get_timestamp(REG(a6, __IFACE_OR_BASE), REG(a0, const SCT * sct));
void SAVEDS ASM LIB_SCT_set_timestamp(REG(a6, __IFACE_OR_BASE), REG(a0, SCT * sct), REG(d0, uint64_t timestamp));
int SAVEDS ASM LIB_SCT_get_signature_nid(REG(a6, __IFACE_OR_BASE), REG(a0, const SCT * sct));
int SAVEDS ASM LIB_SCT_set_signature_nid(REG(a6, __IFACE_OR_BASE), REG(a0, SCT * sct), REG(d0, int nid));
size_t SAVEDS ASM LIB_SCT_get0_extensions(REG(a6, __IFACE_OR_BASE), REG(a0, const SCT * sct), REG(a1, unsigned char ** ext));
void SAVEDS ASM LIB_SCT_set0_extensions(REG(a6, __IFACE_OR_BASE), REG(a0, SCT * sct), REG(a1, unsigned char * ext), REG(d0, size_t ext_len));
int SAVEDS ASM LIB_SCT_set1_extensions(REG(a6, __IFACE_OR_BASE), REG(a0, SCT * sct), REG(a1, const unsigned char * ext), REG(d0, size_t ext_len));
size_t SAVEDS ASM LIB_SCT_get0_signature(REG(a6, __IFACE_OR_BASE), REG(a0, const SCT * sct), REG(a1, unsigned char ** sig));
void SAVEDS ASM LIB_SCT_set0_signature(REG(a6, __IFACE_OR_BASE), REG(a0, SCT * sct), REG(a1, unsigned char * sig), REG(d0, size_t sig_len));
int SAVEDS ASM LIB_SCT_set1_signature(REG(a6, __IFACE_OR_BASE), REG(a0, SCT * sct), REG(a1, const unsigned char * sig), REG(d0, size_t sig_len));
sct_source_t SAVEDS ASM LIB_SCT_get_source(REG(a6, __IFACE_OR_BASE), REG(a0, const SCT * sct));
int SAVEDS ASM LIB_SCT_set_source(REG(a6, __IFACE_OR_BASE), REG(a0, SCT * sct), REG(d0, sct_source_t source));
void SAVEDS ASM LIB_SCT_print(REG(a6, __IFACE_OR_BASE), REG(a0, const SCT * sct), REG(a1, BIO * out), REG(d0, int indent), REG(a2, const CTLOG_STORE * logs));
void SAVEDS ASM LIB_SCT_LIST_print(REG(a6, __IFACE_OR_BASE), REG(a0, const STACK_OF(SCT) * sct_list), REG(a1, BIO * out), REG(d0, int indent), REG(a2, const char * separator), REG(a3, const CTLOG_STORE * logs));
sct_validation_status_t SAVEDS ASM LIB_SCT_get_validation_status(REG(a6, __IFACE_OR_BASE), REG(a0, const SCT * sct));
int SAVEDS ASM LIB_SCT_validate(REG(a6, __IFACE_OR_BASE), REG(a0, SCT * sct), REG(a1, const CT_POLICY_EVAL_CTX * ctx));
int SAVEDS ASM LIB_SCT_LIST_validate(REG(a6, __IFACE_OR_BASE), REG(a0, const STACK_OF(SCT) * scts), REG(a1, CT_POLICY_EVAL_CTX * ctx));
int SAVEDS ASM LIB_i2o_SCT_LIST(REG(a6, __IFACE_OR_BASE), REG(a0, const STACK_OF(SCT) * a), REG(a1, unsigned char ** pp));
STACK_OF(SCT) * SAVEDS ASM LIB_o2i_SCT_LIST(REG(a6, __IFACE_OR_BASE), REG(a0, STACK_OF(SCT) ** a), REG(a1, const unsigned char ** pp), REG(d0, size_t len));
int SAVEDS ASM LIB_i2d_SCT_LIST(REG(a6, __IFACE_OR_BASE), REG(a0, const STACK_OF(SCT) * a), REG(a1, unsigned char ** pp));
STACK_OF(SCT) * SAVEDS ASM LIB_d2i_SCT_LIST(REG(a6, __IFACE_OR_BASE), REG(a0, STACK_OF(SCT) ** a), REG(a1, const unsigned char ** pp), REG(d0, long len));
int SAVEDS ASM LIB_i2o_SCT(REG(a6, __IFACE_OR_BASE), REG(a0, const SCT * sct), REG(a1, unsigned char ** out));
SCT * SAVEDS ASM LIB_o2i_SCT(REG(a6, __IFACE_OR_BASE), REG(a0, SCT ** psct), REG(a1, const unsigned char ** in), REG(d0, size_t len));
CTLOG * SAVEDS ASM LIB_CTLOG_new(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY * public_key), REG(a1, const char * name));
int SAVEDS ASM LIB_CTLOG_new_from_base64(REG(a6, __IFACE_OR_BASE), REG(a0, CTLOG ** ct_log), REG(a1, const char * pkey_base64), REG(a2, const char * name));
void SAVEDS ASM LIB_CTLOG_free(REG(a6, __IFACE_OR_BASE), REG(a0, CTLOG * log));
const char * SAVEDS ASM LIB_CTLOG_get0_name(REG(a6, __IFACE_OR_BASE), REG(a0, const CTLOG * log));
void SAVEDS ASM LIB_CTLOG_get0_log_id(REG(a6, __IFACE_OR_BASE), REG(a0, const CTLOG * log), REG(a1, const uint8_t ** log_id), REG(a2, size_t * log_id_len));
EVP_PKEY * SAVEDS ASM LIB_CTLOG_get0_public_key(REG(a6, __IFACE_OR_BASE), REG(a0, const CTLOG * log));
CTLOG_STORE * SAVEDS ASM LIB_CTLOG_STORE_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_CTLOG_STORE_free(REG(a6, __IFACE_OR_BASE), REG(a0, CTLOG_STORE * store));
const CTLOG * SAVEDS ASM LIB_CTLOG_STORE_get0_log_by_id(REG(a6, __IFACE_OR_BASE), REG(a0, const CTLOG_STORE * store), REG(a1, const uint8_t * log_id), REG(d0, size_t log_id_len));
int SAVEDS ASM LIB_CTLOG_STORE_load_file(REG(a6, __IFACE_OR_BASE), REG(a0, CTLOG_STORE * store), REG(a1, const char * file));
int SAVEDS ASM LIB_CTLOG_STORE_load_default_file(REG(a6, __IFACE_OR_BASE), REG(a0, CTLOG_STORE * store));
int SAVEDS ASM LIB_ERR_load_CT_strings(REG(a6, __IFACE_OR_BASE));
const ASN1_ITEM * SAVEDS ASM LIB_DHparams_it(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_DSA_SIG_get0(REG(a6, __IFACE_OR_BASE), REG(a0, const DSA_SIG * sig), REG(a1, const BIGNUM ** pr), REG(a2, const BIGNUM ** ps));
EC_GROUP * SAVEDS ASM LIB_EC_GROUP_new_from_ecparameters(REG(a6, __IFACE_OR_BASE), REG(a0, const ECPARAMETERS * params));
ECPARAMETERS * SAVEDS ASM LIB_EC_GROUP_get_ecparameters(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_GROUP * group), REG(a1, ECPARAMETERS * params));
EC_GROUP * SAVEDS ASM LIB_EC_GROUP_new_from_ecpkparameters(REG(a6, __IFACE_OR_BASE), REG(a0, const ECPKPARAMETERS * params));
ECPKPARAMETERS * SAVEDS ASM LIB_EC_GROUP_get_ecpkparameters(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_GROUP * group), REG(a1, ECPKPARAMETERS * params));
const ASN1_ITEM * SAVEDS ASM LIB_ECPKPARAMETERS_it(REG(a6, __IFACE_OR_BASE));
const ASN1_ITEM * SAVEDS ASM LIB_ECPARAMETERS_it(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_EC_KEY_can_sign(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_KEY * eckey));
const EVP_MD * SAVEDS ASM LIB_EVP_blake2b512(REG(a6, __IFACE_OR_BASE));
const EVP_MD * SAVEDS ASM LIB_EVP_blake2s256(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_EVP_PKEY_CTX_str2ctrl(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(d0, int cmd), REG(a1, const char * str));
int SAVEDS ASM LIB_EVP_PKEY_CTX_hex2ctrl(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(d0, int cmd), REG(a1, const char * hex));
int SAVEDS ASM LIB_ERR_load_KDF_strings(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_SRP_user_pwd_free(REG(a6, __IFACE_OR_BASE), REG(a0, SRP_user_pwd * user_pwd));
SRP_user_pwd * SAVEDS ASM LIB_SRP_VBASE_get1_by_user(REG(a6, __IFACE_OR_BASE), REG(a0, SRP_VBASE * vb), REG(a1, char * username));
int SAVEDS ASM LIB_SSL_CTX_has_client_custom_ext(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL_CTX * ctx), REG(d0, unsigned int ext_type));
int SAVEDS ASM LIB_SSL_CIPHER_get_kx_nid(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL_CIPHER * c));
int SAVEDS ASM LIB_SSL_CIPHER_get_auth_nid(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL_CIPHER * c));
int SAVEDS ASM LIB_SSL_CIPHER_is_aead(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL_CIPHER * c));
int SAVEDS ASM LIB_SSL_has_pending(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * s));
int SAVEDS ASM LIB_SSL_SESSION_up_ref(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_SESSION * ses));
int  SAVEDS ASM (*LIB_SSL_CTX_get_default_passwd_cb(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx)))(char *, int, int, void *);
void * SAVEDS ASM LIB_SSL_CTX_get_default_passwd_cb_userdata(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx));
int  SAVEDS ASM (*LIB_SSL_get_default_passwd_cb(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * ctx)))(char *, int, int, void *);
void * SAVEDS ASM LIB_SSL_get_default_passwd_cb_userdata(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * ctx));
int SAVEDS ASM LIB_SSL_get_all_async_fds(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s), REG(a1, OSSL_ASYNC_FD * fds), REG(a2, size_t * numfds));
int SAVEDS ASM LIB_SSL_get_changed_async_fds(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s), REG(a1, OSSL_ASYNC_FD * addfd), REG(a2, size_t * numaddfds), REG(a3, OSSL_ASYNC_FD * delfd), REG(d0, size_t * numdelfds));
void SAVEDS ASM LIB_SSL_CTX_set_default_read_buffer_len(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(d0, size_t len));
void SAVEDS ASM LIB_SSL_set_default_read_buffer_len(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s), REG(d0, size_t len));
int SAVEDS ASM LIB_SSL_set_ct_validation_callback(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s), REG(a1, ssl_ct_validation_cb callback), REG(a2, void * arg));
int SAVEDS ASM LIB_SSL_CTX_set_ct_validation_callback(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(a1, ssl_ct_validation_cb callback), REG(a2, void * arg));
int SAVEDS ASM LIB_SSL_ct_is_enabled(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * s));
int SAVEDS ASM LIB_SSL_CTX_ct_is_enabled(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL_CTX * ctx));
const STACK_OF(SCT) * SAVEDS ASM LIB_SSL_get0_peer_scts(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s));
int SAVEDS ASM LIB_SSL_CTX_set_default_ctlog_list_file(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx));
int SAVEDS ASM LIB_SSL_CTX_set_ctlog_list_file(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(a1, const char * path));
void SAVEDS ASM LIB_SSL_CTX_set0_ctlog_store(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(a1, CTLOG_STORE * logs));
const CTLOG_STORE * SAVEDS ASM LIB_SSL_CTX_get0_ctlog_store(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL_CTX * ctx));
void SAVEDS ASM LIB_X509_SIG_get0(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_SIG * sig), REG(a1, const X509_ALGOR ** palg), REG(a2, const ASN1_OCTET_STRING ** pdigest));
const STACK_OF(X509_ATTRIBUTE) * SAVEDS ASM LIB_PKCS8_pkey_get0_attrs(REG(a6, __IFACE_OR_BASE), REG(a0, const PKCS8_PRIV_KEY_INFO * p8));
int SAVEDS ASM LIB_PKCS8_pkey_add1_attr_by_NID(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS8_PRIV_KEY_INFO * p8), REG(d0, int nid), REG(d1, int type), REG(a1, const unsigned char * bytes), REG(d2, int len));
int SAVEDS ASM LIB_X509_STORE_up_ref(REG(a6, __IFACE_OR_BASE), REG(a0, X509_STORE * xs));
int SAVEDS ASM LIB_SSL_enable_ct(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s), REG(d0, int validation_mode));
int SAVEDS ASM LIB_SSL_CTX_enable_ct(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(d0, int validation_mode));
STACK_OF(SSL_CIPHER) * SAVEDS ASM LIB_SSL_CTX_get_ciphers(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL_CTX * ctx));
const char * SAVEDS ASM LIB_SSL_SESSION_get0_hostname(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL_SESSION * s));
const char * SAVEDS ASM LIB_SCT_validation_status_string(REG(a6, __IFACE_OR_BASE), REG(a0, const SCT * sct));
BIO_METHOD * SAVEDS ASM LIB_BIO_meth_new(REG(a6, __IFACE_OR_BASE), REG(d0, int type), REG(a0, const char * name));
int  SAVEDS ASM (*LIB_BIO_meth_get_puts(REG(a6, __IFACE_OR_BASE), REG(a0, const BIO_METHOD * biom)))(BIO *, const char *);
long  SAVEDS ASM (*LIB_BIO_meth_get_ctrl(REG(a6, __IFACE_OR_BASE), REG(a0, const BIO_METHOD * biom)))(BIO *, int, long, void *);
int  SAVEDS ASM (*LIB_BIO_meth_get_gets(REG(a6, __IFACE_OR_BASE), REG(a0, const BIO_METHOD * biom)))(BIO *, char *, int);
void * SAVEDS ASM LIB_BIO_get_data(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * a));
void SAVEDS ASM LIB_BIO_set_init(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * a), REG(d0, int init));
int SAVEDS ASM LIB_BIO_meth_set_puts(REG(a6, __IFACE_OR_BASE), REG(a0, BIO_METHOD * biom), REG(a1, int (*func)(BIO *, const char *)));
int SAVEDS ASM LIB_BIO_get_shutdown(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * a));
int SAVEDS ASM LIB_BIO_get_init(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * a));
int SAVEDS ASM LIB_BIO_meth_set_ctrl(REG(a6, __IFACE_OR_BASE), REG(a0, BIO_METHOD * biom), REG(a1, long (*ctrl)(BIO *, int, long, void *)));
int SAVEDS ASM LIB_BIO_meth_set_read(REG(a6, __IFACE_OR_BASE), REG(a0, BIO_METHOD * biom), REG(a1, int (*read)(BIO *, char *, int)));
void SAVEDS ASM LIB_BIO_set_shutdown(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * a), REG(d0, int shut));
int SAVEDS ASM LIB_BIO_meth_set_create(REG(a6, __IFACE_OR_BASE), REG(a0, BIO_METHOD * biom), REG(a1, int (*create)(BIO *)));
int  SAVEDS ASM (*LIB_BIO_meth_get_write(REG(a6, __IFACE_OR_BASE), REG(a0, const BIO_METHOD * biom)))(BIO *, const char *, int);
int SAVEDS ASM LIB_BIO_meth_set_callback_ctrl(REG(a6, __IFACE_OR_BASE), REG(a0, BIO_METHOD * biom), REG(a1, long (*callback_ctrl)(BIO *, int, BIO_info_cb *)));
int  SAVEDS ASM (*LIB_BIO_meth_get_create(REG(a6, __IFACE_OR_BASE), REG(a0, const BIO_METHOD * biom)))(BIO *);
void SAVEDS ASM LIB_BIO_set_next(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * b), REG(a1, BIO * next));
void SAVEDS ASM LIB_BIO_set_data(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * a), REG(a1, void * ptr));
int SAVEDS ASM LIB_BIO_meth_set_write(REG(a6, __IFACE_OR_BASE), REG(a0, BIO_METHOD * biom), REG(a1, int (*write)(BIO *, const char *, int)));
int SAVEDS ASM LIB_BIO_meth_set_destroy(REG(a6, __IFACE_OR_BASE), REG(a0, BIO_METHOD * biom), REG(a1, int (*destroy)(BIO *)));
int SAVEDS ASM LIB_BIO_meth_set_gets(REG(a6, __IFACE_OR_BASE), REG(a0, BIO_METHOD * biom), REG(a1, int (*ossl_gets)(BIO *, char *, int)));
long  SAVEDS ASM (*LIB_BIO_meth_get_callback_ctrl(REG(a6, __IFACE_OR_BASE), REG(a0, const BIO_METHOD * biom)))(BIO *, int, BIO_info_cb *);
int  SAVEDS ASM (*LIB_BIO_meth_get_destroy(REG(a6, __IFACE_OR_BASE), REG(a0, const BIO_METHOD * biom)))(BIO *);
int  SAVEDS ASM (*LIB_BIO_meth_get_read(REG(a6, __IFACE_OR_BASE), REG(a0, const BIO_METHOD * biom)))(BIO *, char *, int);
void SAVEDS ASM LIB_BIO_set_retry_reason(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bio), REG(d0, int reason));
void SAVEDS ASM LIB_BIO_meth_free(REG(a6, __IFACE_OR_BASE), REG(a0, BIO_METHOD * biom));
int SAVEDS ASM LIB_DSA_meth_set_bn_mod_exp(REG(a6, __IFACE_OR_BASE), REG(a0, DSA_METHOD * dsam), REG(a1, int (*bn_mod_exp)(DSA *, BIGNUM *, const BIGNUM *, const BIGNUM *, const BIGNUM *, BN_CTX *, BN_MONT_CTX *)));
int SAVEDS ASM LIB_DSA_meth_set_init(REG(a6, __IFACE_OR_BASE), REG(a0, DSA_METHOD * dsam), REG(a1, int (*init)(DSA *)));
void SAVEDS ASM LIB_DSA_meth_free(REG(a6, __IFACE_OR_BASE), REG(a0, DSA_METHOD * dsam));
int SAVEDS ASM LIB_DSA_meth_set_mod_exp(REG(a6, __IFACE_OR_BASE), REG(a0, DSA_METHOD * dsam), REG(a1, int (*mod_exp)(DSA *, BIGNUM *, const BIGNUM *, const BIGNUM *, const BIGNUM *, const BIGNUM *, const BIGNUM *, BN_CTX *, BN_MONT_CTX *)));
int SAVEDS ASM LIB_DSA_meth_set_sign(REG(a6, __IFACE_OR_BASE), REG(a0, DSA_METHOD * dsam), REG(a1, DSA_SIG * (*sign)(const unsigned char *, int, DSA *)));
int  SAVEDS ASM (*LIB_DSA_meth_get_finish(REG(a6, __IFACE_OR_BASE), REG(a0, const DSA_METHOD * dsam)))(DSA *);
void SAVEDS ASM LIB_DSA_set_flags(REG(a6, __IFACE_OR_BASE), REG(a0, DSA * d), REG(d0, int flags));
void SAVEDS ASM LIB_DSA_get0_pqg(REG(a6, __IFACE_OR_BASE), REG(a0, const DSA * d), REG(a1, const BIGNUM ** p), REG(a2, const BIGNUM ** q), REG(a3, const BIGNUM ** g));
void * SAVEDS ASM LIB_DSA_meth_get0_app_data(REG(a6, __IFACE_OR_BASE), REG(a0, const DSA_METHOD * dsam));
int  SAVEDS ASM (*LIB_DSA_meth_get_keygen(REG(a6, __IFACE_OR_BASE), REG(a0, const DSA_METHOD * dsam)))(DSA *);
void SAVEDS ASM LIB_DSA_clear_flags(REG(a6, __IFACE_OR_BASE), REG(a0, DSA * d), REG(d0, int flags));
const char * SAVEDS ASM LIB_DSA_meth_get0_name(REG(a6, __IFACE_OR_BASE), REG(a0, const DSA_METHOD * dsam));
int  SAVEDS ASM (*LIB_DSA_meth_get_paramgen(REG(a6, __IFACE_OR_BASE), REG(a0, const DSA_METHOD * dsam)))(DSA *, int, const unsigned char *, int, int *, unsigned long *, BN_GENCB *);
DSA_SIG *  SAVEDS ASM (*LIB_DSA_meth_get_sign(REG(a6, __IFACE_OR_BASE), REG(a0, const DSA_METHOD * dsam)))(const unsigned char *, int, DSA *);
int SAVEDS ASM LIB_DSA_meth_set_paramgen(REG(a6, __IFACE_OR_BASE), REG(a0, DSA_METHOD * dsam), REG(a1, int (*paramgen)(DSA *, int, const unsigned char *, int, int *, unsigned long *, BN_GENCB *)));
int SAVEDS ASM LIB_DSA_test_flags(REG(a6, __IFACE_OR_BASE), REG(a0, const DSA * d), REG(d0, int flags));
int SAVEDS ASM LIB_DSA_meth_set0_app_data(REG(a6, __IFACE_OR_BASE), REG(a0, DSA_METHOD * dsam), REG(a1, void * app_data));
int SAVEDS ASM LIB_DSA_meth_set1_name(REG(a6, __IFACE_OR_BASE), REG(a0, DSA_METHOD * dsam), REG(a1, const char * name));
void SAVEDS ASM LIB_DSA_get0_key(REG(a6, __IFACE_OR_BASE), REG(a0, const DSA * d), REG(a1, const BIGNUM ** pub_key), REG(a2, const BIGNUM ** priv_key));
int  SAVEDS ASM (*LIB_DSA_meth_get_mod_exp(REG(a6, __IFACE_OR_BASE), REG(a0, const DSA_METHOD * dsam)))(DSA *, BIGNUM *, const BIGNUM *, const BIGNUM *, const BIGNUM *, const BIGNUM *, const BIGNUM *, BN_CTX *, BN_MONT_CTX *);
int SAVEDS ASM LIB_DSA_set0_pqg(REG(a6, __IFACE_OR_BASE), REG(a0, DSA * d), REG(a1, BIGNUM * p), REG(a2, BIGNUM * q), REG(a3, BIGNUM * g));
int SAVEDS ASM LIB_DSA_meth_get_flags(REG(a6, __IFACE_OR_BASE), REG(a0, const DSA_METHOD * dsam));
int  SAVEDS ASM (*LIB_DSA_meth_get_verify(REG(a6, __IFACE_OR_BASE), REG(a0, const DSA_METHOD * dsam)))(const unsigned char *, int, DSA_SIG *, DSA *);
int SAVEDS ASM LIB_DSA_meth_set_verify(REG(a6, __IFACE_OR_BASE), REG(a0, DSA_METHOD * dsam), REG(a1, int (*verify)(const unsigned char *, int, DSA_SIG *, DSA *)));
int SAVEDS ASM LIB_DSA_meth_set_finish(REG(a6, __IFACE_OR_BASE), REG(a0, DSA_METHOD * dsam), REG(a1, int (*finish)(DSA *)));
int SAVEDS ASM LIB_DSA_meth_set_keygen(REG(a6, __IFACE_OR_BASE), REG(a0, DSA_METHOD * dsam), REG(a1, int (*keygen)(DSA *)));
DSA_METHOD * SAVEDS ASM LIB_DSA_meth_dup(REG(a6, __IFACE_OR_BASE), REG(a0, const DSA_METHOD * dsam));
int SAVEDS ASM LIB_DSA_set0_key(REG(a6, __IFACE_OR_BASE), REG(a0, DSA * d), REG(a1, BIGNUM * pub_key), REG(a2, BIGNUM * priv_key));
int  SAVEDS ASM (*LIB_DSA_meth_get_init(REG(a6, __IFACE_OR_BASE), REG(a0, const DSA_METHOD * dsam)))(DSA *);
int SAVEDS ASM LIB_DSA_meth_set_sign_setup(REG(a6, __IFACE_OR_BASE), REG(a0, DSA_METHOD * dsam), REG(a1, int (*sign_setup)(DSA *, BN_CTX *, BIGNUM **, BIGNUM **)));
int  SAVEDS ASM (*LIB_DSA_meth_get_bn_mod_exp(REG(a6, __IFACE_OR_BASE), REG(a0, const DSA_METHOD * dsam)))(DSA *, BIGNUM *, const BIGNUM *, const BIGNUM *, const BIGNUM *, BN_CTX *, BN_MONT_CTX *);
const DSA_METHOD * SAVEDS ASM LIB_DSA_get_method(REG(a6, __IFACE_OR_BASE), REG(a0, DSA * d));
DSA_METHOD * SAVEDS ASM LIB_DSA_meth_new(REG(a6, __IFACE_OR_BASE), REG(a0, const char * name), REG(d0, int flags));
int SAVEDS ASM LIB_DSA_meth_set_flags(REG(a6, __IFACE_OR_BASE), REG(a0, DSA_METHOD * dsam), REG(d0, int flags));
int  SAVEDS ASM (*LIB_DSA_meth_get_sign_setup(REG(a6, __IFACE_OR_BASE), REG(a0, const DSA_METHOD * dsam)))(DSA *, BN_CTX *, BIGNUM **, BIGNUM **);
ENGINE * SAVEDS ASM LIB_DSA_get0_engine(REG(a6, __IFACE_OR_BASE), REG(a0, DSA * d));
void SAVEDS ASM LIB_X509_VERIFY_PARAM_set_auth_level(REG(a6, __IFACE_OR_BASE), REG(a0, X509_VERIFY_PARAM * param), REG(d0, int auth_level));
int SAVEDS ASM LIB_X509_VERIFY_PARAM_get_auth_level(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_VERIFY_PARAM * param));
EVP_PKEY * SAVEDS ASM LIB_X509_REQ_get0_pubkey(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_REQ * req));
int SAVEDS ASM LIB_RSA_set0_key(REG(a6, __IFACE_OR_BASE), REG(a0, RSA * r), REG(a1, BIGNUM * n), REG(a2, BIGNUM * e), REG(a3, BIGNUM * d));
int SAVEDS ASM LIB_RSA_meth_get_flags(REG(a6, __IFACE_OR_BASE), REG(a0, const RSA_METHOD * meth));
int SAVEDS ASM LIB_RSA_meth_set_finish(REG(a6, __IFACE_OR_BASE), REG(a0, RSA_METHOD * rsa), REG(a1, int (*finish)(RSA *)));
int  SAVEDS ASM (*LIB_RSA_meth_get_priv_dec(REG(a6, __IFACE_OR_BASE), REG(a0, const RSA_METHOD * meth)))(int, const unsigned char *, unsigned char *, RSA *, int);
int  SAVEDS ASM (*LIB_RSA_meth_get_sign(REG(a6, __IFACE_OR_BASE), REG(a0, const RSA_METHOD * meth)))(int, const unsigned char *, unsigned int, unsigned char *, unsigned int *, const RSA *);
int  SAVEDS ASM (*LIB_RSA_meth_get_bn_mod_exp(REG(a6, __IFACE_OR_BASE), REG(a0, const RSA_METHOD * meth)))(BIGNUM *, const BIGNUM *, const BIGNUM *, const BIGNUM *, BN_CTX *, BN_MONT_CTX *);
int SAVEDS ASM LIB_RSA_test_flags(REG(a6, __IFACE_OR_BASE), REG(a0, const RSA * r), REG(d0, int flags));
RSA_METHOD * SAVEDS ASM LIB_RSA_meth_new(REG(a6, __IFACE_OR_BASE), REG(a0, const char * name), REG(d0, int flags));
void * SAVEDS ASM LIB_RSA_meth_get0_app_data(REG(a6, __IFACE_OR_BASE), REG(a0, const RSA_METHOD * meth));
RSA_METHOD * SAVEDS ASM LIB_RSA_meth_dup(REG(a6, __IFACE_OR_BASE), REG(a0, const RSA_METHOD * meth));
int SAVEDS ASM LIB_RSA_meth_set1_name(REG(a6, __IFACE_OR_BASE), REG(a0, RSA_METHOD * meth), REG(a1, const char * name));
int SAVEDS ASM LIB_RSA_meth_set0_app_data(REG(a6, __IFACE_OR_BASE), REG(a0, RSA_METHOD * meth), REG(a1, void * app_data));
void SAVEDS ASM LIB_RSA_set_flags(REG(a6, __IFACE_OR_BASE), REG(a0, RSA * r), REG(d0, int flags));
int SAVEDS ASM LIB_RSA_meth_set_sign(REG(a6, __IFACE_OR_BASE), REG(a0, RSA_METHOD * rsa), REG(d0, int (*sign)(int, const unsigned char *, unsigned int, unsigned char *, unsigned int *, const RSA *)));
void SAVEDS ASM LIB_RSA_clear_flags(REG(a6, __IFACE_OR_BASE), REG(a0, RSA * r), REG(d0, int flags));
int  SAVEDS ASM (*LIB_RSA_meth_get_keygen(REG(a6, __IFACE_OR_BASE), REG(a0, const RSA_METHOD * meth)))(RSA *, int, BIGNUM *, BN_GENCB *);
int SAVEDS ASM LIB_RSA_meth_set_keygen(REG(a6, __IFACE_OR_BASE), REG(a0, RSA_METHOD * rsa), REG(a1, int (*keygen)(RSA *, int, BIGNUM *, BN_GENCB *)));
int SAVEDS ASM LIB_RSA_meth_set_pub_dec(REG(a6, __IFACE_OR_BASE), REG(a0, RSA_METHOD * rsa), REG(a1, int (*pub_dec)(int, const unsigned char *, unsigned char *, RSA *, int)));
int  SAVEDS ASM (*LIB_RSA_meth_get_finish(REG(a6, __IFACE_OR_BASE), REG(a0, const RSA_METHOD * meth)))(RSA *rsa);
void SAVEDS ASM LIB_RSA_get0_key(REG(a6, __IFACE_OR_BASE), REG(a0, const RSA * r), REG(a1, const BIGNUM ** n), REG(a2, const BIGNUM ** e), REG(a3, const BIGNUM ** d));
ENGINE * SAVEDS ASM LIB_RSA_get0_engine(REG(a6, __IFACE_OR_BASE), REG(a0, const RSA * r));
int SAVEDS ASM LIB_RSA_meth_set_priv_enc(REG(a6, __IFACE_OR_BASE), REG(a0, RSA_METHOD * rsa), REG(a1, int (*priv_enc)(int, const unsigned char *, unsigned char *, RSA *, int)));
int SAVEDS ASM LIB_RSA_meth_set_verify(REG(a6, __IFACE_OR_BASE), REG(a0, RSA_METHOD * rsa), REG(a1, int (*verify)(int, const unsigned char *, unsigned int, const unsigned char *, unsigned int, const RSA *)));
void SAVEDS ASM LIB_RSA_get0_factors(REG(a6, __IFACE_OR_BASE), REG(a0, const RSA * r), REG(a1, const BIGNUM ** p), REG(a2, const BIGNUM ** q));
const char * SAVEDS ASM LIB_RSA_meth_get0_name(REG(a6, __IFACE_OR_BASE), REG(a0, const RSA_METHOD * meth));
int  SAVEDS ASM (*LIB_RSA_meth_get_mod_exp(REG(a6, __IFACE_OR_BASE), REG(a0, const RSA_METHOD * meth)))(BIGNUM *, const BIGNUM *, RSA *, BN_CTX *);
int SAVEDS ASM LIB_RSA_meth_set_flags(REG(a6, __IFACE_OR_BASE), REG(a0, RSA_METHOD * meth), REG(d0, int flags));
int  SAVEDS ASM (*LIB_RSA_meth_get_pub_dec(REG(a6, __IFACE_OR_BASE), REG(a0, const RSA_METHOD * meth)))(int, const unsigned char *, unsigned char *, RSA *, int);
int SAVEDS ASM LIB_RSA_meth_set_bn_mod_exp(REG(a6, __IFACE_OR_BASE), REG(a0, RSA_METHOD * rsa), REG(a1, int (*bn_mod_exp)(BIGNUM *, const BIGNUM *, const BIGNUM *, const BIGNUM *, BN_CTX *, BN_MONT_CTX *)));
int  SAVEDS ASM (*LIB_RSA_meth_get_init(REG(a6, __IFACE_OR_BASE), REG(a0, const RSA_METHOD * meth)))(RSA *);
void SAVEDS ASM LIB_RSA_meth_free(REG(a6, __IFACE_OR_BASE), REG(a0, RSA_METHOD * meth));
int  SAVEDS ASM (*LIB_RSA_meth_get_pub_enc(REG(a6, __IFACE_OR_BASE), REG(a0, const RSA_METHOD * meth)))(int, const unsigned char *, unsigned char *, RSA *, int);
int SAVEDS ASM LIB_RSA_meth_set_mod_exp(REG(a6, __IFACE_OR_BASE), REG(a0, RSA_METHOD * rsa), REG(a1, int (*mod_exp)(BIGNUM *, const BIGNUM *, RSA *, BN_CTX *)));
int SAVEDS ASM LIB_RSA_set0_factors(REG(a6, __IFACE_OR_BASE), REG(a0, RSA * r), REG(a1, BIGNUM * p), REG(a2, BIGNUM * q));
int SAVEDS ASM LIB_RSA_meth_set_pub_enc(REG(a6, __IFACE_OR_BASE), REG(a0, RSA_METHOD * rsa), REG(a1, int (*pub_enc)(int, const unsigned char *, unsigned char *, RSA *, int)));
int SAVEDS ASM LIB_RSA_meth_set_priv_dec(REG(a6, __IFACE_OR_BASE), REG(a0, RSA_METHOD * rsa), REG(a1, int (*priv_dec)(int, const unsigned char *, unsigned char *, RSA *, int)));
int  SAVEDS ASM (*LIB_RSA_meth_get_verify(REG(a6, __IFACE_OR_BASE), REG(a0, const RSA_METHOD * meth)))(int, const unsigned char *, unsigned int, const unsigned char *, unsigned int, const RSA *);
int SAVEDS ASM LIB_RSA_meth_set_init(REG(a6, __IFACE_OR_BASE), REG(a0, RSA_METHOD * rsa), REG(a1, int (*init)(RSA *)));
int  SAVEDS ASM (*LIB_RSA_meth_get_priv_enc(REG(a6, __IFACE_OR_BASE), REG(a0, const RSA_METHOD * meth)))(int, const unsigned char *, unsigned char *, RSA *, int);
int SAVEDS ASM LIB_RSA_set0_crt_params(REG(a6, __IFACE_OR_BASE), REG(a0, RSA * r), REG(a1, BIGNUM * dmp1), REG(a2, BIGNUM * dmq1), REG(a3, BIGNUM * iqmp));
void SAVEDS ASM LIB_RSA_get0_crt_params(REG(a6, __IFACE_OR_BASE), REG(a0, const RSA * r), REG(a1, const BIGNUM ** dmp1), REG(a2, const BIGNUM ** dmq1), REG(a3, const BIGNUM ** iqmp));
int SAVEDS ASM LIB_DH_set0_pqg(REG(a6, __IFACE_OR_BASE), REG(a0, DH * dh), REG(a1, BIGNUM * p), REG(a2, BIGNUM * q), REG(a3, BIGNUM * g));
void SAVEDS ASM LIB_DH_clear_flags(REG(a6, __IFACE_OR_BASE), REG(a0, DH * dh), REG(d0, int flags));
void SAVEDS ASM LIB_DH_get0_key(REG(a6, __IFACE_OR_BASE), REG(a0, const DH * dh), REG(a1, const BIGNUM ** pub_key), REG(a2, const BIGNUM ** priv_key));
ENGINE * SAVEDS ASM LIB_DH_get0_engine(REG(a6, __IFACE_OR_BASE), REG(a0, DH * d));
int SAVEDS ASM LIB_DH_set0_key(REG(a6, __IFACE_OR_BASE), REG(a0, DH * dh), REG(a1, BIGNUM * pub_key), REG(a2, BIGNUM * priv_key));
int SAVEDS ASM LIB_DH_set_length(REG(a6, __IFACE_OR_BASE), REG(a0, DH * dh), REG(d0, long length));
int SAVEDS ASM LIB_DH_test_flags(REG(a6, __IFACE_OR_BASE), REG(a0, const DH * dh), REG(d0, int flags));
long SAVEDS ASM LIB_DH_get_length(REG(a6, __IFACE_OR_BASE), REG(a0, const DH * dh));
void SAVEDS ASM LIB_DH_get0_pqg(REG(a6, __IFACE_OR_BASE), REG(a0, const DH * dh), REG(a1, const BIGNUM ** p), REG(a2, const BIGNUM ** q), REG(a3, const BIGNUM ** g));
int  SAVEDS ASM (*LIB_DH_meth_get_compute_key(REG(a6, __IFACE_OR_BASE), REG(a0, const DH_METHOD * dhm)))(unsigned char *, const BIGNUM *, DH *);
int SAVEDS ASM LIB_DH_meth_set1_name(REG(a6, __IFACE_OR_BASE), REG(a0, DH_METHOD * dhm), REG(a1, const char * name));
int SAVEDS ASM LIB_DH_meth_set_init(REG(a6, __IFACE_OR_BASE), REG(a0, DH_METHOD * dhm), REG(a1, int (*init)(DH *)));
int  SAVEDS ASM (*LIB_DH_meth_get_finish(REG(a6, __IFACE_OR_BASE), REG(a0, const DH_METHOD * dhm)))(DH *);
const char * SAVEDS ASM LIB_DH_meth_get0_name(REG(a6, __IFACE_OR_BASE), REG(a0, const DH_METHOD * dhm));
int SAVEDS ASM LIB_DH_meth_set_generate_params(REG(a6, __IFACE_OR_BASE), REG(a0, DH_METHOD * dhm), REG(a1, int (*generate_params)(DH *, int, int, BN_GENCB *)));
int SAVEDS ASM LIB_DH_meth_set_compute_key(REG(a6, __IFACE_OR_BASE), REG(a0, DH_METHOD * dhm), REG(a1, int (*compute_key)(unsigned char *, const BIGNUM *, DH *)));
int SAVEDS ASM LIB_DH_meth_set_flags(REG(a6, __IFACE_OR_BASE), REG(a0, DH_METHOD * dhm), REG(d0, int flags));
int  SAVEDS ASM (*LIB_DH_meth_get_generate_params(REG(a6, __IFACE_OR_BASE), REG(a0, const DH_METHOD * dhm)))(DH *, int, int, BN_GENCB *);
int SAVEDS ASM LIB_DH_meth_get_flags(REG(a6, __IFACE_OR_BASE), REG(a0, const DH_METHOD * dhm));
int SAVEDS ASM LIB_DH_meth_set_finish(REG(a6, __IFACE_OR_BASE), REG(a0, DH_METHOD * dhm), REG(a1, int (*finish)(DH *)));
void * SAVEDS ASM LIB_DH_meth_get0_app_data(REG(a6, __IFACE_OR_BASE), REG(a0, const DH_METHOD * dhm));
int SAVEDS ASM LIB_DH_meth_set0_app_data(REG(a6, __IFACE_OR_BASE), REG(a0, DH_METHOD * dhm), REG(a1, void * app_data));
int  SAVEDS ASM (*LIB_DH_meth_get_init(REG(a6, __IFACE_OR_BASE), REG(a0, const DH_METHOD * dhm)))(DH *);
int  SAVEDS ASM (*LIB_DH_meth_get_bn_mod_exp(REG(a6, __IFACE_OR_BASE), REG(a0, const DH_METHOD * dhm)))(const DH *, BIGNUM *, const BIGNUM *, const BIGNUM *, const BIGNUM *, BN_CTX *, BN_MONT_CTX *);
DH_METHOD * SAVEDS ASM LIB_DH_meth_new(REG(a6, __IFACE_OR_BASE), REG(a0, const char * name), REG(d0, int flags));
DH_METHOD * SAVEDS ASM LIB_DH_meth_dup(REG(a6, __IFACE_OR_BASE), REG(a0, const DH_METHOD * dhm));
int SAVEDS ASM LIB_DH_meth_set_bn_mod_exp(REG(a6, __IFACE_OR_BASE), REG(a0, DH_METHOD * dhm), REG(a1, int (*bn_mod_exp)(const DH *, BIGNUM *, const BIGNUM *, const BIGNUM *, const BIGNUM *, BN_CTX *, BN_MONT_CTX *)));
int SAVEDS ASM LIB_DH_meth_set_generate_key(REG(a6, __IFACE_OR_BASE), REG(a0, DH_METHOD * dhm), REG(a1, int (*generate_key)(DH *)));
void SAVEDS ASM LIB_DH_meth_free(REG(a6, __IFACE_OR_BASE), REG(a0, DH_METHOD * dhm));
int  SAVEDS ASM (*LIB_DH_meth_get_generate_key(REG(a6, __IFACE_OR_BASE), REG(a0, const DH_METHOD * dhm)))(DH *);
void SAVEDS ASM LIB_DH_set_flags(REG(a6, __IFACE_OR_BASE), REG(a0, DH * dh), REG(d0, int flags));
X509_OBJECT * SAVEDS ASM LIB_X509_STORE_CTX_get_obj_by_subject(REG(a6, __IFACE_OR_BASE), REG(a0, X509_STORE_CTX * vs), REG(d0, X509_LOOKUP_TYPE type), REG(a1, const X509_NAME * name));
void SAVEDS ASM LIB_X509_OBJECT_free(REG(a6, __IFACE_OR_BASE), REG(a0, X509_OBJECT * a));
X509 * SAVEDS ASM LIB_X509_OBJECT_get0_X509(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_OBJECT * a));
STACK_OF(X509) * SAVEDS ASM LIB_X509_STORE_CTX_get0_untrusted(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_STORE_CTX * ctx));
X509 * SAVEDS ASM LIB_X509_STORE_CTX_get0_cert(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_STORE_CTX * ctx));
void SAVEDS ASM LIB_X509_STORE_CTX_set_verify(REG(a6, __IFACE_OR_BASE), REG(a0, X509_STORE_CTX * ctx), REG(a1, X509_STORE_CTX_verify_fn verify));
X509_STORE_CTX_verify_fn SAVEDS ASM LIB_X509_STORE_CTX_get_verify(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_STORE_CTX * ctx));
X509_STORE_CTX_verify_cb SAVEDS ASM LIB_X509_STORE_CTX_get_verify_cb(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_STORE_CTX * ctx));
void SAVEDS ASM LIB_X509_STORE_CTX_set0_verified_chain(REG(a6, __IFACE_OR_BASE), REG(a0, X509_STORE_CTX * ctx), REG(a1, STACK_OF(X509) * sk));
void SAVEDS ASM LIB_X509_STORE_CTX_set0_untrusted(REG(a6, __IFACE_OR_BASE), REG(a0, X509_STORE_CTX * ctx), REG(a1, STACK_OF(X509) * sk));
int SAVEDS ASM LIB_OPENSSL_hexchar2int(REG(a6, __IFACE_OR_BASE), REG(d0, unsigned char c));
int SAVEDS ASM LIB_DSA_SIG_set0(REG(a6, __IFACE_OR_BASE), REG(a0, DSA_SIG * sig), REG(a1, BIGNUM * r), REG(a2, BIGNUM * s));
int SAVEDS ASM LIB_DSA_bits(REG(a6, __IFACE_OR_BASE), REG(a0, const DSA * d));
int SAVEDS ASM LIB_ECDSA_SIG_set0(REG(a6, __IFACE_OR_BASE), REG(a0, ECDSA_SIG * sig), REG(a1, BIGNUM * r), REG(a2, BIGNUM * s));
int SAVEDS ASM LIB_EVP_ENCODE_CTX_copy(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_ENCODE_CTX * dctx), REG(a1, const EVP_ENCODE_CTX * sctx));
const unsigned char * SAVEDS ASM LIB_EVP_PKEY_get0_hmac(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_PKEY * pkey), REG(a2, size_t * len));
const EVP_MD * SAVEDS ASM LIB_HMAC_CTX_get_md(REG(a6, __IFACE_OR_BASE), REG(a0, const HMAC_CTX * ctx));
const STACK_OF(X509) * SAVEDS ASM LIB_OCSP_resp_get0_certs(REG(a6, __IFACE_OR_BASE), REG(a0, const OCSP_BASICRESP * bs));
int SAVEDS ASM LIB_OCSP_resp_get0_id(REG(a6, __IFACE_OR_BASE), REG(a0, const OCSP_BASICRESP * bs), REG(a1, const ASN1_OCTET_STRING ** pid), REG(a2, const X509_NAME ** pname));
int SAVEDS ASM LIB_PEM_write_bio_PrivateKey_traditional(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, const EVP_PKEY * x), REG(a2, const EVP_CIPHER * enc), REG(a3, const unsigned char * kstr), REG(d0, int klen), REG(d1, pem_password_cb * cb), REG(d2, void * u));
int SAVEDS ASM LIB_SSL_SESSION_get_protocol_version(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL_SESSION * s));
int SAVEDS ASM LIB_SSL_is_dtls(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * s));
unsigned long SAVEDS ASM LIB_SSL_CTX_dane_set_flags(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(d0, unsigned long flags));
unsigned long SAVEDS ASM LIB_SSL_CTX_dane_clear_flags(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(d0, unsigned long flags));
unsigned long SAVEDS ASM LIB_SSL_dane_set_flags(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * ssl), REG(d0, unsigned long flags));
unsigned long SAVEDS ASM LIB_SSL_dane_clear_flags(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * ssl), REG(d0, unsigned long flags));
int SAVEDS ASM LIB_SSL_client_version(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * s));
long SAVEDS ASM LIB_X509_get_pathlen(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * x));
X509_LOOKUP_TYPE SAVEDS ASM LIB_X509_OBJECT_get_type(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_OBJECT * a));
X509_CRL * SAVEDS ASM LIB_X509_OBJECT_get0_X509_CRL(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_OBJECT * a));
int SAVEDS ASM LIB_X509_STORE_lock(REG(a6, __IFACE_OR_BASE), REG(a0, X509_STORE * xs));
int SAVEDS ASM LIB_X509_STORE_unlock(REG(a6, __IFACE_OR_BASE), REG(a0, X509_STORE * xs));
STACK_OF(X509_OBJECT) * SAVEDS ASM LIB_X509_STORE_get0_objects(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_STORE * xs));
X509_VERIFY_PARAM * SAVEDS ASM LIB_X509_STORE_get0_param(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_STORE * xs));
void SAVEDS ASM LIB_X509_STORE_set_verify(REG(a6, __IFACE_OR_BASE), REG(a0, X509_STORE * xs), REG(a1, X509_STORE_CTX_verify_fn verify));
X509_STORE_CTX_verify_fn SAVEDS ASM LIB_X509_STORE_get_verify(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_STORE * xs));
X509_STORE_CTX_verify_cb SAVEDS ASM LIB_X509_STORE_get_verify_cb(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_STORE * xs));
void SAVEDS ASM LIB_X509_STORE_set_get_issuer(REG(a6, __IFACE_OR_BASE), REG(a0, X509_STORE * xs), REG(a1, X509_STORE_CTX_get_issuer_fn get_issuer));
X509_STORE_CTX_get_issuer_fn SAVEDS ASM LIB_X509_STORE_get_get_issuer(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_STORE * xs));
void SAVEDS ASM LIB_X509_STORE_set_check_issued(REG(a6, __IFACE_OR_BASE), REG(a0, X509_STORE * xs), REG(a1, X509_STORE_CTX_check_issued_fn check_issued));
X509_STORE_CTX_check_issued_fn SAVEDS ASM LIB_X509_STORE_get_check_issued(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_STORE * xs));
void SAVEDS ASM LIB_X509_STORE_set_check_revocation(REG(a6, __IFACE_OR_BASE), REG(a0, X509_STORE * xs), REG(a1, X509_STORE_CTX_check_revocation_fn check_revocation));
X509_STORE_CTX_check_revocation_fn SAVEDS ASM LIB_X509_STORE_get_check_revocation(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_STORE * xs));
void SAVEDS ASM LIB_X509_STORE_set_get_crl(REG(a6, __IFACE_OR_BASE), REG(a0, X509_STORE * xs), REG(a1, X509_STORE_CTX_get_crl_fn get_crl));
X509_STORE_CTX_get_crl_fn SAVEDS ASM LIB_X509_STORE_get_get_crl(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_STORE * xs));
void SAVEDS ASM LIB_X509_STORE_set_check_crl(REG(a6, __IFACE_OR_BASE), REG(a0, X509_STORE * xs), REG(a1, X509_STORE_CTX_check_crl_fn check_crl));
X509_STORE_CTX_check_crl_fn SAVEDS ASM LIB_X509_STORE_get_check_crl(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_STORE * xs));
void SAVEDS ASM LIB_X509_STORE_set_cert_crl(REG(a6, __IFACE_OR_BASE), REG(a0, X509_STORE * xs), REG(a1, X509_STORE_CTX_cert_crl_fn cert_crl));
X509_STORE_CTX_cert_crl_fn SAVEDS ASM LIB_X509_STORE_get_cert_crl(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_STORE * xs));
void SAVEDS ASM LIB_X509_STORE_set_check_policy(REG(a6, __IFACE_OR_BASE), REG(a0, X509_STORE * xs), REG(a1, X509_STORE_CTX_check_policy_fn check_policy));
X509_STORE_CTX_check_policy_fn SAVEDS ASM LIB_X509_STORE_get_check_policy(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_STORE * xs));
void SAVEDS ASM LIB_X509_STORE_set_lookup_certs(REG(a6, __IFACE_OR_BASE), REG(a0, X509_STORE * xs), REG(a1, X509_STORE_CTX_lookup_certs_fn lookup_certs));
X509_STORE_CTX_lookup_certs_fn SAVEDS ASM LIB_X509_STORE_get_lookup_certs(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_STORE * xs));
void SAVEDS ASM LIB_X509_STORE_set_lookup_crls(REG(a6, __IFACE_OR_BASE), REG(a0, X509_STORE * xs), REG(a1, X509_STORE_CTX_lookup_crls_fn lookup_crls));
X509_STORE_CTX_lookup_crls_fn SAVEDS ASM LIB_X509_STORE_get_lookup_crls(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_STORE * xs));
void SAVEDS ASM LIB_X509_STORE_set_cleanup(REG(a6, __IFACE_OR_BASE), REG(a0, X509_STORE * xs), REG(a1, X509_STORE_CTX_cleanup_fn cleanup));
X509_STORE_CTX_cleanup_fn SAVEDS ASM LIB_X509_STORE_get_cleanup(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_STORE * xs));
int SAVEDS ASM LIB_X509_STORE_set_ex_data(REG(a6, __IFACE_OR_BASE), REG(a0, X509_STORE * xs), REG(d0, int idx), REG(a1, void * data));
void * SAVEDS ASM LIB_X509_STORE_get_ex_data(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_STORE * xs), REG(d0, int idx));
X509_STORE_CTX_get_issuer_fn SAVEDS ASM LIB_X509_STORE_CTX_get_get_issuer(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_STORE_CTX * ctx));
X509_STORE_CTX_check_issued_fn SAVEDS ASM LIB_X509_STORE_CTX_get_check_issued(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_STORE_CTX * ctx));
X509_STORE_CTX_check_revocation_fn SAVEDS ASM LIB_X509_STORE_CTX_get_check_revocation(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_STORE_CTX * ctx));
X509_STORE_CTX_get_crl_fn SAVEDS ASM LIB_X509_STORE_CTX_get_get_crl(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_STORE_CTX * ctx));
X509_STORE_CTX_check_crl_fn SAVEDS ASM LIB_X509_STORE_CTX_get_check_crl(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_STORE_CTX * ctx));
X509_STORE_CTX_cert_crl_fn SAVEDS ASM LIB_X509_STORE_CTX_get_cert_crl(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_STORE_CTX * ctx));
X509_STORE_CTX_check_policy_fn SAVEDS ASM LIB_X509_STORE_CTX_get_check_policy(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_STORE_CTX * ctx));
X509_STORE_CTX_lookup_certs_fn SAVEDS ASM LIB_X509_STORE_CTX_get_lookup_certs(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_STORE_CTX * ctx));
X509_STORE_CTX_lookup_crls_fn SAVEDS ASM LIB_X509_STORE_CTX_get_lookup_crls(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_STORE_CTX * ctx));
X509_STORE_CTX_cleanup_fn SAVEDS ASM LIB_X509_STORE_CTX_get_cleanup(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_STORE_CTX * ctx));
void SAVEDS ASM LIB_X509_STORE_CTX_set_error_depth(REG(a6, __IFACE_OR_BASE), REG(a0, X509_STORE_CTX * ctx), REG(d0, int depth));
void SAVEDS ASM LIB_X509_STORE_CTX_set_current_cert(REG(a6, __IFACE_OR_BASE), REG(a0, X509_STORE_CTX * ctx), REG(a1, X509 * x));
int SAVEDS ASM LIB_NAME_CONSTRAINTS_check_CN(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * x), REG(a1, NAME_CONSTRAINTS * nc));
void SAVEDS ASM LIB_X509_set_proxy_flag(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * x));
void SAVEDS ASM LIB_X509_set_proxy_pathlen(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * x), REG(d0, long l));
long SAVEDS ASM LIB_X509_get_proxy_pathlen(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * x));
ASIdentifierChoice * SAVEDS ASM LIB_ASIdentifierChoice_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_ASIdentifierChoice_free(REG(a6, __IFACE_OR_BASE), REG(a0, ASIdentifierChoice * a));
ASIdentifierChoice * SAVEDS ASM LIB_d2i_ASIdentifierChoice(REG(a6, __IFACE_OR_BASE), REG(a0, ASIdentifierChoice ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_ASIdentifierChoice(REG(a6, __IFACE_OR_BASE), REG(a0, const ASIdentifierChoice * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_ASIdentifierChoice_it(REG(a6, __IFACE_OR_BASE));
ASIdentifiers * SAVEDS ASM LIB_ASIdentifiers_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_ASIdentifiers_free(REG(a6, __IFACE_OR_BASE), REG(a0, ASIdentifiers * a));
ASIdentifiers * SAVEDS ASM LIB_d2i_ASIdentifiers(REG(a6, __IFACE_OR_BASE), REG(a0, ASIdentifiers ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_ASIdentifiers(REG(a6, __IFACE_OR_BASE), REG(a0, const ASIdentifiers * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_ASIdentifiers_it(REG(a6, __IFACE_OR_BASE));
ASIdOrRange * SAVEDS ASM LIB_ASIdOrRange_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_ASIdOrRange_free(REG(a6, __IFACE_OR_BASE), REG(a0, ASIdOrRange * a));
ASIdOrRange * SAVEDS ASM LIB_d2i_ASIdOrRange(REG(a6, __IFACE_OR_BASE), REG(a0, ASIdOrRange ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_ASIdOrRange(REG(a6, __IFACE_OR_BASE), REG(a0, const ASIdOrRange * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_ASIdOrRange_it(REG(a6, __IFACE_OR_BASE));
ASRange * SAVEDS ASM LIB_ASRange_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_ASRange_free(REG(a6, __IFACE_OR_BASE), REG(a0, ASRange * a));
ASRange * SAVEDS ASM LIB_d2i_ASRange(REG(a6, __IFACE_OR_BASE), REG(a0, ASRange ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_ASRange(REG(a6, __IFACE_OR_BASE), REG(a0, const ASRange * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_ASRange_it(REG(a6, __IFACE_OR_BASE));
IPAddressChoice * SAVEDS ASM LIB_IPAddressChoice_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_IPAddressChoice_free(REG(a6, __IFACE_OR_BASE), REG(a0, IPAddressChoice * a));
IPAddressChoice * SAVEDS ASM LIB_d2i_IPAddressChoice(REG(a6, __IFACE_OR_BASE), REG(a0, IPAddressChoice ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_IPAddressChoice(REG(a6, __IFACE_OR_BASE), REG(a0, const IPAddressChoice * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_IPAddressChoice_it(REG(a6, __IFACE_OR_BASE));
IPAddressFamily * SAVEDS ASM LIB_IPAddressFamily_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_IPAddressFamily_free(REG(a6, __IFACE_OR_BASE), REG(a0, IPAddressFamily * a));
IPAddressFamily * SAVEDS ASM LIB_d2i_IPAddressFamily(REG(a6, __IFACE_OR_BASE), REG(a0, IPAddressFamily ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_IPAddressFamily(REG(a6, __IFACE_OR_BASE), REG(a0, const IPAddressFamily * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_IPAddressFamily_it(REG(a6, __IFACE_OR_BASE));
IPAddressOrRange * SAVEDS ASM LIB_IPAddressOrRange_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_IPAddressOrRange_free(REG(a6, __IFACE_OR_BASE), REG(a0, IPAddressOrRange * a));
IPAddressOrRange * SAVEDS ASM LIB_d2i_IPAddressOrRange(REG(a6, __IFACE_OR_BASE), REG(a0, IPAddressOrRange ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_IPAddressOrRange(REG(a6, __IFACE_OR_BASE), REG(a0, const IPAddressOrRange * a), REG(a1, unsigned char ** out));
const ASN1_ITEM * SAVEDS ASM LIB_IPAddressOrRange_it(REG(a6, __IFACE_OR_BASE));
const unsigned char * SAVEDS ASM LIB_ASN1_STRING_get0_data(REG(a6, __IFACE_OR_BASE), REG(a0, const ASN1_STRING * x));
const ASN1_TIME * SAVEDS ASM LIB_X509_get0_notBefore(REG(a6, __IFACE_OR_BASE), REG(a0, const X509 * x));
const ASN1_TIME * SAVEDS ASM LIB_X509_get0_notAfter(REG(a6, __IFACE_OR_BASE), REG(a0, const X509 * x));
const ASN1_TIME * SAVEDS ASM LIB_X509_CRL_get0_lastUpdate(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_CRL * crl));
const ASN1_TIME * SAVEDS ASM LIB_X509_CRL_get0_nextUpdate(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_CRL * crl));
char * SAVEDS ASM LIB_OPENSSL_uni2utf8(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * uni), REG(d0, int unilen));
void SAVEDS ASM LIB_CT_POLICY_EVAL_CTX_set_shared_CTLOG_STORE(REG(a6, __IFACE_OR_BASE), REG(a0, CT_POLICY_EVAL_CTX * ctx), REG(a1, CTLOG_STORE * log_store));
int SAVEDS ASM LIB_CT_POLICY_EVAL_CTX_set1_cert(REG(a6, __IFACE_OR_BASE), REG(a0, CT_POLICY_EVAL_CTX * ctx), REG(a1, X509 * cert));
int SAVEDS ASM LIB_CT_POLICY_EVAL_CTX_set1_issuer(REG(a6, __IFACE_OR_BASE), REG(a0, CT_POLICY_EVAL_CTX * ctx), REG(a1, X509 * issuer));
ECPARAMETERS * SAVEDS ASM LIB_ECPARAMETERS_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_ECPARAMETERS_free(REG(a6, __IFACE_OR_BASE), REG(a0, ECPARAMETERS * a));
int SAVEDS ASM LIB_BIO_get_new_index(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_EVP_PKEY_set1_encoded_public_key(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY * pkey), REG(a1, const unsigned char * pub), REG(d0, size_t publen));
size_t SAVEDS ASM LIB_EVP_PKEY_get1_encoded_public_key(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY * pkey), REG(a1, unsigned char ** ppub));
int SAVEDS ASM LIB_OCSP_RESPID_set_by_name(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_RESPID * respid), REG(a1, X509 * cert));
int SAVEDS ASM LIB_OCSP_RESPID_set_by_key(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_RESPID * respid), REG(a1, X509 * cert));
int SAVEDS ASM LIB_OCSP_RESPID_match(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_RESPID * respid), REG(a1, X509 * cert));
int SAVEDS ASM LIB_PKCS12_add_friendlyname_utf8(REG(a6, __IFACE_OR_BASE), REG(a0, PKCS12_SAFEBAG * bag), REG(a1, const char * name), REG(d0, int namelen));
int SAVEDS ASM LIB_PKCS12_key_gen_utf8(REG(a6, __IFACE_OR_BASE), REG(a0, const char * pass), REG(d0, int passlen), REG(a1, unsigned char * salt), REG(d1, int saltlen), REG(d2, int id), REG(d3, int iter), REG(d4, int n), REG(a2, unsigned char * out), REG(a3, const EVP_MD * md_type));
unsigned char * SAVEDS ASM LIB_OPENSSL_utf82uni(REG(a6, __IFACE_OR_BASE), REG(a0, const char * asc), REG(d0, int asclen), REG(a1, unsigned char ** uni), REG(a2, int * unilen));
const SSL_CIPHER * SAVEDS ASM LIB_SSL_SESSION_get0_cipher(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL_SESSION * s));
int SAVEDS ASM LIB_SSL_SESSION_set1_id(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_SESSION * s), REG(a1, const unsigned char * sid), REG(d0, unsigned int sid_len));
const unsigned char * SAVEDS ASM LIB_SSL_SESSION_get0_id_context(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL_SESSION * s), REG(a1, unsigned int * len));
const STACK_OF(ASN1_UTF8STRING) * SAVEDS ASM LIB_TS_STATUS_INFO_get0_text(REG(a6, __IFACE_OR_BASE), REG(a0, const TS_STATUS_INFO * a));
void SAVEDS ASM LIB_X509_SIG_getm(REG(a6, __IFACE_OR_BASE), REG(a0, X509_SIG * sig), REG(a1, X509_ALGOR ** palg), REG(a2, ASN1_OCTET_STRING ** pdigest));
const ASN1_INTEGER * SAVEDS ASM LIB_X509_get0_serialNumber(REG(a6, __IFACE_OR_BASE), REG(a0, const X509 * x));
uint64_t SAVEDS ASM LIB_CT_POLICY_EVAL_CTX_get_time(REG(a6, __IFACE_OR_BASE), REG(a0, const CT_POLICY_EVAL_CTX * ctx));
void SAVEDS ASM LIB_CT_POLICY_EVAL_CTX_set_time(REG(a6, __IFACE_OR_BASE), REG(a0, CT_POLICY_EVAL_CTX * ctx), REG(d0, uint64_t time_in_ms));
int SAVEDS ASM LIB_DH_check_params(REG(a6, __IFACE_OR_BASE), REG(a0, const DH * dh), REG(a1, int * ret));
const char * SAVEDS ASM LIB_SSL_COMP_get0_name(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL_COMP * comp));
int SAVEDS ASM LIB_SSL_COMP_get_id(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL_COMP * comp));
time_t SAVEDS ASM LIB_X509_VERIFY_PARAM_get_time(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_VERIFY_PARAM * param));
int SAVEDS ASM LIB_X509_VERIFY_PARAM_set_inh_flags(REG(a6, __IFACE_OR_BASE), REG(a0, X509_VERIFY_PARAM * param), REG(d0, uint32_t flags));
uint32_t SAVEDS ASM LIB_X509_VERIFY_PARAM_get_inh_flags(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_VERIFY_PARAM * param));
void SAVEDS ASM LIB_CRYPTO_secure_clear_free(REG(a6, __IFACE_OR_BASE), REG(a0, void * ptr), REG(d0, size_t num), REG(a1, const char * file), REG(d1, int line));
int SAVEDS ASM LIB_EVP_PKEY_set1_engine(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY * pkey), REG(a1, ENGINE * e));
STACK_OF(SSL_CIPHER) * SAVEDS ASM LIB_SSL_get_client_ciphers(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * s));
const char * SAVEDS ASM LIB_SSL_CIPHER_standard_name(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL_CIPHER * c));
STACK_OF(X509) * SAVEDS ASM LIB_SSL_get0_verified_chain(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * s));
STACK_OF(SSL_COMP) * SAVEDS ASM LIB_SSL_COMP_set0_compression_methods(REG(a6, __IFACE_OR_BASE), REG(a0, STACK_OF(SSL_COMP) * meths));
void SAVEDS ASM LIB_SSL_CTX_set1_cert_store(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * a), REG(a1, X509_STORE * b));
size_t SAVEDS ASM LIB_DTLS_get_data_mtu(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * s));
int SAVEDS ASM LIB_SSL_read_ex(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * ssl), REG(a1, void * buf), REG(d0, size_t num), REG(a2, size_t * readbytes));
int SAVEDS ASM LIB_SSL_peek_ex(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * ssl), REG(a1, void * buf), REG(d0, size_t num), REG(a2, size_t * readbytes));
int SAVEDS ASM LIB_SSL_write_ex(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s), REG(a1, const void * buf), REG(d0, size_t num), REG(a2, size_t * written));
void SAVEDS ASM LIB_SSL_CTX_set_keylog_callback(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(a1, SSL_CTX_keylog_cb_func cb));
SSL_CTX_keylog_cb_func SAVEDS ASM LIB_SSL_CTX_get_keylog_callback(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL_CTX * ctx));
int SAVEDS ASM LIB_SSL_get_peer_signature_type_nid(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * s), REG(a1, int * pnid));
int SAVEDS ASM LIB_SSL_key_update(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s), REG(d0, int updatetype));
int SAVEDS ASM LIB_SSL_get_key_update_type(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * s));
int SAVEDS ASM LIB_SSL_bytes_to_cipher_list(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s), REG(a1, const unsigned char * bytes), REG(d0, size_t len), REG(d1, int isv2format), REG(a2, STACK_OF(SSL_CIPHER) ** sk), REG(a3, STACK_OF(SSL_CIPHER) ** scsvs));
size_t SAVEDS ASM LIB_SSL_client_hello_get0_compression_methods(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s), REG(a1, const unsigned char ** out));
size_t SAVEDS ASM LIB_SSL_client_hello_get0_ciphers(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s), REG(a1, const unsigned char ** out));
int SAVEDS ASM LIB_SSL_client_hello_get0_ext(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s), REG(d0, unsigned int type), REG(a1, const unsigned char ** out), REG(a2, size_t * outlen));
size_t SAVEDS ASM LIB_SSL_client_hello_get0_session_id(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s), REG(a1, const unsigned char ** out));
size_t SAVEDS ASM LIB_SSL_client_hello_get0_random(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s), REG(a1, const unsigned char ** out));
void SAVEDS ASM LIB_SSL_CTX_set_client_hello_cb(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * c), REG(a1, SSL_client_hello_cb_fn cb), REG(a2, void * arg));
unsigned int SAVEDS ASM LIB_SSL_client_hello_get0_legacy_version(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s));
int SAVEDS ASM LIB_SSL_client_hello_isv2(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s));
int SAVEDS ASM LIB_SSL_set_max_early_data(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s), REG(d0, uint32_t max_early_data));
int SAVEDS ASM LIB_SSL_CTX_set_max_early_data(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(d0, uint32_t max_early_data));
uint32_t SAVEDS ASM LIB_SSL_get_max_early_data(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * s));
uint32_t SAVEDS ASM LIB_SSL_CTX_get_max_early_data(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL_CTX * ctx));
int SAVEDS ASM LIB_SSL_write_early_data(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s), REG(a1, const void * buf), REG(d0, size_t num), REG(a2, size_t * written));
int SAVEDS ASM LIB_SSL_read_early_data(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s), REG(a1, void * buf), REG(d0, size_t num), REG(a2, size_t * readbytes));
int SAVEDS ASM LIB_SSL_get_early_data_status(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * s));
uint32_t SAVEDS ASM LIB_SSL_SESSION_get_max_early_data(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL_SESSION * s));
int SAVEDS ASM LIB_SSL_add1_to_CA_list(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * ssl), REG(a1, const X509 * x));
void SAVEDS ASM LIB_SSL_set0_CA_list(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s), REG(a1, STACK_OF(X509_NAME) * name_list));
void SAVEDS ASM LIB_SSL_CTX_set0_CA_list(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(a1, STACK_OF(X509_NAME) * name_list));
const STACK_OF(X509_NAME) * SAVEDS ASM LIB_SSL_get0_CA_list(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * s));
const STACK_OF(X509_NAME) * SAVEDS ASM LIB_SSL_get0_peer_CA_list(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * s));
int SAVEDS ASM LIB_SSL_CTX_add1_to_CA_list(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(a1, const X509 * x));
const STACK_OF(X509_NAME) * SAVEDS ASM LIB_SSL_CTX_get0_CA_list(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL_CTX * ctx));
int SAVEDS ASM LIB_SSL_CTX_add_custom_ext(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(d0, unsigned int ext_type), REG(d1, unsigned int context), REG(a1, SSL_custom_ext_add_cb_ex add_cb), REG(a2, SSL_custom_ext_free_cb_ex free_cb), REG(a3, void * add_arg), REG(d2, SSL_custom_ext_parse_cb_ex parse_cb), REG(d3, void * parse_arg));
int SAVEDS ASM LIB_SSL_SESSION_is_resumable(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL_SESSION * s));
void SAVEDS ASM LIB_SSL_CTX_set_record_padding_callback(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(a1, size_t (*cb)(SSL *ssl, int type, size_t len, void *arg)));
int SAVEDS ASM LIB_SSL_set_record_padding_callback(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * ssl), REG(a1, size_t (*cb)(SSL *ssl, int type, size_t len, void *arg)));
int SAVEDS ASM LIB_SSL_CTX_set_block_padding(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(d0, size_t block_size));
void * SAVEDS ASM LIB_SSL_CTX_get_record_padding_callback_arg(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL_CTX * ctx));
void * SAVEDS ASM LIB_SSL_get_record_padding_callback_arg(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * ssl));
int SAVEDS ASM LIB_SSL_set_block_padding(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * ssl), REG(d0, size_t block_size));
void SAVEDS ASM LIB_SSL_set_record_padding_callback_arg(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * ssl), REG(a1, void * arg));
void SAVEDS ASM LIB_SSL_CTX_set_record_padding_callback_arg(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(a1, void * arg));
int SAVEDS ASM LIB_SSL_CTX_use_serverinfo_ex(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(d0, unsigned int version), REG(a1, const unsigned char * serverinfo), REG(d1, size_t serverinfo_length));
int SAVEDS ASM LIB_SSL_client_hello_get1_extensions_present(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s), REG(a1, int ** out), REG(a2, size_t * outlen));
void SAVEDS ASM LIB_SSL_set_psk_find_session_callback(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s), REG(a1, SSL_psk_find_session_cb_func cb));
void SAVEDS ASM LIB_SSL_set_psk_use_session_callback(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s), REG(a1, SSL_psk_use_session_cb_func cb));
void SAVEDS ASM LIB_SSL_CTX_set_psk_use_session_callback(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(a1, SSL_psk_use_session_cb_func cb));
void SAVEDS ASM LIB_SSL_CTX_set_psk_find_session_callback(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(a1, SSL_psk_find_session_cb_func cb));
const EVP_MD * SAVEDS ASM LIB_SSL_CIPHER_get_handshake_digest(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL_CIPHER * c));
int SAVEDS ASM LIB_SSL_SESSION_set1_master_key(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_SESSION * sess), REG(a1, const unsigned char * in), REG(d0, size_t len));
int SAVEDS ASM LIB_SSL_SESSION_set_cipher(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_SESSION * s), REG(a1, const SSL_CIPHER * cipher));
int SAVEDS ASM LIB_SSL_SESSION_set_protocol_version(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_SESSION * s), REG(d0, int version));
const char * SAVEDS ASM LIB_OPENSSL_cipher_name(REG(a6, __IFACE_OR_BASE), REG(a0, const char * rfc_name));
int SAVEDS ASM LIB_SSL_alloc_buffers(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * ssl));
int SAVEDS ASM LIB_SSL_free_buffers(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * ssl));
SSL_SESSION * SAVEDS ASM LIB_SSL_SESSION_dup(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL_SESSION * src));
const SSL_CIPHER * SAVEDS ASM LIB_SSL_get_pending_cipher(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * s));
uint16_t SAVEDS ASM LIB_SSL_CIPHER_get_protocol_id(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL_CIPHER * c));
int SAVEDS ASM LIB_SSL_SESSION_set_max_early_data(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_SESSION * s), REG(d0, uint32_t max_early_data));
int SAVEDS ASM LIB_SSL_SESSION_set1_alpn_selected(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_SESSION * s), REG(a1, const unsigned char * alpn), REG(d0, size_t len));
int SAVEDS ASM LIB_SSL_SESSION_set1_hostname(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_SESSION * s), REG(a1, const char * hostname));
void SAVEDS ASM LIB_SSL_SESSION_get0_alpn_selected(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL_SESSION * s), REG(a1, const unsigned char ** alpn), REG(a2, size_t * len));
void SAVEDS ASM LIB_DTLS_set_timer_cb(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s), REG(a1, DTLS_timer_cb cb));
int SAVEDS ASM LIB_SSL_CTX_set_tlsext_max_fragment_length(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(d0, uint8_t mode));
int SAVEDS ASM LIB_SSL_set_tlsext_max_fragment_length(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * ssl), REG(d0, uint8_t mode));
uint8_t SAVEDS ASM LIB_SSL_SESSION_get_max_fragment_length(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL_SESSION * sess));
int SAVEDS ASM LIB_SSL_stateless(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s));
int SAVEDS ASM LIB_SSL_verify_client_post_handshake(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s));
void SAVEDS ASM LIB_SSL_set_post_handshake_auth(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s), REG(d0, int val));
int SAVEDS ASM LIB_SSL_export_keying_material_early(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s), REG(a1, unsigned char * out), REG(d0, size_t olen), REG(a2, const char * label), REG(d1, size_t llen), REG(a3, const unsigned char * context), REG(d2, size_t contextlen));
int SAVEDS ASM LIB_SSL_CTX_use_cert_and_key(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(a1, X509 * x509), REG(a2, EVP_PKEY * privatekey), REG(a3, STACK_OF(X509) * chain), REG(d0, int override));
int SAVEDS ASM LIB_SSL_use_cert_and_key(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * ssl), REG(a1, X509 * x509), REG(a2, EVP_PKEY * privatekey), REG(a3, STACK_OF(X509) * chain), REG(d0, int override));
int SAVEDS ASM LIB_SSL_SESSION_get0_ticket_appdata(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_SESSION * ss), REG(a1, void ** data), REG(a2, size_t * len));
int SAVEDS ASM LIB_SSL_SESSION_set1_ticket_appdata(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_SESSION * ss), REG(a1, const void * data), REG(d0, size_t len));
int SAVEDS ASM LIB_SSL_CTX_set_session_ticket_cb(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(a1, SSL_CTX_generate_session_ticket_fn gen_cb), REG(a2, SSL_CTX_decrypt_session_ticket_fn dec_cb), REG(a3, void * arg));
void SAVEDS ASM LIB_SSL_CTX_set_stateless_cookie_generate_cb(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(a1, int (*gen_stateless_cookie_cb)(SSL *ssl, unsigned char *cookie, size_t *cookie_len)));
void SAVEDS ASM LIB_SSL_CTX_set_stateless_cookie_verify_cb(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(a1, int (*verify_stateless_cookie_cb)(SSL *ssl, const unsigned char *cookie, size_t cookie_len)));
int SAVEDS ASM LIB_SSL_CTX_set_ciphersuites(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(a1, const char * str));
int SAVEDS ASM LIB_SSL_set_ciphersuites(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s), REG(a1, const char * str));
int SAVEDS ASM LIB_SSL_set_num_tickets(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s), REG(d0, size_t num_tickets));
size_t SAVEDS ASM LIB_SSL_CTX_get_num_tickets(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL_CTX * ctx));
size_t SAVEDS ASM LIB_SSL_get_num_tickets(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * s));
int SAVEDS ASM LIB_SSL_CTX_set_num_tickets(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(d0, size_t num_tickets));
void SAVEDS ASM LIB_SSL_CTX_set_allow_early_data_cb(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(a1, SSL_allow_early_data_cb_fn cb), REG(a2, void * arg));
void SAVEDS ASM LIB_SSL_set_allow_early_data_cb(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s), REG(a1, SSL_allow_early_data_cb_fn cb), REG(a2, void * arg));
int SAVEDS ASM LIB_SSL_set_recv_max_early_data(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s), REG(d0, uint32_t recv_max_early_data));
uint32_t SAVEDS ASM LIB_SSL_get_recv_max_early_data(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * s));
uint32_t SAVEDS ASM LIB_SSL_CTX_get_recv_max_early_data(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL_CTX * ctx));
int SAVEDS ASM LIB_SSL_CTX_set_recv_max_early_data(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(d0, uint32_t recv_max_early_data));
void SAVEDS ASM LIB_SSL_CTX_set_post_handshake_auth(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(d0, int val));
int SAVEDS ASM LIB_SSL_get_signature_type_nid(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * s), REG(a1, int * pnid));
void SAVEDS ASM LIB_IPAddressRange_free(REG(a6, __IFACE_OR_BASE), REG(a0, IPAddressRange * a));
TLS_FEATURE * SAVEDS ASM LIB_TLS_FEATURE_new(REG(a6, __IFACE_OR_BASE));
const BIO_METHOD * SAVEDS ASM LIB_BIO_f_linebuffer(REG(a6, __IFACE_OR_BASE));
IPAddressRange * SAVEDS ASM LIB_IPAddressRange_new(REG(a6, __IFACE_OR_BASE));
const ASN1_ITEM * SAVEDS ASM LIB_IPAddressRange_it(REG(a6, __IFACE_OR_BASE));
IPAddressRange * SAVEDS ASM LIB_d2i_IPAddressRange(REG(a6, __IFACE_OR_BASE), REG(a0, IPAddressRange ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
void SAVEDS ASM LIB_TLS_FEATURE_free(REG(a6, __IFACE_OR_BASE), REG(a0, TLS_FEATURE * a));
int SAVEDS ASM LIB_i2d_RSA_OAEP_PARAMS(REG(a6, __IFACE_OR_BASE), REG(a0, const RSA_OAEP_PARAMS * a), REG(a1, unsigned char ** out));
int SAVEDS ASM LIB_i2d_IPAddressRange(REG(a6, __IFACE_OR_BASE), REG(a0, const IPAddressRange * a), REG(a1, unsigned char ** out));
X509_OBJECT * SAVEDS ASM LIB_X509_OBJECT_new(REG(a6, __IFACE_OR_BASE));
ASN1_TYPE * SAVEDS ASM LIB_PKCS12_get_attr(REG(a6, __IFACE_OR_BASE), REG(a0, const PKCS12_SAFEBAG * bag), REG(d0, int attr_nid));
void SAVEDS ASM LIB_ECPKPARAMETERS_free(REG(a6, __IFACE_OR_BASE), REG(a0, ECPKPARAMETERS * a));
ECPKPARAMETERS * SAVEDS ASM LIB_ECPKPARAMETERS_new(REG(a6, __IFACE_OR_BASE));
const ASN1_ITEM * SAVEDS ASM LIB_ASN1_ITEM_lookup(REG(a6, __IFACE_OR_BASE), REG(a0, const char * name));
const ASN1_ITEM * SAVEDS ASM LIB_ASN1_ITEM_get(REG(a6, __IFACE_OR_BASE), REG(d0, size_t i));
int SAVEDS ASM LIB_BIO_read_ex(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * b), REG(a1, void * data), REG(d0, size_t dlen), REG(a2, size_t * readbytes));
void SAVEDS ASM LIB_BIO_set_callback_ex(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * b), REG(a1, BIO_callback_fn_ex callback));
BIO_callback_fn_ex SAVEDS ASM LIB_BIO_get_callback_ex(REG(a6, __IFACE_OR_BASE), REG(a0, const BIO * b));
int SAVEDS ASM LIB_BIO_meth_set_read_ex(REG(a6, __IFACE_OR_BASE), REG(a0, BIO_METHOD * biom), REG(a1, int (*bread)(BIO *, char *, size_t, size_t *)));
int  SAVEDS ASM (*LIB_BIO_meth_get_read_ex(REG(a6, __IFACE_OR_BASE), REG(a0, const BIO_METHOD * biom)))(BIO *, char *, size_t, size_t *);
int SAVEDS ASM LIB_BIO_write_ex(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * b), REG(a1, const void * data), REG(d0, size_t dlen), REG(a2, size_t * written));
int  SAVEDS ASM (*LIB_BIO_meth_get_write_ex(REG(a6, __IFACE_OR_BASE), REG(a0, const BIO_METHOD * biom)))(BIO *, const char *, size_t, size_t *);
int SAVEDS ASM LIB_BIO_meth_set_write_ex(REG(a6, __IFACE_OR_BASE), REG(a0, BIO_METHOD * biom), REG(a1, int (*bwrite)(BIO *, const char *, size_t, size_t *)));
int SAVEDS ASM LIB_EVP_PKEY_CTX_md(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(d0, int optype), REG(d1, int cmd), REG(a1, const char * md));
int SAVEDS ASM LIB_RSA_pkey_ctx_ctrl(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(d0, int optype), REG(d1, int cmd), REG(d2, int p1), REG(a1, void * p2));
int SAVEDS ASM LIB_UI_method_set_ex_data(REG(a6, __IFACE_OR_BASE), REG(a0, UI_METHOD * method), REG(d0, int idx), REG(a1, void * data));
const void * SAVEDS ASM LIB_UI_method_get_ex_data(REG(a6, __IFACE_OR_BASE), REG(a0, const UI_METHOD * method), REG(d0, int idx));
UI_METHOD * SAVEDS ASM LIB_UI_UTIL_wrap_read_pem_callback(REG(a6, __IFACE_OR_BASE), REG(a0, pem_password_cb * cb), REG(d0, int rwflag));
const unsigned char * SAVEDS ASM LIB_EVP_PKEY_get0_poly1305(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_PKEY * pkey), REG(a1, size_t * len));
const unsigned char * SAVEDS ASM LIB_EVP_PKEY_get0_siphash(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_PKEY * pkey), REG(a1, size_t * len));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_aria_256_ofb(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_aria_256_cfb128(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_aria_128_cfb1(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_aria_128_ecb(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_aria_128_cfb128(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_aria_192_ecb(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_aria_128_cbc(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_aria_192_ofb(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_aria_192_cbc(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_aria_192_cfb1(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_aria_128_cfb8(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_aria_256_cfb1(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_aria_192_cfb8(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_aria_256_cfb8(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_aria_256_cbc(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_aria_128_ofb(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_aria_192_cfb128(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_aria_256_ecb(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_aria_256_ctr(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_aria_128_ctr(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_aria_192_ctr(REG(a6, __IFACE_OR_BASE));
const UI_METHOD * SAVEDS ASM LIB_UI_null(REG(a6, __IFACE_OR_BASE));
ENGINE * SAVEDS ASM LIB_EC_KEY_get0_engine(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_KEY * eckey));
const ASN1_ITEM * SAVEDS ASM LIB_INT32_it(REG(a6, __IFACE_OR_BASE));
const ASN1_ITEM * SAVEDS ASM LIB_UINT64_it(REG(a6, __IFACE_OR_BASE));
const ASN1_ITEM * SAVEDS ASM LIB_ZINT32_it(REG(a6, __IFACE_OR_BASE));
const ASN1_ITEM * SAVEDS ASM LIB_ZUINT64_it(REG(a6, __IFACE_OR_BASE));
const ASN1_ITEM * SAVEDS ASM LIB_INT64_it(REG(a6, __IFACE_OR_BASE));
const ASN1_ITEM * SAVEDS ASM LIB_ZUINT32_it(REG(a6, __IFACE_OR_BASE));
const ASN1_ITEM * SAVEDS ASM LIB_UINT32_it(REG(a6, __IFACE_OR_BASE));
const ASN1_ITEM * SAVEDS ASM LIB_ZINT64_it(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_BIO_lookup_ex(REG(a6, __IFACE_OR_BASE), REG(a0, const char * host), REG(a1, const char * service), REG(d0, int lookup_type), REG(d1, int family), REG(d2, int socktype), REG(d3, int protocol), REG(a2, BIO_ADDRINFO ** res));
int SAVEDS ASM LIB_X509_CRL_print_ex(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * out), REG(a1, X509_CRL * x), REG(d0, unsigned long nmflag));
int SAVEDS ASM LIB_X509_SIG_INFO_get(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_SIG_INFO * siginf), REG(a1, int * mdnid), REG(a2, int * pknid), REG(a3, int * secbits), REG(d0, uint32_t * flags));
int SAVEDS ASM LIB_X509_get_signature_info(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * x), REG(a1, int * mdnid), REG(a2, int * pknid), REG(a3, int * secbits), REG(d0, uint32_t * flags));
void SAVEDS ASM LIB_X509_SIG_INFO_set(REG(a6, __IFACE_OR_BASE), REG(a0, X509_SIG_INFO * siginf), REG(d0, int mdnid), REG(d1, int pknid), REG(d2, int secbits), REG(d3, uint32_t flags));
void SAVEDS ASM LIB_ESS_CERT_ID_V2_free(REG(a6, __IFACE_OR_BASE), REG(a0, ESS_CERT_ID_V2 * a));
ESS_SIGNING_CERT_V2 * SAVEDS ASM LIB_ESS_SIGNING_CERT_V2_new(REG(a6, __IFACE_OR_BASE));
ESS_SIGNING_CERT_V2 * SAVEDS ASM LIB_d2i_ESS_SIGNING_CERT_V2(REG(a6, __IFACE_OR_BASE), REG(a0, ESS_SIGNING_CERT_V2 ** a), REG(a1, const unsigned char ** pp), REG(d0, long length));
int SAVEDS ASM LIB_i2d_ESS_CERT_ID_V2(REG(a6, __IFACE_OR_BASE), REG(a0, const ESS_CERT_ID_V2 * a), REG(a1, unsigned char ** pp));
ESS_CERT_ID_V2 * SAVEDS ASM LIB_ESS_CERT_ID_V2_dup(REG(a6, __IFACE_OR_BASE), REG(a0, const ESS_CERT_ID_V2 * a));
int SAVEDS ASM LIB_TS_RESP_CTX_set_ess_cert_id_digest(REG(a6, __IFACE_OR_BASE), REG(a0, TS_RESP_CTX * ctx), REG(a1, const EVP_MD * md));
ESS_CERT_ID_V2 * SAVEDS ASM LIB_d2i_ESS_CERT_ID_V2(REG(a6, __IFACE_OR_BASE), REG(a0, ESS_CERT_ID_V2 ** a), REG(a1, const unsigned char ** pp), REG(d0, long length));
int SAVEDS ASM LIB_i2d_ESS_SIGNING_CERT_V2(REG(a6, __IFACE_OR_BASE), REG(a0, const ESS_SIGNING_CERT_V2 * a), REG(a1, unsigned char ** pp));
int SAVEDS ASM LIB_TS_CONF_set_ess_cert_id_digest(REG(a6, __IFACE_OR_BASE), REG(a0, CONF * conf), REG(a1, const char * section), REG(a2, TS_RESP_CTX * ctx));
void SAVEDS ASM LIB_ESS_SIGNING_CERT_V2_free(REG(a6, __IFACE_OR_BASE), REG(a0, ESS_SIGNING_CERT_V2 * a));
ESS_SIGNING_CERT_V2 * SAVEDS ASM LIB_ESS_SIGNING_CERT_V2_dup(REG(a6, __IFACE_OR_BASE), REG(a0, const ESS_SIGNING_CERT_V2 * a));
ESS_CERT_ID_V2 * SAVEDS ASM LIB_ESS_CERT_ID_V2_new(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_PEM_read_bio_ex(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * bp), REG(a1, char ** name), REG(a2, char ** header), REG(a3, unsigned char ** data), REG(d0, long * len), REG(d1, unsigned int flags));
int SAVEDS ASM LIB_PEM_bytes_read_bio_secmem(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned char ** pdata), REG(a1, long * plen), REG(a2, char ** pnm), REG(a3, const char * name), REG(d0, BIO * bp), REG(d1, pem_password_cb * cb), REG(d2, void * u));
int SAVEDS ASM LIB_EVP_DigestSign(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_MD_CTX * ctx), REG(a1, unsigned char * sigret), REG(a2, size_t * siglen), REG(a3, const unsigned char * tbs), REG(d0, size_t tbslen));
int SAVEDS ASM LIB_EVP_DigestVerify(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_MD_CTX * ctx), REG(a1, const unsigned char * sigret), REG(d0, size_t siglen), REG(a2, const unsigned char * tbs), REG(d1, size_t tbslen));
void * SAVEDS ASM (*LIB_UI_method_get_data_duplicator(REG(a6, __IFACE_OR_BASE), REG(a0, const UI_METHOD * method)))(UI *, void *);
int SAVEDS ASM LIB_UI_method_set_data_duplicator(REG(a6, __IFACE_OR_BASE), REG(a0, UI_METHOD * method), REG(a1, void *(*duplicator)(UI *ui, void *ui_data)), REG(a2, void (*destructor)(UI *ui, void *ui_data)));
int SAVEDS ASM LIB_UI_dup_user_data(REG(a6, __IFACE_OR_BASE), REG(a0, UI * ui), REG(a1, void * user_data));
void  SAVEDS ASM (*LIB_UI_method_get_data_destructor(REG(a6, __IFACE_OR_BASE), REG(a0, const UI_METHOD * method)))(UI *, void *);
int SAVEDS ASM LIB_ERR_load_strings_const(REG(a6, __IFACE_OR_BASE), REG(a0, const ERR_STRING_DATA * str));
int SAVEDS ASM LIB_ASN1_TIME_to_tm(REG(a6, __IFACE_OR_BASE), REG(a0, const ASN1_TIME * s), REG(a1, struct tm * tm));
int SAVEDS ASM LIB_ASN1_TIME_set_string_X509(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_TIME * s), REG(a1, const char * str));
int SAVEDS ASM LIB_OCSP_resp_get1_id(REG(a6, __IFACE_OR_BASE), REG(a0, const OCSP_BASICRESP * bs), REG(a1, ASN1_OCTET_STRING ** pid), REG(a2, X509_NAME ** pname));
int SAVEDS ASM LIB_OSSL_STORE_register_loader(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_STORE_LOADER * loader));
int SAVEDS ASM LIB_OSSL_STORE_LOADER_set_error(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_STORE_LOADER * loader), REG(a1, OSSL_STORE_error_fn error_function));
EVP_PKEY * SAVEDS ASM LIB_OSSL_STORE_INFO_get0_PKEY(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_STORE_INFO * info));
int SAVEDS ASM LIB_OSSL_STORE_INFO_get_type(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_STORE_INFO * info));
int SAVEDS ASM LIB_ERR_load_OSSL_STORE_strings(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_OSSL_STORE_LOADER_free(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_STORE_LOADER * loader));
EVP_PKEY * SAVEDS ASM LIB_OSSL_STORE_INFO_get1_PKEY(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_STORE_INFO * info));
void SAVEDS ASM LIB_OSSL_STORE_INFO_free(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_STORE_INFO * info));
int SAVEDS ASM LIB_OSSL_STORE_LOADER_set_eof(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_STORE_LOADER * loader), REG(a1, OSSL_STORE_eof_fn eof_function));
OSSL_STORE_LOADER * SAVEDS ASM LIB_OSSL_STORE_LOADER_new(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e), REG(a1, const char * scheme));
X509 * SAVEDS ASM LIB_OSSL_STORE_INFO_get0_CERT(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_STORE_INFO * info));
int SAVEDS ASM LIB_OSSL_STORE_LOADER_set_close(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_STORE_LOADER * loader), REG(a1, OSSL_STORE_close_fn close_function));
OSSL_STORE_INFO * SAVEDS ASM LIB_OSSL_STORE_INFO_new_PARAMS(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY * params));
OSSL_STORE_INFO * SAVEDS ASM LIB_OSSL_STORE_INFO_new_PKEY(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY * pkey));
EVP_PKEY * SAVEDS ASM LIB_OSSL_STORE_INFO_get1_PARAMS(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_STORE_INFO * info));
X509_CRL * SAVEDS ASM LIB_OSSL_STORE_INFO_get1_CRL(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_STORE_INFO * info));
int SAVEDS ASM LIB_OSSL_STORE_error(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_STORE_CTX * ctx));
X509 * SAVEDS ASM LIB_OSSL_STORE_INFO_get1_CERT(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_STORE_INFO * info));
EVP_PKEY * SAVEDS ASM LIB_OSSL_STORE_INFO_get0_PARAMS(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_STORE_INFO * info));
const char * SAVEDS ASM LIB_OSSL_STORE_INFO_type_string(REG(a6, __IFACE_OR_BASE), REG(d0, int type));
char * SAVEDS ASM LIB_OSSL_STORE_INFO_get1_NAME(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_STORE_INFO * info));
int SAVEDS ASM LIB_OSSL_STORE_LOADER_set_load(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_STORE_LOADER * loader), REG(a1, OSSL_STORE_load_fn load_function));
const char * SAVEDS ASM LIB_OSSL_STORE_LOADER_get0_scheme(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_STORE_LOADER * loader));
OSSL_STORE_CTX * SAVEDS ASM LIB_OSSL_STORE_open(REG(a6, __IFACE_OR_BASE), REG(a0, const char * uri), REG(a1, const UI_METHOD * ui_method), REG(a2, void * ui_data), REG(a3, OSSL_STORE_post_process_info_fn post_process), REG(d0, void * post_process_data));
int SAVEDS ASM LIB_OSSL_STORE_close(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_STORE_CTX * ctx));
OSSL_STORE_INFO * SAVEDS ASM LIB_OSSL_STORE_INFO_new_CERT(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * x509));
X509_CRL * SAVEDS ASM LIB_OSSL_STORE_INFO_get0_CRL(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_STORE_INFO * info));
OSSL_STORE_INFO * SAVEDS ASM LIB_OSSL_STORE_load(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_STORE_CTX * ctx));
const char * SAVEDS ASM LIB_OSSL_STORE_INFO_get0_NAME(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_STORE_INFO * info));
OSSL_STORE_LOADER * SAVEDS ASM LIB_OSSL_STORE_unregister_loader(REG(a6, __IFACE_OR_BASE), REG(a0, const char * scheme));
OSSL_STORE_INFO * SAVEDS ASM LIB_OSSL_STORE_INFO_new_CRL(REG(a6, __IFACE_OR_BASE), REG(a0, X509_CRL * crl));
OSSL_STORE_INFO * SAVEDS ASM LIB_OSSL_STORE_INFO_new_NAME(REG(a6, __IFACE_OR_BASE), REG(a0, char * name));
int SAVEDS ASM LIB_OSSL_STORE_eof(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_STORE_CTX * ctx));
int SAVEDS ASM LIB_OSSL_STORE_LOADER_set_open(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_STORE_LOADER * loader), REG(a1, OSSL_STORE_open_fn open_function));
int SAVEDS ASM LIB_OSSL_STORE_LOADER_set_ctrl(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_STORE_LOADER * loader), REG(a1, OSSL_STORE_ctrl_fn ctrl_function));
#if defined(__amigaos4__)
int SAVEDS ASM LIB_OSSL_STORE_vctrl(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_STORE_CTX * ctx), REG(d0, int cmd), REG(a1, long * args));
#else
int SAVEDS ASM LIB_OSSL_STORE_vctrl(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_STORE_CTX * ctx), REG(d0, int cmd), REG(a1, va_list args));
#endif
int SAVEDS ASM LIB_OSSL_STORE_ctrl(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_STORE_CTX * ctx), REG(d0, int cmd), ...);
const char * SAVEDS ASM LIB_OSSL_STORE_INFO_get0_NAME_description(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_STORE_INFO * info));
int SAVEDS ASM LIB_OSSL_STORE_INFO_set0_NAME_description(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_STORE_INFO * info), REG(a1, char * desc));
char * SAVEDS ASM LIB_OSSL_STORE_INFO_get1_NAME_description(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_STORE_INFO * info));
int SAVEDS ASM LIB_OSSL_STORE_do_all_loaders(REG(a6, __IFACE_OR_BASE), REG(a0, void (*do_function)(const OSSL_STORE_LOADER *loader, void *do_arg)), REG(a1, void * do_arg));
const ENGINE * SAVEDS ASM LIB_OSSL_STORE_LOADER_get0_engine(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_STORE_LOADER * loader));
const EVP_MD * SAVEDS ASM LIB_EVP_sha3_224(REG(a6, __IFACE_OR_BASE));
const EVP_MD * SAVEDS ASM LIB_EVP_sha3_256(REG(a6, __IFACE_OR_BASE));
const EVP_MD * SAVEDS ASM LIB_EVP_sha3_384(REG(a6, __IFACE_OR_BASE));
const EVP_MD * SAVEDS ASM LIB_EVP_sha3_512(REG(a6, __IFACE_OR_BASE));
const EVP_MD * SAVEDS ASM LIB_EVP_shake128(REG(a6, __IFACE_OR_BASE));
const EVP_MD * SAVEDS ASM LIB_EVP_shake256(REG(a6, __IFACE_OR_BASE));
SCRYPT_PARAMS * SAVEDS ASM LIB_SCRYPT_PARAMS_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_SCRYPT_PARAMS_free(REG(a6, __IFACE_OR_BASE), REG(a0, SCRYPT_PARAMS * a));
int SAVEDS ASM LIB_i2d_SCRYPT_PARAMS(REG(a6, __IFACE_OR_BASE), REG(a0, const SCRYPT_PARAMS * a), REG(a1, unsigned char ** out));
SCRYPT_PARAMS * SAVEDS ASM LIB_d2i_SCRYPT_PARAMS(REG(a6, __IFACE_OR_BASE), REG(a0, SCRYPT_PARAMS ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
const ASN1_ITEM * SAVEDS ASM LIB_SCRYPT_PARAMS_it(REG(a6, __IFACE_OR_BASE));
const EVP_PKEY_METHOD * SAVEDS ASM LIB_EVP_PKEY_meth_get0(REG(a6, __IFACE_OR_BASE), REG(d0, size_t idx));
size_t SAVEDS ASM LIB_EVP_PKEY_meth_get_count(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_RAND_priv_bytes(REG(a6, __IFACE_OR_BASE), REG(a0, unsigned char * buf), REG(d0, int num));
int SAVEDS ASM LIB_BN_priv_rand(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * rnd), REG(d0, int bits), REG(d1, int top), REG(d2, int bottom));
int SAVEDS ASM LIB_BN_priv_rand_range(REG(a6, __IFACE_OR_BASE), REG(a0, BIGNUM * rnd), REG(a1, const BIGNUM * range));
int SAVEDS ASM LIB_ASN1_TIME_normalize(REG(a6, __IFACE_OR_BASE), REG(a0, ASN1_TIME * s));
int SAVEDS ASM LIB_ASN1_TIME_cmp_time_t(REG(a6, __IFACE_OR_BASE), REG(a0, const ASN1_TIME * s), REG(d0, time_t t));
int SAVEDS ASM LIB_ASN1_TIME_compare(REG(a6, __IFACE_OR_BASE), REG(a0, const ASN1_TIME * a), REG(a1, const ASN1_TIME * b));
int SAVEDS ASM LIB_EVP_PKEY_CTX_ctrl_uint64(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx), REG(d0, int keytype), REG(d1, int optype), REG(d4, int cmd), REG(d2, uint64_t value));
int SAVEDS ASM LIB_EVP_DigestFinalXOF(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_MD_CTX * ctx), REG(a1, unsigned char * md), REG(d0, size_t len));
int SAVEDS ASM LIB_ERR_clear_last_mark(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_aria_192_ccm(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_aria_256_gcm(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_aria_256_ccm(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_aria_128_gcm(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_aria_128_ccm(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_aria_192_gcm(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_UI_get_result_length(REG(a6, __IFACE_OR_BASE), REG(a0, UI * ui), REG(d0, int i));
int SAVEDS ASM LIB_UI_set_result_ex(REG(a6, __IFACE_OR_BASE), REG(a0, UI * ui), REG(a1, UI_STRING * uis), REG(a2, const char * result), REG(d0, int len));
int SAVEDS ASM LIB_UI_get_result_string_length(REG(a6, __IFACE_OR_BASE), REG(a0, UI_STRING * uis));
int SAVEDS ASM LIB_EVP_PKEY_check(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx));
void SAVEDS ASM LIB_EVP_PKEY_meth_set_check(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_METHOD * pmeth), REG(a1, int (*check)(EVP_PKEY *pkey)));
void SAVEDS ASM LIB_EVP_PKEY_meth_get_check(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_PKEY_METHOD * pmeth), REG(a1, int (**pcheck)(EVP_PKEY *pkey)));
int SAVEDS ASM LIB_EVP_PKEY_meth_remove(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_PKEY_METHOD * pmeth));
int SAVEDS ASM LIB_OPENSSL_sk_reserve(REG(a6, __IFACE_OR_BASE), REG(a0, OPENSSL_STACK * st), REG(d0, int n));
DH * SAVEDS ASM LIB_DH_new_by_nid(REG(a6, __IFACE_OR_BASE), REG(d0, int nid));
int SAVEDS ASM LIB_DH_get_nid(REG(a6, __IFACE_OR_BASE), REG(a0, const DH * dh));
OPENSSL_STACK * SAVEDS ASM LIB_OPENSSL_sk_new_reserve(REG(a6, __IFACE_OR_BASE), REG(a0, OPENSSL_sk_compfunc c), REG(d0, int n));
void SAVEDS ASM LIB_EVP_PKEY_asn1_set_check(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_ASN1_METHOD * ameth), REG(a1, int (*pkey_check)(const EVP_PKEY *pk)));
void SAVEDS ASM LIB_EVP_PKEY_asn1_set_siginf(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_ASN1_METHOD * ameth), REG(a1, int (*siginf_set)(X509_SIG_INFO *siginf, const X509_ALGOR *alg, const ASN1_STRING *sig)));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_sm4_ctr(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_sm4_cbc(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_sm4_ofb(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_sm4_ecb(REG(a6, __IFACE_OR_BASE));
const EVP_CIPHER * SAVEDS ASM LIB_EVP_sm4_cfb128(REG(a6, __IFACE_OR_BASE));
const EVP_MD * SAVEDS ASM LIB_EVP_sm3(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_RSA_get0_multi_prime_factors(REG(a6, __IFACE_OR_BASE), REG(a0, const RSA * r), REG(a1, const BIGNUM ** primes));
int SAVEDS ASM LIB_EVP_PKEY_public_check(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx));
int SAVEDS ASM LIB_EVP_PKEY_param_check(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_CTX * ctx));
void SAVEDS ASM LIB_EVP_PKEY_meth_set_public_check(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_METHOD * pmeth), REG(a1, int (*check)(EVP_PKEY *pkey)));
void SAVEDS ASM LIB_EVP_PKEY_meth_set_param_check(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_METHOD * pmeth), REG(a1, int (*check)(EVP_PKEY *pkey)));
void SAVEDS ASM LIB_EVP_PKEY_meth_get_public_check(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_PKEY_METHOD * pmeth), REG(a1, int (**pcheck)(EVP_PKEY *pkey)));
void SAVEDS ASM LIB_EVP_PKEY_meth_get_param_check(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_PKEY_METHOD * pmeth), REG(a1, int (**pcheck)(EVP_PKEY *pkey)));
void SAVEDS ASM LIB_EVP_PKEY_asn1_set_public_check(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_ASN1_METHOD * ameth), REG(a1, int (*pkey_pub_check)(const EVP_PKEY *pk)));
void SAVEDS ASM LIB_EVP_PKEY_asn1_set_param_check(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_ASN1_METHOD * ameth), REG(a1, int (*pkey_param_check)(const EVP_PKEY *pk)));
int SAVEDS ASM LIB_DH_check_ex(REG(a6, __IFACE_OR_BASE), REG(a0, const DH * dh));
int SAVEDS ASM LIB_DH_check_pub_key_ex(REG(a6, __IFACE_OR_BASE), REG(a0, const DH * dh), REG(a1, const BIGNUM * pub_key));
int SAVEDS ASM LIB_DH_check_params_ex(REG(a6, __IFACE_OR_BASE), REG(a0, const DH * dh));
int SAVEDS ASM LIB_RSA_generate_multi_prime_key(REG(a6, __IFACE_OR_BASE), REG(a0, RSA * rsa), REG(d0, int bits), REG(d1, int primes), REG(a1, BIGNUM * e), REG(a2, BN_GENCB * cb));
int SAVEDS ASM LIB_RSA_get_multi_prime_extra_count(REG(a6, __IFACE_OR_BASE), REG(a0, const RSA * r));
int SAVEDS ASM LIB_OCSP_resp_get0_signer(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_BASICRESP * bs), REG(a1, X509 ** signer), REG(a2, STACK_OF(X509) * extra_certs));
int SAVEDS ASM LIB_RSA_get0_multi_prime_crt_params(REG(a6, __IFACE_OR_BASE), REG(a0, const RSA * r), REG(a1, const BIGNUM ** exps), REG(a2, const BIGNUM ** coeffs));
int SAVEDS ASM LIB_RSA_set0_multi_prime_params(REG(a6, __IFACE_OR_BASE), REG(a0, RSA * r), REG(a1, BIGNUM ** primes), REG(a2, BIGNUM ** exps), REG(a3, BIGNUM ** coeffs), REG(d0, int pnum));
int SAVEDS ASM LIB_RSA_get_version(REG(a6, __IFACE_OR_BASE), REG(a0, RSA * r));
int  SAVEDS ASM (*LIB_RSA_meth_get_multi_prime_keygen(REG(a6, __IFACE_OR_BASE), REG(a0, const RSA_METHOD * meth)))(RSA *rsa, int bits, int primes, BIGNUM *e, BN_GENCB *cb);
int SAVEDS ASM LIB_RSA_meth_set_multi_prime_keygen(REG(a6, __IFACE_OR_BASE), REG(a0, RSA_METHOD * meth), REG(a1, int (*keygen)(RSA *rsa, int bits, int primes, BIGNUM *e, BN_GENCB *cb)));
const ASN1_OCTET_STRING * SAVEDS ASM LIB_PROFESSION_INFO_get0_addProfessionInfo(REG(a6, __IFACE_OR_BASE), REG(a0, const PROFESSION_INFO * pi));
void SAVEDS ASM LIB_ADMISSION_SYNTAX_free(REG(a6, __IFACE_OR_BASE), REG(a0, ADMISSION_SYNTAX * a));
ADMISSION_SYNTAX * SAVEDS ASM LIB_d2i_ADMISSION_SYNTAX(REG(a6, __IFACE_OR_BASE), REG(a0, ADMISSION_SYNTAX ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
void SAVEDS ASM LIB_NAMING_AUTHORITY_set0_authorityId(REG(a6, __IFACE_OR_BASE), REG(a0, NAMING_AUTHORITY * n), REG(a1, ASN1_OBJECT* namingAuthorityId));
void SAVEDS ASM LIB_NAMING_AUTHORITY_set0_authorityURL(REG(a6, __IFACE_OR_BASE), REG(a0, NAMING_AUTHORITY * n), REG(a1, ASN1_IA5STRING* namingAuthorityUrl));
PROFESSION_INFO * SAVEDS ASM LIB_d2i_PROFESSION_INFO(REG(a6, __IFACE_OR_BASE), REG(a0, PROFESSION_INFO ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
const ASN1_ITEM * SAVEDS ASM LIB_NAMING_AUTHORITY_it(REG(a6, __IFACE_OR_BASE));
const STACK_OF(ADMISSIONS) * SAVEDS ASM LIB_ADMISSION_SYNTAX_get0_contentsOfAdmissions(REG(a6, __IFACE_OR_BASE), REG(a0, const ADMISSION_SYNTAX * as));
void SAVEDS ASM LIB_PROFESSION_INFO_set0_professionItems(REG(a6, __IFACE_OR_BASE), REG(a0, PROFESSION_INFO * pi), REG(a1, STACK_OF(ASN1_STRING) * as));
NAMING_AUTHORITY * SAVEDS ASM LIB_NAMING_AUTHORITY_new(REG(a6, __IFACE_OR_BASE));
const ASN1_IA5STRING * SAVEDS ASM LIB_NAMING_AUTHORITY_get0_authorityURL(REG(a6, __IFACE_OR_BASE), REG(a0, const NAMING_AUTHORITY * n));
const GENERAL_NAME * SAVEDS ASM LIB_ADMISSION_SYNTAX_get0_admissionAuthority(REG(a6, __IFACE_OR_BASE), REG(a0, const ADMISSION_SYNTAX * as));
PROFESSION_INFO * SAVEDS ASM LIB_PROFESSION_INFO_new(REG(a6, __IFACE_OR_BASE));
ADMISSIONS * SAVEDS ASM LIB_ADMISSIONS_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_ADMISSION_SYNTAX_set0_admissionAuthority(REG(a6, __IFACE_OR_BASE), REG(a0, ADMISSION_SYNTAX * as), REG(a1, GENERAL_NAME * aa));
const STACK_OF(ASN1_OBJECT) * SAVEDS ASM LIB_PROFESSION_INFO_get0_professionOIDs(REG(a6, __IFACE_OR_BASE), REG(a0, const PROFESSION_INFO * pi));
const ASN1_ITEM * SAVEDS ASM LIB_PROFESSION_INFO_it(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_i2d_PROFESSION_INFO(REG(a6, __IFACE_OR_BASE), REG(a0, const PROFESSION_INFO * a), REG(a1, unsigned char ** out));
void SAVEDS ASM LIB_ADMISSIONS_set0_professionInfos(REG(a6, __IFACE_OR_BASE), REG(a0, ADMISSIONS * a), REG(a1, PROFESSION_INFOS * pi));
const NAMING_AUTHORITY * SAVEDS ASM LIB_PROFESSION_INFO_get0_namingAuthority(REG(a6, __IFACE_OR_BASE), REG(a0, const PROFESSION_INFO * pi));
void SAVEDS ASM LIB_PROFESSION_INFO_free(REG(a6, __IFACE_OR_BASE), REG(a0, PROFESSION_INFO * a));
void SAVEDS ASM LIB_PROFESSION_INFO_set0_addProfessionInfo(REG(a6, __IFACE_OR_BASE), REG(a0, PROFESSION_INFO * pi), REG(a1, ASN1_OCTET_STRING * aos));
void SAVEDS ASM LIB_PROFESSION_INFO_set0_registrationNumber(REG(a6, __IFACE_OR_BASE), REG(a0, PROFESSION_INFO * pi), REG(a1, ASN1_PRINTABLESTRING * rn));
void SAVEDS ASM LIB_ADMISSION_SYNTAX_set0_contentsOfAdmissions(REG(a6, __IFACE_OR_BASE), REG(a0, ADMISSION_SYNTAX * as), REG(a1, STACK_OF(ADMISSIONS) * a));
const ASN1_OBJECT * SAVEDS ASM LIB_NAMING_AUTHORITY_get0_authorityId(REG(a6, __IFACE_OR_BASE), REG(a0, const NAMING_AUTHORITY * n));
const ASN1_ITEM * SAVEDS ASM LIB_ADMISSION_SYNTAX_it(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_i2d_ADMISSION_SYNTAX(REG(a6, __IFACE_OR_BASE), REG(a0, const ADMISSION_SYNTAX * a), REG(a1, unsigned char ** out));
const ASN1_STRING * SAVEDS ASM LIB_NAMING_AUTHORITY_get0_authorityText(REG(a6, __IFACE_OR_BASE), REG(a0, const NAMING_AUTHORITY * n));
void SAVEDS ASM LIB_PROFESSION_INFO_set0_namingAuthority(REG(a6, __IFACE_OR_BASE), REG(a0, PROFESSION_INFO * pi), REG(a1, NAMING_AUTHORITY * na));
int SAVEDS ASM LIB_i2d_NAMING_AUTHORITY(REG(a6, __IFACE_OR_BASE), REG(a0, const NAMING_AUTHORITY * a), REG(a1, unsigned char ** out));
void SAVEDS ASM LIB_NAMING_AUTHORITY_free(REG(a6, __IFACE_OR_BASE), REG(a0, NAMING_AUTHORITY * a));
void SAVEDS ASM LIB_ADMISSIONS_set0_admissionAuthority(REG(a6, __IFACE_OR_BASE), REG(a0, ADMISSIONS * a), REG(a1, GENERAL_NAME * aa));
void SAVEDS ASM LIB_ADMISSIONS_free(REG(a6, __IFACE_OR_BASE), REG(a0, ADMISSIONS * a));
const ASN1_PRINTABLESTRING * SAVEDS ASM LIB_PROFESSION_INFO_get0_registrationNumber(REG(a6, __IFACE_OR_BASE), REG(a0, const PROFESSION_INFO * pi));
ADMISSIONS * SAVEDS ASM LIB_d2i_ADMISSIONS(REG(a6, __IFACE_OR_BASE), REG(a0, ADMISSIONS ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
int SAVEDS ASM LIB_i2d_ADMISSIONS(REG(a6, __IFACE_OR_BASE), REG(a0, const ADMISSIONS * a), REG(a1, unsigned char ** out));
const STACK_OF(ASN1_STRING) * SAVEDS ASM LIB_PROFESSION_INFO_get0_professionItems(REG(a6, __IFACE_OR_BASE), REG(a0, const PROFESSION_INFO * pi));
const GENERAL_NAME * SAVEDS ASM LIB_ADMISSIONS_get0_admissionAuthority(REG(a6, __IFACE_OR_BASE), REG(a0, const ADMISSIONS * a));
void SAVEDS ASM LIB_PROFESSION_INFO_set0_professionOIDs(REG(a6, __IFACE_OR_BASE), REG(a0, PROFESSION_INFO * pi), REG(a1, STACK_OF(ASN1_OBJECT) * po));
NAMING_AUTHORITY * SAVEDS ASM LIB_d2i_NAMING_AUTHORITY(REG(a6, __IFACE_OR_BASE), REG(a0, NAMING_AUTHORITY ** a), REG(a1, const unsigned char ** in), REG(d0, long len));
const ASN1_ITEM * SAVEDS ASM LIB_ADMISSIONS_it(REG(a6, __IFACE_OR_BASE));
const NAMING_AUTHORITY * SAVEDS ASM LIB_ADMISSIONS_get0_namingAuthority(REG(a6, __IFACE_OR_BASE), REG(a0, const ADMISSIONS * a));
void SAVEDS ASM LIB_NAMING_AUTHORITY_set0_authorityText(REG(a6, __IFACE_OR_BASE), REG(a0, NAMING_AUTHORITY * n), REG(a1, ASN1_STRING* namingAuthorityText));
void SAVEDS ASM LIB_ADMISSIONS_set0_namingAuthority(REG(a6, __IFACE_OR_BASE), REG(a0, ADMISSIONS * a), REG(a1, NAMING_AUTHORITY * na));
const PROFESSION_INFOS * SAVEDS ASM LIB_ADMISSIONS_get0_professionInfos(REG(a6, __IFACE_OR_BASE), REG(a0, const ADMISSIONS * a));
ADMISSION_SYNTAX * SAVEDS ASM LIB_ADMISSION_SYNTAX_new(REG(a6, __IFACE_OR_BASE));
const EVP_MD * SAVEDS ASM LIB_EVP_sha512_256(REG(a6, __IFACE_OR_BASE));
const EVP_MD * SAVEDS ASM LIB_EVP_sha512_224(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_OCSP_basic_sign_ctx(REG(a6, __IFACE_OR_BASE), REG(a0, OCSP_BASICRESP * brsp), REG(a1, X509 * signer), REG(a2, EVP_MD_CTX * ctx), REG(a3, STACK_OF(X509) * certs), REG(d0, unsigned long flags));
OSSL_STORE_SEARCH * SAVEDS ASM LIB_OSSL_STORE_SEARCH_by_alias(REG(a6, __IFACE_OR_BASE), REG(a0, const char * alias));
int SAVEDS ASM LIB_BIO_bind(REG(a6, __IFACE_OR_BASE), REG(d0, int sock), REG(a0, const BIO_ADDR * addr), REG(d1, int options));
int SAVEDS ASM LIB_OSSL_STORE_LOADER_set_expect(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_STORE_LOADER * loader), REG(a1, OSSL_STORE_expect_fn expect_function));
int SAVEDS ASM LIB_OSSL_STORE_expect(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_STORE_CTX * ctx), REG(d0, int expected_type));
OSSL_STORE_SEARCH * SAVEDS ASM LIB_OSSL_STORE_SEARCH_by_key_fingerprint(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_MD * digest), REG(a1, const unsigned char * bytes), REG(d0, size_t len));
const ASN1_INTEGER * SAVEDS ASM LIB_OSSL_STORE_SEARCH_get0_serial(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_STORE_SEARCH * criterion));
OSSL_STORE_SEARCH * SAVEDS ASM LIB_OSSL_STORE_SEARCH_by_name(REG(a6, __IFACE_OR_BASE), REG(a0, X509_NAME * name));
int SAVEDS ASM LIB_OSSL_STORE_supports_search(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_STORE_CTX * ctx), REG(d0, int search_type));
int SAVEDS ASM LIB_OSSL_STORE_find(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_STORE_CTX * ctx), REG(a1, const OSSL_STORE_SEARCH * search));
int SAVEDS ASM LIB_OSSL_STORE_SEARCH_get_type(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_STORE_SEARCH * criterion));
const unsigned char * SAVEDS ASM LIB_OSSL_STORE_SEARCH_get0_bytes(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_STORE_SEARCH * criterion), REG(a1, size_t * length));
const char * SAVEDS ASM LIB_OSSL_STORE_SEARCH_get0_string(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_STORE_SEARCH * criterion));
OSSL_STORE_SEARCH * SAVEDS ASM LIB_OSSL_STORE_SEARCH_by_issuer_serial(REG(a6, __IFACE_OR_BASE), REG(a0, X509_NAME * name), REG(a1, const ASN1_INTEGER * serial));
X509_NAME * SAVEDS ASM LIB_OSSL_STORE_SEARCH_get0_name(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_STORE_SEARCH * criterion));
const ASN1_OCTET_STRING * SAVEDS ASM LIB_X509_get0_authority_key_id(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * x));
int SAVEDS ASM LIB_OSSL_STORE_LOADER_set_find(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_STORE_LOADER * loader), REG(a1, OSSL_STORE_find_fn find_function));
void SAVEDS ASM LIB_OSSL_STORE_SEARCH_free(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_STORE_SEARCH * search));
const EVP_MD * SAVEDS ASM LIB_OSSL_STORE_SEARCH_get0_digest(REG(a6, __IFACE_OR_BASE), REG(a0, const OSSL_STORE_SEARCH * criterion));
EVP_PKEY * SAVEDS ASM LIB_EVP_PKEY_new_raw_private_key(REG(a6, __IFACE_OR_BASE), REG(d0, int type), REG(a0, ENGINE * e), REG(a1, const unsigned char * priv), REG(d1, size_t len));
EVP_PKEY * SAVEDS ASM LIB_EVP_PKEY_new_raw_public_key(REG(a6, __IFACE_OR_BASE), REG(d0, int type), REG(a0, ENGINE * e), REG(a1, const unsigned char * pub), REG(d1, size_t len));
EVP_PKEY * SAVEDS ASM LIB_EVP_PKEY_new_CMAC_key(REG(a6, __IFACE_OR_BASE), REG(a0, ENGINE * e), REG(a1, const unsigned char * priv), REG(d0, size_t len), REG(a2, const EVP_CIPHER * cipher));
void SAVEDS ASM LIB_EVP_PKEY_asn1_set_set_priv_key(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_ASN1_METHOD * ameth), REG(a1, int (*set_priv_key)(EVP_PKEY *pk, const unsigned char *priv, size_t len)));
void SAVEDS ASM LIB_EVP_PKEY_asn1_set_set_pub_key(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_ASN1_METHOD * ameth), REG(a1, int (*set_pub_key)(EVP_PKEY *pk, const unsigned char *pub, size_t len)));
unsigned int SAVEDS ASM LIB_X509_VERIFY_PARAM_get_hostflags(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_VERIFY_PARAM * param));
const BIGNUM * SAVEDS ASM LIB_DH_get0_p(REG(a6, __IFACE_OR_BASE), REG(a0, const DH * dh));
const BIGNUM * SAVEDS ASM LIB_DH_get0_q(REG(a6, __IFACE_OR_BASE), REG(a0, const DH * dh));
const BIGNUM * SAVEDS ASM LIB_DH_get0_g(REG(a6, __IFACE_OR_BASE), REG(a0, const DH * dh));
const BIGNUM * SAVEDS ASM LIB_DH_get0_priv_key(REG(a6, __IFACE_OR_BASE), REG(a0, const DH * dh));
const BIGNUM * SAVEDS ASM LIB_DH_get0_pub_key(REG(a6, __IFACE_OR_BASE), REG(a0, const DH * dh));
const BIGNUM * SAVEDS ASM LIB_DSA_get0_priv_key(REG(a6, __IFACE_OR_BASE), REG(a0, const DSA * d));
const BIGNUM * SAVEDS ASM LIB_DSA_get0_pub_key(REG(a6, __IFACE_OR_BASE), REG(a0, const DSA * d));
const BIGNUM * SAVEDS ASM LIB_DSA_get0_q(REG(a6, __IFACE_OR_BASE), REG(a0, const DSA * d));
const BIGNUM * SAVEDS ASM LIB_DSA_get0_p(REG(a6, __IFACE_OR_BASE), REG(a0, const DSA * d));
const BIGNUM * SAVEDS ASM LIB_DSA_get0_g(REG(a6, __IFACE_OR_BASE), REG(a0, const DSA * d));
const BIGNUM * SAVEDS ASM LIB_RSA_get0_dmp1(REG(a6, __IFACE_OR_BASE), REG(a0, const RSA * r));
const BIGNUM * SAVEDS ASM LIB_RSA_get0_d(REG(a6, __IFACE_OR_BASE), REG(a0, const RSA * d));
const BIGNUM * SAVEDS ASM LIB_RSA_get0_n(REG(a6, __IFACE_OR_BASE), REG(a0, const RSA * d));
const BIGNUM * SAVEDS ASM LIB_RSA_get0_dmq1(REG(a6, __IFACE_OR_BASE), REG(a0, const RSA * r));
const BIGNUM * SAVEDS ASM LIB_RSA_get0_e(REG(a6, __IFACE_OR_BASE), REG(a0, const RSA * d));
const BIGNUM * SAVEDS ASM LIB_RSA_get0_q(REG(a6, __IFACE_OR_BASE), REG(a0, const RSA * d));
const BIGNUM * SAVEDS ASM LIB_RSA_get0_p(REG(a6, __IFACE_OR_BASE), REG(a0, const RSA * d));
const BIGNUM * SAVEDS ASM LIB_RSA_get0_iqmp(REG(a6, __IFACE_OR_BASE), REG(a0, const RSA * r));
const BIGNUM * SAVEDS ASM LIB_ECDSA_SIG_get0_r(REG(a6, __IFACE_OR_BASE), REG(a0, const ECDSA_SIG * sig));
const BIGNUM * SAVEDS ASM LIB_ECDSA_SIG_get0_s(REG(a6, __IFACE_OR_BASE), REG(a0, const ECDSA_SIG * sig));
X509_LOOKUP_get_by_fingerprint_fn SAVEDS ASM LIB_X509_LOOKUP_meth_get_get_by_fingerprint(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_LOOKUP_METHOD * method));
X509_LOOKUP_METHOD * SAVEDS ASM LIB_X509_LOOKUP_meth_new(REG(a6, __IFACE_OR_BASE), REG(a0, const char * name));
int  SAVEDS ASM (*LIB_X509_LOOKUP_meth_get_init(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_LOOKUP_METHOD* method)))(X509_LOOKUP *ctx);
X509_LOOKUP_get_by_alias_fn SAVEDS ASM LIB_X509_LOOKUP_meth_get_get_by_alias(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_LOOKUP_METHOD * method));
int SAVEDS ASM LIB_X509_LOOKUP_meth_set_new_item(REG(a6, __IFACE_OR_BASE), REG(a0, X509_LOOKUP_METHOD * method), REG(a1, int (*new_item)(X509_LOOKUP *ctx)));
int SAVEDS ASM LIB_X509_LOOKUP_meth_set_shutdown(REG(a6, __IFACE_OR_BASE), REG(a0, X509_LOOKUP_METHOD * method), REG(a1, int (*__shutdown)(X509_LOOKUP *ctx)));
int  SAVEDS ASM (*LIB_X509_LOOKUP_meth_get_new_item(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_LOOKUP_METHOD* method)))(X509_LOOKUP *ctx);
int SAVEDS ASM LIB_X509_LOOKUP_meth_set_ctrl(REG(a6, __IFACE_OR_BASE), REG(a0, X509_LOOKUP_METHOD * method), REG(a1, X509_LOOKUP_ctrl_fn ctrl_fn));
int SAVEDS ASM LIB_X509_LOOKUP_meth_set_get_by_issuer_serial(REG(a6, __IFACE_OR_BASE), REG(a0, X509_LOOKUP_METHOD * method), REG(a1, X509_LOOKUP_get_by_issuer_serial_fn fn));
X509_STORE * SAVEDS ASM LIB_X509_LOOKUP_get_store(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_LOOKUP * ctx));
X509_LOOKUP_ctrl_fn SAVEDS ASM LIB_X509_LOOKUP_meth_get_ctrl(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_LOOKUP_METHOD * method));
int SAVEDS ASM LIB_X509_LOOKUP_meth_set_get_by_alias(REG(a6, __IFACE_OR_BASE), REG(a0, X509_LOOKUP_METHOD * method), REG(a1, X509_LOOKUP_get_by_alias_fn fn));
X509_LOOKUP_get_by_subject_fn SAVEDS ASM LIB_X509_LOOKUP_meth_get_get_by_subject(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_LOOKUP_METHOD * method));
void  SAVEDS ASM (*LIB_X509_LOOKUP_meth_get_free(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_LOOKUP_METHOD* method)))(X509_LOOKUP *ctx);
int SAVEDS ASM LIB_X509_LOOKUP_meth_set_get_by_subject(REG(a6, __IFACE_OR_BASE), REG(a0, X509_LOOKUP_METHOD * method), REG(a1, X509_LOOKUP_get_by_subject_fn fn));
int SAVEDS ASM LIB_X509_LOOKUP_meth_set_free(REG(a6, __IFACE_OR_BASE), REG(a0, X509_LOOKUP_METHOD * method), REG(a1, void (*free_fn)(X509_LOOKUP *ctx)));
int  SAVEDS ASM (*LIB_X509_LOOKUP_meth_get_shutdown(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_LOOKUP_METHOD* method)))(X509_LOOKUP *ctx);
int SAVEDS ASM LIB_X509_LOOKUP_set_method_data(REG(a6, __IFACE_OR_BASE), REG(a0, X509_LOOKUP * ctx), REG(a1, void * data));
void * SAVEDS ASM LIB_X509_LOOKUP_get_method_data(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_LOOKUP * ctx));
int SAVEDS ASM LIB_X509_LOOKUP_meth_set_get_by_fingerprint(REG(a6, __IFACE_OR_BASE), REG(a0, X509_LOOKUP_METHOD * method), REG(a1, X509_LOOKUP_get_by_fingerprint_fn fn));
void SAVEDS ASM LIB_X509_LOOKUP_meth_free(REG(a6, __IFACE_OR_BASE), REG(a0, X509_LOOKUP_METHOD * method));
int SAVEDS ASM LIB_X509_OBJECT_set1_X509(REG(a6, __IFACE_OR_BASE), REG(a0, X509_OBJECT * a), REG(a1, X509 * obj));
X509_LOOKUP_get_by_issuer_serial_fn SAVEDS ASM LIB_X509_LOOKUP_meth_get_get_by_issuer_serial(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_LOOKUP_METHOD * method));
int SAVEDS ASM LIB_X509_LOOKUP_meth_set_init(REG(a6, __IFACE_OR_BASE), REG(a0, X509_LOOKUP_METHOD * method), REG(a1, int (*init)(X509_LOOKUP *ctx)));
int SAVEDS ASM LIB_X509_OBJECT_set1_X509_CRL(REG(a6, __IFACE_OR_BASE), REG(a0, X509_OBJECT * a), REG(a1, X509_CRL * obj));
int SAVEDS ASM LIB_EVP_PKEY_get_raw_public_key(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_PKEY * pkey), REG(a1, unsigned char * pub), REG(a2, size_t * len));
int SAVEDS ASM LIB_EVP_PKEY_get_raw_private_key(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_PKEY * pkey), REG(a1, unsigned char * priv), REG(a2, size_t * len));
void SAVEDS ASM LIB_EVP_PKEY_asn1_set_get_priv_key(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_ASN1_METHOD * ameth), REG(a1, int (*get_priv_key)(const EVP_PKEY *pk, unsigned char *priv, size_t *len)));
void SAVEDS ASM LIB_EVP_PKEY_asn1_set_get_pub_key(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_ASN1_METHOD * ameth), REG(a1, int (*get_pub_key)(const EVP_PKEY *pk, unsigned char *pub, size_t *len)));
void SAVEDS ASM LIB_RAND_keep_random_devices_open(REG(a6, __IFACE_OR_BASE), REG(d0, int keep));
int SAVEDS ASM LIB_EC_POINT_set_compressed_coordinates(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_GROUP * group), REG(a1, EC_POINT * p), REG(a2, const BIGNUM * x), REG(d0, int y_bit), REG(a3, BN_CTX * ctx));
int SAVEDS ASM LIB_EC_POINT_set_affine_coordinates(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_GROUP * group), REG(a1, EC_POINT * p), REG(a2, const BIGNUM * x), REG(a3, const BIGNUM * y), REG(d0, BN_CTX * ctx));
int SAVEDS ASM LIB_EC_POINT_get_affine_coordinates(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_GROUP * group), REG(a1, const EC_POINT * p), REG(a2, BIGNUM * x), REG(a3, BIGNUM * y), REG(d0, BN_CTX * ctx));
int SAVEDS ASM LIB_EC_GROUP_set_curve(REG(a6, __IFACE_OR_BASE), REG(a0, EC_GROUP * group), REG(a1, const BIGNUM * p), REG(a2, const BIGNUM * a), REG(a3, const BIGNUM * b), REG(d0, BN_CTX * ctx));
int SAVEDS ASM LIB_EC_GROUP_get_curve(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_GROUP * group), REG(a1, BIGNUM * p), REG(a2, BIGNUM * a), REG(a3, BIGNUM * b), REG(d0, BN_CTX * ctx));
const X509_ALGOR * SAVEDS ASM LIB_OCSP_resp_get0_tbs_sigalg(REG(a6, __IFACE_OR_BASE), REG(a0, const OCSP_BASICRESP * bs));
const OCSP_RESPDATA * SAVEDS ASM LIB_OCSP_resp_get0_respdata(REG(a6, __IFACE_OR_BASE), REG(a0, const OCSP_BASICRESP * bs));
void SAVEDS ASM LIB_EVP_MD_CTX_set_pkey_ctx(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_MD_CTX * ctx), REG(a1, EVP_PKEY_CTX * pctx));
void SAVEDS ASM LIB_EVP_PKEY_meth_set_digest_custom(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_METHOD * pmeth), REG(a1, int (*digest_custom)(EVP_PKEY_CTX *ctx, EVP_MD_CTX *mctx)));
void SAVEDS ASM LIB_EVP_PKEY_meth_get_digest_custom(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_PKEY_METHOD * pmeth), REG(a1, int (**pdigest_custom)(EVP_PKEY_CTX *ctx, EVP_MD_CTX *mctx)));
const char * SAVEDS ASM LIB_OPENSSL_DIR_read(REG(a6, __IFACE_OR_BASE), REG(a0, OPENSSL_DIR_CTX ** ctx), REG(a1, const char * directory));
int SAVEDS ASM LIB_OPENSSL_DIR_end(REG(a6, __IFACE_OR_BASE), REG(a0, OPENSSL_DIR_CTX ** ctx));
ENGINE * SAVEDS ASM LIB_EVP_PKEY_get0_engine(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_PKEY * pkey));
const ASN1_INTEGER * SAVEDS ASM LIB_X509_get0_authority_serial(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * x));
const GENERAL_NAMES * SAVEDS ASM LIB_X509_get0_authority_issuer(REG(a6, __IFACE_OR_BASE), REG(a0, X509 * x));
void SAVEDS ASM LIB_EVP_PKEY_meth_set_digestsign(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_METHOD * pmeth), REG(a1, int (*digestsign)(EVP_MD_CTX *ctx, unsigned char *sig, size_t *siglen, const unsigned char *tbs, size_t tbslen)));
void SAVEDS ASM LIB_EVP_PKEY_meth_set_digestverify(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY_METHOD * pmeth), REG(a1, int (*digestverify)(EVP_MD_CTX *ctx, const unsigned char *sig, size_t siglen, const unsigned char *tbs, size_t tbslen)));
void SAVEDS ASM LIB_EVP_PKEY_meth_get_digestverify(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_PKEY_METHOD * pmeth), REG(a1, int (**digestverify)(EVP_MD_CTX *ctx, const unsigned char *sig, size_t siglen, const unsigned char *tbs, size_t tbslen)));
void SAVEDS ASM LIB_EVP_PKEY_meth_get_digestsign(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_PKEY_METHOD * pmeth), REG(a1, int (**digestsign)(EVP_MD_CTX *ctx, unsigned char *sig, size_t *siglen, const unsigned char *tbs, size_t tbslen)));
const RSA_PSS_PARAMS * SAVEDS ASM LIB_RSA_get0_pss_params(REG(a6, __IFACE_OR_BASE), REG(a0, const RSA * r));
int SAVEDS ASM LIB_X509_ALGOR_copy(REG(a6, __IFACE_OR_BASE), REG(a0, X509_ALGOR * dest), REG(a1, const X509_ALGOR * src));
void SAVEDS ASM LIB_X509_REQ_set0_signature(REG(a6, __IFACE_OR_BASE), REG(a0, X509_REQ * req), REG(a1, ASN1_BIT_STRING * psig));
int SAVEDS ASM LIB_X509_REQ_set1_signature_algo(REG(a6, __IFACE_OR_BASE), REG(a0, X509_REQ * req), REG(a1, X509_ALGOR * palg));
int SAVEDS ASM LIB_EC_KEY_decoded_from_explicit_params(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_KEY * key));
int SAVEDS ASM LIB_RSA_X931_derive_ex_amiga_1(REG(a6, __IFACE_OR_BASE), REG(a0, RSA * rsa), REG(a1, BIGNUM * p1), REG(a2, BIGNUM * p2), REG(d0, BIGNUM * q1), REG(d1, BIGNUM * q2), REG(d2, const BIGNUM * Xp1), REG(a3, void * moreargs));
void * SAVEDS ASM LIB_RSA_X931_derive_ex_amiga_2(REG(a6, __IFACE_OR_BASE), REG(a0, const BIGNUM * Xp2), REG(a1, const BIGNUM * Xp), REG(a2, const BIGNUM * Xq1), REG(d0, const BIGNUM * Xq2), REG(d1, const BIGNUM * Xq), REG(d2, const BIGNUM * e), REG(a3, BN_GENCB * cb));
int SAVEDS ASM LIB_SSL_CTX_set_async_callback(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(a1, SSL_async_callback_fn callback));
int SAVEDS ASM LIB_SSL_CTX_set_async_callback_arg(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(a1, void * arg));
int SAVEDS ASM LIB_SSL_set_async_callback(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s), REG(a1, SSL_async_callback_fn callback));
int SAVEDS ASM LIB_SSL_set_async_callback_arg(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s), REG(a1, void * arg));
int SAVEDS ASM LIB_SSL_get_async_status(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s), REG(a1, int * status));
int SAVEDS ASM LIB_SSL_sendfile(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s), REG(d0, int fd), REG(d1, off_t offset), REG(d2, size_t size), REG(d3, int flags));
const char * SAVEDS ASM LIB_OSSL_default_cipher_list(REG(a6, __IFACE_OR_BASE));
const char * SAVEDS ASM LIB_OSSL_default_ciphersuites(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_SSL_add_store_cert_subjects_to_stack(REG(a6, __IFACE_OR_BASE), REG(a0, STACK_OF(X509_NAME) * stackCAs), REG(a1, const char * uri));
int SAVEDS ASM LIB_SSL_CTX_set_default_verify_store(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx));
int SAVEDS ASM LIB_SSL_CTX_load_verify_file(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(a1, const char * CAfile));
int SAVEDS ASM LIB_SSL_CTX_load_verify_dir(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(a1, const char * CApath));
int SAVEDS ASM LIB_SSL_CTX_load_verify_store(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(a1, const char * CAstore));
int SAVEDS ASM LIB_SSL_CTX_set_tlsext_ticket_key_evp_cb(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(a1, int (*fp)(SSL *, unsigned char *, unsigned char *, EVP_CIPHER_CTX *, EVP_MAC_CTX *, int)));
SSL_CTX * SAVEDS ASM LIB_SSL_CTX_new_ex(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_LIB_CTX * libctx), REG(a1, const char * propq), REG(a2, const SSL_METHOD * meth));
int SAVEDS ASM LIB_SSL_new_session_ticket(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s));
X509 * SAVEDS ASM LIB_SSL_get0_peer_certificate(REG(a6, __IFACE_OR_BASE), REG(a0, const SSL * s));
STACK_OF(X509_NAME) * SAVEDS ASM LIB_SSL_load_client_CA_file_ex(REG(a6, __IFACE_OR_BASE), REG(a0, const char * file), REG(a1, OSSL_LIB_CTX * libctx), REG(a2, const char * propq));
int SAVEDS ASM LIB_SSL_set0_tmp_dh_pkey(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s), REG(a1, EVP_PKEY * dhpkey));
int SAVEDS ASM LIB_SSL_CTX_set0_tmp_dh_pkey(REG(a6, __IFACE_OR_BASE), REG(a0, SSL_CTX * ctx), REG(a1, EVP_PKEY * dhpkey));
const char * SAVEDS ASM LIB_SSL_group_to_name(REG(a6, __IFACE_OR_BASE), REG(a0, SSL * s), REG(d0, int id));
X509_CRL * SAVEDS ASM LIB_X509_CRL_load_http(REG(a6, __IFACE_OR_BASE), REG(a0, const char * url), REG(a1, BIO * bio), REG(a2, BIO * rbio), REG(d0, int timeout));
int SAVEDS ASM LIB_OSSL_HTTP_parse_url(REG(a6, __IFACE_OR_BASE), REG(a0, const char * url), REG(a1, int * pssl), REG(a2, char ** puser), REG(a3, char ** phost), REG(d0, char ** pport), REG(d1, int * pport_num), REG(d2, char ** ppath), REG(d3, char ** pquery), REG(d4, char ** pfrag));
BIO * SAVEDS ASM LIB_OSSL_HTTP_REQ_CTX_exchange(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_HTTP_REQ_CTX * rctx));
OSSL_HTTP_REQ_CTX * SAVEDS ASM LIB_OSSL_HTTP_REQ_CTX_new(REG(a6, __IFACE_OR_BASE), REG(a0, BIO * wbio), REG(a1, BIO * rbio), REG(d0, int buf_size));
X509 * SAVEDS ASM LIB_X509_load_http(REG(a6, __IFACE_OR_BASE), REG(a0, const char * url), REG(a1, BIO * bio), REG(a2, BIO * rbio), REG(d0, int timeout));
unsigned long SAVEDS ASM LIB_X509_NAME_hash_ex(REG(a6, __IFACE_OR_BASE), REG(a0, const X509_NAME * x), REG(a1, OSSL_LIB_CTX * libctx), REG(a2, const char * propq), REG(a3, int * ok));
int SAVEDS ASM LIB_OSSL_HTTP_REQ_CTX_set_request_line(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_HTTP_REQ_CTX * rctx), REG(d0, int method_POST), REG(a1, const char * server), REG(a2, const char * port), REG(a3, const char * path));
int SAVEDS ASM LIB_OSSL_HTTP_REQ_CTX_set1_req(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_HTTP_REQ_CTX * rctx), REG(a1, const char * content_type), REG(a2, const ASN1_ITEM * it), REG(a3, const ASN1_VALUE * req));
EVP_MAC_CTX * SAVEDS ASM LIB_EVP_MAC_CTX_new(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_MAC * mac));
void SAVEDS ASM LIB_EVP_MAC_CTX_free(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_MAC_CTX * ctx));
EVP_MAC_CTX * SAVEDS ASM LIB_EVP_MAC_CTX_dup(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_MAC_CTX * src));
EVP_MAC * SAVEDS ASM LIB_EVP_MAC_CTX_get0_mac(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_MAC_CTX * ctx));
size_t SAVEDS ASM LIB_EVP_MAC_CTX_get_mac_size(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_MAC_CTX * ctx));
unsigned char * SAVEDS ASM LIB_EVP_Q_mac(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_LIB_CTX * libctx), REG(a1, const char * name), REG(a2, const char * propq), REG(a3, const char * subalg), REG(d0, const OSSL_PARAM * params), REG(d1, const void * key), REG(d2, size_t keylen), REG(d3, const unsigned char * data), REG(d4, size_t datalen), REG(d5, unsigned char * out), REG(d6, size_t outsize), REG(d7, size_t * outlen));
int SAVEDS ASM LIB_EVP_MAC_init(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_MAC_CTX * ctx), REG(a1, const unsigned char * key), REG(d0, size_t keylen), REG(a2, const OSSL_PARAM * params));
int SAVEDS ASM LIB_EVP_MAC_update(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_MAC_CTX * ctx), REG(a1, const unsigned char * data), REG(d0, size_t datalen));
int SAVEDS ASM LIB_EVP_MAC_final(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_MAC_CTX * ctx), REG(a1, unsigned char * out), REG(a2, size_t * outl), REG(d0, size_t outsize));
int SAVEDS ASM LIB_EVP_MAC_finalXOF(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_MAC_CTX * ctx), REG(a1, unsigned char * out), REG(d0, size_t outsize));
const char * SAVEDS ASM LIB_OSSL_EC_curve_nid2name(REG(a6, __IFACE_OR_BASE), REG(d0, int nid));
int SAVEDS ASM LIB_EVP_PKEY_digestsign_supports_digest(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_PKEY * pkey), REG(a1, OSSL_LIB_CTX * libctx), REG(a2, const char * name), REG(a3, const char * propq));
int SAVEDS ASM LIB_SRP_VBASE_add0_user(REG(a6, __IFACE_OR_BASE), REG(a0, SRP_VBASE * vb), REG(a1, SRP_user_pwd * user_pwd));
SRP_user_pwd * SAVEDS ASM LIB_SRP_user_pwd_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_SRP_user_pwd_set_gN(REG(a6, __IFACE_OR_BASE), REG(a0, SRP_user_pwd * user_pwd), REG(a1, const BIGNUM * g), REG(a2, const BIGNUM * N));
int SAVEDS ASM LIB_SRP_user_pwd_set1_ids(REG(a6, __IFACE_OR_BASE), REG(a0, SRP_user_pwd * user_pwd), REG(a1, const char * id), REG(a2, const char * info));
int SAVEDS ASM LIB_SRP_user_pwd_set0_sv(REG(a6, __IFACE_OR_BASE), REG(a0, SRP_user_pwd * user_pwd), REG(a1, BIGNUM * s), REG(a2, BIGNUM * v));
unsigned int SAVEDS ASM LIB_OPENSSL_version_major(REG(a6, __IFACE_OR_BASE));
unsigned int SAVEDS ASM LIB_OPENSSL_version_minor(REG(a6, __IFACE_OR_BASE));
unsigned int SAVEDS ASM LIB_OPENSSL_version_patch(REG(a6, __IFACE_OR_BASE));
const char * SAVEDS ASM LIB_OPENSSL_version_pre_release(REG(a6, __IFACE_OR_BASE));
const char * SAVEDS ASM LIB_OPENSSL_version_build_metadata(REG(a6, __IFACE_OR_BASE));
int SAVEDS ASM LIB_ASYNC_WAIT_CTX_get_callback(REG(a6, __IFACE_OR_BASE), REG(a0, ASYNC_WAIT_CTX * ctx), REG(a1, ASYNC_callback_fn * callback), REG(a2, void ** callback_arg));
int SAVEDS ASM LIB_ASYNC_WAIT_CTX_set_callback(REG(a6, __IFACE_OR_BASE), REG(a0, ASYNC_WAIT_CTX * ctx), REG(a1, ASYNC_callback_fn callback), REG(a2, void * callback_arg));
int SAVEDS ASM LIB_ASYNC_WAIT_CTX_set_status(REG(a6, __IFACE_OR_BASE), REG(a0, ASYNC_WAIT_CTX * ctx), REG(d0, int status));
int SAVEDS ASM LIB_ASYNC_WAIT_CTX_get_status(REG(a6, __IFACE_OR_BASE), REG(a0, ASYNC_WAIT_CTX * ctx));
void SAVEDS ASM LIB_EVP_KDF_CTX_free(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_KDF_CTX * ctx));
void SAVEDS ASM LIB_EVP_KDF_CTX_reset(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_KDF_CTX * ctx));
size_t SAVEDS ASM LIB_EVP_KDF_CTX_get_kdf_size(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_KDF_CTX * ctx));
int SAVEDS ASM LIB_EVP_KDF_derive(REG(a6, __IFACE_OR_BASE), REG(a0, EVP_KDF_CTX * ctx), REG(a1, unsigned char * key), REG(d0, size_t keylen), REG(a2, const OSSL_PARAM * params));
const char * SAVEDS ASM LIB_EVP_KDF_get0_name(REG(a6, __IFACE_OR_BASE), REG(a0, const EVP_KDF * kdf));
const BIGNUM * SAVEDS ASM LIB_EC_GROUP_get0_field(REG(a6, __IFACE_OR_BASE), REG(a0, const EC_GROUP * group));
int SAVEDS ASM LIB_CRYPTO_alloc_ex_data(REG(a6, __IFACE_OR_BASE), REG(d0, int class_index), REG(a0, void * obj), REG(a1, CRYPTO_EX_DATA * ad), REG(d1, int idx));
OSSL_LIB_CTX * SAVEDS ASM LIB_OSSL_LIB_CTX_new(REG(a6, __IFACE_OR_BASE));
void SAVEDS ASM LIB_OSSL_LIB_CTX_free(REG(a6, __IFACE_OR_BASE), REG(a0, OSSL_LIB_CTX * a));
void SAVEDS ASM LIB_OPENSSL_LH_flush(REG(a6, __IFACE_OR_BASE), REG(a0, OPENSSL_LHASH * lh));
BIGNUM * SAVEDS ASM LIB_BN_native2bn(REG(a6, __IFACE_OR_BASE), REG(a0, const unsigned char * s), REG(d0, int len), REG(a1, BIGNUM * ret));
int SAVEDS ASM LIB_BN_bn2nativepad(REG(a6, __IFACE_OR_BASE), REG(a0, const BIGNUM * a), REG(a1, unsigned char * to), REG(d0, int tolen));
int SAVEDS ASM LIB_OSSL_trace_get_category_num(REG(a6, __IFACE_OR_BASE), REG(a0, const char * name));
const char * SAVEDS ASM LIB_OSSL_trace_get_category_name(REG(a6, __IFACE_OR_BASE), REG(d0, int num));
int SAVEDS ASM LIB_OSSL_trace_set_channel(REG(a6, __IFACE_OR_BASE), REG(d0, int category), REG(a0, BIO* channel));
int SAVEDS ASM LIB_OSSL_trace_set_prefix(REG(a6, __IFACE_OR_BASE), REG(d0, int category), REG(a0, const char * prefix));
int SAVEDS ASM LIB_OSSL_trace_set_suffix(REG(a6, __IFACE_OR_BASE), REG(d0, int category), REG(a0, const char * suffix));
int SAVEDS ASM LIB_OSSL_trace_set_callback(REG(a6, __IFACE_OR_BASE), REG(d0, int category), REG(a0, OSSL_trace_cb callback), REG(a1, void * data));

#if defined(SDI_LIB_H)
  #define SDI_LIBVECTOR \
    LFUNC_FAS(InternalInitAmiSSL) \
    LFUNC_FA_(InitAmiSSLA) \
    LFUNC_VA_(InitAmiSSL) \
    LFUNC_FA_(CleanupAmiSSLA) \
    LFUNC_VA_(CleanupAmiSSL) \
    LFUNC_FA_(UNIMPLEMENTED) /* IsCipherAvailable */ \
    LFUNC_FA_(UNIMPLEMENTED) /* Reserved1 */ \
    LFUNC_FA_(UNIMPLEMENTED) /* Reserved2 */ \
    LFUNC_FA_(UNIMPLEMENTED) /* Reserved3 */ \
    LFUNC_FA_(UNIMPLEMENTED) /* Reserved4 */ \
    LFUNC_FA_(UNIMPLEMENTED) /* Reserved5 */ \
    LFUNC_FA_(UNIMPLEMENTED) /* Reserved6 */ \
    LFUNC_FA_(UNIMPLEMENTED) /* Reserved7 */ \
    LFUNC_FA_(UNIMPLEMENTED) /* Reserved8 */ \
    LFUNC_FA_(ASN1_TYPE_new) \
    LFUNC_FA_(ASN1_TYPE_free) \
    LFUNC_FA_(d2i_ASN1_TYPE) \
    LFUNC_FA_(i2d_ASN1_TYPE) \
    LFUNC_FA_(ASN1_ANY_it) \
    LFUNC_FA_(ASN1_TYPE_get) \
    LFUNC_FA_(ASN1_TYPE_set) \
    LFUNC_FA_(ASN1_OBJECT_new) \
    LFUNC_FA_(ASN1_OBJECT_free) \
    LFUNC_FA_(i2d_ASN1_OBJECT) \
    LFUNC_FA_(UNIMPLEMENTED) /* c2i_ASN1_OBJECT */ \
    LFUNC_FA_(d2i_ASN1_OBJECT) \
    LFUNC_FA_(ASN1_OBJECT_it) \
    LFUNC_FA_(ASN1_STRING_new) \
    LFUNC_FA_(ASN1_STRING_free) \
    LFUNC_FA_(ASN1_STRING_dup) \
    LFUNC_FA_(ASN1_STRING_type_new) \
    LFUNC_FA_(ASN1_STRING_cmp) \
    LFUNC_FA_(ASN1_STRING_set) \
    LFUNC_FA_(ASN1_STRING_length) \
    LFUNC_FA_(ASN1_STRING_length_set) \
    LFUNC_FA_(ASN1_STRING_type) \
    LFUNC_FA_(ASN1_STRING_data) \
    LFUNC_FA_(ASN1_BIT_STRING_new) \
    LFUNC_FA_(ASN1_BIT_STRING_free) \
    LFUNC_FA_(d2i_ASN1_BIT_STRING) \
    LFUNC_FA_(i2d_ASN1_BIT_STRING) \
    LFUNC_FA_(ASN1_BIT_STRING_it) \
    LFUNC_FA_(UNIMPLEMENTED) /* i2c_ASN1_BIT_STRING */ \
    LFUNC_FA_(UNIMPLEMENTED) /* c2i_ASN1_BIT_STRING */ \
    LFUNC_FA_(ASN1_BIT_STRING_set) \
    LFUNC_FA_(ASN1_BIT_STRING_set_bit) \
    LFUNC_FA_(ASN1_BIT_STRING_get_bit) \
    LFUNC_FA_(ASN1_BIT_STRING_name_print) \
    LFUNC_FA_(ASN1_BIT_STRING_num_asc) \
    LFUNC_FA_(ASN1_BIT_STRING_set_asc) \
    LFUNC_FA_(UNIMPLEMENTED) /* i2d_ASN1_BOOLEAN */ \
    LFUNC_FA_(UNIMPLEMENTED) /* d2i_ASN1_BOOLEAN */ \
    LFUNC_FA_(ASN1_INTEGER_new) \
    LFUNC_FA_(ASN1_INTEGER_free) \
    LFUNC_FA_(d2i_ASN1_INTEGER) \
    LFUNC_FA_(i2d_ASN1_INTEGER) \
    LFUNC_FA_(ASN1_INTEGER_it) \
    LFUNC_FA_(UNIMPLEMENTED) /* i2c_ASN1_INTEGER */ \
    LFUNC_FA_(UNIMPLEMENTED) /* c2i_ASN1_INTEGER */ \
    LFUNC_FA_(d2i_ASN1_UINTEGER) \
    LFUNC_FA_(ASN1_INTEGER_dup) \
    LFUNC_FA_(ASN1_INTEGER_cmp) \
    LFUNC_FA_(ASN1_ENUMERATED_new) \
    LFUNC_FA_(ASN1_ENUMERATED_free) \
    LFUNC_FA_(d2i_ASN1_ENUMERATED) \
    LFUNC_FA_(i2d_ASN1_ENUMERATED) \
    LFUNC_FA_(ASN1_ENUMERATED_it) \
    LFUNC_FA_(ASN1_UTCTIME_check) \
    LFUNC_FA_(ASN1_UTCTIME_set) \
    LFUNC_FA_(ASN1_UTCTIME_set_string) \
    LFUNC_FA_(ASN1_UTCTIME_cmp_time_t) \
    LFUNC_FA_(ASN1_GENERALIZEDTIME_check) \
    LFUNC_FA_(ASN1_GENERALIZEDTIME_set) \
    LFUNC_FA_(ASN1_GENERALIZEDTIME_set_string) \
    LFUNC_FA_(ASN1_OCTET_STRING_new) \
    LFUNC_FA_(ASN1_OCTET_STRING_free) \
    LFUNC_FA_(d2i_ASN1_OCTET_STRING) \
    LFUNC_FA_(i2d_ASN1_OCTET_STRING) \
    LFUNC_FA_(ASN1_OCTET_STRING_it) \
    LFUNC_FA_(ASN1_OCTET_STRING_dup) \
    LFUNC_FA_(ASN1_OCTET_STRING_cmp) \
    LFUNC_FA_(ASN1_OCTET_STRING_set) \
    LFUNC_FA_(ASN1_VISIBLESTRING_new) \
    LFUNC_FA_(ASN1_VISIBLESTRING_free) \
    LFUNC_FA_(d2i_ASN1_VISIBLESTRING) \
    LFUNC_FA_(i2d_ASN1_VISIBLESTRING) \
    LFUNC_FA_(ASN1_VISIBLESTRING_it) \
    LFUNC_FA_(ASN1_UNIVERSALSTRING_new) \
    LFUNC_FA_(ASN1_UNIVERSALSTRING_free) \
    LFUNC_FA_(d2i_ASN1_UNIVERSALSTRING) \
    LFUNC_FA_(i2d_ASN1_UNIVERSALSTRING) \
    LFUNC_FA_(ASN1_UNIVERSALSTRING_it) \
    LFUNC_FA_(ASN1_UTF8STRING_new) \
    LFUNC_FA_(ASN1_UTF8STRING_free) \
    LFUNC_FA_(d2i_ASN1_UTF8STRING) \
    LFUNC_FA_(i2d_ASN1_UTF8STRING) \
    LFUNC_FA_(ASN1_UTF8STRING_it) \
    LFUNC_FA_(ASN1_NULL_new) \
    LFUNC_FA_(ASN1_NULL_free) \
    LFUNC_FA_(d2i_ASN1_NULL) \
    LFUNC_FA_(i2d_ASN1_NULL) \
    LFUNC_FA_(ASN1_NULL_it) \
    LFUNC_FA_(ASN1_BMPSTRING_new) \
    LFUNC_FA_(ASN1_BMPSTRING_free) \
    LFUNC_FA_(d2i_ASN1_BMPSTRING) \
    LFUNC_FA_(i2d_ASN1_BMPSTRING) \
    LFUNC_FA_(ASN1_BMPSTRING_it) \
    LFUNC_FA_(UTF8_getc) \
    LFUNC_FA_(UTF8_putc) \
    LFUNC_FA_(ASN1_PRINTABLE_new) \
    LFUNC_FA_(ASN1_PRINTABLE_free) \
    LFUNC_FA_(d2i_ASN1_PRINTABLE) \
    LFUNC_FA_(i2d_ASN1_PRINTABLE) \
    LFUNC_FA_(ASN1_PRINTABLE_it) \
    LFUNC_FA_(DIRECTORYSTRING_new) \
    LFUNC_FA_(DIRECTORYSTRING_free) \
    LFUNC_FA_(d2i_DIRECTORYSTRING) \
    LFUNC_FA_(i2d_DIRECTORYSTRING) \
    LFUNC_FA_(DIRECTORYSTRING_it) \
    LFUNC_FA_(DISPLAYTEXT_new) \
    LFUNC_FA_(DISPLAYTEXT_free) \
    LFUNC_FA_(d2i_DISPLAYTEXT) \
    LFUNC_FA_(i2d_DISPLAYTEXT) \
    LFUNC_FA_(DISPLAYTEXT_it) \
    LFUNC_FA_(ASN1_PRINTABLESTRING_new) \
    LFUNC_FA_(ASN1_PRINTABLESTRING_free) \
    LFUNC_FA_(d2i_ASN1_PRINTABLESTRING) \
    LFUNC_FA_(i2d_ASN1_PRINTABLESTRING) \
    LFUNC_FA_(ASN1_PRINTABLESTRING_it) \
    LFUNC_FA_(ASN1_T61STRING_new) \
    LFUNC_FA_(ASN1_T61STRING_free) \
    LFUNC_FA_(d2i_ASN1_T61STRING) \
    LFUNC_FA_(i2d_ASN1_T61STRING) \
    LFUNC_FA_(ASN1_T61STRING_it) \
    LFUNC_FA_(ASN1_IA5STRING_new) \
    LFUNC_FA_(ASN1_IA5STRING_free) \
    LFUNC_FA_(d2i_ASN1_IA5STRING) \
    LFUNC_FA_(i2d_ASN1_IA5STRING) \
    LFUNC_FA_(ASN1_IA5STRING_it) \
    LFUNC_FA_(ASN1_GENERALSTRING_new) \
    LFUNC_FA_(ASN1_GENERALSTRING_free) \
    LFUNC_FA_(d2i_ASN1_GENERALSTRING) \
    LFUNC_FA_(i2d_ASN1_GENERALSTRING) \
    LFUNC_FA_(ASN1_GENERALSTRING_it) \
    LFUNC_FA_(ASN1_UTCTIME_new) \
    LFUNC_FA_(ASN1_UTCTIME_free) \
    LFUNC_FA_(d2i_ASN1_UTCTIME) \
    LFUNC_FA_(i2d_ASN1_UTCTIME) \
    LFUNC_FA_(ASN1_UTCTIME_it) \
    LFUNC_FA_(ASN1_GENERALIZEDTIME_new) \
    LFUNC_FA_(ASN1_GENERALIZEDTIME_free) \
    LFUNC_FA_(d2i_ASN1_GENERALIZEDTIME) \
    LFUNC_FA_(i2d_ASN1_GENERALIZEDTIME) \
    LFUNC_FA_(ASN1_GENERALIZEDTIME_it) \
    LFUNC_FA_(ASN1_TIME_new) \
    LFUNC_FA_(ASN1_TIME_free) \
    LFUNC_FA_(d2i_ASN1_TIME) \
    LFUNC_FA_(i2d_ASN1_TIME) \
    LFUNC_FA_(ASN1_TIME_it) \
    LFUNC_FA_(ASN1_TIME_set) \
    LFUNC_FA_(ASN1_TIME_check) \
    LFUNC_FA_(ASN1_TIME_to_generalizedtime) \
    LFUNC_FA_(UNIMPLEMENTED) /* i2d_ASN1_SET */ \
    LFUNC_FA_(UNIMPLEMENTED) /* d2i_ASN1_SET */ \
    LFUNC_FA_(i2a_ASN1_INTEGER) \
    LFUNC_FA_(a2i_ASN1_INTEGER) \
    LFUNC_FA_(i2a_ASN1_ENUMERATED) \
    LFUNC_FA_(a2i_ASN1_ENUMERATED) \
    LFUNC_FA_(i2a_ASN1_OBJECT) \
    LFUNC_FA_(a2i_ASN1_STRING) \
    LFUNC_FA_(i2a_ASN1_STRING) \
    LFUNC_FA_(i2t_ASN1_OBJECT) \
    LFUNC_FA_(a2d_ASN1_OBJECT) \
    LFUNC_FA_(ASN1_OBJECT_create) \
    LFUNC_FA_(ASN1_INTEGER_set) \
    LFUNC_FA_(ASN1_INTEGER_get) \
    LFUNC_FA_(BN_to_ASN1_INTEGER) \
    LFUNC_FA_(ASN1_INTEGER_to_BN) \
    LFUNC_FA_(ASN1_ENUMERATED_set) \
    LFUNC_FA_(ASN1_ENUMERATED_get) \
    LFUNC_FA_(BN_to_ASN1_ENUMERATED) \
    LFUNC_FA_(ASN1_ENUMERATED_to_BN) \
    LFUNC_FA_(ASN1_PRINTABLE_type) \
    LFUNC_FA_(UNIMPLEMENTED) /* i2d_ASN1_bytes */ \
    LFUNC_FA_(UNIMPLEMENTED) /* d2i_ASN1_bytes */ \
    LFUNC_FA_(ASN1_tag2bit) \
    LFUNC_FA_(UNIMPLEMENTED) /* d2i_ASN1_type_bytes */ \
    LFUNC_FA_(UNIMPLEMENTED) /* asn1_Finish */ \
    LFUNC_FA_(ASN1_get_object) \
    LFUNC_FA_(ASN1_check_infinite_end) \
    LFUNC_FA_(ASN1_put_object) \
    LFUNC_FA_(ASN1_object_size) \
    LFUNC_FA_(ASN1_dup) \
    LFUNC_FA_(ASN1_item_dup) \
    LFUNC_FA_(ASN1_STRING_to_UTF8) \
    LFUNC_FA_(ASN1_d2i_bio) \
    LFUNC_FA_(ASN1_item_d2i_bio) \
    LFUNC_FA_(ASN1_i2d_bio) \
    LFUNC_FA_(ASN1_item_i2d_bio) \
    LFUNC_FA_(ASN1_UTCTIME_print) \
    LFUNC_FA_(ASN1_GENERALIZEDTIME_print) \
    LFUNC_FA_(ASN1_TIME_print) \
    LFUNC_FA_(ASN1_STRING_print) \
    LFUNC_FA_(ASN1_STRING_print_ex) \
    LFUNC_FA_(ASN1_parse) \
    LFUNC_FA_(ASN1_parse_dump) \
    LFUNC_FA_(ASN1_tag2str) \
    LFUNC_FA_(UNIMPLEMENTED) /* i2d_ASN1_HEADER */ \
    LFUNC_FA_(UNIMPLEMENTED) /* d2i_ASN1_HEADER */ \
    LFUNC_FA_(UNIMPLEMENTED) /* ASN1_HEADER_new */ \
    LFUNC_FA_(UNIMPLEMENTED) /* ASN1_HEADER_free */ \
    LFUNC_FA_(ASN1_UNIVERSALSTRING_to_string) \
    LFUNC_FA_(UNIMPLEMENTED) /* X509_asn1_meth */ \
    LFUNC_FA_(UNIMPLEMENTED) /* RSAPrivateKey_asn1_meth */ \
    LFUNC_FA_(UNIMPLEMENTED) /* ASN1_IA5STRING_asn1_meth */ \
    LFUNC_FA_(UNIMPLEMENTED) /* ASN1_BIT_STRING_asn1_meth */ \
    LFUNC_FA_(ASN1_TYPE_set_octetstring) \
    LFUNC_FA_(ASN1_TYPE_get_octetstring) \
    LFUNC_FA_(ASN1_TYPE_set_int_octetstring) \
    LFUNC_FA_(ASN1_TYPE_get_int_octetstring) \
    LFUNC_FA_(UNIMPLEMENTED) /* ASN1_seq_unpack */ \
    LFUNC_FA_(UNIMPLEMENTED) /* ASN1_seq_pack */ \
    LFUNC_FA_(UNIMPLEMENTED) /* ASN1_unpack_string */ \
    LFUNC_FA_(ASN1_item_unpack) \
    LFUNC_FA_(UNIMPLEMENTED) /* ASN1_pack_string */ \
    LFUNC_FA_(ASN1_item_pack) \
    LFUNC_FA_(ASN1_STRING_set_default_mask) \
    LFUNC_FA_(ASN1_STRING_set_default_mask_asc) \
    LFUNC_FA_(ASN1_STRING_get_default_mask) \
    LFUNC_FA_(ASN1_mbstring_copy) \
    LFUNC_FA_(ASN1_mbstring_ncopy) \
    LFUNC_FA_(ASN1_STRING_set_by_NID) \
    LFUNC_FA_(ASN1_STRING_TABLE_get) \
    LFUNC_FA_(ASN1_STRING_TABLE_add) \
    LFUNC_FA_(ASN1_STRING_TABLE_cleanup) \
    LFUNC_FA_(ASN1_item_new) \
    LFUNC_FA_(ASN1_item_free) \
    LFUNC_FA_(ASN1_item_d2i) \
    LFUNC_FA_(ASN1_item_i2d) \
    LFUNC_FA_(ASN1_add_oid_module) \
    LFUNC_FA_(ERR_load_ASN1_strings) \
    LFUNC_FA_(UNIMPLEMENTED) /* asn1_GetSequence */ \
    LFUNC_FA_(UNIMPLEMENTED) /* asn1_add_error */ \
    LFUNC_FA_(ASN1_BOOLEAN_it) \
    LFUNC_FA_(ASN1_TBOOLEAN_it) \
    LFUNC_FA_(ASN1_FBOOLEAN_it) \
    LFUNC_FA_(ASN1_SEQUENCE_it) \
    LFUNC_FA_(CBIGNUM_it) \
    LFUNC_FA_(BIGNUM_it) \
    LFUNC_FA_(LONG_it) \
    LFUNC_FA_(ZLONG_it) \
    LFUNC_FA_(ASN1_item_ex_new) \
    LFUNC_FA_(ASN1_item_ex_free) \
    LFUNC_FA_(UNIMPLEMENTED) /* ASN1_template_new */ \
    LFUNC_FA_(UNIMPLEMENTED) /* ASN1_primitive_new */ \
    LFUNC_FA_(UNIMPLEMENTED) /* ASN1_template_free */ \
    LFUNC_FA_(UNIMPLEMENTED) /* ASN1_template_d2i */ \
    LFUNC_FA_(ASN1_item_ex_d2i) \
    LFUNC_FA_(ASN1_item_ex_i2d) \
    LFUNC_FA_(UNIMPLEMENTED) /* ASN1_template_i2d */ \
    LFUNC_FA_(UNIMPLEMENTED) /* ASN1_primitive_free */ \
    LFUNC_FA_(UNIMPLEMENTED) /* asn1_ex_i2c */ \
    LFUNC_FA_(UNIMPLEMENTED) /* asn1_ex_c2i */ \
    LFUNC_FA_(UNIMPLEMENTED) /* asn1_get_choice_selector */ \
    LFUNC_FA_(UNIMPLEMENTED) /* asn1_set_choice_selector */ \
    LFUNC_FA_(UNIMPLEMENTED) /* asn1_get_field_ptr */ \
    LFUNC_FA_(UNIMPLEMENTED) /* asn1_do_adb */ \
    LFUNC_FA_(UNIMPLEMENTED) /* asn1_do_lock */ \
    LFUNC_FA_(UNIMPLEMENTED) /* asn1_enc_init */ \
    LFUNC_FA_(UNIMPLEMENTED) /* asn1_enc_free */ \
    LFUNC_FA_(UNIMPLEMENTED) /* asn1_enc_restore */ \
    LFUNC_FA_(UNIMPLEMENTED) /* asn1_enc_save */ \
    LFUNC_FA_(BIO_ctrl_pending) \
    LFUNC_FA_(BIO_ctrl_wpending) \
    LFUNC_FA_(BIO_ctrl_get_write_guarantee) \
    LFUNC_FA_(BIO_ctrl_get_read_request) \
    LFUNC_FA_(BIO_ctrl_reset_read_request) \
    LFUNC_FA_(BIO_set_ex_data) \
    LFUNC_FA_(BIO_get_ex_data) \
    LFUNC_FA_(OBSOLETE_BIO_get_ex_new_index) \
    LFUNC_FA_(BIO_number_read) \
    LFUNC_FA_(BIO_number_written) \
    LFUNC_FA_(BIO_s_file) \
    LFUNC_FA_(BIO_new_file) \
    LFUNC_FA_(BIO_new_fp_amiga) \
    LFUNC_FA_(BIO_new) \
    LFUNC_FA_(UNIMPLEMENTED) /* BIO_set */ \
    LFUNC_FA_(BIO_free) \
    LFUNC_FA_(BIO_vfree) \
    LFUNC_FA_(BIO_read) \
    LFUNC_FA_(BIO_gets) \
    LFUNC_FA_(BIO_write) \
    LFUNC_FA_(BIO_puts) \
    LFUNC_FA_(BIO_indent) \
    LFUNC_FA_(BIO_ctrl) \
    LFUNC_FA_(BIO_callback_ctrl) \
    LFUNC_FA_(BIO_ptr_ctrl) \
    LFUNC_FA_(BIO_int_ctrl) \
    LFUNC_FA_(BIO_push) \
    LFUNC_FA_(BIO_pop) \
    LFUNC_FA_(BIO_free_all) \
    LFUNC_FA_(BIO_find_type) \
    LFUNC_FA_(BIO_next) \
    LFUNC_FA_(BIO_get_retry_BIO) \
    LFUNC_FA_(BIO_get_retry_reason) \
    LFUNC_FA_(BIO_dup_chain) \
    LFUNC_FA_(BIO_nread0) \
    LFUNC_FA_(BIO_nread) \
    LFUNC_FA_(BIO_nwrite0) \
    LFUNC_FA_(BIO_nwrite) \
    LFUNC_FA_(BIO_debug_callback) \
    LFUNC_FA_(BIO_s_mem) \
    LFUNC_FA_(BIO_new_mem_buf) \
    LFUNC_FA_(BIO_s_socket) \
    LFUNC_FA_(BIO_s_connect) \
    LFUNC_FA_(BIO_s_accept) \
    LFUNC_FA_(BIO_s_fd) \
    LFUNC_FA_(BIO_s_log) \
    LFUNC_FA_(BIO_s_bio) \
    LFUNC_FA_(BIO_s_null) \
    LFUNC_FA_(BIO_f_null) \
    LFUNC_FA_(BIO_f_buffer) \
    LFUNC_FA_(BIO_f_nbio_test) \
    LFUNC_FA_(BIO_sock_should_retry) \
    LFUNC_FA_(BIO_sock_non_fatal_error) \
    LFUNC_FA_(BIO_fd_should_retry) \
    LFUNC_FA_(BIO_fd_non_fatal_error) \
    LFUNC_FA_(BIO_dump) \
    LFUNC_FA_(BIO_dump_indent) \
    LFUNC_FA_(BIO_gethostbyname) \
    LFUNC_FA_(BIO_sock_error) \
    LFUNC_FA_(BIO_socket_ioctl) \
    LFUNC_FA_(BIO_socket_nbio) \
    LFUNC_FA_(BIO_get_port) \
    LFUNC_FA_(BIO_get_host_ip) \
    LFUNC_FA_(BIO_get_accept_socket) \
    LFUNC_FA_(BIO_accept) \
    LFUNC_FA_(BIO_sock_init) \
    LFUNC_FA_(UNIMPLEMENTED) /* BIO_sock_cleanup */ \
    LFUNC_FA_(BIO_set_tcp_ndelay) \
    LFUNC_FA_(BIO_new_socket) \
    LFUNC_FA_(BIO_new_fd) \
    LFUNC_FA_(BIO_new_connect) \
    LFUNC_FA_(BIO_new_accept) \
    LFUNC_FA_(BIO_new_bio_pair) \
    LFUNC_FA_(BIO_copy_next_retry) \
    LFUNC_FA_(BIO_vprintf) \
    LFUNC_VA_(BIO_printf) \
    LFUNC_FA_(BIO_vsnprintf) \
    LFUNC_VA_(BIO_snprintf) \
    LFUNC_FA_(ERR_load_BIO_strings) \
    LFUNC_FA_(BN_value_one) \
    LFUNC_FA_(BN_options) \
    LFUNC_FA_(BN_CTX_new) \
    LFUNC_FA_(UNIMPLEMENTED) /* BN_CTX_init */ \
    LFUNC_FA_(BN_CTX_free) \
    LFUNC_FA_(BN_CTX_start) \
    LFUNC_FA_(BN_CTX_get) \
    LFUNC_FA_(BN_CTX_end) \
    LFUNC_FA_(BN_rand) \
    LFUNC_FA_(BN_pseudo_rand) \
    LFUNC_FA_(BN_rand_range) \
    LFUNC_FA_(BN_pseudo_rand_range) \
    LFUNC_FA_(BN_num_bits) \
    LFUNC_FA_(BN_num_bits_word) \
    LFUNC_FA_(BN_new) \
    LFUNC_FA_(UNIMPLEMENTED) /* BN_init */ \
    LFUNC_FA_(BN_clear_free) \
    LFUNC_FA_(BN_copy) \
    LFUNC_FA_(BN_swap) \
    LFUNC_FA_(BN_bin2bn) \
    LFUNC_FA_(BN_bn2bin) \
    LFUNC_FA_(BN_mpi2bn) \
    LFUNC_FA_(BN_bn2mpi) \
    LFUNC_FA_(BN_sub) \
    LFUNC_FA_(BN_usub) \
    LFUNC_FA_(BN_uadd) \
    LFUNC_FA_(BN_add) \
    LFUNC_FA_(BN_mul) \
    LFUNC_FA_(BN_sqr) \
    LFUNC_FA_(BN_div) \
    LFUNC_FA_(BN_nnmod) \
    LFUNC_FA_(BN_mod_add) \
    LFUNC_FA_(BN_mod_add_quick) \
    LFUNC_FA_(BN_mod_sub) \
    LFUNC_FA_(BN_mod_sub_quick) \
    LFUNC_FA_(BN_mod_mul) \
    LFUNC_FA_(BN_mod_sqr) \
    LFUNC_FA_(BN_mod_lshift1) \
    LFUNC_FA_(BN_mod_lshift1_quick) \
    LFUNC_FA_(BN_mod_lshift) \
    LFUNC_FA_(BN_mod_lshift_quick) \
    LFUNC_FA_(BN_mod_word) \
    LFUNC_FA_(BN_div_word) \
    LFUNC_FA_(BN_mul_word) \
    LFUNC_FA_(BN_add_word) \
    LFUNC_FA_(BN_sub_word) \
    LFUNC_FA_(BN_set_word) \
    LFUNC_FA_(BN_get_word) \
    LFUNC_FA_(BN_cmp) \
    LFUNC_FA_(BN_free) \
    LFUNC_FA_(BN_is_bit_set) \
    LFUNC_FA_(BN_lshift) \
    LFUNC_FA_(BN_lshift1) \
    LFUNC_FA_(BN_exp) \
    LFUNC_FA_(BN_mod_exp) \
    LFUNC_FA_(BN_mod_exp_mont) \
    LFUNC_FA_(BN_mod_exp_mont_word) \
    LFUNC_FA_(BN_mod_exp2_mont) \
    LFUNC_FA_(BN_mod_exp_simple) \
    LFUNC_FA_(BN_mask_bits) \
    LFUNC_FA_(BN_print) \
    LFUNC_FA_(BN_reciprocal) \
    LFUNC_FA_(BN_rshift) \
    LFUNC_FA_(BN_rshift1) \
    LFUNC_FA_(BN_clear) \
    LFUNC_FA_(BN_dup) \
    LFUNC_FA_(BN_ucmp) \
    LFUNC_FA_(BN_set_bit) \
    LFUNC_FA_(BN_clear_bit) \
    LFUNC_FA_(BN_bn2hex) \
    LFUNC_FA_(BN_bn2dec) \
    LFUNC_FA_(BN_hex2bn) \
    LFUNC_FA_(BN_dec2bn) \
    LFUNC_FA_(BN_gcd) \
    LFUNC_FA_(BN_kronecker) \
    LFUNC_FA_(BN_mod_inverse) \
    LFUNC_FA_(BN_mod_sqrt) \
    LFUNC_FA_(BN_generate_prime) \
    LFUNC_FA_(BN_is_prime) \
    LFUNC_FA_(BN_is_prime_fasttest) \
    LFUNC_FA_(BN_MONT_CTX_new) \
    LFUNC_FA_(UNIMPLEMENTED) /* BN_MONT_CTX_init */ \
    LFUNC_FA_(BN_mod_mul_montgomery) \
    LFUNC_FA_(BN_from_montgomery) \
    LFUNC_FA_(BN_MONT_CTX_free) \
    LFUNC_FA_(BN_MONT_CTX_set) \
    LFUNC_FA_(BN_MONT_CTX_copy) \
    LFUNC_FA_(BN_BLINDING_new) \
    LFUNC_FA_(BN_BLINDING_free) \
    LFUNC_FA_(BN_BLINDING_update) \
    LFUNC_FA_(BN_BLINDING_convert) \
    LFUNC_FA_(BN_BLINDING_invert) \
    LFUNC_FA_(BN_set_params) \
    LFUNC_FA_(BN_get_params) \
    LFUNC_FA_(UNIMPLEMENTED) /* BN_RECP_CTX_init */ \
    LFUNC_FA_(BN_RECP_CTX_new) \
    LFUNC_FA_(BN_RECP_CTX_free) \
    LFUNC_FA_(BN_RECP_CTX_set) \
    LFUNC_FA_(BN_mod_mul_reciprocal) \
    LFUNC_FA_(BN_mod_exp_recp) \
    LFUNC_FA_(BN_div_recp) \
    LFUNC_FA_(UNIMPLEMENTED) /* bn_expand2 */ \
    LFUNC_FA_(UNIMPLEMENTED) /* bn_dup_expand */ \
    LFUNC_FA_(UNIMPLEMENTED) /* bn_mul_add_words */ \
    LFUNC_FA_(UNIMPLEMENTED) /* bn_mul_words */ \
    LFUNC_FA_(UNIMPLEMENTED) /* bn_sqr_words */ \
    LFUNC_FA_(UNIMPLEMENTED) /* bn_div_words */ \
    LFUNC_FA_(UNIMPLEMENTED) /* bn_add_words */ \
    LFUNC_FA_(UNIMPLEMENTED) /* bn_sub_words */ \
    LFUNC_FA_(BN_bntest_rand) \
    LFUNC_FA_(ERR_load_BN_strings) \
    LFUNC_FA_(BUF_MEM_new) \
    LFUNC_FA_(BUF_MEM_free) \
    LFUNC_FA_(BUF_MEM_grow) \
    LFUNC_FA_(BUF_MEM_grow_clean) \
    LFUNC_FA_(OBSOLETE_BUF_strdup) \
    LFUNC_FA_(OBSOLETE_BUF_strlcpy) \
    LFUNC_FA_(OBSOLETE_BUF_strlcat) \
    LFUNC_FA_(ERR_load_BUF_strings) \
    LFUNC_FA_(COMP_CTX_new) \
    LFUNC_FA_(COMP_CTX_free) \
    LFUNC_FA_(COMP_compress_block) \
    LFUNC_FA_(COMP_expand_block) \
    LFUNC_FA_(UNIMPLEMENTED) /* COMP_rle */ \
    LFUNC_FA_(COMP_zlib) \
    LFUNC_FA_(ERR_load_COMP_strings) \
    LFUNC_FA_(CONF_set_default_method) \
    LFUNC_FA_(CONF_set_nconf) \
    LFUNC_FA_(CONF_load) \
    LFUNC_FA_(CONF_load_bio) \
    LFUNC_FA_(CONF_get_section) \
    LFUNC_FA_(CONF_get_string) \
    LFUNC_FA_(CONF_get_number) \
    LFUNC_FA_(CONF_free) \
    LFUNC_FA_(CONF_dump_bio) \
    LFUNC_FA_(OPENSSL_config) \
    LFUNC_FA_(OBSOLETE_OPENSSL_no_config) \
    LFUNC_FA_(NCONF_new) \
    LFUNC_FA_(NCONF_default) \
    LFUNC_FA_(NCONF_WIN32) \
    LFUNC_FA_(NCONF_free) \
    LFUNC_FA_(NCONF_free_data) \
    LFUNC_FA_(NCONF_load) \
    LFUNC_FA_(NCONF_load_bio) \
    LFUNC_FA_(NCONF_get_section) \
    LFUNC_FA_(NCONF_get_string) \
    LFUNC_FA_(NCONF_get_number_e) \
    LFUNC_FA_(NCONF_dump_bio) \
    LFUNC_FA_(CONF_modules_load) \
    LFUNC_FA_(CONF_modules_load_file) \
    LFUNC_FA_(CONF_modules_unload) \
    LFUNC_FA_(CONF_modules_finish) \
    LFUNC_FA_(UNIMPLEMENTED) /* CONF_modules_free */ \
    LFUNC_FA_(CONF_module_add) \
    LFUNC_FA_(CONF_imodule_get_name) \
    LFUNC_FA_(CONF_imodule_get_value) \
    LFUNC_FA_(CONF_imodule_get_usr_data) \
    LFUNC_FA_(CONF_imodule_set_usr_data) \
    LFUNC_FA_(CONF_imodule_get_module) \
    LFUNC_FA_(CONF_imodule_get_flags) \
    LFUNC_FA_(CONF_imodule_set_flags) \
    LFUNC_FA_(CONF_module_get_usr_data) \
    LFUNC_FA_(CONF_module_set_usr_data) \
    LFUNC_FA_(CONF_get1_default_config_file) \
    LFUNC_FA_(CONF_parse_list) \
    LFUNC_FA_(OPENSSL_load_builtin_modules) \
    LFUNC_FA_(ERR_load_CONF_strings) \
    LFUNC_FA_(UNIMPLEMENTED) /* _CONF_new_section */ \
    LFUNC_FA_(UNIMPLEMENTED) /* _CONF_get_section */ \
    LFUNC_FA_(UNIMPLEMENTED) /* _CONF_get_section_values */ \
    LFUNC_FA_(UNIMPLEMENTED) /* _CONF_add_string */ \
    LFUNC_FA_(UNIMPLEMENTED) /* _CONF_get_string */ \
    LFUNC_FA_(UNIMPLEMENTED) /* _CONF_new_data */ \
    LFUNC_FA_(UNIMPLEMENTED) /* _CONF_free_data */ \
    LFUNC_FA_(UNIMPLEMENTED) /* CRYPTO_mem_ctrl */ \
    LFUNC_FA_(UNIMPLEMENTED) /* CRYPTO_is_mem_check_on */ \
    LFUNC_FA_(OBSOLETE_SSLeay_version) \
    LFUNC_FA_(OBSOLETE_SSLeay) \
    LFUNC_FA_(OPENSSL_issetugid) \
    LFUNC_FA_(UNIMPLEMENTED) /* CRYPTO_get_ex_data_implementation */ \
    LFUNC_FA_(UNIMPLEMENTED) /* CRYPTO_set_ex_data_implementation */ \
    LFUNC_FA_(UNIMPLEMENTED) /* CRYPTO_ex_data_new_class */ \
    LFUNC_FA_(CRYPTO_get_ex_new_index) \
    LFUNC_FA_(CRYPTO_new_ex_data) \
    LFUNC_FA_(CRYPTO_dup_ex_data) \
    LFUNC_FA_(CRYPTO_free_ex_data) \
    LFUNC_FA_(CRYPTO_set_ex_data) \
    LFUNC_FA_(CRYPTO_get_ex_data) \
    LFUNC_FA_(UNIMPLEMENTED) /* CRYPTO_cleanup_all_ex_data */ \
    LFUNC_FA_(UNIMPLEMENTED) /* CRYPTO_get_new_lockid */ \
    LFUNC_FA_(UNIMPLEMENTED) /* CRYPTO_num_locks */ \
    LFUNC_FA_(UNIMPLEMENTED) /* CRYPTO_lock */ \
    LFUNC_FA_(UNIMPLEMENTED) /* CRYPTO_set_locking_callback */ \
    LFUNC_FA_(UNIMPLEMENTED) /* CRYPTO_get_locking_callback */ \
    LFUNC_FA_(UNIMPLEMENTED) /* CRYPTO_set_add_lock_callback */ \
    LFUNC_FA_(UNIMPLEMENTED) /* CRYPTO_get_add_lock_callback */ \
    LFUNC_FA_(UNIMPLEMENTED) /* CRYPTO_set_id_callback */ \
    LFUNC_FA_(UNIMPLEMENTED) /* CRYPTO_get_id_callback */ \
    LFUNC_FA_(UNIMPLEMENTED) /* CRYPTO_thread_id */ \
    LFUNC_FA_(UNIMPLEMENTED) /* CRYPTO_get_lock_name */ \
    LFUNC_FA_(UNIMPLEMENTED) /* CRYPTO_add_lock */ \
    LFUNC_FA_(UNIMPLEMENTED) /* CRYPTO_get_new_dynlockid */ \
    LFUNC_FA_(UNIMPLEMENTED) /* CRYPTO_destroy_dynlockid */ \
    LFUNC_FA_(UNIMPLEMENTED) /* CRYPTO_get_dynlock_value */ \
    LFUNC_FA_(UNIMPLEMENTED) /* CRYPTO_set_dynlock_create_callback */ \
    LFUNC_FA_(UNIMPLEMENTED) /* CRYPTO_set_dynlock_lock_callback */ \
    LFUNC_FA_(UNIMPLEMENTED) /* CRYPTO_set_dynlock_destroy_callback */ \
    LFUNC_FA_(UNIMPLEMENTED) /* CRYPTO_get_dynlock_create_callback */ \
    LFUNC_FA_(UNIMPLEMENTED) /* CRYPTO_get_dynlock_lock_callback */ \
    LFUNC_FA_(UNIMPLEMENTED) /* CRYPTO_get_dynlock_destroy_callback */ \
    LFUNC_FA_(CRYPTO_set_mem_functions) \
    LFUNC_FA_(UNIMPLEMENTED) /* CRYPTO_set_locked_mem_functions */ \
    LFUNC_FA_(UNIMPLEMENTED) /* CRYPTO_set_mem_ex_functions */ \
    LFUNC_FA_(UNIMPLEMENTED) /* CRYPTO_set_locked_mem_ex_functions */ \
    LFUNC_FA_(UNIMPLEMENTED) /* CRYPTO_set_mem_debug_functions */ \
    LFUNC_FA_(CRYPTO_get_mem_functions) \
    LFUNC_FA_(UNIMPLEMENTED) /* CRYPTO_get_locked_mem_functions */ \
    LFUNC_FA_(UNIMPLEMENTED) /* CRYPTO_get_mem_ex_functions */ \
    LFUNC_FA_(UNIMPLEMENTED) /* CRYPTO_get_locked_mem_ex_functions */ \
    LFUNC_FA_(UNIMPLEMENTED) /* CRYPTO_get_mem_debug_functions */ \
    LFUNC_FA_(UNIMPLEMENTED) /* CRYPTO_malloc_locked */ \
    LFUNC_FA_(UNIMPLEMENTED) /* CRYPTO_free_locked */ \
    LFUNC_FA_(CRYPTO_malloc) \
    LFUNC_FA_(CRYPTO_free) \
    LFUNC_FA_(CRYPTO_realloc) \
    LFUNC_FA_(UNIMPLEMENTED) /* CRYPTO_realloc_clean */ \
    LFUNC_FA_(UNIMPLEMENTED) /* CRYPTO_remalloc */ \
    LFUNC_FA_(OPENSSL_cleanse) \
    LFUNC_FA_(UNIMPLEMENTED) /* CRYPTO_set_mem_debug_options */ \
    LFUNC_FA_(UNIMPLEMENTED) /* CRYPTO_get_mem_debug_options */ \
    LFUNC_FA_(UNIMPLEMENTED) /* CRYPTO_push_info_ */ \
    LFUNC_FA_(UNIMPLEMENTED) /* CRYPTO_pop_info */ \
    LFUNC_FA_(UNIMPLEMENTED) /* CRYPTO_remove_all_info */ \
    LFUNC_FA_(UNIMPLEMENTED) /* CRYPTO_dbg_malloc */ \
    LFUNC_FA_(UNIMPLEMENTED) /* CRYPTO_dbg_realloc */ \
    LFUNC_FA_(UNIMPLEMENTED) /* CRYPTO_dbg_free */ \
    LFUNC_FA_(UNIMPLEMENTED) /* CRYPTO_dbg_set_options */ \
    LFUNC_FA_(UNIMPLEMENTED) /* CRYPTO_dbg_get_options */ \
    LFUNC_FA_(UNIMPLEMENTED) /* CRYPTO_mem_leaks */ \
    LFUNC_FA_(UNIMPLEMENTED) /* CRYPTO_mem_leaks_cb */ \
    LFUNC_FA_(UNIMPLEMENTED) /* OpenSSLDie */ \
    LFUNC_FA_(ERR_load_CRYPTO_strings) \
    LFUNC_FA_(UNIMPLEMENTED) /* DSO_new */ \
    LFUNC_FA_(UNIMPLEMENTED) /* DSO_new_method */ \
    LFUNC_FA_(UNIMPLEMENTED) /* DSO_free */ \
    LFUNC_FA_(UNIMPLEMENTED) /* DSO_flags */ \
    LFUNC_FA_(UNIMPLEMENTED) /* DSO_up_ref */ \
    LFUNC_FA_(UNIMPLEMENTED) /* DSO_ctrl */ \
    LFUNC_FA_(UNIMPLEMENTED) /* DSO_set_name_converter */ \
    LFUNC_FA_(UNIMPLEMENTED) /* DSO_get_filename */ \
    LFUNC_FA_(UNIMPLEMENTED) /* DSO_set_filename */ \
    LFUNC_FA_(UNIMPLEMENTED) /* DSO_convert_filename */ \
    LFUNC_FA_(UNIMPLEMENTED) /* DSO_get_loaded_filename */ \
    LFUNC_FA_(UNIMPLEMENTED) /* DSO_set_default_method */ \
    LFUNC_FA_(UNIMPLEMENTED) /* DSO_get_default_method */ \
    LFUNC_FA_(UNIMPLEMENTED) /* DSO_get_method */ \
    LFUNC_FA_(UNIMPLEMENTED) /* DSO_set_method */ \
    LFUNC_FA_(UNIMPLEMENTED) /* DSO_load */ \
    LFUNC_FA_(UNIMPLEMENTED) /* DSO_bind_var */ \
    LFUNC_FA_(UNIMPLEMENTED) /* DSO_bind_func */ \
    LFUNC_FA_(UNIMPLEMENTED) /* DSO_METHOD_openssl */ \
    LFUNC_FA_(UNIMPLEMENTED) /* DSO_METHOD_null */ \
    LFUNC_FA_(UNIMPLEMENTED) /* DSO_METHOD_dlfcn */ \
    LFUNC_FA_(UNIMPLEMENTED) /* DSO_METHOD_dl */ \
    LFUNC_FA_(UNIMPLEMENTED) /* DSO_METHOD_win32 */ \
    LFUNC_FA_(UNIMPLEMENTED) /* DSO_METHOD_vms */ \
    LFUNC_FA_(UNIMPLEMENTED) /* ERR_load_DSO_strings */ \
    LFUNC_FA_(EC_GFp_simple_method) \
    LFUNC_FA_(EC_GFp_mont_method) \
    LFUNC_FA_(EC_GROUP_new) \
    LFUNC_FA_(EC_GROUP_free) \
    LFUNC_FA_(EC_GROUP_clear_free) \
    LFUNC_FA_(EC_GROUP_copy) \
    LFUNC_FA_(EC_GROUP_method_of) \
    LFUNC_FA_(EC_GROUP_set_curve_GFp) \
    LFUNC_FA_(EC_GROUP_get_curve_GFp) \
    LFUNC_FA_(EC_GROUP_new_curve_GFp) \
    LFUNC_FA_(EC_GROUP_set_generator) \
    LFUNC_FA_(EC_GROUP_get0_generator) \
    LFUNC_FA_(EC_GROUP_get_order) \
    LFUNC_FA_(EC_GROUP_get_cofactor) \
    LFUNC_FA_(EC_POINT_new) \
    LFUNC_FA_(EC_POINT_free) \
    LFUNC_FA_(EC_POINT_clear_free) \
    LFUNC_FA_(EC_POINT_copy) \
    LFUNC_FA_(EC_POINT_method_of) \
    LFUNC_FA_(EC_POINT_set_to_infinity) \
    LFUNC_FA_(EC_POINT_set_Jprojective_coordinates_GFp) \
    LFUNC_FA_(EC_POINT_get_Jprojective_coordinates_GFp) \
    LFUNC_FA_(EC_POINT_set_affine_coordinates_GFp) \
    LFUNC_FA_(EC_POINT_get_affine_coordinates_GFp) \
    LFUNC_FA_(EC_POINT_set_compressed_coordinates_GFp) \
    LFUNC_FA_(EC_POINT_point2oct) \
    LFUNC_FA_(EC_POINT_oct2point) \
    LFUNC_FA_(EC_POINT_add) \
    LFUNC_FA_(EC_POINT_dbl) \
    LFUNC_FA_(EC_POINT_invert) \
    LFUNC_FA_(EC_POINT_is_at_infinity) \
    LFUNC_FA_(EC_POINT_is_on_curve) \
    LFUNC_FA_(EC_POINT_cmp) \
    LFUNC_FA_(EC_POINT_make_affine) \
    LFUNC_FA_(EC_POINTs_make_affine) \
    LFUNC_FA_(EC_POINTs_mul) \
    LFUNC_FA_(EC_POINT_mul) \
    LFUNC_FA_(EC_GROUP_precompute_mult) \
    LFUNC_FA_(ERR_load_EC_strings) \
    LFUNC_FA_(OBSOLETE_ERR_put_error) \
    LFUNC_FA_(ERR_set_error_data) \
    LFUNC_FA_(ERR_get_error) \
    LFUNC_FA_(ERR_get_error_line) \
    LFUNC_FA_(ERR_get_error_line_data) \
    LFUNC_FA_(ERR_peek_error) \
    LFUNC_FA_(ERR_peek_error_line) \
    LFUNC_FA_(ERR_peek_error_line_data) \
    LFUNC_FA_(ERR_peek_last_error) \
    LFUNC_FA_(ERR_peek_last_error_line) \
    LFUNC_FA_(ERR_peek_last_error_line_data) \
    LFUNC_FA_(ERR_clear_error) \
    LFUNC_FA_(ERR_error_string) \
    LFUNC_FA_(ERR_error_string_n) \
    LFUNC_FA_(ERR_lib_error_string) \
    LFUNC_FA_(ERR_func_error_string) \
    LFUNC_FA_(ERR_reason_error_string) \
    LFUNC_FA_(ERR_print_errors_cb) \
    LFUNC_FA_(ERR_print_errors) \
    LFUNC_FA_(ERR_add_error_vdata) \
    LFUNC_VA_(ERR_add_error_data) \
    LFUNC_FA_(ERR_load_strings) \
    LFUNC_FA_(ERR_unload_strings) \
    LFUNC_FA_(ERR_load_ERR_strings) \
    LFUNC_FA_(OBSOLETE_ERR_load_crypto_strings) \
    LFUNC_FA_(UNIMPLEMENTED) /* err_free_strings_int */ \
    LFUNC_FA_(UNIMPLEMENTED) /* ERR_remove_state */ \
    LFUNC_FA_(ERR_get_state) \
    LFUNC_FA_(UNIMPLEMENTED) /* ERR_get_string_table */ \
    LFUNC_FA_(UNIMPLEMENTED) /* ERR_get_err_state_table */ \
    LFUNC_FA_(UNIMPLEMENTED) /* ERR_release_err_state_table */ \
    LFUNC_FA_(ERR_get_next_error_library) \
    LFUNC_FA_(UNIMPLEMENTED) /* ERR_get_implementation */ \
    LFUNC_FA_(UNIMPLEMENTED) /* ERR_set_implementation */ \
    LFUNC_FA_(OBSOLETE_EVP_MD_CTX_init) \
    LFUNC_FA_(UNIMPLEMENTED) /* EVP_MD_CTX_cleanup */ \
    LFUNC_FA_(OBSOLETE_EVP_MD_CTX_create) \
    LFUNC_FA_(OBSOLETE_EVP_MD_CTX_destroy) \
    LFUNC_FA_(EVP_MD_CTX_copy_ex) \
    LFUNC_FA_(EVP_DigestInit_ex) \
    LFUNC_FA_(EVP_DigestUpdate) \
    LFUNC_FA_(EVP_DigestFinal_ex) \
    LFUNC_FA_(EVP_Digest) \
    LFUNC_FA_(EVP_MD_CTX_copy) \
    LFUNC_FA_(EVP_DigestInit) \
    LFUNC_FA_(EVP_DigestFinal) \
    LFUNC_FA_(EVP_read_pw_string) \
    LFUNC_FA_(EVP_set_pw_prompt) \
    LFUNC_FA_(EVP_get_pw_prompt) \
    LFUNC_FA_(EVP_BytesToKey) \
    LFUNC_FA_(EVP_EncryptInit) \
    LFUNC_FA_(EVP_EncryptInit_ex) \
    LFUNC_FA_(EVP_EncryptUpdate) \
    LFUNC_FA_(EVP_EncryptFinal_ex) \
    LFUNC_FA_(EVP_EncryptFinal) \
    LFUNC_FA_(EVP_DecryptInit) \
    LFUNC_FA_(EVP_DecryptInit_ex) \
    LFUNC_FA_(EVP_DecryptUpdate) \
    LFUNC_FA_(EVP_DecryptFinal) \
    LFUNC_FA_(EVP_DecryptFinal_ex) \
    LFUNC_FA_(EVP_CipherInit) \
    LFUNC_FA_(EVP_CipherInit_ex) \
    LFUNC_FA_(EVP_CipherUpdate) \
    LFUNC_FA_(EVP_CipherFinal) \
    LFUNC_FA_(EVP_CipherFinal_ex) \
    LFUNC_FA_(EVP_SignFinal) \
    LFUNC_FA_(EVP_VerifyFinal) \
    LFUNC_FA_(EVP_OpenInit) \
    LFUNC_FA_(EVP_OpenFinal) \
    LFUNC_FA_(EVP_SealInit) \
    LFUNC_FA_(EVP_SealFinal) \
    LFUNC_FA_(EVP_EncodeInit) \
    LFUNC_FA_(EVP_EncodeUpdate) \
    LFUNC_FA_(EVP_EncodeFinal) \
    LFUNC_FA_(EVP_EncodeBlock) \
    LFUNC_FA_(EVP_DecodeInit) \
    LFUNC_FA_(EVP_DecodeUpdate) \
    LFUNC_FA_(EVP_DecodeFinal) \
    LFUNC_FA_(EVP_DecodeBlock) \
    LFUNC_FA_(OBSOLETE_EVP_CIPHER_CTX_init) \
    LFUNC_FA_(OBSOLETE_EVP_CIPHER_CTX_cleanup) \
    LFUNC_FA_(EVP_CIPHER_CTX_set_key_length) \
    LFUNC_FA_(EVP_CIPHER_CTX_set_padding) \
    LFUNC_FA_(EVP_CIPHER_CTX_ctrl) \
    LFUNC_FA_(BIO_f_md) \
    LFUNC_FA_(BIO_f_base64) \
    LFUNC_FA_(BIO_f_cipher) \
    LFUNC_FA_(BIO_f_reliable) \
    LFUNC_FA_(BIO_set_cipher) \
    LFUNC_FA_(EVP_md_null) \
    LFUNC_FA_(EVP_md2) \
    LFUNC_FA_(EVP_md4) \
    LFUNC_FA_(EVP_md5) \
    LFUNC_FA_(UNIMPLEMENTED) /* EVP_sha */ \
    LFUNC_FA_(EVP_sha1) \
    LFUNC_FA_(UNIMPLEMENTED) /* EVP_dss */ \
    LFUNC_FA_(UNIMPLEMENTED) /* EVP_dss1 */ \
    LFUNC_FA_(EVP_mdc2) \
    LFUNC_FA_(EVP_ripemd160) \
    LFUNC_FA_(EVP_enc_null) \
    LFUNC_FA_(EVP_des_ecb) \
    LFUNC_FA_(EVP_des_ede) \
    LFUNC_FA_(EVP_des_ede3) \
    LFUNC_FA_(EVP_des_ede_ecb) \
    LFUNC_FA_(EVP_des_ede3_ecb) \
    LFUNC_FA_(EVP_des_cfb64) \
    LFUNC_FA_(EVP_des_cfb1) \
    LFUNC_FA_(EVP_des_cfb8) \
    LFUNC_FA_(EVP_des_ede_cfb64) \
    LFUNC_FA_(EVP_des_ede3_cfb64) \
    LFUNC_FA_(EVP_des_ede3_cfb1) \
    LFUNC_FA_(EVP_des_ede3_cfb8) \
    LFUNC_FA_(EVP_des_ofb) \
    LFUNC_FA_(EVP_des_ede_ofb) \
    LFUNC_FA_(EVP_des_ede3_ofb) \
    LFUNC_FA_(EVP_des_cbc) \
    LFUNC_FA_(EVP_des_ede_cbc) \
    LFUNC_FA_(EVP_des_ede3_cbc) \
    LFUNC_FA_(EVP_desx_cbc) \
    LFUNC_FA_(EVP_rc4) \
    LFUNC_FA_(EVP_rc4_40) \
    LFUNC_FA_(EVP_idea_ecb) \
    LFUNC_FA_(EVP_idea_cfb64) \
    LFUNC_FA_(EVP_idea_ofb) \
    LFUNC_FA_(EVP_idea_cbc) \
    LFUNC_FA_(EVP_rc2_ecb) \
    LFUNC_FA_(EVP_rc2_cbc) \
    LFUNC_FA_(EVP_rc2_40_cbc) \
    LFUNC_FA_(EVP_rc2_64_cbc) \
    LFUNC_FA_(EVP_rc2_cfb64) \
    LFUNC_FA_(EVP_rc2_ofb) \
    LFUNC_FA_(EVP_bf_ecb) \
    LFUNC_FA_(EVP_bf_cbc) \
    LFUNC_FA_(EVP_bf_cfb64) \
    LFUNC_FA_(EVP_bf_ofb) \
    LFUNC_FA_(EVP_cast5_ecb) \
    LFUNC_FA_(EVP_cast5_cbc) \
    LFUNC_FA_(EVP_cast5_cfb64) \
    LFUNC_FA_(EVP_cast5_ofb) \
    LFUNC_FA_(EVP_rc5_32_12_16_cbc) \
    LFUNC_FA_(EVP_rc5_32_12_16_ecb) \
    LFUNC_FA_(EVP_rc5_32_12_16_cfb64) \
    LFUNC_FA_(EVP_rc5_32_12_16_ofb) \
    LFUNC_FA_(EVP_aes_128_ecb) \
    LFUNC_FA_(EVP_aes_128_cbc) \
    LFUNC_FA_(EVP_aes_128_cfb1) \
    LFUNC_FA_(EVP_aes_128_cfb8) \
    LFUNC_FA_(EVP_aes_128_cfb128) \
    LFUNC_FA_(EVP_aes_128_ofb) \
    LFUNC_FA_(EVP_aes_192_ecb) \
    LFUNC_FA_(EVP_aes_192_cbc) \
    LFUNC_FA_(EVP_aes_192_cfb1) \
    LFUNC_FA_(EVP_aes_192_cfb8) \
    LFUNC_FA_(EVP_aes_192_cfb128) \
    LFUNC_FA_(EVP_aes_192_ofb) \
    LFUNC_FA_(EVP_aes_256_ecb) \
    LFUNC_FA_(EVP_aes_256_cbc) \
    LFUNC_FA_(EVP_aes_256_cfb1) \
    LFUNC_FA_(EVP_aes_256_cfb8) \
    LFUNC_FA_(EVP_aes_256_cfb128) \
    LFUNC_FA_(EVP_aes_256_ofb) \
    LFUNC_FA_(OBSOLETE_OPENSSL_add_all_algorithms_noconf) \
    LFUNC_FA_(OBSOLETE_OPENSSL_add_all_algorithms_conf) \
    LFUNC_FA_(OBSOLETE_OpenSSL_add_all_ciphers) \
    LFUNC_FA_(OBSOLETE_OpenSSL_add_all_digests) \
    LFUNC_FA_(EVP_add_cipher) \
    LFUNC_FA_(EVP_add_digest) \
    LFUNC_FA_(EVP_get_cipherbyname) \
    LFUNC_FA_(EVP_get_digestbyname) \
    LFUNC_FA_(UNIMPLEMENTED) /* EVP_cleanup */ \
    LFUNC_FA_(EVP_PKEY_decrypt) \
    LFUNC_FA_(EVP_PKEY_encrypt) \
    LFUNC_FA_(EVP_PKEY_type) \
    LFUNC_FA_(EVP_PKEY_get_bits) \
    LFUNC_FA_(EVP_PKEY_get_size) \
    LFUNC_FA_(EVP_PKEY_assign) \
    LFUNC_FA_(EVP_PKEY_set1_RSA) \
    LFUNC_FA_(EVP_PKEY_get1_RSA) \
    LFUNC_FA_(EVP_PKEY_set1_DSA) \
    LFUNC_FA_(EVP_PKEY_get1_DSA) \
    LFUNC_FA_(EVP_PKEY_set1_DH) \
    LFUNC_FA_(EVP_PKEY_get1_DH) \
    LFUNC_FA_(EVP_PKEY_new) \
    LFUNC_FA_(EVP_PKEY_free) \
    LFUNC_FA_(d2i_PublicKey) \
    LFUNC_FA_(i2d_PublicKey) \
    LFUNC_FA_(d2i_PrivateKey) \
    LFUNC_FA_(d2i_AutoPrivateKey) \
    LFUNC_FA_(i2d_PrivateKey) \
    LFUNC_FA_(EVP_PKEY_copy_parameters) \
    LFUNC_FA_(EVP_PKEY_missing_parameters) \
    LFUNC_FA_(EVP_PKEY_save_parameters) \
    LFUNC_FA_(EVP_PKEY_cmp_parameters) \
    LFUNC_FA_(EVP_CIPHER_get_type) \
    LFUNC_FA_(EVP_CIPHER_param_to_asn1) \
    LFUNC_FA_(EVP_CIPHER_asn1_to_param) \
    LFUNC_FA_(EVP_CIPHER_set_asn1_iv) \
    LFUNC_FA_(EVP_CIPHER_get_asn1_iv) \
    LFUNC_FA_(PKCS5_PBE_keyivgen) \
    LFUNC_FA_(PKCS5_PBKDF2_HMAC_SHA1) \
    LFUNC_FA_(PKCS5_v2_PBE_keyivgen) \
    LFUNC_FA_(PKCS5_PBE_add) \
    LFUNC_FA_(EVP_PBE_CipherInit) \
    LFUNC_FA_(EVP_PBE_alg_add) \
    LFUNC_FA_(EVP_PBE_cleanup) \
    LFUNC_FA_(ERR_load_EVP_strings) \
    LFUNC_FA_(UNIMPLEMENTED) /* HMAC_CTX_init */ \
    LFUNC_FA_(UNIMPLEMENTED) /* HMAC_CTX_cleanup */ \
    LFUNC_FA_(HMAC_Init) \
    LFUNC_FA_(HMAC_Init_ex) \
    LFUNC_FA_(HMAC_Update) \
    LFUNC_FA_(HMAC_Final) \
    LFUNC_FA_(HMAC) \
    LFUNC_FA_(UNIMPLEMENTED) /* KRB5_ENCDATA_new */ \
    LFUNC_FA_(UNIMPLEMENTED) /* KRB5_ENCDATA_free */ \
    LFUNC_FA_(UNIMPLEMENTED) /* d2i_KRB5_ENCDATA */ \
    LFUNC_FA_(UNIMPLEMENTED) /* i2d_KRB5_ENCDATA */ \
    LFUNC_FA_(UNIMPLEMENTED) /* KRB5_ENCDATA_it */ \
    LFUNC_FA_(UNIMPLEMENTED) /* KRB5_PRINCNAME_new */ \
    LFUNC_FA_(UNIMPLEMENTED) /* KRB5_PRINCNAME_free */ \
    LFUNC_FA_(UNIMPLEMENTED) /* d2i_KRB5_PRINCNAME */ \
    LFUNC_FA_(UNIMPLEMENTED) /* i2d_KRB5_PRINCNAME */ \
    LFUNC_FA_(UNIMPLEMENTED) /* KRB5_PRINCNAME_it */ \
    LFUNC_FA_(UNIMPLEMENTED) /* KRB5_TKTBODY_new */ \
    LFUNC_FA_(UNIMPLEMENTED) /* KRB5_TKTBODY_free */ \
    LFUNC_FA_(UNIMPLEMENTED) /* d2i_KRB5_TKTBODY */ \
    LFUNC_FA_(UNIMPLEMENTED) /* i2d_KRB5_TKTBODY */ \
    LFUNC_FA_(UNIMPLEMENTED) /* KRB5_TKTBODY_it */ \
    LFUNC_FA_(UNIMPLEMENTED) /* KRB5_APREQBODY_new */ \
    LFUNC_FA_(UNIMPLEMENTED) /* KRB5_APREQBODY_free */ \
    LFUNC_FA_(UNIMPLEMENTED) /* d2i_KRB5_APREQBODY */ \
    LFUNC_FA_(UNIMPLEMENTED) /* i2d_KRB5_APREQBODY */ \
    LFUNC_FA_(UNIMPLEMENTED) /* KRB5_APREQBODY_it */ \
    LFUNC_FA_(UNIMPLEMENTED) /* KRB5_TICKET_new */ \
    LFUNC_FA_(UNIMPLEMENTED) /* KRB5_TICKET_free */ \
    LFUNC_FA_(UNIMPLEMENTED) /* d2i_KRB5_TICKET */ \
    LFUNC_FA_(UNIMPLEMENTED) /* i2d_KRB5_TICKET */ \
    LFUNC_FA_(UNIMPLEMENTED) /* KRB5_TICKET_it */ \
    LFUNC_FA_(UNIMPLEMENTED) /* KRB5_APREQ_new */ \
    LFUNC_FA_(UNIMPLEMENTED) /* KRB5_APREQ_free */ \
    LFUNC_FA_(UNIMPLEMENTED) /* d2i_KRB5_APREQ */ \
    LFUNC_FA_(UNIMPLEMENTED) /* i2d_KRB5_APREQ */ \
    LFUNC_FA_(UNIMPLEMENTED) /* KRB5_APREQ_it */ \
    LFUNC_FA_(UNIMPLEMENTED) /* KRB5_CHECKSUM_new */ \
    LFUNC_FA_(UNIMPLEMENTED) /* KRB5_CHECKSUM_free */ \
    LFUNC_FA_(UNIMPLEMENTED) /* d2i_KRB5_CHECKSUM */ \
    LFUNC_FA_(UNIMPLEMENTED) /* i2d_KRB5_CHECKSUM */ \
    LFUNC_FA_(UNIMPLEMENTED) /* KRB5_CHECKSUM_it */ \
    LFUNC_FA_(UNIMPLEMENTED) /* KRB5_ENCKEY_new */ \
    LFUNC_FA_(UNIMPLEMENTED) /* KRB5_ENCKEY_free */ \
    LFUNC_FA_(UNIMPLEMENTED) /* d2i_KRB5_ENCKEY */ \
    LFUNC_FA_(UNIMPLEMENTED) /* i2d_KRB5_ENCKEY */ \
    LFUNC_FA_(UNIMPLEMENTED) /* KRB5_ENCKEY_it */ \
    LFUNC_FA_(UNIMPLEMENTED) /* KRB5_AUTHDATA_new */ \
    LFUNC_FA_(UNIMPLEMENTED) /* KRB5_AUTHDATA_free */ \
    LFUNC_FA_(UNIMPLEMENTED) /* d2i_KRB5_AUTHDATA */ \
    LFUNC_FA_(UNIMPLEMENTED) /* i2d_KRB5_AUTHDATA */ \
    LFUNC_FA_(UNIMPLEMENTED) /* KRB5_AUTHDATA_it */ \
    LFUNC_FA_(UNIMPLEMENTED) /* KRB5_AUTHENTBODY_new */ \
    LFUNC_FA_(UNIMPLEMENTED) /* KRB5_AUTHENTBODY_free */ \
    LFUNC_FA_(UNIMPLEMENTED) /* d2i_KRB5_AUTHENTBODY */ \
    LFUNC_FA_(UNIMPLEMENTED) /* i2d_KRB5_AUTHENTBODY */ \
    LFUNC_FA_(UNIMPLEMENTED) /* KRB5_AUTHENTBODY_it */ \
    LFUNC_FA_(UNIMPLEMENTED) /* KRB5_AUTHENT_new */ \
    LFUNC_FA_(UNIMPLEMENTED) /* KRB5_AUTHENT_free */ \
    LFUNC_FA_(UNIMPLEMENTED) /* d2i_KRB5_AUTHENT */ \
    LFUNC_FA_(UNIMPLEMENTED) /* i2d_KRB5_AUTHENT */ \
    LFUNC_FA_(UNIMPLEMENTED) /* KRB5_AUTHENT_it */ \
    LFUNC_FA_(OPENSSL_LH_new) \
    LFUNC_FA_(OPENSSL_LH_free) \
    LFUNC_FA_(OPENSSL_LH_insert) \
    LFUNC_FA_(OPENSSL_LH_delete) \
    LFUNC_FA_(OPENSSL_LH_retrieve) \
    LFUNC_FA_(OPENSSL_LH_doall) \
    LFUNC_FA_(OPENSSL_LH_doall_arg) \
    LFUNC_FA_(OPENSSL_LH_strhash) \
    LFUNC_FA_(OPENSSL_LH_num_items) \
    LFUNC_FA_(OPENSSL_LH_stats_bio) \
    LFUNC_FA_(OPENSSL_LH_node_stats_bio) \
    LFUNC_FA_(OPENSSL_LH_node_usage_stats_bio) \
    LFUNC_FA_(OBJ_NAME_init) \
    LFUNC_FA_(OBJ_NAME_new_index) \
    LFUNC_FA_(OBJ_NAME_get) \
    LFUNC_FA_(OBJ_NAME_add) \
    LFUNC_FA_(OBJ_NAME_remove) \
    LFUNC_FA_(OBJ_NAME_cleanup) \
    LFUNC_FA_(OBJ_NAME_do_all) \
    LFUNC_FA_(OBJ_NAME_do_all_sorted) \
    LFUNC_FA_(OBJ_dup) \
    LFUNC_FA_(OBJ_nid2obj) \
    LFUNC_FA_(OBJ_nid2ln) \
    LFUNC_FA_(OBJ_nid2sn) \
    LFUNC_FA_(OBJ_obj2nid) \
    LFUNC_FA_(OBJ_txt2obj) \
    LFUNC_FA_(OBJ_obj2txt) \
    LFUNC_FA_(OBJ_txt2nid) \
    LFUNC_FA_(OBJ_ln2nid) \
    LFUNC_FA_(OBJ_sn2nid) \
    LFUNC_FA_(OBJ_cmp) \
    LFUNC_FA_(UNIMPLEMENTED) /* OBJ_bsearch */ \
    LFUNC_FA_(OBJ_new_nid) \
    LFUNC_FA_(OBJ_add_object) \
    LFUNC_FA_(OBJ_create) \
    LFUNC_FA_(UNIMPLEMENTED) /* OBJ_cleanup */ \
    LFUNC_FA_(OBJ_create_objects) \
    LFUNC_FA_(ERR_load_OBJ_strings) \
    LFUNC_FA_(OCSP_sendreq_bio) \
    LFUNC_FA_(OCSP_cert_to_id) \
    LFUNC_FA_(OCSP_cert_id_new) \
    LFUNC_FA_(OCSP_request_add0_id) \
    LFUNC_FA_(OCSP_request_add1_nonce) \
    LFUNC_FA_(OCSP_basic_add1_nonce) \
    LFUNC_FA_(OCSP_check_nonce) \
    LFUNC_FA_(OCSP_copy_nonce) \
    LFUNC_FA_(OCSP_request_set1_name) \
    LFUNC_FA_(OCSP_request_add1_cert) \
    LFUNC_FA_(OCSP_request_sign) \
    LFUNC_FA_(OCSP_response_status) \
    LFUNC_FA_(OCSP_response_get1_basic) \
    LFUNC_FA_(OCSP_resp_count) \
    LFUNC_FA_(OCSP_resp_get0) \
    LFUNC_FA_(OCSP_resp_find) \
    LFUNC_FA_(OCSP_single_get0_status) \
    LFUNC_FA_(OCSP_resp_find_status) \
    LFUNC_FA_(OCSP_check_validity) \
    LFUNC_FA_(OCSP_request_verify) \
    LFUNC_FA_(OBSOLETE_OCSP_parse_url) \
    LFUNC_FA_(OCSP_id_issuer_cmp) \
    LFUNC_FA_(OCSP_id_cmp) \
    LFUNC_FA_(OCSP_request_onereq_count) \
    LFUNC_FA_(OCSP_request_onereq_get0) \
    LFUNC_FA_(OCSP_onereq_get0_id) \
    LFUNC_FA_(OCSP_id_get0_info) \
    LFUNC_FA_(OCSP_request_is_signed) \
    LFUNC_FA_(OCSP_response_create) \
    LFUNC_FA_(OCSP_basic_add1_status) \
    LFUNC_FA_(OCSP_basic_add1_cert) \
    LFUNC_FA_(OCSP_basic_sign) \
    LFUNC_FA_(UNIMPLEMENTED) /* ASN1_STRING_encode */ \
    LFUNC_FA_(OCSP_crlID_new) \
    LFUNC_FA_(OCSP_accept_responses_new) \
    LFUNC_FA_(OCSP_archive_cutoff_new) \
    LFUNC_FA_(OCSP_url_svcloc_new) \
    LFUNC_FA_(OCSP_REQUEST_get_ext_count) \
    LFUNC_FA_(OCSP_REQUEST_get_ext_by_NID) \
    LFUNC_FA_(OCSP_REQUEST_get_ext_by_OBJ) \
    LFUNC_FA_(OCSP_REQUEST_get_ext_by_critical) \
    LFUNC_FA_(OCSP_REQUEST_get_ext) \
    LFUNC_FA_(OCSP_REQUEST_delete_ext) \
    LFUNC_FA_(OCSP_REQUEST_get1_ext_d2i) \
    LFUNC_FA_(OCSP_REQUEST_add1_ext_i2d) \
    LFUNC_FA_(OCSP_REQUEST_add_ext) \
    LFUNC_FA_(OCSP_ONEREQ_get_ext_count) \
    LFUNC_FA_(OCSP_ONEREQ_get_ext_by_NID) \
    LFUNC_FA_(OCSP_ONEREQ_get_ext_by_OBJ) \
    LFUNC_FA_(OCSP_ONEREQ_get_ext_by_critical) \
    LFUNC_FA_(OCSP_ONEREQ_get_ext) \
    LFUNC_FA_(OCSP_ONEREQ_delete_ext) \
    LFUNC_FA_(OCSP_ONEREQ_get1_ext_d2i) \
    LFUNC_FA_(OCSP_ONEREQ_add1_ext_i2d) \
    LFUNC_FA_(OCSP_ONEREQ_add_ext) \
    LFUNC_FA_(OCSP_BASICRESP_get_ext_count) \
    LFUNC_FA_(OCSP_BASICRESP_get_ext_by_NID) \
    LFUNC_FA_(OCSP_BASICRESP_get_ext_by_OBJ) \
    LFUNC_FA_(OCSP_BASICRESP_get_ext_by_critical) \
    LFUNC_FA_(OCSP_BASICRESP_get_ext) \
    LFUNC_FA_(OCSP_BASICRESP_delete_ext) \
    LFUNC_FA_(OCSP_BASICRESP_get1_ext_d2i) \
    LFUNC_FA_(OCSP_BASICRESP_add1_ext_i2d) \
    LFUNC_FA_(OCSP_BASICRESP_add_ext) \
    LFUNC_FA_(OCSP_SINGLERESP_get_ext_count) \
    LFUNC_FA_(OCSP_SINGLERESP_get_ext_by_NID) \
    LFUNC_FA_(OCSP_SINGLERESP_get_ext_by_OBJ) \
    LFUNC_FA_(OCSP_SINGLERESP_get_ext_by_critical) \
    LFUNC_FA_(OCSP_SINGLERESP_get_ext) \
    LFUNC_FA_(OCSP_SINGLERESP_delete_ext) \
    LFUNC_FA_(OCSP_SINGLERESP_get1_ext_d2i) \
    LFUNC_FA_(OCSP_SINGLERESP_add1_ext_i2d) \
    LFUNC_FA_(OCSP_SINGLERESP_add_ext) \
    LFUNC_FA_(OCSP_SINGLERESP_new) \
    LFUNC_FA_(OCSP_SINGLERESP_free) \
    LFUNC_FA_(d2i_OCSP_SINGLERESP) \
    LFUNC_FA_(i2d_OCSP_SINGLERESP) \
    LFUNC_FA_(OCSP_SINGLERESP_it) \
    LFUNC_FA_(OCSP_CERTSTATUS_new) \
    LFUNC_FA_(OCSP_CERTSTATUS_free) \
    LFUNC_FA_(d2i_OCSP_CERTSTATUS) \
    LFUNC_FA_(i2d_OCSP_CERTSTATUS) \
    LFUNC_FA_(OCSP_CERTSTATUS_it) \
    LFUNC_FA_(OCSP_REVOKEDINFO_new) \
    LFUNC_FA_(OCSP_REVOKEDINFO_free) \
    LFUNC_FA_(d2i_OCSP_REVOKEDINFO) \
    LFUNC_FA_(i2d_OCSP_REVOKEDINFO) \
    LFUNC_FA_(OCSP_REVOKEDINFO_it) \
    LFUNC_FA_(OCSP_BASICRESP_new) \
    LFUNC_FA_(OCSP_BASICRESP_free) \
    LFUNC_FA_(d2i_OCSP_BASICRESP) \
    LFUNC_FA_(i2d_OCSP_BASICRESP) \
    LFUNC_FA_(OCSP_BASICRESP_it) \
    LFUNC_FA_(OCSP_RESPDATA_new) \
    LFUNC_FA_(OCSP_RESPDATA_free) \
    LFUNC_FA_(d2i_OCSP_RESPDATA) \
    LFUNC_FA_(i2d_OCSP_RESPDATA) \
    LFUNC_FA_(OCSP_RESPDATA_it) \
    LFUNC_FA_(OCSP_RESPID_new) \
    LFUNC_FA_(OCSP_RESPID_free) \
    LFUNC_FA_(d2i_OCSP_RESPID) \
    LFUNC_FA_(i2d_OCSP_RESPID) \
    LFUNC_FA_(OCSP_RESPID_it) \
    LFUNC_FA_(OCSP_RESPONSE_new) \
    LFUNC_FA_(OCSP_RESPONSE_free) \
    LFUNC_FA_(d2i_OCSP_RESPONSE) \
    LFUNC_FA_(i2d_OCSP_RESPONSE) \
    LFUNC_FA_(OCSP_RESPONSE_it) \
    LFUNC_FA_(OCSP_RESPBYTES_new) \
    LFUNC_FA_(OCSP_RESPBYTES_free) \
    LFUNC_FA_(d2i_OCSP_RESPBYTES) \
    LFUNC_FA_(i2d_OCSP_RESPBYTES) \
    LFUNC_FA_(OCSP_RESPBYTES_it) \
    LFUNC_FA_(OCSP_ONEREQ_new) \
    LFUNC_FA_(OCSP_ONEREQ_free) \
    LFUNC_FA_(d2i_OCSP_ONEREQ) \
    LFUNC_FA_(i2d_OCSP_ONEREQ) \
    LFUNC_FA_(OCSP_ONEREQ_it) \
    LFUNC_FA_(OCSP_CERTID_new) \
    LFUNC_FA_(OCSP_CERTID_free) \
    LFUNC_FA_(d2i_OCSP_CERTID) \
    LFUNC_FA_(i2d_OCSP_CERTID) \
    LFUNC_FA_(OCSP_CERTID_it) \
    LFUNC_FA_(OCSP_REQUEST_new) \
    LFUNC_FA_(OCSP_REQUEST_free) \
    LFUNC_FA_(d2i_OCSP_REQUEST) \
    LFUNC_FA_(i2d_OCSP_REQUEST) \
    LFUNC_FA_(OCSP_REQUEST_it) \
    LFUNC_FA_(OCSP_SIGNATURE_new) \
    LFUNC_FA_(OCSP_SIGNATURE_free) \
    LFUNC_FA_(d2i_OCSP_SIGNATURE) \
    LFUNC_FA_(i2d_OCSP_SIGNATURE) \
    LFUNC_FA_(OCSP_SIGNATURE_it) \
    LFUNC_FA_(OCSP_REQINFO_new) \
    LFUNC_FA_(OCSP_REQINFO_free) \
    LFUNC_FA_(d2i_OCSP_REQINFO) \
    LFUNC_FA_(i2d_OCSP_REQINFO) \
    LFUNC_FA_(OCSP_REQINFO_it) \
    LFUNC_FA_(OCSP_CRLID_new) \
    LFUNC_FA_(OCSP_CRLID_free) \
    LFUNC_FA_(d2i_OCSP_CRLID) \
    LFUNC_FA_(i2d_OCSP_CRLID) \
    LFUNC_FA_(OCSP_CRLID_it) \
    LFUNC_FA_(OCSP_SERVICELOC_new) \
    LFUNC_FA_(OCSP_SERVICELOC_free) \
    LFUNC_FA_(d2i_OCSP_SERVICELOC) \
    LFUNC_FA_(i2d_OCSP_SERVICELOC) \
    LFUNC_FA_(OCSP_SERVICELOC_it) \
    LFUNC_FA_(OCSP_response_status_str) \
    LFUNC_FA_(OCSP_cert_status_str) \
    LFUNC_FA_(OCSP_crl_reason_str) \
    LFUNC_FA_(OCSP_REQUEST_print) \
    LFUNC_FA_(OCSP_RESPONSE_print) \
    LFUNC_FA_(OCSP_basic_verify) \
    LFUNC_FA_(ERR_load_OCSP_strings) \
    LFUNC_FA_(PEM_get_EVP_CIPHER_INFO) \
    LFUNC_FA_(PEM_do_header) \
    LFUNC_FA_(PEM_read_bio) \
    LFUNC_FA_(PEM_write_bio) \
    LFUNC_FA_(PEM_bytes_read_bio) \
    LFUNC_FA_(PEM_ASN1_read_bio) \
    LFUNC_FA_(PEM_ASN1_write_bio) \
    LFUNC_FA_(PEM_X509_INFO_read_bio) \
    LFUNC_FA_(PEM_X509_INFO_write_bio) \
    LFUNC_FA_(UNIMPLEMENTED) /* PEM_SealInit */ \
    LFUNC_FA_(UNIMPLEMENTED) /* PEM_SealUpdate */ \
    LFUNC_FA_(UNIMPLEMENTED) /* PEM_SealFinal */ \
    LFUNC_FA_(PEM_SignInit) \
    LFUNC_FA_(PEM_SignUpdate) \
    LFUNC_FA_(PEM_SignFinal) \
    LFUNC_FA_(PEM_def_callback) \
    LFUNC_FA_(PEM_proc_type) \
    LFUNC_FA_(PEM_dek_info) \
    LFUNC_FA_(PEM_read_bio_X509) \
    LFUNC_FA_(PEM_write_bio_X509) \
    LFUNC_FA_(PEM_read_bio_X509_AUX) \
    LFUNC_FA_(PEM_write_bio_X509_AUX) \
    LFUNC_FA_(PEM_read_bio_X509_REQ) \
    LFUNC_FA_(PEM_write_bio_X509_REQ) \
    LFUNC_FA_(PEM_write_bio_X509_REQ_NEW) \
    LFUNC_FA_(PEM_read_bio_X509_CRL) \
    LFUNC_FA_(PEM_write_bio_X509_CRL) \
    LFUNC_FA_(PEM_read_bio_PKCS7) \
    LFUNC_FA_(PEM_write_bio_PKCS7) \
    LFUNC_FA_(PEM_read_bio_NETSCAPE_CERT_SEQUENCE) \
    LFUNC_FA_(PEM_write_bio_NETSCAPE_CERT_SEQUENCE) \
    LFUNC_FA_(PEM_read_bio_PKCS8) \
    LFUNC_FA_(PEM_write_bio_PKCS8) \
    LFUNC_FA_(PEM_read_bio_PKCS8_PRIV_KEY_INFO) \
    LFUNC_FA_(PEM_write_bio_PKCS8_PRIV_KEY_INFO) \
    LFUNC_FA_(PEM_read_bio_RSAPrivateKey) \
    LFUNC_FA_(PEM_write_bio_RSAPrivateKey) \
    LFUNC_FA_(PEM_read_bio_RSAPublicKey) \
    LFUNC_FA_(PEM_write_bio_RSAPublicKey) \
    LFUNC_FA_(PEM_read_bio_RSA_PUBKEY) \
    LFUNC_FA_(PEM_write_bio_RSA_PUBKEY) \
    LFUNC_FA_(PEM_read_bio_DSAPrivateKey) \
    LFUNC_FA_(PEM_write_bio_DSAPrivateKey) \
    LFUNC_FA_(PEM_read_bio_DSA_PUBKEY) \
    LFUNC_FA_(PEM_write_bio_DSA_PUBKEY) \
    LFUNC_FA_(PEM_read_bio_DSAparams) \
    LFUNC_FA_(PEM_write_bio_DSAparams) \
    LFUNC_FA_(PEM_read_bio_DHparams) \
    LFUNC_FA_(PEM_write_bio_DHparams) \
    LFUNC_FA_(PEM_read_bio_PrivateKey) \
    LFUNC_FA_(PEM_write_bio_PrivateKey) \
    LFUNC_FA_(PEM_read_bio_PUBKEY) \
    LFUNC_FA_(PEM_write_bio_PUBKEY) \
    LFUNC_FA_(PEM_write_bio_PKCS8PrivateKey_nid) \
    LFUNC_FA_(PEM_write_bio_PKCS8PrivateKey) \
    LFUNC_FA_(i2d_PKCS8PrivateKey_bio) \
    LFUNC_FA_(i2d_PKCS8PrivateKey_nid_bio) \
    LFUNC_FA_(d2i_PKCS8PrivateKey_bio) \
    LFUNC_FA_(ERR_load_PEM_strings) \
    LFUNC_FA_(OBSOLETE_PKCS12_x5092certbag) \
    LFUNC_FA_(OBSOLETE_PKCS12_x509crl2certbag) \
    LFUNC_FA_(OBSOLETE_PKCS12_certbag2x509) \
    LFUNC_FA_(UNIMPLEMENTED) /* PKCS12_certbag2x509crl */ \
    LFUNC_FA_(PKCS12_item_pack_safebag) \
    LFUNC_FA_(OBSOLETE_PKCS12_MAKE_KEYBAG) \
    LFUNC_FA_(PKCS8_decrypt) \
    LFUNC_FA_(PKCS12_decrypt_skey) \
    LFUNC_FA_(PKCS8_encrypt) \
    LFUNC_FA_(OBSOLETE_PKCS12_MAKE_SHKEYBAG) \
    LFUNC_FA_(PKCS12_pack_p7data) \
    LFUNC_FA_(PKCS12_unpack_p7data) \
    LFUNC_FA_(PKCS12_pack_p7encdata) \
    LFUNC_FA_(PKCS12_unpack_p7encdata) \
    LFUNC_FA_(PKCS12_pack_authsafes) \
    LFUNC_FA_(PKCS12_unpack_authsafes) \
    LFUNC_FA_(PKCS12_add_localkeyid) \
    LFUNC_FA_(PKCS12_add_friendlyname_asc) \
    LFUNC_FA_(PKCS12_add_CSPName_asc) \
    LFUNC_FA_(PKCS12_add_friendlyname_uni) \
    LFUNC_FA_(PKCS8_add_keyusage) \
    LFUNC_FA_(PKCS12_get_attr_gen) \
    LFUNC_FA_(PKCS12_get_friendlyname) \
    LFUNC_FA_(PKCS12_pbe_crypt) \
    LFUNC_FA_(PKCS12_item_decrypt_d2i) \
    LFUNC_FA_(PKCS12_item_i2d_encrypt) \
    LFUNC_FA_(PKCS12_init) \
    LFUNC_FA_(PKCS12_key_gen_asc) \
    LFUNC_FA_(PKCS12_key_gen_uni) \
    LFUNC_FA_(PKCS12_PBE_keyivgen) \
    LFUNC_FA_(PKCS12_gen_mac) \
    LFUNC_FA_(PKCS12_verify_mac) \
    LFUNC_FA_(PKCS12_set_mac) \
    LFUNC_FA_(PKCS12_setup_mac) \
    LFUNC_FA_(OPENSSL_asc2uni) \
    LFUNC_FA_(OPENSSL_uni2asc) \
    LFUNC_FA_(PKCS12_new) \
    LFUNC_FA_(PKCS12_free) \
    LFUNC_FA_(d2i_PKCS12) \
    LFUNC_FA_(i2d_PKCS12) \
    LFUNC_FA_(PKCS12_it) \
    LFUNC_FA_(PKCS12_MAC_DATA_new) \
    LFUNC_FA_(PKCS12_MAC_DATA_free) \
    LFUNC_FA_(d2i_PKCS12_MAC_DATA) \
    LFUNC_FA_(i2d_PKCS12_MAC_DATA) \
    LFUNC_FA_(PKCS12_MAC_DATA_it) \
    LFUNC_FA_(PKCS12_SAFEBAG_new) \
    LFUNC_FA_(PKCS12_SAFEBAG_free) \
    LFUNC_FA_(d2i_PKCS12_SAFEBAG) \
    LFUNC_FA_(i2d_PKCS12_SAFEBAG) \
    LFUNC_FA_(PKCS12_SAFEBAG_it) \
    LFUNC_FA_(PKCS12_BAGS_new) \
    LFUNC_FA_(PKCS12_BAGS_free) \
    LFUNC_FA_(d2i_PKCS12_BAGS) \
    LFUNC_FA_(i2d_PKCS12_BAGS) \
    LFUNC_FA_(PKCS12_BAGS_it) \
    LFUNC_FA_(PKCS12_SAFEBAGS_it) \
    LFUNC_FA_(PKCS12_AUTHSAFES_it) \
    LFUNC_FA_(PKCS12_PBE_add) \
    LFUNC_FA_(PKCS12_parse) \
    LFUNC_FA_(PKCS12_create) \
    LFUNC_FA_(i2d_PKCS12_bio) \
    LFUNC_FA_(d2i_PKCS12_bio) \
    LFUNC_FA_(PKCS12_newpass) \
    LFUNC_FA_(ERR_load_PKCS12_strings) \
    LFUNC_FA_(PKCS7_ISSUER_AND_SERIAL_digest) \
    LFUNC_FA_(PKCS7_dup) \
    LFUNC_FA_(d2i_PKCS7_bio) \
    LFUNC_FA_(i2d_PKCS7_bio) \
    LFUNC_FA_(PKCS7_ISSUER_AND_SERIAL_new) \
    LFUNC_FA_(PKCS7_ISSUER_AND_SERIAL_free) \
    LFUNC_FA_(d2i_PKCS7_ISSUER_AND_SERIAL) \
    LFUNC_FA_(i2d_PKCS7_ISSUER_AND_SERIAL) \
    LFUNC_FA_(PKCS7_ISSUER_AND_SERIAL_it) \
    LFUNC_FA_(PKCS7_SIGNER_INFO_new) \
    LFUNC_FA_(PKCS7_SIGNER_INFO_free) \
    LFUNC_FA_(d2i_PKCS7_SIGNER_INFO) \
    LFUNC_FA_(i2d_PKCS7_SIGNER_INFO) \
    LFUNC_FA_(PKCS7_SIGNER_INFO_it) \
    LFUNC_FA_(PKCS7_RECIP_INFO_new) \
    LFUNC_FA_(PKCS7_RECIP_INFO_free) \
    LFUNC_FA_(d2i_PKCS7_RECIP_INFO) \
    LFUNC_FA_(i2d_PKCS7_RECIP_INFO) \
    LFUNC_FA_(PKCS7_RECIP_INFO_it) \
    LFUNC_FA_(PKCS7_SIGNED_new) \
    LFUNC_FA_(PKCS7_SIGNED_free) \
    LFUNC_FA_(d2i_PKCS7_SIGNED) \
    LFUNC_FA_(i2d_PKCS7_SIGNED) \
    LFUNC_FA_(PKCS7_SIGNED_it) \
    LFUNC_FA_(PKCS7_ENC_CONTENT_new) \
    LFUNC_FA_(PKCS7_ENC_CONTENT_free) \
    LFUNC_FA_(d2i_PKCS7_ENC_CONTENT) \
    LFUNC_FA_(i2d_PKCS7_ENC_CONTENT) \
    LFUNC_FA_(PKCS7_ENC_CONTENT_it) \
    LFUNC_FA_(PKCS7_ENVELOPE_new) \
    LFUNC_FA_(PKCS7_ENVELOPE_free) \
    LFUNC_FA_(d2i_PKCS7_ENVELOPE) \
    LFUNC_FA_(i2d_PKCS7_ENVELOPE) \
    LFUNC_FA_(PKCS7_ENVELOPE_it) \
    LFUNC_FA_(PKCS7_SIGN_ENVELOPE_new) \
    LFUNC_FA_(PKCS7_SIGN_ENVELOPE_free) \
    LFUNC_FA_(d2i_PKCS7_SIGN_ENVELOPE) \
    LFUNC_FA_(i2d_PKCS7_SIGN_ENVELOPE) \
    LFUNC_FA_(PKCS7_SIGN_ENVELOPE_it) \
    LFUNC_FA_(PKCS7_DIGEST_new) \
    LFUNC_FA_(PKCS7_DIGEST_free) \
    LFUNC_FA_(d2i_PKCS7_DIGEST) \
    LFUNC_FA_(i2d_PKCS7_DIGEST) \
    LFUNC_FA_(PKCS7_DIGEST_it) \
    LFUNC_FA_(PKCS7_ENCRYPT_new) \
    LFUNC_FA_(PKCS7_ENCRYPT_free) \
    LFUNC_FA_(d2i_PKCS7_ENCRYPT) \
    LFUNC_FA_(i2d_PKCS7_ENCRYPT) \
    LFUNC_FA_(PKCS7_ENCRYPT_it) \
    LFUNC_FA_(PKCS7_new) \
    LFUNC_FA_(PKCS7_free) \
    LFUNC_FA_(d2i_PKCS7) \
    LFUNC_FA_(i2d_PKCS7) \
    LFUNC_FA_(PKCS7_it) \
    LFUNC_FA_(PKCS7_ATTR_SIGN_it) \
    LFUNC_FA_(PKCS7_ATTR_VERIFY_it) \
    LFUNC_FA_(PKCS7_ctrl) \
    LFUNC_FA_(PKCS7_set_type) \
    LFUNC_FA_(PKCS7_set_content) \
    LFUNC_FA_(PKCS7_SIGNER_INFO_set) \
    LFUNC_FA_(PKCS7_add_signer) \
    LFUNC_FA_(PKCS7_add_certificate) \
    LFUNC_FA_(PKCS7_add_crl) \
    LFUNC_FA_(PKCS7_content_new) \
    LFUNC_FA_(PKCS7_dataVerify) \
    LFUNC_FA_(PKCS7_signatureVerify) \
    LFUNC_FA_(PKCS7_dataInit) \
    LFUNC_FA_(PKCS7_dataFinal) \
    LFUNC_FA_(PKCS7_dataDecode) \
    LFUNC_FA_(PKCS7_add_signature) \
    LFUNC_FA_(PKCS7_cert_from_signer_info) \
    LFUNC_FA_(PKCS7_get_signer_info) \
    LFUNC_FA_(PKCS7_add_recipient) \
    LFUNC_FA_(PKCS7_add_recipient_info) \
    LFUNC_FA_(PKCS7_RECIP_INFO_set) \
    LFUNC_FA_(PKCS7_set_cipher) \
    LFUNC_FA_(PKCS7_get_issuer_and_serial) \
    LFUNC_FA_(PKCS7_digest_from_attributes) \
    LFUNC_FA_(PKCS7_add_signed_attribute) \
    LFUNC_FA_(PKCS7_add_attribute) \
    LFUNC_FA_(PKCS7_get_attribute) \
    LFUNC_FA_(PKCS7_get_signed_attribute) \
    LFUNC_FA_(PKCS7_set_signed_attributes) \
    LFUNC_FA_(PKCS7_set_attributes) \
    LFUNC_FA_(PKCS7_sign) \
    LFUNC_FA_(PKCS7_verify) \
    LFUNC_FA_(PKCS7_get0_signers) \
    LFUNC_FA_(PKCS7_encrypt) \
    LFUNC_FA_(PKCS7_decrypt) \
    LFUNC_FA_(PKCS7_add_attrib_smimecap) \
    LFUNC_FA_(PKCS7_get_smimecap) \
    LFUNC_FA_(PKCS7_simple_smimecap) \
    LFUNC_FA_(SMIME_write_PKCS7) \
    LFUNC_FA_(SMIME_read_PKCS7) \
    LFUNC_FA_(SMIME_crlf_copy) \
    LFUNC_FA_(SMIME_text) \
    LFUNC_FA_(ERR_load_PKCS7_strings) \
    LFUNC_FA_(RAND_set_rand_method) \
    LFUNC_FA_(RAND_get_rand_method) \
    LFUNC_FA_(UNIMPLEMENTED) /* RAND_SSLeay */ \
    LFUNC_FA_(UNIMPLEMENTED) /* RAND_cleanup */ \
    LFUNC_FA_(RAND_bytes) \
    LFUNC_FA_(RAND_pseudo_bytes) \
    LFUNC_FA_(RAND_seed) \
    LFUNC_FA_(RAND_add) \
    LFUNC_FA_(RAND_load_file) \
    LFUNC_FA_(RAND_write_file) \
    LFUNC_FA_(RAND_file_name) \
    LFUNC_FA_(RAND_status) \
    LFUNC_FA_(UNIMPLEMENTED) /* RAND_query_egd_bytes */ \
    LFUNC_FA_(UNIMPLEMENTED) /* RAND_egd */ \
    LFUNC_FA_(UNIMPLEMENTED) /* RAND_egd_bytes */ \
    LFUNC_FA_(RAND_poll) \
    LFUNC_FA_(ERR_load_RAND_strings) \
    LFUNC_FA_(SSL_CTX_set_msg_callback) \
    LFUNC_FA_(SSL_set_msg_callback) \
    LFUNC_FA_(SSL_CTX_sessions) \
    LFUNC_FA_(SSL_get_finished) \
    LFUNC_FA_(SSL_get_peer_finished) \
    LFUNC_FA_(BIO_f_ssl) \
    LFUNC_FA_(BIO_new_ssl) \
    LFUNC_FA_(BIO_new_ssl_connect) \
    LFUNC_FA_(BIO_new_buffer_ssl_connect) \
    LFUNC_FA_(BIO_ssl_copy_session_id) \
    LFUNC_FA_(BIO_ssl_shutdown) \
    LFUNC_FA_(SSL_CTX_set_cipher_list) \
    LFUNC_FA_(SSL_CTX_new) \
    LFUNC_FA_(SSL_CTX_free) \
    LFUNC_FA_(SSL_CTX_set_timeout) \
    LFUNC_FA_(SSL_CTX_get_timeout) \
    LFUNC_FA_(SSL_CTX_get_cert_store) \
    LFUNC_FA_(SSL_CTX_set_cert_store) \
    LFUNC_FA_(SSL_want) \
    LFUNC_FA_(SSL_clear) \
    LFUNC_FA_(SSL_CTX_flush_sessions) \
    LFUNC_FA_(SSL_get_current_cipher) \
    LFUNC_FA_(SSL_CIPHER_get_bits) \
    LFUNC_FA_(SSL_CIPHER_get_version) \
    LFUNC_FA_(SSL_CIPHER_get_name) \
    LFUNC_FA_(SSL_CIPHER_get_mac) \
    LFUNC_FA_(SSL_CIPHER_get_encryption) \
    LFUNC_FA_(SSL_CIPHER_get_authentication) \
    LFUNC_FA_(SSL_CIPHER_get_key_exchange) \
    LFUNC_FA_(UNIMPLEMENTED) /* SSL_CIPHER_get_export */ \
    LFUNC_FA_(SSL_get_fd) \
    LFUNC_FA_(SSL_get_rfd) \
    LFUNC_FA_(SSL_get_wfd) \
    LFUNC_FA_(SSL_get_cipher_list) \
    LFUNC_FA_(SSL_get_shared_ciphers) \
    LFUNC_FA_(SSL_get_read_ahead) \
    LFUNC_FA_(SSL_pending) \
    LFUNC_FA_(SSL_set_fd) \
    LFUNC_FA_(SSL_set_rfd) \
    LFUNC_FA_(SSL_set_wfd) \
    LFUNC_FA_(SSL_set_bio) \
    LFUNC_FA_(SSL_get_rbio) \
    LFUNC_FA_(SSL_get_wbio) \
    LFUNC_FA_(SSL_set_cipher_list) \
    LFUNC_FA_(SSL_set_read_ahead) \
    LFUNC_FA_(SSL_get_verify_mode) \
    LFUNC_FA_(SSL_get_verify_depth) \
    LFUNC_FA_(SSL_get_verify_callback) \
    LFUNC_FA_(SSL_set_verify) \
    LFUNC_FA_(SSL_set_verify_depth) \
    LFUNC_FA_(SSL_use_RSAPrivateKey) \
    LFUNC_FA_(SSL_use_RSAPrivateKey_ASN1) \
    LFUNC_FA_(SSL_use_PrivateKey) \
    LFUNC_FA_(SSL_use_PrivateKey_ASN1) \
    LFUNC_FA_(SSL_use_certificate) \
    LFUNC_FA_(SSL_use_certificate_ASN1) \
    LFUNC_FA_(SSL_use_RSAPrivateKey_file) \
    LFUNC_FA_(SSL_use_PrivateKey_file) \
    LFUNC_FA_(SSL_use_certificate_file) \
    LFUNC_FA_(SSL_CTX_use_RSAPrivateKey_file) \
    LFUNC_FA_(SSL_CTX_use_PrivateKey_file) \
    LFUNC_FA_(SSL_CTX_use_certificate_file) \
    LFUNC_FA_(SSL_CTX_use_certificate_chain_file) \
    LFUNC_FA_(SSL_load_client_CA_file) \
    LFUNC_FA_(SSL_add_file_cert_subjects_to_stack) \
    LFUNC_FA_(SSL_add_dir_cert_subjects_to_stack) \
    LFUNC_FA_(OBSOLETE_SSL_load_error_strings) \
    LFUNC_FA_(SSL_state_string) \
    LFUNC_FA_(SSL_rstate_string) \
    LFUNC_FA_(SSL_state_string_long) \
    LFUNC_FA_(SSL_rstate_string_long) \
    LFUNC_FA_(SSL_SESSION_get_time) \
    LFUNC_FA_(SSL_SESSION_set_time) \
    LFUNC_FA_(SSL_SESSION_get_timeout) \
    LFUNC_FA_(SSL_SESSION_set_timeout) \
    LFUNC_FA_(SSL_copy_session_id) \
    LFUNC_FA_(SSL_SESSION_new) \
    LFUNC_FA_(UNIMPLEMENTED) /* SSL_SESSION_hash */ \
    LFUNC_FA_(UNIMPLEMENTED) /* SSL_SESSION_cmp */ \
    LFUNC_FA_(SSL_SESSION_print) \
    LFUNC_FA_(SSL_SESSION_free) \
    LFUNC_FA_(i2d_SSL_SESSION) \
    LFUNC_FA_(SSL_set_session) \
    LFUNC_FA_(SSL_CTX_add_session) \
    LFUNC_FA_(SSL_CTX_remove_session) \
    LFUNC_FA_(SSL_CTX_set_generate_session_id) \
    LFUNC_FA_(SSL_set_generate_session_id) \
    LFUNC_FA_(SSL_has_matching_session_id) \
    LFUNC_FA_(d2i_SSL_SESSION) \
    LFUNC_FA_(SSL_get1_peer_certificate) \
    LFUNC_FA_(SSL_get_peer_cert_chain) \
    LFUNC_FA_(SSL_CTX_get_verify_mode) \
    LFUNC_FA_(SSL_CTX_get_verify_depth) \
    LFUNC_FA_(SSL_CTX_get_verify_callback) \
    LFUNC_FA_(SSL_CTX_set_verify) \
    LFUNC_FA_(SSL_CTX_set_verify_depth) \
    LFUNC_FA_(SSL_CTX_set_cert_verify_callback) \
    LFUNC_FA_(SSL_CTX_use_RSAPrivateKey) \
    LFUNC_FA_(SSL_CTX_use_RSAPrivateKey_ASN1) \
    LFUNC_FA_(SSL_CTX_use_PrivateKey) \
    LFUNC_FA_(SSL_CTX_use_PrivateKey_ASN1) \
    LFUNC_FA_(SSL_CTX_use_certificate) \
    LFUNC_FA_(SSL_CTX_use_certificate_ASN1) \
    LFUNC_FA_(SSL_CTX_set_default_passwd_cb) \
    LFUNC_FA_(SSL_CTX_set_default_passwd_cb_userdata) \
    LFUNC_FA_(SSL_CTX_check_private_key) \
    LFUNC_FA_(SSL_check_private_key) \
    LFUNC_FA_(SSL_CTX_set_session_id_context) \
    LFUNC_FA_(SSL_new) \
    LFUNC_FA_(SSL_set_session_id_context) \
    LFUNC_FA_(SSL_CTX_set_purpose) \
    LFUNC_FA_(SSL_set_purpose) \
    LFUNC_FA_(SSL_CTX_set_trust) \
    LFUNC_FA_(SSL_set_trust) \
    LFUNC_FA_(SSL_free) \
    LFUNC_FA_(SSL_accept) \
    LFUNC_FA_(SSL_connect) \
    LFUNC_FA_(SSL_read) \
    LFUNC_FA_(SSL_peek) \
    LFUNC_FA_(SSL_write) \
    LFUNC_FA_(SSL_ctrl) \
    LFUNC_FA_(SSL_callback_ctrl) \
    LFUNC_FA_(SSL_CTX_ctrl) \
    LFUNC_FA_(SSL_CTX_callback_ctrl) \
    LFUNC_FA_(SSL_get_error) \
    LFUNC_FA_(SSL_get_version) \
    LFUNC_FA_(SSL_CTX_set_ssl_version) \
    LFUNC_FA_(UNIMPLEMENTED) /* SSLv2_method */ \
    LFUNC_FA_(UNIMPLEMENTED) /* SSLv2_server_method */ \
    LFUNC_FA_(UNIMPLEMENTED) /* SSLv2_client_method */ \
    LFUNC_FA_(UNIMPLEMENTED) /* SSLv3_method */ \
    LFUNC_FA_(UNIMPLEMENTED) /* SSLv3_server_method */ \
    LFUNC_FA_(UNIMPLEMENTED) /* SSLv3_client_method */ \
    LFUNC_FA_(UNIMPLEMENTED) /* SSLv23_method */ \
    LFUNC_FA_(UNIMPLEMENTED) /* SSLv23_server_method */ \
    LFUNC_FA_(UNIMPLEMENTED) /* SSLv23_client_method */ \
    LFUNC_FA_(TLSv1_method) \
    LFUNC_FA_(TLSv1_server_method) \
    LFUNC_FA_(TLSv1_client_method) \
    LFUNC_FA_(SSL_get_ciphers) \
    LFUNC_FA_(SSL_do_handshake) \
    LFUNC_FA_(SSL_renegotiate) \
    LFUNC_FA_(SSL_renegotiate_pending) \
    LFUNC_FA_(SSL_shutdown) \
    LFUNC_FA_(SSL_get_ssl_method) \
    LFUNC_FA_(SSL_set_ssl_method) \
    LFUNC_FA_(SSL_alert_type_string_long) \
    LFUNC_FA_(SSL_alert_type_string) \
    LFUNC_FA_(SSL_alert_desc_string_long) \
    LFUNC_FA_(SSL_alert_desc_string) \
    LFUNC_FA_(SSL_set_client_CA_list) \
    LFUNC_FA_(SSL_CTX_set_client_CA_list) \
    LFUNC_FA_(SSL_get_client_CA_list) \
    LFUNC_FA_(SSL_CTX_get_client_CA_list) \
    LFUNC_FA_(SSL_add_client_CA) \
    LFUNC_FA_(SSL_CTX_add_client_CA) \
    LFUNC_FA_(SSL_set_connect_state) \
    LFUNC_FA_(SSL_set_accept_state) \
    LFUNC_FA_(SSL_get_default_timeout) \
    LFUNC_FA_(OBSOLETE_SSL_library_init) \
    LFUNC_FA_(SSL_CIPHER_description) \
    LFUNC_FA_(SSL_dup_CA_list) \
    LFUNC_FA_(SSL_dup) \
    LFUNC_FA_(SSL_get_certificate) \
    LFUNC_FA_(SSL_get_privatekey) \
    LFUNC_FA_(SSL_CTX_set_quiet_shutdown) \
    LFUNC_FA_(SSL_CTX_get_quiet_shutdown) \
    LFUNC_FA_(SSL_set_quiet_shutdown) \
    LFUNC_FA_(SSL_get_quiet_shutdown) \
    LFUNC_FA_(SSL_set_shutdown) \
    LFUNC_FA_(SSL_get_shutdown) \
    LFUNC_FA_(SSL_version) \
    LFUNC_FA_(SSL_CTX_set_default_verify_paths) \
    LFUNC_FA_(SSL_CTX_load_verify_locations) \
    LFUNC_FA_(SSL_get_session) \
    LFUNC_FA_(SSL_get1_session) \
    LFUNC_FA_(SSL_get_SSL_CTX) \
    LFUNC_FA_(SSL_set_info_callback) \
    LFUNC_FA_(SSL_get_info_callback) \
    LFUNC_FA_(UNIMPLEMENTED) /* SSL_state */ \
    LFUNC_FA_(SSL_set_verify_result) \
    LFUNC_FA_(SSL_get_verify_result) \
    LFUNC_FA_(SSL_set_ex_data) \
    LFUNC_FA_(SSL_get_ex_data) \
    LFUNC_FA_(OBSOLETE_SSL_get_ex_new_index) \
    LFUNC_FA_(SSL_SESSION_set_ex_data) \
    LFUNC_FA_(SSL_SESSION_get_ex_data) \
    LFUNC_FA_(OBSOLETE_SSL_SESSION_get_ex_new_index) \
    LFUNC_FA_(SSL_CTX_set_ex_data) \
    LFUNC_FA_(SSL_CTX_get_ex_data) \
    LFUNC_FA_(OBSOLETE_SSL_CTX_get_ex_new_index) \
    LFUNC_FA_(SSL_get_ex_data_X509_STORE_CTX_idx) \
    LFUNC_FA_(UNIMPLEMENTED) /* SSL_CTX_set_tmp_rsa_callback */ \
    LFUNC_FA_(UNIMPLEMENTED) /* SSL_set_tmp_rsa_callback */ \
    LFUNC_FA_(SSL_CTX_set_tmp_dh_callback) \
    LFUNC_FA_(SSL_set_tmp_dh_callback) \
    LFUNC_FA_(SSL_COMP_add_compression_method) \
    LFUNC_FA_(ERR_load_SSL_strings) \
    LFUNC_FA_(OPENSSL_sk_num) \
    LFUNC_FA_(OPENSSL_sk_value) \
    LFUNC_FA_(OPENSSL_sk_set) \
    LFUNC_FA_(OPENSSL_sk_new) \
    LFUNC_FA_(OPENSSL_sk_new_null) \
    LFUNC_FA_(OPENSSL_sk_free) \
    LFUNC_FA_(OPENSSL_sk_pop_free) \
    LFUNC_FA_(OPENSSL_sk_insert) \
    LFUNC_FA_(OPENSSL_sk_delete) \
    LFUNC_FA_(OPENSSL_sk_delete_ptr) \
    LFUNC_FA_(OPENSSL_sk_find) \
    LFUNC_FA_(OPENSSL_sk_push) \
    LFUNC_FA_(OPENSSL_sk_unshift) \
    LFUNC_FA_(OPENSSL_sk_shift) \
    LFUNC_FA_(OPENSSL_sk_pop) \
    LFUNC_FA_(OPENSSL_sk_zero) \
    LFUNC_FA_(OPENSSL_sk_set_cmp_func) \
    LFUNC_FA_(OPENSSL_sk_dup) \
    LFUNC_FA_(OPENSSL_sk_sort) \
    LFUNC_FA_(OPENSSL_sk_is_sorted) \
    LFUNC_FA_(UNIMPLEMENTED) /* ms_time_new */ \
    LFUNC_FA_(UNIMPLEMENTED) /* ms_time_free */ \
    LFUNC_FA_(UNIMPLEMENTED) /* ms_time_get */ \
    LFUNC_FA_(UNIMPLEMENTED) /* ms_time_diff */ \
    LFUNC_FA_(UNIMPLEMENTED) /* ms_time_cmp */ \
    LFUNC_FA_(TXT_DB_read) \
    LFUNC_FA_(TXT_DB_write) \
    LFUNC_FA_(TXT_DB_create_index) \
    LFUNC_FA_(TXT_DB_free) \
    LFUNC_FA_(TXT_DB_get_by_index) \
    LFUNC_FA_(TXT_DB_insert) \
    LFUNC_FA_(UI_new) \
    LFUNC_FA_(UI_new_method) \
    LFUNC_FA_(UI_free) \
    LFUNC_FA_(UI_add_input_string) \
    LFUNC_FA_(UI_dup_input_string) \
    LFUNC_FA_(UI_add_verify_string) \
    LFUNC_FA_(UI_dup_verify_string) \
    LFUNC_FA_(UI_add_input_boolean) \
    LFUNC_FA_(UI_dup_input_boolean) \
    LFUNC_FA_(UI_add_info_string) \
    LFUNC_FA_(UI_dup_info_string) \
    LFUNC_FA_(UI_add_error_string) \
    LFUNC_FA_(UI_dup_error_string) \
    LFUNC_FA_(UI_construct_prompt) \
    LFUNC_FA_(UI_add_user_data) \
    LFUNC_FA_(UI_get0_user_data) \
    LFUNC_FA_(UI_get0_result) \
    LFUNC_FA_(UI_process) \
    LFUNC_FA_(UI_ctrl) \
    LFUNC_FA_(OBSOLETE_UI_get_ex_new_index) \
    LFUNC_FA_(UI_set_ex_data) \
    LFUNC_FA_(UI_get_ex_data) \
    LFUNC_FA_(UI_set_default_method) \
    LFUNC_FA_(UI_get_default_method) \
    LFUNC_FA_(UI_get_method) \
    LFUNC_FA_(UI_set_method) \
    LFUNC_FA_(UI_OpenSSL) \
    LFUNC_FA_(UI_create_method) \
    LFUNC_FA_(UI_destroy_method) \
    LFUNC_FA_(UI_method_set_opener) \
    LFUNC_FA_(UI_method_set_writer) \
    LFUNC_FA_(UI_method_set_flusher) \
    LFUNC_FA_(UI_method_set_reader) \
    LFUNC_FA_(UI_method_set_closer) \
    LFUNC_FA_(UI_method_get_opener) \
    LFUNC_FA_(UI_method_get_writer) \
    LFUNC_FA_(UI_method_get_flusher) \
    LFUNC_FA_(UI_method_get_reader) \
    LFUNC_FA_(UI_method_get_closer) \
    LFUNC_FA_(UI_get_string_type) \
    LFUNC_FA_(UI_get_input_flags) \
    LFUNC_FA_(UI_get0_output_string) \
    LFUNC_FA_(UI_get0_action_string) \
    LFUNC_FA_(UI_get0_result_string) \
    LFUNC_FA_(UI_get0_test_string) \
    LFUNC_FA_(UI_get_result_minsize) \
    LFUNC_FA_(UI_get_result_maxsize) \
    LFUNC_FA_(UI_set_result) \
    LFUNC_FA_(UI_UTIL_read_pw_string) \
    LFUNC_FA_(UI_UTIL_read_pw) \
    LFUNC_FA_(ERR_load_UI_strings) \
    LFUNC_FA_(UNIMPLEMENTED) /* _ossl_old_des_read_pw_string */ \
    LFUNC_FA_(UNIMPLEMENTED) /* _ossl_old_des_read_pw */ \
    LFUNC_FA_(X509_verify_cert_error_string) \
    LFUNC_FA_(X509_verify) \
    LFUNC_FA_(X509_REQ_verify) \
    LFUNC_FA_(X509_CRL_verify) \
    LFUNC_FA_(NETSCAPE_SPKI_verify) \
    LFUNC_FA_(NETSCAPE_SPKI_b64_decode) \
    LFUNC_FA_(NETSCAPE_SPKI_b64_encode) \
    LFUNC_FA_(NETSCAPE_SPKI_get_pubkey) \
    LFUNC_FA_(NETSCAPE_SPKI_set_pubkey) \
    LFUNC_FA_(NETSCAPE_SPKI_print) \
    LFUNC_FA_(X509_signature_print) \
    LFUNC_FA_(X509_sign) \
    LFUNC_FA_(X509_REQ_sign) \
    LFUNC_FA_(X509_CRL_sign) \
    LFUNC_FA_(NETSCAPE_SPKI_sign) \
    LFUNC_FA_(X509_pubkey_digest) \
    LFUNC_FA_(X509_digest) \
    LFUNC_FA_(X509_CRL_digest) \
    LFUNC_FA_(X509_REQ_digest) \
    LFUNC_FA_(X509_NAME_digest) \
    LFUNC_FA_(d2i_X509_bio) \
    LFUNC_FA_(i2d_X509_bio) \
    LFUNC_FA_(d2i_X509_CRL_bio) \
    LFUNC_FA_(i2d_X509_CRL_bio) \
    LFUNC_FA_(d2i_X509_REQ_bio) \
    LFUNC_FA_(i2d_X509_REQ_bio) \
    LFUNC_FA_(d2i_RSAPrivateKey_bio) \
    LFUNC_FA_(i2d_RSAPrivateKey_bio) \
    LFUNC_FA_(d2i_RSAPublicKey_bio) \
    LFUNC_FA_(i2d_RSAPublicKey_bio) \
    LFUNC_FA_(d2i_RSA_PUBKEY_bio) \
    LFUNC_FA_(i2d_RSA_PUBKEY_bio) \
    LFUNC_FA_(d2i_DSA_PUBKEY_bio) \
    LFUNC_FA_(i2d_DSA_PUBKEY_bio) \
    LFUNC_FA_(d2i_DSAPrivateKey_bio) \
    LFUNC_FA_(i2d_DSAPrivateKey_bio) \
    LFUNC_FA_(d2i_PKCS8_bio) \
    LFUNC_FA_(i2d_PKCS8_bio) \
    LFUNC_FA_(d2i_PKCS8_PRIV_KEY_INFO_bio) \
    LFUNC_FA_(i2d_PKCS8_PRIV_KEY_INFO_bio) \
    LFUNC_FA_(i2d_PKCS8PrivateKeyInfo_bio) \
    LFUNC_FA_(i2d_PrivateKey_bio) \
    LFUNC_FA_(d2i_PrivateKey_bio) \
    LFUNC_FA_(i2d_PUBKEY_bio) \
    LFUNC_FA_(d2i_PUBKEY_bio) \
    LFUNC_FA_(X509_dup) \
    LFUNC_FA_(X509_ATTRIBUTE_dup) \
    LFUNC_FA_(X509_EXTENSION_dup) \
    LFUNC_FA_(X509_CRL_dup) \
    LFUNC_FA_(X509_REQ_dup) \
    LFUNC_FA_(X509_ALGOR_dup) \
    LFUNC_FA_(X509_NAME_dup) \
    LFUNC_FA_(X509_NAME_ENTRY_dup) \
    LFUNC_FA_(X509_cmp_time) \
    LFUNC_FA_(X509_cmp_current_time) \
    LFUNC_FA_(X509_time_adj) \
    LFUNC_FA_(X509_gmtime_adj) \
    LFUNC_FA_(X509_get_default_cert_area) \
    LFUNC_FA_(X509_get_default_cert_dir) \
    LFUNC_FA_(X509_get_default_cert_file) \
    LFUNC_FA_(X509_get_default_cert_dir_env) \
    LFUNC_FA_(X509_get_default_cert_file_env) \
    LFUNC_FA_(X509_get_default_private_dir) \
    LFUNC_FA_(X509_to_X509_REQ) \
    LFUNC_FA_(X509_REQ_to_X509) \
    LFUNC_FA_(X509_ALGOR_new) \
    LFUNC_FA_(X509_ALGOR_free) \
    LFUNC_FA_(d2i_X509_ALGOR) \
    LFUNC_FA_(i2d_X509_ALGOR) \
    LFUNC_FA_(X509_ALGOR_it) \
    LFUNC_FA_(X509_VAL_new) \
    LFUNC_FA_(X509_VAL_free) \
    LFUNC_FA_(d2i_X509_VAL) \
    LFUNC_FA_(i2d_X509_VAL) \
    LFUNC_FA_(X509_VAL_it) \
    LFUNC_FA_(X509_PUBKEY_new) \
    LFUNC_FA_(X509_PUBKEY_free) \
    LFUNC_FA_(d2i_X509_PUBKEY) \
    LFUNC_FA_(i2d_X509_PUBKEY) \
    LFUNC_FA_(X509_PUBKEY_it) \
    LFUNC_FA_(X509_PUBKEY_set) \
    LFUNC_FA_(X509_PUBKEY_get) \
    LFUNC_FA_(X509_get_pubkey_parameters) \
    LFUNC_FA_(i2d_PUBKEY) \
    LFUNC_FA_(d2i_PUBKEY) \
    LFUNC_FA_(i2d_RSA_PUBKEY) \
    LFUNC_FA_(d2i_RSA_PUBKEY) \
    LFUNC_FA_(i2d_DSA_PUBKEY) \
    LFUNC_FA_(d2i_DSA_PUBKEY) \
    LFUNC_FA_(X509_SIG_new) \
    LFUNC_FA_(X509_SIG_free) \
    LFUNC_FA_(d2i_X509_SIG) \
    LFUNC_FA_(i2d_X509_SIG) \
    LFUNC_FA_(X509_SIG_it) \
    LFUNC_FA_(X509_REQ_INFO_new) \
    LFUNC_FA_(X509_REQ_INFO_free) \
    LFUNC_FA_(d2i_X509_REQ_INFO) \
    LFUNC_FA_(i2d_X509_REQ_INFO) \
    LFUNC_FA_(X509_REQ_INFO_it) \
    LFUNC_FA_(X509_REQ_new) \
    LFUNC_FA_(X509_REQ_free) \
    LFUNC_FA_(d2i_X509_REQ) \
    LFUNC_FA_(i2d_X509_REQ) \
    LFUNC_FA_(X509_REQ_it) \
    LFUNC_FA_(X509_ATTRIBUTE_new) \
    LFUNC_FA_(X509_ATTRIBUTE_free) \
    LFUNC_FA_(d2i_X509_ATTRIBUTE) \
    LFUNC_FA_(i2d_X509_ATTRIBUTE) \
    LFUNC_FA_(X509_ATTRIBUTE_it) \
    LFUNC_FA_(X509_ATTRIBUTE_create) \
    LFUNC_FA_(X509_EXTENSION_new) \
    LFUNC_FA_(X509_EXTENSION_free) \
    LFUNC_FA_(d2i_X509_EXTENSION) \
    LFUNC_FA_(i2d_X509_EXTENSION) \
    LFUNC_FA_(X509_EXTENSION_it) \
    LFUNC_FA_(X509_NAME_ENTRY_new) \
    LFUNC_FA_(X509_NAME_ENTRY_free) \
    LFUNC_FA_(d2i_X509_NAME_ENTRY) \
    LFUNC_FA_(i2d_X509_NAME_ENTRY) \
    LFUNC_FA_(X509_NAME_ENTRY_it) \
    LFUNC_FA_(X509_NAME_new) \
    LFUNC_FA_(X509_NAME_free) \
    LFUNC_FA_(d2i_X509_NAME) \
    LFUNC_FA_(i2d_X509_NAME) \
    LFUNC_FA_(X509_NAME_it) \
    LFUNC_FA_(X509_NAME_set) \
    LFUNC_FA_(X509_CINF_new) \
    LFUNC_FA_(X509_CINF_free) \
    LFUNC_FA_(d2i_X509_CINF) \
    LFUNC_FA_(i2d_X509_CINF) \
    LFUNC_FA_(X509_CINF_it) \
    LFUNC_FA_(X509_new) \
    LFUNC_FA_(X509_free) \
    LFUNC_FA_(d2i_X509) \
    LFUNC_FA_(i2d_X509) \
    LFUNC_FA_(X509_it) \
    LFUNC_FA_(X509_CERT_AUX_new) \
    LFUNC_FA_(X509_CERT_AUX_free) \
    LFUNC_FA_(d2i_X509_CERT_AUX) \
    LFUNC_FA_(i2d_X509_CERT_AUX) \
    LFUNC_FA_(X509_CERT_AUX_it) \
    LFUNC_FA_(OBSOLETE_X509_get_ex_new_index) \
    LFUNC_FA_(X509_set_ex_data) \
    LFUNC_FA_(X509_get_ex_data) \
    LFUNC_FA_(i2d_X509_AUX) \
    LFUNC_FA_(d2i_X509_AUX) \
    LFUNC_FA_(X509_alias_set1) \
    LFUNC_FA_(X509_keyid_set1) \
    LFUNC_FA_(X509_alias_get0) \
    LFUNC_FA_(X509_TRUST_set_default) \
    LFUNC_FA_(X509_TRUST_set) \
    LFUNC_FA_(X509_add1_trust_object) \
    LFUNC_FA_(X509_add1_reject_object) \
    LFUNC_FA_(X509_trust_clear) \
    LFUNC_FA_(X509_reject_clear) \
    LFUNC_FA_(X509_REVOKED_new) \
    LFUNC_FA_(X509_REVOKED_free) \
    LFUNC_FA_(d2i_X509_REVOKED) \
    LFUNC_FA_(i2d_X509_REVOKED) \
    LFUNC_FA_(X509_REVOKED_it) \
    LFUNC_FA_(X509_CRL_INFO_new) \
    LFUNC_FA_(X509_CRL_INFO_free) \
    LFUNC_FA_(d2i_X509_CRL_INFO) \
    LFUNC_FA_(i2d_X509_CRL_INFO) \
    LFUNC_FA_(X509_CRL_INFO_it) \
    LFUNC_FA_(X509_CRL_new) \
    LFUNC_FA_(X509_CRL_free) \
    LFUNC_FA_(d2i_X509_CRL) \
    LFUNC_FA_(i2d_X509_CRL) \
    LFUNC_FA_(X509_CRL_it) \
    LFUNC_FA_(X509_CRL_add0_revoked) \
    LFUNC_FA_(X509_PKEY_new) \
    LFUNC_FA_(X509_PKEY_free) \
    LFUNC_FA_(UNIMPLEMENTED) /* i2d_X509_PKEY */ \
    LFUNC_FA_(UNIMPLEMENTED) /* d2i_X509_PKEY */ \
    LFUNC_FA_(NETSCAPE_SPKI_new) \
    LFUNC_FA_(NETSCAPE_SPKI_free) \
    LFUNC_FA_(d2i_NETSCAPE_SPKI) \
    LFUNC_FA_(i2d_NETSCAPE_SPKI) \
    LFUNC_FA_(NETSCAPE_SPKI_it) \
    LFUNC_FA_(NETSCAPE_SPKAC_new) \
    LFUNC_FA_(NETSCAPE_SPKAC_free) \
    LFUNC_FA_(d2i_NETSCAPE_SPKAC) \
    LFUNC_FA_(i2d_NETSCAPE_SPKAC) \
    LFUNC_FA_(NETSCAPE_SPKAC_it) \
    LFUNC_FA_(NETSCAPE_CERT_SEQUENCE_new) \
    LFUNC_FA_(NETSCAPE_CERT_SEQUENCE_free) \
    LFUNC_FA_(d2i_NETSCAPE_CERT_SEQUENCE) \
    LFUNC_FA_(i2d_NETSCAPE_CERT_SEQUENCE) \
    LFUNC_FA_(NETSCAPE_CERT_SEQUENCE_it) \
    LFUNC_FA_(X509_INFO_new) \
    LFUNC_FA_(X509_INFO_free) \
    LFUNC_FA_(X509_NAME_oneline) \
    LFUNC_FA_(ASN1_verify) \
    LFUNC_FA_(ASN1_digest) \
    LFUNC_FA_(ASN1_sign) \
    LFUNC_FA_(ASN1_item_digest) \
    LFUNC_FA_(ASN1_item_verify) \
    LFUNC_FA_(ASN1_item_sign) \
    LFUNC_FA_(X509_set_version) \
    LFUNC_FA_(X509_set_serialNumber) \
    LFUNC_FA_(X509_get_serialNumber) \
    LFUNC_FA_(X509_set_issuer_name) \
    LFUNC_FA_(X509_get_issuer_name) \
    LFUNC_FA_(X509_set_subject_name) \
    LFUNC_FA_(X509_get_subject_name) \
    LFUNC_FA_(X509_set1_notBefore) \
    LFUNC_FA_(X509_set1_notAfter) \
    LFUNC_FA_(X509_set_pubkey) \
    LFUNC_FA_(X509_get_pubkey) \
    LFUNC_FA_(X509_get0_pubkey_bitstr) \
    LFUNC_FA_(X509_certificate_type) \
    LFUNC_FA_(X509_REQ_set_version) \
    LFUNC_FA_(X509_REQ_set_subject_name) \
    LFUNC_FA_(X509_REQ_set_pubkey) \
    LFUNC_FA_(X509_REQ_get_pubkey) \
    LFUNC_FA_(X509_REQ_extension_nid) \
    LFUNC_FA_(X509_REQ_get_extension_nids) \
    LFUNC_FA_(X509_REQ_set_extension_nids) \
    LFUNC_FA_(X509_REQ_get_extensions) \
    LFUNC_FA_(X509_REQ_add_extensions_nid) \
    LFUNC_FA_(X509_REQ_add_extensions) \
    LFUNC_FA_(X509_REQ_get_attr_count) \
    LFUNC_FA_(X509_REQ_get_attr_by_NID) \
    LFUNC_FA_(X509_REQ_get_attr_by_OBJ) \
    LFUNC_FA_(X509_REQ_get_attr) \
    LFUNC_FA_(X509_REQ_delete_attr) \
    LFUNC_FA_(X509_REQ_add1_attr) \
    LFUNC_FA_(X509_REQ_add1_attr_by_OBJ) \
    LFUNC_FA_(X509_REQ_add1_attr_by_NID) \
    LFUNC_FA_(X509_REQ_add1_attr_by_txt) \
    LFUNC_FA_(X509_CRL_set_version) \
    LFUNC_FA_(X509_CRL_set_issuer_name) \
    LFUNC_FA_(X509_CRL_set1_lastUpdate) \
    LFUNC_FA_(X509_CRL_set1_nextUpdate) \
    LFUNC_FA_(X509_CRL_sort) \
    LFUNC_FA_(X509_REVOKED_set_serialNumber) \
    LFUNC_FA_(X509_REVOKED_set_revocationDate) \
    LFUNC_FA_(X509_check_private_key) \
    LFUNC_FA_(X509_issuer_and_serial_cmp) \
    LFUNC_FA_(X509_issuer_and_serial_hash) \
    LFUNC_FA_(X509_issuer_name_cmp) \
    LFUNC_FA_(X509_issuer_name_hash) \
    LFUNC_FA_(X509_subject_name_cmp) \
    LFUNC_FA_(X509_subject_name_hash) \
    LFUNC_FA_(X509_cmp) \
    LFUNC_FA_(X509_NAME_cmp) \
    LFUNC_FA_(OBSOLETE_X509_NAME_hash) \
    LFUNC_FA_(X509_CRL_cmp) \
    LFUNC_FA_(X509_NAME_print) \
    LFUNC_FA_(X509_NAME_print_ex) \
    LFUNC_FA_(X509_print_ex) \
    LFUNC_FA_(X509_print) \
    LFUNC_FA_(X509_ocspid_print) \
    LFUNC_FA_(UNIMPLEMENTED) /* X509_CERT_AUX_print */ \
    LFUNC_FA_(X509_CRL_print) \
    LFUNC_FA_(X509_REQ_print_ex) \
    LFUNC_FA_(X509_REQ_print) \
    LFUNC_FA_(X509_NAME_entry_count) \
    LFUNC_FA_(X509_NAME_get_text_by_NID) \
    LFUNC_FA_(X509_NAME_get_text_by_OBJ) \
    LFUNC_FA_(X509_NAME_get_index_by_NID) \
    LFUNC_FA_(X509_NAME_get_index_by_OBJ) \
    LFUNC_FA_(X509_NAME_get_entry) \
    LFUNC_FA_(X509_NAME_delete_entry) \
    LFUNC_FA_(X509_NAME_add_entry) \
    LFUNC_FA_(X509_NAME_add_entry_by_OBJ) \
    LFUNC_FA_(X509_NAME_add_entry_by_NID) \
    LFUNC_FA_(X509_NAME_ENTRY_create_by_txt) \
    LFUNC_FA_(X509_NAME_ENTRY_create_by_NID) \
    LFUNC_FA_(X509_NAME_add_entry_by_txt) \
    LFUNC_FA_(X509_NAME_ENTRY_create_by_OBJ) \
    LFUNC_FA_(X509_NAME_ENTRY_set_object) \
    LFUNC_FA_(X509_NAME_ENTRY_set_data) \
    LFUNC_FA_(X509_NAME_ENTRY_get_object) \
    LFUNC_FA_(X509_NAME_ENTRY_get_data) \
    LFUNC_FA_(X509v3_get_ext_count) \
    LFUNC_FA_(X509v3_get_ext_by_NID) \
    LFUNC_FA_(X509v3_get_ext_by_OBJ) \
    LFUNC_FA_(X509v3_get_ext_by_critical) \
    LFUNC_FA_(X509v3_get_ext) \
    LFUNC_FA_(X509v3_delete_ext) \
    LFUNC_FA_(X509v3_add_ext) \
    LFUNC_FA_(X509_get_ext_count) \
    LFUNC_FA_(X509_get_ext_by_NID) \
    LFUNC_FA_(X509_get_ext_by_OBJ) \
    LFUNC_FA_(X509_get_ext_by_critical) \
    LFUNC_FA_(X509_get_ext) \
    LFUNC_FA_(X509_delete_ext) \
    LFUNC_FA_(X509_add_ext) \
    LFUNC_FA_(X509_get_ext_d2i) \
    LFUNC_FA_(X509_add1_ext_i2d) \
    LFUNC_FA_(X509_CRL_get_ext_count) \
    LFUNC_FA_(X509_CRL_get_ext_by_NID) \
    LFUNC_FA_(X509_CRL_get_ext_by_OBJ) \
    LFUNC_FA_(X509_CRL_get_ext_by_critical) \
    LFUNC_FA_(X509_CRL_get_ext) \
    LFUNC_FA_(X509_CRL_delete_ext) \
    LFUNC_FA_(X509_CRL_add_ext) \
    LFUNC_FA_(X509_CRL_get_ext_d2i) \
    LFUNC_FA_(X509_CRL_add1_ext_i2d) \
    LFUNC_FA_(X509_REVOKED_get_ext_count) \
    LFUNC_FA_(X509_REVOKED_get_ext_by_NID) \
    LFUNC_FA_(X509_REVOKED_get_ext_by_OBJ) \
    LFUNC_FA_(X509_REVOKED_get_ext_by_critical) \
    LFUNC_FA_(X509_REVOKED_get_ext) \
    LFUNC_FA_(X509_REVOKED_delete_ext) \
    LFUNC_FA_(X509_REVOKED_add_ext) \
    LFUNC_FA_(X509_REVOKED_get_ext_d2i) \
    LFUNC_FA_(X509_REVOKED_add1_ext_i2d) \
    LFUNC_FA_(X509_EXTENSION_create_by_NID) \
    LFUNC_FA_(X509_EXTENSION_create_by_OBJ) \
    LFUNC_FA_(X509_EXTENSION_set_object) \
    LFUNC_FA_(X509_EXTENSION_set_critical) \
    LFUNC_FA_(X509_EXTENSION_set_data) \
    LFUNC_FA_(X509_EXTENSION_get_object) \
    LFUNC_FA_(X509_EXTENSION_get_data) \
    LFUNC_FA_(X509_EXTENSION_get_critical) \
    LFUNC_FA_(X509at_get_attr_count) \
    LFUNC_FA_(X509at_get_attr_by_NID) \
    LFUNC_FA_(X509at_get_attr_by_OBJ) \
    LFUNC_FA_(X509at_get_attr) \
    LFUNC_FA_(X509at_delete_attr) \
    LFUNC_FA_(X509at_add1_attr) \
    LFUNC_FA_(X509at_add1_attr_by_OBJ) \
    LFUNC_FA_(X509at_add1_attr_by_NID) \
    LFUNC_FA_(X509at_add1_attr_by_txt) \
    LFUNC_FA_(X509_ATTRIBUTE_create_by_NID) \
    LFUNC_FA_(X509_ATTRIBUTE_create_by_OBJ) \
    LFUNC_FA_(X509_ATTRIBUTE_create_by_txt) \
    LFUNC_FA_(X509_ATTRIBUTE_set1_object) \
    LFUNC_FA_(X509_ATTRIBUTE_set1_data) \
    LFUNC_FA_(X509_ATTRIBUTE_get0_data) \
    LFUNC_FA_(X509_ATTRIBUTE_count) \
    LFUNC_FA_(X509_ATTRIBUTE_get0_object) \
    LFUNC_FA_(X509_ATTRIBUTE_get0_type) \
    LFUNC_FA_(X509_verify_cert) \
    LFUNC_FA_(X509_find_by_issuer_and_serial) \
    LFUNC_FA_(X509_find_by_subject) \
    LFUNC_FA_(PBEPARAM_new) \
    LFUNC_FA_(PBEPARAM_free) \
    LFUNC_FA_(d2i_PBEPARAM) \
    LFUNC_FA_(i2d_PBEPARAM) \
    LFUNC_FA_(PBEPARAM_it) \
    LFUNC_FA_(PBE2PARAM_new) \
    LFUNC_FA_(PBE2PARAM_free) \
    LFUNC_FA_(d2i_PBE2PARAM) \
    LFUNC_FA_(i2d_PBE2PARAM) \
    LFUNC_FA_(PBE2PARAM_it) \
    LFUNC_FA_(PBKDF2PARAM_new) \
    LFUNC_FA_(PBKDF2PARAM_free) \
    LFUNC_FA_(d2i_PBKDF2PARAM) \
    LFUNC_FA_(i2d_PBKDF2PARAM) \
    LFUNC_FA_(PBKDF2PARAM_it) \
    LFUNC_FA_(PKCS5_pbe_set) \
    LFUNC_FA_(PKCS5_pbe2_set) \
    LFUNC_FA_(PKCS8_PRIV_KEY_INFO_new) \
    LFUNC_FA_(PKCS8_PRIV_KEY_INFO_free) \
    LFUNC_FA_(d2i_PKCS8_PRIV_KEY_INFO) \
    LFUNC_FA_(i2d_PKCS8_PRIV_KEY_INFO) \
    LFUNC_FA_(PKCS8_PRIV_KEY_INFO_it) \
    LFUNC_FA_(EVP_PKCS82PKEY) \
    LFUNC_FA_(EVP_PKEY2PKCS8) \
    LFUNC_FA_(UNIMPLEMENTED) /* EVP_PKEY2PKCS8_broken */ \
    LFUNC_FA_(UNIMPLEMENTED) /* PKCS8_set_broken */ \
    LFUNC_FA_(X509_check_trust) \
    LFUNC_FA_(X509_TRUST_get_count) \
    LFUNC_FA_(X509_TRUST_get0) \
    LFUNC_FA_(X509_TRUST_get_by_id) \
    LFUNC_FA_(X509_TRUST_add) \
    LFUNC_FA_(X509_TRUST_cleanup) \
    LFUNC_FA_(X509_TRUST_get_flags) \
    LFUNC_FA_(X509_TRUST_get0_name) \
    LFUNC_FA_(X509_TRUST_get_trust) \
    LFUNC_FA_(ERR_load_X509_strings) \
    LFUNC_FA_(X509_OBJECT_idx_by_subject) \
    LFUNC_FA_(X509_OBJECT_retrieve_by_subject) \
    LFUNC_FA_(X509_OBJECT_retrieve_match) \
    LFUNC_FA_(X509_OBJECT_up_ref_count) \
    LFUNC_FA_(X509_STORE_new) \
    LFUNC_FA_(X509_STORE_free) \
    LFUNC_FA_(X509_STORE_set_flags) \
    LFUNC_FA_(X509_STORE_set_purpose) \
    LFUNC_FA_(X509_STORE_set_trust) \
    LFUNC_FA_(X509_STORE_CTX_new) \
    LFUNC_FA_(X509_STORE_CTX_get1_issuer) \
    LFUNC_FA_(X509_STORE_CTX_free) \
    LFUNC_FA_(X509_STORE_CTX_init) \
    LFUNC_FA_(X509_STORE_CTX_set0_trusted_stack) \
    LFUNC_FA_(X509_STORE_CTX_cleanup) \
    LFUNC_FA_(X509_STORE_add_lookup) \
    LFUNC_FA_(X509_LOOKUP_hash_dir) \
    LFUNC_FA_(X509_LOOKUP_file) \
    LFUNC_FA_(X509_STORE_add_cert) \
    LFUNC_FA_(X509_STORE_add_crl) \
    LFUNC_FA_(X509_STORE_CTX_get_by_subject) \
    LFUNC_FA_(X509_LOOKUP_ctrl) \
    LFUNC_FA_(X509_load_cert_file) \
    LFUNC_FA_(X509_load_crl_file) \
    LFUNC_FA_(X509_load_cert_crl_file) \
    LFUNC_FA_(X509_LOOKUP_new) \
    LFUNC_FA_(X509_LOOKUP_free) \
    LFUNC_FA_(X509_LOOKUP_init) \
    LFUNC_FA_(X509_LOOKUP_by_subject) \
    LFUNC_FA_(X509_LOOKUP_by_issuer_serial) \
    LFUNC_FA_(X509_LOOKUP_by_fingerprint) \
    LFUNC_FA_(X509_LOOKUP_by_alias) \
    LFUNC_FA_(X509_LOOKUP_shutdown) \
    LFUNC_FA_(X509_STORE_load_locations) \
    LFUNC_FA_(X509_STORE_set_default_paths) \
    LFUNC_FA_(OBSOLETE_X509_STORE_CTX_get_ex_new_index) \
    LFUNC_FA_(X509_STORE_CTX_set_ex_data) \
    LFUNC_FA_(X509_STORE_CTX_get_ex_data) \
    LFUNC_FA_(X509_STORE_CTX_get_error) \
    LFUNC_FA_(X509_STORE_CTX_set_error) \
    LFUNC_FA_(X509_STORE_CTX_get_error_depth) \
    LFUNC_FA_(X509_STORE_CTX_get_current_cert) \
    LFUNC_FA_(X509_STORE_CTX_get0_chain) \
    LFUNC_FA_(X509_STORE_CTX_get1_chain) \
    LFUNC_FA_(X509_STORE_CTX_set_cert) \
    LFUNC_FA_(X509_STORE_CTX_set_purpose) \
    LFUNC_FA_(X509_STORE_CTX_set_trust) \
    LFUNC_FA_(X509_STORE_CTX_purpose_inherit) \
    LFUNC_FA_(X509_STORE_CTX_set_flags) \
    LFUNC_FA_(X509_STORE_CTX_set_time) \
    LFUNC_FA_(X509_STORE_CTX_set_verify_cb) \
    LFUNC_FA_(BASIC_CONSTRAINTS_new) \
    LFUNC_FA_(BASIC_CONSTRAINTS_free) \
    LFUNC_FA_(d2i_BASIC_CONSTRAINTS) \
    LFUNC_FA_(i2d_BASIC_CONSTRAINTS) \
    LFUNC_FA_(BASIC_CONSTRAINTS_it) \
    LFUNC_FA_(SXNET_new) \
    LFUNC_FA_(SXNET_free) \
    LFUNC_FA_(d2i_SXNET) \
    LFUNC_FA_(i2d_SXNET) \
    LFUNC_FA_(SXNET_it) \
    LFUNC_FA_(SXNETID_new) \
    LFUNC_FA_(SXNETID_free) \
    LFUNC_FA_(d2i_SXNETID) \
    LFUNC_FA_(i2d_SXNETID) \
    LFUNC_FA_(SXNETID_it) \
    LFUNC_FA_(SXNET_add_id_asc) \
    LFUNC_FA_(SXNET_add_id_ulong) \
    LFUNC_FA_(SXNET_add_id_INTEGER) \
    LFUNC_FA_(SXNET_get_id_asc) \
    LFUNC_FA_(SXNET_get_id_ulong) \
    LFUNC_FA_(SXNET_get_id_INTEGER) \
    LFUNC_FA_(AUTHORITY_KEYID_new) \
    LFUNC_FA_(AUTHORITY_KEYID_free) \
    LFUNC_FA_(d2i_AUTHORITY_KEYID) \
    LFUNC_FA_(i2d_AUTHORITY_KEYID) \
    LFUNC_FA_(AUTHORITY_KEYID_it) \
    LFUNC_FA_(PKEY_USAGE_PERIOD_new) \
    LFUNC_FA_(PKEY_USAGE_PERIOD_free) \
    LFUNC_FA_(d2i_PKEY_USAGE_PERIOD) \
    LFUNC_FA_(i2d_PKEY_USAGE_PERIOD) \
    LFUNC_FA_(PKEY_USAGE_PERIOD_it) \
    LFUNC_FA_(GENERAL_NAME_new) \
    LFUNC_FA_(GENERAL_NAME_free) \
    LFUNC_FA_(d2i_GENERAL_NAME) \
    LFUNC_FA_(i2d_GENERAL_NAME) \
    LFUNC_FA_(GENERAL_NAME_it) \
    LFUNC_FA_(i2v_GENERAL_NAME) \
    LFUNC_FA_(GENERAL_NAME_print) \
    LFUNC_FA_(GENERAL_NAMES_new) \
    LFUNC_FA_(GENERAL_NAMES_free) \
    LFUNC_FA_(d2i_GENERAL_NAMES) \
    LFUNC_FA_(i2d_GENERAL_NAMES) \
    LFUNC_FA_(GENERAL_NAMES_it) \
    LFUNC_FA_(i2v_GENERAL_NAMES) \
    LFUNC_FA_(v2i_GENERAL_NAMES) \
    LFUNC_FA_(OTHERNAME_new) \
    LFUNC_FA_(OTHERNAME_free) \
    LFUNC_FA_(d2i_OTHERNAME) \
    LFUNC_FA_(i2d_OTHERNAME) \
    LFUNC_FA_(OTHERNAME_it) \
    LFUNC_FA_(EDIPARTYNAME_new) \
    LFUNC_FA_(EDIPARTYNAME_free) \
    LFUNC_FA_(d2i_EDIPARTYNAME) \
    LFUNC_FA_(i2d_EDIPARTYNAME) \
    LFUNC_FA_(EDIPARTYNAME_it) \
    LFUNC_FA_(i2s_ASN1_OCTET_STRING) \
    LFUNC_FA_(s2i_ASN1_OCTET_STRING) \
    LFUNC_FA_(EXTENDED_KEY_USAGE_new) \
    LFUNC_FA_(EXTENDED_KEY_USAGE_free) \
    LFUNC_FA_(d2i_EXTENDED_KEY_USAGE) \
    LFUNC_FA_(i2d_EXTENDED_KEY_USAGE) \
    LFUNC_FA_(EXTENDED_KEY_USAGE_it) \
    LFUNC_FA_(i2a_ACCESS_DESCRIPTION) \
    LFUNC_FA_(CERTIFICATEPOLICIES_new) \
    LFUNC_FA_(CERTIFICATEPOLICIES_free) \
    LFUNC_FA_(d2i_CERTIFICATEPOLICIES) \
    LFUNC_FA_(i2d_CERTIFICATEPOLICIES) \
    LFUNC_FA_(CERTIFICATEPOLICIES_it) \
    LFUNC_FA_(POLICYINFO_new) \
    LFUNC_FA_(POLICYINFO_free) \
    LFUNC_FA_(d2i_POLICYINFO) \
    LFUNC_FA_(i2d_POLICYINFO) \
    LFUNC_FA_(POLICYINFO_it) \
    LFUNC_FA_(POLICYQUALINFO_new) \
    LFUNC_FA_(POLICYQUALINFO_free) \
    LFUNC_FA_(d2i_POLICYQUALINFO) \
    LFUNC_FA_(i2d_POLICYQUALINFO) \
    LFUNC_FA_(POLICYQUALINFO_it) \
    LFUNC_FA_(USERNOTICE_new) \
    LFUNC_FA_(USERNOTICE_free) \
    LFUNC_FA_(d2i_USERNOTICE) \
    LFUNC_FA_(i2d_USERNOTICE) \
    LFUNC_FA_(USERNOTICE_it) \
    LFUNC_FA_(NOTICEREF_new) \
    LFUNC_FA_(NOTICEREF_free) \
    LFUNC_FA_(d2i_NOTICEREF) \
    LFUNC_FA_(i2d_NOTICEREF) \
    LFUNC_FA_(NOTICEREF_it) \
    LFUNC_FA_(CRL_DIST_POINTS_new) \
    LFUNC_FA_(CRL_DIST_POINTS_free) \
    LFUNC_FA_(d2i_CRL_DIST_POINTS) \
    LFUNC_FA_(i2d_CRL_DIST_POINTS) \
    LFUNC_FA_(CRL_DIST_POINTS_it) \
    LFUNC_FA_(DIST_POINT_new) \
    LFUNC_FA_(DIST_POINT_free) \
    LFUNC_FA_(d2i_DIST_POINT) \
    LFUNC_FA_(i2d_DIST_POINT) \
    LFUNC_FA_(DIST_POINT_it) \
    LFUNC_FA_(DIST_POINT_NAME_new) \
    LFUNC_FA_(DIST_POINT_NAME_free) \
    LFUNC_FA_(d2i_DIST_POINT_NAME) \
    LFUNC_FA_(i2d_DIST_POINT_NAME) \
    LFUNC_FA_(DIST_POINT_NAME_it) \
    LFUNC_FA_(ACCESS_DESCRIPTION_new) \
    LFUNC_FA_(ACCESS_DESCRIPTION_free) \
    LFUNC_FA_(d2i_ACCESS_DESCRIPTION) \
    LFUNC_FA_(i2d_ACCESS_DESCRIPTION) \
    LFUNC_FA_(ACCESS_DESCRIPTION_it) \
    LFUNC_FA_(AUTHORITY_INFO_ACCESS_new) \
    LFUNC_FA_(AUTHORITY_INFO_ACCESS_free) \
    LFUNC_FA_(d2i_AUTHORITY_INFO_ACCESS) \
    LFUNC_FA_(i2d_AUTHORITY_INFO_ACCESS) \
    LFUNC_FA_(AUTHORITY_INFO_ACCESS_it) \
    LFUNC_FA_(v2i_GENERAL_NAME) \
    LFUNC_FA_(X509V3_conf_free) \
    LFUNC_FA_(X509V3_EXT_nconf_nid) \
    LFUNC_FA_(X509V3_EXT_nconf) \
    LFUNC_FA_(X509V3_EXT_add_nconf_sk) \
    LFUNC_FA_(X509V3_EXT_add_nconf) \
    LFUNC_FA_(X509V3_EXT_REQ_add_nconf) \
    LFUNC_FA_(X509V3_EXT_CRL_add_nconf) \
    LFUNC_FA_(X509V3_EXT_conf_nid) \
    LFUNC_FA_(X509V3_EXT_conf) \
    LFUNC_FA_(X509V3_EXT_add_conf) \
    LFUNC_FA_(X509V3_EXT_REQ_add_conf) \
    LFUNC_FA_(X509V3_EXT_CRL_add_conf) \
    LFUNC_FA_(X509V3_add_value_bool_nf) \
    LFUNC_FA_(X509V3_get_value_bool) \
    LFUNC_FA_(X509V3_get_value_int) \
    LFUNC_FA_(X509V3_set_nconf) \
    LFUNC_FA_(X509V3_set_conf_lhash) \
    LFUNC_FA_(X509V3_get_string) \
    LFUNC_FA_(X509V3_get_section) \
    LFUNC_FA_(X509V3_string_free) \
    LFUNC_FA_(X509V3_section_free) \
    LFUNC_FA_(X509V3_set_ctx) \
    LFUNC_FA_(X509V3_add_value) \
    LFUNC_FA_(X509V3_add_value_uchar) \
    LFUNC_FA_(X509V3_add_value_bool) \
    LFUNC_FA_(X509V3_add_value_int) \
    LFUNC_FA_(i2s_ASN1_INTEGER) \
    LFUNC_FA_(s2i_ASN1_INTEGER) \
    LFUNC_FA_(i2s_ASN1_ENUMERATED) \
    LFUNC_FA_(i2s_ASN1_ENUMERATED_TABLE) \
    LFUNC_FA_(X509V3_EXT_add) \
    LFUNC_FA_(X509V3_EXT_add_list) \
    LFUNC_FA_(X509V3_EXT_add_alias) \
    LFUNC_FA_(X509V3_EXT_cleanup) \
    LFUNC_FA_(X509V3_EXT_get) \
    LFUNC_FA_(X509V3_EXT_get_nid) \
    LFUNC_FA_(X509V3_add_standard_extensions) \
    LFUNC_FA_(X509V3_parse_list) \
    LFUNC_FA_(X509V3_EXT_d2i) \
    LFUNC_FA_(X509V3_get_d2i) \
    LFUNC_FA_(X509V3_EXT_i2d) \
    LFUNC_FA_(X509V3_add1_i2d) \
    LFUNC_FA_(OPENSSL_buf2hexstr) \
    LFUNC_FA_(OPENSSL_hexstr2buf) \
    LFUNC_FA_(X509V3_EXT_val_prn) \
    LFUNC_FA_(X509V3_EXT_print) \
    LFUNC_FA_(X509V3_extensions_print) \
    LFUNC_FA_(X509_check_purpose) \
    LFUNC_FA_(X509_supported_extension) \
    LFUNC_FA_(X509_PURPOSE_set) \
    LFUNC_FA_(X509_check_issued) \
    LFUNC_FA_(X509_PURPOSE_get_count) \
    LFUNC_FA_(X509_PURPOSE_get0) \
    LFUNC_FA_(X509_PURPOSE_get_by_sname) \
    LFUNC_FA_(X509_PURPOSE_get_by_id) \
    LFUNC_FA_(X509_PURPOSE_add) \
    LFUNC_FA_(X509_PURPOSE_get0_name) \
    LFUNC_FA_(X509_PURPOSE_get0_sname) \
    LFUNC_FA_(X509_PURPOSE_get_trust) \
    LFUNC_FA_(X509_PURPOSE_cleanup) \
    LFUNC_FA_(X509_PURPOSE_get_id) \
    LFUNC_FA_(X509_get1_email) \
    LFUNC_FA_(X509_REQ_get1_email) \
    LFUNC_FA_(X509_email_free) \
    LFUNC_FA_(ERR_load_X509V3_strings) \
    LFUNC_FA_(AES_options) \
    LFUNC_FA_(AES_set_encrypt_key) \
    LFUNC_FA_(AES_set_decrypt_key) \
    LFUNC_FA_(AES_encrypt) \
    LFUNC_FA_(AES_decrypt) \
    LFUNC_FA_(AES_ecb_encrypt) \
    LFUNC_FA_(AES_cbc_encrypt) \
    LFUNC_FA_(AES_cfb128_encrypt) \
    LFUNC_FA_(AES_cfb1_encrypt) \
    LFUNC_FA_(AES_cfb8_encrypt) \
    LFUNC_FA_(UNIMPLEMENTED) /* AES_cfbr_encrypt_block */ \
    LFUNC_FA_(AES_ofb128_encrypt) \
    LFUNC_FA_(UNIMPLEMENTED) /* AES_ctr128_encrypt */ \
    LFUNC_FA_(BF_set_key) \
    LFUNC_FA_(BF_encrypt) \
    LFUNC_FA_(BF_decrypt) \
    LFUNC_FA_(BF_ecb_encrypt) \
    LFUNC_FA_(BF_cbc_encrypt) \
    LFUNC_FA_(BF_cfb64_encrypt) \
    LFUNC_FA_(BF_ofb64_encrypt) \
    LFUNC_FA_(BF_options) \
    LFUNC_FA_(CAST_set_key) \
    LFUNC_FA_(CAST_ecb_encrypt) \
    LFUNC_FA_(CAST_encrypt) \
    LFUNC_FA_(CAST_decrypt) \
    LFUNC_FA_(CAST_cbc_encrypt) \
    LFUNC_FA_(CAST_cfb64_encrypt) \
    LFUNC_FA_(CAST_ofb64_encrypt) \
    LFUNC_FA_(UNIMPLEMENTED) /* _shadow_DES_check_key */ \
    LFUNC_FA_(DES_options) \
    LFUNC_FA_(DES_ecb3_encrypt) \
    LFUNC_FA_(DES_cbc_cksum) \
    LFUNC_FA_(DES_cbc_encrypt) \
    LFUNC_FA_(DES_ncbc_encrypt) \
    LFUNC_FA_(DES_xcbc_encrypt) \
    LFUNC_FA_(DES_cfb_encrypt) \
    LFUNC_FA_(DES_ecb_encrypt) \
    LFUNC_FA_(DES_encrypt1) \
    LFUNC_FA_(DES_encrypt2) \
    LFUNC_FA_(DES_encrypt3) \
    LFUNC_FA_(DES_decrypt3) \
    LFUNC_FA_(DES_ede3_cbc_encrypt) \
    LFUNC_FA_(UNIMPLEMENTED) /* DES_ede3_cbcm_encrypt */ \
    LFUNC_FA_(DES_ede3_cfb64_encrypt) \
    LFUNC_FA_(DES_ede3_cfb_encrypt) \
    LFUNC_FA_(DES_ede3_ofb64_encrypt) \
    LFUNC_FA_(UNIMPLEMENTED) /* DES_xwhite_in2out */ \
    LFUNC_FA_(DES_fcrypt) \
    LFUNC_FA_(DES_crypt) \
    LFUNC_FA_(DES_ofb_encrypt) \
    LFUNC_FA_(DES_pcbc_encrypt) \
    LFUNC_FA_(DES_quad_cksum) \
    LFUNC_FA_(DES_random_key) \
    LFUNC_FA_(DES_set_odd_parity) \
    LFUNC_FA_(DES_check_key_parity) \
    LFUNC_FA_(DES_is_weak_key) \
    LFUNC_FA_(DES_set_key) \
    LFUNC_FA_(DES_key_sched) \
    LFUNC_FA_(DES_set_key_checked) \
    LFUNC_FA_(DES_set_key_unchecked) \
    LFUNC_FA_(DES_string_to_key) \
    LFUNC_FA_(DES_string_to_2keys) \
    LFUNC_FA_(DES_cfb64_encrypt) \
    LFUNC_FA_(DES_ofb64_encrypt) \
    LFUNC_FA_(UNIMPLEMENTED) /* _ossl_old_des_options */ \
    LFUNC_FA_(UNIMPLEMENTED) /* _ossl_old_des_ecb3_encrypt */ \
    LFUNC_FA_(UNIMPLEMENTED) /* _ossl_old_des_cbc_cksum */ \
    LFUNC_FA_(UNIMPLEMENTED) /* _ossl_old_des_cbc_encrypt */ \
    LFUNC_FA_(UNIMPLEMENTED) /* _ossl_old_des_ncbc_encrypt */ \
    LFUNC_FA_(UNIMPLEMENTED) /* _ossl_old_des_xcbc_encrypt */ \
    LFUNC_FA_(UNIMPLEMENTED) /* _ossl_old_des_cfb_encrypt */ \
    LFUNC_FA_(UNIMPLEMENTED) /* _ossl_old_des_ecb_encrypt */ \
    LFUNC_FA_(UNIMPLEMENTED) /* _ossl_old_des_encrypt */ \
    LFUNC_FA_(UNIMPLEMENTED) /* _ossl_old_des_encrypt2 */ \
    LFUNC_FA_(UNIMPLEMENTED) /* _ossl_old_des_encrypt3 */ \
    LFUNC_FA_(UNIMPLEMENTED) /* _ossl_old_des_decrypt3 */ \
    LFUNC_FA_(UNIMPLEMENTED) /* _ossl_old_des_ede3_cbc_encrypt */ \
    LFUNC_FA_(UNIMPLEMENTED) /* _ossl_old_des_ede3_cfb64_encrypt */ \
    LFUNC_FA_(UNIMPLEMENTED) /* _ossl_old_des_ede3_ofb64_encrypt */ \
    LFUNC_FA_(UNIMPLEMENTED) /* _ossl_old_des_xwhite_in2out */ \
    LFUNC_FA_(UNIMPLEMENTED) /* _ossl_old_des_enc_read */ \
    LFUNC_FA_(UNIMPLEMENTED) /* _ossl_old_des_enc_write */ \
    LFUNC_FA_(UNIMPLEMENTED) /* _ossl_old_des_fcrypt */ \
    LFUNC_FA_(UNIMPLEMENTED) /* _ossl_old_des_crypt */ \
    LFUNC_FA_(UNIMPLEMENTED) /* _ossl_old_crypt */ \
    LFUNC_FA_(UNIMPLEMENTED) /* _ossl_old_des_ofb_encrypt */ \
    LFUNC_FA_(UNIMPLEMENTED) /* _ossl_old_des_pcbc_encrypt */ \
    LFUNC_FA_(UNIMPLEMENTED) /* _ossl_old_des_quad_cksum */ \
    LFUNC_FA_(UNIMPLEMENTED) /* _ossl_old_des_random_seed */ \
    LFUNC_FA_(UNIMPLEMENTED) /* _ossl_old_des_random_key */ \
    LFUNC_FA_(UNIMPLEMENTED) /* _ossl_old_des_read_password */ \
    LFUNC_FA_(UNIMPLEMENTED) /* _ossl_old_des_read_2passwords */ \
    LFUNC_FA_(UNIMPLEMENTED) /* _ossl_old_des_set_odd_parity */ \
    LFUNC_FA_(UNIMPLEMENTED) /* _ossl_old_des_is_weak_key */ \
    LFUNC_FA_(UNIMPLEMENTED) /* _ossl_old_des_set_key */ \
    LFUNC_FA_(UNIMPLEMENTED) /* _ossl_old_des_key_sched */ \
    LFUNC_FA_(UNIMPLEMENTED) /* _ossl_old_des_string_to_key */ \
    LFUNC_FA_(UNIMPLEMENTED) /* _ossl_old_des_string_to_2keys */ \
    LFUNC_FA_(UNIMPLEMENTED) /* _ossl_old_des_cfb64_encrypt */ \
    LFUNC_FA_(UNIMPLEMENTED) /* _ossl_old_des_ofb64_encrypt */ \
    LFUNC_FA_(UNIMPLEMENTED) /* _ossl_096_des_random_seed */ \
    LFUNC_FA_(DH_OpenSSL) \
    LFUNC_FA_(DH_set_default_method) \
    LFUNC_FA_(DH_get_default_method) \
    LFUNC_FA_(DH_set_method) \
    LFUNC_FA_(DH_new_method) \
    LFUNC_FA_(DH_new) \
    LFUNC_FA_(DH_free) \
    LFUNC_FA_(DH_up_ref) \
    LFUNC_FA_(DH_size) \
    LFUNC_FA_(OBSOLETE_DH_get_ex_new_index) \
    LFUNC_FA_(DH_set_ex_data) \
    LFUNC_FA_(DH_get_ex_data) \
    LFUNC_FA_(DH_generate_parameters) \
    LFUNC_FA_(DH_check) \
    LFUNC_FA_(DH_generate_key) \
    LFUNC_FA_(DH_compute_key) \
    LFUNC_FA_(d2i_DHparams) \
    LFUNC_FA_(i2d_DHparams) \
    LFUNC_FA_(DHparams_print) \
    LFUNC_FA_(ERR_load_DH_strings) \
    LFUNC_FA_(DSA_SIG_new) \
    LFUNC_FA_(DSA_SIG_free) \
    LFUNC_FA_(i2d_DSA_SIG) \
    LFUNC_FA_(d2i_DSA_SIG) \
    LFUNC_FA_(DSA_do_sign) \
    LFUNC_FA_(DSA_do_verify) \
    LFUNC_FA_(DSA_OpenSSL) \
    LFUNC_FA_(DSA_set_default_method) \
    LFUNC_FA_(DSA_get_default_method) \
    LFUNC_FA_(DSA_set_method) \
    LFUNC_FA_(DSA_new) \
    LFUNC_FA_(DSA_new_method) \
    LFUNC_FA_(DSA_free) \
    LFUNC_FA_(DSA_up_ref) \
    LFUNC_FA_(DSA_size) \
    LFUNC_FA_(DSA_sign_setup) \
    LFUNC_FA_(DSA_sign) \
    LFUNC_FA_(DSA_verify) \
    LFUNC_FA_(OBSOLETE_DSA_get_ex_new_index) \
    LFUNC_FA_(DSA_set_ex_data) \
    LFUNC_FA_(DSA_get_ex_data) \
    LFUNC_FA_(d2i_DSAPublicKey) \
    LFUNC_FA_(d2i_DSAPrivateKey) \
    LFUNC_FA_(d2i_DSAparams) \
    LFUNC_FA_(DSA_generate_parameters) \
    LFUNC_FA_(DSA_generate_key) \
    LFUNC_FA_(i2d_DSAPublicKey) \
    LFUNC_FA_(i2d_DSAPrivateKey) \
    LFUNC_FA_(i2d_DSAparams) \
    LFUNC_FA_(DSAparams_print) \
    LFUNC_FA_(DSA_print) \
    LFUNC_FA_(DSA_dup_DH) \
    LFUNC_FA_(ERR_load_DSA_strings) \
    LFUNC_FA_(IDEA_options) \
    LFUNC_FA_(IDEA_ecb_encrypt) \
    LFUNC_FA_(IDEA_set_encrypt_key) \
    LFUNC_FA_(IDEA_set_decrypt_key) \
    LFUNC_FA_(IDEA_cbc_encrypt) \
    LFUNC_FA_(IDEA_cfb64_encrypt) \
    LFUNC_FA_(IDEA_ofb64_encrypt) \
    LFUNC_FA_(IDEA_encrypt) \
    LFUNC_FA_(MD2_options) \
    LFUNC_FA_(MD2_Init) \
    LFUNC_FA_(MD2_Update) \
    LFUNC_FA_(MD2_Final) \
    LFUNC_FA_(MD2) \
    LFUNC_FA_(MD4_Init) \
    LFUNC_FA_(MD4_Update) \
    LFUNC_FA_(MD4_Final) \
    LFUNC_FA_(MD4) \
    LFUNC_FA_(MD4_Transform) \
    LFUNC_FA_(MD5_Init) \
    LFUNC_FA_(MD5_Update) \
    LFUNC_FA_(MD5_Final) \
    LFUNC_FA_(MD5) \
    LFUNC_FA_(MD5_Transform) \
    LFUNC_FA_(MDC2_Init) \
    LFUNC_FA_(MDC2_Update) \
    LFUNC_FA_(MDC2_Final) \
    LFUNC_FA_(MDC2) \
    LFUNC_FA_(RC2_set_key) \
    LFUNC_FA_(RC2_ecb_encrypt) \
    LFUNC_FA_(RC2_encrypt) \
    LFUNC_FA_(RC2_decrypt) \
    LFUNC_FA_(RC2_cbc_encrypt) \
    LFUNC_FA_(RC2_cfb64_encrypt) \
    LFUNC_FA_(RC2_ofb64_encrypt) \
    LFUNC_FA_(RC4_options) \
    LFUNC_FA_(RC4_set_key) \
    LFUNC_FA_(RC4) \
    LFUNC_FA_(RC5_32_set_key) \
    LFUNC_FA_(RC5_32_ecb_encrypt) \
    LFUNC_FA_(RC5_32_encrypt) \
    LFUNC_FA_(RC5_32_decrypt) \
    LFUNC_FA_(RC5_32_cbc_encrypt) \
    LFUNC_FA_(RC5_32_cfb64_encrypt) \
    LFUNC_FA_(RC5_32_ofb64_encrypt) \
    LFUNC_FA_(RIPEMD160_Init) \
    LFUNC_FA_(RIPEMD160_Update) \
    LFUNC_FA_(RIPEMD160_Final) \
    LFUNC_FA_(RIPEMD160) \
    LFUNC_FA_(RIPEMD160_Transform) \
    LFUNC_FA_(RSA_new) \
    LFUNC_FA_(RSA_new_method) \
    LFUNC_FA_(RSA_size) \
    LFUNC_FA_(RSA_generate_key) \
    LFUNC_FA_(RSA_check_key) \
    LFUNC_FA_(RSA_public_encrypt) \
    LFUNC_FA_(RSA_private_encrypt) \
    LFUNC_FA_(RSA_public_decrypt) \
    LFUNC_FA_(RSA_private_decrypt) \
    LFUNC_FA_(RSA_free) \
    LFUNC_FA_(RSA_up_ref) \
    LFUNC_FA_(RSA_flags) \
    LFUNC_FA_(RSA_set_default_method) \
    LFUNC_FA_(RSA_get_default_method) \
    LFUNC_FA_(RSA_get_method) \
    LFUNC_FA_(RSA_set_method) \
    LFUNC_FA_(UNIMPLEMENTED) /* RSA_PKCS1_SSLeay */ \
    LFUNC_FA_(RSA_null_method) \
    LFUNC_FA_(d2i_RSAPublicKey) \
    LFUNC_FA_(i2d_RSAPublicKey) \
    LFUNC_FA_(RSAPublicKey_it) \
    LFUNC_FA_(d2i_RSAPrivateKey) \
    LFUNC_FA_(i2d_RSAPrivateKey) \
    LFUNC_FA_(RSAPrivateKey_it) \
    LFUNC_FA_(RSA_print) \
    LFUNC_FA_(UNIMPLEMENTED) /* i2d_RSA_NET */ \
    LFUNC_FA_(UNIMPLEMENTED) /* d2i_RSA_NET */ \
    LFUNC_FA_(UNIMPLEMENTED) /* i2d_Netscape_RSA */ \
    LFUNC_FA_(UNIMPLEMENTED) /* d2i_Netscape_RSA */ \
    LFUNC_FA_(RSA_sign) \
    LFUNC_FA_(RSA_verify) \
    LFUNC_FA_(RSA_sign_ASN1_OCTET_STRING) \
    LFUNC_FA_(RSA_verify_ASN1_OCTET_STRING) \
    LFUNC_FA_(RSA_blinding_on) \
    LFUNC_FA_(RSA_blinding_off) \
    LFUNC_FA_(RSA_padding_add_PKCS1_type_1) \
    LFUNC_FA_(RSA_padding_check_PKCS1_type_1) \
    LFUNC_FA_(RSA_padding_add_PKCS1_type_2) \
    LFUNC_FA_(RSA_padding_check_PKCS1_type_2) \
    LFUNC_FA_(RSA_padding_add_PKCS1_OAEP) \
    LFUNC_FA_(RSA_padding_check_PKCS1_OAEP) \
    LFUNC_FA_(UNIMPLEMENTED) /* RSA_padding_add_SSLv23 */ \
    LFUNC_FA_(UNIMPLEMENTED) /* RSA_padding_check_SSLv23 */ \
    LFUNC_FA_(RSA_padding_add_none) \
    LFUNC_FA_(RSA_padding_check_none) \
    LFUNC_FA_(OBSOLETE_RSA_get_ex_new_index) \
    LFUNC_FA_(RSA_set_ex_data) \
    LFUNC_FA_(RSA_get_ex_data) \
    LFUNC_FA_(RSAPublicKey_dup) \
    LFUNC_FA_(RSAPrivateKey_dup) \
    LFUNC_FA_(ERR_load_RSA_strings) \
    LFUNC_FA_(UNIMPLEMENTED) /* SHA_Init */ \
    LFUNC_FA_(UNIMPLEMENTED) /* SHA_Update */ \
    LFUNC_FA_(UNIMPLEMENTED) /* SHA_Final */ \
    LFUNC_FA_(UNIMPLEMENTED) /* SHA */ \
    LFUNC_FA_(UNIMPLEMENTED) /* SHA_Transform */ \
    LFUNC_FA_(SHA1_Init) \
    LFUNC_FA_(SHA1_Update) \
    LFUNC_FA_(SHA1_Final) \
    LFUNC_FA_(SHA1) \
    LFUNC_FA_(SHA1_Transform) \
    LFUNC_FA_(UI_read_string_lib) \
    LFUNC_FA_(UI_write_string_lib) \
    LFUNC_FA_(HMAC_CTX_set_flags) \
    LFUNC_FA_(X509_check_ca) \
    LFUNC_FA_(PROXY_POLICY_new) \
    LFUNC_FA_(PROXY_POLICY_free) \
    LFUNC_FA_(d2i_PROXY_POLICY) \
    LFUNC_FA_(i2d_PROXY_POLICY) \
    LFUNC_FA_(PROXY_POLICY_it) \
    LFUNC_FA_(PROXY_CERT_INFO_EXTENSION_new) \
    LFUNC_FA_(PROXY_CERT_INFO_EXTENSION_free) \
    LFUNC_FA_(d2i_PROXY_CERT_INFO_EXTENSION) \
    LFUNC_FA_(i2d_PROXY_CERT_INFO_EXTENSION) \
    LFUNC_FA_(PROXY_CERT_INFO_EXTENSION_it) \
    LFUNC_FA_(UNIMPLEMENTED) /* FIPS_mode */ \
    LFUNC_FA_(UNIMPLEMENTED) /* private_RC4_set_key */ \
    LFUNC_FA_(BN_mod_exp_mont_consttime) \
    LFUNC_FA_(BN_MONT_CTX_set_locked) \
    LFUNC_FA_(PKCS1_MGF1) \
    LFUNC_FA_(RSA_padding_add_X931) \
    LFUNC_FA_(RSA_padding_check_X931) \
    LFUNC_FA_(RSA_X931_hash_id) \
    LFUNC_FA_(RSA_verify_PKCS1_PSS) \
    LFUNC_FA_(RSA_padding_add_PKCS1_PSS) \
    LFUNC_FA_(EVP_sha224) \
    LFUNC_FA_(EVP_sha256) \
    LFUNC_FA_(EVP_sha384) \
    LFUNC_FA_(EVP_sha512) \
    LFUNC_FA_(BN_GF2m_add) \
    LFUNC_FA_(BN_GF2m_arr2poly) \
    LFUNC_FA_(BN_GF2m_mod) \
    LFUNC_FA_(BN_GF2m_mod_mul) \
    LFUNC_FA_(BN_GF2m_mod_sqr) \
    LFUNC_FA_(BN_GF2m_mod_inv) \
    LFUNC_FA_(BN_GF2m_mod_div) \
    LFUNC_FA_(BN_GF2m_mod_exp) \
    LFUNC_FA_(BN_GF2m_mod_sqrt) \
    LFUNC_FA_(BN_GF2m_mod_solve_quad) \
    LFUNC_FA_(BN_generate_prime_ex) \
    LFUNC_FA_(BN_is_prime_ex) \
    LFUNC_FA_(BN_set_negative) \
    LFUNC_FA_(EC_GROUP_get_degree) \
    LFUNC_FA_(EC_GF2m_simple_method) \
    LFUNC_FA_(EC_GROUP_set_curve_GF2m) \
    LFUNC_FA_(EC_GROUP_get_curve_GF2m) \
    LFUNC_FA_(EC_POINT_set_affine_coordinates_GF2m) \
    LFUNC_FA_(EC_POINT_get_affine_coordinates_GF2m) \
    LFUNC_FA_(EC_get_builtin_curves) \
    LFUNC_FA_(EC_GROUP_new_by_curve_name) \
    LFUNC_FA_(EC_GROUP_check) \
    LFUNC_FA_(UNIMPLEMENTED) /* ENGINE_cleanup */ \
    LFUNC_FA_(DSA_generate_parameters_ex) \
    LFUNC_FA_(UNIMPLEMENTED) /* EVP_ecdsa */ \
    LFUNC_FA_(EC_KEY_new_by_curve_name) \
    LFUNC_FA_(EC_KEY_generate_key) \
    LFUNC_FA_(EC_KEY_free) \
    LFUNC_FA_(ECDSA_SIG_free) \
    LFUNC_FA_(ECDSA_do_sign) \
    LFUNC_FA_(ECDSA_do_verify) \
    LFUNC_FA_(EC_KEY_new) \
    LFUNC_FA_(EC_KEY_set_group) \
    LFUNC_FA_(EC_KEY_get0_group) \
    LFUNC_FA_(EC_KEY_check_key) \
    LFUNC_FA_(ECDSA_size) \
    LFUNC_FA_(ECDSA_sign) \
    LFUNC_FA_(ECDSA_verify) \
    LFUNC_FA_(d2i_ECDSA_SIG) \
    LFUNC_FA_(i2d_ECDSA_SIG) \
    LFUNC_FA_(DH_generate_parameters_ex) \
    LFUNC_FA_(EC_METHOD_get_field_type) \
    LFUNC_FA_(EC_KEY_get0_public_key) \
    LFUNC_FA_(ECDH_compute_key) \
    LFUNC_FA_(EC_KEY_get0_private_key) \
    LFUNC_FA_(ENGINE_get_first) \
    LFUNC_FA_(ENGINE_get_id) \
    LFUNC_FA_(ENGINE_get_name) \
    LFUNC_FA_(ENGINE_get_next) \
    LFUNC_FA_(ENGINE_free) \
    LFUNC_FA_(ENGINE_new) \
    LFUNC_FA_(ENGINE_set_id) \
    LFUNC_FA_(ENGINE_set_name) \
    LFUNC_FA_(ENGINE_add) \
    LFUNC_FA_(ENGINE_remove) \
    LFUNC_FA_(ENGINE_load_builtin_engines) \
    LFUNC_FA_(ENGINE_register_all_ciphers) \
    LFUNC_FA_(EVP_CIPHER_get_nid) \
    LFUNC_FA_(EVP_MD_get_type) \
    LFUNC_FA_(ENGINE_register_all_digests) \
    LFUNC_FA_(BIO_test_flags) \
    LFUNC_FA_(SSL_COMP_get_compression_methods) \
    LFUNC_FA_(RSA_generate_key_ex) \
    LFUNC_FA_(X509_VERIFY_PARAM_free) \
    LFUNC_FA_(X509_STORE_set1_param) \
    LFUNC_FA_(ASN1_generate_nconf) \
    LFUNC_FA_(PEM_read_bio_ECPKParameters) \
    LFUNC_FA_(EC_KEY_dup) \
    LFUNC_FA_(BIO_set_callback) \
    LFUNC_FA_(BIO_set_callback_arg) \
    LFUNC_FA_(EVP_MD_CTX_set_flags) \
    LFUNC_FA_(BIO_set_flags) \
    LFUNC_FA_(EVP_CIPHER_CTX_set_flags) \
    LFUNC_FA_(EVP_CIPHER_get_iv_length) \
    LFUNC_FA_(X509_REQ_check_private_key) \
    LFUNC_FA_(PEM_read_bio_EC_PUBKEY) \
    LFUNC_FA_(PEM_read_bio_ECPrivateKey) \
    LFUNC_FA_(PEM_write_bio_EC_PUBKEY) \
    LFUNC_FA_(d2i_EC_PUBKEY_bio) \
    LFUNC_FA_(EC_KEY_set_asn1_flag) \
    LFUNC_FA_(EC_KEY_set_conv_form) \
    LFUNC_FA_(EC_KEY_print) \
    LFUNC_FA_(d2i_ECPrivateKey_bio) \
    LFUNC_FA_(i2d_EC_PUBKEY_bio) \
    LFUNC_FA_(PEM_write_bio_ECPrivateKey) \
    LFUNC_FA_(PEM_write_bio_ECPKParameters) \
    LFUNC_FA_(i2d_ECPrivateKey_bio) \
    LFUNC_FA_(i2d_ECPKParameters) \
    LFUNC_FA_(EC_GROUP_set_asn1_flag) \
    LFUNC_FA_(EC_GROUP_set_point_conversion_form) \
    LFUNC_FA_(EC_GROUP_get_point_conversion_form) \
    LFUNC_FA_(ECPKParameters_print) \
    LFUNC_FA_(EC_GROUP_set_seed) \
    LFUNC_FA_(d2i_ECPKParameters) \
    LFUNC_FA_(EC_POINT_point2bn) \
    LFUNC_FA_(X509_get1_ocsp) \
    LFUNC_FA_(SSL_get_servername) \
    LFUNC_FA_(SSL_set_SSL_CTX) \
    LFUNC_FA_(SSL_CTX_set_cookie_generate_cb) \
    LFUNC_FA_(SSL_CTX_set_cookie_verify_cb) \
    LFUNC_FA_(SSL_CTX_set_info_callback) \
    LFUNC_FA_(UNIMPLEMENTED) /* DTLSv1_server_method */ \
    LFUNC_FA_(BIO_new_dgram) \
    LFUNC_FA_(SSL_get_servername_type) \
    LFUNC_FA_(SSL_get_current_compression) \
    LFUNC_FA_(SSL_get_current_expansion) \
    LFUNC_FA_(SSL_COMP_get_name) \
    LFUNC_FA_(ENGINE_by_id) \
    LFUNC_FA_(SSL_CTX_set_client_cert_engine) \
    LFUNC_FA_(UNIMPLEMENTED) /* DTLSv1_client_method */ \
    LFUNC_FA_(UNIMPLEMENTED) /* DTLSv1_method */ \
    LFUNC_FA_(SHA256) \
    LFUNC_FA_(SHA512) \
    LFUNC_FA_(AES_ige_encrypt) \
    LFUNC_FA_(EC_KEY_precompute_mult) \
    LFUNC_FA_(ENGINE_load_private_key) \
    LFUNC_FA_(ENGINE_load_public_key) \
    LFUNC_FA_(ENGINE_ctrl_cmd) \
    LFUNC_FA_(ENGINE_set_default) \
    LFUNC_FA_(ENGINE_ctrl) \
    LFUNC_FA_(ENGINE_register_all_complete) \
    LFUNC_FA_(ENGINE_ctrl_cmd_string) \
    LFUNC_FA_(X509_VERIFY_PARAM_add0_policy) \
    LFUNC_FA_(X509_VERIFY_PARAM_set_purpose) \
    LFUNC_FA_(X509_VERIFY_PARAM_set_flags) \
    LFUNC_FA_(X509_VERIFY_PARAM_new) \
    LFUNC_FA_(X509_POLICY_NODE_print) \
    LFUNC_FA_(X509_STORE_CTX_get0_policy_tree) \
    LFUNC_FA_(X509_STORE_CTX_get_explicit_policy) \
    LFUNC_FA_(X509_policy_tree_get0_policies) \
    LFUNC_FA_(X509_policy_tree_get0_user_policies) \
    LFUNC_FA_(BIO_get_callback_arg) \
    LFUNC_FA_(EVP_PKEY_add1_attr_by_NID) \
    LFUNC_FA_(ENGINE_get_RSA) \
    LFUNC_FA_(ENGINE_get_DSA) \
    LFUNC_FA_(ENGINE_get_DH) \
    LFUNC_FA_(ENGINE_get_RAND) \
    LFUNC_FA_(ENGINE_get_ciphers) \
    LFUNC_FA_(ENGINE_get_digests) \
    LFUNC_FA_(ENGINE_init) \
    LFUNC_FA_(ENGINE_finish) \
    LFUNC_FA_(OCSP_sendreq_new) \
    LFUNC_FA_(OBSOLETE_OCSP_sendreq_nbio) \
    LFUNC_FA_(OSSL_HTTP_REQ_CTX_free) \
    LFUNC_FA_(SSL_CTX_use_psk_identity_hint) \
    LFUNC_FA_(SSL_CTX_set_psk_client_callback) \
    LFUNC_FA_(SSL_get_psk_identity_hint) \
    LFUNC_FA_(SSL_set_psk_server_callback) \
    LFUNC_FA_(SSL_use_psk_identity_hint) \
    LFUNC_FA_(SSL_set_psk_client_callback) \
    LFUNC_FA_(SSL_CTX_set_psk_server_callback) \
    LFUNC_FA_(SSL_get_psk_identity) \
    LFUNC_FA_(SSL_set_session_ticket_ext) \
    LFUNC_FA_(SSL_set_session_secret_cb) \
    LFUNC_FA_(SSL_set_session_ticket_ext_cb) \
    LFUNC_FA_(SSL_set1_param) \
    LFUNC_FA_(SSL_CTX_set1_param) \
    LFUNC_FA_(SSL_renegotiate_abbreviated) \
    LFUNC_FA_(UNIMPLEMENTED) /* TLSv1_1_method */ \
    LFUNC_FA_(UNIMPLEMENTED) /* TLSv1_1_client_method */ \
    LFUNC_FA_(UNIMPLEMENTED) /* TLSv1_1_server_method */ \
    LFUNC_FA_(SSL_CTX_set_srp_client_pwd_callback) \
    LFUNC_FA_(SSL_get_srp_g) \
    LFUNC_FA_(SSL_CTX_set_srp_username_callback) \
    LFUNC_FA_(SSL_get_srp_userinfo) \
    LFUNC_FA_(SSL_set_srp_server_param) \
    LFUNC_FA_(SSL_set_srp_server_param_pw) \
    LFUNC_FA_(SSL_get_srp_N) \
    LFUNC_FA_(SSL_get_srp_username) \
    LFUNC_FA_(SSL_CTX_set_srp_password) \
    LFUNC_FA_(SSL_CTX_set_srp_strength) \
    LFUNC_FA_(SSL_CTX_set_srp_verify_param_callback) \
    LFUNC_FA_(SSL_CTX_set_srp_cb_arg) \
    LFUNC_FA_(SSL_CTX_set_srp_username) \
    LFUNC_FA_(SSL_CTX_SRP_CTX_init) \
    LFUNC_FA_(SRP_Calc_A_param) \
    LFUNC_FA_(UNIMPLEMENTED) /* SRP_generate_server_master_secret */ \
    LFUNC_FA_(SSL_CTX_SRP_CTX_free) \
    LFUNC_FA_(UNIMPLEMENTED) /* SRP_generate_client_master_secret */ \
    LFUNC_FA_(SSL_srp_server_param_with_username) \
    LFUNC_FA_(SSL_SRP_CTX_free) \
    LFUNC_FA_(SSL_set_debug) \
    LFUNC_FA_(SSL_SESSION_get0_peer) \
    LFUNC_FA_(UNIMPLEMENTED) /* TLSv1_2_client_method */ \
    LFUNC_FA_(SSL_SESSION_set1_id_context) \
    LFUNC_FA_(UNIMPLEMENTED) /* TLSv1_2_server_method */ \
    LFUNC_FA_(OBSOLETE_SSL_cache_hit) \
    LFUNC_FA_(UNIMPLEMENTED) /* SSL_set_state */ \
    LFUNC_FA_(SSL_CIPHER_get_id) \
    LFUNC_FA_(UNIMPLEMENTED) /* TLSv1_2_method */ \
    LFUNC_FA_(SSL_export_keying_material) \
    LFUNC_FA_(SSL_set_tlsext_use_srtp) \
    LFUNC_FA_(SSL_CTX_set_next_protos_advertised_cb) \
    LFUNC_FA_(SSL_get0_next_proto_negotiated) \
    LFUNC_FA_(SSL_get_selected_srtp_profile) \
    LFUNC_FA_(SSL_CTX_set_tlsext_use_srtp) \
    LFUNC_FA_(SSL_select_next_proto) \
    LFUNC_FA_(SSL_get_srtp_profiles) \
    LFUNC_FA_(SSL_CTX_set_next_proto_select_cb) \
    LFUNC_FA_(SSL_SESSION_get_compress_id) \
    LFUNC_FA_(UNIMPLEMENTED) /* SSL_CTX_set_tmp_ecdh_callback */ \
    LFUNC_FA_(UNIMPLEMENTED) /* SSL_set_tmp_ecdh_callback */ \
    LFUNC_FA_(SSL_SRP_CTX_init) \
    LFUNC_FA_(UNIMPLEMENTED) /* ASN1_d2i_fp */ \
    LFUNC_FA_(UNIMPLEMENTED) /* ASN1_i2d_fp */ \
    LFUNC_FA_(UNIMPLEMENTED) /* BIO_new_fp */ \
    LFUNC_FA_(UNIMPLEMENTED) /* BN_print_fp */ \
    LFUNC_FA_(UNIMPLEMENTED) /* CRYPTO_mem_leaks_fp */ \
    LFUNC_FA_(UNIMPLEMENTED) /* DHparams_print_fp */ \
    LFUNC_FA_(UNIMPLEMENTED) /* DSA_print_fp */ \
    LFUNC_FA_(UNIMPLEMENTED) /* DSAparams_print_fp */ \
    LFUNC_FA_(UNIMPLEMENTED) /* ERR_print_errors_fp */ \
    LFUNC_FA_(UNIMPLEMENTED) /* PEM_read_DHparams */ \
    LFUNC_FA_(UNIMPLEMENTED) /* PEM_read_DSAPrivateKey */ \
    LFUNC_FA_(UNIMPLEMENTED) /* PEM_read_DSAparams */ \
    LFUNC_FA_(UNIMPLEMENTED) /* PEM_write_DHparams */ \
    LFUNC_FA_(UNIMPLEMENTED) /* PEM_write_DSAPrivateKey */ \
    LFUNC_FA_(UNIMPLEMENTED) /* PEM_write_DSAparams */ \
    LFUNC_FA_(UNIMPLEMENTED) /* RSA_print_fp */ \
    LFUNC_FA_(UNIMPLEMENTED) /* X509_REQ_print_fp */ \
    LFUNC_FA_(UNIMPLEMENTED) /* X509_print_fp */ \
    LFUNC_FA_(UNIMPLEMENTED) /* d2i_DSAPrivateKey_fp */ \
    LFUNC_FA_(UNIMPLEMENTED) /* d2i_PKCS7_fp */ \
    LFUNC_FA_(UNIMPLEMENTED) /* d2i_RSAPrivateKey_fp */ \
    LFUNC_FA_(UNIMPLEMENTED) /* d2i_X509_CRL_fp */ \
    LFUNC_FA_(UNIMPLEMENTED) /* d2i_X509_REQ_fp */ \
    LFUNC_FA_(UNIMPLEMENTED) /* d2i_X509_fp */ \
    LFUNC_FA_(UNIMPLEMENTED) /* i2d_DSAPrivateKey_fp */ \
    LFUNC_FA_(UNIMPLEMENTED) /* i2d_PKCS7_fp */ \
    LFUNC_FA_(UNIMPLEMENTED) /* i2d_RSAPrivateKey_fp */ \
    LFUNC_FA_(UNIMPLEMENTED) /* i2d_X509_CRL_fp */ \
    LFUNC_FA_(UNIMPLEMENTED) /* i2d_X509_REQ_fp */ \
    LFUNC_FA_(UNIMPLEMENTED) /* i2d_X509_fp */ \
    LFUNC_FA_(UNIMPLEMENTED) /* OPENSSL_LH_node_stats */ \
    LFUNC_FA_(UNIMPLEMENTED) /* OPENSSL_LH_node_usage_stats */ \
    LFUNC_FA_(UNIMPLEMENTED) /* OPENSSL_LH_stats */ \
    LFUNC_FA_(UNIMPLEMENTED) /* d2i_RSAPublicKey_fp */ \
    LFUNC_FA_(UNIMPLEMENTED) /* i2d_RSAPublicKey_fp */ \
    LFUNC_FA_(UNIMPLEMENTED) /* X509_CRL_print_fp */ \
    LFUNC_FA_(UNIMPLEMENTED) /* i2d_PKCS8_fp */ \
    LFUNC_FA_(UNIMPLEMENTED) /* d2i_PKCS8_PRIV_KEY_INFO_fp */ \
    LFUNC_FA_(UNIMPLEMENTED) /* d2i_PKCS8_fp */ \
    LFUNC_FA_(UNIMPLEMENTED) /* i2d_PKCS8_PRIV_KEY_INFO_fp */ \
    LFUNC_FA_(UNIMPLEMENTED) /* CONF_load_fp */ \
    LFUNC_FA_(UNIMPLEMENTED) /* d2i_RSA_PUBKEY_fp */ \
    LFUNC_FA_(UNIMPLEMENTED) /* i2d_DSA_PUBKEY_fp */ \
    LFUNC_FA_(UNIMPLEMENTED) /* PEM_read_DSA_PUBKEY */ \
    LFUNC_FA_(UNIMPLEMENTED) /* d2i_DSA_PUBKEY_fp */ \
    LFUNC_FA_(UNIMPLEMENTED) /* PEM_write_DSA_PUBKEY */ \
    LFUNC_FA_(UNIMPLEMENTED) /* i2d_RSA_PUBKEY_fp */ \
    LFUNC_FA_(UNIMPLEMENTED) /* i2d_PKCS8PrivateKeyInfo_fp */ \
    LFUNC_FA_(UNIMPLEMENTED) /* i2d_PrivateKey_fp */ \
    LFUNC_FA_(UNIMPLEMENTED) /* d2i_PrivateKey_fp */ \
    LFUNC_FA_(UNIMPLEMENTED) /* NCONF_load_fp */ \
    LFUNC_FA_(UNIMPLEMENTED) /* X509_NAME_print_ex_fp */ \
    LFUNC_FA_(UNIMPLEMENTED) /* ASN1_STRING_print_ex_fp */ \
    LFUNC_FA_(UNIMPLEMENTED) /* i2d_PUBKEY_fp */ \
    LFUNC_FA_(UNIMPLEMENTED) /* d2i_PUBKEY_fp */ \
    LFUNC_FA_(ERR_load_ENGINE_strings) \
    LFUNC_FA_(ENGINE_set_DSA) \
    LFUNC_FA_(ENGINE_get_finish_function) \
    LFUNC_FA_(ENGINE_get_default_RSA) \
    LFUNC_FA_(ENGINE_set_DH) \
    LFUNC_FA_(ENGINE_get_init_function) \
    LFUNC_FA_(ENGINE_set_init_function) \
    LFUNC_FA_(ENGINE_set_default_DSA) \
    LFUNC_FA_(ENGINE_get_last) \
    LFUNC_FA_(ENGINE_get_prev) \
    LFUNC_FA_(ENGINE_get_default_DH) \
    LFUNC_FA_(ENGINE_set_finish_function) \
    LFUNC_FA_(ENGINE_set_RSA) \
    LFUNC_FA_(ENGINE_set_default_RAND) \
    LFUNC_FA_(ENGINE_get_default_DSA) \
    LFUNC_FA_(ENGINE_set_default_RSA) \
    LFUNC_FA_(ENGINE_get_default_RAND) \
    LFUNC_FA_(ENGINE_set_RAND) \
    LFUNC_FA_(ENGINE_set_default_DH) \
    LFUNC_FA_(ENGINE_get_ctrl_function) \
    LFUNC_FA_(ENGINE_set_ctrl_function) \
    LFUNC_FA_(ENGINE_unregister_ciphers) \
    LFUNC_FA_(ENGINE_unregister_RSA) \
    LFUNC_FA_(ENGINE_register_all_RAND) \
    LFUNC_FA_(OBSOLETE_ENGINE_load_dynamic) \
    LFUNC_FA_(ENGINE_get_digest_engine) \
    LFUNC_FA_(ENGINE_register_DH) \
    LFUNC_FA_(ENGINE_register_RAND) \
    LFUNC_FA_(OBSOLETE_ENGINE_load_cryptodev) \
    LFUNC_FA_(ENGINE_register_ciphers) \
    LFUNC_FA_(UNIMPLEMENTED) /* ENGINE_load_ubsec */ \
    LFUNC_FA_(OBSOLETE_ENGINE_load_openssl) \
    LFUNC_FA_(ENGINE_get_cmd_defns) \
    LFUNC_FA_(ENGINE_set_load_privkey_function) \
    LFUNC_FA_(ENGINE_set_default_digests) \
    LFUNC_FA_(ENGINE_register_RSA) \
    LFUNC_FA_(ENGINE_unregister_DSA) \
    LFUNC_FA_(ENGINE_set_ciphers) \
    LFUNC_FA_(RAND_set_rand_engine) \
    LFUNC_FA_(ENGINE_get_digest) \
    LFUNC_FA_(ENGINE_get_cipher) \
    LFUNC_FA_(ENGINE_cmd_is_executable) \
    LFUNC_FA_(ENGINE_register_DSA) \
    LFUNC_FA_(ENGINE_set_load_pubkey_function) \
    LFUNC_FA_(ENGINE_get_load_pubkey_function) \
    LFUNC_FA_(ENGINE_register_all_RSA) \
    LFUNC_FA_(ENGINE_unregister_digests) \
    LFUNC_FA_(OBSOLETE_ENGINE_get_ex_new_index) \
    LFUNC_FA_(ENGINE_get_ex_data) \
    LFUNC_FA_(UNIMPLEMENTED) /* ASN1_item_d2i_fp */ \
    LFUNC_FA_(ENGINE_set_cmd_defns) \
    LFUNC_FA_(ENGINE_register_digests) \
    LFUNC_FA_(ENGINE_register_all_DH) \
    LFUNC_FA_(ENGINE_get_flags) \
    LFUNC_FA_(ENGINE_unregister_DH) \
    LFUNC_FA_(ENGINE_register_all_DSA) \
    LFUNC_FA_(ENGINE_set_digests) \
    LFUNC_FA_(ENGINE_register_complete) \
    LFUNC_FA_(ENGINE_set_ex_data) \
    LFUNC_FA_(ENGINE_set_destroy_function) \
    LFUNC_FA_(ENGINE_get_cipher_engine) \
    LFUNC_FA_(UNIMPLEMENTED) /* X509_print_ex_fp */ \
    LFUNC_FA_(UNIMPLEMENTED) /* ENGINE_load_cswift */ \
    LFUNC_FA_(ENGINE_set_default_ciphers) \
    LFUNC_FA_(ENGINE_unregister_RAND) \
    LFUNC_FA_(UNIMPLEMENTED) /* ENGINE_load_nuron */ \
    LFUNC_FA_(ENGINE_set_table_flags) \
    LFUNC_FA_(UNIMPLEMENTED) /* ENGINE_load_chil */ \
    LFUNC_FA_(ENGINE_get_destroy_function) \
    LFUNC_FA_(UNIMPLEMENTED) /* ASN1_item_i2d_fp */ \
    LFUNC_FA_(UNIMPLEMENTED) /* ENGINE_load_atalla */ \
    LFUNC_FA_(ENGINE_get_table_flags) \
    LFUNC_FA_(ENGINE_set_flags) \
    LFUNC_FA_(ENGINE_get_load_privkey_function) \
    LFUNC_FA_(ENGINE_set_default_string) \
    LFUNC_FA_(ENGINE_add_conf_module) \
    LFUNC_FA_(UNIMPLEMENTED) /* ENGINE_load_aep */ \
    LFUNC_FA_(UNIMPLEMENTED) /* ENGINE_load_sureware */ \
    LFUNC_FA_(UNIMPLEMENTED) /* ENGINE_load_4758cca */ \
    LFUNC_FA_(ENGINE_up_ref) \
    LFUNC_FA_(UNIMPLEMENTED) /* ENGINE_set_STORE */ \
    LFUNC_FA_(UNIMPLEMENTED) /* ENGINE_register_ECDSA */ \
    LFUNC_FA_(UNIMPLEMENTED) /* BN_BLINDING_get_thread_id */ \
    LFUNC_FA_(EC_GROUP_get_trinomial_basis) \
    LFUNC_FA_(UNIMPLEMENTED) /* ECDH_get_default_method */ \
    LFUNC_FA_(UNIMPLEMENTED) /* ENGINE_register_ECDH */ \
    LFUNC_FA_(SHA512_Update) \
    LFUNC_FA_(i2d_ECPrivateKey) \
    LFUNC_FA_(BN_GF2m_mod_exp_arr) \
    LFUNC_FA_(BN_GF2m_mod_mul_arr) \
    LFUNC_FA_(o2i_ECPublicKey) \
    LFUNC_FA_(EC_KEY_copy) \
    LFUNC_FA_(UNIMPLEMENTED) /* BIO_dump_fp */ \
    LFUNC_FA_(EC_GROUP_check_discriminant) \
    LFUNC_FA_(i2o_ECPublicKey) \
    LFUNC_FA_(EC_GROUP_new_curve_GF2m) \
    LFUNC_FA_(UNIMPLEMENTED) /* ENGINE_unregister_STORE */ \
    LFUNC_FA_(EVP_PKEY_get1_EC_KEY) \
    LFUNC_FA_(UNIMPLEMENTED) /* ENGINE_get_default_ECDH */ \
    LFUNC_FA_(EC_KEY_get_conv_form) \
    LFUNC_FA_(ENGINE_get_static_state) \
    LFUNC_FA_(ECDSA_SIG_new) \
    LFUNC_FA_(EC_POINT_bn2point) \
    LFUNC_FA_(UNIMPLEMENTED) /* EC_KEY_get_key_method_data */ \
    LFUNC_FA_(ECDSA_sign_ex) \
    LFUNC_FA_(EC_GROUP_get_pentanomial_basis) \
    LFUNC_FA_(ECDSA_sign_setup) \
    LFUNC_FA_(BN_GF2m_mod_solve_quad_arr) \
    LFUNC_FA_(EC_KEY_up_ref) \
    LFUNC_FA_(d2i_EC_PUBKEY) \
    LFUNC_FA_(EC_GROUP_have_precompute_mult) \
    LFUNC_FA_(UNIMPLEMENTED) /* EC_KEY_print_fp */ \
    LFUNC_FA_(BN_GF2m_mod_arr) \
    LFUNC_FA_(UNIMPLEMENTED) /* ECDH_get_ex_data */ \
    LFUNC_FA_(UNIMPLEMENTED) /* ENGINE_unregister_ECDH */ \
    LFUNC_FA_(UNIMPLEMENTED) /* ECDH_OpenSSL */ \
    LFUNC_FA_(EC_POINT_dup) \
    LFUNC_FA_(EVP_PKEY_set1_EC_KEY) \
    LFUNC_FA_(BN_GF2m_mod_sqrt_arr) \
    LFUNC_FA_(UNIMPLEMENTED) /* ECPKParameters_print_fp */ \
    LFUNC_FA_(EC_KEY_set_private_key) \
    LFUNC_FA_(BN_GF2m_poly2arr) \
    LFUNC_FA_(i2d_ECParameters) \
    LFUNC_FA_(UNIMPLEMENTED) /* ENGINE_set_ECDH */ \
    LFUNC_FA_(SHA256_Init) \
    LFUNC_FA_(UNIMPLEMENTED) /* ECDSA_get_ex_data */ \
    LFUNC_FA_(SHA224) \
    LFUNC_FA_(UNIMPLEMENTED) /* BIO_dump_indent_fp */ \
    LFUNC_FA_(EC_GROUP_get_seed_len) \
    LFUNC_FA_(i2d_EC_PUBKEY) \
    LFUNC_FA_(UNIMPLEMENTED) /* ECDSA_get_default_method */ \
    LFUNC_FA_(EC_GFp_nist_method) \
    LFUNC_FA_(OBSOLETE_ENGINE_load_padlock) \
    LFUNC_FA_(EC_GROUP_set_curve_name) \
    LFUNC_FA_(BN_GF2m_mod_sqr_arr) \
    LFUNC_FA_(BIO_s_datagram) \
    LFUNC_FA_(UNIMPLEMENTED) /* ENGINE_set_default_ECDSA */ \
    LFUNC_FA_(UNIMPLEMENTED) /* ECDH_set_default_method */ \
    LFUNC_FA_(SHA384_Update) \
    LFUNC_FA_(UNIMPLEMENTED) /* EC_KEY_insert_key_method_data */ \
    LFUNC_FA_(SHA224_Final) \
    LFUNC_FA_(SHA224_Update) \
    LFUNC_FA_(d2i_ECPrivateKey) \
    LFUNC_FA_(UNIMPLEMENTED) /* ENGINE_register_all_STORE */ \
    LFUNC_FA_(SHA512_Final) \
    LFUNC_FA_(EC_GROUP_get_asn1_flag) \
    LFUNC_FA_(UNIMPLEMENTED) /* ECDH_get_ex_new_index */ \
    LFUNC_FA_(EC_GROUP_get0_seed) \
    LFUNC_FA_(BN_GF2m_mod_div_arr) \
    LFUNC_FA_(UNIMPLEMENTED) /* ENGINE_set_ECDSA */ \
    LFUNC_FA_(UNIMPLEMENTED) /* PEM_write_EC_PUBKEY */ \
    LFUNC_FA_(UNIMPLEMENTED) /* ECDH_set_method */ \
    LFUNC_FA_(UNIMPLEMENTED) /* ECDH_set_ex_data */ \
    LFUNC_FA_(UNIMPLEMENTED) /* PEM_read_EC_PUBKEY */ \
    LFUNC_FA_(UNIMPLEMENTED) /* ECDSA_OpenSSL */ \
    LFUNC_FA_(EC_KEY_get_enc_flags) \
    LFUNC_FA_(UNIMPLEMENTED) /* ECDSA_set_default_method */ \
    LFUNC_FA_(EC_POINT_set_compressed_coordinates_GF2m) \
    LFUNC_FA_(EC_GROUP_cmp) \
    LFUNC_FA_(SHA224_Init) \
    LFUNC_FA_(UNIMPLEMENTED) /* PEM_read_ECPrivateKey */ \
    LFUNC_FA_(SHA512_Init) \
    LFUNC_FA_(UNIMPLEMENTED) /* ERR_load_ECDSA_strings */ \
    LFUNC_FA_(EC_GROUP_get_basis_type) \
    LFUNC_FA_(UNIMPLEMENTED) /* PEM_write_ECPKParameters */ \
    LFUNC_FA_(UNIMPLEMENTED) /* ENGINE_register_all_ECDH */ \
    LFUNC_FA_(UNIMPLEMENTED) /* i2d_ECPrivateKey_fp */ \
    LFUNC_FA_(UNIMPLEMENTED) /* ENGINE_register_all_ECDSA */ \
    LFUNC_FA_(EC_GROUP_dup) \
    LFUNC_FA_(UNIMPLEMENTED) /* ENGINE_get_default_ECDSA */ \
    LFUNC_FA_(SHA256_Transform) \
    LFUNC_FA_(EC_KEY_set_enc_flags) \
    LFUNC_FA_(EC_POINT_point2hex) \
    LFUNC_FA_(UNIMPLEMENTED) /* ENGINE_get_STORE */ \
    LFUNC_FA_(ECDSA_do_sign_ex) \
    LFUNC_FA_(UNIMPLEMENTED) /* d2i_ECPrivateKey_fp */ \
    LFUNC_FA_(SHA512_Transform) \
    LFUNC_FA_(UNIMPLEMENTED) /* PEM_write_ECPrivateKey */ \
    LFUNC_FA_(EC_KEY_set_public_key) \
    LFUNC_FA_(UNIMPLEMENTED) /* PEM_read_ECPKParameters */ \
    LFUNC_FA_(UNIMPLEMENTED) /* ENGINE_register_STORE */ \
    LFUNC_FA_(UNIMPLEMENTED) /* ECParameters_print_fp */ \
    LFUNC_FA_(EC_GROUP_get_curve_name) \
    LFUNC_FA_(UNIMPLEMENTED) /* i2d_EC_PUBKEY_fp */ \
    LFUNC_FA_(SHA256_Final) \
    LFUNC_FA_(UNIMPLEMENTED) /* ENGINE_get_ECDH */ \
    LFUNC_FA_(UNIMPLEMENTED) /* ENGINE_get_ECDSA */ \
    LFUNC_FA_(UNIMPLEMENTED) /* ERR_load_ECDH_strings */ \
    LFUNC_FA_(UNIMPLEMENTED) /* ECDSA_set_method */ \
    LFUNC_FA_(d2i_ECParameters) \
    LFUNC_FA_(SHA384_Init) \
    LFUNC_FA_(UNIMPLEMENTED) /* ECDSA_set_ex_data */ \
    LFUNC_FA_(SHA384_Final) \
    LFUNC_FA_(UNIMPLEMENTED) /* ECDSA_get_ex_new_index */ \
    LFUNC_FA_(SHA384) \
    LFUNC_FA_(UNIMPLEMENTED) /* d2i_EC_PUBKEY_fp */ \
    LFUNC_FA_(UNIMPLEMENTED) /* ENGINE_set_default_ECDH */ \
    LFUNC_FA_(EC_POINT_hex2point) \
    LFUNC_FA_(SHA256_Update) \
    LFUNC_FA_(BN_GF2m_mod_inv_arr) \
    LFUNC_FA_(UNIMPLEMENTED) /* ENGINE_unregister_ECDSA */ \
    LFUNC_FA_(UNIMPLEMENTED) /* BN_BLINDING_set_thread_id */ \
    LFUNC_FA_(DH_check_pub_key) \
    LFUNC_FA_(Camellia_cbc_encrypt) \
    LFUNC_FA_(Camellia_cfb128_encrypt) \
    LFUNC_FA_(Camellia_cfb1_encrypt) \
    LFUNC_FA_(Camellia_cfb8_encrypt) \
    LFUNC_FA_(Camellia_ctr128_encrypt) \
    LFUNC_FA_(Camellia_decrypt) \
    LFUNC_FA_(Camellia_ecb_encrypt) \
    LFUNC_FA_(Camellia_encrypt) \
    LFUNC_FA_(Camellia_ofb128_encrypt) \
    LFUNC_FA_(Camellia_set_key) \
    LFUNC_FA_(EVP_camellia_128_cbc) \
    LFUNC_FA_(EVP_camellia_128_cfb128) \
    LFUNC_FA_(EVP_camellia_128_cfb1) \
    LFUNC_FA_(EVP_camellia_128_cfb8) \
    LFUNC_FA_(EVP_camellia_128_ecb) \
    LFUNC_FA_(EVP_camellia_128_ofb) \
    LFUNC_FA_(EVP_camellia_192_cbc) \
    LFUNC_FA_(EVP_camellia_192_cfb128) \
    LFUNC_FA_(EVP_camellia_192_cfb1) \
    LFUNC_FA_(EVP_camellia_192_cfb8) \
    LFUNC_FA_(EVP_camellia_192_ecb) \
    LFUNC_FA_(EVP_camellia_192_ofb) \
    LFUNC_FA_(EVP_camellia_256_cbc) \
    LFUNC_FA_(EVP_camellia_256_cfb128) \
    LFUNC_FA_(EVP_camellia_256_cfb1) \
    LFUNC_FA_(EVP_camellia_256_cfb8) \
    LFUNC_FA_(EVP_camellia_256_ecb) \
    LFUNC_FA_(EVP_camellia_256_ofb) \
    LFUNC_FA_(AES_bi_ige_encrypt) \
    LFUNC_FA_(SEED_decrypt) \
    LFUNC_FA_(SEED_encrypt) \
    LFUNC_FA_(SEED_cbc_encrypt) \
    LFUNC_FA_(EVP_seed_ofb) \
    LFUNC_FA_(SEED_cfb128_encrypt) \
    LFUNC_FA_(SEED_ofb128_encrypt) \
    LFUNC_FA_(EVP_seed_cbc) \
    LFUNC_FA_(SEED_ecb_encrypt) \
    LFUNC_FA_(EVP_seed_ecb) \
    LFUNC_FA_(SEED_set_key) \
    LFUNC_FA_(EVP_seed_cfb128) \
    LFUNC_FA_(AES_unwrap_key) \
    LFUNC_FA_(AES_wrap_key) \
    LFUNC_FA_(CMS_ReceiptRequest_free) \
    LFUNC_FA_(UNIMPLEMENTED) /* PEM_write_CMS */ \
    LFUNC_FA_(CMS_add0_CertificateChoices) \
    LFUNC_FA_(CMS_unsigned_add1_attr_by_OBJ) \
    LFUNC_FA_(ERR_load_CMS_strings) \
    LFUNC_FA_(CMS_sign_receipt) \
    LFUNC_FA_(i2d_CMS_ContentInfo) \
    LFUNC_FA_(CMS_signed_delete_attr) \
    LFUNC_FA_(d2i_CMS_bio) \
    LFUNC_FA_(CMS_unsigned_get_attr_by_NID) \
    LFUNC_FA_(CMS_verify) \
    LFUNC_FA_(SMIME_read_CMS) \
    LFUNC_FA_(CMS_decrypt_set1_key) \
    LFUNC_FA_(CMS_SignerInfo_get0_algs) \
    LFUNC_FA_(CMS_add1_cert) \
    LFUNC_FA_(CMS_set_detached) \
    LFUNC_FA_(CMS_encrypt) \
    LFUNC_FA_(CMS_EnvelopedData_create) \
    LFUNC_FA_(CMS_uncompress) \
    LFUNC_FA_(CMS_add0_crl) \
    LFUNC_FA_(CMS_SignerInfo_verify_content) \
    LFUNC_FA_(CMS_unsigned_get0_data_by_OBJ) \
    LFUNC_FA_(PEM_write_bio_CMS) \
    LFUNC_FA_(CMS_unsigned_get_attr) \
    LFUNC_FA_(CMS_RecipientInfo_ktri_cert_cmp) \
    LFUNC_FA_(CMS_RecipientInfo_ktri_get0_algs) \
    LFUNC_FA_(CMS_ContentInfo_free) \
    LFUNC_FA_(CMS_final) \
    LFUNC_FA_(CMS_add_simple_smimecap) \
    LFUNC_FA_(CMS_SignerInfo_verify) \
    LFUNC_FA_(CMS_data) \
    LFUNC_FA_(d2i_CMS_ReceiptRequest) \
    LFUNC_FA_(CMS_compress) \
    LFUNC_FA_(CMS_digest_create) \
    LFUNC_FA_(CMS_SignerInfo_cert_cmp) \
    LFUNC_FA_(CMS_SignerInfo_sign) \
    LFUNC_FA_(CMS_data_create) \
    LFUNC_FA_(i2d_CMS_bio) \
    LFUNC_FA_(CMS_EncryptedData_set1_key) \
    LFUNC_FA_(CMS_decrypt) \
    LFUNC_FA_(CMS_unsigned_delete_attr) \
    LFUNC_FA_(CMS_unsigned_get_attr_count) \
    LFUNC_FA_(CMS_add_smimecap) \
    LFUNC_FA_(UNIMPLEMENTED) /* PEM_read_CMS */ \
    LFUNC_FA_(CMS_signed_get_attr_by_OBJ) \
    LFUNC_FA_(d2i_CMS_ContentInfo) \
    LFUNC_FA_(CMS_add_standard_smimecap) \
    LFUNC_FA_(CMS_ContentInfo_new) \
    LFUNC_FA_(CMS_RecipientInfo_type) \
    LFUNC_FA_(CMS_get0_type) \
    LFUNC_FA_(CMS_is_detached) \
    LFUNC_FA_(CMS_sign) \
    LFUNC_FA_(CMS_signed_add1_attr) \
    LFUNC_FA_(CMS_unsigned_get_attr_by_OBJ) \
    LFUNC_FA_(SMIME_write_CMS) \
    LFUNC_FA_(CMS_EncryptedData_decrypt) \
    LFUNC_FA_(CMS_get0_RecipientInfos) \
    LFUNC_FA_(CMS_add0_RevocationInfoChoice) \
    LFUNC_FA_(CMS_decrypt_set1_pkey) \
    LFUNC_FA_(CMS_SignerInfo_set1_signer_cert) \
    LFUNC_FA_(CMS_get0_signers) \
    LFUNC_FA_(CMS_ReceiptRequest_get0_values) \
    LFUNC_FA_(CMS_signed_get0_data_by_OBJ) \
    LFUNC_FA_(CMS_get0_SignerInfos) \
    LFUNC_FA_(CMS_add0_cert) \
    LFUNC_FA_(CMS_EncryptedData_encrypt) \
    LFUNC_FA_(CMS_digest_verify) \
    LFUNC_FA_(CMS_set1_signers_certs) \
    LFUNC_FA_(CMS_signed_get_attr) \
    LFUNC_FA_(CMS_RecipientInfo_set0_key) \
    LFUNC_FA_(CMS_SignedData_init) \
    LFUNC_FA_(CMS_RecipientInfo_kekri_get0_id) \
    LFUNC_FA_(CMS_verify_receipt) \
    LFUNC_FA_(PEM_read_bio_CMS) \
    LFUNC_FA_(CMS_get1_crls) \
    LFUNC_FA_(CMS_add0_recipient_key) \
    LFUNC_FA_(CMS_ReceiptRequest_new) \
    LFUNC_FA_(CMS_get0_content) \
    LFUNC_FA_(CMS_get1_ReceiptRequest) \
    LFUNC_FA_(CMS_signed_add1_attr_by_OBJ) \
    LFUNC_FA_(CMS_RecipientInfo_kekri_id_cmp) \
    LFUNC_FA_(CMS_add1_ReceiptRequest) \
    LFUNC_FA_(CMS_SignerInfo_get0_signer_id) \
    LFUNC_FA_(CMS_unsigned_add1_attr_by_NID) \
    LFUNC_FA_(CMS_unsigned_add1_attr) \
    LFUNC_FA_(CMS_signed_get_attr_by_NID) \
    LFUNC_FA_(CMS_get1_certs) \
    LFUNC_FA_(CMS_signed_add1_attr_by_NID) \
    LFUNC_FA_(CMS_unsigned_add1_attr_by_txt) \
    LFUNC_FA_(CMS_dataFinal) \
    LFUNC_FA_(CMS_RecipientInfo_ktri_get0_signer_id) \
    LFUNC_FA_(i2d_CMS_ReceiptRequest) \
    LFUNC_FA_(CMS_add1_recipient_cert) \
    LFUNC_FA_(CMS_dataInit) \
    LFUNC_FA_(CMS_signed_add1_attr_by_txt) \
    LFUNC_FA_(CMS_RecipientInfo_decrypt) \
    LFUNC_FA_(CMS_signed_get_attr_count) \
    LFUNC_FA_(CMS_get0_eContentType) \
    LFUNC_FA_(CMS_set1_eContentType) \
    LFUNC_FA_(CMS_ReceiptRequest_create0) \
    LFUNC_FA_(CMS_add1_signer) \
    LFUNC_FA_(CMS_RecipientInfo_set0_pkey) \
    LFUNC_FA_(ENGINE_set_load_ssl_client_cert_function) \
    LFUNC_FA_(ENGINE_get_ssl_client_cert_function) \
    LFUNC_FA_(ENGINE_load_ssl_client_cert) \
    LFUNC_FA_(OBSOLETE_ENGINE_load_capi) \
    LFUNC_FA_(ENGINE_register_pkey_meths) \
    LFUNC_FA_(ENGINE_get_pkey_asn1_meth_engine) \
    LFUNC_FA_(WHIRLPOOL_Init) \
    LFUNC_FA_(WHIRLPOOL) \
    LFUNC_FA_(ENGINE_get_pkey_asn1_meth) \
    LFUNC_FA_(ENGINE_get_pkey_meth) \
    LFUNC_FA_(BIO_new_CMS) \
    LFUNC_FA_(ENGINE_set_default_pkey_asn1_meths) \
    LFUNC_FA_(WHIRLPOOL_BitUpdate) \
    LFUNC_FA_(i2d_CMS_bio_stream) \
    LFUNC_FA_(CMS_stream) \
    LFUNC_FA_(ENGINE_pkey_asn1_find_str) \
    LFUNC_FA_(ENGINE_get_pkey_meths) \
    LFUNC_FA_(ENGINE_register_pkey_asn1_meths) \
    LFUNC_FA_(ENGINE_set_default_pkey_meths) \
    LFUNC_FA_(HMAC_CTX_copy) \
    LFUNC_FA_(ENGINE_get_pkey_asn1_meths) \
    LFUNC_FA_(EVP_whirlpool) \
    LFUNC_FA_(ENGINE_register_all_pkey_meths) \
    LFUNC_FA_(WHIRLPOOL_Final) \
    LFUNC_FA_(ENGINE_get_pkey_asn1_meth_str) \
    LFUNC_FA_(ENGINE_register_all_pkey_asn1_meths) \
    LFUNC_FA_(CMS_ContentInfo_print_ctx) \
    LFUNC_FA_(CMS_add1_crl) \
    LFUNC_FA_(ENGINE_set_pkey_asn1_meths) \
    LFUNC_FA_(ENGINE_get_pkey_meth_engine) \
    LFUNC_FA_(WHIRLPOOL_Update) \
    LFUNC_FA_(PEM_write_bio_CMS_stream) \
    LFUNC_FA_(ENGINE_unregister_pkey_meths) \
    LFUNC_FA_(ENGINE_unregister_pkey_asn1_meths) \
    LFUNC_FA_(ENGINE_set_pkey_meths) \
    LFUNC_FA_(DSAparams_dup) \
    LFUNC_FA_(DHparams_dup) \
    LFUNC_FA_(X509_issuer_name_hash_old) \
    LFUNC_FA_(X509_subject_name_hash_old) \
    LFUNC_FA_(SRP_VBASE_get_by_user) \
    LFUNC_FA_(SRP_Calc_server_key) \
    LFUNC_FA_(SRP_create_verifier) \
    LFUNC_FA_(SRP_create_verifier_BN) \
    LFUNC_FA_(SRP_Calc_u) \
    LFUNC_FA_(SRP_VBASE_free) \
    LFUNC_FA_(SRP_Calc_client_key) \
    LFUNC_FA_(SRP_get_default_gN) \
    LFUNC_FA_(SRP_Calc_x) \
    LFUNC_FA_(SRP_Calc_B) \
    LFUNC_FA_(SRP_VBASE_new) \
    LFUNC_FA_(SRP_check_known_gN_param) \
    LFUNC_FA_(SRP_Calc_A) \
    LFUNC_FA_(SRP_Verify_A_mod_N) \
    LFUNC_FA_(SRP_VBASE_init) \
    LFUNC_FA_(SRP_Verify_B_mod_N) \
    LFUNC_FA_(EC_KEY_set_public_key_affine_coordinates) \
    LFUNC_FA_(EVP_aes_192_ctr) \
    LFUNC_FA_(EVP_aes_128_ctr) \
    LFUNC_FA_(EVP_aes_256_ctr) \
    LFUNC_FA_(EC_KEY_get_flags) \
    LFUNC_FA_(EVP_aes_128_xts) \
    LFUNC_FA_(UNIMPLEMENTED) /* private_AES_set_decrypt_key */ \
    LFUNC_FA_(EVP_aes_256_xts) \
    LFUNC_FA_(EVP_aes_128_gcm) \
    LFUNC_FA_(EC_KEY_clear_flags) \
    LFUNC_FA_(EC_KEY_set_flags) \
    LFUNC_FA_(EVP_aes_256_ccm) \
    LFUNC_FA_(UNIMPLEMENTED) /* private_AES_set_encrypt_key */ \
    LFUNC_FA_(EVP_aes_128_ccm) \
    LFUNC_FA_(EVP_aes_192_gcm) \
    LFUNC_FA_(EVP_aes_256_gcm) \
    LFUNC_FA_(EVP_aes_192_ccm) \
    LFUNC_FA_(EVP_rc4_hmac_md5) \
    LFUNC_FA_(EVP_aes_128_cbc_hmac_sha1) \
    LFUNC_FA_(OBSOLETE_ENGINE_load_rdrand) \
    LFUNC_FA_(UNIMPLEMENTED) /* ENGINE_load_rsax */ \
    LFUNC_FA_(EVP_aes_256_cbc_hmac_sha1) \
    LFUNC_FA_(CMS_add0_recipient_password) \
    LFUNC_FA_(CMS_decrypt_set1_password) \
    LFUNC_FA_(CMS_RecipientInfo_set0_password) \
    LFUNC_FA_(X509_REQ_sign_ctx) \
    LFUNC_FA_(X509_CRL_sign_ctx) \
    LFUNC_FA_(X509_signature_dump) \
    LFUNC_FA_(X509_sign_ctx) \
    LFUNC_FA_(ASN1_item_sign_ctx) \
    LFUNC_FA_(UNIMPLEMENTED) /* OPENSSL_cpuid_setup */ \
    LFUNC_FA_(UNIMPLEMENTED) /* ERR_remove_thread_state */ \
    LFUNC_FA_(X509_STORE_CTX_set0_crls) \
    LFUNC_FA_(SSL_SESSION_get_id) \
    LFUNC_FA_(SSL_CTX_sess_set_new_cb) \
    LFUNC_FA_(SSL_CTX_sess_get_get_cb) \
    LFUNC_FA_(SSL_CTX_sess_set_get_cb) \
    LFUNC_FA_(SSL_CTX_get_info_callback) \
    LFUNC_FA_(SSL_CTX_set_client_cert_cb) \
    LFUNC_FA_(SSL_CTX_sess_set_remove_cb) \
    LFUNC_FA_(SSL_CTX_sess_get_new_cb) \
    LFUNC_FA_(SSL_CTX_get_client_cert_cb) \
    LFUNC_FA_(SSL_CTX_sess_get_remove_cb) \
    LFUNC_FA_(PEM_write_bio_SSL_SESSION) \
    LFUNC_FA_(UNIMPLEMENTED) /* PEM_read_SSL_SESSION */ \
    LFUNC_FA_(PEM_read_bio_SSL_SESSION) \
    LFUNC_FA_(UNIMPLEMENTED) /* PEM_write_SSL_SESSION */ \
    LFUNC_FA_(UNIMPLEMENTED) /* PEM_read_PKCS7 */ \
    LFUNC_FA_(UNIMPLEMENTED) /* PEM_read_PrivateKey */ \
    LFUNC_FA_(UNIMPLEMENTED) /* PEM_read_RSAPrivateKey */ \
    LFUNC_FA_(UNIMPLEMENTED) /* PEM_read_X509 */ \
    LFUNC_FA_(UNIMPLEMENTED) /* PEM_read_X509_CRL */ \
    LFUNC_FA_(UNIMPLEMENTED) /* PEM_read_X509_REQ */ \
    LFUNC_FA_(UNIMPLEMENTED) /* PEM_write_PKCS7 */ \
    LFUNC_FA_(UNIMPLEMENTED) /* PEM_write_PrivateKey */ \
    LFUNC_FA_(UNIMPLEMENTED) /* PEM_write_RSAPrivateKey */ \
    LFUNC_FA_(UNIMPLEMENTED) /* PEM_write_X509 */ \
    LFUNC_FA_(UNIMPLEMENTED) /* PEM_write_X509_CRL */ \
    LFUNC_FA_(UNIMPLEMENTED) /* PEM_write_X509_REQ */ \
    LFUNC_FA_(UNIMPLEMENTED) /* PEM_read_RSAPublicKey */ \
    LFUNC_FA_(UNIMPLEMENTED) /* PEM_write_RSAPublicKey */ \
    LFUNC_FA_(UNIMPLEMENTED) /* PEM_read_NETSCAPE_CERT_SEQUENCE */ \
    LFUNC_FA_(UNIMPLEMENTED) /* PEM_write_NETSCAPE_CERT_SEQUENCE */ \
    LFUNC_FA_(UNIMPLEMENTED) /* X509V3_EXT_print_fp */ \
    LFUNC_FA_(UNIMPLEMENTED) /* i2d_PKCS12_fp */ \
    LFUNC_FA_(UNIMPLEMENTED) /* d2i_PKCS12_fp */ \
    LFUNC_FA_(UNIMPLEMENTED) /* PEM_read_PKCS8 */ \
    LFUNC_FA_(UNIMPLEMENTED) /* PEM_write_PKCS8 */ \
    LFUNC_FA_(UNIMPLEMENTED) /* PEM_read_PKCS8_PRIV_KEY_INFO */ \
    LFUNC_FA_(UNIMPLEMENTED) /* PEM_write_PKCS8_PRIV_KEY_INFO */ \
    LFUNC_FA_(UNIMPLEMENTED) /* PEM_write_PKCS8PrivateKey */ \
    LFUNC_FA_(UNIMPLEMENTED) /* PEM_read_X509_AUX */ \
    LFUNC_FA_(UNIMPLEMENTED) /* PEM_write_PUBKEY */ \
    LFUNC_FA_(UNIMPLEMENTED) /* PEM_read_RSA_PUBKEY */ \
    LFUNC_FA_(UNIMPLEMENTED) /* PEM_read_PUBKEY */ \
    LFUNC_FA_(UNIMPLEMENTED) /* PEM_write_X509_AUX */ \
    LFUNC_FA_(UNIMPLEMENTED) /* PEM_write_RSA_PUBKEY */ \
    LFUNC_FA_(UNIMPLEMENTED) /* PEM_write_PKCS8PrivateKey_nid */ \
    LFUNC_FA_(UNIMPLEMENTED) /* i2d_PKCS8PrivateKey_fp */ \
    LFUNC_FA_(UNIMPLEMENTED) /* i2d_PKCS8PrivateKey_nid_fp */ \
    LFUNC_FA_(UNIMPLEMENTED) /* d2i_PKCS8PrivateKey_fp */ \
    LFUNC_FA_(UNIMPLEMENTED) /* PEM_write_X509_REQ_NEW */ \
    LFUNC_FA_(UNIMPLEMENTED) /* CONF_dump_fp */ \
    LFUNC_FA_(UNIMPLEMENTED) /* NCONF_dump_fp */ \
    LFUNC_FA_(UNIMPLEMENTED) /* FIPS_mode_set */ \
    LFUNC_FA_(BN_X931_generate_Xpq) \
    LFUNC_FA_(BN_get0_nist_prime_384) \
    LFUNC_FA_(ERR_set_mark) \
    LFUNC_FA_(BN_BLINDING_invert_ex) \
    LFUNC_FA_(NAME_CONSTRAINTS_free) \
    LFUNC_FA_(X509_STORE_CTX_set0_param) \
    LFUNC_FA_(POLICY_CONSTRAINTS_free) \
    LFUNC_FA_(BN_nist_mod_192) \
    LFUNC_FA_(GENERAL_SUBTREE_free) \
    LFUNC_FA_(PKCS12_add_safe) \
    LFUNC_FA_(BN_get0_nist_prime_192) \
    LFUNC_FA_(X509_keyid_get0) \
    LFUNC_FA_(UNIMPLEMENTED) /* pitem_new */ \
    LFUNC_FA_(X509_policy_node_get0_parent) \
    LFUNC_FA_(a2i_IPADDRESS) \
    LFUNC_FA_(X509_STORE_CTX_set_depth) \
    LFUNC_FA_(X509_VERIFY_PARAM_inherit) \
    LFUNC_FA_(UNIMPLEMENTED) /* pqueue_iterator */ \
    LFUNC_FA_(X509_VERIFY_PARAM_set_depth) \
    LFUNC_FA_(EVP_PKEY_add1_attr_by_txt) \
    LFUNC_FA_(BN_BLINDING_set_flags) \
    LFUNC_FA_(X509_VERIFY_PARAM_set1_policies) \
    LFUNC_FA_(X509_VERIFY_PARAM_set1_name) \
    LFUNC_FA_(POLICY_MAPPING_free) \
    LFUNC_FA_(UNIMPLEMENTED) /* pqueue_print */ \
    LFUNC_FA_(UNIMPLEMENTED) /* PEM_write_bio_X509_CERT_PAIR */ \
    LFUNC_FA_(EVP_PKEY_cmp) \
    LFUNC_FA_(X509_policy_level_node_count) \
    LFUNC_FA_(EVP_PKEY_get_attr) \
    LFUNC_FA_(GENERAL_SUBTREE_new) \
    LFUNC_FA_(X509_policy_node_get0_qualifiers) \
    LFUNC_FA_(UNIMPLEMENTED) /* pqueue_find */ \
    LFUNC_FA_(UNIMPLEMENTED) /* pqueue_peek */ \
    LFUNC_FA_(X509_policy_node_get0_policy) \
    LFUNC_FA_(PKCS12_add_safes) \
    LFUNC_FA_(BN_BLINDING_convert_ex) \
    LFUNC_FA_(X509_policy_tree_free) \
    LFUNC_FA_(UNIMPLEMENTED) /* OPENSSL_ia32cap_loc */ \
    LFUNC_FA_(BN_get0_nist_prime_224) \
    LFUNC_FA_(BN_GENCB_call) \
    LFUNC_FA_(NAME_CONSTRAINTS_new) \
    LFUNC_FA_(ECParameters_print) \
    LFUNC_FA_(OBSOLETE_BUF_memdup) \
    LFUNC_FA_(X509_VERIFY_PARAM_set_trust) \
    LFUNC_FA_(EVP_PKEY_get_attr_count) \
    LFUNC_FA_(X509_STORE_CTX_get0_param) \
    LFUNC_FA_(UNIMPLEMENTED) /* PEM_read_X509_CERT_PAIR */ \
    LFUNC_FA_(X509_STORE_set_depth) \
    LFUNC_FA_(OBSOLETE_BUF_strndup) \
    LFUNC_FA_(ASN1_put_eoc) \
    LFUNC_FA_(X509_VERIFY_PARAM_table_cleanup) \
    LFUNC_FA_(RSA_setup_blinding) \
    LFUNC_FA_(OPENSSL_sk_find_ex) \
    LFUNC_FA_(POLICY_CONSTRAINTS_new) \
    LFUNC_FA_(X509_VERIFY_PARAM_get_depth) \
    LFUNC_FA_(ASN1_item_ndef_i2d) \
    LFUNC_FA_(ERR_pop_to_mark) \
    LFUNC_FA_(X509_policy_level_get0_node) \
    LFUNC_FA_(i2d_PKCS7_NDEF) \
    LFUNC_FA_(ASN1_generate_v3) \
    LFUNC_FA_(X509_policy_tree_level_count) \
    LFUNC_FA_(UNIMPLEMENTED) /* X509_CERT_PAIR_free */ \
    LFUNC_FA_(BN_nist_mod_224) \
    LFUNC_FA_(BIO_dgram_non_fatal_error) \
    LFUNC_FA_(v2i_ASN1_BIT_STRING) \
    LFUNC_FA_(X509_STORE_CTX_set_default) \
    LFUNC_FA_(X509_VERIFY_PARAM_set1) \
    LFUNC_FA_(v2i_GENERAL_NAME_ex) \
    LFUNC_FA_(BN_nist_mod_521) \
    LFUNC_FA_(X509_policy_tree_get0_level) \
    LFUNC_FA_(ASN1_const_check_infinite_end) \
    LFUNC_FA_(EVP_PKEY_delete_attr) \
    LFUNC_FA_(BN_get0_nist_prime_256) \
    LFUNC_FA_(i2v_ASN1_BIT_STRING) \
    LFUNC_FA_(BN_nist_mod_384) \
    LFUNC_FA_(UNIMPLEMENTED) /* i2d_X509_CERT_PAIR */ \
    LFUNC_FA_(UNIMPLEMENTED) /* pqueue_pop */ \
    LFUNC_FA_(EVP_PKEY_get_attr_by_OBJ) \
    LFUNC_FA_(X509_VERIFY_PARAM_lookup) \
    LFUNC_FA_(UNIMPLEMENTED) /* X509_CERT_PAIR_new */ \
    LFUNC_FA_(X509V3_NAME_from_section) \
    LFUNC_FA_(EVP_PKEY_add1_attr) \
    LFUNC_FA_(UNIMPLEMENTED) /* PEM_write_X509_CERT_PAIR */ \
    LFUNC_FA_(BIO_dump_indent_cb) \
    LFUNC_FA_(UNIMPLEMENTED) /* d2i_X509_CERT_PAIR */ \
    LFUNC_FA_(UNIMPLEMENTED) /* asn1_const_Finish */ \
    LFUNC_FA_(BN_nist_mod_256) \
    LFUNC_FA_(X509_VERIFY_PARAM_add0_table) \
    LFUNC_FA_(UNIMPLEMENTED) /* pqueue_free */ \
    LFUNC_FA_(BN_BLINDING_create_param) \
    LFUNC_FA_(BN_get0_nist_prime_521) \
    LFUNC_FA_(BN_is_prime_fasttest_ex) \
    LFUNC_FA_(X509_policy_check) \
    LFUNC_FA_(EVP_PKEY_get_attr_by_NID) \
    LFUNC_FA_(BN_BLINDING_get_flags) \
    LFUNC_FA_(PKCS12_add_cert) \
    LFUNC_FA_(EVP_CIPHER_CTX_rand_key) \
    LFUNC_FA_(a2i_IPADDRESS_NC) \
    LFUNC_FA_(PKCS7_set_digest) \
    LFUNC_FA_(POLICY_MAPPING_new) \
    LFUNC_FA_(PKCS7_set0_type_other) \
    LFUNC_FA_(UNIMPLEMENTED) /* PEM_read_bio_X509_CERT_PAIR */ \
    LFUNC_FA_(UNIMPLEMENTED) /* pqueue_next */ \
    LFUNC_FA_(EVP_PKEY_add1_attr_by_OBJ) \
    LFUNC_FA_(X509_VERIFY_PARAM_set_time) \
    LFUNC_FA_(UNIMPLEMENTED) /* pqueue_new */ \
    LFUNC_FA_(PKCS12_add_key) \
    LFUNC_FA_(UNIMPLEMENTED) /* DSO_merge */ \
    LFUNC_FA_(BIO_dump_cb) \
    LFUNC_FA_(UNIMPLEMENTED) /* pqueue_insert */ \
    LFUNC_FA_(UNIMPLEMENTED) /* pitem_free */ \
    LFUNC_FA_(BN_get_rfc3526_prime_8192) \
    LFUNC_FA_(X509_VERIFY_PARAM_clear_flags) \
    LFUNC_FA_(BN_get_rfc2409_prime_1024) \
    LFUNC_FA_(BN_get_rfc3526_prime_2048) \
    LFUNC_FA_(BN_get_rfc3526_prime_6144) \
    LFUNC_FA_(BN_get_rfc3526_prime_1536) \
    LFUNC_FA_(BN_get_rfc3526_prime_3072) \
    LFUNC_FA_(BN_get_rfc3526_prime_4096) \
    LFUNC_FA_(BN_get_rfc2409_prime_768) \
    LFUNC_FA_(X509_VERIFY_PARAM_get_flags) \
    LFUNC_FA_(EVP_CIPHER_CTX_new) \
    LFUNC_FA_(EVP_CIPHER_CTX_free) \
    LFUNC_FA_(EVP_CIPHER_get_block_size) \
    LFUNC_FA_(EVP_CIPHER_CTX_set_app_data) \
    LFUNC_FA_(BIO_method_type) \
    LFUNC_FA_(EVP_CIPHER_CTX_get_nid) \
    LFUNC_FA_(EVP_CIPHER_CTX_get_key_length) \
    LFUNC_FA_(EVP_MD_get_size) \
    LFUNC_FA_(EVP_MD_CTX_test_flags) \
    LFUNC_FA_(BIO_clear_flags) \
    LFUNC_FA_(EVP_MD_get_pkey_type) \
    LFUNC_FA_(EVP_MD_CTX_clear_flags) \
    LFUNC_FA_(EVP_CIPHER_get_flags) \
    LFUNC_FA_(BIO_get_callback) \
    LFUNC_FA_(EVP_CIPHER_get_key_length) \
    LFUNC_FA_(EVP_Cipher) \
    LFUNC_FA_(EVP_CIPHER_CTX_get_block_size) \
    LFUNC_FA_(EVP_CIPHER_CTX_cipher) \
    LFUNC_FA_(EVP_CIPHER_CTX_get_app_data) \
    LFUNC_FA_(EVP_MD_get_block_size) \
    LFUNC_FA_(OBSOLETE_EVP_CIPHER_CTX_flags) \
    LFUNC_FA_(EVP_MD_CTX_md) \
    LFUNC_FA_(BIO_method_name) \
    LFUNC_FA_(EVP_CIPHER_CTX_get_iv_length) \
    LFUNC_FA_(CRYPTO_memcmp) \
    LFUNC_FA_(BN_consttime_swap) \
    LFUNC_FA_(i2d_X509_EXTENSIONS) \
    LFUNC_FA_(d2i_X509_EXTENSIONS) \
    LFUNC_FA_(X509_ALGOR_get0) \
    LFUNC_FA_(X509_ALGOR_set0) \
    LFUNC_FA_(X509at_get0_data_by_OBJ) \
    LFUNC_FA_(ASN1_TYPE_set1) \
    LFUNC_FA_(ASN1_STRING_set0) \
    LFUNC_FA_(i2d_X509_ALGORS) \
    LFUNC_FA_(UNIMPLEMENTED) /* COMP_zlib_cleanup */ \
    LFUNC_FA_(d2i_X509_ALGORS) \
    LFUNC_FA_(SMIME_read_ASN1) \
    LFUNC_FA_(OPENSSL_isservice) \
    LFUNC_FA_(EVP_CIPHER_CTX_clear_flags) \
    LFUNC_FA_(BN_X931_generate_prime_ex) \
    LFUNC_FA_(EVP_CIPHER_CTX_test_flags) \
    LFUNC_FA_(EVP_add_alg_module) \
    LFUNC_FA_(BN_X931_derive_prime_ex) \
    LFUNC_FA_(OPENSSL_init) \
    LFUNC_FA_(CRYPTO_strdup) \
    LFUNC_FA_(UNIMPLEMENTED) /* pqueue_size */ \
    LFUNC_FA_(i2d_TS_ACCURACY) \
    LFUNC_FA_(UNIMPLEMENTED) /* i2d_TS_MSG_IMPRINT_fp */ \
    LFUNC_FA_(i2d_TS_MSG_IMPRINT) \
    LFUNC_FA_(EVP_PKEY_print_public) \
    LFUNC_FA_(EVP_PKEY_CTX_new) \
    LFUNC_FA_(i2d_TS_TST_INFO) \
    LFUNC_FA_(EVP_PKEY_asn1_find) \
    LFUNC_FA_(UNIMPLEMENTED) /* DSO_METHOD_beos */ \
    LFUNC_FA_(TS_CONF_load_cert) \
    LFUNC_FA_(TS_REQ_get_ext) \
    LFUNC_FA_(EVP_PKEY_sign_init) \
    LFUNC_FA_(ASN1_item_print) \
    LFUNC_FA_(TS_TST_INFO_set_nonce) \
    LFUNC_FA_(TS_RESP_dup) \
    LFUNC_FA_(EVP_PKEY_asn1_add0) \
    LFUNC_FA_(PKCS7_add0_attrib_signing_time) \
    LFUNC_FA_(UNIMPLEMENTED) /* i2d_TS_TST_INFO_fp */ \
    LFUNC_FA_(BIO_asn1_get_prefix) \
    LFUNC_FA_(TS_TST_INFO_set_time) \
    LFUNC_FA_(EVP_PKEY_meth_set_decrypt) \
    LFUNC_FA_(EVP_PKEY_set_type_str) \
    LFUNC_FA_(EVP_PKEY_CTX_get_keygen_info) \
    LFUNC_FA_(TS_REQ_set_policy_id) \
    LFUNC_FA_(UNIMPLEMENTED) /* d2i_TS_RESP_fp */ \
    LFUNC_FA_(TS_RESP_set_status_info) \
    LFUNC_FA_(EVP_PKEY_keygen) \
    LFUNC_FA_(EVP_DigestSignInit) \
    LFUNC_FA_(TS_ACCURACY_set_millis) \
    LFUNC_FA_(TS_REQ_dup) \
    LFUNC_FA_(GENERAL_NAME_dup) \
    LFUNC_FA_(X509_STORE_CTX_get1_crls) \
    LFUNC_FA_(EVP_PKEY_asn1_new) \
    LFUNC_FA_(BIO_new_NDEF) \
    LFUNC_FA_(TS_MSG_IMPRINT_set_algo) \
    LFUNC_FA_(i2d_TS_TST_INFO_bio) \
    LFUNC_FA_(TS_TST_INFO_set_ordering) \
    LFUNC_FA_(TS_TST_INFO_get_ext_by_OBJ) \
    LFUNC_FA_(UNIMPLEMENTED) /* CRYPTO_THREADID_set_pointer */ \
    LFUNC_FA_(TS_CONF_get_tsa_section) \
    LFUNC_FA_(SMIME_write_ASN1) \
    LFUNC_FA_(TS_RESP_CTX_set_signer_key) \
    LFUNC_FA_(EVP_PKEY_encrypt_old) \
    LFUNC_FA_(EVP_PKEY_encrypt_init) \
    LFUNC_FA_(UNIMPLEMENTED) /* CRYPTO_THREADID_cpy */ \
    LFUNC_FA_(ASN1_PCTX_get_cert_flags) \
    LFUNC_FA_(i2d_ESS_SIGNING_CERT) \
    LFUNC_FA_(TS_CONF_load_key) \
    LFUNC_FA_(i2d_ASN1_SEQUENCE_ANY) \
    LFUNC_FA_(d2i_TS_MSG_IMPRINT_bio) \
    LFUNC_FA_(EVP_PKEY_asn1_set_public) \
    LFUNC_FA_(b2i_PublicKey_bio) \
    LFUNC_FA_(BIO_asn1_set_prefix) \
    LFUNC_FA_(EVP_PKEY_new_mac_key) \
    LFUNC_FA_(UNIMPLEMENTED) /* CRYPTO_THREADID_cmp */ \
    LFUNC_FA_(TS_REQ_ext_free) \
    LFUNC_FA_(EVP_PKEY_asn1_set_free) \
    LFUNC_FA_(EVP_PKEY_get0_asn1) \
    LFUNC_FA_(UNIMPLEMENTED) /* d2i_NETSCAPE_X509 */ \
    LFUNC_FA_(EVP_PKEY_verify_recover_init) \
    LFUNC_FA_(EVP_PKEY_CTX_set_data) \
    LFUNC_FA_(EVP_PKEY_keygen_init) \
    LFUNC_FA_(TS_RESP_CTX_set_status_info) \
    LFUNC_FA_(TS_MSG_IMPRINT_get_algo) \
    LFUNC_FA_(TS_REQ_print_bio) \
    LFUNC_FA_(EVP_PKEY_CTX_ctrl_str) \
    LFUNC_FA_(EVP_PKEY_get_default_digest_nid) \
    LFUNC_FA_(PEM_write_bio_PKCS7_stream) \
    LFUNC_FA_(TS_MSG_IMPRINT_print_bio) \
    LFUNC_FA_(BN_asc2bn) \
    LFUNC_FA_(TS_REQ_get_policy_id) \
    LFUNC_FA_(d2i_TS_ACCURACY) \
    LFUNC_FA_(DSO_global_lookup) \
    LFUNC_FA_(TS_CONF_set_tsa_name) \
    LFUNC_FA_(i2d_ASN1_SET_ANY) \
    LFUNC_FA_(ASN1_PCTX_get_flags) \
    LFUNC_FA_(TS_TST_INFO_get_ext_by_NID) \
    LFUNC_FA_(TS_RESP_new) \
    LFUNC_FA_(ESS_CERT_ID_dup) \
    LFUNC_FA_(TS_STATUS_INFO_dup) \
    LFUNC_FA_(TS_REQ_delete_ext) \
    LFUNC_FA_(EVP_DigestVerifyFinal) \
    LFUNC_FA_(EVP_PKEY_print_params) \
    LFUNC_FA_(TS_REQ_get_msg_imprint) \
    LFUNC_FA_(OBJ_find_sigid_by_algs) \
    LFUNC_FA_(TS_TST_INFO_get_serial) \
    LFUNC_FA_(TS_REQ_get_nonce) \
    LFUNC_FA_(X509_PUBKEY_set0_param) \
    LFUNC_FA_(EVP_PKEY_CTX_set0_keygen_info) \
    LFUNC_FA_(DIST_POINT_set_dpname) \
    LFUNC_FA_(i2d_ISSUING_DIST_POINT) \
    LFUNC_FA_(EVP_PKEY_CTX_get_data) \
    LFUNC_FA_(TS_STATUS_INFO_print_bio) \
    LFUNC_FA_(EVP_PKEY_derive_init) \
    LFUNC_FA_(d2i_TS_TST_INFO) \
    LFUNC_FA_(EVP_PKEY_asn1_add_alias) \
    LFUNC_FA_(d2i_TS_RESP_bio) \
    LFUNC_FA_(OTHERNAME_cmp) \
    LFUNC_FA_(GENERAL_NAME_set0_value) \
    LFUNC_FA_(PKCS7_RECIP_INFO_get0_alg) \
    LFUNC_FA_(TS_RESP_CTX_new) \
    LFUNC_FA_(TS_RESP_set_tst_info) \
    LFUNC_FA_(PKCS7_final) \
    LFUNC_FA_(EVP_PKEY_get_base_id) \
    LFUNC_FA_(TS_RESP_CTX_set_signer_cert) \
    LFUNC_FA_(TS_REQ_set_msg_imprint) \
    LFUNC_FA_(EVP_PKEY_CTX_ctrl) \
    LFUNC_FA_(TS_CONF_set_digests) \
    LFUNC_FA_(d2i_TS_MSG_IMPRINT) \
    LFUNC_FA_(EVP_PKEY_meth_set_ctrl) \
    LFUNC_FA_(TS_REQ_get_ext_by_NID) \
    LFUNC_FA_(PKCS5_pbe_set0_algor) \
    LFUNC_FA_(UNIMPLEMENTED) /* BN_BLINDING_thread_id */ \
    LFUNC_FA_(TS_ACCURACY_new) \
    LFUNC_FA_(X509_CRL_METHOD_free) \
    LFUNC_FA_(ASN1_PCTX_get_nm_flags) \
    LFUNC_FA_(EVP_PKEY_meth_set_sign) \
    LFUNC_FA_(UNIMPLEMENTED) /* CRYPTO_THREADID_current */ \
    LFUNC_FA_(EVP_PKEY_decrypt_init) \
    LFUNC_FA_(UNIMPLEMENTED) /* NETSCAPE_X509_free */ \
    LFUNC_FA_(i2b_PVK_bio) \
    LFUNC_FA_(EVP_PKEY_print_private) \
    LFUNC_FA_(GENERAL_NAME_get0_value) \
    LFUNC_FA_(b2i_PVK_bio) \
    LFUNC_FA_(ASN1_UTCTIME_adj) \
    LFUNC_FA_(TS_TST_INFO_new) \
    LFUNC_FA_(EVP_MD_do_all_sorted) \
    LFUNC_FA_(TS_CONF_set_default_engine) \
    LFUNC_FA_(TS_ACCURACY_set_seconds) \
    LFUNC_FA_(TS_TST_INFO_get_time) \
    LFUNC_FA_(PKCS8_pkey_get0) \
    LFUNC_FA_(EVP_PKEY_asn1_get0) \
    LFUNC_FA_(OBJ_add_sigid) \
    LFUNC_FA_(PKCS7_SIGNER_INFO_sign) \
    LFUNC_FA_(EVP_PKEY_paramgen_init) \
    LFUNC_FA_(EVP_PKEY_sign) \
    LFUNC_FA_(OBJ_sigid_free) \
    LFUNC_FA_(EVP_PKEY_meth_set_init) \
    LFUNC_FA_(d2i_ESS_ISSUER_SERIAL) \
    LFUNC_FA_(ISSUING_DIST_POINT_new) \
    LFUNC_FA_(ASN1_TIME_adj) \
    LFUNC_FA_(TS_OBJ_print_bio) \
    LFUNC_FA_(EVP_PKEY_meth_set_verify_recover) \
    LFUNC_FA_(TS_RESP_get_status_info) \
    LFUNC_FA_(EVP_PKEY_CTX_set_cb) \
    LFUNC_FA_(PKCS7_to_TS_TST_INFO) \
    LFUNC_FA_(ASN1_PCTX_get_oid_flags) \
    LFUNC_FA_(TS_TST_INFO_add_ext) \
    LFUNC_FA_(EVP_PKEY_meth_set_derive) \
    LFUNC_FA_(UNIMPLEMENTED) /* i2d_TS_RESP_fp */ \
    LFUNC_FA_(i2d_TS_MSG_IMPRINT_bio) \
    LFUNC_FA_(TS_RESP_CTX_set_accuracy) \
    LFUNC_FA_(TS_REQ_set_nonce) \
    LFUNC_FA_(ESS_CERT_ID_new) \
    LFUNC_FA_(TS_REQ_get_ext_count) \
    LFUNC_FA_(BUF_reverse) \
    LFUNC_FA_(TS_TST_INFO_print_bio) \
    LFUNC_FA_(d2i_ISSUING_DIST_POINT) \
    LFUNC_FA_(i2b_PrivateKey_bio) \
    LFUNC_FA_(i2d_TS_RESP) \
    LFUNC_FA_(b2i_PublicKey) \
    LFUNC_FA_(TS_VERIFY_CTX_cleanup) \
    LFUNC_FA_(TS_STATUS_INFO_free) \
    LFUNC_FA_(TS_RESP_verify_token) \
    LFUNC_FA_(OBJ_bsearch_ex_) \
    LFUNC_FA_(ASN1_bn_print) \
    LFUNC_FA_(EVP_PKEY_asn1_get_count) \
    LFUNC_FA_(ASN1_PCTX_set_nm_flags) \
    LFUNC_FA_(EVP_DigestVerifyInit) \
    LFUNC_FA_(TS_TST_INFO_get_policy_id) \
    LFUNC_FA_(TS_REQ_get_cert_req) \
    LFUNC_FA_(X509_CRL_set_meth_data) \
    LFUNC_FA_(PKCS8_pkey_set0) \
    LFUNC_FA_(ASN1_STRING_copy) \
    LFUNC_FA_(UNIMPLEMENTED) /* d2i_TS_TST_INFO_fp */ \
    LFUNC_FA_(X509_CRL_match) \
    LFUNC_FA_(EVP_PKEY_asn1_set_private) \
    LFUNC_FA_(TS_TST_INFO_get_ext_d2i) \
    LFUNC_FA_(TS_RESP_CTX_add_policy) \
    LFUNC_FA_(d2i_TS_RESP) \
    LFUNC_FA_(TS_CONF_load_certs) \
    LFUNC_FA_(TS_TST_INFO_get_msg_imprint) \
    LFUNC_FA_(ERR_load_TS_strings) \
    LFUNC_FA_(TS_TST_INFO_get_version) \
    LFUNC_FA_(EVP_PKEY_CTX_dup) \
    LFUNC_FA_(EVP_PKEY_meth_set_verify) \
    LFUNC_FA_(i2b_PublicKey_bio) \
    LFUNC_FA_(TS_CONF_set_certs) \
    LFUNC_FA_(EVP_PKEY_asn1_get0_info) \
    LFUNC_FA_(TS_VERIFY_CTX_free) \
    LFUNC_FA_(TS_REQ_get_ext_by_critical) \
    LFUNC_FA_(TS_RESP_CTX_set_serial_cb) \
    LFUNC_FA_(X509_CRL_get_meth_data) \
    LFUNC_FA_(TS_RESP_CTX_set_time_cb) \
    LFUNC_FA_(TS_MSG_IMPRINT_get_msg) \
    LFUNC_FA_(TS_TST_INFO_ext_free) \
    LFUNC_FA_(TS_REQ_get_version) \
    LFUNC_FA_(TS_REQ_add_ext) \
    LFUNC_FA_(EVP_PKEY_CTX_set_app_data) \
    LFUNC_FA_(OBJ_bsearch_) \
    LFUNC_FA_(EVP_PKEY_meth_set_verifyctx) \
    LFUNC_FA_(i2d_PKCS7_bio_stream) \
    LFUNC_FA_(UNIMPLEMENTED) /* CRYPTO_THREADID_set_numeric */ \
    LFUNC_FA_(PKCS7_sign_add_signer) \
    LFUNC_FA_(d2i_TS_TST_INFO_bio) \
    LFUNC_FA_(TS_TST_INFO_get_ordering) \
    LFUNC_FA_(TS_RESP_print_bio) \
    LFUNC_FA_(TS_TST_INFO_get_exts) \
    LFUNC_FA_(PKCS5_pbe2_set_iv) \
    LFUNC_FA_(b2i_PrivateKey) \
    LFUNC_FA_(EVP_PKEY_CTX_get_app_data) \
    LFUNC_FA_(TS_REQ_set_cert_req) \
    LFUNC_FA_(UNIMPLEMENTED) /* CRYPTO_THREADID_set_callback */ \
    LFUNC_FA_(TS_CONF_set_serial) \
    LFUNC_FA_(TS_TST_INFO_free) \
    LFUNC_FA_(UNIMPLEMENTED) /* d2i_TS_REQ_fp */ \
    LFUNC_FA_(TS_RESP_verify_response) \
    LFUNC_FA_(i2d_ESS_ISSUER_SERIAL) \
    LFUNC_FA_(TS_ACCURACY_get_seconds) \
    LFUNC_FA_(EVP_CIPHER_do_all) \
    LFUNC_FA_(b2i_PrivateKey_bio) \
    LFUNC_FA_(OCSP_CERTID_dup) \
    LFUNC_FA_(X509_PUBKEY_get0_param) \
    LFUNC_FA_(TS_MSG_IMPRINT_dup) \
    LFUNC_FA_(PKCS7_print_ctx) \
    LFUNC_FA_(i2d_TS_REQ_bio) \
    LFUNC_FA_(EVP_PKEY_asn1_set_param) \
    LFUNC_FA_(EVP_PKEY_meth_set_encrypt) \
    LFUNC_FA_(ASN1_PCTX_set_flags) \
    LFUNC_FA_(i2d_ESS_CERT_ID) \
    LFUNC_FA_(TS_VERIFY_CTX_new) \
    LFUNC_FA_(TS_RESP_CTX_set_extension_cb) \
    LFUNC_FA_(TS_RESP_CTX_set_status_info_cond) \
    LFUNC_FA_(EVP_PKEY_verify) \
    LFUNC_FA_(X509_CRL_METHOD_new) \
    LFUNC_FA_(EVP_DigestSignFinal) \
    LFUNC_FA_(TS_RESP_CTX_set_def_policy) \
    LFUNC_FA_(TS_RESP_create_response) \
    LFUNC_FA_(PKCS7_SIGNER_INFO_get0_algs) \
    LFUNC_FA_(TS_TST_INFO_get_nonce) \
    LFUNC_FA_(EVP_PKEY_decrypt_old) \
    LFUNC_FA_(TS_TST_INFO_set_policy_id) \
    LFUNC_FA_(TS_CONF_set_ess_cert_id_chain) \
    LFUNC_FA_(EVP_PKEY_CTX_get0_pkey) \
    LFUNC_FA_(d2i_TS_REQ) \
    LFUNC_FA_(EVP_PKEY_asn1_find_str) \
    LFUNC_FA_(BIO_f_asn1) \
    LFUNC_FA_(ESS_SIGNING_CERT_new) \
    LFUNC_FA_(EVP_PBE_find) \
    LFUNC_FA_(X509_CRL_get0_by_cert) \
    LFUNC_FA_(EVP_PKEY_derive) \
    LFUNC_FA_(i2d_TS_REQ) \
    LFUNC_FA_(TS_TST_INFO_delete_ext) \
    LFUNC_FA_(ESS_ISSUER_SERIAL_free) \
    LFUNC_FA_(ASN1_PCTX_set_str_flags) \
    LFUNC_FA_(TS_CONF_set_signer_key) \
    LFUNC_FA_(TS_ACCURACY_get_millis) \
    LFUNC_FA_(TS_RESP_get_token) \
    LFUNC_FA_(TS_ACCURACY_dup) \
    LFUNC_FA_(X509_CRL_set_default_method) \
    LFUNC_FA_(UNIMPLEMENTED) /* CRYPTO_THREADID_hash */ \
    LFUNC_FA_(TS_RESP_free) \
    LFUNC_FA_(ISSUING_DIST_POINT_free) \
    LFUNC_FA_(ESS_ISSUER_SERIAL_new) \
    LFUNC_FA_(PKCS7_add1_attrib_digest) \
    LFUNC_FA_(TS_RESP_CTX_add_md) \
    LFUNC_FA_(TS_TST_INFO_dup) \
    LFUNC_FA_(PEM_write_bio_Parameters) \
    LFUNC_FA_(TS_TST_INFO_get_accuracy) \
    LFUNC_FA_(X509_CRL_get0_by_serial) \
    LFUNC_FA_(TS_TST_INFO_set_version) \
    LFUNC_FA_(TS_RESP_CTX_get_tst_info) \
    LFUNC_FA_(TS_RESP_verify_signature) \
    LFUNC_FA_(UNIMPLEMENTED) /* CRYPTO_THREADID_get_callback */ \
    LFUNC_FA_(TS_TST_INFO_get_tsa) \
    LFUNC_FA_(TS_STATUS_INFO_new) \
    LFUNC_FA_(EVP_PKEY_CTX_get_cb) \
    LFUNC_FA_(TS_REQ_get_ext_d2i) \
    LFUNC_FA_(GENERAL_NAME_set0_othername) \
    LFUNC_FA_(TS_TST_INFO_get_ext_count) \
    LFUNC_FA_(TS_RESP_CTX_get_request) \
    LFUNC_FA_(UNIMPLEMENTED) /* i2d_NETSCAPE_X509 */ \
    LFUNC_FA_(EVP_PKEY_meth_set_signctx) \
    LFUNC_FA_(EVP_PKEY_asn1_copy) \
    LFUNC_FA_(ASN1_TYPE_cmp) \
    LFUNC_FA_(EVP_CIPHER_do_all_sorted) \
    LFUNC_FA_(EVP_PKEY_CTX_free) \
    LFUNC_FA_(UNIMPLEMENTED) /* d2i_TS_MSG_IMPRINT_fp */ \
    LFUNC_FA_(X509_STORE_CTX_get1_certs) \
    LFUNC_FA_(EVP_PKEY_CTX_get_operation) \
    LFUNC_FA_(d2i_ESS_SIGNING_CERT) \
    LFUNC_FA_(TS_CONF_set_ordering) \
    LFUNC_FA_(EVP_PBE_alg_add_type) \
    LFUNC_FA_(TS_REQ_set_version) \
    LFUNC_FA_(EVP_PKEY_get0) \
    LFUNC_FA_(BIO_asn1_set_suffix) \
    LFUNC_FA_(i2d_TS_STATUS_INFO) \
    LFUNC_FA_(EVP_MD_do_all) \
    LFUNC_FA_(TS_TST_INFO_set_accuracy) \
    LFUNC_FA_(PKCS7_add_attrib_content_type) \
    LFUNC_FA_(EVP_PKEY_meth_add0) \
    LFUNC_FA_(TS_TST_INFO_set_tsa) \
    LFUNC_FA_(EVP_PKEY_meth_new) \
    LFUNC_FA_(TS_CONF_set_accuracy) \
    LFUNC_FA_(ASN1_PCTX_set_oid_flags) \
    LFUNC_FA_(ESS_SIGNING_CERT_dup) \
    LFUNC_FA_(d2i_TS_REQ_bio) \
    LFUNC_FA_(X509_time_adj_ex) \
    LFUNC_FA_(TS_RESP_CTX_add_flags) \
    LFUNC_FA_(d2i_TS_STATUS_INFO) \
    LFUNC_FA_(TS_MSG_IMPRINT_set_msg) \
    LFUNC_FA_(BIO_asn1_get_suffix) \
    LFUNC_FA_(TS_REQ_free) \
    LFUNC_FA_(EVP_PKEY_meth_free) \
    LFUNC_FA_(TS_REQ_get_exts) \
    LFUNC_FA_(TS_RESP_CTX_set_clock_precision_digits) \
    LFUNC_FA_(TS_RESP_CTX_add_failure_info) \
    LFUNC_FA_(i2d_TS_RESP_bio) \
    LFUNC_FA_(EVP_PKEY_CTX_get0_peerkey) \
    LFUNC_FA_(TS_REQ_new) \
    LFUNC_FA_(TS_MSG_IMPRINT_new) \
    LFUNC_FA_(EVP_PKEY_meth_find) \
    LFUNC_FA_(EVP_PKEY_get_id) \
    LFUNC_FA_(TS_TST_INFO_set_serial) \
    LFUNC_FA_(a2i_GENERAL_NAME) \
    LFUNC_FA_(TS_CONF_set_crypto_device) \
    LFUNC_FA_(EVP_PKEY_verify_init) \
    LFUNC_FA_(TS_CONF_set_policies) \
    LFUNC_FA_(ASN1_PCTX_new) \
    LFUNC_FA_(ESS_CERT_ID_free) \
    LFUNC_FA_(TS_MSG_IMPRINT_free) \
    LFUNC_FA_(TS_VERIFY_CTX_init) \
    LFUNC_FA_(PKCS7_stream) \
    LFUNC_FA_(TS_RESP_CTX_set_certs) \
    LFUNC_FA_(TS_CONF_set_def_policy) \
    LFUNC_FA_(ASN1_GENERALIZEDTIME_adj) \
    LFUNC_FA_(UNIMPLEMENTED) /* NETSCAPE_X509_new */ \
    LFUNC_FA_(TS_ACCURACY_free) \
    LFUNC_FA_(TS_RESP_get_tst_info) \
    LFUNC_FA_(EVP_PKEY_derive_set_peer) \
    LFUNC_FA_(PEM_read_bio_Parameters) \
    LFUNC_FA_(TS_CONF_set_clock_precision_digits) \
    LFUNC_FA_(ESS_ISSUER_SERIAL_dup) \
    LFUNC_FA_(TS_ACCURACY_get_micros) \
    LFUNC_FA_(ASN1_PCTX_get_str_flags) \
    LFUNC_FA_(NAME_CONSTRAINTS_check) \
    LFUNC_FA_(ASN1_BIT_STRING_check) \
    LFUNC_FA_(X509_check_akid) \
    LFUNC_FA_(ASN1_PCTX_free) \
    LFUNC_FA_(PEM_write_bio_ASN1_stream) \
    LFUNC_FA_(i2d_ASN1_bio_stream) \
    LFUNC_FA_(TS_X509_ALGOR_print_bio) \
    LFUNC_FA_(EVP_PKEY_meth_set_cleanup) \
    LFUNC_FA_(EVP_PKEY_asn1_free) \
    LFUNC_FA_(ESS_SIGNING_CERT_free) \
    LFUNC_FA_(TS_TST_INFO_set_msg_imprint) \
    LFUNC_FA_(GENERAL_NAME_cmp) \
    LFUNC_FA_(d2i_ASN1_SET_ANY) \
    LFUNC_FA_(UNIMPLEMENTED) /* i2d_TS_REQ_fp */ \
    LFUNC_FA_(d2i_ASN1_SEQUENCE_ANY) \
    LFUNC_FA_(GENERAL_NAME_get0_otherName) \
    LFUNC_FA_(d2i_ESS_CERT_ID) \
    LFUNC_FA_(OBJ_find_sigid_algs) \
    LFUNC_FA_(EVP_PKEY_meth_set_keygen) \
    LFUNC_FA_(PKCS5_PBKDF2_HMAC) \
    LFUNC_FA_(EVP_PKEY_paramgen) \
    LFUNC_FA_(EVP_PKEY_meth_set_paramgen) \
    LFUNC_FA_(BIO_new_PKCS7) \
    LFUNC_FA_(EVP_PKEY_verify_recover) \
    LFUNC_FA_(TS_ext_print_bio) \
    LFUNC_FA_(TS_ASN1_INTEGER_print_bio) \
    LFUNC_FA_(UNIMPLEMENTED) /* check_defer */ \
    LFUNC_FA_(UNIMPLEMENTED) /* DSO_pathbyaddr */ \
    LFUNC_FA_(EVP_PKEY_set_type) \
    LFUNC_FA_(TS_ACCURACY_set_micros) \
    LFUNC_FA_(TS_REQ_to_TS_VERIFY_CTX) \
    LFUNC_FA_(EVP_PKEY_meth_set_copy) \
    LFUNC_FA_(ASN1_PCTX_set_cert_flags) \
    LFUNC_FA_(TS_TST_INFO_get_ext) \
    LFUNC_FA_(EVP_PKEY_asn1_set_ctrl) \
    LFUNC_FA_(TS_TST_INFO_get_ext_by_critical) \
    LFUNC_FA_(EVP_PKEY_CTX_new_id) \
    LFUNC_FA_(TS_REQ_get_ext_by_OBJ) \
    LFUNC_FA_(TS_CONF_set_signer_cert) \
    LFUNC_FA_(X509_NAME_hash_old) \
    LFUNC_FA_(ASN1_TIME_set_string) \
    LFUNC_FA_(EVP_MD_get_flags) \
    LFUNC_FA_(TS_RESP_CTX_free) \
    LFUNC_FA_(OSSL_HTTP_REQ_CTX_add1_header) \
    LFUNC_FA_(OBSOLETE_OCSP_REQ_CTX_set1_req) \
    LFUNC_FA_(X509_STORE_set_verify_cb) \
    LFUNC_FA_(X509_STORE_CTX_get0_current_crl) \
    LFUNC_FA_(X509_STORE_CTX_get0_parent_ctx) \
    LFUNC_FA_(X509_STORE_CTX_get0_current_issuer) \
    LFUNC_FA_(EVP_CIPHER_CTX_copy) \
    LFUNC_FA_(UI_method_get_prompt_constructor) \
    LFUNC_FA_(UI_method_set_prompt_constructor) \
    LFUNC_FA_(EVP_read_pw_string_min) \
    LFUNC_FA_(CRYPTO_cts128_encrypt) \
    LFUNC_FA_(CRYPTO_cts128_decrypt_block) \
    LFUNC_FA_(CRYPTO_cfb128_1_encrypt) \
    LFUNC_FA_(CRYPTO_cbc128_encrypt) \
    LFUNC_FA_(CRYPTO_ctr128_encrypt) \
    LFUNC_FA_(CRYPTO_ofb128_encrypt) \
    LFUNC_FA_(CRYPTO_cts128_decrypt) \
    LFUNC_FA_(CRYPTO_cts128_encrypt_block) \
    LFUNC_FA_(CRYPTO_cbc128_decrypt) \
    LFUNC_FA_(CRYPTO_cfb128_encrypt) \
    LFUNC_FA_(CRYPTO_cfb128_8_encrypt) \
    LFUNC_FA_(UNIMPLEMENTED) /* OPENSSL_memcmp */ \
    LFUNC_FA_(OPENSSL_gmtime) \
    LFUNC_FA_(OPENSSL_gmtime_adj) \
    LFUNC_FA_(OPENSSL_gmtime_diff) \
    LFUNC_FA_(EVP_PKEY_meth_get0_info) \
    LFUNC_FA_(EVP_PKEY_meth_copy) \
    LFUNC_FA_(RSA_padding_add_PKCS1_PSS_mgf1) \
    LFUNC_FA_(RSA_verify_PKCS1_PSS_mgf1) \
    LFUNC_FA_(X509_ALGOR_set_md) \
    LFUNC_FA_(CMAC_CTX_copy) \
    LFUNC_FA_(CMAC_CTX_free) \
    LFUNC_FA_(CMAC_CTX_get0_cipher_ctx) \
    LFUNC_FA_(CMAC_CTX_cleanup) \
    LFUNC_FA_(CMAC_Init) \
    LFUNC_FA_(CMAC_Update) \
    LFUNC_FA_(CMAC_resume) \
    LFUNC_FA_(CMAC_CTX_new) \
    LFUNC_FA_(CMAC_Final) \
    LFUNC_FA_(CRYPTO_ctr128_encrypt_ctr32) \
    LFUNC_FA_(CRYPTO_gcm128_release) \
    LFUNC_FA_(CRYPTO_ccm128_decrypt_ccm64) \
    LFUNC_FA_(CRYPTO_ccm128_encrypt) \
    LFUNC_FA_(CRYPTO_gcm128_encrypt) \
    LFUNC_FA_(CRYPTO_xts128_encrypt) \
    LFUNC_FA_(CRYPTO_nistcts128_decrypt_block) \
    LFUNC_FA_(CRYPTO_gcm128_setiv) \
    LFUNC_FA_(CRYPTO_nistcts128_encrypt) \
    LFUNC_FA_(CRYPTO_gcm128_tag) \
    LFUNC_FA_(CRYPTO_ccm128_encrypt_ccm64) \
    LFUNC_FA_(CRYPTO_ccm128_setiv) \
    LFUNC_FA_(CRYPTO_nistcts128_encrypt_block) \
    LFUNC_FA_(CRYPTO_gcm128_aad) \
    LFUNC_FA_(CRYPTO_ccm128_init) \
    LFUNC_FA_(CRYPTO_nistcts128_decrypt) \
    LFUNC_FA_(CRYPTO_gcm128_new) \
    LFUNC_FA_(CRYPTO_ccm128_tag) \
    LFUNC_FA_(CRYPTO_ccm128_decrypt) \
    LFUNC_FA_(CRYPTO_ccm128_aad) \
    LFUNC_FA_(CRYPTO_gcm128_init) \
    LFUNC_FA_(CRYPTO_gcm128_decrypt) \
    LFUNC_FA_(CRYPTO_gcm128_decrypt_ctr32) \
    LFUNC_FA_(CRYPTO_gcm128_encrypt_ctr32) \
    LFUNC_FA_(CRYPTO_gcm128_finish) \
    LFUNC_FA_(PKCS5_pbkdf2_set) \
    LFUNC_FA_(RSA_PSS_PARAMS_new) \
    LFUNC_FA_(d2i_RSA_PSS_PARAMS) \
    LFUNC_FA_(RSA_PSS_PARAMS_free) \
    LFUNC_FA_(i2d_RSA_PSS_PARAMS) \
    LFUNC_FA_(UNIMPLEMENTED) /* OPENSSL_stderr */ \
    LFUNC_VA_(UNIMPLEMENTED) /* OPENSSL_showfatal */ \
    LFUNC_FA_(POLICY_MAPPING_it) \
    LFUNC_FA_(NAME_CONSTRAINTS_it) \
    LFUNC_FA_(ASN1_OCTET_STRING_NDEF_it) \
    LFUNC_FA_(UNIMPLEMENTED) /* X509_CERT_PAIR_it */ \
    LFUNC_FA_(POLICY_CONSTRAINTS_it) \
    LFUNC_FA_(POLICY_MAPPINGS_it) \
    LFUNC_FA_(GENERAL_SUBTREE_it) \
    LFUNC_FA_(X509_EXTENSIONS_it) \
    LFUNC_FA_(X509_ALGORS_it) \
    LFUNC_FA_(CMS_ContentInfo_it) \
    LFUNC_FA_(CMS_ReceiptRequest_it) \
    LFUNC_FA_(ASN1_SEQUENCE_ANY_it) \
    LFUNC_FA_(ASN1_SET_ANY_it) \
    LFUNC_FA_(UNIMPLEMENTED) /* NETSCAPE_X509_it */ \
    LFUNC_FA_(ISSUING_DIST_POINT_it) \
    LFUNC_FA_(RSA_PSS_PARAMS_it) \
    LFUNC_FA_(UNIMPLEMENTED) /* ENGINE_load_gost */ \
    LFUNC_FA_(PEM_write_bio_DHxparams) \
    LFUNC_FA_(X509_ALGOR_cmp) \
    LFUNC_FA_(ASN1_STRING_clear_free) \
    LFUNC_FA_(ASN1_TIME_diff) \
    LFUNC_FA_(BIO_hex_string) \
    LFUNC_FA_(OBSOLETE_BUF_strnlen) \
    LFUNC_FA_(CMS_RecipientEncryptedKey_cert_cmp) \
    LFUNC_FA_(CMS_RecipientEncryptedKey_get0_id) \
    LFUNC_FA_(CMS_RecipientInfo_encrypt) \
    LFUNC_FA_(CMS_RecipientInfo_get0_pkey_ctx) \
    LFUNC_FA_(CMS_RecipientInfo_kari_decrypt) \
    LFUNC_FA_(CMS_RecipientInfo_kari_get0_alg) \
    LFUNC_FA_(CMS_RecipientInfo_kari_get0_ctx) \
    LFUNC_FA_(CMS_RecipientInfo_kari_get0_orig_id) \
    LFUNC_FA_(CMS_RecipientInfo_kari_get0_reks) \
    LFUNC_FA_(CMS_RecipientInfo_kari_orig_id_cmp) \
    LFUNC_FA_(CMS_RecipientInfo_kari_set0_pkey) \
    LFUNC_FA_(CMS_SharedInfo_encode) \
    LFUNC_FA_(CMS_SignerInfo_get0_md_ctx) \
    LFUNC_FA_(CMS_SignerInfo_get0_pkey_ctx) \
    LFUNC_FA_(CMS_SignerInfo_get0_signature) \
    LFUNC_FA_(d2i_DHxparams) \
    LFUNC_FA_(i2d_DHxparams) \
    LFUNC_FA_(DH_compute_key_padded) \
    LFUNC_FA_(DH_get_1024_160) \
    LFUNC_FA_(DH_get_2048_224) \
    LFUNC_FA_(DH_get_2048_256) \
    LFUNC_FA_(DH_KDF_X9_42) \
    LFUNC_FA_(EC_curve_nid2nist) \
    LFUNC_FA_(EC_curve_nist2nid) \
    LFUNC_FA_(EC_GROUP_get_mont_data) \
    LFUNC_FA_(ECDH_KDF_X9_62) \
    LFUNC_FA_(UNIMPLEMENTED) /* ECDSA_METHOD_free */ \
    LFUNC_FA_(UNIMPLEMENTED) /* ECDSA_METHOD_get_app_data */ \
    LFUNC_FA_(UNIMPLEMENTED) /* ECDSA_METHOD_new */ \
    LFUNC_FA_(UNIMPLEMENTED) /* ECDSA_METHOD_set_app_data */ \
    LFUNC_FA_(UNIMPLEMENTED) /* ECDSA_METHOD_set_flags */ \
    LFUNC_FA_(UNIMPLEMENTED) /* ECDSA_METHOD_set_name */ \
    LFUNC_FA_(UNIMPLEMENTED) /* ECDSA_METHOD_set_sign */ \
    LFUNC_FA_(UNIMPLEMENTED) /* ECDSA_METHOD_set_sign_setup */ \
    LFUNC_FA_(UNIMPLEMENTED) /* ECDSA_METHOD_set_verify */ \
    LFUNC_FA_(EVP_aes_128_cbc_hmac_sha256) \
    LFUNC_FA_(EVP_aes_128_wrap) \
    LFUNC_FA_(EVP_aes_192_wrap) \
    LFUNC_FA_(EVP_aes_256_cbc_hmac_sha256) \
    LFUNC_FA_(EVP_aes_256_wrap) \
    LFUNC_FA_(EVP_des_ede3_wrap) \
    LFUNC_FA_(CRYPTO_128_unwrap) \
    LFUNC_FA_(CRYPTO_128_wrap) \
    LFUNC_FA_(OSSL_HTTP_REQ_CTX_get0_mem_bio) \
    LFUNC_FA_(OBSOLETE_OCSP_REQ_CTX_http) \
    LFUNC_FA_(OBSOLETE_OCSP_REQ_CTX_i2d) \
    LFUNC_FA_(OSSL_HTTP_REQ_CTX_nbio) \
    LFUNC_FA_(OSSL_HTTP_REQ_CTX_nbio_d2i) \
    LFUNC_FA_(OBSOLETE_OCSP_REQ_CTX_new) \
    LFUNC_FA_(OSSL_HTTP_REQ_CTX_set_max_response_length) \
    LFUNC_FA_(d2i_RSA_OAEP_PARAMS) \
    LFUNC_FA_(RSA_OAEP_PARAMS_free) \
    LFUNC_FA_(RSA_OAEP_PARAMS_it) \
    LFUNC_FA_(RSA_OAEP_PARAMS_new) \
    LFUNC_FA_(RSA_padding_add_PKCS1_OAEP_mgf1) \
    LFUNC_FA_(RSA_padding_check_PKCS1_OAEP_mgf1) \
    LFUNC_FA_(OPENSSL_sk_deep_copy) \
    LFUNC_FA_(i2d_re_X509_tbs) \
    LFUNC_FA_(X509_chain_check_suiteb) \
    LFUNC_FA_(X509_chain_up_ref) \
    LFUNC_FA_(X509_CRL_check_suiteb) \
    LFUNC_FA_(X509_CRL_diff) \
    LFUNC_FA_(OBSOLETE_X509_CRL_http_nbio) \
    LFUNC_FA_(X509_get0_signature) \
    LFUNC_FA_(X509_get_signature_nid) \
    LFUNC_FA_(OBSOLETE_X509_http_nbio) \
    LFUNC_FA_(X509_REVOKED_dup) \
    LFUNC_FA_(X509_STORE_CTX_get0_store) \
    LFUNC_FA_(X509_VERIFY_PARAM_add1_host) \
    LFUNC_FA_(X509_VERIFY_PARAM_get0) \
    LFUNC_FA_(X509_VERIFY_PARAM_get0_name) \
    LFUNC_FA_(X509_VERIFY_PARAM_get0_peername) \
    LFUNC_FA_(X509_VERIFY_PARAM_get_count) \
    LFUNC_FA_(X509_VERIFY_PARAM_set1_email) \
    LFUNC_FA_(X509_VERIFY_PARAM_set1_host) \
    LFUNC_FA_(X509_VERIFY_PARAM_set1_ip) \
    LFUNC_FA_(X509_VERIFY_PARAM_set1_ip_asc) \
    LFUNC_FA_(X509_VERIFY_PARAM_set_hostflags) \
    LFUNC_FA_(X509_check_email) \
    LFUNC_FA_(X509_check_host) \
    LFUNC_FA_(X509_check_ip) \
    LFUNC_FA_(X509_check_ip_asc) \
    LFUNC_FA_(UNIMPLEMENTED) /* X509V3_EXT_free */ \
    LFUNC_FA_(EVP_PKEY_asn1_set_item) \
    LFUNC_FA_(DTLS_client_method) \
    LFUNC_FA_(DTLS_method) \
    LFUNC_FA_(DTLS_server_method) \
    LFUNC_FA_(UNIMPLEMENTED) /* DTLSv1_2_client_method */ \
    LFUNC_FA_(UNIMPLEMENTED) /* DTLSv1_2_method */ \
    LFUNC_FA_(UNIMPLEMENTED) /* DTLSv1_2_server_method */ \
    LFUNC_FA_(SSL_certs_clear) \
    LFUNC_FA_(SSL_CIPHER_find) \
    LFUNC_FA_(UNIMPLEMENTED) /* SSL_COMP_free_compression_methods */ \
    LFUNC_FA_(SSL_CONF_cmd) \
    LFUNC_FA_(SSL_CONF_cmd_argv) \
    LFUNC_FA_(SSL_CONF_cmd_value_type) \
    LFUNC_FA_(SSL_CONF_CTX_clear_flags) \
    LFUNC_FA_(SSL_CONF_CTX_finish) \
    LFUNC_FA_(SSL_CONF_CTX_free) \
    LFUNC_FA_(SSL_CONF_CTX_new) \
    LFUNC_FA_(SSL_CONF_CTX_set1_prefix) \
    LFUNC_FA_(SSL_CONF_CTX_set_flags) \
    LFUNC_FA_(SSL_CONF_CTX_set_ssl) \
    LFUNC_FA_(SSL_CONF_CTX_set_ssl_ctx) \
    LFUNC_FA_(SSL_CTX_add_client_custom_ext) \
    LFUNC_FA_(SSL_CTX_add_server_custom_ext) \
    LFUNC_FA_(SSL_CTX_get0_certificate) \
    LFUNC_FA_(SSL_CTX_get0_param) \
    LFUNC_FA_(SSL_CTX_get0_privatekey) \
    LFUNC_FA_(SSL_CTX_get_ssl_method) \
    LFUNC_FA_(SSL_CTX_set_alpn_protos) \
    LFUNC_FA_(SSL_CTX_set_alpn_select_cb) \
    LFUNC_FA_(SSL_CTX_set_cert_cb) \
    LFUNC_FA_(SSL_CTX_use_serverinfo) \
    LFUNC_FA_(SSL_CTX_use_serverinfo_file) \
    LFUNC_FA_(SSL_extension_supported) \
    LFUNC_FA_(SSL_get0_alpn_selected) \
    LFUNC_FA_(SSL_get0_param) \
    LFUNC_FA_(SSL_is_server) \
    LFUNC_FA_(SSL_set_alpn_protos) \
    LFUNC_FA_(SSL_set_cert_cb) \
    LFUNC_FA_(SSL_check_chain) \
    LFUNC_FA_(SSL_get_shared_sigalgs) \
    LFUNC_FA_(SSL_get_sigalgs) \
    LFUNC_FA_(ASN1_add_stable_module) \
    LFUNC_FA_(ASN1_buf_print) \
    LFUNC_FA_(ASN1_ENUMERATED_get_int64) \
    LFUNC_FA_(ASN1_ENUMERATED_set_int64) \
    LFUNC_FA_(ASN1_INTEGER_get_int64) \
    LFUNC_FA_(ASN1_INTEGER_get_uint64) \
    LFUNC_FA_(ASN1_INTEGER_set_int64) \
    LFUNC_FA_(ASN1_INTEGER_set_uint64) \
    LFUNC_FA_(ASN1_SCTX_free) \
    LFUNC_FA_(ASN1_SCTX_get_app_data) \
    LFUNC_FA_(ASN1_SCTX_get_flags) \
    LFUNC_FA_(ASN1_SCTX_get_item) \
    LFUNC_FA_(ASN1_SCTX_get_template) \
    LFUNC_FA_(ASN1_SCTX_new) \
    LFUNC_FA_(ASN1_SCTX_set_app_data) \
    LFUNC_FA_(ASN1_str2mask) \
    LFUNC_FA_(ASN1_TYPE_pack_sequence) \
    LFUNC_FA_(ASN1_TYPE_unpack_sequence) \
    LFUNC_FA_(ASYNC_block_pause) \
    LFUNC_FA_(ASYNC_cleanup_thread) \
    LFUNC_FA_(UNIMPLEMENTED) /* ASYNC_clear_wake */ \
    LFUNC_FA_(ASYNC_get_current_job) \
    LFUNC_FA_(UNIMPLEMENTED) /* ASYNC_get_wait_fd */ \
    LFUNC_FA_(ASYNC_init_thread) \
    LFUNC_FA_(ASYNC_pause_job) \
    LFUNC_FA_(ASYNC_start_job) \
    LFUNC_FA_(ASYNC_unblock_pause) \
    LFUNC_FA_(UNIMPLEMENTED) /* ASYNC_wake */ \
    LFUNC_FA_(ERR_load_ASYNC_strings) \
    LFUNC_FA_(BIO_accept_ex) \
    LFUNC_FA_(BIO_ADDR_clear) \
    LFUNC_FA_(BIO_ADDR_family) \
    LFUNC_FA_(BIO_ADDR_free) \
    LFUNC_FA_(BIO_ADDR_hostname_string) \
    LFUNC_FA_(BIO_ADDR_new) \
    LFUNC_FA_(BIO_ADDR_path_string) \
    LFUNC_FA_(BIO_ADDR_rawaddress) \
    LFUNC_FA_(BIO_ADDR_rawmake) \
    LFUNC_FA_(BIO_ADDR_rawport) \
    LFUNC_FA_(BIO_ADDR_service_string) \
    LFUNC_FA_(BIO_ADDRINFO_address) \
    LFUNC_FA_(BIO_ADDRINFO_family) \
    LFUNC_FA_(BIO_ADDRINFO_free) \
    LFUNC_FA_(BIO_ADDRINFO_next) \
    LFUNC_FA_(BIO_ADDRINFO_protocol) \
    LFUNC_FA_(BIO_ADDRINFO_socktype) \
    LFUNC_FA_(BIO_closesocket) \
    LFUNC_FA_(BIO_connect) \
    LFUNC_FA_(BIO_listen) \
    LFUNC_FA_(BIO_lookup) \
    LFUNC_FA_(BIO_parse_hostserv) \
    LFUNC_FA_(BIO_s_secmem) \
    LFUNC_FA_(BIO_sock_info) \
    LFUNC_FA_(BIO_socket) \
    LFUNC_FA_(BN_abs_is_word) \
    LFUNC_FA_(BN_bn2binpad) \
    LFUNC_FA_(BN_bn2lebinpad) \
    LFUNC_FA_(BN_CTX_secure_new) \
    LFUNC_FA_(BN_GENCB_free) \
    LFUNC_FA_(BN_GENCB_get_arg) \
    LFUNC_FA_(BN_GENCB_new) \
    LFUNC_FA_(BN_GENCB_set) \
    LFUNC_FA_(BN_GENCB_set_old) \
    LFUNC_FA_(BN_generate_dsa_nonce) \
    LFUNC_FA_(BN_get_flags) \
    LFUNC_FA_(BN_is_negative) \
    LFUNC_FA_(BN_is_odd) \
    LFUNC_FA_(BN_is_one) \
    LFUNC_FA_(BN_is_word) \
    LFUNC_FA_(BN_is_zero) \
    LFUNC_FA_(BN_lebin2bn) \
    LFUNC_FA_(BN_nist_mod_func) \
    LFUNC_FA_(BN_secure_new) \
    LFUNC_FA_(BN_security_bits) \
    LFUNC_FA_(BN_set_flags) \
    LFUNC_FA_(BN_to_montgomery) \
    LFUNC_FA_(BN_with_flags) \
    LFUNC_FA_(BN_zero_ex) \
    LFUNC_FA_(BUF_MEM_new_ex) \
    LFUNC_FA_(COMP_CTX_get_method) \
    LFUNC_FA_(COMP_CTX_get_type) \
    LFUNC_FA_(COMP_get_name) \
    LFUNC_FA_(COMP_get_type) \
    LFUNC_FA_(CRYPTO_clear_free) \
    LFUNC_FA_(CRYPTO_clear_realloc) \
    LFUNC_FA_(CRYPTO_free_ex_index) \
    LFUNC_FA_(CRYPTO_memdup) \
    LFUNC_FA_(CRYPTO_secure_actual_size) \
    LFUNC_FA_(CRYPTO_secure_allocated) \
    LFUNC_FA_(CRYPTO_secure_free) \
    LFUNC_FA_(CRYPTO_secure_malloc) \
    LFUNC_FA_(CRYPTO_secure_malloc_done) \
    LFUNC_FA_(CRYPTO_secure_malloc_init) \
    LFUNC_FA_(CRYPTO_secure_malloc_initialized) \
    LFUNC_FA_(CRYPTO_secure_used) \
    LFUNC_FA_(CRYPTO_secure_zalloc) \
    LFUNC_FA_(UNIMPLEMENTED) /* CRYPTO_set_mem_debug */ \
    LFUNC_FA_(CRYPTO_strndup) \
    LFUNC_FA_(CRYPTO_zalloc) \
    LFUNC_FA_(OPENSSL_atexit) \
    LFUNC_FA_(OPENSSL_cleanup) \
    LFUNC_FA_(OPENSSL_init_crypto) \
    LFUNC_FA_(OPENSSL_INIT_free) \
    LFUNC_FA_(OPENSSL_INIT_new) \
    LFUNC_FA_(UNIMPLEMENTED) /* OPENSSL_INIT_set_config_appname */ \
    LFUNC_FA_(OPENSSL_strlcat) \
    LFUNC_FA_(OPENSSL_strlcpy) \
    LFUNC_FA_(OPENSSL_strnlen) \
    LFUNC_FA_(OPENSSL_thread_stop) \
    LFUNC_FA_(OpenSSL_version) \
    LFUNC_FA_(OpenSSL_version_num) \
    LFUNC_FA_(DH_bits) \
    LFUNC_FA_(DH_security_bits) \
    LFUNC_FA_(DSA_security_bits) \
    LFUNC_FA_(EC_GROUP_get0_cofactor) \
    LFUNC_FA_(EC_GROUP_get0_order) \
    LFUNC_FA_(EC_GROUP_order_bits) \
    LFUNC_FA_(EC_KEY_get_default_method) \
    LFUNC_FA_(EC_KEY_get_ex_data) \
    LFUNC_FA_(EC_KEY_get_method) \
    LFUNC_FA_(EC_KEY_key2buf) \
    LFUNC_FA_(EC_KEY_METHOD_free) \
    LFUNC_FA_(EC_KEY_METHOD_get_compute_key) \
    LFUNC_FA_(EC_KEY_METHOD_get_init) \
    LFUNC_FA_(EC_KEY_METHOD_get_keygen) \
    LFUNC_FA_(EC_KEY_METHOD_get_sign) \
    LFUNC_FA_(EC_KEY_METHOD_get_verify) \
    LFUNC_FA_(EC_KEY_METHOD_new) \
    LFUNC_FA_(EC_KEY_METHOD_set_compute_key) \
    LFUNC_FA_(EC_KEY_METHOD_set_init) \
    LFUNC_FA_(EC_KEY_METHOD_set_keygen) \
    LFUNC_FA_(EC_KEY_METHOD_set_sign) \
    LFUNC_FA_(EC_KEY_METHOD_set_verify) \
    LFUNC_FA_(EC_KEY_new_method) \
    LFUNC_FA_(EC_KEY_oct2key) \
    LFUNC_FA_(EC_KEY_oct2priv) \
    LFUNC_FA_(EC_KEY_OpenSSL) \
    LFUNC_FA_(EC_KEY_priv2buf) \
    LFUNC_FA_(EC_KEY_priv2oct) \
    LFUNC_FA_(EC_KEY_set_default_method) \
    LFUNC_FA_(EC_KEY_set_ex_data) \
    LFUNC_FA_(EC_KEY_set_method) \
    LFUNC_FA_(EC_POINT_point2buf) \
    LFUNC_FA_(ECDSA_SIG_get0) \
    LFUNC_FA_(ENGINE_get_default_EC) \
    LFUNC_FA_(ENGINE_get_EC) \
    LFUNC_FA_(ENGINE_register_all_EC) \
    LFUNC_FA_(ENGINE_register_EC) \
    LFUNC_FA_(ENGINE_set_default_EC) \
    LFUNC_FA_(ENGINE_set_EC) \
    LFUNC_FA_(ENGINE_unregister_EC) \
    LFUNC_FA_(EVP_aes_128_ocb) \
    LFUNC_FA_(EVP_aes_128_wrap_pad) \
    LFUNC_FA_(EVP_aes_192_ocb) \
    LFUNC_FA_(EVP_aes_192_wrap_pad) \
    LFUNC_FA_(EVP_aes_256_ocb) \
    LFUNC_FA_(EVP_aes_256_wrap_pad) \
    LFUNC_FA_(EVP_camellia_128_ctr) \
    LFUNC_FA_(EVP_camellia_192_ctr) \
    LFUNC_FA_(EVP_camellia_256_ctr) \
    LFUNC_FA_(EVP_chacha20) \
    LFUNC_FA_(EVP_chacha20_poly1305) \
    LFUNC_FA_(EVP_CIPHER_CTX_buf_noconst) \
    LFUNC_FA_(EVP_CIPHER_CTX_get_cipher_data) \
    LFUNC_FA_(EVP_CIPHER_CTX_set_cipher_data) \
    LFUNC_FA_(EVP_CIPHER_CTX_is_encrypting) \
    LFUNC_FA_(EVP_CIPHER_CTX_iv) \
    LFUNC_FA_(EVP_CIPHER_CTX_iv_noconst) \
    LFUNC_FA_(EVP_CIPHER_CTX_get_num) \
    LFUNC_FA_(EVP_CIPHER_CTX_original_iv) \
    LFUNC_FA_(EVP_CIPHER_CTX_reset) \
    LFUNC_FA_(EVP_CIPHER_CTX_set_num) \
    LFUNC_FA_(EVP_CIPHER_impl_ctx_size) \
    LFUNC_FA_(EVP_CIPHER_meth_dup) \
    LFUNC_FA_(EVP_CIPHER_meth_free) \
    LFUNC_FA_(EVP_CIPHER_meth_get_cleanup) \
    LFUNC_FA_(EVP_CIPHER_meth_get_ctrl) \
    LFUNC_FA_(EVP_CIPHER_meth_get_do_cipher) \
    LFUNC_FA_(EVP_CIPHER_meth_get_get_asn1_params) \
    LFUNC_FA_(EVP_CIPHER_meth_get_init) \
    LFUNC_FA_(EVP_CIPHER_meth_get_set_asn1_params) \
    LFUNC_FA_(EVP_CIPHER_meth_new) \
    LFUNC_FA_(EVP_CIPHER_meth_set_cleanup) \
    LFUNC_FA_(EVP_CIPHER_meth_set_ctrl) \
    LFUNC_FA_(EVP_CIPHER_meth_set_do_cipher) \
    LFUNC_FA_(EVP_CIPHER_meth_set_flags) \
    LFUNC_FA_(EVP_CIPHER_meth_set_get_asn1_params) \
    LFUNC_FA_(EVP_CIPHER_meth_set_impl_ctx_size) \
    LFUNC_FA_(EVP_CIPHER_meth_set_init) \
    LFUNC_FA_(EVP_CIPHER_meth_set_iv_length) \
    LFUNC_FA_(EVP_CIPHER_meth_set_set_asn1_params) \
    LFUNC_FA_(EVP_ENCODE_CTX_free) \
    LFUNC_FA_(EVP_ENCODE_CTX_new) \
    LFUNC_FA_(EVP_ENCODE_CTX_num) \
    LFUNC_FA_(EVP_md5_sha1) \
    LFUNC_FA_(EVP_MD_CTX_ctrl) \
    LFUNC_FA_(EVP_MD_CTX_free) \
    LFUNC_FA_(EVP_MD_CTX_get0_md_data) \
    LFUNC_FA_(EVP_MD_CTX_new) \
    LFUNC_FA_(EVP_MD_CTX_get_pkey_ctx) \
    LFUNC_FA_(EVP_MD_CTX_reset) \
    LFUNC_FA_(EVP_MD_CTX_set_update_fn) \
    LFUNC_FA_(EVP_MD_CTX_update_fn) \
    LFUNC_FA_(EVP_MD_meth_dup) \
    LFUNC_FA_(EVP_MD_meth_free) \
    LFUNC_FA_(EVP_MD_meth_get_app_datasize) \
    LFUNC_FA_(EVP_MD_meth_get_cleanup) \
    LFUNC_FA_(EVP_MD_meth_get_copy) \
    LFUNC_FA_(EVP_MD_meth_get_ctrl) \
    LFUNC_FA_(EVP_MD_meth_get_final) \
    LFUNC_FA_(EVP_MD_meth_get_flags) \
    LFUNC_FA_(EVP_MD_meth_get_init) \
    LFUNC_FA_(EVP_MD_meth_get_input_blocksize) \
    LFUNC_FA_(EVP_MD_meth_get_result_size) \
    LFUNC_FA_(EVP_MD_meth_get_update) \
    LFUNC_FA_(EVP_MD_meth_new) \
    LFUNC_FA_(EVP_MD_meth_set_app_datasize) \
    LFUNC_FA_(EVP_MD_meth_set_cleanup) \
    LFUNC_FA_(EVP_MD_meth_set_copy) \
    LFUNC_FA_(EVP_MD_meth_set_ctrl) \
    LFUNC_FA_(EVP_MD_meth_set_final) \
    LFUNC_FA_(EVP_MD_meth_set_flags) \
    LFUNC_FA_(EVP_MD_meth_set_init) \
    LFUNC_FA_(EVP_MD_meth_set_input_blocksize) \
    LFUNC_FA_(EVP_MD_meth_set_result_size) \
    LFUNC_FA_(EVP_MD_meth_set_update) \
    LFUNC_FA_(EVP_PBE_get) \
    LFUNC_FA_(OBSOLETE_EVP_PBE_scrypt) \
    LFUNC_FA_(EVP_PKEY_asn1_set_security_bits) \
    LFUNC_FA_(EVP_PKEY_get0_DH) \
    LFUNC_FA_(EVP_PKEY_get0_DSA) \
    LFUNC_FA_(EVP_PKEY_get0_EC_KEY) \
    LFUNC_FA_(EVP_PKEY_get0_RSA) \
    LFUNC_FA_(EVP_PKEY_meth_get_cleanup) \
    LFUNC_FA_(EVP_PKEY_meth_get_copy) \
    LFUNC_FA_(EVP_PKEY_meth_get_ctrl) \
    LFUNC_FA_(EVP_PKEY_meth_get_decrypt) \
    LFUNC_FA_(EVP_PKEY_meth_get_derive) \
    LFUNC_FA_(EVP_PKEY_meth_get_encrypt) \
    LFUNC_FA_(EVP_PKEY_meth_get_init) \
    LFUNC_FA_(EVP_PKEY_meth_get_keygen) \
    LFUNC_FA_(EVP_PKEY_meth_get_paramgen) \
    LFUNC_FA_(EVP_PKEY_meth_get_sign) \
    LFUNC_FA_(EVP_PKEY_meth_get_signctx) \
    LFUNC_FA_(EVP_PKEY_meth_get_verify) \
    LFUNC_FA_(EVP_PKEY_meth_get_verify_recover) \
    LFUNC_FA_(EVP_PKEY_meth_get_verifyctx) \
    LFUNC_FA_(EVP_PKEY_get_security_bits) \
    LFUNC_FA_(EVP_PKEY_up_ref) \
    LFUNC_FA_(PKCS5_v2_scrypt_keyivgen) \
    LFUNC_FA_(HMAC_CTX_free) \
    LFUNC_FA_(HMAC_CTX_new) \
    LFUNC_FA_(HMAC_CTX_reset) \
    LFUNC_FA_(HMAC_size) \
    LFUNC_FA_(OPENSSL_LH_error) \
    LFUNC_FA_(OPENSSL_LH_get_down_load) \
    LFUNC_FA_(OPENSSL_LH_set_down_load) \
    LFUNC_FA_(CRYPTO_128_unwrap_pad) \
    LFUNC_FA_(CRYPTO_128_wrap_pad) \
    LFUNC_FA_(CRYPTO_ocb128_aad) \
    LFUNC_FA_(CRYPTO_ocb128_cleanup) \
    LFUNC_FA_(CRYPTO_ocb128_copy_ctx) \
    LFUNC_FA_(CRYPTO_ocb128_decrypt) \
    LFUNC_FA_(CRYPTO_ocb128_encrypt) \
    LFUNC_FA_(CRYPTO_ocb128_finish) \
    LFUNC_FA_(CRYPTO_ocb128_init) \
    LFUNC_FA_(CRYPTO_ocb128_new) \
    LFUNC_FA_(CRYPTO_ocb128_setiv) \
    LFUNC_FA_(CRYPTO_ocb128_tag) \
    LFUNC_FA_(OBJ_get0_data) \
    LFUNC_FA_(OBJ_length) \
    LFUNC_FA_(OCSP_resp_get0_produced_at) \
    LFUNC_FA_(OCSP_resp_get0_signature) \
    LFUNC_FA_(OCSP_SINGLERESP_get0_id) \
    LFUNC_FA_(PKCS12_get0_mac) \
    LFUNC_FA_(PKCS12_mac_present) \
    LFUNC_FA_(PKCS12_SAFEBAG_create0_p8inf) \
    LFUNC_FA_(PKCS12_SAFEBAG_create0_pkcs8) \
    LFUNC_FA_(PKCS12_SAFEBAG_create_cert) \
    LFUNC_FA_(PKCS12_SAFEBAG_create_crl) \
    LFUNC_FA_(PKCS12_SAFEBAG_create_pkcs8_encrypt) \
    LFUNC_FA_(PKCS12_SAFEBAG_get0_attr) \
    LFUNC_FA_(PKCS12_SAFEBAG_get0_attrs) \
    LFUNC_FA_(PKCS12_SAFEBAG_get0_p8inf) \
    LFUNC_FA_(PKCS12_SAFEBAG_get0_pkcs8) \
    LFUNC_FA_(PKCS12_SAFEBAG_get0_safes) \
    LFUNC_FA_(PKCS12_SAFEBAG_get0_type) \
    LFUNC_FA_(PKCS12_SAFEBAG_get1_cert) \
    LFUNC_FA_(PKCS12_SAFEBAG_get1_crl) \
    LFUNC_FA_(PKCS12_SAFEBAG_get_bag_nid) \
    LFUNC_FA_(PKCS12_SAFEBAG_get_nid) \
    LFUNC_FA_(PKCS8_get_attr) \
    LFUNC_FA_(PKCS8_set0_pbe) \
    LFUNC_FA_(RAND_OpenSSL) \
    LFUNC_FA_(RSA_bits) \
    LFUNC_FA_(RSA_check_key_ex) \
    LFUNC_FA_(RSA_PKCS1_OpenSSL) \
    LFUNC_FA_(RSA_security_bits) \
    LFUNC_FA_(OBSOLETE_RSA_X931_derive_ex) \
    LFUNC_FA_(RSA_X931_generate_key_ex) \
    LFUNC_FA_(TS_CONF_set_signer_digest) \
    LFUNC_FA_(TS_RESP_CTX_set_signer_digest) \
    LFUNC_FA_(TS_STATUS_INFO_get0_failure_info) \
    LFUNC_FA_(TS_STATUS_INFO_get0_status) \
    LFUNC_FA_(TS_STATUS_INFO_set_status) \
    LFUNC_FA_(TS_VERIFY_CTX_add_flags) \
    LFUNC_FA_(TS_VERIFY_CTX_set_data) \
    LFUNC_FA_(TS_VERIFY_CTX_set_flags) \
    LFUNC_FA_(TS_VERIFY_CTX_set_imprint) \
    LFUNC_FA_(TS_VERIFY_CTX_set_store) \
    LFUNC_FA_(TS_VERIFY_CTX_set_certs) \
    LFUNC_FA_(i2d_re_X509_CRL_tbs) \
    LFUNC_FA_(i2d_re_X509_REQ_tbs) \
    LFUNC_FA_(PKCS5_pbe2_set_scrypt) \
    LFUNC_FA_(UNIMPLEMENTED) /* X509_aux_print */ \
    LFUNC_FA_(X509_CRL_get0_extensions) \
    LFUNC_FA_(X509_CRL_get0_signature) \
    LFUNC_FA_(X509_CRL_get_issuer) \
    LFUNC_FA_(X509_CRL_get_lastUpdate) \
    LFUNC_FA_(X509_CRL_get_nextUpdate) \
    LFUNC_FA_(X509_CRL_get_REVOKED) \
    LFUNC_FA_(X509_CRL_get_signature_nid) \
    LFUNC_FA_(X509_CRL_get_version) \
    LFUNC_FA_(X509_CRL_up_ref) \
    LFUNC_FA_(X509_get0_extensions) \
    LFUNC_FA_(X509_get0_pubkey) \
    LFUNC_FA_(X509_get0_reject_objects) \
    LFUNC_FA_(X509_get0_tbs_sigalg) \
    LFUNC_FA_(X509_get0_trust_objects) \
    LFUNC_FA_(X509_get0_uids) \
    LFUNC_FA_(X509_getm_notAfter) \
    LFUNC_FA_(X509_getm_notBefore) \
    LFUNC_FA_(X509_get_signature_type) \
    LFUNC_FA_(X509_get_version) \
    LFUNC_FA_(X509_get_X509_PUBKEY) \
    LFUNC_FA_(X509_NAME_ENTRY_set) \
    LFUNC_FA_(X509_NAME_get0_der) \
    LFUNC_FA_(X509_PUBKEY_get0) \
    LFUNC_FA_(X509_REQ_get0_signature) \
    LFUNC_FA_(X509_REQ_get_signature_nid) \
    LFUNC_FA_(X509_REQ_get_subject_name) \
    LFUNC_FA_(X509_REQ_get_version) \
    LFUNC_FA_(X509_REQ_get_X509_PUBKEY) \
    LFUNC_FA_(X509_REVOKED_get0_extensions) \
    LFUNC_FA_(X509_REVOKED_get0_revocationDate) \
    LFUNC_FA_(X509_REVOKED_get0_serialNumber) \
    LFUNC_FA_(X509_trusted) \
    LFUNC_FA_(X509_up_ref) \
    LFUNC_FA_(X509_STORE_CTX_get_num_untrusted) \
    LFUNC_FA_(X509_STORE_CTX_set0_dane) \
    LFUNC_FA_(X509_VERIFY_PARAM_move_peername) \
    LFUNC_FA_(i2s_ASN1_IA5STRING) \
    LFUNC_FA_(s2i_ASN1_IA5STRING) \
    LFUNC_FA_(X509v3_addr_add_inherit) \
    LFUNC_FA_(X509v3_addr_add_prefix) \
    LFUNC_FA_(X509v3_addr_add_range) \
    LFUNC_FA_(X509v3_addr_canonize) \
    LFUNC_FA_(X509v3_addr_get_afi) \
    LFUNC_FA_(X509v3_addr_get_range) \
    LFUNC_FA_(X509v3_addr_inherits) \
    LFUNC_FA_(X509v3_addr_is_canonical) \
    LFUNC_FA_(X509v3_addr_subset) \
    LFUNC_FA_(X509v3_addr_validate_path) \
    LFUNC_FA_(X509v3_addr_validate_resource_set) \
    LFUNC_FA_(X509v3_asid_add_inherit) \
    LFUNC_FA_(X509v3_asid_add_id_or_range) \
    LFUNC_FA_(X509v3_asid_canonize) \
    LFUNC_FA_(X509v3_asid_inherits) \
    LFUNC_FA_(X509v3_asid_is_canonical) \
    LFUNC_FA_(X509v3_asid_subset) \
    LFUNC_FA_(X509v3_asid_validate_path) \
    LFUNC_FA_(X509v3_asid_validate_resource_set) \
    LFUNC_FA_(X509_get0_subject_key_id) \
    LFUNC_FA_(X509_get_extended_key_usage) \
    LFUNC_FA_(X509_get_extension_flags) \
    LFUNC_FA_(X509_get_key_usage) \
    LFUNC_FA_(DTLSv1_listen) \
    LFUNC_FA_(OPENSSL_init_ssl) \
    LFUNC_FA_(SSL_add1_host) \
    LFUNC_FA_(SSL_add_ssl_module) \
    LFUNC_FA_(SSL_CIPHER_get_cipher_nid) \
    LFUNC_FA_(SSL_CIPHER_get_digest_nid) \
    LFUNC_FA_(SSL_clear_options) \
    LFUNC_FA_(SSL_config) \
    LFUNC_FA_(SSL_CTX_clear_options) \
    LFUNC_FA_(SSL_CTX_config) \
    LFUNC_FA_(SSL_CTX_dane_enable) \
    LFUNC_FA_(SSL_CTX_dane_mtype_set) \
    LFUNC_FA_(SSL_CTX_get0_security_ex_data) \
    LFUNC_FA_(SSL_CTX_get_options) \
    LFUNC_FA_(SSL_CTX_get_security_callback) \
    LFUNC_FA_(SSL_CTX_get_security_level) \
    LFUNC_FA_(SSL_CTX_set0_security_ex_data) \
    LFUNC_FA_(SSL_CTX_set_default_verify_dir) \
    LFUNC_FA_(SSL_CTX_set_default_verify_file) \
    LFUNC_FA_(SSL_CTX_set_not_resumable_session_callback) \
    LFUNC_FA_(SSL_CTX_set_options) \
    LFUNC_FA_(SSL_CTX_set_security_callback) \
    LFUNC_FA_(SSL_CTX_set_security_level) \
    LFUNC_FA_(SSL_CTX_up_ref) \
    LFUNC_FA_(SSL_dane_enable) \
    LFUNC_FA_(SSL_dane_tlsa_add) \
    LFUNC_FA_(SSL_get0_dane) \
    LFUNC_FA_(SSL_get0_dane_authority) \
    LFUNC_FA_(SSL_get0_dane_tlsa) \
    LFUNC_FA_(SSL_get0_peername) \
    LFUNC_FA_(SSL_get0_security_ex_data) \
    LFUNC_FA_(SSL_get1_supported_ciphers) \
    LFUNC_FA_(UNIMPLEMENTED) /* SSL_get_async_wait_fd */ \
    LFUNC_FA_(SSL_get_client_random) \
    LFUNC_FA_(SSL_get_options) \
    LFUNC_FA_(SSL_get_security_callback) \
    LFUNC_FA_(SSL_get_security_level) \
    LFUNC_FA_(SSL_get_server_random) \
    LFUNC_FA_(SSL_get_state) \
    LFUNC_FA_(SSL_in_before) \
    LFUNC_FA_(SSL_in_init) \
    LFUNC_FA_(SSL_is_init_finished) \
    LFUNC_FA_(SSL_SESSION_get0_ticket) \
    LFUNC_FA_(SSL_SESSION_get_master_key) \
    LFUNC_FA_(SSL_SESSION_get_ticket_lifetime_hint) \
    LFUNC_FA_(SSL_SESSION_has_ticket) \
    LFUNC_FA_(SSL_SESSION_print_keylog) \
    LFUNC_FA_(SSL_session_reused) \
    LFUNC_FA_(SSL_set0_security_ex_data) \
    LFUNC_FA_(SSL_set1_host) \
    LFUNC_FA_(SSL_set_default_passwd_cb) \
    LFUNC_FA_(SSL_set_default_passwd_cb_userdata) \
    LFUNC_FA_(SSL_set_hostflags) \
    LFUNC_FA_(SSL_set_not_resumable_session_callback) \
    LFUNC_FA_(SSL_set_options) \
    LFUNC_FA_(SSL_set0_rbio) \
    LFUNC_FA_(SSL_set_security_callback) \
    LFUNC_FA_(SSL_set_security_level) \
    LFUNC_FA_(SSL_set0_wbio) \
    LFUNC_FA_(SSL_up_ref) \
    LFUNC_FA_(SSL_use_certificate_chain_file) \
    LFUNC_FA_(SSL_waiting_for_async) \
    LFUNC_FA_(TLS_client_method) \
    LFUNC_FA_(TLS_method) \
    LFUNC_FA_(TLS_server_method) \
    LFUNC_FA_(ASYNC_WAIT_CTX_new) \
    LFUNC_FA_(ASYNC_WAIT_CTX_free) \
    LFUNC_FA_(ASYNC_WAIT_CTX_set_wait_fd) \
    LFUNC_FA_(ASYNC_WAIT_CTX_get_fd) \
    LFUNC_FA_(ASYNC_WAIT_CTX_get_all_fds) \
    LFUNC_FA_(ASYNC_WAIT_CTX_get_changed_fds) \
    LFUNC_FA_(ASYNC_WAIT_CTX_clear_fd) \
    LFUNC_FA_(ASYNC_is_capable) \
    LFUNC_FA_(ASYNC_get_wait_ctx) \
    LFUNC_FA_(BIO_up_ref) \
    LFUNC_FA_(BN_BLINDING_is_current_thread) \
    LFUNC_FA_(BN_BLINDING_set_current_thread) \
    LFUNC_FA_(BN_BLINDING_lock) \
    LFUNC_FA_(BN_BLINDING_unlock) \
    LFUNC_FA_(CRYPTO_THREAD_run_once) \
    LFUNC_FA_(CRYPTO_THREAD_init_local) \
    LFUNC_FA_(CRYPTO_THREAD_get_local) \
    LFUNC_FA_(CRYPTO_THREAD_set_local) \
    LFUNC_FA_(CRYPTO_THREAD_cleanup_local) \
    LFUNC_FA_(CRYPTO_THREAD_get_current_id) \
    LFUNC_FA_(CRYPTO_THREAD_compare_id) \
    LFUNC_FA_(CRYPTO_THREAD_lock_new) \
    LFUNC_FA_(CRYPTO_THREAD_read_lock) \
    LFUNC_FA_(CRYPTO_THREAD_write_lock) \
    LFUNC_FA_(CRYPTO_THREAD_unlock) \
    LFUNC_FA_(CRYPTO_THREAD_lock_free) \
    LFUNC_FA_(CRYPTO_atomic_add) \
    LFUNC_FA_(OPENSSL_die) \
    LFUNC_FA_(CT_POLICY_EVAL_CTX_new) \
    LFUNC_FA_(CT_POLICY_EVAL_CTX_free) \
    LFUNC_FA_(CT_POLICY_EVAL_CTX_get0_cert) \
    LFUNC_FA_(CT_POLICY_EVAL_CTX_get0_issuer) \
    LFUNC_FA_(CT_POLICY_EVAL_CTX_get0_log_store) \
    LFUNC_FA_(SCT_new) \
    LFUNC_FA_(SCT_new_from_base64) \
    LFUNC_FA_(SCT_free) \
    LFUNC_FA_(SCT_LIST_free) \
    LFUNC_FA_(SCT_get_version) \
    LFUNC_FA_(SCT_set_version) \
    LFUNC_FA_(SCT_get_log_entry_type) \
    LFUNC_FA_(SCT_set_log_entry_type) \
    LFUNC_FA_(SCT_get0_log_id) \
    LFUNC_FA_(SCT_set0_log_id) \
    LFUNC_FA_(SCT_set1_log_id) \
    LFUNC_FA_(SCT_get_timestamp) \
    LFUNC_FA_(SCT_set_timestamp) \
    LFUNC_FA_(SCT_get_signature_nid) \
    LFUNC_FA_(SCT_set_signature_nid) \
    LFUNC_FA_(SCT_get0_extensions) \
    LFUNC_FA_(SCT_set0_extensions) \
    LFUNC_FA_(SCT_set1_extensions) \
    LFUNC_FA_(SCT_get0_signature) \
    LFUNC_FA_(SCT_set0_signature) \
    LFUNC_FA_(SCT_set1_signature) \
    LFUNC_FA_(SCT_get_source) \
    LFUNC_FA_(SCT_set_source) \
    LFUNC_FA_(SCT_print) \
    LFUNC_FA_(SCT_LIST_print) \
    LFUNC_FA_(SCT_get_validation_status) \
    LFUNC_FA_(SCT_validate) \
    LFUNC_FA_(SCT_LIST_validate) \
    LFUNC_FA_(i2o_SCT_LIST) \
    LFUNC_FA_(o2i_SCT_LIST) \
    LFUNC_FA_(i2d_SCT_LIST) \
    LFUNC_FA_(d2i_SCT_LIST) \
    LFUNC_FA_(i2o_SCT) \
    LFUNC_FA_(o2i_SCT) \
    LFUNC_FA_(CTLOG_new) \
    LFUNC_FA_(CTLOG_new_from_base64) \
    LFUNC_FA_(CTLOG_free) \
    LFUNC_FA_(CTLOG_get0_name) \
    LFUNC_FA_(CTLOG_get0_log_id) \
    LFUNC_FA_(CTLOG_get0_public_key) \
    LFUNC_FA_(CTLOG_STORE_new) \
    LFUNC_FA_(CTLOG_STORE_free) \
    LFUNC_FA_(CTLOG_STORE_get0_log_by_id) \
    LFUNC_FA_(CTLOG_STORE_load_file) \
    LFUNC_FA_(CTLOG_STORE_load_default_file) \
    LFUNC_FA_(ERR_load_CT_strings) \
    LFUNC_FA_(DHparams_it) \
    LFUNC_FA_(DSA_SIG_get0) \
    LFUNC_FA_(EC_GROUP_new_from_ecparameters) \
    LFUNC_FA_(EC_GROUP_get_ecparameters) \
    LFUNC_FA_(EC_GROUP_new_from_ecpkparameters) \
    LFUNC_FA_(EC_GROUP_get_ecpkparameters) \
    LFUNC_FA_(ECPKPARAMETERS_it) \
    LFUNC_FA_(ECPARAMETERS_it) \
    LFUNC_FA_(EC_KEY_can_sign) \
    LFUNC_FA_(EVP_blake2b512) \
    LFUNC_FA_(EVP_blake2s256) \
    LFUNC_FA_(EVP_PKEY_CTX_str2ctrl) \
    LFUNC_FA_(EVP_PKEY_CTX_hex2ctrl) \
    LFUNC_FA_(ERR_load_KDF_strings) \
    LFUNC_FA_(SRP_user_pwd_free) \
    LFUNC_FA_(SRP_VBASE_get1_by_user) \
    LFUNC_FA_(SSL_CTX_has_client_custom_ext) \
    LFUNC_FA_(SSL_CIPHER_get_kx_nid) \
    LFUNC_FA_(SSL_CIPHER_get_auth_nid) \
    LFUNC_FA_(SSL_CIPHER_is_aead) \
    LFUNC_FA_(SSL_has_pending) \
    LFUNC_FA_(SSL_SESSION_up_ref) \
    LFUNC_FA_(SSL_CTX_get_default_passwd_cb) \
    LFUNC_FA_(SSL_CTX_get_default_passwd_cb_userdata) \
    LFUNC_FA_(SSL_get_default_passwd_cb) \
    LFUNC_FA_(SSL_get_default_passwd_cb_userdata) \
    LFUNC_FA_(SSL_get_all_async_fds) \
    LFUNC_FA_(SSL_get_changed_async_fds) \
    LFUNC_FA_(SSL_CTX_set_default_read_buffer_len) \
    LFUNC_FA_(SSL_set_default_read_buffer_len) \
    LFUNC_FA_(SSL_set_ct_validation_callback) \
    LFUNC_FA_(SSL_CTX_set_ct_validation_callback) \
    LFUNC_FA_(SSL_ct_is_enabled) \
    LFUNC_FA_(SSL_CTX_ct_is_enabled) \
    LFUNC_FA_(SSL_get0_peer_scts) \
    LFUNC_FA_(SSL_CTX_set_default_ctlog_list_file) \
    LFUNC_FA_(SSL_CTX_set_ctlog_list_file) \
    LFUNC_FA_(SSL_CTX_set0_ctlog_store) \
    LFUNC_FA_(SSL_CTX_get0_ctlog_store) \
    LFUNC_FA_(X509_SIG_get0) \
    LFUNC_FA_(PKCS8_pkey_get0_attrs) \
    LFUNC_FA_(PKCS8_pkey_add1_attr_by_NID) \
    LFUNC_FA_(X509_STORE_up_ref) \
    LFUNC_FA_(SSL_enable_ct) \
    LFUNC_FA_(SSL_CTX_enable_ct) \
    LFUNC_FA_(SSL_CTX_get_ciphers) \
    LFUNC_FA_(SSL_SESSION_get0_hostname) \
    LFUNC_FA_(SCT_validation_status_string) \
    LFUNC_FA_(BIO_meth_new) \
    LFUNC_FA_(BIO_meth_get_puts) \
    LFUNC_FA_(BIO_meth_get_ctrl) \
    LFUNC_FA_(BIO_meth_get_gets) \
    LFUNC_FA_(BIO_get_data) \
    LFUNC_FA_(BIO_set_init) \
    LFUNC_FA_(BIO_meth_set_puts) \
    LFUNC_FA_(BIO_get_shutdown) \
    LFUNC_FA_(BIO_get_init) \
    LFUNC_FA_(BIO_meth_set_ctrl) \
    LFUNC_FA_(BIO_meth_set_read) \
    LFUNC_FA_(BIO_set_shutdown) \
    LFUNC_FA_(BIO_meth_set_create) \
    LFUNC_FA_(BIO_meth_get_write) \
    LFUNC_FA_(BIO_meth_set_callback_ctrl) \
    LFUNC_FA_(BIO_meth_get_create) \
    LFUNC_FA_(BIO_set_next) \
    LFUNC_FA_(BIO_set_data) \
    LFUNC_FA_(BIO_meth_set_write) \
    LFUNC_FA_(BIO_meth_set_destroy) \
    LFUNC_FA_(BIO_meth_set_gets) \
    LFUNC_FA_(BIO_meth_get_callback_ctrl) \
    LFUNC_FA_(BIO_meth_get_destroy) \
    LFUNC_FA_(BIO_meth_get_read) \
    LFUNC_FA_(BIO_set_retry_reason) \
    LFUNC_FA_(BIO_meth_free) \
    LFUNC_FA_(DSA_meth_set_bn_mod_exp) \
    LFUNC_FA_(DSA_meth_set_init) \
    LFUNC_FA_(DSA_meth_free) \
    LFUNC_FA_(DSA_meth_set_mod_exp) \
    LFUNC_FA_(DSA_meth_set_sign) \
    LFUNC_FA_(DSA_meth_get_finish) \
    LFUNC_FA_(DSA_set_flags) \
    LFUNC_FA_(DSA_get0_pqg) \
    LFUNC_FA_(DSA_meth_get0_app_data) \
    LFUNC_FA_(DSA_meth_get_keygen) \
    LFUNC_FA_(DSA_clear_flags) \
    LFUNC_FA_(DSA_meth_get0_name) \
    LFUNC_FA_(DSA_meth_get_paramgen) \
    LFUNC_FA_(DSA_meth_get_sign) \
    LFUNC_FA_(DSA_meth_set_paramgen) \
    LFUNC_FA_(DSA_test_flags) \
    LFUNC_FA_(DSA_meth_set0_app_data) \
    LFUNC_FA_(DSA_meth_set1_name) \
    LFUNC_FA_(DSA_get0_key) \
    LFUNC_FA_(DSA_meth_get_mod_exp) \
    LFUNC_FA_(DSA_set0_pqg) \
    LFUNC_FA_(DSA_meth_get_flags) \
    LFUNC_FA_(DSA_meth_get_verify) \
    LFUNC_FA_(DSA_meth_set_verify) \
    LFUNC_FA_(DSA_meth_set_finish) \
    LFUNC_FA_(DSA_meth_set_keygen) \
    LFUNC_FA_(DSA_meth_dup) \
    LFUNC_FA_(DSA_set0_key) \
    LFUNC_FA_(DSA_meth_get_init) \
    LFUNC_FA_(DSA_meth_set_sign_setup) \
    LFUNC_FA_(DSA_meth_get_bn_mod_exp) \
    LFUNC_FA_(DSA_get_method) \
    LFUNC_FA_(DSA_meth_new) \
    LFUNC_FA_(DSA_meth_set_flags) \
    LFUNC_FA_(DSA_meth_get_sign_setup) \
    LFUNC_FA_(DSA_get0_engine) \
    LFUNC_FA_(X509_VERIFY_PARAM_set_auth_level) \
    LFUNC_FA_(X509_VERIFY_PARAM_get_auth_level) \
    LFUNC_FA_(X509_REQ_get0_pubkey) \
    LFUNC_FA_(RSA_set0_key) \
    LFUNC_FA_(RSA_meth_get_flags) \
    LFUNC_FA_(RSA_meth_set_finish) \
    LFUNC_FA_(RSA_meth_get_priv_dec) \
    LFUNC_FA_(RSA_meth_get_sign) \
    LFUNC_FA_(RSA_meth_get_bn_mod_exp) \
    LFUNC_FA_(RSA_test_flags) \
    LFUNC_FA_(RSA_meth_new) \
    LFUNC_FA_(RSA_meth_get0_app_data) \
    LFUNC_FA_(RSA_meth_dup) \
    LFUNC_FA_(RSA_meth_set1_name) \
    LFUNC_FA_(RSA_meth_set0_app_data) \
    LFUNC_FA_(RSA_set_flags) \
    LFUNC_FA_(RSA_meth_set_sign) \
    LFUNC_FA_(RSA_clear_flags) \
    LFUNC_FA_(RSA_meth_get_keygen) \
    LFUNC_FA_(RSA_meth_set_keygen) \
    LFUNC_FA_(RSA_meth_set_pub_dec) \
    LFUNC_FA_(RSA_meth_get_finish) \
    LFUNC_FA_(RSA_get0_key) \
    LFUNC_FA_(RSA_get0_engine) \
    LFUNC_FA_(RSA_meth_set_priv_enc) \
    LFUNC_FA_(RSA_meth_set_verify) \
    LFUNC_FA_(RSA_get0_factors) \
    LFUNC_FA_(RSA_meth_get0_name) \
    LFUNC_FA_(RSA_meth_get_mod_exp) \
    LFUNC_FA_(RSA_meth_set_flags) \
    LFUNC_FA_(RSA_meth_get_pub_dec) \
    LFUNC_FA_(RSA_meth_set_bn_mod_exp) \
    LFUNC_FA_(RSA_meth_get_init) \
    LFUNC_FA_(RSA_meth_free) \
    LFUNC_FA_(RSA_meth_get_pub_enc) \
    LFUNC_FA_(RSA_meth_set_mod_exp) \
    LFUNC_FA_(RSA_set0_factors) \
    LFUNC_FA_(RSA_meth_set_pub_enc) \
    LFUNC_FA_(RSA_meth_set_priv_dec) \
    LFUNC_FA_(RSA_meth_get_verify) \
    LFUNC_FA_(RSA_meth_set_init) \
    LFUNC_FA_(RSA_meth_get_priv_enc) \
    LFUNC_FA_(RSA_set0_crt_params) \
    LFUNC_FA_(RSA_get0_crt_params) \
    LFUNC_FA_(DH_set0_pqg) \
    LFUNC_FA_(DH_clear_flags) \
    LFUNC_FA_(DH_get0_key) \
    LFUNC_FA_(DH_get0_engine) \
    LFUNC_FA_(DH_set0_key) \
    LFUNC_FA_(DH_set_length) \
    LFUNC_FA_(DH_test_flags) \
    LFUNC_FA_(DH_get_length) \
    LFUNC_FA_(DH_get0_pqg) \
    LFUNC_FA_(DH_meth_get_compute_key) \
    LFUNC_FA_(DH_meth_set1_name) \
    LFUNC_FA_(DH_meth_set_init) \
    LFUNC_FA_(DH_meth_get_finish) \
    LFUNC_FA_(DH_meth_get0_name) \
    LFUNC_FA_(DH_meth_set_generate_params) \
    LFUNC_FA_(DH_meth_set_compute_key) \
    LFUNC_FA_(DH_meth_set_flags) \
    LFUNC_FA_(DH_meth_get_generate_params) \
    LFUNC_FA_(DH_meth_get_flags) \
    LFUNC_FA_(DH_meth_set_finish) \
    LFUNC_FA_(DH_meth_get0_app_data) \
    LFUNC_FA_(DH_meth_set0_app_data) \
    LFUNC_FA_(DH_meth_get_init) \
    LFUNC_FA_(DH_meth_get_bn_mod_exp) \
    LFUNC_FA_(DH_meth_new) \
    LFUNC_FA_(DH_meth_dup) \
    LFUNC_FA_(DH_meth_set_bn_mod_exp) \
    LFUNC_FA_(DH_meth_set_generate_key) \
    LFUNC_FA_(DH_meth_free) \
    LFUNC_FA_(DH_meth_get_generate_key) \
    LFUNC_FA_(DH_set_flags) \
    LFUNC_FA_(X509_STORE_CTX_get_obj_by_subject) \
    LFUNC_FA_(X509_OBJECT_free) \
    LFUNC_FA_(X509_OBJECT_get0_X509) \
    LFUNC_FA_(X509_STORE_CTX_get0_untrusted) \
    LFUNC_FA_(X509_STORE_CTX_get0_cert) \
    LFUNC_FA_(X509_STORE_CTX_set_verify) \
    LFUNC_FA_(X509_STORE_CTX_get_verify) \
    LFUNC_FA_(X509_STORE_CTX_get_verify_cb) \
    LFUNC_FA_(X509_STORE_CTX_set0_verified_chain) \
    LFUNC_FA_(X509_STORE_CTX_set0_untrusted) \
    LFUNC_FA_(OPENSSL_hexchar2int) \
    LFUNC_FA_(UNIMPLEMENTED) /* BIO_new_dgram_sctp */ \
    LFUNC_FA_(UNIMPLEMENTED) /* BIO_dgram_is_sctp */ \
    LFUNC_FA_(UNIMPLEMENTED) /* BIO_dgram_sctp_notification_cb */ \
    LFUNC_FA_(UNIMPLEMENTED) /* BIO_dgram_sctp_wait_for_dry */ \
    LFUNC_FA_(UNIMPLEMENTED) /* BIO_dgram_sctp_msg_waiting */ \
    LFUNC_FA_(DSA_SIG_set0) \
    LFUNC_FA_(DSA_bits) \
    LFUNC_FA_(ECDSA_SIG_set0) \
    LFUNC_FA_(EVP_ENCODE_CTX_copy) \
    LFUNC_FA_(EVP_PKEY_get0_hmac) \
    LFUNC_FA_(HMAC_CTX_get_md) \
    LFUNC_FA_(OCSP_resp_get0_certs) \
    LFUNC_FA_(OCSP_resp_get0_id) \
    LFUNC_FA_(PEM_write_bio_PrivateKey_traditional) \
    LFUNC_FA_(SSL_SESSION_get_protocol_version) \
    LFUNC_FA_(SSL_is_dtls) \
    LFUNC_FA_(SSL_CTX_dane_set_flags) \
    LFUNC_FA_(SSL_CTX_dane_clear_flags) \
    LFUNC_FA_(SSL_dane_set_flags) \
    LFUNC_FA_(SSL_dane_clear_flags) \
    LFUNC_FA_(SSL_client_version) \
    LFUNC_FA_(X509_get_pathlen) \
    LFUNC_FA_(X509_OBJECT_get_type) \
    LFUNC_FA_(X509_OBJECT_get0_X509_CRL) \
    LFUNC_FA_(X509_STORE_lock) \
    LFUNC_FA_(X509_STORE_unlock) \
    LFUNC_FA_(X509_STORE_get0_objects) \
    LFUNC_FA_(X509_STORE_get0_param) \
    LFUNC_FA_(X509_STORE_set_verify) \
    LFUNC_FA_(X509_STORE_get_verify) \
    LFUNC_FA_(X509_STORE_get_verify_cb) \
    LFUNC_FA_(X509_STORE_set_get_issuer) \
    LFUNC_FA_(X509_STORE_get_get_issuer) \
    LFUNC_FA_(X509_STORE_set_check_issued) \
    LFUNC_FA_(X509_STORE_get_check_issued) \
    LFUNC_FA_(X509_STORE_set_check_revocation) \
    LFUNC_FA_(X509_STORE_get_check_revocation) \
    LFUNC_FA_(X509_STORE_set_get_crl) \
    LFUNC_FA_(X509_STORE_get_get_crl) \
    LFUNC_FA_(X509_STORE_set_check_crl) \
    LFUNC_FA_(X509_STORE_get_check_crl) \
    LFUNC_FA_(X509_STORE_set_cert_crl) \
    LFUNC_FA_(X509_STORE_get_cert_crl) \
    LFUNC_FA_(X509_STORE_set_check_policy) \
    LFUNC_FA_(X509_STORE_get_check_policy) \
    LFUNC_FA_(X509_STORE_set_lookup_certs) \
    LFUNC_FA_(X509_STORE_get_lookup_certs) \
    LFUNC_FA_(X509_STORE_set_lookup_crls) \
    LFUNC_FA_(X509_STORE_get_lookup_crls) \
    LFUNC_FA_(X509_STORE_set_cleanup) \
    LFUNC_FA_(X509_STORE_get_cleanup) \
    LFUNC_FA_(X509_STORE_set_ex_data) \
    LFUNC_FA_(X509_STORE_get_ex_data) \
    LFUNC_FA_(X509_STORE_CTX_get_get_issuer) \
    LFUNC_FA_(X509_STORE_CTX_get_check_issued) \
    LFUNC_FA_(X509_STORE_CTX_get_check_revocation) \
    LFUNC_FA_(X509_STORE_CTX_get_get_crl) \
    LFUNC_FA_(X509_STORE_CTX_get_check_crl) \
    LFUNC_FA_(X509_STORE_CTX_get_cert_crl) \
    LFUNC_FA_(X509_STORE_CTX_get_check_policy) \
    LFUNC_FA_(X509_STORE_CTX_get_lookup_certs) \
    LFUNC_FA_(X509_STORE_CTX_get_lookup_crls) \
    LFUNC_FA_(X509_STORE_CTX_get_cleanup) \
    LFUNC_FA_(X509_STORE_CTX_set_error_depth) \
    LFUNC_FA_(X509_STORE_CTX_set_current_cert) \
    LFUNC_FA_(NAME_CONSTRAINTS_check_CN) \
    LFUNC_FA_(X509_set_proxy_flag) \
    LFUNC_FA_(X509_set_proxy_pathlen) \
    LFUNC_FA_(X509_get_proxy_pathlen) \
    LFUNC_FA_(ASIdentifierChoice_new) \
    LFUNC_FA_(ASIdentifierChoice_free) \
    LFUNC_FA_(d2i_ASIdentifierChoice) \
    LFUNC_FA_(i2d_ASIdentifierChoice) \
    LFUNC_FA_(ASIdentifierChoice_it) \
    LFUNC_FA_(ASIdentifiers_new) \
    LFUNC_FA_(ASIdentifiers_free) \
    LFUNC_FA_(d2i_ASIdentifiers) \
    LFUNC_FA_(i2d_ASIdentifiers) \
    LFUNC_FA_(ASIdentifiers_it) \
    LFUNC_FA_(ASIdOrRange_new) \
    LFUNC_FA_(ASIdOrRange_free) \
    LFUNC_FA_(d2i_ASIdOrRange) \
    LFUNC_FA_(i2d_ASIdOrRange) \
    LFUNC_FA_(ASIdOrRange_it) \
    LFUNC_FA_(ASRange_new) \
    LFUNC_FA_(ASRange_free) \
    LFUNC_FA_(d2i_ASRange) \
    LFUNC_FA_(i2d_ASRange) \
    LFUNC_FA_(ASRange_it) \
    LFUNC_FA_(IPAddressChoice_new) \
    LFUNC_FA_(IPAddressChoice_free) \
    LFUNC_FA_(d2i_IPAddressChoice) \
    LFUNC_FA_(i2d_IPAddressChoice) \
    LFUNC_FA_(IPAddressChoice_it) \
    LFUNC_FA_(IPAddressFamily_new) \
    LFUNC_FA_(IPAddressFamily_free) \
    LFUNC_FA_(d2i_IPAddressFamily) \
    LFUNC_FA_(i2d_IPAddressFamily) \
    LFUNC_FA_(IPAddressFamily_it) \
    LFUNC_FA_(IPAddressOrRange_new) \
    LFUNC_FA_(IPAddressOrRange_free) \
    LFUNC_FA_(d2i_IPAddressOrRange) \
    LFUNC_FA_(i2d_IPAddressOrRange) \
    LFUNC_FA_(IPAddressOrRange_it) \
    LFUNC_FA_(ASN1_STRING_get0_data) \
    LFUNC_FA_(X509_get0_notBefore) \
    LFUNC_FA_(X509_get0_notAfter) \
    LFUNC_FA_(X509_CRL_get0_lastUpdate) \
    LFUNC_FA_(X509_CRL_get0_nextUpdate) \
    LFUNC_FA_(OPENSSL_uni2utf8) \
    LFUNC_FA_(CT_POLICY_EVAL_CTX_set_shared_CTLOG_STORE) \
    LFUNC_FA_(CT_POLICY_EVAL_CTX_set1_cert) \
    LFUNC_FA_(CT_POLICY_EVAL_CTX_set1_issuer) \
    LFUNC_FA_(ECPARAMETERS_new) \
    LFUNC_FA_(ECPARAMETERS_free) \
    LFUNC_FA_(BIO_get_new_index) \
    LFUNC_FA_(EVP_PKEY_set1_encoded_public_key) \
    LFUNC_FA_(EVP_PKEY_get1_encoded_public_key) \
    LFUNC_FA_(OCSP_RESPID_set_by_name) \
    LFUNC_FA_(OCSP_RESPID_set_by_key) \
    LFUNC_FA_(OCSP_RESPID_match) \
    LFUNC_FA_(PKCS12_add_friendlyname_utf8) \
    LFUNC_FA_(PKCS12_key_gen_utf8) \
    LFUNC_FA_(OPENSSL_utf82uni) \
    LFUNC_FA_(SSL_SESSION_get0_cipher) \
    LFUNC_FA_(SSL_SESSION_set1_id) \
    LFUNC_FA_(SSL_SESSION_get0_id_context) \
    LFUNC_FA_(TS_STATUS_INFO_get0_text) \
    LFUNC_FA_(X509_SIG_getm) \
    LFUNC_FA_(X509_get0_serialNumber) \
    LFUNC_FA_(CT_POLICY_EVAL_CTX_get_time) \
    LFUNC_FA_(CT_POLICY_EVAL_CTX_set_time) \
    LFUNC_FA_(DH_check_params) \
    LFUNC_FA_(SSL_COMP_get0_name) \
    LFUNC_FA_(SSL_COMP_get_id) \
    LFUNC_FA_(X509_VERIFY_PARAM_get_time) \
    LFUNC_FA_(X509_VERIFY_PARAM_set_inh_flags) \
    LFUNC_FA_(X509_VERIFY_PARAM_get_inh_flags) \
    LFUNC_FA_(CRYPTO_secure_clear_free) \
    LFUNC_FA_(EVP_PKEY_set1_engine) \
    LFUNC_FA_(SSL_get_client_ciphers) \
    LFUNC_FA_(SSL_CIPHER_standard_name) \
    LFUNC_FA_(SSL_get0_verified_chain) \
    LFUNC_FA_(SSL_COMP_set0_compression_methods) \
    LFUNC_FA_(UNIMPLEMENTED) /* SSL_SESSION_print_fp */ \
    LFUNC_FA_(SSL_CTX_set1_cert_store) \
    LFUNC_FA_(DTLS_get_data_mtu) \
    LFUNC_FA_(SSL_read_ex) \
    LFUNC_FA_(SSL_peek_ex) \
    LFUNC_FA_(SSL_write_ex) \
    LFUNC_FA_(SSL_CTX_set_keylog_callback) \
    LFUNC_FA_(SSL_CTX_get_keylog_callback) \
    LFUNC_FA_(SSL_get_peer_signature_type_nid) \
    LFUNC_FA_(SSL_key_update) \
    LFUNC_FA_(SSL_get_key_update_type) \
    LFUNC_FA_(SSL_bytes_to_cipher_list) \
    LFUNC_FA_(SSL_client_hello_get0_compression_methods) \
    LFUNC_FA_(SSL_client_hello_get0_ciphers) \
    LFUNC_FA_(SSL_client_hello_get0_ext) \
    LFUNC_FA_(SSL_client_hello_get0_session_id) \
    LFUNC_FA_(SSL_client_hello_get0_random) \
    LFUNC_FA_(SSL_CTX_set_client_hello_cb) \
    LFUNC_FA_(SSL_client_hello_get0_legacy_version) \
    LFUNC_FA_(SSL_client_hello_isv2) \
    LFUNC_FA_(SSL_set_max_early_data) \
    LFUNC_FA_(SSL_CTX_set_max_early_data) \
    LFUNC_FA_(SSL_get_max_early_data) \
    LFUNC_FA_(SSL_CTX_get_max_early_data) \
    LFUNC_FA_(SSL_write_early_data) \
    LFUNC_FA_(SSL_read_early_data) \
    LFUNC_FA_(SSL_get_early_data_status) \
    LFUNC_FA_(SSL_SESSION_get_max_early_data) \
    LFUNC_FA_(SSL_add1_to_CA_list) \
    LFUNC_FA_(SSL_set0_CA_list) \
    LFUNC_FA_(SSL_CTX_set0_CA_list) \
    LFUNC_FA_(SSL_get0_CA_list) \
    LFUNC_FA_(SSL_get0_peer_CA_list) \
    LFUNC_FA_(SSL_CTX_add1_to_CA_list) \
    LFUNC_FA_(SSL_CTX_get0_CA_list) \
    LFUNC_FA_(SSL_CTX_add_custom_ext) \
    LFUNC_FA_(SSL_SESSION_is_resumable) \
    LFUNC_FA_(SSL_CTX_set_record_padding_callback) \
    LFUNC_FA_(SSL_set_record_padding_callback) \
    LFUNC_FA_(SSL_CTX_set_block_padding) \
    LFUNC_FA_(SSL_CTX_get_record_padding_callback_arg) \
    LFUNC_FA_(SSL_get_record_padding_callback_arg) \
    LFUNC_FA_(SSL_set_block_padding) \
    LFUNC_FA_(SSL_set_record_padding_callback_arg) \
    LFUNC_FA_(SSL_CTX_set_record_padding_callback_arg) \
    LFUNC_FA_(SSL_CTX_use_serverinfo_ex) \
    LFUNC_FA_(SSL_client_hello_get1_extensions_present) \
    LFUNC_FA_(SSL_set_psk_find_session_callback) \
    LFUNC_FA_(SSL_set_psk_use_session_callback) \
    LFUNC_FA_(SSL_CTX_set_psk_use_session_callback) \
    LFUNC_FA_(SSL_CTX_set_psk_find_session_callback) \
    LFUNC_FA_(SSL_CIPHER_get_handshake_digest) \
    LFUNC_FA_(SSL_SESSION_set1_master_key) \
    LFUNC_FA_(SSL_SESSION_set_cipher) \
    LFUNC_FA_(SSL_SESSION_set_protocol_version) \
    LFUNC_FA_(OPENSSL_cipher_name) \
    LFUNC_FA_(SSL_alloc_buffers) \
    LFUNC_FA_(SSL_free_buffers) \
    LFUNC_FA_(SSL_SESSION_dup) \
    LFUNC_FA_(SSL_get_pending_cipher) \
    LFUNC_FA_(SSL_CIPHER_get_protocol_id) \
    LFUNC_FA_(SSL_SESSION_set_max_early_data) \
    LFUNC_FA_(SSL_SESSION_set1_alpn_selected) \
    LFUNC_FA_(SSL_SESSION_set1_hostname) \
    LFUNC_FA_(SSL_SESSION_get0_alpn_selected) \
    LFUNC_FA_(DTLS_set_timer_cb) \
    LFUNC_FA_(SSL_CTX_set_tlsext_max_fragment_length) \
    LFUNC_FA_(SSL_set_tlsext_max_fragment_length) \
    LFUNC_FA_(SSL_SESSION_get_max_fragment_length) \
    LFUNC_FA_(SSL_stateless) \
    LFUNC_FA_(SSL_verify_client_post_handshake) \
    LFUNC_FA_(SSL_set_post_handshake_auth) \
    LFUNC_FA_(SSL_export_keying_material_early) \
    LFUNC_FA_(SSL_CTX_use_cert_and_key) \
    LFUNC_FA_(SSL_use_cert_and_key) \
    LFUNC_FA_(SSL_SESSION_get0_ticket_appdata) \
    LFUNC_FA_(SSL_SESSION_set1_ticket_appdata) \
    LFUNC_FA_(SSL_CTX_set_session_ticket_cb) \
    LFUNC_FA_(SSL_CTX_set_stateless_cookie_generate_cb) \
    LFUNC_FA_(SSL_CTX_set_stateless_cookie_verify_cb) \
    LFUNC_FA_(SSL_CTX_set_ciphersuites) \
    LFUNC_FA_(SSL_set_ciphersuites) \
    LFUNC_FA_(SSL_set_num_tickets) \
    LFUNC_FA_(SSL_CTX_get_num_tickets) \
    LFUNC_FA_(SSL_get_num_tickets) \
    LFUNC_FA_(SSL_CTX_set_num_tickets) \
    LFUNC_FA_(SSL_CTX_set_allow_early_data_cb) \
    LFUNC_FA_(SSL_set_allow_early_data_cb) \
    LFUNC_FA_(SSL_set_recv_max_early_data) \
    LFUNC_FA_(SSL_get_recv_max_early_data) \
    LFUNC_FA_(SSL_CTX_get_recv_max_early_data) \
    LFUNC_FA_(SSL_CTX_set_recv_max_early_data) \
    LFUNC_FA_(SSL_CTX_set_post_handshake_auth) \
    LFUNC_FA_(SSL_get_signature_type_nid) \
    LFUNC_FA_(IPAddressRange_free) \
    LFUNC_FA_(TLS_FEATURE_new) \
    LFUNC_FA_(UNIMPLEMENTED) /* PEM_write */ \
    LFUNC_FA_(BIO_f_linebuffer) \
    LFUNC_FA_(UNIMPLEMENTED) /* PEM_read */ \
    LFUNC_FA_(IPAddressRange_new) \
    LFUNC_FA_(IPAddressRange_it) \
    LFUNC_FA_(UNIMPLEMENTED) /* PEM_X509_INFO_read */ \
    LFUNC_FA_(d2i_IPAddressRange) \
    LFUNC_FA_(UNIMPLEMENTED) /* PEM_ASN1_write */ \
    LFUNC_FA_(UNIMPLEMENTED) /* PEM_ASN1_read */ \
    LFUNC_FA_(TLS_FEATURE_free) \
    LFUNC_FA_(i2d_RSA_OAEP_PARAMS) \
    LFUNC_FA_(UNIMPLEMENTED) /* PEM_write_DHxparams */ \
    LFUNC_FA_(i2d_IPAddressRange) \
    LFUNC_FA_(X509_OBJECT_new) \
    LFUNC_FA_(PKCS12_get_attr) \
    LFUNC_FA_(ECPKPARAMETERS_free) \
    LFUNC_FA_(ECPKPARAMETERS_new) \
    LFUNC_FA_(ASN1_ITEM_lookup) \
    LFUNC_FA_(ASN1_ITEM_get) \
    LFUNC_FA_(BIO_read_ex) \
    LFUNC_FA_(BIO_set_callback_ex) \
    LFUNC_FA_(BIO_get_callback_ex) \
    LFUNC_FA_(BIO_meth_set_read_ex) \
    LFUNC_FA_(BIO_meth_get_read_ex) \
    LFUNC_FA_(BIO_write_ex) \
    LFUNC_FA_(BIO_meth_get_write_ex) \
    LFUNC_FA_(BIO_meth_set_write_ex) \
    LFUNC_FA_(EVP_PKEY_CTX_md) \
    LFUNC_FA_(RSA_pkey_ctx_ctrl) \
    LFUNC_FA_(UI_method_set_ex_data) \
    LFUNC_FA_(UI_method_get_ex_data) \
    LFUNC_FA_(UI_UTIL_wrap_read_pem_callback) \
    LFUNC_FA_(EVP_PKEY_get0_poly1305) \
    LFUNC_FA_(EVP_PKEY_get0_siphash) \
    LFUNC_FA_(EVP_aria_256_ofb) \
    LFUNC_FA_(EVP_aria_256_cfb128) \
    LFUNC_FA_(EVP_aria_128_cfb1) \
    LFUNC_FA_(EVP_aria_128_ecb) \
    LFUNC_FA_(EVP_aria_128_cfb128) \
    LFUNC_FA_(EVP_aria_192_ecb) \
    LFUNC_FA_(EVP_aria_128_cbc) \
    LFUNC_FA_(EVP_aria_192_ofb) \
    LFUNC_FA_(EVP_aria_192_cbc) \
    LFUNC_FA_(EVP_aria_192_cfb1) \
    LFUNC_FA_(EVP_aria_128_cfb8) \
    LFUNC_FA_(EVP_aria_256_cfb1) \
    LFUNC_FA_(EVP_aria_192_cfb8) \
    LFUNC_FA_(EVP_aria_256_cfb8) \
    LFUNC_FA_(EVP_aria_256_cbc) \
    LFUNC_FA_(EVP_aria_128_ofb) \
    LFUNC_FA_(EVP_aria_192_cfb128) \
    LFUNC_FA_(EVP_aria_256_ecb) \
    LFUNC_FA_(EVP_aria_256_ctr) \
    LFUNC_FA_(EVP_aria_128_ctr) \
    LFUNC_FA_(EVP_aria_192_ctr) \
    LFUNC_FA_(UI_null) \
    LFUNC_FA_(EC_KEY_get0_engine) \
    LFUNC_FA_(INT32_it) \
    LFUNC_FA_(UINT64_it) \
    LFUNC_FA_(ZINT32_it) \
    LFUNC_FA_(ZUINT64_it) \
    LFUNC_FA_(INT64_it) \
    LFUNC_FA_(ZUINT32_it) \
    LFUNC_FA_(UINT32_it) \
    LFUNC_FA_(ZINT64_it) \
    LFUNC_FA_(BIO_lookup_ex) \
    LFUNC_FA_(X509_CRL_print_ex) \
    LFUNC_FA_(X509_SIG_INFO_get) \
    LFUNC_FA_(X509_get_signature_info) \
    LFUNC_FA_(X509_SIG_INFO_set) \
    LFUNC_FA_(ESS_CERT_ID_V2_free) \
    LFUNC_FA_(ESS_SIGNING_CERT_V2_new) \
    LFUNC_FA_(d2i_ESS_SIGNING_CERT_V2) \
    LFUNC_FA_(i2d_ESS_CERT_ID_V2) \
    LFUNC_FA_(ESS_CERT_ID_V2_dup) \
    LFUNC_FA_(TS_RESP_CTX_set_ess_cert_id_digest) \
    LFUNC_FA_(d2i_ESS_CERT_ID_V2) \
    LFUNC_FA_(i2d_ESS_SIGNING_CERT_V2) \
    LFUNC_FA_(TS_CONF_set_ess_cert_id_digest) \
    LFUNC_FA_(ESS_SIGNING_CERT_V2_free) \
    LFUNC_FA_(ESS_SIGNING_CERT_V2_dup) \
    LFUNC_FA_(ESS_CERT_ID_V2_new) \
    LFUNC_FA_(PEM_read_bio_ex) \
    LFUNC_FA_(PEM_bytes_read_bio_secmem) \
    LFUNC_FA_(EVP_DigestSign) \
    LFUNC_FA_(EVP_DigestVerify) \
    LFUNC_FA_(UI_method_get_data_duplicator) \
    LFUNC_FA_(UI_method_set_data_duplicator) \
    LFUNC_FA_(UI_dup_user_data) \
    LFUNC_FA_(UI_method_get_data_destructor) \
    LFUNC_FA_(ERR_load_strings_const) \
    LFUNC_FA_(ASN1_TIME_to_tm) \
    LFUNC_FA_(ASN1_TIME_set_string_X509) \
    LFUNC_FA_(OCSP_resp_get1_id) \
    LFUNC_FA_(OSSL_STORE_register_loader) \
    LFUNC_FA_(OSSL_STORE_LOADER_set_error) \
    LFUNC_FA_(OSSL_STORE_INFO_get0_PKEY) \
    LFUNC_FA_(OSSL_STORE_INFO_get_type) \
    LFUNC_FA_(ERR_load_OSSL_STORE_strings) \
    LFUNC_FA_(OSSL_STORE_LOADER_free) \
    LFUNC_FA_(OSSL_STORE_INFO_get1_PKEY) \
    LFUNC_FA_(OSSL_STORE_INFO_free) \
    LFUNC_FA_(OSSL_STORE_LOADER_set_eof) \
    LFUNC_FA_(OSSL_STORE_LOADER_new) \
    LFUNC_FA_(OSSL_STORE_INFO_get0_CERT) \
    LFUNC_FA_(OSSL_STORE_LOADER_set_close) \
    LFUNC_FA_(OSSL_STORE_INFO_new_PARAMS) \
    LFUNC_FA_(OSSL_STORE_INFO_new_PKEY) \
    LFUNC_FA_(OSSL_STORE_INFO_get1_PARAMS) \
    LFUNC_FA_(OSSL_STORE_INFO_get1_CRL) \
    LFUNC_FA_(OSSL_STORE_error) \
    LFUNC_FA_(OSSL_STORE_INFO_get1_CERT) \
    LFUNC_FA_(OSSL_STORE_INFO_get0_PARAMS) \
    LFUNC_FA_(OSSL_STORE_INFO_type_string) \
    LFUNC_FA_(OSSL_STORE_INFO_get1_NAME) \
    LFUNC_FA_(OSSL_STORE_LOADER_set_load) \
    LFUNC_FA_(OSSL_STORE_LOADER_get0_scheme) \
    LFUNC_FA_(OSSL_STORE_open) \
    LFUNC_FA_(OSSL_STORE_close) \
    LFUNC_FA_(OSSL_STORE_INFO_new_CERT) \
    LFUNC_FA_(OSSL_STORE_INFO_get0_CRL) \
    LFUNC_FA_(OSSL_STORE_load) \
    LFUNC_FA_(OSSL_STORE_INFO_get0_NAME) \
    LFUNC_FA_(OSSL_STORE_unregister_loader) \
    LFUNC_FA_(OSSL_STORE_INFO_new_CRL) \
    LFUNC_FA_(OSSL_STORE_INFO_new_NAME) \
    LFUNC_FA_(OSSL_STORE_eof) \
    LFUNC_FA_(OSSL_STORE_LOADER_set_open) \
    LFUNC_FA_(OSSL_STORE_LOADER_set_ctrl) \
    LFUNC_FA_(OSSL_STORE_vctrl) \
    LFUNC_VA_(OSSL_STORE_ctrl) \
    LFUNC_FA_(OSSL_STORE_INFO_get0_NAME_description) \
    LFUNC_FA_(OSSL_STORE_INFO_set0_NAME_description) \
    LFUNC_FA_(OSSL_STORE_INFO_get1_NAME_description) \
    LFUNC_FA_(OSSL_STORE_do_all_loaders) \
    LFUNC_FA_(OSSL_STORE_LOADER_get0_engine) \
    LFUNC_FA_(UNIMPLEMENTED) /* RAND_DRBG_instantiate */ \
    LFUNC_FA_(UNIMPLEMENTED) /* RAND_DRBG_uninstantiate */ \
    LFUNC_FA_(UNIMPLEMENTED) /* RAND_DRBG_set */ \
    LFUNC_FA_(UNIMPLEMENTED) /* RAND_DRBG_set_callbacks */ \
    LFUNC_FA_(UNIMPLEMENTED) /* RAND_DRBG_new */ \
    LFUNC_FA_(UNIMPLEMENTED) /* RAND_DRBG_set_reseed_interval */ \
    LFUNC_FA_(UNIMPLEMENTED) /* RAND_DRBG_free */ \
    LFUNC_FA_(UNIMPLEMENTED) /* RAND_DRBG_generate */ \
    LFUNC_FA_(UNIMPLEMENTED) /* RAND_DRBG_reseed */ \
    LFUNC_FA_(UNIMPLEMENTED) /* RAND_DRBG_set_ex_data */ \
    LFUNC_FA_(UNIMPLEMENTED) /* RAND_DRBG_get_ex_data */ \
    LFUNC_FA_(EVP_sha3_224) \
    LFUNC_FA_(EVP_sha3_256) \
    LFUNC_FA_(EVP_sha3_384) \
    LFUNC_FA_(EVP_sha3_512) \
    LFUNC_FA_(EVP_shake128) \
    LFUNC_FA_(EVP_shake256) \
    LFUNC_FA_(SCRYPT_PARAMS_new) \
    LFUNC_FA_(SCRYPT_PARAMS_free) \
    LFUNC_FA_(i2d_SCRYPT_PARAMS) \
    LFUNC_FA_(d2i_SCRYPT_PARAMS) \
    LFUNC_FA_(SCRYPT_PARAMS_it) \
    LFUNC_FA_(EVP_PKEY_meth_get0) \
    LFUNC_FA_(EVP_PKEY_meth_get_count) \
    LFUNC_FA_(UNIMPLEMENTED) /* RAND_DRBG_get0_public */ \
    LFUNC_FA_(RAND_priv_bytes) \
    LFUNC_FA_(BN_priv_rand) \
    LFUNC_FA_(BN_priv_rand_range) \
    LFUNC_FA_(ASN1_TIME_normalize) \
    LFUNC_FA_(ASN1_TIME_cmp_time_t) \
    LFUNC_FA_(ASN1_TIME_compare) \
    LFUNC_FA_(EVP_PKEY_CTX_ctrl_uint64) \
    LFUNC_FA_(EVP_DigestFinalXOF) \
    LFUNC_FA_(ERR_clear_last_mark) \
    LFUNC_FA_(UNIMPLEMENTED) /* RAND_DRBG_get0_private */ \
    LFUNC_FA_(EVP_aria_192_ccm) \
    LFUNC_FA_(EVP_aria_256_gcm) \
    LFUNC_FA_(EVP_aria_256_ccm) \
    LFUNC_FA_(EVP_aria_128_gcm) \
    LFUNC_FA_(EVP_aria_128_ccm) \
    LFUNC_FA_(EVP_aria_192_gcm) \
    LFUNC_FA_(UI_get_result_length) \
    LFUNC_FA_(UI_set_result_ex) \
    LFUNC_FA_(UI_get_result_string_length) \
    LFUNC_FA_(EVP_PKEY_check) \
    LFUNC_FA_(EVP_PKEY_meth_set_check) \
    LFUNC_FA_(EVP_PKEY_meth_get_check) \
    LFUNC_FA_(EVP_PKEY_meth_remove) \
    LFUNC_FA_(OPENSSL_sk_reserve) \
    LFUNC_FA_(DH_new_by_nid) \
    LFUNC_FA_(DH_get_nid) \
    LFUNC_FA_(OPENSSL_sk_new_reserve) \
    LFUNC_FA_(EVP_PKEY_asn1_set_check) \
    LFUNC_FA_(EVP_PKEY_asn1_set_siginf) \
    LFUNC_FA_(EVP_sm4_ctr) \
    LFUNC_FA_(EVP_sm4_cbc) \
    LFUNC_FA_(EVP_sm4_ofb) \
    LFUNC_FA_(EVP_sm4_ecb) \
    LFUNC_FA_(EVP_sm4_cfb128) \
    LFUNC_FA_(EVP_sm3) \
    LFUNC_FA_(RSA_get0_multi_prime_factors) \
    LFUNC_FA_(EVP_PKEY_public_check) \
    LFUNC_FA_(EVP_PKEY_param_check) \
    LFUNC_FA_(EVP_PKEY_meth_set_public_check) \
    LFUNC_FA_(EVP_PKEY_meth_set_param_check) \
    LFUNC_FA_(EVP_PKEY_meth_get_public_check) \
    LFUNC_FA_(EVP_PKEY_meth_get_param_check) \
    LFUNC_FA_(EVP_PKEY_asn1_set_public_check) \
    LFUNC_FA_(EVP_PKEY_asn1_set_param_check) \
    LFUNC_FA_(DH_check_ex) \
    LFUNC_FA_(DH_check_pub_key_ex) \
    LFUNC_FA_(DH_check_params_ex) \
    LFUNC_FA_(RSA_generate_multi_prime_key) \
    LFUNC_FA_(RSA_get_multi_prime_extra_count) \
    LFUNC_FA_(OCSP_resp_get0_signer) \
    LFUNC_FA_(RSA_get0_multi_prime_crt_params) \
    LFUNC_FA_(RSA_set0_multi_prime_params) \
    LFUNC_FA_(RSA_get_version) \
    LFUNC_FA_(RSA_meth_get_multi_prime_keygen) \
    LFUNC_FA_(RSA_meth_set_multi_prime_keygen) \
    LFUNC_FA_(UNIMPLEMENTED) /* RAND_DRBG_get0_master */ \
    LFUNC_FA_(UNIMPLEMENTED) /* RAND_DRBG_set_reseed_time_interval */ \
    LFUNC_FA_(PROFESSION_INFO_get0_addProfessionInfo) \
    LFUNC_FA_(ADMISSION_SYNTAX_free) \
    LFUNC_FA_(d2i_ADMISSION_SYNTAX) \
    LFUNC_FA_(NAMING_AUTHORITY_set0_authorityId) \
    LFUNC_FA_(NAMING_AUTHORITY_set0_authorityURL) \
    LFUNC_FA_(d2i_PROFESSION_INFO) \
    LFUNC_FA_(NAMING_AUTHORITY_it) \
    LFUNC_FA_(ADMISSION_SYNTAX_get0_contentsOfAdmissions) \
    LFUNC_FA_(PROFESSION_INFO_set0_professionItems) \
    LFUNC_FA_(NAMING_AUTHORITY_new) \
    LFUNC_FA_(NAMING_AUTHORITY_get0_authorityURL) \
    LFUNC_FA_(ADMISSION_SYNTAX_get0_admissionAuthority) \
    LFUNC_FA_(PROFESSION_INFO_new) \
    LFUNC_FA_(ADMISSIONS_new) \
    LFUNC_FA_(ADMISSION_SYNTAX_set0_admissionAuthority) \
    LFUNC_FA_(PROFESSION_INFO_get0_professionOIDs) \
    LFUNC_FA_(PROFESSION_INFO_it) \
    LFUNC_FA_(i2d_PROFESSION_INFO) \
    LFUNC_FA_(ADMISSIONS_set0_professionInfos) \
    LFUNC_FA_(PROFESSION_INFO_get0_namingAuthority) \
    LFUNC_FA_(PROFESSION_INFO_free) \
    LFUNC_FA_(PROFESSION_INFO_set0_addProfessionInfo) \
    LFUNC_FA_(PROFESSION_INFO_set0_registrationNumber) \
    LFUNC_FA_(ADMISSION_SYNTAX_set0_contentsOfAdmissions) \
    LFUNC_FA_(NAMING_AUTHORITY_get0_authorityId) \
    LFUNC_FA_(ADMISSION_SYNTAX_it) \
    LFUNC_FA_(i2d_ADMISSION_SYNTAX) \
    LFUNC_FA_(NAMING_AUTHORITY_get0_authorityText) \
    LFUNC_FA_(PROFESSION_INFO_set0_namingAuthority) \
    LFUNC_FA_(i2d_NAMING_AUTHORITY) \
    LFUNC_FA_(NAMING_AUTHORITY_free) \
    LFUNC_FA_(ADMISSIONS_set0_admissionAuthority) \
    LFUNC_FA_(ADMISSIONS_free) \
    LFUNC_FA_(PROFESSION_INFO_get0_registrationNumber) \
    LFUNC_FA_(d2i_ADMISSIONS) \
    LFUNC_FA_(i2d_ADMISSIONS) \
    LFUNC_FA_(PROFESSION_INFO_get0_professionItems) \
    LFUNC_FA_(ADMISSIONS_get0_admissionAuthority) \
    LFUNC_FA_(PROFESSION_INFO_set0_professionOIDs) \
    LFUNC_FA_(d2i_NAMING_AUTHORITY) \
    LFUNC_FA_(ADMISSIONS_it) \
    LFUNC_FA_(ADMISSIONS_get0_namingAuthority) \
    LFUNC_FA_(NAMING_AUTHORITY_set0_authorityText) \
    LFUNC_FA_(ADMISSIONS_set0_namingAuthority) \
    LFUNC_FA_(ADMISSIONS_get0_professionInfos) \
    LFUNC_FA_(ADMISSION_SYNTAX_new) \
    LFUNC_FA_(EVP_sha512_256) \
    LFUNC_FA_(EVP_sha512_224) \
    LFUNC_FA_(OCSP_basic_sign_ctx) \
    LFUNC_FA_(UNIMPLEMENTED) /* RAND_DRBG_bytes */ \
    LFUNC_FA_(UNIMPLEMENTED) /* RAND_DRBG_secure_new */ \
    LFUNC_FA_(OSSL_STORE_SEARCH_by_alias) \
    LFUNC_FA_(BIO_bind) \
    LFUNC_FA_(OSSL_STORE_LOADER_set_expect) \
    LFUNC_FA_(OSSL_STORE_expect) \
    LFUNC_FA_(OSSL_STORE_SEARCH_by_key_fingerprint) \
    LFUNC_FA_(OSSL_STORE_SEARCH_get0_serial) \
    LFUNC_FA_(OSSL_STORE_SEARCH_by_name) \
    LFUNC_FA_(OSSL_STORE_supports_search) \
    LFUNC_FA_(OSSL_STORE_find) \
    LFUNC_FA_(OSSL_STORE_SEARCH_get_type) \
    LFUNC_FA_(OSSL_STORE_SEARCH_get0_bytes) \
    LFUNC_FA_(OSSL_STORE_SEARCH_get0_string) \
    LFUNC_FA_(OSSL_STORE_SEARCH_by_issuer_serial) \
    LFUNC_FA_(OSSL_STORE_SEARCH_get0_name) \
    LFUNC_FA_(X509_get0_authority_key_id) \
    LFUNC_FA_(OSSL_STORE_LOADER_set_find) \
    LFUNC_FA_(OSSL_STORE_SEARCH_free) \
    LFUNC_FA_(OSSL_STORE_SEARCH_get0_digest) \
    LFUNC_FA_(UNIMPLEMENTED) /* RAND_DRBG_set_reseed_defaults */ \
    LFUNC_FA_(EVP_PKEY_new_raw_private_key) \
    LFUNC_FA_(EVP_PKEY_new_raw_public_key) \
    LFUNC_FA_(EVP_PKEY_new_CMAC_key) \
    LFUNC_FA_(EVP_PKEY_asn1_set_set_priv_key) \
    LFUNC_FA_(EVP_PKEY_asn1_set_set_pub_key) \
    LFUNC_FA_(UNIMPLEMENTED) /* RAND_DRBG_set_defaults */ \
    LFUNC_FA_(X509_VERIFY_PARAM_get_hostflags) \
    LFUNC_FA_(DH_get0_p) \
    LFUNC_FA_(DH_get0_q) \
    LFUNC_FA_(DH_get0_g) \
    LFUNC_FA_(DH_get0_priv_key) \
    LFUNC_FA_(DH_get0_pub_key) \
    LFUNC_FA_(DSA_get0_priv_key) \
    LFUNC_FA_(DSA_get0_pub_key) \
    LFUNC_FA_(DSA_get0_q) \
    LFUNC_FA_(DSA_get0_p) \
    LFUNC_FA_(DSA_get0_g) \
    LFUNC_FA_(RSA_get0_dmp1) \
    LFUNC_FA_(RSA_get0_d) \
    LFUNC_FA_(RSA_get0_n) \
    LFUNC_FA_(RSA_get0_dmq1) \
    LFUNC_FA_(RSA_get0_e) \
    LFUNC_FA_(RSA_get0_q) \
    LFUNC_FA_(RSA_get0_p) \
    LFUNC_FA_(RSA_get0_iqmp) \
    LFUNC_FA_(ECDSA_SIG_get0_r) \
    LFUNC_FA_(ECDSA_SIG_get0_s) \
    LFUNC_FA_(X509_LOOKUP_meth_get_get_by_fingerprint) \
    LFUNC_FA_(X509_LOOKUP_meth_new) \
    LFUNC_FA_(X509_LOOKUP_meth_get_init) \
    LFUNC_FA_(X509_LOOKUP_meth_get_get_by_alias) \
    LFUNC_FA_(X509_LOOKUP_meth_set_new_item) \
    LFUNC_FA_(X509_LOOKUP_meth_set_shutdown) \
    LFUNC_FA_(X509_LOOKUP_meth_get_new_item) \
    LFUNC_FA_(X509_LOOKUP_meth_set_ctrl) \
    LFUNC_FA_(X509_LOOKUP_meth_set_get_by_issuer_serial) \
    LFUNC_FA_(X509_LOOKUP_get_store) \
    LFUNC_FA_(X509_LOOKUP_meth_get_ctrl) \
    LFUNC_FA_(X509_LOOKUP_meth_set_get_by_alias) \
    LFUNC_FA_(X509_LOOKUP_meth_get_get_by_subject) \
    LFUNC_FA_(X509_LOOKUP_meth_get_free) \
    LFUNC_FA_(X509_LOOKUP_meth_set_get_by_subject) \
    LFUNC_FA_(X509_LOOKUP_meth_set_free) \
    LFUNC_FA_(X509_LOOKUP_meth_get_shutdown) \
    LFUNC_FA_(X509_LOOKUP_set_method_data) \
    LFUNC_FA_(X509_LOOKUP_get_method_data) \
    LFUNC_FA_(X509_LOOKUP_meth_set_get_by_fingerprint) \
    LFUNC_FA_(X509_LOOKUP_meth_free) \
    LFUNC_FA_(X509_OBJECT_set1_X509) \
    LFUNC_FA_(X509_LOOKUP_meth_get_get_by_issuer_serial) \
    LFUNC_FA_(X509_LOOKUP_meth_set_init) \
    LFUNC_FA_(X509_OBJECT_set1_X509_CRL) \
    LFUNC_FA_(EVP_PKEY_get_raw_public_key) \
    LFUNC_FA_(EVP_PKEY_get_raw_private_key) \
    LFUNC_FA_(EVP_PKEY_asn1_set_get_priv_key) \
    LFUNC_FA_(EVP_PKEY_asn1_set_get_pub_key) \
    LFUNC_FA_(UNIMPLEMENTED) /* EVP_PKEY_set_alias_type */ \
    LFUNC_FA_(RAND_keep_random_devices_open) \
    LFUNC_FA_(EC_POINT_set_compressed_coordinates) \
    LFUNC_FA_(EC_POINT_set_affine_coordinates) \
    LFUNC_FA_(EC_POINT_get_affine_coordinates) \
    LFUNC_FA_(EC_GROUP_set_curve) \
    LFUNC_FA_(EC_GROUP_get_curve) \
    LFUNC_FA_(OCSP_resp_get0_tbs_sigalg) \
    LFUNC_FA_(OCSP_resp_get0_respdata) \
    LFUNC_FA_(EVP_MD_CTX_set_pkey_ctx) \
    LFUNC_FA_(EVP_PKEY_meth_set_digest_custom) \
    LFUNC_FA_(EVP_PKEY_meth_get_digest_custom) \
    LFUNC_FA_(OPENSSL_DIR_read) \
    LFUNC_FA_(OPENSSL_DIR_end) \
    LFUNC_FA_(UNIMPLEMENTED) /* OPENSSL_INIT_set_config_filename */ \
    LFUNC_FA_(UNIMPLEMENTED) /* OPENSSL_INIT_set_config_file_flags */ \
    LFUNC_FA_(EVP_PKEY_get0_engine) \
    LFUNC_FA_(X509_get0_authority_serial) \
    LFUNC_FA_(X509_get0_authority_issuer) \
    LFUNC_FA_(EVP_PKEY_meth_set_digestsign) \
    LFUNC_FA_(EVP_PKEY_meth_set_digestverify) \
    LFUNC_FA_(EVP_PKEY_meth_get_digestverify) \
    LFUNC_FA_(EVP_PKEY_meth_get_digestsign) \
    LFUNC_FA_(RSA_get0_pss_params) \
    LFUNC_FA_(X509_ALGOR_copy) \
    LFUNC_FA_(X509_REQ_set0_signature) \
    LFUNC_FA_(X509_REQ_set1_signature_algo) \
    LFUNC_FA_(EC_KEY_decoded_from_explicit_params) \
    LFUNC_FA_(RSA_X931_derive_ex_amiga_1) \
    LFUNC_FA_(RSA_X931_derive_ex_amiga_2) \
    LFUNC_FA_(UNIMPLEMENTED) /* BIO_s_datagram_sctp */ \
    LFUNC_FA_(SSL_CTX_set_async_callback) \
    LFUNC_FA_(SSL_CTX_set_async_callback_arg) \
    LFUNC_FA_(SSL_set_async_callback) \
    LFUNC_FA_(SSL_set_async_callback_arg) \
    LFUNC_FA_(SSL_get_async_status) \
    LFUNC_FA_(SSL_sendfile) \
    LFUNC_FA_(OSSL_default_cipher_list) \
    LFUNC_FA_(OSSL_default_ciphersuites) \
    LFUNC_FA_(SSL_add_store_cert_subjects_to_stack) \
    LFUNC_FA_(SSL_CTX_set_default_verify_store) \
    LFUNC_FA_(SSL_CTX_load_verify_file) \
    LFUNC_FA_(SSL_CTX_load_verify_dir) \
    LFUNC_FA_(SSL_CTX_load_verify_store) \
    LFUNC_FA_(SSL_CTX_set_tlsext_ticket_key_evp_cb) \
    LFUNC_FA_(SSL_CTX_new_ex) \
    LFUNC_FA_(SSL_new_session_ticket) \
    LFUNC_FA_(SSL_get0_peer_certificate) \
    LFUNC_FA_(SSL_load_client_CA_file_ex) \
    LFUNC_FA_(SSL_set0_tmp_dh_pkey) \
    LFUNC_FA_(SSL_CTX_set0_tmp_dh_pkey) \
    LFUNC_FA_(SSL_group_to_name) \
    LFUNC_FA_(X509_CRL_load_http) \
    LFUNC_FA_(OSSL_HTTP_parse_url) \
    LFUNC_FA_(OSSL_HTTP_REQ_CTX_exchange) \
    LFUNC_FA_(OSSL_HTTP_REQ_CTX_new) \
    LFUNC_FA_(X509_load_http) \
    LFUNC_FA_(X509_NAME_hash_ex) \
    LFUNC_FA_(OSSL_HTTP_REQ_CTX_set_request_line) \
    LFUNC_FA_(OSSL_HTTP_REQ_CTX_set1_req) \
    LFUNC_FA_(EVP_MAC_CTX_new) \
    LFUNC_FA_(EVP_MAC_CTX_free) \
    LFUNC_FA_(EVP_MAC_CTX_dup) \
    LFUNC_FA_(EVP_MAC_CTX_get0_mac) \
    LFUNC_FA_(EVP_MAC_CTX_get_mac_size) \
    LFUNC_FA_(EVP_Q_mac) \
    LFUNC_FA_(EVP_MAC_init) \
    LFUNC_FA_(EVP_MAC_update) \
    LFUNC_FA_(EVP_MAC_final) \
    LFUNC_FA_(EVP_MAC_finalXOF) \
    LFUNC_FA_(OSSL_EC_curve_nid2name) \
    LFUNC_FA_(EVP_PKEY_digestsign_supports_digest) \
    LFUNC_FA_(SRP_VBASE_add0_user) \
    LFUNC_FA_(SRP_user_pwd_new) \
    LFUNC_FA_(SRP_user_pwd_set_gN) \
    LFUNC_FA_(SRP_user_pwd_set1_ids) \
    LFUNC_FA_(SRP_user_pwd_set0_sv) \
    LFUNC_FA_(OPENSSL_version_major) \
    LFUNC_FA_(OPENSSL_version_minor) \
    LFUNC_FA_(OPENSSL_version_patch) \
    LFUNC_FA_(OPENSSL_version_pre_release) \
    LFUNC_FA_(OPENSSL_version_build_metadata) \
    LFUNC_FA_(ASYNC_WAIT_CTX_get_callback) \
    LFUNC_FA_(ASYNC_WAIT_CTX_set_callback) \
    LFUNC_FA_(ASYNC_WAIT_CTX_set_status) \
    LFUNC_FA_(ASYNC_WAIT_CTX_get_status) \
    LFUNC_FA_(EVP_KDF_CTX_free) \
    LFUNC_FA_(EVP_KDF_CTX_reset) \
    LFUNC_FA_(EVP_KDF_CTX_get_kdf_size) \
    LFUNC_FA_(EVP_KDF_derive) \
    LFUNC_FA_(EVP_KDF_get0_name) \
    LFUNC_FA_(EC_GROUP_get0_field) \
    LFUNC_FA_(CRYPTO_alloc_ex_data) \
    LFUNC_FA_(OSSL_LIB_CTX_new) \
    LFUNC_FA_(OSSL_LIB_CTX_free) \
    LFUNC_FA_(OPENSSL_LH_flush) \
    LFUNC_FA_(BN_native2bn) \
    LFUNC_FA_(BN_bn2nativepad) \
    LFUNC_FA_(OSSL_trace_get_category_num) \
    LFUNC_FA_(OSSL_trace_get_category_name) \
    LFUNC_FA_(OSSL_trace_set_channel) \
    LFUNC_FA_(OSSL_trace_set_prefix) \
    LFUNC_FA_(OSSL_trace_set_suffix) \
    LFUNC_FA_(OSSL_trace_set_callback) \
    LFUNC_FA_(UNIMPLEMENTED) /* Reserved9 */ \
    LFUNC_FA_(UNIMPLEMENTED) /* Reserved10 */ \
    LFUNC_FA_(UNIMPLEMENTED) /* Reserved11 */ \
    LFUNC_FA_(UNIMPLEMENTED) /* Reserved12 */ \
    LFUNC_FA_(UNIMPLEMENTED) /* Reserved13 */ \
    LFUNC_FA_(UNIMPLEMENTED) /* Reserved14 */ \
    LFUNC_FA_(UNIMPLEMENTED) /* Reserved15 */ \
    LFUNC_FA_(UNIMPLEMENTED) /* Reserved16 */
#endif /* SDI_LIB_H */

#endif /* GLUE_AMISSL_H */
